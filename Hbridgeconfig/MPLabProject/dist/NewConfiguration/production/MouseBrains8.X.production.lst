

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Oct 27 12:26:42 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16LF1708
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=2,noexec
     7                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     9                           	psect	_HEF_persistent_state_text,global,class=STRCODE,delta=2,noexec
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    15                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    16                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    17                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    20                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    21                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    22                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    23                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    24                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,noexec
    25                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    26                           	psect	inittext,global,class=CODE,delta=2
    27                           	psect	clrtext,global,class=CODE,delta=2
    28                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    29                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    30                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    31                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    32                           	psect	text1,local,class=CODE,merge=1,delta=2
    33                           	psect	text2,local,class=CODE,merge=1,delta=2
    34                           	psect	text3,local,class=CODE,merge=1,delta=2
    35                           	psect	text4,local,class=CODE,merge=1,delta=2
    36                           	psect	text5,local,class=CODE,merge=1,delta=2
    37                           	psect	text6,local,class=CODE,merge=1,delta=2
    38                           	psect	text7,local,class=CODE,merge=1,delta=2
    39                           	psect	text8,local,class=CODE,merge=1,delta=2
    40                           	psect	text9,local,class=CODE,merge=1,delta=2
    41                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text12,local,class=CODE,merge=1,delta=2
    44                           	psect	text13,local,class=CODE,merge=1,delta=2
    45                           	psect	text14,local,class=CODE,merge=1,delta=2
    46                           	psect	text15,local,class=CODE,merge=1,delta=2
    47                           	psect	text16,local,class=CODE,merge=1,delta=2
    48                           	psect	text17,local,class=CODE,merge=1,delta=2
    49                           	psect	text18,local,class=CODE,merge=1,delta=2
    50                           	psect	text19,local,class=CODE,merge=1,delta=2,group=3
    51                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text22,local,class=CODE,merge=1,delta=2,group=3
    54                           	psect	text23,local,class=CODE,merge=1,delta=2
    55                           	psect	text24,local,class=CODE,merge=1,delta=2
    56                           	psect	text25,local,class=CODE,merge=1,delta=2
    57                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text27,local,class=CODE,merge=1,delta=2
    59                           	psect	text28,local,class=CODE,merge=1,delta=2
    60                           	psect	text29,local,class=CODE,merge=1,delta=2
    61                           	psect	text30,local,class=CODE,merge=1,delta=2
    62                           	psect	text31,local,class=CODE,merge=1,delta=2
    63                           	psect	text32,local,class=CODE,merge=1,delta=2
    64                           	psect	text33,local,class=CODE,merge=1,delta=2
    65                           	psect	text34,local,class=CODE,merge=1,delta=2
    66                           	psect	text35,local,class=CODE,merge=1,delta=2
    67                           	psect	text36,local,class=CODE,merge=1,delta=2
    68                           	psect	text37,local,class=CODE,merge=1,delta=2
    69                           	psect	text38,local,class=CODE,merge=1,delta=2
    70                           	psect	text39,local,class=CODE,merge=1,delta=2
    71                           	psect	text40,local,class=CODE,merge=1,delta=2
    72                           	psect	text41,local,class=CODE,merge=1,delta=2
    73                           	psect	text42,local,class=CODE,merge=1,delta=2
    74                           	psect	text43,local,class=CODE,merge=1,delta=2
    75                           	psect	text44,local,class=CODE,merge=1,delta=2
    76                           	psect	text45,local,class=CODE,merge=1,delta=2
    77                           	psect	text46,local,class=CODE,merge=1,delta=2
    78                           	psect	text47,local,class=CODE,merge=1,delta=2
    79                           	psect	text48,local,class=CODE,merge=1,delta=2
    80                           	psect	text49,local,class=CODE,merge=1,delta=2
    81                           	psect	text50,local,class=CODE,merge=1,delta=2
    82                           	psect	intentry,global,class=CODE,delta=2
    83                           	psect	text52,local,class=CODE,merge=1,delta=2
    84                           	psect	text53,local,class=CODE,merge=1,delta=2
    85                           	psect	text54,local,class=CODE,merge=1,delta=2
    86                           	psect	text55,local,class=CODE,merge=1,delta=2
    87                           	psect	text56,local,class=CODE,merge=1,delta=2
    88                           	psect	text57,local,class=CODE,merge=1,delta=2
    89                           	psect	text58,local,class=CODE,merge=1,delta=2
    90                           	psect	text59,local,class=CODE,merge=1,delta=2
    91                           	psect	text60,local,class=CODE,merge=1,delta=2
    92                           	psect	text61,local,class=CODE,merge=1,delta=2
    93                           	psect	text62,local,class=CODE,merge=1,delta=2
    94                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    95                           	dabs	1,0x7E,2
    96  0000                     
    97                           ; Version 2.32
    98                           ; Generated 02/02/2021 GMT
    99                           ; 
   100                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   101                           ; All rights reserved.
   102                           ; 
   103                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   104                           ; 
   105                           ; Redistribution and use in source and binary forms, with or without modification, are
   106                           ; permitted provided that the following conditions are met:
   107                           ; 
   108                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   109                           ;        conditions and the following disclaimer.
   110                           ; 
   111                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   112                           ;        of conditions and the following disclaimer in the documentation and/or other
   113                           ;        materials provided with the distribution. Publication is not required when
   114                           ;        this file is used in an embedded application.
   115                           ; 
   116                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   117                           ;        software without specific prior written permission.
   118                           ; 
   119                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   120                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   121                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   122                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   123                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   124                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   125                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   126                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   127                           ; 
   128                           ; 
   129                           ; Code-generator required, PIC16LF1708 Definitions
   130                           ; 
   131                           ; SFR Addresses
   132  0000                     	;# 
   133  0001                     	;# 
   134  0002                     	;# 
   135  0003                     	;# 
   136  0004                     	;# 
   137  0005                     	;# 
   138  0006                     	;# 
   139  0007                     	;# 
   140  0008                     	;# 
   141  0009                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000D                     	;# 
   146  000E                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0013                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0016                     	;# 
   153  0017                     	;# 
   154  0018                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001B                     	;# 
   158  001C                     	;# 
   159  008C                     	;# 
   160  008D                     	;# 
   161  008E                     	;# 
   162  0091                     	;# 
   163  0092                     	;# 
   164  0093                     	;# 
   165  0095                     	;# 
   166  0096                     	;# 
   167  0097                     	;# 
   168  0098                     	;# 
   169  0099                     	;# 
   170  009A                     	;# 
   171  009B                     	;# 
   172  009B                     	;# 
   173  009C                     	;# 
   174  009D                     	;# 
   175  009E                     	;# 
   176  009F                     	;# 
   177  010C                     	;# 
   178  010D                     	;# 
   179  010E                     	;# 
   180  0111                     	;# 
   181  0112                     	;# 
   182  0113                     	;# 
   183  0114                     	;# 
   184  0115                     	;# 
   185  0116                     	;# 
   186  0117                     	;# 
   187  0118                     	;# 
   188  0119                     	;# 
   189  011C                     	;# 
   190  018C                     	;# 
   191  018D                     	;# 
   192  018E                     	;# 
   193  0191                     	;# 
   194  0191                     	;# 
   195  0192                     	;# 
   196  0193                     	;# 
   197  0193                     	;# 
   198  0194                     	;# 
   199  0195                     	;# 
   200  0196                     	;# 
   201  0199                     	;# 
   202  0199                     	;# 
   203  0199                     	;# 
   204  019A                     	;# 
   205  019A                     	;# 
   206  019A                     	;# 
   207  019B                     	;# 
   208  019B                     	;# 
   209  019B                     	;# 
   210  019B                     	;# 
   211  019B                     	;# 
   212  019C                     	;# 
   213  019C                     	;# 
   214  019C                     	;# 
   215  019D                     	;# 
   216  019D                     	;# 
   217  019D                     	;# 
   218  019E                     	;# 
   219  019E                     	;# 
   220  019E                     	;# 
   221  019F                     	;# 
   222  019F                     	;# 
   223  019F                     	;# 
   224  019F                     	;# 
   225  019F                     	;# 
   226  020C                     	;# 
   227  020D                     	;# 
   228  020E                     	;# 
   229  0211                     	;# 
   230  0211                     	;# 
   231  0212                     	;# 
   232  0212                     	;# 
   233  0213                     	;# 
   234  0213                     	;# 
   235  0214                     	;# 
   236  0214                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0216                     	;# 
   242  0216                     	;# 
   243  0217                     	;# 
   244  0217                     	;# 
   245  028C                     	;# 
   246  028D                     	;# 
   247  028E                     	;# 
   248  0291                     	;# 
   249  0291                     	;# 
   250  0292                     	;# 
   251  0293                     	;# 
   252  0293                     	;# 
   253  0298                     	;# 
   254  0298                     	;# 
   255  0299                     	;# 
   256  029A                     	;# 
   257  029A                     	;# 
   258  029E                     	;# 
   259  030C                     	;# 
   260  030D                     	;# 
   261  030E                     	;# 
   262  038C                     	;# 
   263  038D                     	;# 
   264  038E                     	;# 
   265  0391                     	;# 
   266  0392                     	;# 
   267  0393                     	;# 
   268  0394                     	;# 
   269  0395                     	;# 
   270  0396                     	;# 
   271  0397                     	;# 
   272  0398                     	;# 
   273  0399                     	;# 
   274  0415                     	;# 
   275  0416                     	;# 
   276  0417                     	;# 
   277  041C                     	;# 
   278  041D                     	;# 
   279  041E                     	;# 
   280  0511                     	;# 
   281  0515                     	;# 
   282  0617                     	;# 
   283  0618                     	;# 
   284  0619                     	;# 
   285  0619                     	;# 
   286  061A                     	;# 
   287  061B                     	;# 
   288  061C                     	;# 
   289  061C                     	;# 
   290  0691                     	;# 
   291  0692                     	;# 
   292  0693                     	;# 
   293  0694                     	;# 
   294  0695                     	;# 
   295  0696                     	;# 
   296  0697                     	;# 
   297  0698                     	;# 
   298  0699                     	;# 
   299  069A                     	;# 
   300  069B                     	;# 
   301  069C                     	;# 
   302  069D                     	;# 
   303  069E                     	;# 
   304  069F                     	;# 
   305  0E0F                     	;# 
   306  0E10                     	;# 
   307  0E11                     	;# 
   308  0E12                     	;# 
   309  0E13                     	;# 
   310  0E14                     	;# 
   311  0E15                     	;# 
   312  0E17                     	;# 
   313  0E20                     	;# 
   314  0E21                     	;# 
   315  0E22                     	;# 
   316  0E24                     	;# 
   317  0E25                     	;# 
   318  0E28                     	;# 
   319  0E29                     	;# 
   320  0E2A                     	;# 
   321  0E2B                     	;# 
   322  0E90                     	;# 
   323  0E91                     	;# 
   324  0E92                     	;# 
   325  0E94                     	;# 
   326  0E95                     	;# 
   327  0E9C                     	;# 
   328  0E9D                     	;# 
   329  0E9E                     	;# 
   330  0E9F                     	;# 
   331  0EA0                     	;# 
   332  0EA1                     	;# 
   333  0EA2                     	;# 
   334  0EA3                     	;# 
   335  0EA4                     	;# 
   336  0EA5                     	;# 
   337  0EA6                     	;# 
   338  0EA7                     	;# 
   339  0F0F                     	;# 
   340  0F10                     	;# 
   341  0F11                     	;# 
   342  0F12                     	;# 
   343  0F13                     	;# 
   344  0F14                     	;# 
   345  0F15                     	;# 
   346  0F16                     	;# 
   347  0F17                     	;# 
   348  0F18                     	;# 
   349  0F19                     	;# 
   350  0F1A                     	;# 
   351  0F1B                     	;# 
   352  0F1C                     	;# 
   353  0F1D                     	;# 
   354  0F1E                     	;# 
   355  0F1F                     	;# 
   356  0F20                     	;# 
   357  0F21                     	;# 
   358  0F22                     	;# 
   359  0F23                     	;# 
   360  0F24                     	;# 
   361  0F25                     	;# 
   362  0F26                     	;# 
   363  0F27                     	;# 
   364  0F28                     	;# 
   365  0F29                     	;# 
   366  0F2A                     	;# 
   367  0F2B                     	;# 
   368  0F2C                     	;# 
   369  0F2D                     	;# 
   370  0FE4                     	;# 
   371  0FE5                     	;# 
   372  0FE6                     	;# 
   373  0FE7                     	;# 
   374  0FE8                     	;# 
   375  0FE9                     	;# 
   376  0FEA                     	;# 
   377  0FEB                     	;# 
   378  0FED                     	;# 
   379  0FEE                     	;# 
   380  0FEF                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  0011                     	;# 
   397  0012                     	;# 
   398  0013                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0016                     	;# 
   402  0017                     	;# 
   403  0018                     	;# 
   404  0019                     	;# 
   405  001A                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  008C                     	;# 
   409  008D                     	;# 
   410  008E                     	;# 
   411  0091                     	;# 
   412  0092                     	;# 
   413  0093                     	;# 
   414  0095                     	;# 
   415  0096                     	;# 
   416  0097                     	;# 
   417  0098                     	;# 
   418  0099                     	;# 
   419  009A                     	;# 
   420  009B                     	;# 
   421  009B                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009E                     	;# 
   425  009F                     	;# 
   426  010C                     	;# 
   427  010D                     	;# 
   428  010E                     	;# 
   429  0111                     	;# 
   430  0112                     	;# 
   431  0113                     	;# 
   432  0114                     	;# 
   433  0115                     	;# 
   434  0116                     	;# 
   435  0117                     	;# 
   436  0118                     	;# 
   437  0119                     	;# 
   438  011C                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  018E                     	;# 
   442  0191                     	;# 
   443  0191                     	;# 
   444  0192                     	;# 
   445  0193                     	;# 
   446  0193                     	;# 
   447  0194                     	;# 
   448  0195                     	;# 
   449  0196                     	;# 
   450  0199                     	;# 
   451  0199                     	;# 
   452  0199                     	;# 
   453  019A                     	;# 
   454  019A                     	;# 
   455  019A                     	;# 
   456  019B                     	;# 
   457  019B                     	;# 
   458  019B                     	;# 
   459  019B                     	;# 
   460  019B                     	;# 
   461  019C                     	;# 
   462  019C                     	;# 
   463  019C                     	;# 
   464  019D                     	;# 
   465  019D                     	;# 
   466  019D                     	;# 
   467  019E                     	;# 
   468  019E                     	;# 
   469  019E                     	;# 
   470  019F                     	;# 
   471  019F                     	;# 
   472  019F                     	;# 
   473  019F                     	;# 
   474  019F                     	;# 
   475  020C                     	;# 
   476  020D                     	;# 
   477  020E                     	;# 
   478  0211                     	;# 
   479  0211                     	;# 
   480  0212                     	;# 
   481  0212                     	;# 
   482  0213                     	;# 
   483  0213                     	;# 
   484  0214                     	;# 
   485  0214                     	;# 
   486  0215                     	;# 
   487  0215                     	;# 
   488  0215                     	;# 
   489  0215                     	;# 
   490  0216                     	;# 
   491  0216                     	;# 
   492  0217                     	;# 
   493  0217                     	;# 
   494  028C                     	;# 
   495  028D                     	;# 
   496  028E                     	;# 
   497  0291                     	;# 
   498  0291                     	;# 
   499  0292                     	;# 
   500  0293                     	;# 
   501  0293                     	;# 
   502  0298                     	;# 
   503  0298                     	;# 
   504  0299                     	;# 
   505  029A                     	;# 
   506  029A                     	;# 
   507  029E                     	;# 
   508  030C                     	;# 
   509  030D                     	;# 
   510  030E                     	;# 
   511  038C                     	;# 
   512  038D                     	;# 
   513  038E                     	;# 
   514  0391                     	;# 
   515  0392                     	;# 
   516  0393                     	;# 
   517  0394                     	;# 
   518  0395                     	;# 
   519  0396                     	;# 
   520  0397                     	;# 
   521  0398                     	;# 
   522  0399                     	;# 
   523  0415                     	;# 
   524  0416                     	;# 
   525  0417                     	;# 
   526  041C                     	;# 
   527  041D                     	;# 
   528  041E                     	;# 
   529  0511                     	;# 
   530  0515                     	;# 
   531  0617                     	;# 
   532  0618                     	;# 
   533  0619                     	;# 
   534  0619                     	;# 
   535  061A                     	;# 
   536  061B                     	;# 
   537  061C                     	;# 
   538  061C                     	;# 
   539  0691                     	;# 
   540  0692                     	;# 
   541  0693                     	;# 
   542  0694                     	;# 
   543  0695                     	;# 
   544  0696                     	;# 
   545  0697                     	;# 
   546  0698                     	;# 
   547  0699                     	;# 
   548  069A                     	;# 
   549  069B                     	;# 
   550  069C                     	;# 
   551  069D                     	;# 
   552  069E                     	;# 
   553  069F                     	;# 
   554  0E0F                     	;# 
   555  0E10                     	;# 
   556  0E11                     	;# 
   557  0E12                     	;# 
   558  0E13                     	;# 
   559  0E14                     	;# 
   560  0E15                     	;# 
   561  0E17                     	;# 
   562  0E20                     	;# 
   563  0E21                     	;# 
   564  0E22                     	;# 
   565  0E24                     	;# 
   566  0E25                     	;# 
   567  0E28                     	;# 
   568  0E29                     	;# 
   569  0E2A                     	;# 
   570  0E2B                     	;# 
   571  0E90                     	;# 
   572  0E91                     	;# 
   573  0E92                     	;# 
   574  0E94                     	;# 
   575  0E95                     	;# 
   576  0E9C                     	;# 
   577  0E9D                     	;# 
   578  0E9E                     	;# 
   579  0E9F                     	;# 
   580  0EA0                     	;# 
   581  0EA1                     	;# 
   582  0EA2                     	;# 
   583  0EA3                     	;# 
   584  0EA4                     	;# 
   585  0EA5                     	;# 
   586  0EA6                     	;# 
   587  0EA7                     	;# 
   588  0F0F                     	;# 
   589  0F10                     	;# 
   590  0F11                     	;# 
   591  0F12                     	;# 
   592  0F13                     	;# 
   593  0F14                     	;# 
   594  0F15                     	;# 
   595  0F16                     	;# 
   596  0F17                     	;# 
   597  0F18                     	;# 
   598  0F19                     	;# 
   599  0F1A                     	;# 
   600  0F1B                     	;# 
   601  0F1C                     	;# 
   602  0F1D                     	;# 
   603  0F1E                     	;# 
   604  0F1F                     	;# 
   605  0F20                     	;# 
   606  0F21                     	;# 
   607  0F22                     	;# 
   608  0F23                     	;# 
   609  0F24                     	;# 
   610  0F25                     	;# 
   611  0F26                     	;# 
   612  0F27                     	;# 
   613  0F28                     	;# 
   614  0F29                     	;# 
   615  0F2A                     	;# 
   616  0F2B                     	;# 
   617  0F2C                     	;# 
   618  0F2D                     	;# 
   619  0FE4                     	;# 
   620  0FE5                     	;# 
   621  0FE6                     	;# 
   622  0FE7                     	;# 
   623  0FE8                     	;# 
   624  0FE9                     	;# 
   625  0FEA                     	;# 
   626  0FEB                     	;# 
   627  0FED                     	;# 
   628  0FEE                     	;# 
   629  0FEF                     	;# 
   630  0000                     	;# 
   631  0001                     	;# 
   632  0002                     	;# 
   633  0003                     	;# 
   634  0004                     	;# 
   635  0005                     	;# 
   636  0006                     	;# 
   637  0007                     	;# 
   638  0008                     	;# 
   639  0009                     	;# 
   640  000A                     	;# 
   641  000B                     	;# 
   642  000C                     	;# 
   643  000D                     	;# 
   644  000E                     	;# 
   645  0011                     	;# 
   646  0012                     	;# 
   647  0013                     	;# 
   648  0015                     	;# 
   649  0016                     	;# 
   650  0016                     	;# 
   651  0017                     	;# 
   652  0018                     	;# 
   653  0019                     	;# 
   654  001A                     	;# 
   655  001B                     	;# 
   656  001C                     	;# 
   657  008C                     	;# 
   658  008D                     	;# 
   659  008E                     	;# 
   660  0091                     	;# 
   661  0092                     	;# 
   662  0093                     	;# 
   663  0095                     	;# 
   664  0096                     	;# 
   665  0097                     	;# 
   666  0098                     	;# 
   667  0099                     	;# 
   668  009A                     	;# 
   669  009B                     	;# 
   670  009B                     	;# 
   671  009C                     	;# 
   672  009D                     	;# 
   673  009E                     	;# 
   674  009F                     	;# 
   675  010C                     	;# 
   676  010D                     	;# 
   677  010E                     	;# 
   678  0111                     	;# 
   679  0112                     	;# 
   680  0113                     	;# 
   681  0114                     	;# 
   682  0115                     	;# 
   683  0116                     	;# 
   684  0117                     	;# 
   685  0118                     	;# 
   686  0119                     	;# 
   687  011C                     	;# 
   688  018C                     	;# 
   689  018D                     	;# 
   690  018E                     	;# 
   691  0191                     	;# 
   692  0191                     	;# 
   693  0192                     	;# 
   694  0193                     	;# 
   695  0193                     	;# 
   696  0194                     	;# 
   697  0195                     	;# 
   698  0196                     	;# 
   699  0199                     	;# 
   700  0199                     	;# 
   701  0199                     	;# 
   702  019A                     	;# 
   703  019A                     	;# 
   704  019A                     	;# 
   705  019B                     	;# 
   706  019B                     	;# 
   707  019B                     	;# 
   708  019B                     	;# 
   709  019B                     	;# 
   710  019C                     	;# 
   711  019C                     	;# 
   712  019C                     	;# 
   713  019D                     	;# 
   714  019D                     	;# 
   715  019D                     	;# 
   716  019E                     	;# 
   717  019E                     	;# 
   718  019E                     	;# 
   719  019F                     	;# 
   720  019F                     	;# 
   721  019F                     	;# 
   722  019F                     	;# 
   723  019F                     	;# 
   724  020C                     	;# 
   725  020D                     	;# 
   726  020E                     	;# 
   727  0211                     	;# 
   728  0211                     	;# 
   729  0212                     	;# 
   730  0212                     	;# 
   731  0213                     	;# 
   732  0213                     	;# 
   733  0214                     	;# 
   734  0214                     	;# 
   735  0215                     	;# 
   736  0215                     	;# 
   737  0215                     	;# 
   738  0215                     	;# 
   739  0216                     	;# 
   740  0216                     	;# 
   741  0217                     	;# 
   742  0217                     	;# 
   743  028C                     	;# 
   744  028D                     	;# 
   745  028E                     	;# 
   746  0291                     	;# 
   747  0291                     	;# 
   748  0292                     	;# 
   749  0293                     	;# 
   750  0293                     	;# 
   751  0298                     	;# 
   752  0298                     	;# 
   753  0299                     	;# 
   754  029A                     	;# 
   755  029A                     	;# 
   756  029E                     	;# 
   757  030C                     	;# 
   758  030D                     	;# 
   759  030E                     	;# 
   760  038C                     	;# 
   761  038D                     	;# 
   762  038E                     	;# 
   763  0391                     	;# 
   764  0392                     	;# 
   765  0393                     	;# 
   766  0394                     	;# 
   767  0395                     	;# 
   768  0396                     	;# 
   769  0397                     	;# 
   770  0398                     	;# 
   771  0399                     	;# 
   772  0415                     	;# 
   773  0416                     	;# 
   774  0417                     	;# 
   775  041C                     	;# 
   776  041D                     	;# 
   777  041E                     	;# 
   778  0511                     	;# 
   779  0515                     	;# 
   780  0617                     	;# 
   781  0618                     	;# 
   782  0619                     	;# 
   783  0619                     	;# 
   784  061A                     	;# 
   785  061B                     	;# 
   786  061C                     	;# 
   787  061C                     	;# 
   788  0691                     	;# 
   789  0692                     	;# 
   790  0693                     	;# 
   791  0694                     	;# 
   792  0695                     	;# 
   793  0696                     	;# 
   794  0697                     	;# 
   795  0698                     	;# 
   796  0699                     	;# 
   797  069A                     	;# 
   798  069B                     	;# 
   799  069C                     	;# 
   800  069D                     	;# 
   801  069E                     	;# 
   802  069F                     	;# 
   803  0E0F                     	;# 
   804  0E10                     	;# 
   805  0E11                     	;# 
   806  0E12                     	;# 
   807  0E13                     	;# 
   808  0E14                     	;# 
   809  0E15                     	;# 
   810  0E17                     	;# 
   811  0E20                     	;# 
   812  0E21                     	;# 
   813  0E22                     	;# 
   814  0E24                     	;# 
   815  0E25                     	;# 
   816  0E28                     	;# 
   817  0E29                     	;# 
   818  0E2A                     	;# 
   819  0E2B                     	;# 
   820  0E90                     	;# 
   821  0E91                     	;# 
   822  0E92                     	;# 
   823  0E94                     	;# 
   824  0E95                     	;# 
   825  0E9C                     	;# 
   826  0E9D                     	;# 
   827  0E9E                     	;# 
   828  0E9F                     	;# 
   829  0EA0                     	;# 
   830  0EA1                     	;# 
   831  0EA2                     	;# 
   832  0EA3                     	;# 
   833  0EA4                     	;# 
   834  0EA5                     	;# 
   835  0EA6                     	;# 
   836  0EA7                     	;# 
   837  0F0F                     	;# 
   838  0F10                     	;# 
   839  0F11                     	;# 
   840  0F12                     	;# 
   841  0F13                     	;# 
   842  0F14                     	;# 
   843  0F15                     	;# 
   844  0F16                     	;# 
   845  0F17                     	;# 
   846  0F18                     	;# 
   847  0F19                     	;# 
   848  0F1A                     	;# 
   849  0F1B                     	;# 
   850  0F1C                     	;# 
   851  0F1D                     	;# 
   852  0F1E                     	;# 
   853  0F1F                     	;# 
   854  0F20                     	;# 
   855  0F21                     	;# 
   856  0F22                     	;# 
   857  0F23                     	;# 
   858  0F24                     	;# 
   859  0F25                     	;# 
   860  0F26                     	;# 
   861  0F27                     	;# 
   862  0F28                     	;# 
   863  0F29                     	;# 
   864  0F2A                     	;# 
   865  0F2B                     	;# 
   866  0F2C                     	;# 
   867  0F2D                     	;# 
   868  0FE4                     	;# 
   869  0FE5                     	;# 
   870  0FE6                     	;# 
   871  0FE7                     	;# 
   872  0FE8                     	;# 
   873  0FE9                     	;# 
   874  0FEA                     	;# 
   875  0FEB                     	;# 
   876  0FED                     	;# 
   877  0FEE                     	;# 
   878  0FEF                     	;# 
   879  0000                     	;# 
   880  0001                     	;# 
   881  0002                     	;# 
   882  0003                     	;# 
   883  0004                     	;# 
   884  0005                     	;# 
   885  0006                     	;# 
   886  0007                     	;# 
   887  0008                     	;# 
   888  0009                     	;# 
   889  000A                     	;# 
   890  000B                     	;# 
   891  000C                     	;# 
   892  000D                     	;# 
   893  000E                     	;# 
   894  0011                     	;# 
   895  0012                     	;# 
   896  0013                     	;# 
   897  0015                     	;# 
   898  0016                     	;# 
   899  0016                     	;# 
   900  0017                     	;# 
   901  0018                     	;# 
   902  0019                     	;# 
   903  001A                     	;# 
   904  001B                     	;# 
   905  001C                     	;# 
   906  008C                     	;# 
   907  008D                     	;# 
   908  008E                     	;# 
   909  0091                     	;# 
   910  0092                     	;# 
   911  0093                     	;# 
   912  0095                     	;# 
   913  0096                     	;# 
   914  0097                     	;# 
   915  0098                     	;# 
   916  0099                     	;# 
   917  009A                     	;# 
   918  009B                     	;# 
   919  009B                     	;# 
   920  009C                     	;# 
   921  009D                     	;# 
   922  009E                     	;# 
   923  009F                     	;# 
   924  010C                     	;# 
   925  010D                     	;# 
   926  010E                     	;# 
   927  0111                     	;# 
   928  0112                     	;# 
   929  0113                     	;# 
   930  0114                     	;# 
   931  0115                     	;# 
   932  0116                     	;# 
   933  0117                     	;# 
   934  0118                     	;# 
   935  0119                     	;# 
   936  011C                     	;# 
   937  018C                     	;# 
   938  018D                     	;# 
   939  018E                     	;# 
   940  0191                     	;# 
   941  0191                     	;# 
   942  0192                     	;# 
   943  0193                     	;# 
   944  0193                     	;# 
   945  0194                     	;# 
   946  0195                     	;# 
   947  0196                     	;# 
   948  0199                     	;# 
   949  0199                     	;# 
   950  0199                     	;# 
   951  019A                     	;# 
   952  019A                     	;# 
   953  019A                     	;# 
   954  019B                     	;# 
   955  019B                     	;# 
   956  019B                     	;# 
   957  019B                     	;# 
   958  019B                     	;# 
   959  019C                     	;# 
   960  019C                     	;# 
   961  019C                     	;# 
   962  019D                     	;# 
   963  019D                     	;# 
   964  019D                     	;# 
   965  019E                     	;# 
   966  019E                     	;# 
   967  019E                     	;# 
   968  019F                     	;# 
   969  019F                     	;# 
   970  019F                     	;# 
   971  019F                     	;# 
   972  019F                     	;# 
   973  020C                     	;# 
   974  020D                     	;# 
   975  020E                     	;# 
   976  0211                     	;# 
   977  0211                     	;# 
   978  0212                     	;# 
   979  0212                     	;# 
   980  0213                     	;# 
   981  0213                     	;# 
   982  0214                     	;# 
   983  0214                     	;# 
   984  0215                     	;# 
   985  0215                     	;# 
   986  0215                     	;# 
   987  0215                     	;# 
   988  0216                     	;# 
   989  0216                     	;# 
   990  0217                     	;# 
   991  0217                     	;# 
   992  028C                     	;# 
   993  028D                     	;# 
   994  028E                     	;# 
   995  0291                     	;# 
   996  0291                     	;# 
   997  0292                     	;# 
   998  0293                     	;# 
   999  0293                     	;# 
  1000  0298                     	;# 
  1001  0298                     	;# 
  1002  0299                     	;# 
  1003  029A                     	;# 
  1004  029A                     	;# 
  1005  029E                     	;# 
  1006  030C                     	;# 
  1007  030D                     	;# 
  1008  030E                     	;# 
  1009  038C                     	;# 
  1010  038D                     	;# 
  1011  038E                     	;# 
  1012  0391                     	;# 
  1013  0392                     	;# 
  1014  0393                     	;# 
  1015  0394                     	;# 
  1016  0395                     	;# 
  1017  0396                     	;# 
  1018  0397                     	;# 
  1019  0398                     	;# 
  1020  0399                     	;# 
  1021  0415                     	;# 
  1022  0416                     	;# 
  1023  0417                     	;# 
  1024  041C                     	;# 
  1025  041D                     	;# 
  1026  041E                     	;# 
  1027  0511                     	;# 
  1028  0515                     	;# 
  1029  0617                     	;# 
  1030  0618                     	;# 
  1031  0619                     	;# 
  1032  0619                     	;# 
  1033  061A                     	;# 
  1034  061B                     	;# 
  1035  061C                     	;# 
  1036  061C                     	;# 
  1037  0691                     	;# 
  1038  0692                     	;# 
  1039  0693                     	;# 
  1040  0694                     	;# 
  1041  0695                     	;# 
  1042  0696                     	;# 
  1043  0697                     	;# 
  1044  0698                     	;# 
  1045  0699                     	;# 
  1046  069A                     	;# 
  1047  069B                     	;# 
  1048  069C                     	;# 
  1049  069D                     	;# 
  1050  069E                     	;# 
  1051  069F                     	;# 
  1052  0E0F                     	;# 
  1053  0E10                     	;# 
  1054  0E11                     	;# 
  1055  0E12                     	;# 
  1056  0E13                     	;# 
  1057  0E14                     	;# 
  1058  0E15                     	;# 
  1059  0E17                     	;# 
  1060  0E20                     	;# 
  1061  0E21                     	;# 
  1062  0E22                     	;# 
  1063  0E24                     	;# 
  1064  0E25                     	;# 
  1065  0E28                     	;# 
  1066  0E29                     	;# 
  1067  0E2A                     	;# 
  1068  0E2B                     	;# 
  1069  0E90                     	;# 
  1070  0E91                     	;# 
  1071  0E92                     	;# 
  1072  0E94                     	;# 
  1073  0E95                     	;# 
  1074  0E9C                     	;# 
  1075  0E9D                     	;# 
  1076  0E9E                     	;# 
  1077  0E9F                     	;# 
  1078  0EA0                     	;# 
  1079  0EA1                     	;# 
  1080  0EA2                     	;# 
  1081  0EA3                     	;# 
  1082  0EA4                     	;# 
  1083  0EA5                     	;# 
  1084  0EA6                     	;# 
  1085  0EA7                     	;# 
  1086  0F0F                     	;# 
  1087  0F10                     	;# 
  1088  0F11                     	;# 
  1089  0F12                     	;# 
  1090  0F13                     	;# 
  1091  0F14                     	;# 
  1092  0F15                     	;# 
  1093  0F16                     	;# 
  1094  0F17                     	;# 
  1095  0F18                     	;# 
  1096  0F19                     	;# 
  1097  0F1A                     	;# 
  1098  0F1B                     	;# 
  1099  0F1C                     	;# 
  1100  0F1D                     	;# 
  1101  0F1E                     	;# 
  1102  0F1F                     	;# 
  1103  0F20                     	;# 
  1104  0F21                     	;# 
  1105  0F22                     	;# 
  1106  0F23                     	;# 
  1107  0F24                     	;# 
  1108  0F25                     	;# 
  1109  0F26                     	;# 
  1110  0F27                     	;# 
  1111  0F28                     	;# 
  1112  0F29                     	;# 
  1113  0F2A                     	;# 
  1114  0F2B                     	;# 
  1115  0F2C                     	;# 
  1116  0F2D                     	;# 
  1117  0FE4                     	;# 
  1118  0FE5                     	;# 
  1119  0FE6                     	;# 
  1120  0FE7                     	;# 
  1121  0FE8                     	;# 
  1122  0FE9                     	;# 
  1123  0FEA                     	;# 
  1124  0FEB                     	;# 
  1125  0FED                     	;# 
  1126  0FEE                     	;# 
  1127  0FEF                     	;# 
  1128  0000                     	;# 
  1129  0001                     	;# 
  1130  0002                     	;# 
  1131  0003                     	;# 
  1132  0004                     	;# 
  1133  0005                     	;# 
  1134  0006                     	;# 
  1135  0007                     	;# 
  1136  0008                     	;# 
  1137  0009                     	;# 
  1138  000A                     	;# 
  1139  000B                     	;# 
  1140  000C                     	;# 
  1141  000D                     	;# 
  1142  000E                     	;# 
  1143  0011                     	;# 
  1144  0012                     	;# 
  1145  0013                     	;# 
  1146  0015                     	;# 
  1147  0016                     	;# 
  1148  0016                     	;# 
  1149  0017                     	;# 
  1150  0018                     	;# 
  1151  0019                     	;# 
  1152  001A                     	;# 
  1153  001B                     	;# 
  1154  001C                     	;# 
  1155  008C                     	;# 
  1156  008D                     	;# 
  1157  008E                     	;# 
  1158  0091                     	;# 
  1159  0092                     	;# 
  1160  0093                     	;# 
  1161  0095                     	;# 
  1162  0096                     	;# 
  1163  0097                     	;# 
  1164  0098                     	;# 
  1165  0099                     	;# 
  1166  009A                     	;# 
  1167  009B                     	;# 
  1168  009B                     	;# 
  1169  009C                     	;# 
  1170  009D                     	;# 
  1171  009E                     	;# 
  1172  009F                     	;# 
  1173  010C                     	;# 
  1174  010D                     	;# 
  1175  010E                     	;# 
  1176  0111                     	;# 
  1177  0112                     	;# 
  1178  0113                     	;# 
  1179  0114                     	;# 
  1180  0115                     	;# 
  1181  0116                     	;# 
  1182  0117                     	;# 
  1183  0118                     	;# 
  1184  0119                     	;# 
  1185  011C                     	;# 
  1186  018C                     	;# 
  1187  018D                     	;# 
  1188  018E                     	;# 
  1189  0191                     	;# 
  1190  0191                     	;# 
  1191  0192                     	;# 
  1192  0193                     	;# 
  1193  0193                     	;# 
  1194  0194                     	;# 
  1195  0195                     	;# 
  1196  0196                     	;# 
  1197  0199                     	;# 
  1198  0199                     	;# 
  1199  0199                     	;# 
  1200  019A                     	;# 
  1201  019A                     	;# 
  1202  019A                     	;# 
  1203  019B                     	;# 
  1204  019B                     	;# 
  1205  019B                     	;# 
  1206  019B                     	;# 
  1207  019B                     	;# 
  1208  019C                     	;# 
  1209  019C                     	;# 
  1210  019C                     	;# 
  1211  019D                     	;# 
  1212  019D                     	;# 
  1213  019D                     	;# 
  1214  019E                     	;# 
  1215  019E                     	;# 
  1216  019E                     	;# 
  1217  019F                     	;# 
  1218  019F                     	;# 
  1219  019F                     	;# 
  1220  019F                     	;# 
  1221  019F                     	;# 
  1222  020C                     	;# 
  1223  020D                     	;# 
  1224  020E                     	;# 
  1225  0211                     	;# 
  1226  0211                     	;# 
  1227  0212                     	;# 
  1228  0212                     	;# 
  1229  0213                     	;# 
  1230  0213                     	;# 
  1231  0214                     	;# 
  1232  0214                     	;# 
  1233  0215                     	;# 
  1234  0215                     	;# 
  1235  0215                     	;# 
  1236  0215                     	;# 
  1237  0216                     	;# 
  1238  0216                     	;# 
  1239  0217                     	;# 
  1240  0217                     	;# 
  1241  028C                     	;# 
  1242  028D                     	;# 
  1243  028E                     	;# 
  1244  0291                     	;# 
  1245  0291                     	;# 
  1246  0292                     	;# 
  1247  0293                     	;# 
  1248  0293                     	;# 
  1249  0298                     	;# 
  1250  0298                     	;# 
  1251  0299                     	;# 
  1252  029A                     	;# 
  1253  029A                     	;# 
  1254  029E                     	;# 
  1255  030C                     	;# 
  1256  030D                     	;# 
  1257  030E                     	;# 
  1258  038C                     	;# 
  1259  038D                     	;# 
  1260  038E                     	;# 
  1261  0391                     	;# 
  1262  0392                     	;# 
  1263  0393                     	;# 
  1264  0394                     	;# 
  1265  0395                     	;# 
  1266  0396                     	;# 
  1267  0397                     	;# 
  1268  0398                     	;# 
  1269  0399                     	;# 
  1270  0415                     	;# 
  1271  0416                     	;# 
  1272  0417                     	;# 
  1273  041C                     	;# 
  1274  041D                     	;# 
  1275  041E                     	;# 
  1276  0511                     	;# 
  1277  0515                     	;# 
  1278  0617                     	;# 
  1279  0618                     	;# 
  1280  0619                     	;# 
  1281  0619                     	;# 
  1282  061A                     	;# 
  1283  061B                     	;# 
  1284  061C                     	;# 
  1285  061C                     	;# 
  1286  0691                     	;# 
  1287  0692                     	;# 
  1288  0693                     	;# 
  1289  0694                     	;# 
  1290  0695                     	;# 
  1291  0696                     	;# 
  1292  0697                     	;# 
  1293  0698                     	;# 
  1294  0699                     	;# 
  1295  069A                     	;# 
  1296  069B                     	;# 
  1297  069C                     	;# 
  1298  069D                     	;# 
  1299  069E                     	;# 
  1300  069F                     	;# 
  1301  0E0F                     	;# 
  1302  0E10                     	;# 
  1303  0E11                     	;# 
  1304  0E12                     	;# 
  1305  0E13                     	;# 
  1306  0E14                     	;# 
  1307  0E15                     	;# 
  1308  0E17                     	;# 
  1309  0E20                     	;# 
  1310  0E21                     	;# 
  1311  0E22                     	;# 
  1312  0E24                     	;# 
  1313  0E25                     	;# 
  1314  0E28                     	;# 
  1315  0E29                     	;# 
  1316  0E2A                     	;# 
  1317  0E2B                     	;# 
  1318  0E90                     	;# 
  1319  0E91                     	;# 
  1320  0E92                     	;# 
  1321  0E94                     	;# 
  1322  0E95                     	;# 
  1323  0E9C                     	;# 
  1324  0E9D                     	;# 
  1325  0E9E                     	;# 
  1326  0E9F                     	;# 
  1327  0EA0                     	;# 
  1328  0EA1                     	;# 
  1329  0EA2                     	;# 
  1330  0EA3                     	;# 
  1331  0EA4                     	;# 
  1332  0EA5                     	;# 
  1333  0EA6                     	;# 
  1334  0EA7                     	;# 
  1335  0F0F                     	;# 
  1336  0F10                     	;# 
  1337  0F11                     	;# 
  1338  0F12                     	;# 
  1339  0F13                     	;# 
  1340  0F14                     	;# 
  1341  0F15                     	;# 
  1342  0F16                     	;# 
  1343  0F17                     	;# 
  1344  0F18                     	;# 
  1345  0F19                     	;# 
  1346  0F1A                     	;# 
  1347  0F1B                     	;# 
  1348  0F1C                     	;# 
  1349  0F1D                     	;# 
  1350  0F1E                     	;# 
  1351  0F1F                     	;# 
  1352  0F20                     	;# 
  1353  0F21                     	;# 
  1354  0F22                     	;# 
  1355  0F23                     	;# 
  1356  0F24                     	;# 
  1357  0F25                     	;# 
  1358  0F26                     	;# 
  1359  0F27                     	;# 
  1360  0F28                     	;# 
  1361  0F29                     	;# 
  1362  0F2A                     	;# 
  1363  0F2B                     	;# 
  1364  0F2C                     	;# 
  1365  0F2D                     	;# 
  1366  0FE4                     	;# 
  1367  0FE5                     	;# 
  1368  0FE6                     	;# 
  1369  0FE7                     	;# 
  1370  0FE8                     	;# 
  1371  0FE9                     	;# 
  1372  0FEA                     	;# 
  1373  0FEB                     	;# 
  1374  0FED                     	;# 
  1375  0FEE                     	;# 
  1376  0FEF                     	;# 
  1377  0000                     	;# 
  1378  0001                     	;# 
  1379  0002                     	;# 
  1380  0003                     	;# 
  1381  0004                     	;# 
  1382  0005                     	;# 
  1383  0006                     	;# 
  1384  0007                     	;# 
  1385  0008                     	;# 
  1386  0009                     	;# 
  1387  000A                     	;# 
  1388  000B                     	;# 
  1389  000C                     	;# 
  1390  000D                     	;# 
  1391  000E                     	;# 
  1392  0011                     	;# 
  1393  0012                     	;# 
  1394  0013                     	;# 
  1395  0015                     	;# 
  1396  0016                     	;# 
  1397  0016                     	;# 
  1398  0017                     	;# 
  1399  0018                     	;# 
  1400  0019                     	;# 
  1401  001A                     	;# 
  1402  001B                     	;# 
  1403  001C                     	;# 
  1404  008C                     	;# 
  1405  008D                     	;# 
  1406  008E                     	;# 
  1407  0091                     	;# 
  1408  0092                     	;# 
  1409  0093                     	;# 
  1410  0095                     	;# 
  1411  0096                     	;# 
  1412  0097                     	;# 
  1413  0098                     	;# 
  1414  0099                     	;# 
  1415  009A                     	;# 
  1416  009B                     	;# 
  1417  009B                     	;# 
  1418  009C                     	;# 
  1419  009D                     	;# 
  1420  009E                     	;# 
  1421  009F                     	;# 
  1422  010C                     	;# 
  1423  010D                     	;# 
  1424  010E                     	;# 
  1425  0111                     	;# 
  1426  0112                     	;# 
  1427  0113                     	;# 
  1428  0114                     	;# 
  1429  0115                     	;# 
  1430  0116                     	;# 
  1431  0117                     	;# 
  1432  0118                     	;# 
  1433  0119                     	;# 
  1434  011C                     	;# 
  1435  018C                     	;# 
  1436  018D                     	;# 
  1437  018E                     	;# 
  1438  0191                     	;# 
  1439  0191                     	;# 
  1440  0192                     	;# 
  1441  0193                     	;# 
  1442  0193                     	;# 
  1443  0194                     	;# 
  1444  0195                     	;# 
  1445  0196                     	;# 
  1446  0199                     	;# 
  1447  0199                     	;# 
  1448  0199                     	;# 
  1449  019A                     	;# 
  1450  019A                     	;# 
  1451  019A                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019B                     	;# 
  1456  019B                     	;# 
  1457  019C                     	;# 
  1458  019C                     	;# 
  1459  019C                     	;# 
  1460  019D                     	;# 
  1461  019D                     	;# 
  1462  019D                     	;# 
  1463  019E                     	;# 
  1464  019E                     	;# 
  1465  019E                     	;# 
  1466  019F                     	;# 
  1467  019F                     	;# 
  1468  019F                     	;# 
  1469  019F                     	;# 
  1470  019F                     	;# 
  1471  020C                     	;# 
  1472  020D                     	;# 
  1473  020E                     	;# 
  1474  0211                     	;# 
  1475  0211                     	;# 
  1476  0212                     	;# 
  1477  0212                     	;# 
  1478  0213                     	;# 
  1479  0213                     	;# 
  1480  0214                     	;# 
  1481  0214                     	;# 
  1482  0215                     	;# 
  1483  0215                     	;# 
  1484  0215                     	;# 
  1485  0215                     	;# 
  1486  0216                     	;# 
  1487  0216                     	;# 
  1488  0217                     	;# 
  1489  0217                     	;# 
  1490  028C                     	;# 
  1491  028D                     	;# 
  1492  028E                     	;# 
  1493  0291                     	;# 
  1494  0291                     	;# 
  1495  0292                     	;# 
  1496  0293                     	;# 
  1497  0293                     	;# 
  1498  0298                     	;# 
  1499  0298                     	;# 
  1500  0299                     	;# 
  1501  029A                     	;# 
  1502  029A                     	;# 
  1503  029E                     	;# 
  1504  030C                     	;# 
  1505  030D                     	;# 
  1506  030E                     	;# 
  1507  038C                     	;# 
  1508  038D                     	;# 
  1509  038E                     	;# 
  1510  0391                     	;# 
  1511  0392                     	;# 
  1512  0393                     	;# 
  1513  0394                     	;# 
  1514  0395                     	;# 
  1515  0396                     	;# 
  1516  0397                     	;# 
  1517  0398                     	;# 
  1518  0399                     	;# 
  1519  0415                     	;# 
  1520  0416                     	;# 
  1521  0417                     	;# 
  1522  041C                     	;# 
  1523  041D                     	;# 
  1524  041E                     	;# 
  1525  0511                     	;# 
  1526  0515                     	;# 
  1527  0617                     	;# 
  1528  0618                     	;# 
  1529  0619                     	;# 
  1530  0619                     	;# 
  1531  061A                     	;# 
  1532  061B                     	;# 
  1533  061C                     	;# 
  1534  061C                     	;# 
  1535  0691                     	;# 
  1536  0692                     	;# 
  1537  0693                     	;# 
  1538  0694                     	;# 
  1539  0695                     	;# 
  1540  0696                     	;# 
  1541  0697                     	;# 
  1542  0698                     	;# 
  1543  0699                     	;# 
  1544  069A                     	;# 
  1545  069B                     	;# 
  1546  069C                     	;# 
  1547  069D                     	;# 
  1548  069E                     	;# 
  1549  069F                     	;# 
  1550  0E0F                     	;# 
  1551  0E10                     	;# 
  1552  0E11                     	;# 
  1553  0E12                     	;# 
  1554  0E13                     	;# 
  1555  0E14                     	;# 
  1556  0E15                     	;# 
  1557  0E17                     	;# 
  1558  0E20                     	;# 
  1559  0E21                     	;# 
  1560  0E22                     	;# 
  1561  0E24                     	;# 
  1562  0E25                     	;# 
  1563  0E28                     	;# 
  1564  0E29                     	;# 
  1565  0E2A                     	;# 
  1566  0E2B                     	;# 
  1567  0E90                     	;# 
  1568  0E91                     	;# 
  1569  0E92                     	;# 
  1570  0E94                     	;# 
  1571  0E95                     	;# 
  1572  0E9C                     	;# 
  1573  0E9D                     	;# 
  1574  0E9E                     	;# 
  1575  0E9F                     	;# 
  1576  0EA0                     	;# 
  1577  0EA1                     	;# 
  1578  0EA2                     	;# 
  1579  0EA3                     	;# 
  1580  0EA4                     	;# 
  1581  0EA5                     	;# 
  1582  0EA6                     	;# 
  1583  0EA7                     	;# 
  1584  0F0F                     	;# 
  1585  0F10                     	;# 
  1586  0F11                     	;# 
  1587  0F12                     	;# 
  1588  0F13                     	;# 
  1589  0F14                     	;# 
  1590  0F15                     	;# 
  1591  0F16                     	;# 
  1592  0F17                     	;# 
  1593  0F18                     	;# 
  1594  0F19                     	;# 
  1595  0F1A                     	;# 
  1596  0F1B                     	;# 
  1597  0F1C                     	;# 
  1598  0F1D                     	;# 
  1599  0F1E                     	;# 
  1600  0F1F                     	;# 
  1601  0F20                     	;# 
  1602  0F21                     	;# 
  1603  0F22                     	;# 
  1604  0F23                     	;# 
  1605  0F24                     	;# 
  1606  0F25                     	;# 
  1607  0F26                     	;# 
  1608  0F27                     	;# 
  1609  0F28                     	;# 
  1610  0F29                     	;# 
  1611  0F2A                     	;# 
  1612  0F2B                     	;# 
  1613  0F2C                     	;# 
  1614  0F2D                     	;# 
  1615  0FE4                     	;# 
  1616  0FE5                     	;# 
  1617  0FE6                     	;# 
  1618  0FE7                     	;# 
  1619  0FE8                     	;# 
  1620  0FE9                     	;# 
  1621  0FEA                     	;# 
  1622  0FEB                     	;# 
  1623  0FED                     	;# 
  1624  0FEE                     	;# 
  1625  0FEF                     	;# 
  1626  0000                     	;# 
  1627  0001                     	;# 
  1628  0002                     	;# 
  1629  0003                     	;# 
  1630  0004                     	;# 
  1631  0005                     	;# 
  1632  0006                     	;# 
  1633  0007                     	;# 
  1634  0008                     	;# 
  1635  0009                     	;# 
  1636  000A                     	;# 
  1637  000B                     	;# 
  1638  000C                     	;# 
  1639  000D                     	;# 
  1640  000E                     	;# 
  1641  0011                     	;# 
  1642  0012                     	;# 
  1643  0013                     	;# 
  1644  0015                     	;# 
  1645  0016                     	;# 
  1646  0016                     	;# 
  1647  0017                     	;# 
  1648  0018                     	;# 
  1649  0019                     	;# 
  1650  001A                     	;# 
  1651  001B                     	;# 
  1652  001C                     	;# 
  1653  008C                     	;# 
  1654  008D                     	;# 
  1655  008E                     	;# 
  1656  0091                     	;# 
  1657  0092                     	;# 
  1658  0093                     	;# 
  1659  0095                     	;# 
  1660  0096                     	;# 
  1661  0097                     	;# 
  1662  0098                     	;# 
  1663  0099                     	;# 
  1664  009A                     	;# 
  1665  009B                     	;# 
  1666  009B                     	;# 
  1667  009C                     	;# 
  1668  009D                     	;# 
  1669  009E                     	;# 
  1670  009F                     	;# 
  1671  010C                     	;# 
  1672  010D                     	;# 
  1673  010E                     	;# 
  1674  0111                     	;# 
  1675  0112                     	;# 
  1676  0113                     	;# 
  1677  0114                     	;# 
  1678  0115                     	;# 
  1679  0116                     	;# 
  1680  0117                     	;# 
  1681  0118                     	;# 
  1682  0119                     	;# 
  1683  011C                     	;# 
  1684  018C                     	;# 
  1685  018D                     	;# 
  1686  018E                     	;# 
  1687  0191                     	;# 
  1688  0191                     	;# 
  1689  0192                     	;# 
  1690  0193                     	;# 
  1691  0193                     	;# 
  1692  0194                     	;# 
  1693  0195                     	;# 
  1694  0196                     	;# 
  1695  0199                     	;# 
  1696  0199                     	;# 
  1697  0199                     	;# 
  1698  019A                     	;# 
  1699  019A                     	;# 
  1700  019A                     	;# 
  1701  019B                     	;# 
  1702  019B                     	;# 
  1703  019B                     	;# 
  1704  019B                     	;# 
  1705  019B                     	;# 
  1706  019C                     	;# 
  1707  019C                     	;# 
  1708  019C                     	;# 
  1709  019D                     	;# 
  1710  019D                     	;# 
  1711  019D                     	;# 
  1712  019E                     	;# 
  1713  019E                     	;# 
  1714  019E                     	;# 
  1715  019F                     	;# 
  1716  019F                     	;# 
  1717  019F                     	;# 
  1718  019F                     	;# 
  1719  019F                     	;# 
  1720  020C                     	;# 
  1721  020D                     	;# 
  1722  020E                     	;# 
  1723  0211                     	;# 
  1724  0211                     	;# 
  1725  0212                     	;# 
  1726  0212                     	;# 
  1727  0213                     	;# 
  1728  0213                     	;# 
  1729  0214                     	;# 
  1730  0214                     	;# 
  1731  0215                     	;# 
  1732  0215                     	;# 
  1733  0215                     	;# 
  1734  0215                     	;# 
  1735  0216                     	;# 
  1736  0216                     	;# 
  1737  0217                     	;# 
  1738  0217                     	;# 
  1739  028C                     	;# 
  1740  028D                     	;# 
  1741  028E                     	;# 
  1742  0291                     	;# 
  1743  0291                     	;# 
  1744  0292                     	;# 
  1745  0293                     	;# 
  1746  0293                     	;# 
  1747  0298                     	;# 
  1748  0298                     	;# 
  1749  0299                     	;# 
  1750  029A                     	;# 
  1751  029A                     	;# 
  1752  029E                     	;# 
  1753  030C                     	;# 
  1754  030D                     	;# 
  1755  030E                     	;# 
  1756  038C                     	;# 
  1757  038D                     	;# 
  1758  038E                     	;# 
  1759  0391                     	;# 
  1760  0392                     	;# 
  1761  0393                     	;# 
  1762  0394                     	;# 
  1763  0395                     	;# 
  1764  0396                     	;# 
  1765  0397                     	;# 
  1766  0398                     	;# 
  1767  0399                     	;# 
  1768  0415                     	;# 
  1769  0416                     	;# 
  1770  0417                     	;# 
  1771  041C                     	;# 
  1772  041D                     	;# 
  1773  041E                     	;# 
  1774  0511                     	;# 
  1775  0515                     	;# 
  1776  0617                     	;# 
  1777  0618                     	;# 
  1778  0619                     	;# 
  1779  0619                     	;# 
  1780  061A                     	;# 
  1781  061B                     	;# 
  1782  061C                     	;# 
  1783  061C                     	;# 
  1784  0691                     	;# 
  1785  0692                     	;# 
  1786  0693                     	;# 
  1787  0694                     	;# 
  1788  0695                     	;# 
  1789  0696                     	;# 
  1790  0697                     	;# 
  1791  0698                     	;# 
  1792  0699                     	;# 
  1793  069A                     	;# 
  1794  069B                     	;# 
  1795  069C                     	;# 
  1796  069D                     	;# 
  1797  069E                     	;# 
  1798  069F                     	;# 
  1799  0E0F                     	;# 
  1800  0E10                     	;# 
  1801  0E11                     	;# 
  1802  0E12                     	;# 
  1803  0E13                     	;# 
  1804  0E14                     	;# 
  1805  0E15                     	;# 
  1806  0E17                     	;# 
  1807  0E20                     	;# 
  1808  0E21                     	;# 
  1809  0E22                     	;# 
  1810  0E24                     	;# 
  1811  0E25                     	;# 
  1812  0E28                     	;# 
  1813  0E29                     	;# 
  1814  0E2A                     	;# 
  1815  0E2B                     	;# 
  1816  0E90                     	;# 
  1817  0E91                     	;# 
  1818  0E92                     	;# 
  1819  0E94                     	;# 
  1820  0E95                     	;# 
  1821  0E9C                     	;# 
  1822  0E9D                     	;# 
  1823  0E9E                     	;# 
  1824  0E9F                     	;# 
  1825  0EA0                     	;# 
  1826  0EA1                     	;# 
  1827  0EA2                     	;# 
  1828  0EA3                     	;# 
  1829  0EA4                     	;# 
  1830  0EA5                     	;# 
  1831  0EA6                     	;# 
  1832  0EA7                     	;# 
  1833  0F0F                     	;# 
  1834  0F10                     	;# 
  1835  0F11                     	;# 
  1836  0F12                     	;# 
  1837  0F13                     	;# 
  1838  0F14                     	;# 
  1839  0F15                     	;# 
  1840  0F16                     	;# 
  1841  0F17                     	;# 
  1842  0F18                     	;# 
  1843  0F19                     	;# 
  1844  0F1A                     	;# 
  1845  0F1B                     	;# 
  1846  0F1C                     	;# 
  1847  0F1D                     	;# 
  1848  0F1E                     	;# 
  1849  0F1F                     	;# 
  1850  0F20                     	;# 
  1851  0F21                     	;# 
  1852  0F22                     	;# 
  1853  0F23                     	;# 
  1854  0F24                     	;# 
  1855  0F25                     	;# 
  1856  0F26                     	;# 
  1857  0F27                     	;# 
  1858  0F28                     	;# 
  1859  0F29                     	;# 
  1860  0F2A                     	;# 
  1861  0F2B                     	;# 
  1862  0F2C                     	;# 
  1863  0F2D                     	;# 
  1864  0FE4                     	;# 
  1865  0FE5                     	;# 
  1866  0FE6                     	;# 
  1867  0FE7                     	;# 
  1868  0FE8                     	;# 
  1869  0FE9                     	;# 
  1870  0FEA                     	;# 
  1871  0FEB                     	;# 
  1872  0FED                     	;# 
  1873  0FEE                     	;# 
  1874  0FEF                     	;# 
  1875  0000                     	;# 
  1876  0001                     	;# 
  1877  0002                     	;# 
  1878  0003                     	;# 
  1879  0004                     	;# 
  1880  0005                     	;# 
  1881  0006                     	;# 
  1882  0007                     	;# 
  1883  0008                     	;# 
  1884  0009                     	;# 
  1885  000A                     	;# 
  1886  000B                     	;# 
  1887  000C                     	;# 
  1888  000D                     	;# 
  1889  000E                     	;# 
  1890  0011                     	;# 
  1891  0012                     	;# 
  1892  0013                     	;# 
  1893  0015                     	;# 
  1894  0016                     	;# 
  1895  0016                     	;# 
  1896  0017                     	;# 
  1897  0018                     	;# 
  1898  0019                     	;# 
  1899  001A                     	;# 
  1900  001B                     	;# 
  1901  001C                     	;# 
  1902  008C                     	;# 
  1903  008D                     	;# 
  1904  008E                     	;# 
  1905  0091                     	;# 
  1906  0092                     	;# 
  1907  0093                     	;# 
  1908  0095                     	;# 
  1909  0096                     	;# 
  1910  0097                     	;# 
  1911  0098                     	;# 
  1912  0099                     	;# 
  1913  009A                     	;# 
  1914  009B                     	;# 
  1915  009B                     	;# 
  1916  009C                     	;# 
  1917  009D                     	;# 
  1918  009E                     	;# 
  1919  009F                     	;# 
  1920  010C                     	;# 
  1921  010D                     	;# 
  1922  010E                     	;# 
  1923  0111                     	;# 
  1924  0112                     	;# 
  1925  0113                     	;# 
  1926  0114                     	;# 
  1927  0115                     	;# 
  1928  0116                     	;# 
  1929  0117                     	;# 
  1930  0118                     	;# 
  1931  0119                     	;# 
  1932  011C                     	;# 
  1933  018C                     	;# 
  1934  018D                     	;# 
  1935  018E                     	;# 
  1936  0191                     	;# 
  1937  0191                     	;# 
  1938  0192                     	;# 
  1939  0193                     	;# 
  1940  0193                     	;# 
  1941  0194                     	;# 
  1942  0195                     	;# 
  1943  0196                     	;# 
  1944  0199                     	;# 
  1945  0199                     	;# 
  1946  0199                     	;# 
  1947  019A                     	;# 
  1948  019A                     	;# 
  1949  019A                     	;# 
  1950  019B                     	;# 
  1951  019B                     	;# 
  1952  019B                     	;# 
  1953  019B                     	;# 
  1954  019B                     	;# 
  1955  019C                     	;# 
  1956  019C                     	;# 
  1957  019C                     	;# 
  1958  019D                     	;# 
  1959  019D                     	;# 
  1960  019D                     	;# 
  1961  019E                     	;# 
  1962  019E                     	;# 
  1963  019E                     	;# 
  1964  019F                     	;# 
  1965  019F                     	;# 
  1966  019F                     	;# 
  1967  019F                     	;# 
  1968  019F                     	;# 
  1969  020C                     	;# 
  1970  020D                     	;# 
  1971  020E                     	;# 
  1972  0211                     	;# 
  1973  0211                     	;# 
  1974  0212                     	;# 
  1975  0212                     	;# 
  1976  0213                     	;# 
  1977  0213                     	;# 
  1978  0214                     	;# 
  1979  0214                     	;# 
  1980  0215                     	;# 
  1981  0215                     	;# 
  1982  0215                     	;# 
  1983  0215                     	;# 
  1984  0216                     	;# 
  1985  0216                     	;# 
  1986  0217                     	;# 
  1987  0217                     	;# 
  1988  028C                     	;# 
  1989  028D                     	;# 
  1990  028E                     	;# 
  1991  0291                     	;# 
  1992  0291                     	;# 
  1993  0292                     	;# 
  1994  0293                     	;# 
  1995  0293                     	;# 
  1996  0298                     	;# 
  1997  0298                     	;# 
  1998  0299                     	;# 
  1999  029A                     	;# 
  2000  029A                     	;# 
  2001  029E                     	;# 
  2002  030C                     	;# 
  2003  030D                     	;# 
  2004  030E                     	;# 
  2005  038C                     	;# 
  2006  038D                     	;# 
  2007  038E                     	;# 
  2008  0391                     	;# 
  2009  0392                     	;# 
  2010  0393                     	;# 
  2011  0394                     	;# 
  2012  0395                     	;# 
  2013  0396                     	;# 
  2014  0397                     	;# 
  2015  0398                     	;# 
  2016  0399                     	;# 
  2017  0415                     	;# 
  2018  0416                     	;# 
  2019  0417                     	;# 
  2020  041C                     	;# 
  2021  041D                     	;# 
  2022  041E                     	;# 
  2023  0511                     	;# 
  2024  0515                     	;# 
  2025  0617                     	;# 
  2026  0618                     	;# 
  2027  0619                     	;# 
  2028  0619                     	;# 
  2029  061A                     	;# 
  2030  061B                     	;# 
  2031  061C                     	;# 
  2032  061C                     	;# 
  2033  0691                     	;# 
  2034  0692                     	;# 
  2035  0693                     	;# 
  2036  0694                     	;# 
  2037  0695                     	;# 
  2038  0696                     	;# 
  2039  0697                     	;# 
  2040  0698                     	;# 
  2041  0699                     	;# 
  2042  069A                     	;# 
  2043  069B                     	;# 
  2044  069C                     	;# 
  2045  069D                     	;# 
  2046  069E                     	;# 
  2047  069F                     	;# 
  2048  0E0F                     	;# 
  2049  0E10                     	;# 
  2050  0E11                     	;# 
  2051  0E12                     	;# 
  2052  0E13                     	;# 
  2053  0E14                     	;# 
  2054  0E15                     	;# 
  2055  0E17                     	;# 
  2056  0E20                     	;# 
  2057  0E21                     	;# 
  2058  0E22                     	;# 
  2059  0E24                     	;# 
  2060  0E25                     	;# 
  2061  0E28                     	;# 
  2062  0E29                     	;# 
  2063  0E2A                     	;# 
  2064  0E2B                     	;# 
  2065  0E90                     	;# 
  2066  0E91                     	;# 
  2067  0E92                     	;# 
  2068  0E94                     	;# 
  2069  0E95                     	;# 
  2070  0E9C                     	;# 
  2071  0E9D                     	;# 
  2072  0E9E                     	;# 
  2073  0E9F                     	;# 
  2074  0EA0                     	;# 
  2075  0EA1                     	;# 
  2076  0EA2                     	;# 
  2077  0EA3                     	;# 
  2078  0EA4                     	;# 
  2079  0EA5                     	;# 
  2080  0EA6                     	;# 
  2081  0EA7                     	;# 
  2082  0F0F                     	;# 
  2083  0F10                     	;# 
  2084  0F11                     	;# 
  2085  0F12                     	;# 
  2086  0F13                     	;# 
  2087  0F14                     	;# 
  2088  0F15                     	;# 
  2089  0F16                     	;# 
  2090  0F17                     	;# 
  2091  0F18                     	;# 
  2092  0F19                     	;# 
  2093  0F1A                     	;# 
  2094  0F1B                     	;# 
  2095  0F1C                     	;# 
  2096  0F1D                     	;# 
  2097  0F1E                     	;# 
  2098  0F1F                     	;# 
  2099  0F20                     	;# 
  2100  0F21                     	;# 
  2101  0F22                     	;# 
  2102  0F23                     	;# 
  2103  0F24                     	;# 
  2104  0F25                     	;# 
  2105  0F26                     	;# 
  2106  0F27                     	;# 
  2107  0F28                     	;# 
  2108  0F29                     	;# 
  2109  0F2A                     	;# 
  2110  0F2B                     	;# 
  2111  0F2C                     	;# 
  2112  0F2D                     	;# 
  2113  0FE4                     	;# 
  2114  0FE5                     	;# 
  2115  0FE6                     	;# 
  2116  0FE7                     	;# 
  2117  0FE8                     	;# 
  2118  0FE9                     	;# 
  2119  0FEA                     	;# 
  2120  0FEB                     	;# 
  2121  0FED                     	;# 
  2122  0FEE                     	;# 
  2123  0FEF                     	;# 
  2124  0000                     	;# 
  2125  0001                     	;# 
  2126  0002                     	;# 
  2127  0003                     	;# 
  2128  0004                     	;# 
  2129  0005                     	;# 
  2130  0006                     	;# 
  2131  0007                     	;# 
  2132  0008                     	;# 
  2133  0009                     	;# 
  2134  000A                     	;# 
  2135  000B                     	;# 
  2136  000C                     	;# 
  2137  000D                     	;# 
  2138  000E                     	;# 
  2139  0011                     	;# 
  2140  0012                     	;# 
  2141  0013                     	;# 
  2142  0015                     	;# 
  2143  0016                     	;# 
  2144  0016                     	;# 
  2145  0017                     	;# 
  2146  0018                     	;# 
  2147  0019                     	;# 
  2148  001A                     	;# 
  2149  001B                     	;# 
  2150  001C                     	;# 
  2151  008C                     	;# 
  2152  008D                     	;# 
  2153  008E                     	;# 
  2154  0091                     	;# 
  2155  0092                     	;# 
  2156  0093                     	;# 
  2157  0095                     	;# 
  2158  0096                     	;# 
  2159  0097                     	;# 
  2160  0098                     	;# 
  2161  0099                     	;# 
  2162  009A                     	;# 
  2163  009B                     	;# 
  2164  009B                     	;# 
  2165  009C                     	;# 
  2166  009D                     	;# 
  2167  009E                     	;# 
  2168  009F                     	;# 
  2169  010C                     	;# 
  2170  010D                     	;# 
  2171  010E                     	;# 
  2172  0111                     	;# 
  2173  0112                     	;# 
  2174  0113                     	;# 
  2175  0114                     	;# 
  2176  0115                     	;# 
  2177  0116                     	;# 
  2178  0117                     	;# 
  2179  0118                     	;# 
  2180  0119                     	;# 
  2181  011C                     	;# 
  2182  018C                     	;# 
  2183  018D                     	;# 
  2184  018E                     	;# 
  2185  0191                     	;# 
  2186  0191                     	;# 
  2187  0192                     	;# 
  2188  0193                     	;# 
  2189  0193                     	;# 
  2190  0194                     	;# 
  2191  0195                     	;# 
  2192  0196                     	;# 
  2193  0199                     	;# 
  2194  0199                     	;# 
  2195  0199                     	;# 
  2196  019A                     	;# 
  2197  019A                     	;# 
  2198  019A                     	;# 
  2199  019B                     	;# 
  2200  019B                     	;# 
  2201  019B                     	;# 
  2202  019B                     	;# 
  2203  019B                     	;# 
  2204  019C                     	;# 
  2205  019C                     	;# 
  2206  019C                     	;# 
  2207  019D                     	;# 
  2208  019D                     	;# 
  2209  019D                     	;# 
  2210  019E                     	;# 
  2211  019E                     	;# 
  2212  019E                     	;# 
  2213  019F                     	;# 
  2214  019F                     	;# 
  2215  019F                     	;# 
  2216  019F                     	;# 
  2217  019F                     	;# 
  2218  020C                     	;# 
  2219  020D                     	;# 
  2220  020E                     	;# 
  2221  0211                     	;# 
  2222  0211                     	;# 
  2223  0212                     	;# 
  2224  0212                     	;# 
  2225  0213                     	;# 
  2226  0213                     	;# 
  2227  0214                     	;# 
  2228  0214                     	;# 
  2229  0215                     	;# 
  2230  0215                     	;# 
  2231  0215                     	;# 
  2232  0215                     	;# 
  2233  0216                     	;# 
  2234  0216                     	;# 
  2235  0217                     	;# 
  2236  0217                     	;# 
  2237  028C                     	;# 
  2238  028D                     	;# 
  2239  028E                     	;# 
  2240  0291                     	;# 
  2241  0291                     	;# 
  2242  0292                     	;# 
  2243  0293                     	;# 
  2244  0293                     	;# 
  2245  0298                     	;# 
  2246  0298                     	;# 
  2247  0299                     	;# 
  2248  029A                     	;# 
  2249  029A                     	;# 
  2250  029E                     	;# 
  2251  030C                     	;# 
  2252  030D                     	;# 
  2253  030E                     	;# 
  2254  038C                     	;# 
  2255  038D                     	;# 
  2256  038E                     	;# 
  2257  0391                     	;# 
  2258  0392                     	;# 
  2259  0393                     	;# 
  2260  0394                     	;# 
  2261  0395                     	;# 
  2262  0396                     	;# 
  2263  0397                     	;# 
  2264  0398                     	;# 
  2265  0399                     	;# 
  2266  0415                     	;# 
  2267  0416                     	;# 
  2268  0417                     	;# 
  2269  041C                     	;# 
  2270  041D                     	;# 
  2271  041E                     	;# 
  2272  0511                     	;# 
  2273  0515                     	;# 
  2274  0617                     	;# 
  2275  0618                     	;# 
  2276  0619                     	;# 
  2277  0619                     	;# 
  2278  061A                     	;# 
  2279  061B                     	;# 
  2280  061C                     	;# 
  2281  061C                     	;# 
  2282  0691                     	;# 
  2283  0692                     	;# 
  2284  0693                     	;# 
  2285  0694                     	;# 
  2286  0695                     	;# 
  2287  0696                     	;# 
  2288  0697                     	;# 
  2289  0698                     	;# 
  2290  0699                     	;# 
  2291  069A                     	;# 
  2292  069B                     	;# 
  2293  069C                     	;# 
  2294  069D                     	;# 
  2295  069E                     	;# 
  2296  069F                     	;# 
  2297  0E0F                     	;# 
  2298  0E10                     	;# 
  2299  0E11                     	;# 
  2300  0E12                     	;# 
  2301  0E13                     	;# 
  2302  0E14                     	;# 
  2303  0E15                     	;# 
  2304  0E17                     	;# 
  2305  0E20                     	;# 
  2306  0E21                     	;# 
  2307  0E22                     	;# 
  2308  0E24                     	;# 
  2309  0E25                     	;# 
  2310  0E28                     	;# 
  2311  0E29                     	;# 
  2312  0E2A                     	;# 
  2313  0E2B                     	;# 
  2314  0E90                     	;# 
  2315  0E91                     	;# 
  2316  0E92                     	;# 
  2317  0E94                     	;# 
  2318  0E95                     	;# 
  2319  0E9C                     	;# 
  2320  0E9D                     	;# 
  2321  0E9E                     	;# 
  2322  0E9F                     	;# 
  2323  0EA0                     	;# 
  2324  0EA1                     	;# 
  2325  0EA2                     	;# 
  2326  0EA3                     	;# 
  2327  0EA4                     	;# 
  2328  0EA5                     	;# 
  2329  0EA6                     	;# 
  2330  0EA7                     	;# 
  2331  0F0F                     	;# 
  2332  0F10                     	;# 
  2333  0F11                     	;# 
  2334  0F12                     	;# 
  2335  0F13                     	;# 
  2336  0F14                     	;# 
  2337  0F15                     	;# 
  2338  0F16                     	;# 
  2339  0F17                     	;# 
  2340  0F18                     	;# 
  2341  0F19                     	;# 
  2342  0F1A                     	;# 
  2343  0F1B                     	;# 
  2344  0F1C                     	;# 
  2345  0F1D                     	;# 
  2346  0F1E                     	;# 
  2347  0F1F                     	;# 
  2348  0F20                     	;# 
  2349  0F21                     	;# 
  2350  0F22                     	;# 
  2351  0F23                     	;# 
  2352  0F24                     	;# 
  2353  0F25                     	;# 
  2354  0F26                     	;# 
  2355  0F27                     	;# 
  2356  0F28                     	;# 
  2357  0F29                     	;# 
  2358  0F2A                     	;# 
  2359  0F2B                     	;# 
  2360  0F2C                     	;# 
  2361  0F2D                     	;# 
  2362  0FE4                     	;# 
  2363  0FE5                     	;# 
  2364  0FE6                     	;# 
  2365  0FE7                     	;# 
  2366  0FE8                     	;# 
  2367  0FE9                     	;# 
  2368  0FEA                     	;# 
  2369  0FEB                     	;# 
  2370  0FED                     	;# 
  2371  0FEE                     	;# 
  2372  0FEF                     	;# 
  2373  0000                     	;# 
  2374  0001                     	;# 
  2375  0002                     	;# 
  2376  0003                     	;# 
  2377  0004                     	;# 
  2378  0005                     	;# 
  2379  0006                     	;# 
  2380  0007                     	;# 
  2381  0008                     	;# 
  2382  0009                     	;# 
  2383  000A                     	;# 
  2384  000B                     	;# 
  2385  000C                     	;# 
  2386  000D                     	;# 
  2387  000E                     	;# 
  2388  0011                     	;# 
  2389  0012                     	;# 
  2390  0013                     	;# 
  2391  0015                     	;# 
  2392  0016                     	;# 
  2393  0016                     	;# 
  2394  0017                     	;# 
  2395  0018                     	;# 
  2396  0019                     	;# 
  2397  001A                     	;# 
  2398  001B                     	;# 
  2399  001C                     	;# 
  2400  008C                     	;# 
  2401  008D                     	;# 
  2402  008E                     	;# 
  2403  0091                     	;# 
  2404  0092                     	;# 
  2405  0093                     	;# 
  2406  0095                     	;# 
  2407  0096                     	;# 
  2408  0097                     	;# 
  2409  0098                     	;# 
  2410  0099                     	;# 
  2411  009A                     	;# 
  2412  009B                     	;# 
  2413  009B                     	;# 
  2414  009C                     	;# 
  2415  009D                     	;# 
  2416  009E                     	;# 
  2417  009F                     	;# 
  2418  010C                     	;# 
  2419  010D                     	;# 
  2420  010E                     	;# 
  2421  0111                     	;# 
  2422  0112                     	;# 
  2423  0113                     	;# 
  2424  0114                     	;# 
  2425  0115                     	;# 
  2426  0116                     	;# 
  2427  0117                     	;# 
  2428  0118                     	;# 
  2429  0119                     	;# 
  2430  011C                     	;# 
  2431  018C                     	;# 
  2432  018D                     	;# 
  2433  018E                     	;# 
  2434  0191                     	;# 
  2435  0191                     	;# 
  2436  0192                     	;# 
  2437  0193                     	;# 
  2438  0193                     	;# 
  2439  0194                     	;# 
  2440  0195                     	;# 
  2441  0196                     	;# 
  2442  0199                     	;# 
  2443  0199                     	;# 
  2444  0199                     	;# 
  2445  019A                     	;# 
  2446  019A                     	;# 
  2447  019A                     	;# 
  2448  019B                     	;# 
  2449  019B                     	;# 
  2450  019B                     	;# 
  2451  019B                     	;# 
  2452  019B                     	;# 
  2453  019C                     	;# 
  2454  019C                     	;# 
  2455  019C                     	;# 
  2456  019D                     	;# 
  2457  019D                     	;# 
  2458  019D                     	;# 
  2459  019E                     	;# 
  2460  019E                     	;# 
  2461  019E                     	;# 
  2462  019F                     	;# 
  2463  019F                     	;# 
  2464  019F                     	;# 
  2465  019F                     	;# 
  2466  019F                     	;# 
  2467  020C                     	;# 
  2468  020D                     	;# 
  2469  020E                     	;# 
  2470  0211                     	;# 
  2471  0211                     	;# 
  2472  0212                     	;# 
  2473  0212                     	;# 
  2474  0213                     	;# 
  2475  0213                     	;# 
  2476  0214                     	;# 
  2477  0214                     	;# 
  2478  0215                     	;# 
  2479  0215                     	;# 
  2480  0215                     	;# 
  2481  0215                     	;# 
  2482  0216                     	;# 
  2483  0216                     	;# 
  2484  0217                     	;# 
  2485  0217                     	;# 
  2486  028C                     	;# 
  2487  028D                     	;# 
  2488  028E                     	;# 
  2489  0291                     	;# 
  2490  0291                     	;# 
  2491  0292                     	;# 
  2492  0293                     	;# 
  2493  0293                     	;# 
  2494  0298                     	;# 
  2495  0298                     	;# 
  2496  0299                     	;# 
  2497  029A                     	;# 
  2498  029A                     	;# 
  2499  029E                     	;# 
  2500  030C                     	;# 
  2501  030D                     	;# 
  2502  030E                     	;# 
  2503  038C                     	;# 
  2504  038D                     	;# 
  2505  038E                     	;# 
  2506  0391                     	;# 
  2507  0392                     	;# 
  2508  0393                     	;# 
  2509  0394                     	;# 
  2510  0395                     	;# 
  2511  0396                     	;# 
  2512  0397                     	;# 
  2513  0398                     	;# 
  2514  0399                     	;# 
  2515  0415                     	;# 
  2516  0416                     	;# 
  2517  0417                     	;# 
  2518  041C                     	;# 
  2519  041D                     	;# 
  2520  041E                     	;# 
  2521  0511                     	;# 
  2522  0515                     	;# 
  2523  0617                     	;# 
  2524  0618                     	;# 
  2525  0619                     	;# 
  2526  0619                     	;# 
  2527  061A                     	;# 
  2528  061B                     	;# 
  2529  061C                     	;# 
  2530  061C                     	;# 
  2531  0691                     	;# 
  2532  0692                     	;# 
  2533  0693                     	;# 
  2534  0694                     	;# 
  2535  0695                     	;# 
  2536  0696                     	;# 
  2537  0697                     	;# 
  2538  0698                     	;# 
  2539  0699                     	;# 
  2540  069A                     	;# 
  2541  069B                     	;# 
  2542  069C                     	;# 
  2543  069D                     	;# 
  2544  069E                     	;# 
  2545  069F                     	;# 
  2546  0E0F                     	;# 
  2547  0E10                     	;# 
  2548  0E11                     	;# 
  2549  0E12                     	;# 
  2550  0E13                     	;# 
  2551  0E14                     	;# 
  2552  0E15                     	;# 
  2553  0E17                     	;# 
  2554  0E20                     	;# 
  2555  0E21                     	;# 
  2556  0E22                     	;# 
  2557  0E24                     	;# 
  2558  0E25                     	;# 
  2559  0E28                     	;# 
  2560  0E29                     	;# 
  2561  0E2A                     	;# 
  2562  0E2B                     	;# 
  2563  0E90                     	;# 
  2564  0E91                     	;# 
  2565  0E92                     	;# 
  2566  0E94                     	;# 
  2567  0E95                     	;# 
  2568  0E9C                     	;# 
  2569  0E9D                     	;# 
  2570  0E9E                     	;# 
  2571  0E9F                     	;# 
  2572  0EA0                     	;# 
  2573  0EA1                     	;# 
  2574  0EA2                     	;# 
  2575  0EA3                     	;# 
  2576  0EA4                     	;# 
  2577  0EA5                     	;# 
  2578  0EA6                     	;# 
  2579  0EA7                     	;# 
  2580  0F0F                     	;# 
  2581  0F10                     	;# 
  2582  0F11                     	;# 
  2583  0F12                     	;# 
  2584  0F13                     	;# 
  2585  0F14                     	;# 
  2586  0F15                     	;# 
  2587  0F16                     	;# 
  2588  0F17                     	;# 
  2589  0F18                     	;# 
  2590  0F19                     	;# 
  2591  0F1A                     	;# 
  2592  0F1B                     	;# 
  2593  0F1C                     	;# 
  2594  0F1D                     	;# 
  2595  0F1E                     	;# 
  2596  0F1F                     	;# 
  2597  0F20                     	;# 
  2598  0F21                     	;# 
  2599  0F22                     	;# 
  2600  0F23                     	;# 
  2601  0F24                     	;# 
  2602  0F25                     	;# 
  2603  0F26                     	;# 
  2604  0F27                     	;# 
  2605  0F28                     	;# 
  2606  0F29                     	;# 
  2607  0F2A                     	;# 
  2608  0F2B                     	;# 
  2609  0F2C                     	;# 
  2610  0F2D                     	;# 
  2611  0FE4                     	;# 
  2612  0FE5                     	;# 
  2613  0FE6                     	;# 
  2614  0FE7                     	;# 
  2615  0FE8                     	;# 
  2616  0FE9                     	;# 
  2617  0FEA                     	;# 
  2618  0FEB                     	;# 
  2619  0FED                     	;# 
  2620  0FEE                     	;# 
  2621  0FEF                     	;# 
  2622  0000                     	;# 
  2623  0001                     	;# 
  2624  0002                     	;# 
  2625  0003                     	;# 
  2626  0004                     	;# 
  2627  0005                     	;# 
  2628  0006                     	;# 
  2629  0007                     	;# 
  2630  0008                     	;# 
  2631  0009                     	;# 
  2632  000A                     	;# 
  2633  000B                     	;# 
  2634  000C                     	;# 
  2635  000D                     	;# 
  2636  000E                     	;# 
  2637  0011                     	;# 
  2638  0012                     	;# 
  2639  0013                     	;# 
  2640  0015                     	;# 
  2641  0016                     	;# 
  2642  0016                     	;# 
  2643  0017                     	;# 
  2644  0018                     	;# 
  2645  0019                     	;# 
  2646  001A                     	;# 
  2647  001B                     	;# 
  2648  001C                     	;# 
  2649  008C                     	;# 
  2650  008D                     	;# 
  2651  008E                     	;# 
  2652  0091                     	;# 
  2653  0092                     	;# 
  2654  0093                     	;# 
  2655  0095                     	;# 
  2656  0096                     	;# 
  2657  0097                     	;# 
  2658  0098                     	;# 
  2659  0099                     	;# 
  2660  009A                     	;# 
  2661  009B                     	;# 
  2662  009B                     	;# 
  2663  009C                     	;# 
  2664  009D                     	;# 
  2665  009E                     	;# 
  2666  009F                     	;# 
  2667  010C                     	;# 
  2668  010D                     	;# 
  2669  010E                     	;# 
  2670  0111                     	;# 
  2671  0112                     	;# 
  2672  0113                     	;# 
  2673  0114                     	;# 
  2674  0115                     	;# 
  2675  0116                     	;# 
  2676  0117                     	;# 
  2677  0118                     	;# 
  2678  0119                     	;# 
  2679  011C                     	;# 
  2680  018C                     	;# 
  2681  018D                     	;# 
  2682  018E                     	;# 
  2683  0191                     	;# 
  2684  0191                     	;# 
  2685  0192                     	;# 
  2686  0193                     	;# 
  2687  0193                     	;# 
  2688  0194                     	;# 
  2689  0195                     	;# 
  2690  0196                     	;# 
  2691  0199                     	;# 
  2692  0199                     	;# 
  2693  0199                     	;# 
  2694  019A                     	;# 
  2695  019A                     	;# 
  2696  019A                     	;# 
  2697  019B                     	;# 
  2698  019B                     	;# 
  2699  019B                     	;# 
  2700  019B                     	;# 
  2701  019B                     	;# 
  2702  019C                     	;# 
  2703  019C                     	;# 
  2704  019C                     	;# 
  2705  019D                     	;# 
  2706  019D                     	;# 
  2707  019D                     	;# 
  2708  019E                     	;# 
  2709  019E                     	;# 
  2710  019E                     	;# 
  2711  019F                     	;# 
  2712  019F                     	;# 
  2713  019F                     	;# 
  2714  019F                     	;# 
  2715  019F                     	;# 
  2716  020C                     	;# 
  2717  020D                     	;# 
  2718  020E                     	;# 
  2719  0211                     	;# 
  2720  0211                     	;# 
  2721  0212                     	;# 
  2722  0212                     	;# 
  2723  0213                     	;# 
  2724  0213                     	;# 
  2725  0214                     	;# 
  2726  0214                     	;# 
  2727  0215                     	;# 
  2728  0215                     	;# 
  2729  0215                     	;# 
  2730  0215                     	;# 
  2731  0216                     	;# 
  2732  0216                     	;# 
  2733  0217                     	;# 
  2734  0217                     	;# 
  2735  028C                     	;# 
  2736  028D                     	;# 
  2737  028E                     	;# 
  2738  0291                     	;# 
  2739  0291                     	;# 
  2740  0292                     	;# 
  2741  0293                     	;# 
  2742  0293                     	;# 
  2743  0298                     	;# 
  2744  0298                     	;# 
  2745  0299                     	;# 
  2746  029A                     	;# 
  2747  029A                     	;# 
  2748  029E                     	;# 
  2749  030C                     	;# 
  2750  030D                     	;# 
  2751  030E                     	;# 
  2752  038C                     	;# 
  2753  038D                     	;# 
  2754  038E                     	;# 
  2755  0391                     	;# 
  2756  0392                     	;# 
  2757  0393                     	;# 
  2758  0394                     	;# 
  2759  0395                     	;# 
  2760  0396                     	;# 
  2761  0397                     	;# 
  2762  0398                     	;# 
  2763  0399                     	;# 
  2764  0415                     	;# 
  2765  0416                     	;# 
  2766  0417                     	;# 
  2767  041C                     	;# 
  2768  041D                     	;# 
  2769  041E                     	;# 
  2770  0511                     	;# 
  2771  0515                     	;# 
  2772  0617                     	;# 
  2773  0618                     	;# 
  2774  0619                     	;# 
  2775  0619                     	;# 
  2776  061A                     	;# 
  2777  061B                     	;# 
  2778  061C                     	;# 
  2779  061C                     	;# 
  2780  0691                     	;# 
  2781  0692                     	;# 
  2782  0693                     	;# 
  2783  0694                     	;# 
  2784  0695                     	;# 
  2785  0696                     	;# 
  2786  0697                     	;# 
  2787  0698                     	;# 
  2788  0699                     	;# 
  2789  069A                     	;# 
  2790  069B                     	;# 
  2791  069C                     	;# 
  2792  069D                     	;# 
  2793  069E                     	;# 
  2794  069F                     	;# 
  2795  0E0F                     	;# 
  2796  0E10                     	;# 
  2797  0E11                     	;# 
  2798  0E12                     	;# 
  2799  0E13                     	;# 
  2800  0E14                     	;# 
  2801  0E15                     	;# 
  2802  0E17                     	;# 
  2803  0E20                     	;# 
  2804  0E21                     	;# 
  2805  0E22                     	;# 
  2806  0E24                     	;# 
  2807  0E25                     	;# 
  2808  0E28                     	;# 
  2809  0E29                     	;# 
  2810  0E2A                     	;# 
  2811  0E2B                     	;# 
  2812  0E90                     	;# 
  2813  0E91                     	;# 
  2814  0E92                     	;# 
  2815  0E94                     	;# 
  2816  0E95                     	;# 
  2817  0E9C                     	;# 
  2818  0E9D                     	;# 
  2819  0E9E                     	;# 
  2820  0E9F                     	;# 
  2821  0EA0                     	;# 
  2822  0EA1                     	;# 
  2823  0EA2                     	;# 
  2824  0EA3                     	;# 
  2825  0EA4                     	;# 
  2826  0EA5                     	;# 
  2827  0EA6                     	;# 
  2828  0EA7                     	;# 
  2829  0F0F                     	;# 
  2830  0F10                     	;# 
  2831  0F11                     	;# 
  2832  0F12                     	;# 
  2833  0F13                     	;# 
  2834  0F14                     	;# 
  2835  0F15                     	;# 
  2836  0F16                     	;# 
  2837  0F17                     	;# 
  2838  0F18                     	;# 
  2839  0F19                     	;# 
  2840  0F1A                     	;# 
  2841  0F1B                     	;# 
  2842  0F1C                     	;# 
  2843  0F1D                     	;# 
  2844  0F1E                     	;# 
  2845  0F1F                     	;# 
  2846  0F20                     	;# 
  2847  0F21                     	;# 
  2848  0F22                     	;# 
  2849  0F23                     	;# 
  2850  0F24                     	;# 
  2851  0F25                     	;# 
  2852  0F26                     	;# 
  2853  0F27                     	;# 
  2854  0F28                     	;# 
  2855  0F29                     	;# 
  2856  0F2A                     	;# 
  2857  0F2B                     	;# 
  2858  0F2C                     	;# 
  2859  0F2D                     	;# 
  2860  0FE4                     	;# 
  2861  0FE5                     	;# 
  2862  0FE6                     	;# 
  2863  0FE7                     	;# 
  2864  0FE8                     	;# 
  2865  0FE9                     	;# 
  2866  0FEA                     	;# 
  2867  0FEB                     	;# 
  2868  0FED                     	;# 
  2869  0FEE                     	;# 
  2870  0FEF                     	;# 
  2871  0000                     	;# 
  2872  0001                     	;# 
  2873  0002                     	;# 
  2874  0003                     	;# 
  2875  0004                     	;# 
  2876  0005                     	;# 
  2877  0006                     	;# 
  2878  0007                     	;# 
  2879  0008                     	;# 
  2880  0009                     	;# 
  2881  000A                     	;# 
  2882  000B                     	;# 
  2883  000C                     	;# 
  2884  000D                     	;# 
  2885  000E                     	;# 
  2886  0011                     	;# 
  2887  0012                     	;# 
  2888  0013                     	;# 
  2889  0015                     	;# 
  2890  0016                     	;# 
  2891  0016                     	;# 
  2892  0017                     	;# 
  2893  0018                     	;# 
  2894  0019                     	;# 
  2895  001A                     	;# 
  2896  001B                     	;# 
  2897  001C                     	;# 
  2898  008C                     	;# 
  2899  008D                     	;# 
  2900  008E                     	;# 
  2901  0091                     	;# 
  2902  0092                     	;# 
  2903  0093                     	;# 
  2904  0095                     	;# 
  2905  0096                     	;# 
  2906  0097                     	;# 
  2907  0098                     	;# 
  2908  0099                     	;# 
  2909  009A                     	;# 
  2910  009B                     	;# 
  2911  009B                     	;# 
  2912  009C                     	;# 
  2913  009D                     	;# 
  2914  009E                     	;# 
  2915  009F                     	;# 
  2916  010C                     	;# 
  2917  010D                     	;# 
  2918  010E                     	;# 
  2919  0111                     	;# 
  2920  0112                     	;# 
  2921  0113                     	;# 
  2922  0114                     	;# 
  2923  0115                     	;# 
  2924  0116                     	;# 
  2925  0117                     	;# 
  2926  0118                     	;# 
  2927  0119                     	;# 
  2928  011C                     	;# 
  2929  018C                     	;# 
  2930  018D                     	;# 
  2931  018E                     	;# 
  2932  0191                     	;# 
  2933  0191                     	;# 
  2934  0192                     	;# 
  2935  0193                     	;# 
  2936  0193                     	;# 
  2937  0194                     	;# 
  2938  0195                     	;# 
  2939  0196                     	;# 
  2940  0199                     	;# 
  2941  0199                     	;# 
  2942  0199                     	;# 
  2943  019A                     	;# 
  2944  019A                     	;# 
  2945  019A                     	;# 
  2946  019B                     	;# 
  2947  019B                     	;# 
  2948  019B                     	;# 
  2949  019B                     	;# 
  2950  019B                     	;# 
  2951  019C                     	;# 
  2952  019C                     	;# 
  2953  019C                     	;# 
  2954  019D                     	;# 
  2955  019D                     	;# 
  2956  019D                     	;# 
  2957  019E                     	;# 
  2958  019E                     	;# 
  2959  019E                     	;# 
  2960  019F                     	;# 
  2961  019F                     	;# 
  2962  019F                     	;# 
  2963  019F                     	;# 
  2964  019F                     	;# 
  2965  020C                     	;# 
  2966  020D                     	;# 
  2967  020E                     	;# 
  2968  0211                     	;# 
  2969  0211                     	;# 
  2970  0212                     	;# 
  2971  0212                     	;# 
  2972  0213                     	;# 
  2973  0213                     	;# 
  2974  0214                     	;# 
  2975  0214                     	;# 
  2976  0215                     	;# 
  2977  0215                     	;# 
  2978  0215                     	;# 
  2979  0215                     	;# 
  2980  0216                     	;# 
  2981  0216                     	;# 
  2982  0217                     	;# 
  2983  0217                     	;# 
  2984  028C                     	;# 
  2985  028D                     	;# 
  2986  028E                     	;# 
  2987  0291                     	;# 
  2988  0291                     	;# 
  2989  0292                     	;# 
  2990  0293                     	;# 
  2991  0293                     	;# 
  2992  0298                     	;# 
  2993  0298                     	;# 
  2994  0299                     	;# 
  2995  029A                     	;# 
  2996  029A                     	;# 
  2997  029E                     	;# 
  2998  030C                     	;# 
  2999  030D                     	;# 
  3000  030E                     	;# 
  3001  038C                     	;# 
  3002  038D                     	;# 
  3003  038E                     	;# 
  3004  0391                     	;# 
  3005  0392                     	;# 
  3006  0393                     	;# 
  3007  0394                     	;# 
  3008  0395                     	;# 
  3009  0396                     	;# 
  3010  0397                     	;# 
  3011  0398                     	;# 
  3012  0399                     	;# 
  3013  0415                     	;# 
  3014  0416                     	;# 
  3015  0417                     	;# 
  3016  041C                     	;# 
  3017  041D                     	;# 
  3018  041E                     	;# 
  3019  0511                     	;# 
  3020  0515                     	;# 
  3021  0617                     	;# 
  3022  0618                     	;# 
  3023  0619                     	;# 
  3024  0619                     	;# 
  3025  061A                     	;# 
  3026  061B                     	;# 
  3027  061C                     	;# 
  3028  061C                     	;# 
  3029  0691                     	;# 
  3030  0692                     	;# 
  3031  0693                     	;# 
  3032  0694                     	;# 
  3033  0695                     	;# 
  3034  0696                     	;# 
  3035  0697                     	;# 
  3036  0698                     	;# 
  3037  0699                     	;# 
  3038  069A                     	;# 
  3039  069B                     	;# 
  3040  069C                     	;# 
  3041  069D                     	;# 
  3042  069E                     	;# 
  3043  069F                     	;# 
  3044  0E0F                     	;# 
  3045  0E10                     	;# 
  3046  0E11                     	;# 
  3047  0E12                     	;# 
  3048  0E13                     	;# 
  3049  0E14                     	;# 
  3050  0E15                     	;# 
  3051  0E17                     	;# 
  3052  0E20                     	;# 
  3053  0E21                     	;# 
  3054  0E22                     	;# 
  3055  0E24                     	;# 
  3056  0E25                     	;# 
  3057  0E28                     	;# 
  3058  0E29                     	;# 
  3059  0E2A                     	;# 
  3060  0E2B                     	;# 
  3061  0E90                     	;# 
  3062  0E91                     	;# 
  3063  0E92                     	;# 
  3064  0E94                     	;# 
  3065  0E95                     	;# 
  3066  0E9C                     	;# 
  3067  0E9D                     	;# 
  3068  0E9E                     	;# 
  3069  0E9F                     	;# 
  3070  0EA0                     	;# 
  3071  0EA1                     	;# 
  3072  0EA2                     	;# 
  3073  0EA3                     	;# 
  3074  0EA4                     	;# 
  3075  0EA5                     	;# 
  3076  0EA6                     	;# 
  3077  0EA7                     	;# 
  3078  0F0F                     	;# 
  3079  0F10                     	;# 
  3080  0F11                     	;# 
  3081  0F12                     	;# 
  3082  0F13                     	;# 
  3083  0F14                     	;# 
  3084  0F15                     	;# 
  3085  0F16                     	;# 
  3086  0F17                     	;# 
  3087  0F18                     	;# 
  3088  0F19                     	;# 
  3089  0F1A                     	;# 
  3090  0F1B                     	;# 
  3091  0F1C                     	;# 
  3092  0F1D                     	;# 
  3093  0F1E                     	;# 
  3094  0F1F                     	;# 
  3095  0F20                     	;# 
  3096  0F21                     	;# 
  3097  0F22                     	;# 
  3098  0F23                     	;# 
  3099  0F24                     	;# 
  3100  0F25                     	;# 
  3101  0F26                     	;# 
  3102  0F27                     	;# 
  3103  0F28                     	;# 
  3104  0F29                     	;# 
  3105  0F2A                     	;# 
  3106  0F2B                     	;# 
  3107  0F2C                     	;# 
  3108  0F2D                     	;# 
  3109  0FE4                     	;# 
  3110  0FE5                     	;# 
  3111  0FE6                     	;# 
  3112  0FE7                     	;# 
  3113  0FE8                     	;# 
  3114  0FE9                     	;# 
  3115  0FEA                     	;# 
  3116  0FEB                     	;# 
  3117  0FED                     	;# 
  3118  0FEE                     	;# 
  3119  0FEF                     	;# 
  3120  0000                     	;# 
  3121  0001                     	;# 
  3122  0002                     	;# 
  3123  0003                     	;# 
  3124  0004                     	;# 
  3125  0005                     	;# 
  3126  0006                     	;# 
  3127  0007                     	;# 
  3128  0008                     	;# 
  3129  0009                     	;# 
  3130  000A                     	;# 
  3131  000B                     	;# 
  3132  000C                     	;# 
  3133  000D                     	;# 
  3134  000E                     	;# 
  3135  0011                     	;# 
  3136  0012                     	;# 
  3137  0013                     	;# 
  3138  0015                     	;# 
  3139  0016                     	;# 
  3140  0016                     	;# 
  3141  0017                     	;# 
  3142  0018                     	;# 
  3143  0019                     	;# 
  3144  001A                     	;# 
  3145  001B                     	;# 
  3146  001C                     	;# 
  3147  008C                     	;# 
  3148  008D                     	;# 
  3149  008E                     	;# 
  3150  0091                     	;# 
  3151  0092                     	;# 
  3152  0093                     	;# 
  3153  0095                     	;# 
  3154  0096                     	;# 
  3155  0097                     	;# 
  3156  0098                     	;# 
  3157  0099                     	;# 
  3158  009A                     	;# 
  3159  009B                     	;# 
  3160  009B                     	;# 
  3161  009C                     	;# 
  3162  009D                     	;# 
  3163  009E                     	;# 
  3164  009F                     	;# 
  3165  010C                     	;# 
  3166  010D                     	;# 
  3167  010E                     	;# 
  3168  0111                     	;# 
  3169  0112                     	;# 
  3170  0113                     	;# 
  3171  0114                     	;# 
  3172  0115                     	;# 
  3173  0116                     	;# 
  3174  0117                     	;# 
  3175  0118                     	;# 
  3176  0119                     	;# 
  3177  011C                     	;# 
  3178  018C                     	;# 
  3179  018D                     	;# 
  3180  018E                     	;# 
  3181  0191                     	;# 
  3182  0191                     	;# 
  3183  0192                     	;# 
  3184  0193                     	;# 
  3185  0193                     	;# 
  3186  0194                     	;# 
  3187  0195                     	;# 
  3188  0196                     	;# 
  3189  0199                     	;# 
  3190  0199                     	;# 
  3191  0199                     	;# 
  3192  019A                     	;# 
  3193  019A                     	;# 
  3194  019A                     	;# 
  3195  019B                     	;# 
  3196  019B                     	;# 
  3197  019B                     	;# 
  3198  019B                     	;# 
  3199  019B                     	;# 
  3200  019C                     	;# 
  3201  019C                     	;# 
  3202  019C                     	;# 
  3203  019D                     	;# 
  3204  019D                     	;# 
  3205  019D                     	;# 
  3206  019E                     	;# 
  3207  019E                     	;# 
  3208  019E                     	;# 
  3209  019F                     	;# 
  3210  019F                     	;# 
  3211  019F                     	;# 
  3212  019F                     	;# 
  3213  019F                     	;# 
  3214  020C                     	;# 
  3215  020D                     	;# 
  3216  020E                     	;# 
  3217  0211                     	;# 
  3218  0211                     	;# 
  3219  0212                     	;# 
  3220  0212                     	;# 
  3221  0213                     	;# 
  3222  0213                     	;# 
  3223  0214                     	;# 
  3224  0214                     	;# 
  3225  0215                     	;# 
  3226  0215                     	;# 
  3227  0215                     	;# 
  3228  0215                     	;# 
  3229  0216                     	;# 
  3230  0216                     	;# 
  3231  0217                     	;# 
  3232  0217                     	;# 
  3233  028C                     	;# 
  3234  028D                     	;# 
  3235  028E                     	;# 
  3236  0291                     	;# 
  3237  0291                     	;# 
  3238  0292                     	;# 
  3239  0293                     	;# 
  3240  0293                     	;# 
  3241  0298                     	;# 
  3242  0298                     	;# 
  3243  0299                     	;# 
  3244  029A                     	;# 
  3245  029A                     	;# 
  3246  029E                     	;# 
  3247  030C                     	;# 
  3248  030D                     	;# 
  3249  030E                     	;# 
  3250  038C                     	;# 
  3251  038D                     	;# 
  3252  038E                     	;# 
  3253  0391                     	;# 
  3254  0392                     	;# 
  3255  0393                     	;# 
  3256  0394                     	;# 
  3257  0395                     	;# 
  3258  0396                     	;# 
  3259  0397                     	;# 
  3260  0398                     	;# 
  3261  0399                     	;# 
  3262  0415                     	;# 
  3263  0416                     	;# 
  3264  0417                     	;# 
  3265  041C                     	;# 
  3266  041D                     	;# 
  3267  041E                     	;# 
  3268  0511                     	;# 
  3269  0515                     	;# 
  3270  0617                     	;# 
  3271  0618                     	;# 
  3272  0619                     	;# 
  3273  0619                     	;# 
  3274  061A                     	;# 
  3275  061B                     	;# 
  3276  061C                     	;# 
  3277  061C                     	;# 
  3278  0691                     	;# 
  3279  0692                     	;# 
  3280  0693                     	;# 
  3281  0694                     	;# 
  3282  0695                     	;# 
  3283  0696                     	;# 
  3284  0697                     	;# 
  3285  0698                     	;# 
  3286  0699                     	;# 
  3287  069A                     	;# 
  3288  069B                     	;# 
  3289  069C                     	;# 
  3290  069D                     	;# 
  3291  069E                     	;# 
  3292  069F                     	;# 
  3293  0E0F                     	;# 
  3294  0E10                     	;# 
  3295  0E11                     	;# 
  3296  0E12                     	;# 
  3297  0E13                     	;# 
  3298  0E14                     	;# 
  3299  0E15                     	;# 
  3300  0E17                     	;# 
  3301  0E20                     	;# 
  3302  0E21                     	;# 
  3303  0E22                     	;# 
  3304  0E24                     	;# 
  3305  0E25                     	;# 
  3306  0E28                     	;# 
  3307  0E29                     	;# 
  3308  0E2A                     	;# 
  3309  0E2B                     	;# 
  3310  0E90                     	;# 
  3311  0E91                     	;# 
  3312  0E92                     	;# 
  3313  0E94                     	;# 
  3314  0E95                     	;# 
  3315  0E9C                     	;# 
  3316  0E9D                     	;# 
  3317  0E9E                     	;# 
  3318  0E9F                     	;# 
  3319  0EA0                     	;# 
  3320  0EA1                     	;# 
  3321  0EA2                     	;# 
  3322  0EA3                     	;# 
  3323  0EA4                     	;# 
  3324  0EA5                     	;# 
  3325  0EA6                     	;# 
  3326  0EA7                     	;# 
  3327  0F0F                     	;# 
  3328  0F10                     	;# 
  3329  0F11                     	;# 
  3330  0F12                     	;# 
  3331  0F13                     	;# 
  3332  0F14                     	;# 
  3333  0F15                     	;# 
  3334  0F16                     	;# 
  3335  0F17                     	;# 
  3336  0F18                     	;# 
  3337  0F19                     	;# 
  3338  0F1A                     	;# 
  3339  0F1B                     	;# 
  3340  0F1C                     	;# 
  3341  0F1D                     	;# 
  3342  0F1E                     	;# 
  3343  0F1F                     	;# 
  3344  0F20                     	;# 
  3345  0F21                     	;# 
  3346  0F22                     	;# 
  3347  0F23                     	;# 
  3348  0F24                     	;# 
  3349  0F25                     	;# 
  3350  0F26                     	;# 
  3351  0F27                     	;# 
  3352  0F28                     	;# 
  3353  0F29                     	;# 
  3354  0F2A                     	;# 
  3355  0F2B                     	;# 
  3356  0F2C                     	;# 
  3357  0F2D                     	;# 
  3358  0FE4                     	;# 
  3359  0FE5                     	;# 
  3360  0FE6                     	;# 
  3361  0FE7                     	;# 
  3362  0FE8                     	;# 
  3363  0FE9                     	;# 
  3364  0FEA                     	;# 
  3365  0FEB                     	;# 
  3366  0FED                     	;# 
  3367  0FEE                     	;# 
  3368  0FEF                     	;# 
  3369  0000                     	;# 
  3370  0001                     	;# 
  3371  0002                     	;# 
  3372  0003                     	;# 
  3373  0004                     	;# 
  3374  0005                     	;# 
  3375  0006                     	;# 
  3376  0007                     	;# 
  3377  0008                     	;# 
  3378  0009                     	;# 
  3379  000A                     	;# 
  3380  000B                     	;# 
  3381  000C                     	;# 
  3382  000D                     	;# 
  3383  000E                     	;# 
  3384  0011                     	;# 
  3385  0012                     	;# 
  3386  0013                     	;# 
  3387  0015                     	;# 
  3388  0016                     	;# 
  3389  0016                     	;# 
  3390  0017                     	;# 
  3391  0018                     	;# 
  3392  0019                     	;# 
  3393  001A                     	;# 
  3394  001B                     	;# 
  3395  001C                     	;# 
  3396  008C                     	;# 
  3397  008D                     	;# 
  3398  008E                     	;# 
  3399  0091                     	;# 
  3400  0092                     	;# 
  3401  0093                     	;# 
  3402  0095                     	;# 
  3403  0096                     	;# 
  3404  0097                     	;# 
  3405  0098                     	;# 
  3406  0099                     	;# 
  3407  009A                     	;# 
  3408  009B                     	;# 
  3409  009B                     	;# 
  3410  009C                     	;# 
  3411  009D                     	;# 
  3412  009E                     	;# 
  3413  009F                     	;# 
  3414  010C                     	;# 
  3415  010D                     	;# 
  3416  010E                     	;# 
  3417  0111                     	;# 
  3418  0112                     	;# 
  3419  0113                     	;# 
  3420  0114                     	;# 
  3421  0115                     	;# 
  3422  0116                     	;# 
  3423  0117                     	;# 
  3424  0118                     	;# 
  3425  0119                     	;# 
  3426  011C                     	;# 
  3427  018C                     	;# 
  3428  018D                     	;# 
  3429  018E                     	;# 
  3430  0191                     	;# 
  3431  0191                     	;# 
  3432  0192                     	;# 
  3433  0193                     	;# 
  3434  0193                     	;# 
  3435  0194                     	;# 
  3436  0195                     	;# 
  3437  0196                     	;# 
  3438  0199                     	;# 
  3439  0199                     	;# 
  3440  0199                     	;# 
  3441  019A                     	;# 
  3442  019A                     	;# 
  3443  019A                     	;# 
  3444  019B                     	;# 
  3445  019B                     	;# 
  3446  019B                     	;# 
  3447  019B                     	;# 
  3448  019B                     	;# 
  3449  019C                     	;# 
  3450  019C                     	;# 
  3451  019C                     	;# 
  3452  019D                     	;# 
  3453  019D                     	;# 
  3454  019D                     	;# 
  3455  019E                     	;# 
  3456  019E                     	;# 
  3457  019E                     	;# 
  3458  019F                     	;# 
  3459  019F                     	;# 
  3460  019F                     	;# 
  3461  019F                     	;# 
  3462  019F                     	;# 
  3463  020C                     	;# 
  3464  020D                     	;# 
  3465  020E                     	;# 
  3466  0211                     	;# 
  3467  0211                     	;# 
  3468  0212                     	;# 
  3469  0212                     	;# 
  3470  0213                     	;# 
  3471  0213                     	;# 
  3472  0214                     	;# 
  3473  0214                     	;# 
  3474  0215                     	;# 
  3475  0215                     	;# 
  3476  0215                     	;# 
  3477  0215                     	;# 
  3478  0216                     	;# 
  3479  0216                     	;# 
  3480  0217                     	;# 
  3481  0217                     	;# 
  3482  028C                     	;# 
  3483  028D                     	;# 
  3484  028E                     	;# 
  3485  0291                     	;# 
  3486  0291                     	;# 
  3487  0292                     	;# 
  3488  0293                     	;# 
  3489  0293                     	;# 
  3490  0298                     	;# 
  3491  0298                     	;# 
  3492  0299                     	;# 
  3493  029A                     	;# 
  3494  029A                     	;# 
  3495  029E                     	;# 
  3496  030C                     	;# 
  3497  030D                     	;# 
  3498  030E                     	;# 
  3499  038C                     	;# 
  3500  038D                     	;# 
  3501  038E                     	;# 
  3502  0391                     	;# 
  3503  0392                     	;# 
  3504  0393                     	;# 
  3505  0394                     	;# 
  3506  0395                     	;# 
  3507  0396                     	;# 
  3508  0397                     	;# 
  3509  0398                     	;# 
  3510  0399                     	;# 
  3511  0415                     	;# 
  3512  0416                     	;# 
  3513  0417                     	;# 
  3514  041C                     	;# 
  3515  041D                     	;# 
  3516  041E                     	;# 
  3517  0511                     	;# 
  3518  0515                     	;# 
  3519  0617                     	;# 
  3520  0618                     	;# 
  3521  0619                     	;# 
  3522  0619                     	;# 
  3523  061A                     	;# 
  3524  061B                     	;# 
  3525  061C                     	;# 
  3526  061C                     	;# 
  3527  0691                     	;# 
  3528  0692                     	;# 
  3529  0693                     	;# 
  3530  0694                     	;# 
  3531  0695                     	;# 
  3532  0696                     	;# 
  3533  0697                     	;# 
  3534  0698                     	;# 
  3535  0699                     	;# 
  3536  069A                     	;# 
  3537  069B                     	;# 
  3538  069C                     	;# 
  3539  069D                     	;# 
  3540  069E                     	;# 
  3541  069F                     	;# 
  3542  0E0F                     	;# 
  3543  0E10                     	;# 
  3544  0E11                     	;# 
  3545  0E12                     	;# 
  3546  0E13                     	;# 
  3547  0E14                     	;# 
  3548  0E15                     	;# 
  3549  0E17                     	;# 
  3550  0E20                     	;# 
  3551  0E21                     	;# 
  3552  0E22                     	;# 
  3553  0E24                     	;# 
  3554  0E25                     	;# 
  3555  0E28                     	;# 
  3556  0E29                     	;# 
  3557  0E2A                     	;# 
  3558  0E2B                     	;# 
  3559  0E90                     	;# 
  3560  0E91                     	;# 
  3561  0E92                     	;# 
  3562  0E94                     	;# 
  3563  0E95                     	;# 
  3564  0E9C                     	;# 
  3565  0E9D                     	;# 
  3566  0E9E                     	;# 
  3567  0E9F                     	;# 
  3568  0EA0                     	;# 
  3569  0EA1                     	;# 
  3570  0EA2                     	;# 
  3571  0EA3                     	;# 
  3572  0EA4                     	;# 
  3573  0EA5                     	;# 
  3574  0EA6                     	;# 
  3575  0EA7                     	;# 
  3576  0F0F                     	;# 
  3577  0F10                     	;# 
  3578  0F11                     	;# 
  3579  0F12                     	;# 
  3580  0F13                     	;# 
  3581  0F14                     	;# 
  3582  0F15                     	;# 
  3583  0F16                     	;# 
  3584  0F17                     	;# 
  3585  0F18                     	;# 
  3586  0F19                     	;# 
  3587  0F1A                     	;# 
  3588  0F1B                     	;# 
  3589  0F1C                     	;# 
  3590  0F1D                     	;# 
  3591  0F1E                     	;# 
  3592  0F1F                     	;# 
  3593  0F20                     	;# 
  3594  0F21                     	;# 
  3595  0F22                     	;# 
  3596  0F23                     	;# 
  3597  0F24                     	;# 
  3598  0F25                     	;# 
  3599  0F26                     	;# 
  3600  0F27                     	;# 
  3601  0F28                     	;# 
  3602  0F29                     	;# 
  3603  0F2A                     	;# 
  3604  0F2B                     	;# 
  3605  0F2C                     	;# 
  3606  0F2D                     	;# 
  3607  0FE4                     	;# 
  3608  0FE5                     	;# 
  3609  0FE6                     	;# 
  3610  0FE7                     	;# 
  3611  0FE8                     	;# 
  3612  0FE9                     	;# 
  3613  0FEA                     	;# 
  3614  0FEB                     	;# 
  3615  0FED                     	;# 
  3616  0FEE                     	;# 
  3617  0FEF                     	;# 
  3618                           
  3619 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  3620  0000                     
  3621 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  3622  0000                     
  3623 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  3624  0000                     
  3625                           	psect	idataCOMMON
  3626  0003                     __pidataCOMMON:
  3627                           
  3628                           ;initializer for _dc_frequency_flag
  3629  0003  3401               	retlw	1
  3630                           
  3631                           	psect	idataBANK1
  3632  0C08                     __pidataBANK1:
  3633                           
  3634                           ;initializer for _maxFrequencyIndex
  3635  0C08  340A               	retlw	10
  3636  0C09  3400               	retlw	0
  3637                           
  3638                           ;initializer for _maxCurrentIndex
  3639  0C0A  340A               	retlw	10
  3640  0C0B  3400               	retlw	0
  3641                           
  3642                           ;initializer for _currentIsOn
  3643  0C0C  3401               	retlw	1
  3644                           
  3645                           ;initializer for _currentValue
  3646  0C0D  3400               	retlw	0
  3647  0C0E  3400               	retlw	0
  3648  0C0F  341E               	retlw	30
  3649  0C10  3400               	retlw	0
  3650  0C11  3432               	retlw	50
  3651  0C12  3400               	retlw	0
  3652  0C13  3446               	retlw	70
  3653  0C14  3400               	retlw	0
  3654  0C15  345A               	retlw	90
  3655  0C16  3400               	retlw	0
  3656  0C17  346E               	retlw	110
  3657  0C18  3400               	retlw	0
  3658  0C19  3482               	retlw	130
  3659  0C1A  3400               	retlw	0
  3660  0C1B  34A0               	retlw	160
  3661  0C1C  3400               	retlw	0
  3662  0C1D  34DC               	retlw	220
  3663  0C1E  3400               	retlw	0
  3664  0C1F  34FA               	retlw	250
  3665  0C20  3400               	retlw	0
  3666                           
  3667                           	psect	idataBANK2
  3668  0BAD                     __pidataBANK2:
  3669                           
  3670                           ;initializer for _frequencyValue
  3671  0BAD  3400               	retlw	0
  3672  0BAE  3400               	retlw	0
  3673  0BAF  3401               	retlw	1
  3674  0BB0  3400               	retlw	0
  3675  0BB1  3441               	retlw	65
  3676  0BB2  3400               	retlw	0
  3677  0BB3  3446               	retlw	70
  3678  0BB4  3400               	retlw	0
  3679  0BB5  344B               	retlw	75
  3680  0BB6  3400               	retlw	0
  3681  0BB7  3450               	retlw	80
  3682  0BB8  3400               	retlw	0
  3683  0BB9  3464               	retlw	100
  3684  0BBA  3400               	retlw	0
  3685  0BBB  3478               	retlw	120
  3686  0BBC  3400               	retlw	0
  3687  0BBD  3482               	retlw	130
  3688  0BBE  3400               	retlw	0
  3689  0BBF  348C               	retlw	140
  3690  0BC0  3400               	retlw	0
  3691                           
  3692                           	psect	stringtext1
  3693  0880                     __pstringtext1:
  3694  0880                     main@BATTERY_THRESHOLD:
  3695  0880  34D0               	retlw	208
  3696  0881  3407               	retlw	7
  3697  0882                     __end_ofmain@BATTERY_THRESHOLD:
  3698                           
  3699                           	psect	stringtext2
  3700  0882                     __pstringtext2:
  3701  0882                     main@BATTERY_NUM_LOW_READINGS:
  3702  0882  3410               	retlw	16
  3703  0883  3427               	retlw	39
  3704  0884                     __end_ofmain@BATTERY_NUM_LOW_READINGS:
  3705  0FE0                     _HEF_persistent_state_absaddr	set	4064
  3706  0FE0                     _HEF_persistent_state_absaddr	set	4064
  3707                           
  3708                           	psect	_HEF_persistent_state_text
  3709  0FE0                     __p_HEF_persistent_state_text:
  3710  0FE0                     _HEF_persistent_state:
  3711  0FE0  3405               	retlw	5
  3712  0FE1  3403               	retlw	3
  3713  0FE2  3400               	retlw	0
  3714  0FE3  3400               	retlw	0
  3715  0FE4  3400               	retlw	0
  3716  0FE5  3400               	retlw	0
  3717  0FE6  3400               	retlw	0
  3718  0FE7  3400               	retlw	0
  3719  0FE8  3400               	retlw	0
  3720  0FE9  3400               	retlw	0
  3721  0FEA  3400               	retlw	0
  3722  0FEB  3400               	retlw	0
  3723  0FEC  3400               	retlw	0
  3724  0FED  3400               	retlw	0
  3725  0FEE  3400               	retlw	0
  3726  0FEF  3400               	retlw	0
  3727  0FF0  3400               	retlw	0
  3728  0FF1  3400               	retlw	0
  3729  0FF2  3400               	retlw	0
  3730  0FF3  3400               	retlw	0
  3731  0FF4  3400               	retlw	0
  3732  0FF5  3400               	retlw	0
  3733  0FF6  3400               	retlw	0
  3734  0FF7  3400               	retlw	0
  3735  0FF8  3400               	retlw	0
  3736  0FF9  3400               	retlw	0
  3737  0FFA  3400               	retlw	0
  3738  0FFB  3400               	retlw	0
  3739  0FFC  3400               	retlw	0
  3740  0FFD  3400               	retlw	0
  3741  0FFE  3400               	retlw	0
  3742  0FFF  3400               	retlw	0
  3743  1000                     __end_of_HEF_persistent_state:
  3744                           
  3745                           	psect	nvBANK1
  3746  00D2                     __pnvBANK1:
  3747  00D2                     _TMR1_InterruptHandler:
  3748  00D2                     	ds	2
  3749  00D4                     _TMR4_InterruptHandler:
  3750  00D4                     	ds	2
  3751  00D6                     _TMR0_InterruptHandler:
  3752  00D6                     	ds	2
  3753  00D8                     _INT_InterruptHandler:
  3754  00D8                     	ds	2
  3755  00DA                     _EUSART_ErrorHandler:
  3756  00DA                     	ds	2
  3757  00DC                     _EUSART_OverrunErrorHandler:
  3758  00DC                     	ds	2
  3759  00DE                     _EUSART_FramingErrorHandler:
  3760  00DE                     	ds	2
  3761  00E0                     _timer1ReloadVal:
  3762  00E0                     	ds	1
  3763  00E1                     _frequencyIndex:
  3764  00E1                     	ds	2
  3765  00E3                     _currentIndex:
  3766  00E3                     	ds	2
  3767  0016                     _TMR1	set	22
  3768  0018                     _T1CONbits	set	24
  3769  001C                     _T2CONbits	set	28
  3770  001C                     _T2CON	set	28
  3771  001A                     _TMR2	set	26
  3772  001B                     _PR2	set	27
  3773  0015                     _TMR0	set	21
  3774  0011                     _PIR1bits	set	17
  3775  0012                     _PIR2bits	set	18
  3776  000B                     _INTCONbits	set	11
  3777  008C                     _TRISAbits	set	140
  3778  008E                     _TRISCbits	set	142
  3779  008D                     _TRISBbits	set	141
  3780  009D                     _ADCON0bits	set	157
  3781  009E                     _ADCON1	set	158
  3782  009D                     _ADCON0	set	157
  3783  0095                     _OPTION_REG	set	149
  3784  0091                     _PIE1bits	set	145
  3785  0092                     _PIE2bits	set	146
  3786  0095                     _OPTION_REGbits	set	149
  3787  008E                     _TRISC	set	142
  3788  008D                     _TRISB	set	141
  3789  008C                     _TRISA	set	140
  3790  0097                     _WDTCON	set	151
  3791  0098                     _OSCTUNE	set	152
  3792  009A                     _OSCSTAT	set	154
  3793  0099                     _OSCCON	set	153
  3794  009B                     _ADRES	set	155
  3795  0117                     _FVRCONbits	set	279
  3796  0117                     _FVRCON	set	279
  3797  010C                     _LATAbits	set	268
  3798  010E                     _LATCbits	set	270
  3799  010D                     _LATBbits	set	269
  3800  010E                     _LATC	set	270
  3801  010D                     _LATB	set	269
  3802  010C                     _LATA	set	268
  3803  0116                     _BORCON	set	278
  3804  0119                     _DAC1CON1	set	281
  3805  0118                     _DAC1CON0	set	280
  3806  0196                     _PMCON2	set	406
  3807  0193                     _PMDATL	set	403
  3808  0194                     _PMDATH	set	404
  3809  0195                     _PMCON1bits	set	405
  3810  0192                     _PMADRH	set	402
  3811  0191                     _PMADRL	set	401
  3812  019A                     _TX1REG	set	410
  3813  0199                     _RC1REG	set	409
  3814  019D                     _RC1STAbits	set	413
  3815  019E                     _TX1STAbits	set	414
  3816  019C                     _SP1BRGH	set	412
  3817  019B                     _SP1BRGL	set	411
  3818  019E                     _TX1STA	set	414
  3819  019D                     _RC1STA	set	413
  3820  019F                     _BAUD1CON	set	415
  3821  018C                     _ANSELA	set	396
  3822  018D                     _ANSELB	set	397
  3823  018E                     _ANSELC	set	398
  3824  020E                     _WPUC	set	526
  3825  020C                     _WPUA	set	524
  3826  020D                     _WPUB	set	525
  3827  0291                     _CCPR1L	set	657
  3828  0293                     _CCP1CONbits	set	659
  3829  029E                     _CCPTMRSbits	set	670
  3830  028E                     _ODCONC	set	654
  3831  028D                     _ODCONB	set	653
  3832  028C                     _ODCONA	set	652
  3833  030E                     _SLRCONC	set	782
  3834  030D                     _SLRCONB	set	781
  3835  030C                     _SLRCONA	set	780
  3836  038E                     _INLVLC	set	910
  3837  038D                     _INLVLB	set	909
  3838  038C                     _INLVLA	set	908
  3839  0417                     _T4CONbits	set	1047
  3840  0417                     _T4CON	set	1047
  3841  0415                     _TMR4	set	1045
  3842  0416                     _PR4	set	1046
  3843  0515                     _OPA2CON	set	1301
  3844  0511                     _OPA1CON	set	1297
  3845  061C                     _PWM4CONbits	set	1564
  3846  061A                     _PWM4DCLbits	set	1562
  3847  061B                     _PWM4DCH	set	1563
  3848  0619                     _PWM3CONbits	set	1561
  3849  0617                     _PWM3DCLbits	set	1559
  3850  0618                     _PWM3DCH	set	1560
  3851  0E24                     _RXPPS	set	3620
  3852  0E10                     _INTPPS	set	3600
  3853  0EA5                     _RC5PPS	set	3749
  3854  0E95                     _RA5PPS	set	3733
  3855  0EA4                     _RC4PPS	set	3748
  3856  0E9F                     _RB7PPS	set	3743
  3857                           
  3858                           	psect	stringtext3
  3859  0800                     __pstringtext3:
  3860  0800                     STR_6:
  3861  0800  340A               	retlw	10
  3862  0801  3420               	retlw	32	;' '
  3863  0802  3463               	retlw	99	;'c'
  3864  0803  3475               	retlw	117	;'u'
  3865  0804  3472               	retlw	114	;'r'
  3866  0805  3472               	retlw	114	;'r'
  3867  0806  3465               	retlw	101	;'e'
  3868  0807  346E               	retlw	110	;'n'
  3869  0808  3474               	retlw	116	;'t'
  3870  0809  3420               	retlw	32	;' '
  3871  080A  3476               	retlw	118	;'v'
  3872  080B  3461               	retlw	97	;'a'
  3873  080C  346C               	retlw	108	;'l'
  3874  080D  3475               	retlw	117	;'u'
  3875  080E  3465               	retlw	101	;'e'
  3876  080F  3420               	retlw	32	;' '
  3877  0810  3473               	retlw	115	;'s'
  3878  0811  3465               	retlw	101	;'e'
  3879  0812  346C               	retlw	108	;'l'
  3880  0813  3465               	retlw	101	;'e'
  3881  0814  3463               	retlw	99	;'c'
  3882  0815  3474               	retlw	116	;'t'
  3883  0816  3465               	retlw	101	;'e'
  3884  0817  3464               	retlw	100	;'d'
  3885  0818  3400               	retlw	0
  3886                           
  3887                           	psect	stringtext4
  3888  0819                     __pstringtext4:
  3889  0819                     STR_5:
  3890  0819  340A               	retlw	10
  3891  081A  3420               	retlw	32	;' '
  3892  081B  3472               	retlw	114	;'r'
  3893  081C  3465               	retlw	101	;'e'
  3894  081D  3473               	retlw	115	;'s'
  3895  081E  3465               	retlw	101	;'e'
  3896  081F  3474               	retlw	116	;'t'
  3897  0820  3420               	retlw	32	;' '
  3898  0821  3476               	retlw	118	;'v'
  3899  0822  3461               	retlw	97	;'a'
  3900  0823  346C               	retlw	108	;'l'
  3901  0824  3475               	retlw	117	;'u'
  3902  0825  3465               	retlw	101	;'e'
  3903  0826  3420               	retlw	32	;' '
  3904  0827  3473               	retlw	115	;'s'
  3905  0828  3465               	retlw	101	;'e'
  3906  0829  346C               	retlw	108	;'l'
  3907  082A  3465               	retlw	101	;'e'
  3908  082B  3463               	retlw	99	;'c'
  3909  082C  3474               	retlw	116	;'t'
  3910  082D  3465               	retlw	101	;'e'
  3911  082E  3464               	retlw	100	;'d'
  3912  082F  3400               	retlw	0
  3913                           
  3914                           	psect	stringtext5
  3915  0830                     __pstringtext5:
  3916  0830                     STR_1:
  3917  0830  340A               	retlw	10
  3918  0831  3420               	retlw	32	;' '
  3919  0832  3446               	retlw	70	;'F'
  3920  0833  3472               	retlw	114	;'r'
  3921  0834  3465               	retlw	101	;'e'
  3922  0835  3471               	retlw	113	;'q'
  3923  0836  3475               	retlw	117	;'u'
  3924  0837  3465               	retlw	101	;'e'
  3925  0838  346E               	retlw	110	;'n'
  3926  0839  3463               	retlw	99	;'c'
  3927  083A  3479               	retlw	121	;'y'
  3928  083B  3420               	retlw	32	;' '
  3929  083C  3473               	retlw	115	;'s'
  3930  083D  3465               	retlw	101	;'e'
  3931  083E  346C               	retlw	108	;'l'
  3932  083F  3465               	retlw	101	;'e'
  3933  0840  3463               	retlw	99	;'c'
  3934  0841  3474               	retlw	116	;'t'
  3935  0842  3465               	retlw	101	;'e'
  3936  0843  3464               	retlw	100	;'d'
  3937  0844  3400               	retlw	0
  3938                           
  3939                           	psect	stringtext6
  3940  0845                     __pstringtext6:
  3941  0845                     STR_4:
  3942  0845  340A               	retlw	10
  3943  0846  3420               	retlw	32	;' '
  3944  0847  3464               	retlw	100	;'d'
  3945  0848  3465               	retlw	101	;'e'
  3946  0849  3463               	retlw	99	;'c'
  3947  084A  3472               	retlw	114	;'r'
  3948  084B  3465               	retlw	101	;'e'
  3949  084C  3461               	retlw	97	;'a'
  3950  084D  3473               	retlw	115	;'s'
  3951  084E  3465               	retlw	101	;'e'
  3952  084F  3420               	retlw	32	;' '
  3953  0850  3473               	retlw	115	;'s'
  3954  0851  3465               	retlw	101	;'e'
  3955  0852  346C               	retlw	108	;'l'
  3956  0853  3465               	retlw	101	;'e'
  3957  0854  3463               	retlw	99	;'c'
  3958  0855  3474               	retlw	116	;'t'
  3959  0856  3465               	retlw	101	;'e'
  3960  0857  3464               	retlw	100	;'d'
  3961  0858  3400               	retlw	0
  3962                           
  3963                           	psect	stringtext7
  3964  0859                     __pstringtext7:
  3965  0859                     STR_3:
  3966  0859  340A               	retlw	10
  3967  085A  3420               	retlw	32	;' '
  3968  085B  3469               	retlw	105	;'i'
  3969  085C  346E               	retlw	110	;'n'
  3970  085D  3463               	retlw	99	;'c'
  3971  085E  3472               	retlw	114	;'r'
  3972  085F  3465               	retlw	101	;'e'
  3973  0860  3461               	retlw	97	;'a'
  3974  0861  3473               	retlw	115	;'s'
  3975  0862  3465               	retlw	101	;'e'
  3976  0863  3420               	retlw	32	;' '
  3977  0864  3473               	retlw	115	;'s'
  3978  0865  3465               	retlw	101	;'e'
  3979  0866  346C               	retlw	108	;'l'
  3980  0867  3465               	retlw	101	;'e'
  3981  0868  3463               	retlw	99	;'c'
  3982  0869  3474               	retlw	116	;'t'
  3983  086A  3465               	retlw	101	;'e'
  3984  086B  3464               	retlw	100	;'d'
  3985  086C  3400               	retlw	0
  3986                           
  3987                           	psect	stringtext8
  3988  086D                     __pstringtext8:
  3989  086D                     STR_2:
  3990  086D  340A               	retlw	10
  3991  086E  3420               	retlw	32	;' '
  3992  086F  3463               	retlw	99	;'c'
  3993  0870  3475               	retlw	117	;'u'
  3994  0871  3472               	retlw	114	;'r'
  3995  0872  3472               	retlw	114	;'r'
  3996  0873  3465               	retlw	101	;'e'
  3997  0874  346E               	retlw	110	;'n'
  3998  0875  3474               	retlw	116	;'t'
  3999  0876  3420               	retlw	32	;' '
  4000  0877  3473               	retlw	115	;'s'
  4001  0878  3465               	retlw	101	;'e'
  4002  0879  346C               	retlw	108	;'l'
  4003  087A  3465               	retlw	101	;'e'
  4004  087B  3463               	retlw	99	;'c'
  4005  087C  3474               	retlw	116	;'t'
  4006  087D  3465               	retlw	101	;'e'
  4007  087E  3464               	retlw	100	;'d'
  4008  087F  3400               	retlw	0
  4009                           
  4010                           	psect	stringtext9
  4011  0000                     __pstringtext9:
  4012  0800                     
  4013                           	psect	cinit
  4014  004D                     start_initialization:	
  4015                           ; #config settings
  4016                           
  4017  004D                     __initialization:
  4018                           
  4019                           ; Initialize objects allocated to COMMON
  4020  004D  3180  2003  3180   	fcall	__pidataCOMMON	;fetch initializer
  4021  0050  00FA               	movwf	__pdataCOMMON& (0+127)
  4022                           
  4023                           ; Initialize objects allocated to BANK1
  4024  0051  3008               	movlw	low __pidataBANK1
  4025  0052  0084               	movwf	4
  4026  0053  308C               	movlw	(high __pidataBANK1)| (0+128)
  4027  0054  0085               	movwf	5
  4028  0055  30B9               	movlw	low __pdataBANK1
  4029  0056  0086               	movwf	6
  4030  0057  3000               	movlw	high __pdataBANK1
  4031  0058  0087               	movwf	7
  4032  0059  3019               	movlw	25
  4033  005A  318B  2309  3180   	fcall	init_ram
  4034                           
  4035                           ; Initialize objects allocated to BANK2
  4036  005D  30AD               	movlw	low __pidataBANK2
  4037  005E  0084               	movwf	4
  4038  005F  308B               	movlw	(high __pidataBANK2)| (0+128)
  4039  0060  0085               	movwf	5
  4040  0061  3040               	movlw	low __pdataBANK2
  4041  0062  0086               	movwf	6
  4042  0063  3001               	movlw	high __pdataBANK2
  4043  0064  0087               	movwf	7
  4044  0065  3014               	movlw	20
  4045  0066  318B  2309  3180   	fcall	init_ram
  4046                           
  4047                           ; Clear objects allocated to COMMON
  4048  0069  01F8               	clrf	__pbssCOMMON& (0+127)
  4049  006A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  4050                           
  4051                           ; Clear objects allocated to BANK1
  4052  006B  30A0               	movlw	low __pbssBANK1
  4053  006C  0084               	movwf	4
  4054  006D  3000               	movlw	high __pbssBANK1
  4055  006E  0085               	movwf	5
  4056  006F  3019               	movlw	25
  4057  0070  318B  2303  3180   	fcall	clear_ram0
  4058                           
  4059                           ; Clear objects allocated to BANK2
  4060  0073  3020               	movlw	low __pbssBANK2
  4061  0074  0084               	movwf	4
  4062  0075  3001               	movlw	high __pbssBANK2
  4063  0076  0085               	movwf	5
  4064  0077  3020               	movlw	32
  4065  0078  318B  2303  3180   	fcall	clear_ram0
  4066                           
  4067                           ; Clear objects allocated to BANK3
  4068  007B  30A0               	movlw	low __pbssBANK3
  4069  007C  0084               	movwf	4
  4070  007D  3001               	movlw	high __pbssBANK3
  4071  007E  0085               	movwf	5
  4072  007F  3021               	movlw	33
  4073  0080  318B  2303  3180   	fcall	clear_ram0
  4074  0083                     end_of_initialization:	
  4075                           ;End of C runtime variable initialization code
  4076                           
  4077  0083                     __end_of__initialization:
  4078  0083  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4079  0084  0020               	movlb	0
  4080  0085  3184  2C62         	ljmp	_main	;jump to C main() function
  4081                           
  4082                           	psect	bssCOMMON
  4083  0078                     __pbssCOMMON:
  4084  0078                     _interfaceState:
  4085  0078                     	ds	1
  4086  0079                     _timer0ReloadVal:
  4087  0079                     	ds	1
  4088                           
  4089                           	psect	dataCOMMON
  4090  007A                     __pdataCOMMON:
  4091  007A                     _dc_frequency_flag:
  4092  007A                     	ds	1
  4093                           
  4094                           	psect	bssBANK1
  4095  00A0                     __pbssBANK1:
  4096  00A0                     _nout:
  4097  00A0                     	ds	2
  4098  00A2                     _width:
  4099  00A2                     	ds	2
  4100  00A4                     _prec:
  4101  00A4                     	ds	2
  4102  00A6                     _flags:
  4103  00A6                     	ds	2
  4104  00A8                     _Vdd_mv:
  4105  00A8                     	ds	2
  4106  00AA                     _microamps:
  4107  00AA                     	ds	2
  4108  00AC                     _LED_blue:
  4109  00AC                     	ds	1
  4110  00AD                     _LED_green:
  4111  00AD                     	ds	1
  4112  00AE                     _LED_red:
  4113  00AE                     	ds	1
  4114  00AF                     _latchTester:
  4115  00AF                     	ds	1
  4116  00B0                     _oneHzCounter:
  4117  00B0                     	ds	1
  4118  00B1                     _dac_value:
  4119  00B1                     	ds	1
  4120  00B2                     _eusartRxLastError:
  4121  00B2                     	ds	1
  4122  00B3                     _ir_code:
  4123  00B3                     	ds	6
  4124                           
  4125                           	psect	dataBANK1
  4126  00B9                     __pdataBANK1:
  4127  00B9                     _maxFrequencyIndex:
  4128  00B9                     	ds	2
  4129  00BB                     _maxCurrentIndex:
  4130  00BB                     	ds	2
  4131  00BD                     _currentIsOn:
  4132  00BD                     	ds	1
  4133  00BE                     _currentValue:
  4134  00BE                     	ds	20
  4135                           
  4136                           	psect	bssBANK2
  4137  0120                     __pbssBANK2:
  4138  0120                     _dbuf:
  4139  0120                     	ds	32
  4140                           
  4141                           	psect	dataBANK2
  4142  0140                     __pdataBANK2:
  4143  0140                     _frequencyValue:
  4144  0140                     	ds	20
  4145                           
  4146                           	psect	bssBANK3
  4147  01A0                     __pbssBANK3:
  4148  01A0                     _stats:
  4149  01A0                     	ds	33
  4150                           
  4151                           	psect	inittext
  4152  0B09                     init_ram:
  4153  0B09  00FE               	movwf	btemp
  4154  0B0A                     initloop:
  4155  0B0A  0012               	moviw fsr0++
  4156  0B0B  001E               	movwi fsr1++
  4157  0B0C  0BFE               	decfsz	btemp,f
  4158  0B0D  2B0A               	goto	initloop
  4159  0B0E  3400               	retlw	0
  4160                           
  4161                           	psect	clrtext
  4162  0B03                     clear_ram0:	
  4163                           ;	Called with FSR0 containing the base address, and
  4164                           ;	WREG with the size to clear
  4165                           
  4166  0B03  0064               	clrwdt	;clear the watchdog before getting into this loop
  4167  0B04                     clrloop0:
  4168  0B04  0180               	clrf	0	;clear RAM location pointed to by FSR
  4169  0B05  3101               	addfsr 0,1
  4170  0B06  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4171  0B07  2B04               	goto	clrloop0	;have we reached the end yet?
  4172  0B08  3400               	retlw	0	;all done for this memory range, return
  4173                           
  4174                           	psect	cstackBANK1
  4175  00E5                     __pcstackBANK1:
  4176  00E5                     ??_process_remote_command:
  4177                           
  4178                           ; 1 bytes @ 0x0
  4179  00E5                     	ds	2
  4180  00E7                     process_remote_command@code:
  4181                           
  4182                           ; 1 bytes @ 0x2
  4183  00E7                     	ds	1
  4184  00E8                     ??_main:
  4185                           
  4186                           ; 1 bytes @ 0x3
  4187  00E8                     	ds	1
  4188  00E9                     main@low_reading_count:
  4189                           
  4190                           ; 2 bytes @ 0x4
  4191  00E9                     	ds	2
  4192  00EB                     main@batt_mv:
  4193                           
  4194                           ; 2 bytes @ 0x6
  4195  00EB                     	ds	2
  4196                           
  4197                           	psect	cstackCOMMON
  4198  0070                     __pcstackCOMMON:
  4199  0070                     ?_PIN_MANAGER_Initialize:
  4200  0070                     ?_OSCILLATOR_Initialize:	
  4201                           ; 1 bytes @ 0x0
  4202                           
  4203  0070                     ?_WDT_Initialize:	
  4204                           ; 1 bytes @ 0x0
  4205                           
  4206  0070                     ?_OPA1_Initialize:	
  4207                           ; 1 bytes @ 0x0
  4208                           
  4209  0070                     ?_TMR4_Initialize:	
  4210                           ; 1 bytes @ 0x0
  4211                           
  4212  0070                     ?_OPA2_Initialize:	
  4213                           ; 1 bytes @ 0x0
  4214                           
  4215  0070                     ?_TMR1_Initialize:	
  4216                           ; 1 bytes @ 0x0
  4217                           
  4218  0070                     ?_TMR2_Initialize:	
  4219                           ; 1 bytes @ 0x0
  4220                           
  4221  0070                     ?_EXT_INT_Initialize:	
  4222                           ; 1 bytes @ 0x0
  4223                           
  4224  0070                     ?_TMR0_Initialize:	
  4225                           ; 1 bytes @ 0x0
  4226                           
  4227  0070                     ?_EUSART_Initialize:	
  4228                           ; 1 bytes @ 0x0
  4229                           
  4230  0070                     ?_TMR0_ISR:	
  4231                           ; 1 bytes @ 0x0
  4232                           
  4233  0070                     ??_TMR0_ISR:	
  4234                           ; 1 bytes @ 0x0
  4235                           
  4236  0070                     ?_INT_ISR:	
  4237                           ; 1 bytes @ 0x0
  4238                           
  4239  0070                     ?_TMR4_ISR:	
  4240                           ; 1 bytes @ 0x0
  4241                           
  4242  0070                     ?_TMR1_ISR:	
  4243                           ; 1 bytes @ 0x0
  4244                           
  4245  0070                     ?_INT_CallBack:	
  4246                           ; 1 bytes @ 0x0
  4247                           
  4248  0070                     ?_TMR0_DefaultInterruptHandler:	
  4249                           ; 1 bytes @ 0x0
  4250                           
  4251  0070                     ??_TMR0_DefaultInterruptHandler:	
  4252                           ; 1 bytes @ 0x0
  4253                           
  4254  0070                     ?_TMR4_DefaultInterruptHandler:	
  4255                           ; 1 bytes @ 0x0
  4256                           
  4257  0070                     ?_TMR1_DefaultInterruptHandler:	
  4258                           ; 1 bytes @ 0x0
  4259                           
  4260  0070                     ?_DAC_Initialize:	
  4261                           ; 1 bytes @ 0x0
  4262                           
  4263  0070                     ?_DAC_SetOutput:	
  4264                           ; 1 bytes @ 0x0
  4265                           
  4266  0070                     ??_DAC_SetOutput:	
  4267                           ; 1 bytes @ 0x0
  4268                           
  4269  0070                     ?_SYSTEM_Initialize:	
  4270                           ; 1 bytes @ 0x0
  4271                           
  4272  0070                     ?_PIN_MANAGER_IOC:	
  4273                           ; 1 bytes @ 0x0
  4274                           
  4275  0070                     ??_PIN_MANAGER_IOC:	
  4276                           ; 1 bytes @ 0x0
  4277                           
  4278  0070                     ?_INTERRUPT_InterruptManager:	
  4279                           ; 1 bytes @ 0x0
  4280                           
  4281  0070                     ?_EUSART_Write:	
  4282                           ; 1 bytes @ 0x0
  4283                           
  4284  0070                     ?_putch:	
  4285                           ; 1 bytes @ 0x0
  4286                           
  4287  0070                     ?_INT_DefaultInterruptHandler:	
  4288                           ; 1 bytes @ 0x0
  4289                           
  4290  0070                     ??_INT_DefaultInterruptHandler:	
  4291                           ; 1 bytes @ 0x0
  4292                           
  4293  0070                     ?_TMR4_LoadPeriodRegister:	
  4294                           ; 1 bytes @ 0x0
  4295                           
  4296  0070                     ?_readPersistentState:	
  4297                           ; 1 bytes @ 0x0
  4298                           
  4299  0070                     ?_writePersistentState:	
  4300                           ; 1 bytes @ 0x0
  4301                           
  4302  0070                     ?_initLED:	
  4303                           ; 1 bytes @ 0x0
  4304                           
  4305  0070                     ?_lowBattery:	
  4306                           ; 1 bytes @ 0x0
  4307                           
  4308  0070                     ?_startUp:	
  4309                           ; 1 bytes @ 0x0
  4310                           
  4311  0070                     ?_selectSomething:	
  4312                           ; 1 bytes @ 0x0
  4313                           
  4314  0070                     ?_selectFrequency:	
  4315                           ; 1 bytes @ 0x0
  4316                           
  4317  0070                     ?_selectCurrent:	
  4318                           ; 1 bytes @ 0x0
  4319                           
  4320  0070                     ?_selectIncrease:	
  4321                           ; 1 bytes @ 0x0
  4322                           
  4323  0070                     ?_selectDecrease:	
  4324                           ; 1 bytes @ 0x0
  4325                           
  4326  0070                     ?_selectCurrentValue:	
  4327                           ; 1 bytes @ 0x0
  4328                           
  4329  0070                     ?_selectFrequencyValue:	
  4330                           ; 1 bytes @ 0x0
  4331                           
  4332  0070                     ?_process_remote_command:	
  4333                           ; 1 bytes @ 0x0
  4334                           
  4335  0070                     ?_LATCH_Initialize:	
  4336                           ; 1 bytes @ 0x0
  4337                           
  4338  0070                     ?_main:	
  4339                           ; 1 bytes @ 0x0
  4340                           
  4341  0070                     DAC_SetOutput@inputData:	
  4342                           ; 1 bytes @ 0x0
  4343                           
  4344                           
  4345                           ; 1 bytes @ 0x0
  4346  0070                     	ds	1
  4347  0071                     ??_TMR1_ISR:
  4348  0071                     ??_TMR4_DefaultInterruptHandler:	
  4349                           ; 1 bytes @ 0x1
  4350                           
  4351  0071                     ??_TMR1_DefaultInterruptHandler:	
  4352                           ; 1 bytes @ 0x1
  4353                           
  4354                           
  4355                           ; 1 bytes @ 0x1
  4356  0071                     	ds	1
  4357  0072                     ??_TMR4_ISR:
  4358  0072                     INT_DefaultInterruptHandler@time:	
  4359                           ; 1 bytes @ 0x2
  4360                           
  4361                           
  4362                           ; 1 bytes @ 0x2
  4363  0072                     	ds	1
  4364  0073                     ??_PIN_MANAGER_Initialize:
  4365  0073                     ??_OSCILLATOR_Initialize:	
  4366                           ; 1 bytes @ 0x3
  4367                           
  4368  0073                     ??_WDT_Initialize:	
  4369                           ; 1 bytes @ 0x3
  4370                           
  4371  0073                     ??_OPA1_Initialize:	
  4372                           ; 1 bytes @ 0x3
  4373                           
  4374  0073                     ??_OPA2_Initialize:	
  4375                           ; 1 bytes @ 0x3
  4376                           
  4377  0073                     ??_TMR2_Initialize:	
  4378                           ; 1 bytes @ 0x3
  4379                           
  4380  0073                     ??_INT_ISR:	
  4381                           ; 1 bytes @ 0x3
  4382                           
  4383  0073                     ?_EUSART_SetFramingErrorHandler:	
  4384                           ; 1 bytes @ 0x3
  4385                           
  4386  0073                     ?_EUSART_SetOverrunErrorHandler:	
  4387                           ; 1 bytes @ 0x3
  4388                           
  4389  0073                     ?_EUSART_SetErrorHandler:	
  4390                           ; 1 bytes @ 0x3
  4391                           
  4392  0073                     ??_INT_CallBack:	
  4393                           ; 1 bytes @ 0x3
  4394                           
  4395  0073                     ?_TMR0_SetInterruptHandler:	
  4396                           ; 1 bytes @ 0x3
  4397                           
  4398  0073                     ?_TMR4_SetInterruptHandler:	
  4399                           ; 1 bytes @ 0x3
  4400                           
  4401  0073                     ?_FLASH_EraseBlock:	
  4402                           ; 1 bytes @ 0x3
  4403                           
  4404  0073                     ?_TMR1_SetInterruptHandler:	
  4405                           ; 1 bytes @ 0x3
  4406                           
  4407  0073                     ??_DAC_Initialize:	
  4408                           ; 1 bytes @ 0x3
  4409                           
  4410  0073                     ??_INTERRUPT_InterruptManager:	
  4411                           ; 1 bytes @ 0x3
  4412                           
  4413  0073                     ??_EUSART_Write:	
  4414                           ; 1 bytes @ 0x3
  4415                           
  4416  0073                     ?_INT_SetInterruptHandler:	
  4417                           ; 1 bytes @ 0x3
  4418                           
  4419  0073                     ??_TMR4_LoadPeriodRegister:	
  4420                           ; 1 bytes @ 0x3
  4421                           
  4422  0073                     ??_readPersistentState:	
  4423                           ; 1 bytes @ 0x3
  4424                           
  4425  0073                     ??_initLED:	
  4426                           ; 1 bytes @ 0x3
  4427                           
  4428  0073                     ?_setLEDColor:	
  4429                           ; 1 bytes @ 0x3
  4430                           
  4431  0073                     ??_LATCH_Initialize:	
  4432                           ; 1 bytes @ 0x3
  4433                           
  4434  0073                     ??___lmul:	
  4435                           ; 1 bytes @ 0x3
  4436                           
  4437  0073                     ?___awdiv:	
  4438                           ; 1 bytes @ 0x3
  4439                           
  4440  0073                     EUSART_Write@txData:	
  4441                           ; 2 bytes @ 0x3
  4442                           
  4443  0073                     TMR4_LoadPeriodRegister@periodVal:	
  4444                           ; 1 bytes @ 0x3
  4445                           
  4446  0073                     setLEDColor@green:	
  4447                           ; 1 bytes @ 0x3
  4448                           
  4449  0073                     EUSART_SetFramingErrorHandler@interruptHandler:	
  4450                           ; 1 bytes @ 0x3
  4451                           
  4452  0073                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  4453                           ; 2 bytes @ 0x3
  4454                           
  4455  0073                     EUSART_SetErrorHandler@interruptHandler:	
  4456                           ; 2 bytes @ 0x3
  4457                           
  4458  0073                     INT_SetInterruptHandler@InterruptHandler:	
  4459                           ; 2 bytes @ 0x3
  4460                           
  4461  0073                     TMR0_SetInterruptHandler@InterruptHandler:	
  4462                           ; 2 bytes @ 0x3
  4463                           
  4464  0073                     TMR4_SetInterruptHandler@InterruptHandler:	
  4465                           ; 2 bytes @ 0x3
  4466                           
  4467  0073                     FLASH_EraseBlock@startAddr:	
  4468                           ; 2 bytes @ 0x3
  4469                           
  4470  0073                     TMR1_SetInterruptHandler@InterruptHandler:	
  4471                           ; 2 bytes @ 0x3
  4472                           
  4473  0073                     ___awdiv@divisor:	
  4474                           ; 2 bytes @ 0x3
  4475                           
  4476  0073                     ___lmul@product:	
  4477                           ; 2 bytes @ 0x3
  4478                           
  4479                           
  4480                           ; 4 bytes @ 0x3
  4481  0073                     	ds	1
  4482  0074                     ??_putch:
  4483  0074                     putch@txData:	
  4484                           ; 1 bytes @ 0x4
  4485                           
  4486  0074                     setLEDColor@blue:	
  4487                           ; 1 bytes @ 0x4
  4488                           
  4489                           
  4490                           ; 1 bytes @ 0x4
  4491  0074                     	ds	1
  4492  0075                     ??_TMR4_Initialize:
  4493  0075                     ??_TMR1_Initialize:	
  4494                           ; 1 bytes @ 0x5
  4495                           
  4496  0075                     ??_EXT_INT_Initialize:	
  4497                           ; 1 bytes @ 0x5
  4498                           
  4499  0075                     ??_TMR0_Initialize:	
  4500                           ; 1 bytes @ 0x5
  4501                           
  4502  0075                     ??_EUSART_Initialize:	
  4503                           ; 1 bytes @ 0x5
  4504                           
  4505  0075                     ??_EUSART_SetFramingErrorHandler:	
  4506                           ; 1 bytes @ 0x5
  4507                           
  4508  0075                     ??_EUSART_SetOverrunErrorHandler:	
  4509                           ; 1 bytes @ 0x5
  4510                           
  4511  0075                     ??_EUSART_SetErrorHandler:	
  4512                           ; 1 bytes @ 0x5
  4513                           
  4514  0075                     ??_TMR0_SetInterruptHandler:	
  4515                           ; 1 bytes @ 0x5
  4516                           
  4517  0075                     ??_TMR4_SetInterruptHandler:	
  4518                           ; 1 bytes @ 0x5
  4519                           
  4520  0075                     ??_FLASH_EraseBlock:	
  4521                           ; 1 bytes @ 0x5
  4522                           
  4523  0075                     ??_TMR1_SetInterruptHandler:	
  4524                           ; 1 bytes @ 0x5
  4525                           
  4526  0075                     ??_INT_SetInterruptHandler:	
  4527                           ; 1 bytes @ 0x5
  4528                           
  4529  0075                     ??_setLEDColor:	
  4530                           ; 1 bytes @ 0x5
  4531                           
  4532  0075                     ?_fputc:	
  4533                           ; 1 bytes @ 0x5
  4534                           
  4535  0075                     FLASH_EraseBlock@GIEBitValue:	
  4536                           ; 2 bytes @ 0x5
  4537                           
  4538  0075                     ___awdiv@dividend:	
  4539                           ; 1 bytes @ 0x5
  4540                           
  4541  0075                     fputc@c:	
  4542                           ; 2 bytes @ 0x5
  4543                           
  4544                           
  4545                           ; 2 bytes @ 0x5
  4546  0075                     	ds	1
  4547  0076                     ??_SYSTEM_Initialize:
  4548  0076                     setLEDColor@red:	
  4549                           ; 1 bytes @ 0x6
  4550                           
  4551                           
  4552                           ; 1 bytes @ 0x6
  4553  0076                     	ds	1
  4554  0077                     ??___awdiv:
  4555  0077                     fputc@fp:	
  4556                           ; 1 bytes @ 0x7
  4557                           
  4558                           
  4559                           ; 1 bytes @ 0x7
  4560  0077                     	ds	1
  4561  0078                     ??_battery_voltage:
  4562                           
  4563                           	psect	cstackBANK0
  4564  0020                     __pcstackBANK0:	
  4565                           ; 1 bytes @ 0x8
  4566                           
  4567  0020                     ?_FLASH_WriteBlock:
  4568  0020                     ??_fputc:	
  4569                           ; 1 bytes @ 0x0
  4570                           
  4571  0020                     ??_lowBattery:	
  4572                           ; 1 bytes @ 0x0
  4573                           
  4574  0020                     ??_startUp:	
  4575                           ; 1 bytes @ 0x0
  4576                           
  4577  0020                     ??_selectSomething:	
  4578                           ; 1 bytes @ 0x0
  4579                           
  4580  0020                     ?___lmul:	
  4581                           ; 1 bytes @ 0x0
  4582                           
  4583  0020                     ___awdiv@counter:	
  4584                           ; 4 bytes @ 0x0
  4585                           
  4586  0020                     FLASH_WriteBlock@writeAddr:	
  4587                           ; 1 bytes @ 0x0
  4588                           
  4589  0020                     ___lmul@multiplier:	
  4590                           ; 2 bytes @ 0x0
  4591                           
  4592                           
  4593                           ; 4 bytes @ 0x0
  4594  0020                     	ds	1
  4595  0021                     ___awdiv@sign:
  4596                           
  4597                           ; 1 bytes @ 0x1
  4598  0021                     	ds	1
  4599  0022                     FLASH_WriteBlock@flashWordArray:
  4600  0022                     startUp@i:	
  4601                           ; 1 bytes @ 0x2
  4602                           
  4603  0022                     ___awdiv@quotient:	
  4604                           ; 2 bytes @ 0x2
  4605                           
  4606                           
  4607                           ; 2 bytes @ 0x2
  4608  0022                     	ds	1
  4609  0023                     ??_FLASH_WriteBlock:
  4610                           
  4611                           ; 1 bytes @ 0x3
  4612  0023                     	ds	1
  4613  0024                     ___lmul@multiplicand:
  4614                           
  4615                           ; 4 bytes @ 0x4
  4616  0024                     	ds	1
  4617  0025                     ?_vfpfcnvrt:
  4618  0025                     vfpfcnvrt@fmt:	
  4619                           ; 2 bytes @ 0x5
  4620                           
  4621                           
  4622                           ; 1 bytes @ 0x5
  4623  0025                     	ds	1
  4624  0026                     vfpfcnvrt@ap:
  4625  0026                     FLASH_WriteBlock@blockStartAddr:	
  4626                           ; 1 bytes @ 0x6
  4627                           
  4628                           
  4629                           ; 2 bytes @ 0x6
  4630  0026                     	ds	1
  4631  0027                     ??_vfpfcnvrt:
  4632                           
  4633                           ; 1 bytes @ 0x7
  4634  0027                     	ds	1
  4635  0028                     ?___aldiv:
  4636  0028                     FLASH_WriteBlock@GIEBitValue:	
  4637                           ; 4 bytes @ 0x8
  4638                           
  4639  0028                     ___aldiv@divisor:	
  4640                           ; 1 bytes @ 0x8
  4641                           
  4642                           
  4643                           ; 4 bytes @ 0x8
  4644  0028                     	ds	1
  4645  0029                     FLASH_WriteBlock@i:
  4646                           
  4647                           ; 1 bytes @ 0x9
  4648  0029                     	ds	1
  4649  002A                     ??_writePersistentState:
  4650                           
  4651                           ; 1 bytes @ 0xA
  4652  002A                     	ds	2
  4653  002C                     vfpfcnvrt@fp:
  4654  002C                     ___aldiv@dividend:	
  4655                           ; 1 bytes @ 0xC
  4656                           
  4657                           
  4658                           ; 4 bytes @ 0xC
  4659  002C                     	ds	1
  4660  002D                     ?_vfprintf:
  4661  002D                     vfprintf@fmt:	
  4662                           ; 2 bytes @ 0xD
  4663                           
  4664                           
  4665                           ; 2 bytes @ 0xD
  4666  002D                     	ds	1
  4667  002E                     writePersistentState@buf:
  4668                           
  4669                           ; 64 bytes @ 0xE
  4670  002E                     	ds	1
  4671  002F                     vfprintf@ap:
  4672                           
  4673                           ; 1 bytes @ 0xF
  4674  002F                     	ds	1
  4675  0030                     ??_vfprintf:
  4676  0030                     ??___aldiv:	
  4677                           ; 1 bytes @ 0x10
  4678                           
  4679                           
  4680                           ; 1 bytes @ 0x10
  4681  0030                     	ds	1
  4682  0031                     ___aldiv@counter:
  4683                           
  4684                           ; 1 bytes @ 0x11
  4685  0031                     	ds	1
  4686  0032                     ___aldiv@sign:
  4687  0032                     vfprintf@fp:	
  4688                           ; 1 bytes @ 0x12
  4689                           
  4690                           
  4691                           ; 1 bytes @ 0x12
  4692  0032                     	ds	1
  4693  0033                     vfprintf@cfmt:
  4694  0033                     ___aldiv@quotient:	
  4695                           ; 2 bytes @ 0x13
  4696                           
  4697                           
  4698                           ; 4 bytes @ 0x13
  4699  0033                     	ds	2
  4700  0035                     ?_printf:
  4701  0035                     printf@fmt:	
  4702                           ; 2 bytes @ 0x15
  4703                           
  4704                           
  4705                           ; 2 bytes @ 0x15
  4706  0035                     	ds	2
  4707  0037                     ??_printf:
  4708  0037                     ?_setFrequency:	
  4709                           ; 1 bytes @ 0x17
  4710                           
  4711  0037                     ?_battery_voltage:	
  4712                           ; 1 bytes @ 0x17
  4713                           
  4714  0037                     setFrequency@frequency_hz:	
  4715                           ; 2 bytes @ 0x17
  4716                           
  4717                           
  4718                           ; 2 bytes @ 0x17
  4719  0037                     	ds	1
  4720  0038                     printf@ap:
  4721                           
  4722                           ; 1 bytes @ 0x18
  4723  0038                     	ds	1
  4724  0039                     ??_selectFrequency:
  4725  0039                     ??_selectCurrent:	
  4726                           ; 1 bytes @ 0x19
  4727                           
  4728  0039                     ??_selectIncrease:	
  4729                           ; 1 bytes @ 0x19
  4730                           
  4731  0039                     ??_selectDecrease:	
  4732                           ; 1 bytes @ 0x19
  4733                           
  4734  0039                     ??_selectCurrentValue:	
  4735                           ; 1 bytes @ 0x19
  4736                           
  4737  0039                     ??_selectFrequencyValue:	
  4738                           ; 1 bytes @ 0x19
  4739                           
  4740  0039                     ?_setCurrent:	
  4741                           ; 1 bytes @ 0x19
  4742                           
  4743  0039                     ??_setFrequency:	
  4744                           ; 1 bytes @ 0x19
  4745                           
  4746  0039                     setCurrent@microamps:	
  4747                           ; 1 bytes @ 0x19
  4748                           
  4749                           
  4750                           ; 2 bytes @ 0x19
  4751  0039                     	ds	1
  4752  003A                     setFrequency@PR4_val:
  4753                           
  4754                           ; 2 bytes @ 0x1A
  4755  003A                     	ds	1
  4756  003B                     setCurrent@Vdd_mv:
  4757                           
  4758                           ; 2 bytes @ 0x1B
  4759  003B                     	ds	2
  4760  003D                     ??_setCurrent:
  4761                           
  4762                           ; 1 bytes @ 0x1D
  4763  003D                     	ds	8
  4764  0045                     setCurrent@Vdac_mv:
  4765                           
  4766                           ; 2 bytes @ 0x25
  4767  0045                     	ds	2
  4768  0047                     setCurrent@DACValue:
  4769                           
  4770                           ; 2 bytes @ 0x27
  4771  0047                     	ds	39
  4772  006E                     writePersistentState@i:
  4773                           
  4774                           ; 1 bytes @ 0x4E
  4775  006E                     	ds	1
  4776  006F                     writePersistentState@idx:
  4777                           
  4778                           ; 1 bytes @ 0x4F
  4779  006F                     	ds	1
  4780                           
  4781                           	psect	maintext
  4782  0462                     __pmaintext:	
  4783 ;;
  4784 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4785 ;;
  4786 ;; *************** function _main *****************
  4787 ;; Defined at:
  4788 ;;		line 597 in file "main.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;		None
  4791 ;; Auto vars:     Size  Location     Type
  4792 ;;  batt_mv         2    6[BANK1 ] short 
  4793 ;;  low_reading_    2    4[BANK1 ] short 
  4794 ;; Return value:  Size  Location     Type
  4795 ;;                  1    wreg      void 
  4796 ;; Registers used:
  4797 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4798 ;; Tracked objects:
  4799 ;;		On entry : B1F/0
  4800 ;;		On exit  : 0/0
  4801 ;;		Unchanged: 0/0
  4802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4803 ;;      Params:         0       0       0       0       0       0       0       0
  4804 ;;      Locals:         0       0       4       0       0       0       0       0
  4805 ;;      Temps:          0       0       1       0       0       0       0       0
  4806 ;;      Totals:         0       0       5       0       0       0       0       0
  4807 ;;Total ram usage:        5 bytes
  4808 ;; Hardware stack levels required when called: 12
  4809 ;; This function calls:
  4810 ;;		_DAC_Initialize
  4811 ;;		_LATCH_Initialize
  4812 ;;		_OPA1_Initialize
  4813 ;;		_OPA2_Initialize
  4814 ;;		_SYSTEM_Initialize
  4815 ;;		_battery_voltage
  4816 ;;		_initLED
  4817 ;;		_lowBattery
  4818 ;;		_process_remote_command
  4819 ;;		_readPersistentState
  4820 ;;		_setCurrent
  4821 ;;		_setFrequency
  4822 ;;		_startUp
  4823 ;; This function is called by:
  4824 ;;		Startup code after reset
  4825 ;; This function uses a non-reentrant model
  4826 ;;
  4827                           
  4828                           
  4829                           ;psect for function _main
  4830  0462                     _main:
  4831  0462                     l4380:	
  4832                           ;incstack = 0
  4833                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4834                           
  4835                           
  4836                           ;main.c: 599:   SYSTEM_Initialize();
  4837  0462  318C  24A1  3184   	fcall	_SYSTEM_Initialize
  4838  0465                     l4382:
  4839                           
  4840                           ;main.c: 600:   LATCH_Initialize();
  4841  0465  318B  2349  3184   	fcall	_LATCH_Initialize
  4842  0468                     l4384:
  4843                           
  4844                           ;main.c: 601:   DAC_Initialize();
  4845  0468  318A  22CD  3184   	fcall	_DAC_Initialize
  4846  046B                     l4386:
  4847                           
  4848                           ;main.c: 602:   OPA1_Initialize();
  4849  046B  318A  22B6  3184   	fcall	_OPA1_Initialize
  4850  046E                     l4388:
  4851                           
  4852                           ;main.c: 603:   OPA2_Initialize();
  4853  046E  318A  22BA  3184   	fcall	_OPA2_Initialize
  4854  0471                     l4390:
  4855                           
  4856                           ;main.c: 604:   initLED();
  4857  0471  318F  2741  3184   	fcall	_initLED
  4858  0474                     l4392:
  4859                           
  4860                           ;main.c: 609:   readPersistentState();
  4861  0474  318C  243D  3184   	fcall	_readPersistentState
  4862  0477                     l4394:
  4863                           
  4864                           ;main.c: 610:   setCurrent(currentValue[currentIndex], battery_voltage());
  4865  0477  0021               	movlb	1	; select bank1
  4866  0478  3563               	lslf	_currentIndex^(0+128),w
  4867  0479  3EBE               	addlw	(low (_currentValue| 0))& (0+255)
  4868  047A  0086               	movwf	6
  4869  047B  0187               	clrf	7
  4870  047C  3F40               	moviw [0]fsr1
  4871  047D  0020               	movlb	0	; select bank0
  4872  047E  00B9               	movwf	setCurrent@microamps
  4873  047F  3F41               	moviw [1]fsr1
  4874  0480  00BA               	movwf	setCurrent@microamps+1
  4875  0481  318E  261C  3184   	fcall	_battery_voltage
  4876  0484  0020               	movlb	0	; select bank0
  4877  0485  0838               	movf	?_battery_voltage+1,w
  4878  0486  00BC               	movwf	setCurrent@Vdd_mv+1
  4879  0487  0837               	movf	?_battery_voltage,w
  4880  0488  00BB               	movwf	setCurrent@Vdd_mv
  4881  0489  3183  23BD  3184   	fcall	_setCurrent
  4882  048C                     l4396:
  4883                           
  4884                           ;main.c: 611:   setFrequency(frequencyValue[frequencyIndex]);
  4885  048C  0021               	movlb	1	; select bank1
  4886  048D  3561               	lslf	_frequencyIndex^(0+128),w
  4887  048E  3E40               	addlw	(low (_frequencyValue| (0+256)))& (0+255)
  4888  048F  0086               	movwf	6
  4889  0490  3001               	movlw	1	; select bank2/3
  4890  0491  0087               	movwf	7
  4891  0492  3F40               	moviw [0]fsr1
  4892  0493  0020               	movlb	0	; select bank0
  4893  0494  00B7               	movwf	setFrequency@frequency_hz
  4894  0495  3F41               	moviw [1]fsr1
  4895  0496  00B8               	movwf	setFrequency@frequency_hz+1
  4896  0497  3186  26DE  3184   	fcall	_setFrequency
  4897  049A                     l4398:
  4898                           
  4899                           ;main.c: 613:   (INTCONbits.GIE = 1);
  4900  049A  178B               	bsf	11,7	;volatile
  4901  049B                     l4400:
  4902                           
  4903                           ;main.c: 614:   (INTCONbits.PEIE = 1);
  4904  049B  170B               	bsf	11,6	;volatile
  4905  049C                     l4402:
  4906                           
  4907                           ;main.c: 615:   startUp();
  4908  049C  318E  2683  3184   	fcall	_startUp
  4909  049F                     l4404:
  4910                           
  4911                           ;main.c: 617:   const int16_t BATTERY_NUM_LOW_READINGS = 10000;;main.c: 618:   int16_t l
      +                          ow_reading_count = 0;
  4912  049F  0021               	movlb	1	; select bank1
  4913  04A0  01E9               	clrf	main@low_reading_count^(0+128)
  4914  04A1  01EA               	clrf	(main@low_reading_count+1)^(0+128)
  4915  04A2                     l4406:
  4916                           
  4917                           ;main.c: 623:     int16_t batt_mv = battery_voltage();
  4918  04A2  318E  261C  3184   	fcall	_battery_voltage
  4919  04A5  0020               	movlb	0	; select bank0
  4920  04A6  0838               	movf	?_battery_voltage+1,w
  4921  04A7  0021               	movlb	1	; select bank1
  4922  04A8  00EC               	movwf	(main@batt_mv+1)^(0+128)
  4923  04A9  0020               	movlb	0	; select bank0
  4924  04AA  0837               	movf	?_battery_voltage,w
  4925  04AB  0021               	movlb	1	; select bank1
  4926  04AC  00EB               	movwf	main@batt_mv^(0+128)
  4927  04AD                     l4408:
  4928                           
  4929                           ;main.c: 624:     const int16_t BATTERY_THRESHOLD = 2000;;main.c: 626:     if (batt_mv <
      +                           BATTERY_THRESHOLD)
  4930  04AD  086C               	movf	(main@batt_mv+1)^(0+128),w
  4931  04AE  3A80               	xorlw	128
  4932  04AF  00E8               	movwf	??_main^(0+128)
  4933  04B0  3087               	movlw	135
  4934  04B1  0268               	subwf	??_main^(0+128),w
  4935  04B2  1D03               	skipz
  4936  04B3  2CB6               	goto	u3025
  4937  04B4  30D0               	movlw	208
  4938  04B5  026B               	subwf	main@batt_mv^(0+128),w
  4939  04B6                     u3025:
  4940  04B6  1803               	skipnc
  4941  04B7  2CB9               	goto	u3021
  4942  04B8  2CBA               	goto	u3020
  4943  04B9                     u3021:
  4944  04B9  2CC0               	goto	l4412
  4945  04BA                     u3020:
  4946  04BA                     l4410:
  4947                           
  4948                           ;main.c: 627:     {;main.c: 628:         low_reading_count++;
  4949  04BA  3001               	movlw	1
  4950  04BB  0021               	movlb	1	; select bank1
  4951  04BC  07E9               	addwf	main@low_reading_count^(0+128),f
  4952  04BD  3000               	movlw	0
  4953  04BE  3DEA               	addwfc	(main@low_reading_count+1)^(0+128),f
  4954                           
  4955                           ;main.c: 631:     } else {
  4956  04BF  2CC3               	goto	l4414
  4957  04C0                     l4412:
  4958                           
  4959                           ;main.c: 632:         low_reading_count = 0;
  4960  04C0  0021               	movlb	1	; select bank1
  4961  04C1  01E9               	clrf	main@low_reading_count^(0+128)
  4962  04C2  01EA               	clrf	(main@low_reading_count+1)^(0+128)
  4963  04C3                     l4414:
  4964                           
  4965                           ;main.c: 635:     if (low_reading_count > BATTERY_NUM_LOW_READINGS)
  4966  04C3  086A               	movf	(main@low_reading_count+1)^(0+128),w
  4967  04C4  3A80               	xorlw	128
  4968  04C5  00E8               	movwf	??_main^(0+128)
  4969  04C6  30A7               	movlw	167
  4970  04C7  0268               	subwf	??_main^(0+128),w
  4971  04C8  1D03               	skipz
  4972  04C9  2CCC               	goto	u3035
  4973  04CA  3011               	movlw	17
  4974  04CB  0269               	subwf	main@low_reading_count^(0+128),w
  4975  04CC                     u3035:
  4976  04CC  1C03               	skipc
  4977  04CD  2CCF               	goto	u3031
  4978  04CE  2CD0               	goto	u3030
  4979  04CF                     u3031:
  4980  04CF  2CD3               	goto	l4418
  4981  04D0                     u3030:
  4982  04D0                     l4416:
  4983                           
  4984                           ;main.c: 636:     {;main.c: 637:         lowBattery();
  4985  04D0  318D  258C  3184   	fcall	_lowBattery
  4986  04D3                     l4418:
  4987                           
  4988                           ;main.c: 642:     setCurrent(currentValue[currentIndex], batt_mv);
  4989  04D3  0021               	movlb	1	; select bank1
  4990  04D4  3563               	lslf	_currentIndex^(0+128),w
  4991  04D5  3EBE               	addlw	(low (_currentValue| 0))& (0+255)
  4992  04D6  0086               	movwf	6
  4993  04D7  0187               	clrf	7
  4994  04D8  3F40               	moviw [0]fsr1
  4995  04D9  0020               	movlb	0	; select bank0
  4996  04DA  00B9               	movwf	setCurrent@microamps
  4997  04DB  3F41               	moviw [1]fsr1
  4998  04DC  00BA               	movwf	setCurrent@microamps+1
  4999  04DD  0021               	movlb	1	; select bank1
  5000  04DE  086C               	movf	(main@batt_mv+1)^(0+128),w
  5001  04DF  0020               	movlb	0	; select bank0
  5002  04E0  00BC               	movwf	setCurrent@Vdd_mv+1
  5003  04E1  0021               	movlb	1	; select bank1
  5004  04E2  086B               	movf	main@batt_mv^(0+128),w
  5005  04E3  0020               	movlb	0	; select bank0
  5006  04E4  00BB               	movwf	setCurrent@Vdd_mv
  5007  04E5  3183  23BD  3184   	fcall	_setCurrent
  5008  04E8                     l4420:
  5009                           
  5010                           ;main.c: 649:     if (STATE_DONE == ir_code.state){
  5011  04E8  3002               	movlw	2
  5012  04E9  0021               	movlb	1	; select bank1
  5013  04EA  0634               	xorwf	(_ir_code^(0+128)+1),w
  5014  04EB  1D03               	btfss	3,2
  5015  04EC  2CEE               	goto	u3041
  5016  04ED  2CEF               	goto	u3040
  5017  04EE                     u3041:
  5018  04EE  2CA2               	goto	l4406
  5019  04EF                     u3040:
  5020  04EF                     l4422:
  5021                           
  5022                           ;main.c: 667:       process_remote_command(&ir_code);
  5023  04EF  30B3               	movlw	(low (_ir_code| 0))& (0+255)
  5024  04F0  3180  2087  3184   	fcall	_process_remote_command
  5025  04F3                     l4424:
  5026                           
  5027                           ;main.c: 670:       ir_code.state = STATE_RESET;
  5028  04F3  0021               	movlb	1	; select bank1
  5029  04F4  01B4               	clrf	(_ir_code^(0+128)+1)
  5030  04F5  2CA2               	goto	l4406
  5031  04F6  3180  284B         	ljmp	start
  5032  04F8                     __end_of_main:
  5033                           
  5034                           	psect	text1
  5035  0E83                     __ptext1:	
  5036 ;; *************** function _startUp *****************
  5037 ;; Defined at:
  5038 ;;		line 253 in file "main.c"
  5039 ;; Parameters:    Size  Location     Type
  5040 ;;		None
  5041 ;; Auto vars:     Size  Location     Type
  5042 ;;  i               2    2[BANK0 ] int 
  5043 ;; Return value:  Size  Location     Type
  5044 ;;                  1    wreg      void 
  5045 ;; Registers used:
  5046 ;;		wreg, status,2, status,0, pclath, cstack
  5047 ;; Tracked objects:
  5048 ;;		On entry : 0/0
  5049 ;;		On exit  : 0/0
  5050 ;;		Unchanged: 0/0
  5051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5052 ;;      Params:         0       0       0       0       0       0       0       0
  5053 ;;      Locals:         0       2       0       0       0       0       0       0
  5054 ;;      Temps:          0       2       0       0       0       0       0       0
  5055 ;;      Totals:         0       4       0       0       0       0       0       0
  5056 ;;Total ram usage:        4 bytes
  5057 ;; Hardware stack levels used: 1
  5058 ;; Hardware stack levels required when called: 5
  5059 ;; This function calls:
  5060 ;;		_setLEDColor
  5061 ;; This function is called by:
  5062 ;;		_main
  5063 ;; This function uses a non-reentrant model
  5064 ;;
  5065                           
  5066                           
  5067                           ;psect for function _startUp
  5068  0E83                     _startUp:
  5069  0E83                     l4102:	
  5070                           ;incstack = 0
  5071                           ; Regs used in _startUp: [wreg+status,2+status,0+pclath+cstack]
  5072                           
  5073                           
  5074                           ;main.c: 254:   interfaceState = STATE_RUNNING;
  5075  0E83  01F8               	clrf	_interfaceState
  5076                           
  5077                           ;main.c: 255:   for (int i = 0; i < 5; i++){
  5078  0E84  0020               	movlb	0	; select bank0
  5079  0E85  01A2               	clrf	startUp@i
  5080  0E86  01A3               	clrf	startUp@i+1
  5081  0E87                     l4108:
  5082                           
  5083                           ;main.c: 256:     setLEDColor(0, 180, 230);
  5084  0E87  30B4               	movlw	180
  5085  0E88  0020               	movlb	0	; select bank0
  5086  0E89  00A0               	movwf	??_startUp
  5087  0E8A  0820               	movf	??_startUp,w
  5088  0E8B  00F3               	movwf	setLEDColor@green
  5089  0E8C  30E6               	movlw	230
  5090  0E8D  00A1               	movwf	??_startUp+1
  5091  0E8E  0821               	movf	??_startUp+1,w
  5092  0E8F  00F4               	movwf	setLEDColor@blue
  5093  0E90  3000               	movlw	0
  5094  0E91  318B  23C1  318E   	fcall	_setLEDColor
  5095  0E94                     l4110:
  5096                           
  5097                           ;main.c: 257:     _delay((unsigned long)((100)*(4000000/4000.0)));
  5098  0E94  3082               	movlw	130
  5099  0E95  0020               	movlb	0	; select bank0
  5100  0E96  00A0               	movwf	??_startUp
  5101  0E97  30DD               	movlw	221
  5102  0E98                     u3057:
  5103  0E98  0B89               	decfsz	9,f
  5104  0E99  2E98               	goto	u3057
  5105  0E9A  0BA0               	decfsz	??_startUp,f
  5106  0E9B  2E98               	goto	u3057
  5107  0E9C  3200               	nop2
  5108  0E9D                     l4112:
  5109                           
  5110                           ;main.c: 258:     setLEDColor(0, 0, 0);
  5111  0E9D  01F3               	clrf	setLEDColor@green
  5112  0E9E  01F4               	clrf	setLEDColor@blue
  5113  0E9F  3000               	movlw	0
  5114  0EA0  318B  23C1  318E   	fcall	_setLEDColor
  5115                           
  5116                           ;main.c: 259:     _delay((unsigned long)((100)*(4000000/4000.0)));
  5117  0EA3  3082               	movlw	130
  5118  0EA4  0020               	movlb	0	; select bank0
  5119  0EA5  00A0               	movwf	??_startUp
  5120  0EA6  30DD               	movlw	221
  5121  0EA7                     u3067:
  5122  0EA7  0B89               	decfsz	9,f
  5123  0EA8  2EA7               	goto	u3067
  5124  0EA9  0BA0               	decfsz	??_startUp,f
  5125  0EAA  2EA7               	goto	u3067
  5126  0EAB  3200               	nop2
  5127                           
  5128                           ;main.c: 260:   }
  5129  0EAC  3001               	movlw	1
  5130  0EAD  0020               	movlb	0	; select bank0
  5131  0EAE  07A2               	addwf	startUp@i,f
  5132  0EAF  3000               	movlw	0
  5133  0EB0  3DA3               	addwfc	startUp@i+1,f
  5134  0EB1  0823               	movf	startUp@i+1,w
  5135  0EB2  3A80               	xorlw	128
  5136  0EB3  00A0               	movwf	??_startUp
  5137  0EB4  3080               	movlw	128
  5138  0EB5  0220               	subwf	??_startUp,w
  5139  0EB6  1D03               	skipz
  5140  0EB7  2EBA               	goto	u2705
  5141  0EB8  3005               	movlw	5
  5142  0EB9  0222               	subwf	startUp@i,w
  5143  0EBA                     u2705:
  5144  0EBA  1C03               	skipc
  5145  0EBB  2EBD               	goto	u2701
  5146  0EBC  2EBE               	goto	u2700
  5147  0EBD                     u2701:
  5148  0EBD  2E87               	goto	l4108
  5149  0EBE                     u2700:
  5150  0EBE                     l664:
  5151  0EBE  0008               	return
  5152  0EBF                     __end_of_startUp:
  5153                           
  5154                           	psect	text2
  5155  0C3D                     __ptext2:	
  5156 ;; *************** function _readPersistentState *****************
  5157 ;; Defined at:
  5158 ;;		line 115 in file "main.c"
  5159 ;; Parameters:    Size  Location     Type
  5160 ;;		None
  5161 ;; Auto vars:     Size  Location     Type
  5162 ;;		None
  5163 ;; Return value:  Size  Location     Type
  5164 ;;                  1    wreg      void 
  5165 ;; Registers used:
  5166 ;;		wreg, fsr0l, fsr0h, pclath
  5167 ;; Tracked objects:
  5168 ;;		On entry : 0/0
  5169 ;;		On exit  : 0/0
  5170 ;;		Unchanged: 0/0
  5171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5172 ;;      Params:         0       0       0       0       0       0       0       0
  5173 ;;      Locals:         0       0       0       0       0       0       0       0
  5174 ;;      Temps:          2       0       0       0       0       0       0       0
  5175 ;;      Totals:         2       0       0       0       0       0       0       0
  5176 ;;Total ram usage:        2 bytes
  5177 ;; Hardware stack levels used: 1
  5178 ;; Hardware stack levels required when called: 4
  5179 ;; This function calls:
  5180 ;;		Nothing
  5181 ;; This function is called by:
  5182 ;;		_main
  5183 ;; This function uses a non-reentrant model
  5184 ;;
  5185                           
  5186                           
  5187                           ;psect for function _readPersistentState
  5188  0C3D                     _readPersistentState:
  5189  0C3D                     l3254:	
  5190                           ;incstack = 0
  5191                           ; Regs used in _readPersistentState: [wreg-fsr0h+pclath]
  5192                           
  5193                           
  5194                           ;main.c: 117:   currentIndex = HEF_persistent_state.currentIndex;
  5195  0C3D  30E0               	movlw	224
  5196  0C3E  0084               	movwf	4
  5197  0C3F  308F               	movlw	143
  5198  0C40  0085               	movwf	5
  5199  0C41  0800               	movf	0,w	;code access
  5200  0C42  00F3               	movwf	??_readPersistentState
  5201  0C43  01F4               	clrf	??_readPersistentState+1
  5202  0C44  0873               	movf	??_readPersistentState,w
  5203  0C45  0021               	movlb	1	; select bank1
  5204  0C46  00E3               	movwf	_currentIndex^(0+128)
  5205  0C47  0874               	movf	??_readPersistentState+1,w
  5206  0C48  00E4               	movwf	(_currentIndex+1)^(0+128)
  5207                           
  5208                           ;main.c: 118:   frequencyIndex = HEF_persistent_state.frequencyIndex;
  5209  0C49  30E1               	movlw	225
  5210  0C4A  0084               	movwf	4
  5211  0C4B  308F               	movlw	143
  5212  0C4C  0085               	movwf	5
  5213  0C4D  0800               	movf	0,w	;code access
  5214  0C4E  00F3               	movwf	??_readPersistentState
  5215  0C4F  01F4               	clrf	??_readPersistentState+1
  5216  0C50  0873               	movf	??_readPersistentState,w
  5217  0C51  00E1               	movwf	_frequencyIndex^(0+128)
  5218  0C52  0874               	movf	??_readPersistentState+1,w
  5219  0C53  00E2               	movwf	(_frequencyIndex+1)^(0+128)
  5220                           
  5221                           ;main.c: 119:   dc_frequency_flag = HEF_persistent_state.dc_frequency_flag;
  5222  0C54  30E2               	movlw	226
  5223  0C55  0084               	movwf	4
  5224  0C56  308F               	movlw	143
  5225  0C57  0085               	movwf	5
  5226  0C58  0800               	movf	0,w	;code access
  5227  0C59  00F3               	movwf	??_readPersistentState
  5228  0C5A  0873               	movf	??_readPersistentState,w
  5229  0C5B  00FA               	movwf	_dc_frequency_flag
  5230  0C5C                     l634:
  5231  0C5C  0008               	return
  5232  0C5D                     __end_of_readPersistentState:
  5233                           
  5234                           	psect	text3
  5235  0087                     __ptext3:	
  5236 ;; *************** function _process_remote_command *****************
  5237 ;; Defined at:
  5238 ;;		line 383 in file "main.c"
  5239 ;; Parameters:    Size  Location     Type
  5240 ;;  code            1    wreg     PTR struct .
  5241 ;;		 -> ir_code(6), 
  5242 ;; Auto vars:     Size  Location     Type
  5243 ;;  code            1    2[BANK1 ] PTR struct .
  5244 ;;		 -> ir_code(6), 
  5245 ;; Return value:  Size  Location     Type
  5246 ;;                  1    wreg      void 
  5247 ;; Registers used:
  5248 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5249 ;; Tracked objects:
  5250 ;;		On entry : 0/0
  5251 ;;		On exit  : 0/0
  5252 ;;		Unchanged: 0/0
  5253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5254 ;;      Params:         0       0       0       0       0       0       0       0
  5255 ;;      Locals:         0       0       1       0       0       0       0       0
  5256 ;;      Temps:          0       0       2       0       0       0       0       0
  5257 ;;      Totals:         0       0       3       0       0       0       0       0
  5258 ;;Total ram usage:        3 bytes
  5259 ;; Hardware stack levels used: 1
  5260 ;; Hardware stack levels required when called: 11
  5261 ;; This function calls:
  5262 ;;		_battery_voltage
  5263 ;;		_selectCurrent
  5264 ;;		_selectCurrentValue
  5265 ;;		_selectDecrease
  5266 ;;		_selectFrequency
  5267 ;;		_selectFrequencyValue
  5268 ;;		_selectIncrease
  5269 ;;		_selectSomething
  5270 ;;		_setCurrent
  5271 ;;		_setFrequency
  5272 ;;		_setLEDColor
  5273 ;;		_writePersistentState
  5274 ;; This function is called by:
  5275 ;;		_main
  5276 ;; This function uses a non-reentrant model
  5277 ;;
  5278                           
  5279                           
  5280                           ;psect for function _process_remote_command
  5281  0087                     _process_remote_command:
  5282                           
  5283                           ;incstack = 0
  5284                           ; Regs used in _process_remote_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5285                           ;process_remote_command@code stored from wreg
  5286  0087  0021               	movlb	1	; select bank1
  5287  0088  00E7               	movwf	process_remote_command@code^(0+128)
  5288  0089                     l4114:
  5289                           
  5290                           ;main.c: 384:   setLEDColor(0, 0, 0);
  5291  0089  01F3               	clrf	setLEDColor@green
  5292  008A  01F4               	clrf	setLEDColor@blue
  5293  008B  3000               	movlw	0
  5294  008C  318B  23C1  3180   	fcall	_setLEDColor
  5295                           
  5296                           ;main.c: 386:   switch(code->command){
  5297  008F  2B6D               	goto	l4342
  5298  0090                     l4116:
  5299                           
  5300                           ;main.c: 388:     if(STATE_CURRENT == interfaceState){
  5301  0090  0378               	decf	_interfaceState,w
  5302  0091  1D03               	btfss	3,2
  5303  0092  2894               	goto	u2711
  5304  0093  2895               	goto	u2710
  5305  0094                     u2711:
  5306  0094  28CA               	goto	l4130
  5307  0095                     u2710:
  5308  0095                     l4118:
  5309                           
  5310                           ;main.c: 389:       currentIndex++;
  5311  0095  3001               	movlw	1
  5312  0096  07E3               	addwf	_currentIndex^(0+128),f
  5313  0097  3000               	movlw	0
  5314  0098  3DE4               	addwfc	(_currentIndex+1)^(0+128),f
  5315                           
  5316                           ;main.c: 390:       if (currentIndex > maxCurrentIndex - 1)
  5317  0099  0864               	movf	(_currentIndex+1)^(0+128),w
  5318  009A  3A80               	xorlw	128
  5319  009B  00E5               	movwf	??_process_remote_command^(0+128)
  5320  009C  3080               	movlw	128
  5321  009D  0265               	subwf	??_process_remote_command^(0+128),w
  5322  009E  1D03               	skipz
  5323  009F  28A2               	goto	u2725
  5324  00A0  300A               	movlw	10
  5325  00A1  0263               	subwf	_currentIndex^(0+128),w
  5326  00A2                     u2725:
  5327  00A2  1C03               	skipc
  5328  00A3  28A5               	goto	u2721
  5329  00A4  28A6               	goto	u2720
  5330  00A5                     u2721:
  5331  00A5  28AF               	goto	l4124
  5332  00A6                     u2720:
  5333  00A6                     l4120:
  5334                           
  5335                           ;main.c: 391:       {;main.c: 392:         currentIndex = maxCurrentIndex - 1;
  5336  00A6  3009               	movlw	9
  5337  00A7  0021               	movlb	1	; select bank1
  5338  00A8  00E3               	movwf	_currentIndex^(0+128)
  5339  00A9  3000               	movlw	0
  5340  00AA  00E4               	movwf	(_currentIndex^(0+128)+1)
  5341  00AB                     l4122:
  5342                           
  5343                           ;main.c: 393:         selectSomething();
  5344  00AB  318F  2785  3180   	fcall	_selectSomething
  5345                           
  5346                           ;main.c: 394:       } else {
  5347  00AE  28B2               	goto	l4126
  5348  00AF                     l4124:
  5349                           
  5350                           ;main.c: 395:         selectIncrease();
  5351  00AF  318C  24C6  3180   	fcall	_selectIncrease
  5352  00B2                     l4126:
  5353                           
  5354                           ;main.c: 397:       setCurrent(currentValue[currentIndex], battery_voltage());
  5355  00B2  0021               	movlb	1	; select bank1
  5356  00B3  3563               	lslf	_currentIndex^(0+128),w
  5357  00B4  3EBE               	addlw	(low (_currentValue| 0))& (0+255)
  5358  00B5  0086               	movwf	6
  5359  00B6  0187               	clrf	7
  5360  00B7  3F40               	moviw [0]fsr1
  5361  00B8  0020               	movlb	0	; select bank0
  5362  00B9  00B9               	movwf	setCurrent@microamps
  5363  00BA  3F41               	moviw [1]fsr1
  5364  00BB  00BA               	movwf	setCurrent@microamps+1
  5365  00BC  318E  261C  3180   	fcall	_battery_voltage
  5366  00BF  0020               	movlb	0	; select bank0
  5367  00C0  0838               	movf	?_battery_voltage+1,w
  5368  00C1  00BC               	movwf	setCurrent@Vdd_mv+1
  5369  00C2  0837               	movf	?_battery_voltage,w
  5370  00C3  00BB               	movwf	setCurrent@Vdd_mv
  5371  00C4  3183  23BD  3180   	fcall	_setCurrent
  5372  00C7                     l4128:
  5373                           
  5374                           ;main.c: 398:       writePersistentState();
  5375  00C7  3187  27A4  3180   	fcall	_writePersistentState
  5376  00CA                     l4130:
  5377                           
  5378                           ;main.c: 400:     if(STATE_FREQUENCY == interfaceState){
  5379  00CA  3002               	movlw	2
  5380  00CB  0678               	xorwf	_interfaceState,w
  5381  00CC  1D03               	btfss	3,2
  5382  00CD  28CF               	goto	u2731
  5383  00CE  28D0               	goto	u2730
  5384  00CF                     u2731:
  5385  00CF  28FF               	goto	l4144
  5386  00D0                     u2730:
  5387  00D0                     l4132:
  5388                           
  5389                           ;main.c: 401:       frequencyIndex++;
  5390  00D0  3001               	movlw	1
  5391  00D1  0021               	movlb	1	; select bank1
  5392  00D2  07E1               	addwf	_frequencyIndex^(0+128),f
  5393  00D3  3000               	movlw	0
  5394  00D4  3DE2               	addwfc	(_frequencyIndex+1)^(0+128),f
  5395                           
  5396                           ;main.c: 402:       if (frequencyIndex > maxFrequencyIndex - 1)
  5397  00D5  0862               	movf	(_frequencyIndex+1)^(0+128),w
  5398  00D6  3A80               	xorlw	128
  5399  00D7  00E5               	movwf	??_process_remote_command^(0+128)
  5400  00D8  3080               	movlw	128
  5401  00D9  0265               	subwf	??_process_remote_command^(0+128),w
  5402  00DA  1D03               	skipz
  5403  00DB  28DE               	goto	u2745
  5404  00DC  300A               	movlw	10
  5405  00DD  0261               	subwf	_frequencyIndex^(0+128),w
  5406  00DE                     u2745:
  5407  00DE  1C03               	skipc
  5408  00DF  28E1               	goto	u2741
  5409  00E0  28E2               	goto	u2740
  5410  00E1                     u2741:
  5411  00E1  28EB               	goto	l4138
  5412  00E2                     u2740:
  5413  00E2                     l4134:
  5414                           
  5415                           ;main.c: 403:       {;main.c: 404:         frequencyIndex = maxFrequencyIndex - 1;
  5416  00E2  3009               	movlw	9
  5417  00E3  0021               	movlb	1	; select bank1
  5418  00E4  00E1               	movwf	_frequencyIndex^(0+128)
  5419  00E5  3000               	movlw	0
  5420  00E6  00E2               	movwf	(_frequencyIndex^(0+128)+1)
  5421  00E7                     l4136:
  5422                           
  5423                           ;main.c: 405:         selectSomething();
  5424  00E7  318F  2785  3180   	fcall	_selectSomething
  5425                           
  5426                           ;main.c: 406:       } else {
  5427  00EA  28EE               	goto	l4140
  5428  00EB                     l4138:
  5429                           
  5430                           ;main.c: 407:         selectIncrease();
  5431  00EB  318C  24C6  3180   	fcall	_selectIncrease
  5432  00EE                     l4140:
  5433                           
  5434                           ;main.c: 409:       setFrequency(frequencyValue[frequencyIndex]);
  5435  00EE  0021               	movlb	1	; select bank1
  5436  00EF  3561               	lslf	_frequencyIndex^(0+128),w
  5437  00F0  3E40               	addlw	(low (_frequencyValue| (0+256)))& (0+255)
  5438  00F1  0086               	movwf	6
  5439  00F2  3001               	movlw	1	; select bank2/3
  5440  00F3  0087               	movwf	7
  5441  00F4  3F40               	moviw [0]fsr1
  5442  00F5  0020               	movlb	0	; select bank0
  5443  00F6  00B7               	movwf	setFrequency@frequency_hz
  5444  00F7  3F41               	moviw [1]fsr1
  5445  00F8  00B8               	movwf	setFrequency@frequency_hz+1
  5446  00F9  3186  26DE  3180   	fcall	_setFrequency
  5447  00FC                     l4142:
  5448                           
  5449                           ;main.c: 410:       writePersistentState();
  5450  00FC  3187  27A4  3180   	fcall	_writePersistentState
  5451  00FF                     l4144:
  5452                           
  5453                           ;main.c: 412:     if(STATE_RUNNING == interfaceState){
  5454  00FF  0878               	movf	_interfaceState,w
  5455  0100  1D03               	btfss	3,2
  5456  0101  2903               	goto	u2751
  5457  0102  2904               	goto	u2750
  5458  0103                     u2751:
  5459  0103  2907               	goto	l4148
  5460  0104                     u2750:
  5461  0104                     l4146:
  5462                           
  5463                           ;main.c: 413:       selectSomething();
  5464  0104  318F  2785  3180   	fcall	_selectSomething
  5465  0107                     l4148:
  5466                           
  5467                           ;main.c: 415:     if(STATE_LOWBATTERY == interfaceState){
  5468  0107  3003               	movlw	3
  5469  0108  0678               	xorwf	_interfaceState,w
  5470  0109  1D03               	btfss	3,2
  5471  010A  290C               	goto	u2761
  5472  010B  290D               	goto	u2760
  5473  010C                     u2761:
  5474  010C  2BA3               	goto	l4344
  5475  010D                     u2760:
  5476  010D                     l4150:
  5477                           
  5478                           ;main.c: 416:       selectSomething();
  5479  010D  318F  2785  3180   	fcall	_selectSomething
  5480  0110  2BA3               	goto	l4344
  5481  0111                     l4152:
  5482                           
  5483                           ;main.c: 420:     if(STATE_CURRENT == interfaceState){
  5484  0111  0378               	decf	_interfaceState,w
  5485  0112  1D03               	btfss	3,2
  5486  0113  2915               	goto	u2771
  5487  0114  2916               	goto	u2770
  5488  0115                     u2771:
  5489  0115  293F               	goto	l4168
  5490  0116                     u2770:
  5491  0116                     l4154:
  5492                           
  5493                           ;main.c: 421:       currentIndex--;
  5494  0116  30FF               	movlw	255
  5495  0117  07E3               	addwf	_currentIndex^(0+128),f
  5496  0118  30FF               	movlw	255
  5497  0119  3DE4               	addwfc	(_currentIndex+1)^(0+128),f
  5498  011A                     l4156:
  5499                           
  5500                           ;main.c: 422:       if (currentIndex < 0)
  5501  011A  1FE4               	btfss	(_currentIndex+1)^(0+128),7
  5502  011B  291D               	goto	u2781
  5503  011C  291E               	goto	u2780
  5504  011D                     u2781:
  5505  011D  2924               	goto	l4162
  5506  011E                     u2780:
  5507  011E                     l4158:
  5508                           
  5509                           ;main.c: 423:       {;main.c: 424:         currentIndex = 0;
  5510  011E  01E3               	clrf	_currentIndex^(0+128)
  5511  011F  01E4               	clrf	(_currentIndex+1)^(0+128)
  5512  0120                     l4160:
  5513                           
  5514                           ;main.c: 425:         selectSomething();
  5515  0120  318F  2785  3180   	fcall	_selectSomething
  5516                           
  5517                           ;main.c: 426:       } else {
  5518  0123  2927               	goto	l4164
  5519  0124                     l4162:
  5520                           
  5521                           ;main.c: 427:         selectDecrease();
  5522  0124  318C  247F  3180   	fcall	_selectDecrease
  5523  0127                     l4164:
  5524                           
  5525                           ;main.c: 429:       setCurrent(currentValue[currentIndex], battery_voltage());
  5526  0127  0021               	movlb	1	; select bank1
  5527  0128  3563               	lslf	_currentIndex^(0+128),w
  5528  0129  3EBE               	addlw	(low (_currentValue| 0))& (0+255)
  5529  012A  0086               	movwf	6
  5530  012B  0187               	clrf	7
  5531  012C  3F40               	moviw [0]fsr1
  5532  012D  0020               	movlb	0	; select bank0
  5533  012E  00B9               	movwf	setCurrent@microamps
  5534  012F  3F41               	moviw [1]fsr1
  5535  0130  00BA               	movwf	setCurrent@microamps+1
  5536  0131  318E  261C  3180   	fcall	_battery_voltage
  5537  0134  0020               	movlb	0	; select bank0
  5538  0135  0838               	movf	?_battery_voltage+1,w
  5539  0136  00BC               	movwf	setCurrent@Vdd_mv+1
  5540  0137  0837               	movf	?_battery_voltage,w
  5541  0138  00BB               	movwf	setCurrent@Vdd_mv
  5542  0139  3183  23BD  3180   	fcall	_setCurrent
  5543  013C                     l4166:
  5544                           
  5545                           ;main.c: 430:       writePersistentState();
  5546  013C  3187  27A4  3180   	fcall	_writePersistentState
  5547  013F                     l4168:
  5548                           
  5549                           ;main.c: 432:     if(STATE_FREQUENCY == interfaceState){
  5550  013F  3002               	movlw	2
  5551  0140  0678               	xorwf	_interfaceState,w
  5552  0141  1D03               	btfss	3,2
  5553  0142  2944               	goto	u2791
  5554  0143  2945               	goto	u2790
  5555  0144                     u2791:
  5556  0144  2968               	goto	l4184
  5557  0145                     u2790:
  5558  0145                     l4170:
  5559                           
  5560                           ;main.c: 433:       frequencyIndex--;
  5561  0145  30FF               	movlw	255
  5562  0146  0021               	movlb	1	; select bank1
  5563  0147  07E1               	addwf	_frequencyIndex^(0+128),f
  5564  0148  30FF               	movlw	255
  5565  0149  3DE2               	addwfc	(_frequencyIndex+1)^(0+128),f
  5566  014A                     l4172:
  5567                           
  5568                           ;main.c: 434:       if (frequencyIndex < 0)
  5569  014A  1FE2               	btfss	(_frequencyIndex+1)^(0+128),7
  5570  014B  294D               	goto	u2801
  5571  014C  294E               	goto	u2800
  5572  014D                     u2801:
  5573  014D  2954               	goto	l4178
  5574  014E                     u2800:
  5575  014E                     l4174:
  5576                           
  5577                           ;main.c: 435:       {;main.c: 436:         frequencyIndex = 0;
  5578  014E  01E1               	clrf	_frequencyIndex^(0+128)
  5579  014F  01E2               	clrf	(_frequencyIndex+1)^(0+128)
  5580  0150                     l4176:
  5581                           
  5582                           ;main.c: 437:         selectSomething();
  5583  0150  318F  2785  3180   	fcall	_selectSomething
  5584                           
  5585                           ;main.c: 438:       } else {
  5586  0153  2957               	goto	l4180
  5587  0154                     l4178:
  5588                           
  5589                           ;main.c: 439:         selectDecrease();
  5590  0154  318C  247F  3180   	fcall	_selectDecrease
  5591  0157                     l4180:
  5592                           
  5593                           ;main.c: 441:       setFrequency(frequencyValue[frequencyIndex]);
  5594  0157  0021               	movlb	1	; select bank1
  5595  0158  3561               	lslf	_frequencyIndex^(0+128),w
  5596  0159  3E40               	addlw	(low (_frequencyValue| (0+256)))& (0+255)
  5597  015A  0086               	movwf	6
  5598  015B  3001               	movlw	1	; select bank2/3
  5599  015C  0087               	movwf	7
  5600  015D  3F40               	moviw [0]fsr1
  5601  015E  0020               	movlb	0	; select bank0
  5602  015F  00B7               	movwf	setFrequency@frequency_hz
  5603  0160  3F41               	moviw [1]fsr1
  5604  0161  00B8               	movwf	setFrequency@frequency_hz+1
  5605  0162  3186  26DE  3180   	fcall	_setFrequency
  5606  0165                     l4182:
  5607                           
  5608                           ;main.c: 442:       writePersistentState();
  5609  0165  3187  27A4  3180   	fcall	_writePersistentState
  5610  0168                     l4184:
  5611                           
  5612                           ;main.c: 444:     if(STATE_RUNNING == interfaceState){
  5613  0168  0878               	movf	_interfaceState,w
  5614  0169  1D03               	btfss	3,2
  5615  016A  296C               	goto	u2811
  5616  016B  296D               	goto	u2810
  5617  016C                     u2811:
  5618  016C  2970               	goto	l4188
  5619  016D                     u2810:
  5620  016D                     l4186:
  5621                           
  5622                           ;main.c: 445:       selectSomething();
  5623  016D  318F  2785  3180   	fcall	_selectSomething
  5624  0170                     l4188:
  5625                           
  5626                           ;main.c: 447:     if(STATE_LOWBATTERY == interfaceState){
  5627  0170  3003               	movlw	3
  5628  0171  0678               	xorwf	_interfaceState,w
  5629  0172  1D03               	btfss	3,2
  5630  0173  2975               	goto	u2821
  5631  0174  2976               	goto	u2820
  5632  0175                     u2821:
  5633  0175  2BA3               	goto	l4344
  5634  0176                     u2820:
  5635  0176  290D               	goto	l4150
  5636  0177                     l4192:
  5637                           
  5638                           ;main.c: 452:     selectFrequency();
  5639  0177  318D  2562  3180   	fcall	_selectFrequency
  5640                           
  5641                           ;main.c: 453:     break;
  5642  017A  2BA3               	goto	l4344
  5643  017B                     l4194:
  5644                           
  5645                           ;main.c: 455:     selectCurrent();
  5646  017B  318D  2511  3180   	fcall	_selectCurrent
  5647                           
  5648                           ;main.c: 456:     break;
  5649  017E  2BA3               	goto	l4344
  5650  017F                     l4196:
  5651                           
  5652                           ;main.c: 458:        if (interfaceState == STATE_FREQUENCY){
  5653  017F  3002               	movlw	2
  5654  0180  0678               	xorwf	_interfaceState,w
  5655  0181  1D03               	btfss	3,2
  5656  0182  2984               	goto	u2831
  5657  0183  2985               	goto	u2830
  5658  0184                     u2831:
  5659  0184  2996               	goto	l4204
  5660  0185                     u2830:
  5661  0185                     l4198:
  5662                           
  5663                           ;main.c: 459:            setFrequency(frequencyValue[0]);
  5664  0185  0022               	movlb	2	; select bank2
  5665  0186  0841               	movf	(_frequencyValue+1)^(0+256),w
  5666  0187  0020               	movlb	0	; select bank0
  5667  0188  00B8               	movwf	setFrequency@frequency_hz+1
  5668  0189  0022               	movlb	2	; select bank2
  5669  018A  0840               	movf	_frequencyValue^(0+256),w
  5670  018B  0020               	movlb	0	; select bank0
  5671  018C  00B7               	movwf	setFrequency@frequency_hz
  5672  018D  3186  26DE  3180   	fcall	_setFrequency
  5673  0190                     l4200:
  5674                           
  5675                           ;main.c: 460:            frequencyIndex = 0;
  5676  0190  0021               	movlb	1	; select bank1
  5677  0191  01E1               	clrf	_frequencyIndex^(0+128)
  5678  0192  01E2               	clrf	(_frequencyIndex+1)^(0+128)
  5679  0193                     l4202:
  5680                           
  5681                           ;main.c: 461:            selectFrequencyValue();
  5682  0193  318C  24EB  3180   	fcall	_selectFrequencyValue
  5683  0196                     l4204:
  5684                           
  5685                           ;main.c: 463:        if (interfaceState == STATE_CURRENT){
  5686  0196  0378               	decf	_interfaceState,w
  5687  0197  1D03               	btfss	3,2
  5688  0198  299A               	goto	u2841
  5689  0199  299B               	goto	u2840
  5690  019A                     u2841:
  5691  019A  2BA3               	goto	l4344
  5692  019B                     u2840:
  5693  019B                     l4206:
  5694                           
  5695                           ;main.c: 464:            setCurrent(currentValue[0], battery_voltage());
  5696  019B  0021               	movlb	1	; select bank1
  5697  019C  083F               	movf	(_currentValue+1)^(0+128),w
  5698  019D  0020               	movlb	0	; select bank0
  5699  019E  00BA               	movwf	setCurrent@microamps+1
  5700  019F  0021               	movlb	1	; select bank1
  5701  01A0  083E               	movf	_currentValue^(0+128),w
  5702  01A1  0020               	movlb	0	; select bank0
  5703  01A2  00B9               	movwf	setCurrent@microamps
  5704  01A3  318E  261C  3180   	fcall	_battery_voltage
  5705  01A6  0020               	movlb	0	; select bank0
  5706  01A7  0838               	movf	?_battery_voltage+1,w
  5707  01A8  00BC               	movwf	setCurrent@Vdd_mv+1
  5708  01A9  0837               	movf	?_battery_voltage,w
  5709  01AA  00BB               	movwf	setCurrent@Vdd_mv
  5710  01AB  3183  23BD  3180   	fcall	_setCurrent
  5711  01AE                     l4208:
  5712                           
  5713                           ;main.c: 465:            currentIndex = 0;
  5714  01AE  0021               	movlb	1	; select bank1
  5715  01AF  01E3               	clrf	_currentIndex^(0+128)
  5716  01B0  01E4               	clrf	(_currentIndex+1)^(0+128)
  5717  01B1                     l4210:
  5718                           
  5719                           ;main.c: 466:            selectCurrentValue();
  5720  01B1  318D  2539  3180   	fcall	_selectCurrentValue
  5721  01B4  2BA3               	goto	l4344
  5722  01B5                     l4212:
  5723                           
  5724                           ;main.c: 473:      if (interfaceState == STATE_FREQUENCY) {
  5725  01B5  3002               	movlw	2
  5726  01B6  0678               	xorwf	_interfaceState,w
  5727  01B7  1D03               	btfss	3,2
  5728  01B8  29BA               	goto	u2851
  5729  01B9  29BB               	goto	u2850
  5730  01BA                     u2851:
  5731  01BA  29CE               	goto	l4220
  5732  01BB                     u2850:
  5733  01BB                     l4214:
  5734                           
  5735                           ;main.c: 474:          setFrequency(frequencyValue[1]);
  5736  01BB  0022               	movlb	2	; select bank2
  5737  01BC  0843               	movf	((_frequencyValue+1)^(0+256)+2),w
  5738  01BD  0020               	movlb	0	; select bank0
  5739  01BE  00B8               	movwf	setFrequency@frequency_hz+1
  5740  01BF  0022               	movlb	2	; select bank2
  5741  01C0  0842               	movf	(_frequencyValue^(0+256)+2),w
  5742  01C1  0020               	movlb	0	; select bank0
  5743  01C2  00B7               	movwf	setFrequency@frequency_hz
  5744  01C3  3186  26DE  3180   	fcall	_setFrequency
  5745  01C6                     l4216:
  5746                           
  5747                           ;main.c: 475:          frequencyIndex = 1;
  5748  01C6  3001               	movlw	1
  5749  01C7  0021               	movlb	1	; select bank1
  5750  01C8  00E1               	movwf	_frequencyIndex^(0+128)
  5751  01C9  3000               	movlw	0
  5752  01CA  00E2               	movwf	(_frequencyIndex^(0+128)+1)
  5753  01CB                     l4218:
  5754                           
  5755                           ;main.c: 476:          selectFrequencyValue();
  5756  01CB  318C  24EB  3180   	fcall	_selectFrequencyValue
  5757  01CE                     l4220:
  5758                           
  5759                           ;main.c: 478:      if (interfaceState == STATE_CURRENT) {
  5760  01CE  0378               	decf	_interfaceState,w
  5761  01CF  1D03               	btfss	3,2
  5762  01D0  29D2               	goto	u2861
  5763  01D1  29D3               	goto	u2860
  5764  01D2                     u2861:
  5765  01D2  2BA3               	goto	l4344
  5766  01D3                     u2860:
  5767  01D3                     l4222:
  5768                           
  5769                           ;main.c: 479:          setCurrent(currentValue[1], battery_voltage());
  5770  01D3  0021               	movlb	1	; select bank1
  5771  01D4  0841               	movf	((_currentValue+1)^(0+128)+2),w
  5772  01D5  0020               	movlb	0	; select bank0
  5773  01D6  00BA               	movwf	setCurrent@microamps+1
  5774  01D7  0021               	movlb	1	; select bank1
  5775  01D8  0840               	movf	(_currentValue^(0+128)+2),w
  5776  01D9  0020               	movlb	0	; select bank0
  5777  01DA  00B9               	movwf	setCurrent@microamps
  5778  01DB  318E  261C  3180   	fcall	_battery_voltage
  5779  01DE  0020               	movlb	0	; select bank0
  5780  01DF  0838               	movf	?_battery_voltage+1,w
  5781  01E0  00BC               	movwf	setCurrent@Vdd_mv+1
  5782  01E1  0837               	movf	?_battery_voltage,w
  5783  01E2  00BB               	movwf	setCurrent@Vdd_mv
  5784  01E3  3183  23BD  3180   	fcall	_setCurrent
  5785  01E6                     l4224:
  5786                           
  5787                           ;main.c: 480:          currentIndex = 1;
  5788  01E6  3001               	movlw	1
  5789  01E7  0021               	movlb	1	; select bank1
  5790  01E8  00E3               	movwf	_currentIndex^(0+128)
  5791  01E9  3000               	movlw	0
  5792  01EA  00E4               	movwf	(_currentIndex^(0+128)+1)
  5793  01EB  29B1               	goto	l4210
  5794  01EC                     l4228:
  5795                           
  5796                           ;main.c: 489:      if (interfaceState == STATE_FREQUENCY) {
  5797  01EC  3002               	movlw	2
  5798  01ED  0678               	xorwf	_interfaceState,w
  5799  01EE  1D03               	btfss	3,2
  5800  01EF  29F1               	goto	u2871
  5801  01F0  29F2               	goto	u2870
  5802  01F1                     u2871:
  5803  01F1  2A05               	goto	l4236
  5804  01F2                     u2870:
  5805  01F2                     l4230:
  5806                           
  5807                           ;main.c: 490:          setFrequency(frequencyValue[2]);
  5808  01F2  0022               	movlb	2	; select bank2
  5809  01F3  0845               	movf	((_frequencyValue+1)^(0+256)+4),w
  5810  01F4  0020               	movlb	0	; select bank0
  5811  01F5  00B8               	movwf	setFrequency@frequency_hz+1
  5812  01F6  0022               	movlb	2	; select bank2
  5813  01F7  0844               	movf	(_frequencyValue^(0+256)+4),w
  5814  01F8  0020               	movlb	0	; select bank0
  5815  01F9  00B7               	movwf	setFrequency@frequency_hz
  5816  01FA  3186  26DE  3180   	fcall	_setFrequency
  5817  01FD                     l4232:
  5818                           
  5819                           ;main.c: 491:          frequencyIndex = 2;
  5820  01FD  3002               	movlw	2
  5821  01FE  0021               	movlb	1	; select bank1
  5822  01FF  00E1               	movwf	_frequencyIndex^(0+128)
  5823  0200  3000               	movlw	0
  5824  0201  00E2               	movwf	(_frequencyIndex^(0+128)+1)
  5825  0202                     l4234:
  5826                           
  5827                           ;main.c: 492:          selectFrequencyValue();
  5828  0202  318C  24EB  3180   	fcall	_selectFrequencyValue
  5829  0205                     l4236:
  5830                           
  5831                           ;main.c: 494:      if (interfaceState == STATE_CURRENT) {
  5832  0205  0378               	decf	_interfaceState,w
  5833  0206  1D03               	btfss	3,2
  5834  0207  2A09               	goto	u2881
  5835  0208  2A0A               	goto	u2880
  5836  0209                     u2881:
  5837  0209  2BA3               	goto	l4344
  5838  020A                     u2880:
  5839  020A                     l4238:
  5840                           
  5841                           ;main.c: 495:          setCurrent(currentValue[2], battery_voltage());
  5842  020A  0021               	movlb	1	; select bank1
  5843  020B  0843               	movf	((_currentValue+1)^(0+128)+4),w
  5844  020C  0020               	movlb	0	; select bank0
  5845  020D  00BA               	movwf	setCurrent@microamps+1
  5846  020E  0021               	movlb	1	; select bank1
  5847  020F  0842               	movf	(_currentValue^(0+128)+4),w
  5848  0210  0020               	movlb	0	; select bank0
  5849  0211  00B9               	movwf	setCurrent@microamps
  5850  0212  318E  261C  3180   	fcall	_battery_voltage
  5851  0215  0020               	movlb	0	; select bank0
  5852  0216  0838               	movf	?_battery_voltage+1,w
  5853  0217  00BC               	movwf	setCurrent@Vdd_mv+1
  5854  0218  0837               	movf	?_battery_voltage,w
  5855  0219  00BB               	movwf	setCurrent@Vdd_mv
  5856  021A  3183  23BD  3180   	fcall	_setCurrent
  5857  021D                     l4240:
  5858                           
  5859                           ;main.c: 496:          currentIndex = 2;
  5860  021D  3002               	movlw	2
  5861  021E  0021               	movlb	1	; select bank1
  5862  021F  00E3               	movwf	_currentIndex^(0+128)
  5863  0220  3000               	movlw	0
  5864  0221  00E4               	movwf	(_currentIndex^(0+128)+1)
  5865  0222  29B1               	goto	l4210
  5866  0223                     l4244:
  5867                           
  5868                           ;main.c: 501:        if (interfaceState == STATE_FREQUENCY) {
  5869  0223  3002               	movlw	2
  5870  0224  0678               	xorwf	_interfaceState,w
  5871  0225  1D03               	btfss	3,2
  5872  0226  2A28               	goto	u2891
  5873  0227  2A29               	goto	u2890
  5874  0228                     u2891:
  5875  0228  2A3C               	goto	l4252
  5876  0229                     u2890:
  5877  0229                     l4246:
  5878                           
  5879                           ;main.c: 502:            setFrequency(frequencyValue[3]);
  5880  0229  0022               	movlb	2	; select bank2
  5881  022A  0847               	movf	((_frequencyValue+1)^(0+256)+6),w
  5882  022B  0020               	movlb	0	; select bank0
  5883  022C  00B8               	movwf	setFrequency@frequency_hz+1
  5884  022D  0022               	movlb	2	; select bank2
  5885  022E  0846               	movf	(_frequencyValue^(0+256)+6),w
  5886  022F  0020               	movlb	0	; select bank0
  5887  0230  00B7               	movwf	setFrequency@frequency_hz
  5888  0231  3186  26DE  3180   	fcall	_setFrequency
  5889  0234                     l4248:
  5890                           
  5891                           ;main.c: 503:            frequencyIndex = 3;
  5892  0234  3003               	movlw	3
  5893  0235  0021               	movlb	1	; select bank1
  5894  0236  00E1               	movwf	_frequencyIndex^(0+128)
  5895  0237  3000               	movlw	0
  5896  0238  00E2               	movwf	(_frequencyIndex^(0+128)+1)
  5897  0239                     l4250:
  5898                           
  5899                           ;main.c: 504:            selectFrequencyValue();
  5900  0239  318C  24EB  3180   	fcall	_selectFrequencyValue
  5901  023C                     l4252:
  5902                           
  5903                           ;main.c: 506:        if (interfaceState == STATE_CURRENT) {
  5904  023C  0378               	decf	_interfaceState,w
  5905  023D  1D03               	btfss	3,2
  5906  023E  2A40               	goto	u2901
  5907  023F  2A41               	goto	u2900
  5908  0240                     u2901:
  5909  0240  2BA3               	goto	l4344
  5910  0241                     u2900:
  5911  0241                     l4254:
  5912                           
  5913                           ;main.c: 507:            setCurrent(currentValue[3], battery_voltage());
  5914  0241  0021               	movlb	1	; select bank1
  5915  0242  0845               	movf	((_currentValue+1)^(0+128)+6),w
  5916  0243  0020               	movlb	0	; select bank0
  5917  0244  00BA               	movwf	setCurrent@microamps+1
  5918  0245  0021               	movlb	1	; select bank1
  5919  0246  0844               	movf	(_currentValue^(0+128)+6),w
  5920  0247  0020               	movlb	0	; select bank0
  5921  0248  00B9               	movwf	setCurrent@microamps
  5922  0249  318E  261C  3180   	fcall	_battery_voltage
  5923  024C  0020               	movlb	0	; select bank0
  5924  024D  0838               	movf	?_battery_voltage+1,w
  5925  024E  00BC               	movwf	setCurrent@Vdd_mv+1
  5926  024F  0837               	movf	?_battery_voltage,w
  5927  0250  00BB               	movwf	setCurrent@Vdd_mv
  5928  0251  3183  23BD  3180   	fcall	_setCurrent
  5929  0254                     l4256:
  5930                           
  5931                           ;main.c: 508:            currentIndex = 3;
  5932  0254  3003               	movlw	3
  5933  0255  0021               	movlb	1	; select bank1
  5934  0256  00E3               	movwf	_currentIndex^(0+128)
  5935  0257  3000               	movlw	0
  5936  0258  00E4               	movwf	(_currentIndex^(0+128)+1)
  5937  0259  29B1               	goto	l4210
  5938  025A                     l4260:
  5939                           
  5940                           ;main.c: 513:        if (interfaceState == STATE_FREQUENCY) {
  5941  025A  3002               	movlw	2
  5942  025B  0678               	xorwf	_interfaceState,w
  5943  025C  1D03               	btfss	3,2
  5944  025D  2A5F               	goto	u2911
  5945  025E  2A60               	goto	u2910
  5946  025F                     u2911:
  5947  025F  2A73               	goto	l4268
  5948  0260                     u2910:
  5949  0260                     l4262:
  5950                           
  5951                           ;main.c: 514:            setFrequency(frequencyValue[4]);
  5952  0260  0022               	movlb	2	; select bank2
  5953  0261  0849               	movf	((_frequencyValue+1)^(0+256)+8),w
  5954  0262  0020               	movlb	0	; select bank0
  5955  0263  00B8               	movwf	setFrequency@frequency_hz+1
  5956  0264  0022               	movlb	2	; select bank2
  5957  0265  0848               	movf	(_frequencyValue^(0+256)+8),w
  5958  0266  0020               	movlb	0	; select bank0
  5959  0267  00B7               	movwf	setFrequency@frequency_hz
  5960  0268  3186  26DE  3180   	fcall	_setFrequency
  5961  026B                     l4264:
  5962                           
  5963                           ;main.c: 515:            frequencyIndex = 4;
  5964  026B  3004               	movlw	4
  5965  026C  0021               	movlb	1	; select bank1
  5966  026D  00E1               	movwf	_frequencyIndex^(0+128)
  5967  026E  3000               	movlw	0
  5968  026F  00E2               	movwf	(_frequencyIndex^(0+128)+1)
  5969  0270                     l4266:
  5970                           
  5971                           ;main.c: 516:            selectFrequencyValue();
  5972  0270  318C  24EB  3180   	fcall	_selectFrequencyValue
  5973  0273                     l4268:
  5974                           
  5975                           ;main.c: 518:        if (interfaceState == STATE_CURRENT) {
  5976  0273  0378               	decf	_interfaceState,w
  5977  0274  1D03               	btfss	3,2
  5978  0275  2A77               	goto	u2921
  5979  0276  2A78               	goto	u2920
  5980  0277                     u2921:
  5981  0277  2BA3               	goto	l4344
  5982  0278                     u2920:
  5983  0278                     l4270:
  5984                           
  5985                           ;main.c: 519:            setCurrent(currentValue[4], battery_voltage());
  5986  0278  0021               	movlb	1	; select bank1
  5987  0279  0847               	movf	((_currentValue+1)^(0+128)+8),w
  5988  027A  0020               	movlb	0	; select bank0
  5989  027B  00BA               	movwf	setCurrent@microamps+1
  5990  027C  0021               	movlb	1	; select bank1
  5991  027D  0846               	movf	(_currentValue^(0+128)+8),w
  5992  027E  0020               	movlb	0	; select bank0
  5993  027F  00B9               	movwf	setCurrent@microamps
  5994  0280  318E  261C  3180   	fcall	_battery_voltage
  5995  0283  0020               	movlb	0	; select bank0
  5996  0284  0838               	movf	?_battery_voltage+1,w
  5997  0285  00BC               	movwf	setCurrent@Vdd_mv+1
  5998  0286  0837               	movf	?_battery_voltage,w
  5999  0287  00BB               	movwf	setCurrent@Vdd_mv
  6000  0288  3183  23BD  3180   	fcall	_setCurrent
  6001  028B                     l4272:
  6002                           
  6003                           ;main.c: 520:            currentIndex = 4;
  6004  028B  3004               	movlw	4
  6005  028C  0021               	movlb	1	; select bank1
  6006  028D  00E3               	movwf	_currentIndex^(0+128)
  6007  028E  3000               	movlw	0
  6008  028F  00E4               	movwf	(_currentIndex^(0+128)+1)
  6009  0290  29B1               	goto	l4210
  6010  0291                     l4276:
  6011                           
  6012                           ;main.c: 525:        if (interfaceState == STATE_FREQUENCY) {
  6013  0291  3002               	movlw	2
  6014  0292  0678               	xorwf	_interfaceState,w
  6015  0293  1D03               	btfss	3,2
  6016  0294  2A96               	goto	u2931
  6017  0295  2A97               	goto	u2930
  6018  0296                     u2931:
  6019  0296  2AAA               	goto	l4284
  6020  0297                     u2930:
  6021  0297                     l4278:
  6022                           
  6023                           ;main.c: 526:            setFrequency(frequencyValue[5]);
  6024  0297  0022               	movlb	2	; select bank2
  6025  0298  084B               	movf	((_frequencyValue+1)^(0+256)+10),w
  6026  0299  0020               	movlb	0	; select bank0
  6027  029A  00B8               	movwf	setFrequency@frequency_hz+1
  6028  029B  0022               	movlb	2	; select bank2
  6029  029C  084A               	movf	(_frequencyValue^(0+256)+10),w
  6030  029D  0020               	movlb	0	; select bank0
  6031  029E  00B7               	movwf	setFrequency@frequency_hz
  6032  029F  3186  26DE  3180   	fcall	_setFrequency
  6033  02A2                     l4280:
  6034                           
  6035                           ;main.c: 527:            frequencyIndex = 5;
  6036  02A2  3005               	movlw	5
  6037  02A3  0021               	movlb	1	; select bank1
  6038  02A4  00E1               	movwf	_frequencyIndex^(0+128)
  6039  02A5  3000               	movlw	0
  6040  02A6  00E2               	movwf	(_frequencyIndex^(0+128)+1)
  6041  02A7                     l4282:
  6042                           
  6043                           ;main.c: 528:            selectFrequencyValue();
  6044  02A7  318C  24EB  3180   	fcall	_selectFrequencyValue
  6045  02AA                     l4284:
  6046                           
  6047                           ;main.c: 530:        if (interfaceState == STATE_CURRENT) {
  6048  02AA  0378               	decf	_interfaceState,w
  6049  02AB  1D03               	btfss	3,2
  6050  02AC  2AAE               	goto	u2941
  6051  02AD  2AAF               	goto	u2940
  6052  02AE                     u2941:
  6053  02AE  2BA3               	goto	l4344
  6054  02AF                     u2940:
  6055  02AF                     l4286:
  6056                           
  6057                           ;main.c: 531:            setCurrent(currentValue[5], battery_voltage());
  6058  02AF  0021               	movlb	1	; select bank1
  6059  02B0  0849               	movf	((_currentValue+1)^(0+128)+10),w
  6060  02B1  0020               	movlb	0	; select bank0
  6061  02B2  00BA               	movwf	setCurrent@microamps+1
  6062  02B3  0021               	movlb	1	; select bank1
  6063  02B4  0848               	movf	(_currentValue^(0+128)+10),w
  6064  02B5  0020               	movlb	0	; select bank0
  6065  02B6  00B9               	movwf	setCurrent@microamps
  6066  02B7  318E  261C  3180   	fcall	_battery_voltage
  6067  02BA  0020               	movlb	0	; select bank0
  6068  02BB  0838               	movf	?_battery_voltage+1,w
  6069  02BC  00BC               	movwf	setCurrent@Vdd_mv+1
  6070  02BD  0837               	movf	?_battery_voltage,w
  6071  02BE  00BB               	movwf	setCurrent@Vdd_mv
  6072  02BF  3183  23BD  3180   	fcall	_setCurrent
  6073  02C2                     l4288:
  6074                           
  6075                           ;main.c: 532:            currentIndex = 5;
  6076  02C2  3005               	movlw	5
  6077  02C3  0021               	movlb	1	; select bank1
  6078  02C4  00E3               	movwf	_currentIndex^(0+128)
  6079  02C5  3000               	movlw	0
  6080  02C6  00E4               	movwf	(_currentIndex^(0+128)+1)
  6081  02C7  29B1               	goto	l4210
  6082  02C8                     l4292:
  6083                           
  6084                           ;main.c: 537:        if (interfaceState == STATE_FREQUENCY) {
  6085  02C8  3002               	movlw	2
  6086  02C9  0678               	xorwf	_interfaceState,w
  6087  02CA  1D03               	btfss	3,2
  6088  02CB  2ACD               	goto	u2951
  6089  02CC  2ACE               	goto	u2950
  6090  02CD                     u2951:
  6091  02CD  2AE1               	goto	l4300
  6092  02CE                     u2950:
  6093  02CE                     l4294:
  6094                           
  6095                           ;main.c: 538:            setFrequency(frequencyValue[6]);
  6096  02CE  0022               	movlb	2	; select bank2
  6097  02CF  084D               	movf	((_frequencyValue+1)^(0+256)+12),w
  6098  02D0  0020               	movlb	0	; select bank0
  6099  02D1  00B8               	movwf	setFrequency@frequency_hz+1
  6100  02D2  0022               	movlb	2	; select bank2
  6101  02D3  084C               	movf	(_frequencyValue^(0+256)+12),w
  6102  02D4  0020               	movlb	0	; select bank0
  6103  02D5  00B7               	movwf	setFrequency@frequency_hz
  6104  02D6  3186  26DE  3180   	fcall	_setFrequency
  6105  02D9                     l4296:
  6106                           
  6107                           ;main.c: 539:            frequencyIndex = 6;
  6108  02D9  3006               	movlw	6
  6109  02DA  0021               	movlb	1	; select bank1
  6110  02DB  00E1               	movwf	_frequencyIndex^(0+128)
  6111  02DC  3000               	movlw	0
  6112  02DD  00E2               	movwf	(_frequencyIndex^(0+128)+1)
  6113  02DE                     l4298:
  6114                           
  6115                           ;main.c: 540:            selectFrequencyValue();
  6116  02DE  318C  24EB  3180   	fcall	_selectFrequencyValue
  6117  02E1                     l4300:
  6118                           
  6119                           ;main.c: 542:        if (interfaceState == STATE_CURRENT) {
  6120  02E1  0378               	decf	_interfaceState,w
  6121  02E2  1D03               	btfss	3,2
  6122  02E3  2AE5               	goto	u2961
  6123  02E4  2AE6               	goto	u2960
  6124  02E5                     u2961:
  6125  02E5  2BA3               	goto	l4344
  6126  02E6                     u2960:
  6127  02E6                     l4302:
  6128                           
  6129                           ;main.c: 543:            setCurrent(currentValue[6], battery_voltage());
  6130  02E6  0021               	movlb	1	; select bank1
  6131  02E7  084B               	movf	((_currentValue+1)^(0+128)+12),w
  6132  02E8  0020               	movlb	0	; select bank0
  6133  02E9  00BA               	movwf	setCurrent@microamps+1
  6134  02EA  0021               	movlb	1	; select bank1
  6135  02EB  084A               	movf	(_currentValue^(0+128)+12),w
  6136  02EC  0020               	movlb	0	; select bank0
  6137  02ED  00B9               	movwf	setCurrent@microamps
  6138  02EE  318E  261C  3180   	fcall	_battery_voltage
  6139  02F1  0020               	movlb	0	; select bank0
  6140  02F2  0838               	movf	?_battery_voltage+1,w
  6141  02F3  00BC               	movwf	setCurrent@Vdd_mv+1
  6142  02F4  0837               	movf	?_battery_voltage,w
  6143  02F5  00BB               	movwf	setCurrent@Vdd_mv
  6144  02F6  3183  23BD  3180   	fcall	_setCurrent
  6145  02F9                     l4304:
  6146                           
  6147                           ;main.c: 544:            currentIndex = 6;
  6148  02F9  3006               	movlw	6
  6149  02FA  0021               	movlb	1	; select bank1
  6150  02FB  00E3               	movwf	_currentIndex^(0+128)
  6151  02FC  3000               	movlw	0
  6152  02FD  00E4               	movwf	(_currentIndex^(0+128)+1)
  6153  02FE  29B1               	goto	l4210
  6154  02FF                     l4308:
  6155                           
  6156                           ;main.c: 549:        if (interfaceState == STATE_FREQUENCY) {
  6157  02FF  3002               	movlw	2
  6158  0300  0678               	xorwf	_interfaceState,w
  6159  0301  1D03               	btfss	3,2
  6160  0302  2B04               	goto	u2971
  6161  0303  2B05               	goto	u2970
  6162  0304                     u2971:
  6163  0304  2B18               	goto	l4316
  6164  0305                     u2970:
  6165  0305                     l4310:
  6166                           
  6167                           ;main.c: 550:            setFrequency(frequencyValue[7]);
  6168  0305  0022               	movlb	2	; select bank2
  6169  0306  084F               	movf	((_frequencyValue+1)^(0+256)+14),w
  6170  0307  0020               	movlb	0	; select bank0
  6171  0308  00B8               	movwf	setFrequency@frequency_hz+1
  6172  0309  0022               	movlb	2	; select bank2
  6173  030A  084E               	movf	(_frequencyValue^(0+256)+14),w
  6174  030B  0020               	movlb	0	; select bank0
  6175  030C  00B7               	movwf	setFrequency@frequency_hz
  6176  030D  3186  26DE  3180   	fcall	_setFrequency
  6177  0310                     l4312:
  6178                           
  6179                           ;main.c: 551:            frequencyIndex = 7;
  6180  0310  3007               	movlw	7
  6181  0311  0021               	movlb	1	; select bank1
  6182  0312  00E1               	movwf	_frequencyIndex^(0+128)
  6183  0313  3000               	movlw	0
  6184  0314  00E2               	movwf	(_frequencyIndex^(0+128)+1)
  6185  0315                     l4314:
  6186                           
  6187                           ;main.c: 552:            selectFrequencyValue();
  6188  0315  318C  24EB  3180   	fcall	_selectFrequencyValue
  6189  0318                     l4316:
  6190                           
  6191                           ;main.c: 554:        if (interfaceState == STATE_CURRENT) {
  6192  0318  0378               	decf	_interfaceState,w
  6193  0319  1D03               	btfss	3,2
  6194  031A  2B1C               	goto	u2981
  6195  031B  2B1D               	goto	u2980
  6196  031C                     u2981:
  6197  031C  2BA3               	goto	l4344
  6198  031D                     u2980:
  6199  031D                     l4318:
  6200                           
  6201                           ;main.c: 555:            setCurrent(currentValue[7], battery_voltage());
  6202  031D  0021               	movlb	1	; select bank1
  6203  031E  084D               	movf	((_currentValue+1)^(0+128)+14),w
  6204  031F  0020               	movlb	0	; select bank0
  6205  0320  00BA               	movwf	setCurrent@microamps+1
  6206  0321  0021               	movlb	1	; select bank1
  6207  0322  084C               	movf	(_currentValue^(0+128)+14),w
  6208  0323  0020               	movlb	0	; select bank0
  6209  0324  00B9               	movwf	setCurrent@microamps
  6210  0325  318E  261C  3180   	fcall	_battery_voltage
  6211  0328  0020               	movlb	0	; select bank0
  6212  0329  0838               	movf	?_battery_voltage+1,w
  6213  032A  00BC               	movwf	setCurrent@Vdd_mv+1
  6214  032B  0837               	movf	?_battery_voltage,w
  6215  032C  00BB               	movwf	setCurrent@Vdd_mv
  6216  032D  3183  23BD  3180   	fcall	_setCurrent
  6217  0330                     l4320:
  6218                           
  6219                           ;main.c: 556:            currentIndex = 7;
  6220  0330  3007               	movlw	7
  6221  0331  0021               	movlb	1	; select bank1
  6222  0332  00E3               	movwf	_currentIndex^(0+128)
  6223  0333  3000               	movlw	0
  6224  0334  00E4               	movwf	(_currentIndex^(0+128)+1)
  6225  0335  29B1               	goto	l4210
  6226  0336                     l4324:
  6227                           
  6228                           ;main.c: 561:        if (interfaceState == STATE_FREQUENCY) {
  6229  0336  3002               	movlw	2
  6230  0337  0678               	xorwf	_interfaceState,w
  6231  0338  1D03               	btfss	3,2
  6232  0339  2B3B               	goto	u2991
  6233  033A  2B3C               	goto	u2990
  6234  033B                     u2991:
  6235  033B  2B4F               	goto	l4332
  6236  033C                     u2990:
  6237  033C                     l4326:
  6238                           
  6239                           ;main.c: 562:            setFrequency(frequencyValue[8]);
  6240  033C  0022               	movlb	2	; select bank2
  6241  033D  0851               	movf	((_frequencyValue+1)^(0+256)+16),w
  6242  033E  0020               	movlb	0	; select bank0
  6243  033F  00B8               	movwf	setFrequency@frequency_hz+1
  6244  0340  0022               	movlb	2	; select bank2
  6245  0341  0850               	movf	(_frequencyValue^(0+256)+16),w
  6246  0342  0020               	movlb	0	; select bank0
  6247  0343  00B7               	movwf	setFrequency@frequency_hz
  6248  0344  3186  26DE  3180   	fcall	_setFrequency
  6249  0347                     l4328:
  6250                           
  6251                           ;main.c: 563:            frequencyIndex = 8;
  6252  0347  3008               	movlw	8
  6253  0348  0021               	movlb	1	; select bank1
  6254  0349  00E1               	movwf	_frequencyIndex^(0+128)
  6255  034A  3000               	movlw	0
  6256  034B  00E2               	movwf	(_frequencyIndex^(0+128)+1)
  6257  034C                     l4330:
  6258                           
  6259                           ;main.c: 564:            selectFrequencyValue();
  6260  034C  318C  24EB  3180   	fcall	_selectFrequencyValue
  6261  034F                     l4332:
  6262                           
  6263                           ;main.c: 566:        if (interfaceState == STATE_CURRENT) {
  6264  034F  0378               	decf	_interfaceState,w
  6265  0350  1D03               	btfss	3,2
  6266  0351  2B53               	goto	u3001
  6267  0352  2B54               	goto	u3000
  6268  0353                     u3001:
  6269  0353  2BA3               	goto	l4344
  6270  0354                     u3000:
  6271  0354                     l4334:
  6272                           
  6273                           ;main.c: 567:            setCurrent(currentValue[8], battery_voltage());
  6274  0354  0021               	movlb	1	; select bank1
  6275  0355  084F               	movf	((_currentValue+1)^(0+128)+16),w
  6276  0356  0020               	movlb	0	; select bank0
  6277  0357  00BA               	movwf	setCurrent@microamps+1
  6278  0358  0021               	movlb	1	; select bank1
  6279  0359  084E               	movf	(_currentValue^(0+128)+16),w
  6280  035A  0020               	movlb	0	; select bank0
  6281  035B  00B9               	movwf	setCurrent@microamps
  6282  035C  318E  261C  3180   	fcall	_battery_voltage
  6283  035F  0020               	movlb	0	; select bank0
  6284  0360  0838               	movf	?_battery_voltage+1,w
  6285  0361  00BC               	movwf	setCurrent@Vdd_mv+1
  6286  0362  0837               	movf	?_battery_voltage,w
  6287  0363  00BB               	movwf	setCurrent@Vdd_mv
  6288  0364  3183  23BD  3180   	fcall	_setCurrent
  6289  0367                     l4336:
  6290                           
  6291                           ;main.c: 568:            currentIndex = 8;
  6292  0367  3008               	movlw	8
  6293  0368  0021               	movlb	1	; select bank1
  6294  0369  00E3               	movwf	_currentIndex^(0+128)
  6295  036A  3000               	movlw	0
  6296  036B  00E4               	movwf	(_currentIndex^(0+128)+1)
  6297  036C  29B1               	goto	l4210
  6298  036D                     l4342:
  6299  036D  0021               	movlb	1	; select bank1
  6300  036E  0867               	movf	process_remote_command@code^(0+128),w
  6301  036F  3E03               	addlw	3
  6302  0370  0086               	movwf	6
  6303  0371  0187               	clrf	7
  6304  0372  0801               	movf	1,w
  6305  0373  00E5               	movwf	??_process_remote_command^(0+128)
  6306  0374  01E6               	clrf	(??_process_remote_command^(0+128)+1)
  6307                           
  6308                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6309                           ; Switch size 1, requested type "simple"
  6310                           ; Number of cases is 1, Range of values is 0 to 0
  6311                           ; switch strategies available:
  6312                           ; Name         Instructions Cycles
  6313                           ; simple_byte            4     3 (average)
  6314                           ; direct_byte            8     6 (fixed)
  6315                           ; jumptable            260     6 (fixed)
  6316                           ;	Chosen strategy is simple_byte
  6317  0375  0866               	movf	(??_process_remote_command+1)^(0+128),w
  6318  0376  3A00               	xorlw	0	; case 0
  6319  0377  1903               	skipnz
  6320  0378  2B7A               	goto	l4486
  6321  0379  2BA3               	goto	l4344
  6322  037A                     l4486:
  6323                           
  6324                           ; Switch size 1, requested type "simple"
  6325                           ; Number of cases is 13, Range of values is 8 to 176
  6326                           ; switch strategies available:
  6327                           ; Name         Instructions Cycles
  6328                           ; simple_byte           40    21 (average)
  6329                           ; jumptable            263     9 (fixed)
  6330                           ;	Chosen strategy is simple_byte
  6331  037A  0865               	movf	??_process_remote_command^(0+128),w
  6332  037B  3A08               	xorlw	8	; case 8
  6333  037C  1903               	skipnz
  6334  037D  297F               	goto	l4196
  6335  037E  3A18               	xorlw	24	; case 16
  6336  037F  1903               	skipnz
  6337  0380  297B               	goto	l4194
  6338  0381  3A08               	xorlw	8	; case 24
  6339  0382  1903               	skipnz
  6340  0383  2AC8               	goto	l4292
  6341  0384  3A30               	xorlw	48	; case 40
  6342  0385  1903               	skipnz
  6343  0386  2A23               	goto	l4244
  6344  0387  3A60               	xorlw	96	; case 72
  6345  0388  1903               	skipnz
  6346  0389  29EC               	goto	l4228
  6347  038A  3A18               	xorlw	24	; case 80
  6348  038B  1903               	skipnz
  6349  038C  2977               	goto	l4192
  6350  038D  3A08               	xorlw	8	; case 88
  6351  038E  1903               	skipnz
  6352  038F  2B36               	goto	l4324
  6353  0390  3A30               	xorlw	48	; case 104
  6354  0391  1903               	skipnz
  6355  0392  2A91               	goto	l4276
  6356  0393  3AE0               	xorlw	224	; case 136
  6357  0394  1903               	skipnz
  6358  0395  29B5               	goto	l4212
  6359  0396  3A10               	xorlw	16	; case 152
  6360  0397  1903               	skipnz
  6361  0398  2AFF               	goto	l4308
  6362  0399  3A38               	xorlw	56	; case 160
  6363  039A  1903               	skipnz
  6364  039B  2890               	goto	l4116
  6365  039C  3A08               	xorlw	8	; case 168
  6366  039D  1903               	skipnz
  6367  039E  2A5A               	goto	l4260
  6368  039F  3A18               	xorlw	24	; case 176
  6369  03A0  1903               	skipnz
  6370  03A1  2911               	goto	l4152
  6371  03A2  2BA3               	goto	l4344
  6372  03A3                     l4344:
  6373                           
  6374                           ;main.c: 576:   setLEDColor(LED_red, LED_green, LED_blue);
  6375  03A3  01F3               	clrf	setLEDColor@green
  6376  03A4  01F4               	clrf	setLEDColor@blue
  6377  03A5  3000               	movlw	0
  6378  03A6  318B  23C1  3180   	fcall	_setLEDColor
  6379  03A9                     l4346:
  6380                           
  6381                           ;main.c: 577:   _delay((unsigned long)((1000)*(4000000/4000.0)));
  6382  03A9  3006               	movlw	6
  6383  03AA  0021               	movlb	1	; select bank1
  6384  03AB  00E6               	movwf	(??_process_remote_command^(0+128)+1)
  6385  03AC  3013               	movlw	19
  6386  03AD  00E5               	movwf	??_process_remote_command^(0+128)
  6387  03AE  30AD               	movlw	173
  6388  03AF                     u3077:
  6389  03AF  0B89               	decfsz	9,f
  6390  03B0  2BAF               	goto	u3077
  6391  03B1  0BE5               	decfsz	??_process_remote_command^(0+128),f
  6392  03B2  2BAF               	goto	u3077
  6393  03B3  0BE6               	decfsz	(??_process_remote_command^(0+128)+1),f
  6394  03B4  2BAF               	goto	u3077
  6395  03B5  3200               	nop2
  6396  03B6                     l4348:
  6397                           
  6398                           ;main.c: 578:   setLEDColor(0, 0, 0);
  6399  03B6  01F3               	clrf	setLEDColor@green
  6400  03B7  01F4               	clrf	setLEDColor@blue
  6401  03B8  3000               	movlw	0
  6402  03B9  318B  23C1  3180   	fcall	_setLEDColor
  6403  03BC                     l755:
  6404  03BC  0008               	return
  6405  03BD                     __end_of_process_remote_command:
  6406                           
  6407                           	psect	text4
  6408  07A4                     __ptext4:	
  6409 ;; *************** function _writePersistentState *****************
  6410 ;; Defined at:
  6411 ;;		line 127 in file "main.c"
  6412 ;; Parameters:    Size  Location     Type
  6413 ;;		None
  6414 ;; Auto vars:     Size  Location     Type
  6415 ;;  i               1   78[BANK0 ] unsigned char 
  6416 ;;  buf            64   14[BANK0 ] unsigned short [32]
  6417 ;;  idx             1   79[BANK0 ] unsigned char 
  6418 ;; Return value:  Size  Location     Type
  6419 ;;                  1    wreg      void 
  6420 ;; Registers used:
  6421 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6422 ;; Tracked objects:
  6423 ;;		On entry : 0/0
  6424 ;;		On exit  : 0/0
  6425 ;;		Unchanged: 0/0
  6426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6427 ;;      Params:         0       0       0       0       0       0       0       0
  6428 ;;      Locals:         0      66       0       0       0       0       0       0
  6429 ;;      Temps:          0       4       0       0       0       0       0       0
  6430 ;;      Totals:         0      70       0       0       0       0       0       0
  6431 ;;Total ram usage:       70 bytes
  6432 ;; Hardware stack levels used: 1
  6433 ;; Hardware stack levels required when called: 6
  6434 ;; This function calls:
  6435 ;;		_FLASH_WriteBlock
  6436 ;; This function is called by:
  6437 ;;		_process_remote_command
  6438 ;; This function uses a non-reentrant model
  6439 ;;
  6440                           
  6441                           
  6442                           ;psect for function _writePersistentState
  6443  07A4                     _writePersistentState:
  6444  07A4                     l3966:	
  6445                           ;incstack = 0
  6446                           ; Regs used in _writePersistentState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6447                           
  6448                           
  6449                           ;main.c: 130:   uint16_t buf[32];;main.c: 131:   for (uint8_t i=0; i<32; i++){
  6450  07A4  0020               	movlb	0	; select bank0
  6451  07A5  01EE               	clrf	writePersistentState@i
  6452  07A6                     l3972:
  6453                           
  6454                           ;main.c: 132:     buf[0] = 0;
  6455  07A6  01AE               	clrf	writePersistentState@buf
  6456  07A7  01AF               	clrf	writePersistentState@buf+1
  6457  07A8                     l3974:
  6458                           
  6459                           ;main.c: 133:   }
  6460  07A8  3001               	movlw	1
  6461  07A9  00AA               	movwf	??_writePersistentState
  6462  07AA  082A               	movf	??_writePersistentState,w
  6463  07AB  07EE               	addwf	writePersistentState@i,f
  6464  07AC                     l3976:
  6465  07AC  3020               	movlw	32
  6466  07AD  026E               	subwf	writePersistentState@i,w
  6467  07AE  1C03               	skipc
  6468  07AF  2FB1               	goto	u2611
  6469  07B0  2FB2               	goto	u2610
  6470  07B1                     u2611:
  6471  07B1  2FA6               	goto	l3972
  6472  07B2                     u2610:
  6473  07B2                     l3978:
  6474                           
  6475                           ;main.c: 136:   uint8_t idx = 0;
  6476  07B2  01EF               	clrf	writePersistentState@idx
  6477  07B3                     l3980:
  6478                           
  6479                           ;main.c: 137:   buf[idx++] = ((uint16_t)(0x3400 | (currentIndex & 0xff)));
  6480  07B3  30FF               	movlw	255
  6481  07B4  0021               	movlb	1	; select bank1
  6482  07B5  0563               	andwf	_currentIndex^(0+128),w
  6483  07B6  0020               	movlb	0	; select bank0
  6484  07B7  00AA               	movwf	??_writePersistentState
  6485  07B8  3000               	movlw	0
  6486  07B9  0021               	movlb	1	; select bank1
  6487  07BA  0564               	andwf	(_currentIndex+1)^(0+128),w
  6488  07BB  0020               	movlb	0	; select bank0
  6489  07BC  00AB               	movwf	??_writePersistentState+1
  6490  07BD  3000               	movlw	0
  6491  07BE  042A               	iorwf	??_writePersistentState,w
  6492  07BF  00AE               	movwf	writePersistentState@buf
  6493  07C0  3034               	movlw	52
  6494  07C1  042B               	iorwf	??_writePersistentState+1,w
  6495  07C2  00AF               	movwf	writePersistentState@buf+1
  6496  07C3                     l3982:
  6497  07C3  3001               	movlw	1
  6498  07C4  00AA               	movwf	??_writePersistentState
  6499  07C5  082A               	movf	??_writePersistentState,w
  6500  07C6  07EF               	addwf	writePersistentState@idx,f
  6501  07C7                     l3984:
  6502                           
  6503                           ;main.c: 138:   buf[idx++] = ((uint16_t)(0x3400 | (frequencyIndex & 0xff)));
  6504  07C7  30FF               	movlw	255
  6505  07C8  0021               	movlb	1	; select bank1
  6506  07C9  0561               	andwf	_frequencyIndex^(0+128),w
  6507  07CA  0020               	movlb	0	; select bank0
  6508  07CB  00AA               	movwf	??_writePersistentState
  6509  07CC  3000               	movlw	0
  6510  07CD  0021               	movlb	1	; select bank1
  6511  07CE  0562               	andwf	(_frequencyIndex+1)^(0+128),w
  6512  07CF  0020               	movlb	0	; select bank0
  6513  07D0  00AB               	movwf	??_writePersistentState+1
  6514  07D1  3000               	movlw	0
  6515  07D2  042A               	iorwf	??_writePersistentState,w
  6516  07D3  00AC               	movwf	??_writePersistentState+2
  6517  07D4  3034               	movlw	52
  6518  07D5  042B               	iorwf	??_writePersistentState+1,w
  6519  07D6  00AD               	movwf	??_writePersistentState+3
  6520  07D7  356F               	lslf	writePersistentState@idx,w
  6521  07D8  3E2E               	addlw	(low (writePersistentState@buf| 0))& (0+255)
  6522  07D9  0086               	movwf	6
  6523  07DA  0187               	clrf	7
  6524  07DB  082C               	movf	??_writePersistentState+2,w
  6525  07DC  3FC0               	movwi [0]fsr1
  6526  07DD  082D               	movf	??_writePersistentState+3,w
  6527  07DE  3FC1               	movwi [1]fsr1
  6528  07DF                     l3986:
  6529  07DF  3001               	movlw	1
  6530  07E0  00AA               	movwf	??_writePersistentState
  6531  07E1  082A               	movf	??_writePersistentState,w
  6532  07E2  07EF               	addwf	writePersistentState@idx,f
  6533  07E3                     l3988:
  6534                           
  6535                           ;main.c: 139:   buf[idx++] = ((uint16_t)(0x3400 | (dc_frequency_flag & 0xff)));
  6536  07E3  3000               	movlw	0
  6537  07E4  047A               	iorwf	_dc_frequency_flag,w
  6538  07E5  00AA               	movwf	??_writePersistentState
  6539  07E6  3034               	movlw	52
  6540  07E7  00AB               	movwf	??_writePersistentState+1
  6541  07E8  356F               	lslf	writePersistentState@idx,w
  6542  07E9  3E2E               	addlw	(low (writePersistentState@buf| 0))& (0+255)
  6543  07EA  0086               	movwf	6
  6544  07EB  0187               	clrf	7
  6545  07EC  082A               	movf	??_writePersistentState,w
  6546  07ED  3FC0               	movwi [0]fsr1
  6547  07EE  082B               	movf	??_writePersistentState+1,w
  6548  07EF  3FC1               	movwi [1]fsr1
  6549  07F0                     l3990:
  6550  07F0  3001               	movlw	1
  6551  07F1  00AA               	movwf	??_writePersistentState
  6552  07F2  082A               	movf	??_writePersistentState,w
  6553  07F3  07EF               	addwf	writePersistentState@idx,f
  6554  07F4                     l3992:
  6555                           
  6556                           ;main.c: 141:   FLASH_WriteBlock((uint16_t)&HEF_persistent_state, buf);
  6557  07F4  30E0               	movlw	224
  6558  07F5  00A0               	movwf	FLASH_WriteBlock@writeAddr
  6559  07F6  300F               	movlw	15
  6560  07F7  00A1               	movwf	FLASH_WriteBlock@writeAddr+1
  6561  07F8  302E               	movlw	(low (writePersistentState@buf| 0))& (0+255)
  6562  07F9  00AA               	movwf	??_writePersistentState
  6563  07FA  082A               	movf	??_writePersistentState,w
  6564  07FB  00A2               	movwf	FLASH_WriteBlock@flashWordArray
  6565  07FC  3186  2606  3187   	fcall	_FLASH_WriteBlock
  6566  07FF                     l639:
  6567  07FF  0008               	return
  6568  0800                     __end_of_writePersistentState:
  6569                           
  6570                           	psect	text5
  6571  0606                     __ptext5:	
  6572 ;; *************** function _FLASH_WriteBlock *****************
  6573 ;; Defined at:
  6574 ;;		line 94 in file "mcc_generated_files/memory.c"
  6575 ;; Parameters:    Size  Location     Type
  6576 ;;  writeAddr       2    0[BANK0 ] unsigned short 
  6577 ;;  flashWordArr    1    2[BANK0 ] PTR unsigned short 
  6578 ;;		 -> writePersistentState@buf(64), 
  6579 ;; Auto vars:     Size  Location     Type
  6580 ;;  blockStartAd    2    6[BANK0 ] unsigned short 
  6581 ;;  i               1    9[BANK0 ] unsigned char 
  6582 ;;  GIEBitValue     1    8[BANK0 ] unsigned char 
  6583 ;; Return value:  Size  Location     Type
  6584 ;;                  1    wreg      char 
  6585 ;; Registers used:
  6586 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6587 ;; Tracked objects:
  6588 ;;		On entry : 0/0
  6589 ;;		On exit  : 0/0
  6590 ;;		Unchanged: 0/0
  6591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6592 ;;      Params:         0       3       0       0       0       0       0       0
  6593 ;;      Locals:         0       4       0       0       0       0       0       0
  6594 ;;      Temps:          0       3       0       0       0       0       0       0
  6595 ;;      Totals:         0      10       0       0       0       0       0       0
  6596 ;;Total ram usage:       10 bytes
  6597 ;; Hardware stack levels used: 1
  6598 ;; Hardware stack levels required when called: 5
  6599 ;; This function calls:
  6600 ;;		_FLASH_EraseBlock
  6601 ;; This function is called by:
  6602 ;;		_writePersistentState
  6603 ;;		_FLASH_WriteWord
  6604 ;; This function uses a non-reentrant model
  6605 ;;
  6606                           
  6607                           
  6608                           ;psect for function _FLASH_WriteBlock
  6609  0606                     _FLASH_WriteBlock:
  6610  0606                     l3800:	
  6611                           ;incstack = 0
  6612                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6613                           
  6614                           
  6615                           ;mcc_generated_files/memory.c: 94: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t 
      +                          *flashWordArray);mcc_generated_files/memory.c: 95: {;mcc_generated_files/memory.c: 96:  
      +                             uint16_t blockStartAddr = (uint16_t )(writeAddr & ((0x1000 -1) ^ (32 -1)));
  6616  0606  30E0               	movlw	224
  6617  0607  0020               	movlb	0	; select bank0
  6618  0608  0520               	andwf	FLASH_WriteBlock@writeAddr,w
  6619  0609  00A6               	movwf	FLASH_WriteBlock@blockStartAddr
  6620  060A  300F               	movlw	15
  6621  060B  0521               	andwf	FLASH_WriteBlock@writeAddr+1,w
  6622  060C  00A7               	movwf	FLASH_WriteBlock@blockStartAddr+1
  6623  060D                     l3802:
  6624                           
  6625                           ;mcc_generated_files/memory.c: 97:     uint8_t GIEBitValue = INTCONbits.GIE;
  6626  060D  3000               	movlw	0
  6627  060E  1B8B               	btfsc	11,7	;volatile
  6628  060F  3001               	movlw	1
  6629  0610  00A8               	movwf	FLASH_WriteBlock@GIEBitValue
  6630  0611                     l3804:
  6631                           
  6632                           ;mcc_generated_files/memory.c: 98:     uint8_t i;;mcc_generated_files/memory.c: 101:    
      +                           if( writeAddr != blockStartAddr )
  6633  0611  0827               	movf	FLASH_WriteBlock@blockStartAddr+1,w
  6634  0612  0621               	xorwf	FLASH_WriteBlock@writeAddr+1,w
  6635  0613  1D03               	skipz
  6636  0614  2E17               	goto	u2335
  6637  0615  0826               	movf	FLASH_WriteBlock@blockStartAddr,w
  6638  0616  0620               	xorwf	FLASH_WriteBlock@writeAddr,w
  6639  0617                     u2335:
  6640  0617  1903               	skipnz
  6641  0618  2E1A               	goto	u2331
  6642  0619  2E1B               	goto	u2330
  6643  061A                     u2331:
  6644  061A  2E1C               	goto	l471
  6645  061B                     u2330:
  6646  061B  2E71               	goto	l472
  6647  061C                     l471:	
  6648                           ;mcc_generated_files/memory.c: 104:     }
  6649                           
  6650                           
  6651                           ;mcc_generated_files/memory.c: 106:     INTCONbits.GIE = 0;
  6652  061C  138B               	bcf	11,7	;volatile
  6653  061D                     l3808:
  6654                           
  6655                           ;mcc_generated_files/memory.c: 109:     FLASH_EraseBlock(writeAddr);
  6656  061D  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
  6657  061E  00F4               	movwf	FLASH_EraseBlock@startAddr+1
  6658  061F  0820               	movf	FLASH_WriteBlock@writeAddr,w
  6659  0620  00F3               	movwf	FLASH_EraseBlock@startAddr
  6660  0621  318C  2421  3186   	fcall	_FLASH_EraseBlock
  6661  0624                     l3810:
  6662                           
  6663                           ;mcc_generated_files/memory.c: 112:     PMCON1bits.CFGS = 0;
  6664  0624  0023               	movlb	3	; select bank3
  6665  0625  1315               	bcf	21,6	;volatile
  6666  0626                     l3812:
  6667                           
  6668                           ;mcc_generated_files/memory.c: 113:     PMCON1bits.WREN = 1;
  6669  0626  1515               	bsf	21,2	;volatile
  6670  0627                     l3814:
  6671                           
  6672                           ;mcc_generated_files/memory.c: 114:     PMCON1bits.LWLO = 1;
  6673  0627  1695               	bsf	21,5	;volatile
  6674  0628                     l3816:
  6675                           
  6676                           ;mcc_generated_files/memory.c: 116:     for (i=0; i<32; i++)
  6677  0628  0020               	movlb	0	; select bank0
  6678  0629  01A9               	clrf	FLASH_WriteBlock@i
  6679  062A                     l3822:
  6680                           
  6681                           ;mcc_generated_files/memory.c: 117:     {;mcc_generated_files/memory.c: 119:         PMA
      +                          DRL = (writeAddr & 0xFF);
  6682  062A  0820               	movf	FLASH_WriteBlock@writeAddr,w
  6683  062B  0023               	movlb	3	; select bank3
  6684  062C  0091               	movwf	17	;volatile
  6685  062D                     l3824:
  6686                           
  6687                           ;mcc_generated_files/memory.c: 121:         PMADRH = ((writeAddr & 0xFF00) >> 8);
  6688  062D  0020               	movlb	0	; select bank0
  6689  062E  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
  6690  062F  0023               	movlb	3	; select bank3
  6691  0630  0092               	movwf	18	;volatile
  6692  0631                     l3826:
  6693                           
  6694                           ;mcc_generated_files/memory.c: 124:         PMDATL = flashWordArray[i];
  6695  0631  0020               	movlb	0	; select bank0
  6696  0632  3529               	lslf	FLASH_WriteBlock@i,w
  6697  0633  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
  6698  0634  00A3               	movwf	??_FLASH_WriteBlock
  6699  0635  0823               	movf	??_FLASH_WriteBlock,w
  6700  0636  0086               	movwf	6
  6701  0637  0187               	clrf	7
  6702  0638  0801               	movf	1,w
  6703  0639  0023               	movlb	3	; select bank3
  6704  063A  0093               	movwf	19	;volatile
  6705  063B                     l3828:
  6706                           
  6707                           ;mcc_generated_files/memory.c: 125:         PMDATH = ((flashWordArray[i] & 0xFF00) >> 8)
      +                          ;
  6708  063B  0020               	movlb	0	; select bank0
  6709  063C  3529               	lslf	FLASH_WriteBlock@i,w
  6710  063D  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
  6711  063E  00A3               	movwf	??_FLASH_WriteBlock
  6712  063F  0823               	movf	??_FLASH_WriteBlock,w
  6713  0640  0086               	movwf	6
  6714  0641  0187               	clrf	7
  6715  0642  3F40               	moviw [0]fsr1
  6716  0643  00A4               	movwf	??_FLASH_WriteBlock+1
  6717  0644  3F41               	moviw [1]fsr1
  6718  0645  00A5               	movwf	??_FLASH_WriteBlock+2
  6719  0646  0825               	movf	??_FLASH_WriteBlock+2,w
  6720  0647  0023               	movlb	3	; select bank3
  6721  0648  0094               	movwf	20	;volatile
  6722  0649                     l3830:
  6723                           
  6724                           ;mcc_generated_files/memory.c: 127:         if(i == (32 -1))
  6725  0649  301F               	movlw	31
  6726  064A  0020               	movlb	0	; select bank0
  6727  064B  0629               	xorwf	FLASH_WriteBlock@i,w
  6728  064C  1D03               	btfss	3,2
  6729  064D  2E4F               	goto	u2341
  6730  064E  2E50               	goto	u2340
  6731  064F                     u2341:
  6732  064F  2E52               	goto	l3834
  6733  0650                     u2340:
  6734  0650                     l3832:
  6735                           
  6736                           ;mcc_generated_files/memory.c: 128:         {;mcc_generated_files/memory.c: 130:        
      +                               PMCON1bits.LWLO = 0;
  6737  0650  0023               	movlb	3	; select bank3
  6738  0651  1295               	bcf	21,5	;volatile
  6739  0652                     l3834:
  6740                           
  6741                           ;mcc_generated_files/memory.c: 133:         PMCON2 = 0x55;
  6742  0652  3055               	movlw	85
  6743  0653  0023               	movlb	3	; select bank3
  6744  0654  0096               	movwf	22	;volsfr
  6745                           
  6746                           ;mcc_generated_files/memory.c: 134:         PMCON2 = 0xAA;
  6747  0655  30AA               	movlw	170
  6748  0656  0096               	movwf	22	;volsfr
  6749  0657                     l3836:
  6750                           
  6751                           ;mcc_generated_files/memory.c: 135:         PMCON1bits.WR = 1;
  6752  0657  1495               	bsf	21,1	;volatile
  6753  0658                     l3838:
  6754                           
  6755                           ;mcc_generated_files/memory.c: 136:         __nop();
  6756  0658  0000               	nop
  6757  0659                     l3840:
  6758                           
  6759                           ;mcc_generated_files/memory.c: 137:         __nop();
  6760  0659  0000               	nop
  6761                           
  6762                           ;mcc_generated_files/memory.c: 139:  writeAddr++;
  6763  065A  3001               	movlw	1
  6764  065B  0020               	movlb	0	; select bank0
  6765  065C  07A0               	addwf	FLASH_WriteBlock@writeAddr,f
  6766  065D  3000               	movlw	0
  6767  065E  3DA1               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  6768  065F                     l3842:
  6769                           
  6770                           ;mcc_generated_files/memory.c: 140:     }
  6771  065F  3001               	movlw	1
  6772  0660  00A3               	movwf	??_FLASH_WriteBlock
  6773  0661  0823               	movf	??_FLASH_WriteBlock,w
  6774  0662  07A9               	addwf	FLASH_WriteBlock@i,f
  6775  0663                     l3844:
  6776  0663  3020               	movlw	32
  6777  0664  0229               	subwf	FLASH_WriteBlock@i,w
  6778  0665  1C03               	skipc
  6779  0666  2E68               	goto	u2351
  6780  0667  2E69               	goto	u2350
  6781  0668                     u2351:
  6782  0668  2E2A               	goto	l3822
  6783  0669                     u2350:
  6784  0669                     l474:
  6785                           
  6786                           ;mcc_generated_files/memory.c: 142:     PMCON1bits.WREN = 0;
  6787  0669  0023               	movlb	3	; select bank3
  6788  066A  1115               	bcf	21,2	;volatile
  6789  066B                     l3846:
  6790                           
  6791                           ;mcc_generated_files/memory.c: 143:     INTCONbits.GIE = GIEBitValue;
  6792  066B  0020               	movlb	0	; select bank0
  6793  066C  0C28               	rrf	FLASH_WriteBlock@GIEBitValue,w
  6794  066D  1C03               	skipc
  6795  066E  138B               	bcf	11,7	;volatile
  6796  066F  1803               	skipnc
  6797  0670  178B               	bsf	11,7	;volatile
  6798  0671                     l472:
  6799  0671  0008               	return
  6800  0672                     __end_of_FLASH_WriteBlock:
  6801                           
  6802                           	psect	text6
  6803  0C21                     __ptext6:	
  6804 ;; *************** function _FLASH_EraseBlock *****************
  6805 ;; Defined at:
  6806 ;;		line 148 in file "mcc_generated_files/memory.c"
  6807 ;; Parameters:    Size  Location     Type
  6808 ;;  startAddr       2    3[COMMON] unsigned short 
  6809 ;; Auto vars:     Size  Location     Type
  6810 ;;  GIEBitValue     1    5[COMMON] unsigned char 
  6811 ;; Return value:  Size  Location     Type
  6812 ;;                  1    wreg      void 
  6813 ;; Registers used:
  6814 ;;		wreg, status,2, status,0
  6815 ;; Tracked objects:
  6816 ;;		On entry : 0/0
  6817 ;;		On exit  : 0/0
  6818 ;;		Unchanged: 0/0
  6819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6820 ;;      Params:         2       0       0       0       0       0       0       0
  6821 ;;      Locals:         1       0       0       0       0       0       0       0
  6822 ;;      Temps:          0       0       0       0       0       0       0       0
  6823 ;;      Totals:         3       0       0       0       0       0       0       0
  6824 ;;Total ram usage:        3 bytes
  6825 ;; Hardware stack levels used: 1
  6826 ;; Hardware stack levels required when called: 4
  6827 ;; This function calls:
  6828 ;;		Nothing
  6829 ;; This function is called by:
  6830 ;;		_FLASH_WriteBlock
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834                           
  6835                           ;psect for function _FLASH_EraseBlock
  6836  0C21                     _FLASH_EraseBlock:
  6837  0C21                     l3762:	
  6838                           ;incstack = 0
  6839                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  6840                           
  6841                           
  6842                           ;mcc_generated_files/memory.c: 148: void FLASH_EraseBlock(uint16_t startAddr);mcc_genera
      +                          ted_files/memory.c: 149: {;mcc_generated_files/memory.c: 150:     uint8_t GIEBitValue = 
      +                          INTCONbits.GIE;
  6843  0C21  3000               	movlw	0
  6844  0C22  1B8B               	btfsc	11,7	;volatile
  6845  0C23  3001               	movlw	1
  6846  0C24  00F5               	movwf	FLASH_EraseBlock@GIEBitValue
  6847  0C25                     l3764:
  6848                           
  6849                           ;mcc_generated_files/memory.c: 153:     INTCONbits.GIE = 0;
  6850  0C25  138B               	bcf	11,7	;volatile
  6851  0C26                     l3766:
  6852                           
  6853                           ;mcc_generated_files/memory.c: 155:     PMADRL = (startAddr & 0xFF);
  6854  0C26  0873               	movf	FLASH_EraseBlock@startAddr,w
  6855  0C27  0023               	movlb	3	; select bank3
  6856  0C28  0091               	movwf	17	;volatile
  6857  0C29                     l3768:
  6858                           
  6859                           ;mcc_generated_files/memory.c: 157:     PMADRH = ((startAddr & 0xFF00) >> 8);
  6860  0C29  0874               	movf	FLASH_EraseBlock@startAddr+1,w
  6861  0C2A  0092               	movwf	18	;volatile
  6862  0C2B                     l3770:
  6863                           
  6864                           ;mcc_generated_files/memory.c: 160:     PMCON1bits.CFGS = 0;
  6865  0C2B  1315               	bcf	21,6	;volatile
  6866  0C2C                     l3772:
  6867                           
  6868                           ;mcc_generated_files/memory.c: 161:     PMCON1bits.FREE = 1;
  6869  0C2C  1615               	bsf	21,4	;volatile
  6870  0C2D                     l3774:
  6871                           
  6872                           ;mcc_generated_files/memory.c: 162:     PMCON1bits.WREN = 1;
  6873  0C2D  1515               	bsf	21,2	;volatile
  6874                           
  6875                           ;mcc_generated_files/memory.c: 165:     PMCON2 = 0x55;
  6876  0C2E  3055               	movlw	85
  6877  0C2F  0096               	movwf	22	;volsfr
  6878                           
  6879                           ;mcc_generated_files/memory.c: 166:     PMCON2 = 0xAA;
  6880  0C30  30AA               	movlw	170
  6881  0C31  0096               	movwf	22	;volsfr
  6882  0C32                     l3776:
  6883                           
  6884                           ;mcc_generated_files/memory.c: 167:     PMCON1bits.WR = 1;
  6885  0C32  1495               	bsf	21,1	;volatile
  6886  0C33                     l3778:
  6887                           
  6888                           ;mcc_generated_files/memory.c: 168:     __nop();
  6889  0C33  0000               	nop
  6890  0C34                     l3780:
  6891                           
  6892                           ;mcc_generated_files/memory.c: 169:     __nop();
  6893  0C34  0000               	nop
  6894  0C35                     l3782:
  6895                           
  6896                           ;mcc_generated_files/memory.c: 171:     PMCON1bits.WREN = 0;
  6897  0C35  0023               	movlb	3	; select bank3
  6898  0C36  1115               	bcf	21,2	;volatile
  6899  0C37                     l3784:
  6900                           
  6901                           ;mcc_generated_files/memory.c: 172:     INTCONbits.GIE = GIEBitValue;
  6902  0C37  0C75               	rrf	FLASH_EraseBlock@GIEBitValue,w
  6903  0C38  1C03               	skipc
  6904  0C39  138B               	bcf	11,7	;volatile
  6905  0C3A  1803               	skipnc
  6906  0C3B  178B               	bsf	11,7	;volatile
  6907  0C3C                     l478:
  6908  0C3C  0008               	return
  6909  0C3D                     __end_of_FLASH_EraseBlock:
  6910                           
  6911                           	psect	text7
  6912  06DE                     __ptext7:	
  6913 ;; *************** function _setFrequency *****************
  6914 ;; Defined at:
  6915 ;;		line 342 in file "main.c"
  6916 ;; Parameters:    Size  Location     Type
  6917 ;;  frequency_hz    2   23[BANK0 ] short 
  6918 ;; Auto vars:     Size  Location     Type
  6919 ;;  PR4_val         2   26[BANK0 ] short 
  6920 ;; Return value:  Size  Location     Type
  6921 ;;                  1    wreg      void 
  6922 ;; Registers used:
  6923 ;;		wreg, status,2, status,0, pclath, cstack
  6924 ;; Tracked objects:
  6925 ;;		On entry : 0/0
  6926 ;;		On exit  : 0/0
  6927 ;;		Unchanged: 0/0
  6928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6929 ;;      Params:         0       2       0       0       0       0       0       0
  6930 ;;      Locals:         0       2       0       0       0       0       0       0
  6931 ;;      Temps:          0       1       0       0       0       0       0       0
  6932 ;;      Totals:         0       5       0       0       0       0       0       0
  6933 ;;Total ram usage:        5 bytes
  6934 ;; Hardware stack levels used: 1
  6935 ;; Hardware stack levels required when called: 5
  6936 ;; This function calls:
  6937 ;;		_TMR4_LoadPeriodRegister
  6938 ;;		___aldiv
  6939 ;;		___lmul
  6940 ;; This function is called by:
  6941 ;;		_process_remote_command
  6942 ;;		_main
  6943 ;; This function uses a non-reentrant model
  6944 ;;
  6945                           
  6946                           
  6947                           ;psect for function _setFrequency
  6948  06DE                     _setFrequency:
  6949  06DE                     l4074:	
  6950                           ;incstack = 0
  6951                           ; Regs used in _setFrequency: [wreg+status,2+status,0+pclath+cstack]
  6952                           
  6953                           
  6954                           ;main.c: 342: void setFrequency(int16_t frequency_hz);main.c: 343: {;main.c: 358:   int1
      +                          6_t PR4_val = 1000000L / (96L * frequency_hz);
  6955  06DE  0020               	movlb	0	; select bank0
  6956  06DF  0837               	movf	setFrequency@frequency_hz,w
  6957  06E0  00A0               	movwf	___lmul@multiplier
  6958  06E1  0838               	movf	setFrequency@frequency_hz+1,w
  6959  06E2  00A1               	movwf	___lmul@multiplier+1
  6960  06E3  0D89               	rlf	9,f
  6961  06E4  3B89               	subwfb	9,f
  6962  06E5  0989               	comf	9,f
  6963  06E6  00A2               	movwf	___lmul@multiplier+2
  6964  06E7  00A3               	movwf	___lmul@multiplier+3
  6965  06E8  3000               	movlw	0
  6966  06E9  00A7               	movwf	___lmul@multiplicand+3
  6967  06EA  3000               	movlw	0
  6968  06EB  00A6               	movwf	___lmul@multiplicand+2
  6969  06EC  3000               	movlw	0
  6970  06ED  00A5               	movwf	___lmul@multiplicand+1
  6971  06EE  3060               	movlw	96
  6972  06EF  00A4               	movwf	___lmul@multiplicand
  6973  06F0  318E  264F  3186   	fcall	___lmul
  6974  06F3  0020               	movlb	0	; select bank0
  6975  06F4  0823               	movf	?___lmul+3,w
  6976  06F5  00AB               	movwf	___aldiv@divisor+3
  6977  06F6  0822               	movf	?___lmul+2,w
  6978  06F7  00AA               	movwf	___aldiv@divisor+2
  6979  06F8  0821               	movf	?___lmul+1,w
  6980  06F9  00A9               	movwf	___aldiv@divisor+1
  6981  06FA  0820               	movf	?___lmul,w
  6982  06FB  00A8               	movwf	___aldiv@divisor
  6983  06FC  3000               	movlw	0
  6984  06FD  00AF               	movwf	___aldiv@dividend+3
  6985  06FE  300F               	movlw	15
  6986  06FF  00AE               	movwf	___aldiv@dividend+2
  6987  0700  3042               	movlw	66
  6988  0701  00AD               	movwf	___aldiv@dividend+1
  6989  0702  3040               	movlw	64
  6990  0703  00AC               	movwf	___aldiv@dividend
  6991  0704  3184  24F8  3186   	fcall	___aldiv
  6992  0707  0020               	movlb	0	; select bank0
  6993  0708  0829               	movf	?___aldiv+1,w
  6994  0709  00BB               	movwf	setFrequency@PR4_val+1
  6995  070A  0828               	movf	?___aldiv,w
  6996  070B  00BA               	movwf	setFrequency@PR4_val
  6997  070C                     l4076:
  6998                           
  6999                           ;main.c: 359:   if (PR4_val > 255){
  7000  070C  083B               	movf	setFrequency@PR4_val+1,w
  7001  070D  3A80               	xorlw	128
  7002  070E  00B9               	movwf	??_setFrequency
  7003  070F  3081               	movlw	129
  7004  0710  0239               	subwf	??_setFrequency,w
  7005  0711  1D03               	skipz
  7006  0712  2F15               	goto	u2675
  7007  0713  3000               	movlw	0
  7008  0714  023A               	subwf	setFrequency@PR4_val,w
  7009  0715                     u2675:
  7010  0715  1C03               	skipc
  7011  0716  2F18               	goto	u2671
  7012  0717  2F19               	goto	u2670
  7013  0718                     u2671:
  7014  0718  2F1E               	goto	l698
  7015  0719                     u2670:
  7016  0719                     l4078:
  7017                           
  7018                           ;main.c: 360:     PR4_val = 255;
  7019  0719  30FF               	movlw	255
  7020  071A  0020               	movlb	0	; select bank0
  7021  071B  00BA               	movwf	setFrequency@PR4_val
  7022  071C  3000               	movlw	0
  7023  071D  00BB               	movwf	setFrequency@PR4_val+1
  7024  071E                     l698:	
  7025                           ;main.c: 361:   }
  7026                           
  7027                           
  7028                           ;main.c: 362:   if (PR4_val < 68){
  7029  071E  0020               	movlb	0	; select bank0
  7030  071F  083B               	movf	setFrequency@PR4_val+1,w
  7031  0720  3A80               	xorlw	128
  7032  0721  00B9               	movwf	??_setFrequency
  7033  0722  3080               	movlw	128
  7034  0723  0239               	subwf	??_setFrequency,w
  7035  0724  1D03               	skipz
  7036  0725  2F28               	goto	u2685
  7037  0726  3044               	movlw	68
  7038  0727  023A               	subwf	setFrequency@PR4_val,w
  7039  0728                     u2685:
  7040  0728  1803               	skipnc
  7041  0729  2F2B               	goto	u2681
  7042  072A  2F2C               	goto	u2680
  7043  072B                     u2681:
  7044  072B  2F31               	goto	l4082
  7045  072C                     u2680:
  7046  072C                     l4080:
  7047                           
  7048                           ;main.c: 363:     PR4_val = 68;
  7049  072C  3044               	movlw	68
  7050  072D  0020               	movlb	0	; select bank0
  7051  072E  00BA               	movwf	setFrequency@PR4_val
  7052  072F  3000               	movlw	0
  7053  0730  00BB               	movwf	setFrequency@PR4_val+1
  7054  0731                     l4082:
  7055                           
  7056                           ;main.c: 370:   (INTCONbits.GIE = 0);
  7057  0731  138B               	bcf	11,7	;volatile
  7058  0732                     l4084:
  7059                           
  7060                           ;main.c: 371:   TMR4_LoadPeriodRegister((uint16_t)PR4_val);
  7061  0732  0020               	movlb	0	; select bank0
  7062  0733  083A               	movf	setFrequency@PR4_val,w
  7063  0734  318A  22C8  3186   	fcall	_TMR4_LoadPeriodRegister
  7064  0737                     l4086:
  7065                           
  7066                           ;main.c: 372:   if (0 == frequency_hz){
  7067  0737  0020               	movlb	0	; select bank0
  7068  0738  0837               	movf	setFrequency@frequency_hz,w
  7069  0739  0438               	iorwf	setFrequency@frequency_hz+1,w
  7070  073A  1D03               	btfss	3,2
  7071  073B  2F3D               	goto	u2691
  7072  073C  2F3E               	goto	u2690
  7073  073D                     u2691:
  7074  073D  2F41               	goto	l4090
  7075  073E                     u2690:
  7076  073E                     l4088:
  7077                           
  7078                           ;main.c: 373:     dc_frequency_flag = 1;
  7079  073E  01FA               	clrf	_dc_frequency_flag
  7080  073F  0AFA               	incf	_dc_frequency_flag,f
  7081                           
  7082                           ;main.c: 374:   } else {
  7083  0740  2F42               	goto	l4092
  7084  0741                     l4090:
  7085                           
  7086                           ;main.c: 375:     dc_frequency_flag = 0;
  7087  0741  01FA               	clrf	_dc_frequency_flag
  7088  0742                     l4092:
  7089                           
  7090                           ;main.c: 377:   (INTCONbits.GIE = 1);
  7091  0742  178B               	bsf	11,7	;volatile
  7092  0743                     l702:
  7093  0743  0008               	return
  7094  0744                     __end_of_setFrequency:
  7095                           
  7096                           	psect	text8
  7097  0AC8                     __ptext8:	
  7098 ;; *************** function _TMR4_LoadPeriodRegister *****************
  7099 ;; Defined at:
  7100 ;;		line 115 in file "mcc_generated_files/tmr4.c"
  7101 ;; Parameters:    Size  Location     Type
  7102 ;;  periodVal       1    wreg     unsigned char 
  7103 ;; Auto vars:     Size  Location     Type
  7104 ;;  periodVal       1    3[COMMON] unsigned char 
  7105 ;; Return value:  Size  Location     Type
  7106 ;;                  1    wreg      void 
  7107 ;; Registers used:
  7108 ;;		wreg
  7109 ;; Tracked objects:
  7110 ;;		On entry : 0/0
  7111 ;;		On exit  : 0/0
  7112 ;;		Unchanged: 0/0
  7113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7114 ;;      Params:         0       0       0       0       0       0       0       0
  7115 ;;      Locals:         1       0       0       0       0       0       0       0
  7116 ;;      Temps:          0       0       0       0       0       0       0       0
  7117 ;;      Totals:         1       0       0       0       0       0       0       0
  7118 ;;Total ram usage:        1 bytes
  7119 ;; Hardware stack levels used: 1
  7120 ;; Hardware stack levels required when called: 4
  7121 ;; This function calls:
  7122 ;;		Nothing
  7123 ;; This function is called by:
  7124 ;;		_setFrequency
  7125 ;; This function uses a non-reentrant model
  7126 ;;
  7127                           
  7128                           
  7129                           ;psect for function _TMR4_LoadPeriodRegister
  7130  0AC8                     _TMR4_LoadPeriodRegister:
  7131                           
  7132                           ;incstack = 0
  7133                           ; Regs used in _TMR4_LoadPeriodRegister: [wreg]
  7134                           ;TMR4_LoadPeriodRegister@periodVal stored from wreg
  7135  0AC8  00F3               	movwf	TMR4_LoadPeriodRegister@periodVal
  7136  0AC9                     l3798:
  7137                           
  7138                           ;mcc_generated_files/tmr4.c: 115: void TMR4_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr4.c: 116: {;mcc_generated_files/tmr4.c: 117:    PR4 = periodVal;
  7139  0AC9  0873               	movf	TMR4_LoadPeriodRegister@periodVal,w
  7140  0ACA  0028               	movlb	8	; select bank8
  7141  0ACB  0096               	movwf	22	;volatile
  7142  0ACC                     l417:
  7143  0ACC  0008               	return
  7144  0ACD                     __end_of_TMR4_LoadPeriodRegister:
  7145                           
  7146                           	psect	text9
  7147  03BD                     __ptext9:	
  7148 ;; *************** function _setCurrent *****************
  7149 ;; Defined at:
  7150 ;;		line 331 in file "main.c"
  7151 ;; Parameters:    Size  Location     Type
  7152 ;;  microamps       2   25[BANK0 ] int 
  7153 ;;  Vdd_mv          2   27[BANK0 ] int 
  7154 ;; Auto vars:     Size  Location     Type
  7155 ;;  DACValue        2   39[BANK0 ] int 
  7156 ;;  Vdac_mv         2   37[BANK0 ] int 
  7157 ;; Return value:  Size  Location     Type
  7158 ;;                  1    wreg      void 
  7159 ;; Registers used:
  7160 ;;		wreg, status,2, status,0, pclath, cstack
  7161 ;; Tracked objects:
  7162 ;;		On entry : 0/0
  7163 ;;		On exit  : 0/0
  7164 ;;		Unchanged: 0/0
  7165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7166 ;;      Params:         0       4       0       0       0       0       0       0
  7167 ;;      Locals:         0       4       0       0       0       0       0       0
  7168 ;;      Temps:          0       8       0       0       0       0       0       0
  7169 ;;      Totals:         0      16       0       0       0       0       0       0
  7170 ;;Total ram usage:       16 bytes
  7171 ;; Hardware stack levels used: 1
  7172 ;; Hardware stack levels required when called: 5
  7173 ;; This function calls:
  7174 ;;		___aldiv
  7175 ;;		___awdiv
  7176 ;;		___lmul
  7177 ;; This function is called by:
  7178 ;;		_process_remote_command
  7179 ;;		_main
  7180 ;; This function uses a non-reentrant model
  7181 ;;
  7182                           
  7183                           
  7184                           ;psect for function _setCurrent
  7185  03BD                     _setCurrent:
  7186  03BD                     l4062:	
  7187                           ;incstack = 0
  7188                           ; Regs used in _setCurrent: [wreg+status,2+status,0+pclath+cstack]
  7189                           
  7190                           
  7191                           ;main.c: 331: void setCurrent(int microamps, int Vdd_mv);main.c: 332: {;main.c: 333:   i
      +                          nt Vdac_mv = Vdd_mv - ((int32_t)(4700) * microamps + 500) / 1000;
  7192  03BD  3000               	movlw	0
  7193  03BE  0020               	movlb	0	; select bank0
  7194  03BF  00AB               	movwf	___aldiv@divisor+3
  7195  03C0  3000               	movlw	0
  7196  03C1  00AA               	movwf	___aldiv@divisor+2
  7197  03C2  3003               	movlw	3
  7198  03C3  00A9               	movwf	___aldiv@divisor+1
  7199  03C4  30E8               	movlw	232
  7200  03C5  00A8               	movwf	___aldiv@divisor
  7201  03C6  30F4               	movlw	244
  7202  03C7  00BD               	movwf	??_setCurrent
  7203  03C8  3001               	movlw	1
  7204  03C9  00BE               	movwf	??_setCurrent+1
  7205  03CA  3000               	movlw	0
  7206  03CB  00BF               	movwf	??_setCurrent+2
  7207  03CC  3000               	movlw	0
  7208  03CD  00C0               	movwf	??_setCurrent+3
  7209  03CE  0839               	movf	setCurrent@microamps,w
  7210  03CF  00A0               	movwf	___lmul@multiplier
  7211  03D0  083A               	movf	setCurrent@microamps+1,w
  7212  03D1  00A1               	movwf	___lmul@multiplier+1
  7213  03D2  0D89               	rlf	9,f
  7214  03D3  3B89               	subwfb	9,f
  7215  03D4  0989               	comf	9,f
  7216  03D5  00A2               	movwf	___lmul@multiplier+2
  7217  03D6  00A3               	movwf	___lmul@multiplier+3
  7218  03D7  3000               	movlw	0
  7219  03D8  00A7               	movwf	___lmul@multiplicand+3
  7220  03D9  3000               	movlw	0
  7221  03DA  00A6               	movwf	___lmul@multiplicand+2
  7222  03DB  3012               	movlw	18
  7223  03DC  00A5               	movwf	___lmul@multiplicand+1
  7224  03DD  305C               	movlw	92
  7225  03DE  00A4               	movwf	___lmul@multiplicand
  7226  03DF  318E  264F  3183   	fcall	___lmul
  7227  03E2  0020               	movlb	0	; select bank0
  7228  03E3  0820               	movf	?___lmul,w
  7229  03E4  07BD               	addwf	??_setCurrent,f
  7230  03E5  0821               	movf	?___lmul+1,w
  7231  03E6  3DBE               	addwfc	??_setCurrent+1,f
  7232  03E7  0822               	movf	?___lmul+2,w
  7233  03E8  3DBF               	addwfc	??_setCurrent+2,f
  7234  03E9  0823               	movf	?___lmul+3,w
  7235  03EA  3DC0               	addwfc	??_setCurrent+3,f
  7236  03EB  0840               	movf	??_setCurrent+3,w
  7237  03EC  00AF               	movwf	___aldiv@dividend+3
  7238  03ED  083F               	movf	??_setCurrent+2,w
  7239  03EE  00AE               	movwf	___aldiv@dividend+2
  7240  03EF  083E               	movf	??_setCurrent+1,w
  7241  03F0  00AD               	movwf	___aldiv@dividend+1
  7242  03F1  083D               	movf	??_setCurrent,w
  7243  03F2  00AC               	movwf	___aldiv@dividend
  7244  03F3  3184  24F8  3183   	fcall	___aldiv
  7245  03F6  0020               	movlb	0	; select bank0
  7246  03F7  0828               	movf	?___aldiv,w
  7247  03F8  023B               	subwf	setCurrent@Vdd_mv,w
  7248  03F9  00C5               	movwf	setCurrent@Vdac_mv
  7249  03FA  0829               	movf	?___aldiv+1,w
  7250  03FB  3B3C               	subwfb	setCurrent@Vdd_mv+1,w
  7251  03FC  00C6               	movwf	setCurrent@Vdac_mv+1
  7252                           
  7253                           ;main.c: 334:   int DACValue = (256L * Vdac_mv + Vdd_mv/2) / Vdd_mv;
  7254  03FD  083B               	movf	setCurrent@Vdd_mv,w
  7255  03FE  00A8               	movwf	___aldiv@divisor
  7256  03FF  083C               	movf	setCurrent@Vdd_mv+1,w
  7257  0400  00A9               	movwf	___aldiv@divisor+1
  7258  0401  0D89               	rlf	9,f
  7259  0402  3B89               	subwfb	9,f
  7260  0403  0989               	comf	9,f
  7261  0404  00AA               	movwf	___aldiv@divisor+2
  7262  0405  00AB               	movwf	___aldiv@divisor+3
  7263  0406  3002               	movlw	2
  7264  0407  00F3               	movwf	___awdiv@divisor
  7265  0408  3000               	movlw	0
  7266  0409  00F4               	movwf	___awdiv@divisor+1
  7267  040A  083C               	movf	setCurrent@Vdd_mv+1,w
  7268  040B  00F6               	movwf	___awdiv@dividend+1
  7269  040C  083B               	movf	setCurrent@Vdd_mv,w
  7270  040D  00F5               	movwf	___awdiv@dividend
  7271  040E  3187  2744  3183   	fcall	___awdiv
  7272  0411  0873               	movf	?___awdiv,w
  7273  0412  0020               	movlb	0	; select bank0
  7274  0413  00BD               	movwf	??_setCurrent
  7275  0414  0874               	movf	?___awdiv+1,w
  7276  0415  00BE               	movwf	??_setCurrent+1
  7277  0416  3000               	movlw	0
  7278  0417  1BBE               	btfsc	??_setCurrent+1,7
  7279  0418  30FF               	movlw	255
  7280  0419  00BF               	movwf	??_setCurrent+2
  7281  041A  00C0               	movwf	??_setCurrent+3
  7282  041B  0845               	movf	setCurrent@Vdac_mv,w
  7283  041C  00C1               	movwf	??_setCurrent+4
  7284  041D  0846               	movf	setCurrent@Vdac_mv+1,w
  7285  041E  00C2               	movwf	??_setCurrent+5
  7286  041F  3000               	movlw	0
  7287  0420  1BC2               	btfsc	??_setCurrent+5,7
  7288  0421  30FF               	movlw	255
  7289  0422  00C3               	movwf	??_setCurrent+6
  7290  0423  00C4               	movwf	??_setCurrent+7
  7291  0424  3008               	movlw	8
  7292  0425                     u2645:
  7293  0425  35C1               	lslf	??_setCurrent+4,f
  7294  0426  0DC2               	rlf	??_setCurrent+5,f
  7295  0427  0DC3               	rlf	??_setCurrent+6,f
  7296  0428  0DC4               	rlf	??_setCurrent+7,f
  7297  0429                     u2640:
  7298  0429  0B89               	decfsz	9,f
  7299  042A  2C25               	goto	u2645
  7300  042B  0841               	movf	??_setCurrent+4,w
  7301  042C  07BD               	addwf	??_setCurrent,f
  7302  042D  0842               	movf	??_setCurrent+5,w
  7303  042E  3DBE               	addwfc	??_setCurrent+1,f
  7304  042F  0843               	movf	??_setCurrent+6,w
  7305  0430  3DBF               	addwfc	??_setCurrent+2,f
  7306  0431  0844               	movf	??_setCurrent+7,w
  7307  0432  3DC0               	addwfc	??_setCurrent+3,f
  7308  0433  0840               	movf	??_setCurrent+3,w
  7309  0434  00AF               	movwf	___aldiv@dividend+3
  7310  0435  083F               	movf	??_setCurrent+2,w
  7311  0436  00AE               	movwf	___aldiv@dividend+2
  7312  0437  083E               	movf	??_setCurrent+1,w
  7313  0438  00AD               	movwf	___aldiv@dividend+1
  7314  0439  083D               	movf	??_setCurrent,w
  7315  043A  00AC               	movwf	___aldiv@dividend
  7316  043B  3184  24F8  3183   	fcall	___aldiv
  7317  043E  0020               	movlb	0	; select bank0
  7318  043F  0829               	movf	?___aldiv+1,w
  7319  0440  00C8               	movwf	setCurrent@DACValue+1
  7320  0441  0828               	movf	?___aldiv,w
  7321  0442  00C7               	movwf	setCurrent@DACValue
  7322  0443                     l4064:
  7323                           
  7324                           ;main.c: 335:   if(DACValue > 255){DACValue = 255;}
  7325  0443  0848               	movf	setCurrent@DACValue+1,w
  7326  0444  3A80               	xorlw	128
  7327  0445  00BD               	movwf	??_setCurrent
  7328  0446  3081               	movlw	129
  7329  0447  023D               	subwf	??_setCurrent,w
  7330  0448  1D03               	skipz
  7331  0449  2C4C               	goto	u2655
  7332  044A  3000               	movlw	0
  7333  044B  0247               	subwf	setCurrent@DACValue,w
  7334  044C                     u2655:
  7335  044C  1C03               	skipc
  7336  044D  2C4F               	goto	u2651
  7337  044E  2C50               	goto	u2650
  7338  044F                     u2651:
  7339  044F  2C55               	goto	l4068
  7340  0450                     u2650:
  7341  0450                     l4066:
  7342  0450  30FF               	movlw	255
  7343  0451  0020               	movlb	0	; select bank0
  7344  0452  00C7               	movwf	setCurrent@DACValue
  7345  0453  3000               	movlw	0
  7346  0454  00C8               	movwf	setCurrent@DACValue+1
  7347  0455                     l4068:
  7348                           
  7349                           ;main.c: 336:   if(DACValue < 0){DACValue = 0;}
  7350  0455  0020               	movlb	0	; select bank0
  7351  0456  1FC8               	btfss	setCurrent@DACValue+1,7
  7352  0457  2C59               	goto	u2661
  7353  0458  2C5A               	goto	u2660
  7354  0459                     u2661:
  7355  0459  2C5C               	goto	l4072
  7356  045A                     u2660:
  7357  045A                     l4070:
  7358  045A  01C7               	clrf	setCurrent@DACValue
  7359  045B  01C8               	clrf	setCurrent@DACValue+1
  7360  045C                     l4072:
  7361                           
  7362                           ;main.c: 337:   dac_value = (uint8_t)DACValue;
  7363  045C  0847               	movf	setCurrent@DACValue,w
  7364  045D  00BD               	movwf	??_setCurrent
  7365  045E  083D               	movf	??_setCurrent,w
  7366  045F  0021               	movlb	1	; select bank1
  7367  0460  00B1               	movwf	_dac_value^(0+128)
  7368  0461                     l695:
  7369  0461  0008               	return
  7370  0462                     __end_of_setCurrent:
  7371                           
  7372                           	psect	text10
  7373  0E4F                     __ptext10:	
  7374 ;; *************** function ___lmul *****************
  7375 ;; Defined at:
  7376 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul32.c"
  7377 ;; Parameters:    Size  Location     Type
  7378 ;;  multiplier      4    0[BANK0 ] unsigned long 
  7379 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  7380 ;; Auto vars:     Size  Location     Type
  7381 ;;  product         4    3[COMMON] unsigned long 
  7382 ;; Return value:  Size  Location     Type
  7383 ;;                  4    0[BANK0 ] unsigned long 
  7384 ;; Registers used:
  7385 ;;		wreg, status,2, status,0
  7386 ;; Tracked objects:
  7387 ;;		On entry : 0/0
  7388 ;;		On exit  : 0/0
  7389 ;;		Unchanged: 0/0
  7390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7391 ;;      Params:         0       8       0       0       0       0       0       0
  7392 ;;      Locals:         4       0       0       0       0       0       0       0
  7393 ;;      Temps:          0       0       0       0       0       0       0       0
  7394 ;;      Totals:         4       8       0       0       0       0       0       0
  7395 ;;Total ram usage:       12 bytes
  7396 ;; Hardware stack levels used: 1
  7397 ;; Hardware stack levels required when called: 4
  7398 ;; This function calls:
  7399 ;;		Nothing
  7400 ;; This function is called by:
  7401 ;;		_setCurrent
  7402 ;;		_setFrequency
  7403 ;; This function uses a non-reentrant model
  7404 ;;
  7405                           
  7406                           
  7407                           ;psect for function ___lmul
  7408  0E4F                     ___lmul:
  7409  0E4F                     l3868:	
  7410                           ;incstack = 0
  7411                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7412                           
  7413  0E4F  3000               	movlw	0
  7414  0E50  00F6               	movwf	___lmul@product+3
  7415  0E51  3000               	movlw	0
  7416  0E52  00F5               	movwf	___lmul@product+2
  7417  0E53  3000               	movlw	0
  7418  0E54  00F4               	movwf	___lmul@product+1
  7419  0E55  3000               	movlw	0
  7420  0E56  00F3               	movwf	___lmul@product
  7421  0E57                     l3870:
  7422  0E57  0020               	movlb	0	; select bank0
  7423  0E58  1C20               	btfss	___lmul@multiplier,0
  7424  0E59  2E5B               	goto	u2371
  7425  0E5A  2E5C               	goto	u2370
  7426  0E5B                     u2371:
  7427  0E5B  2E64               	goto	l3874
  7428  0E5C                     u2370:
  7429  0E5C                     l3872:
  7430  0E5C  0824               	movf	___lmul@multiplicand,w
  7431  0E5D  07F3               	addwf	___lmul@product,f
  7432  0E5E  0825               	movf	___lmul@multiplicand+1,w
  7433  0E5F  3DF4               	addwfc	___lmul@product+1,f
  7434  0E60  0826               	movf	___lmul@multiplicand+2,w
  7435  0E61  3DF5               	addwfc	___lmul@product+2,f
  7436  0E62  0827               	movf	___lmul@multiplicand+3,w
  7437  0E63  3DF6               	addwfc	___lmul@product+3,f
  7438  0E64                     l3874:
  7439  0E64  3001               	movlw	1
  7440  0E65                     u2385:
  7441  0E65  35A4               	lslf	___lmul@multiplicand,f
  7442  0E66  0DA5               	rlf	___lmul@multiplicand+1,f
  7443  0E67  0DA6               	rlf	___lmul@multiplicand+2,f
  7444  0E68  0DA7               	rlf	___lmul@multiplicand+3,f
  7445  0E69  0B89               	decfsz	9,f
  7446  0E6A  2E65               	goto	u2385
  7447  0E6B                     l3876:
  7448  0E6B  3001               	movlw	1
  7449  0E6C                     u2395:
  7450  0E6C  36A3               	lsrf	___lmul@multiplier+3,f
  7451  0E6D  0CA2               	rrf	___lmul@multiplier+2,f
  7452  0E6E  0CA1               	rrf	___lmul@multiplier+1,f
  7453  0E6F  0CA0               	rrf	___lmul@multiplier,f
  7454  0E70  0B89               	decfsz	9,f
  7455  0E71  2E6C               	goto	u2395
  7456  0E72  0823               	movf	___lmul@multiplier+3,w
  7457  0E73  0422               	iorwf	___lmul@multiplier+2,w
  7458  0E74  0421               	iorwf	___lmul@multiplier+1,w
  7459  0E75  0420               	iorwf	___lmul@multiplier,w
  7460  0E76  1D03               	skipz
  7461  0E77  2E79               	goto	u2401
  7462  0E78  2E7A               	goto	u2400
  7463  0E79                     u2401:
  7464  0E79  2E57               	goto	l3870
  7465  0E7A                     u2400:
  7466  0E7A                     l3878:
  7467  0E7A  0876               	movf	___lmul@product+3,w
  7468  0E7B  00A3               	movwf	?___lmul+3
  7469  0E7C  0875               	movf	___lmul@product+2,w
  7470  0E7D  00A2               	movwf	?___lmul+2
  7471  0E7E  0874               	movf	___lmul@product+1,w
  7472  0E7F  00A1               	movwf	?___lmul+1
  7473  0E80  0873               	movf	___lmul@product,w
  7474  0E81  00A0               	movwf	?___lmul
  7475  0E82                     l856:
  7476  0E82  0008               	return
  7477  0E83                     __end_of___lmul:
  7478                           
  7479                           	psect	text11
  7480  0744                     __ptext11:	
  7481 ;; *************** function ___awdiv *****************
  7482 ;; Defined at:
  7483 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
  7484 ;; Parameters:    Size  Location     Type
  7485 ;;  divisor         2    3[COMMON] int 
  7486 ;;  dividend        2    5[COMMON] int 
  7487 ;; Auto vars:     Size  Location     Type
  7488 ;;  quotient        2    2[BANK0 ] int 
  7489 ;;  sign            1    1[BANK0 ] unsigned char 
  7490 ;;  counter         1    0[BANK0 ] unsigned char 
  7491 ;; Return value:  Size  Location     Type
  7492 ;;                  2    3[COMMON] int 
  7493 ;; Registers used:
  7494 ;;		wreg, status,2, status,0
  7495 ;; Tracked objects:
  7496 ;;		On entry : 0/0
  7497 ;;		On exit  : 0/0
  7498 ;;		Unchanged: 0/0
  7499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7500 ;;      Params:         4       0       0       0       0       0       0       0
  7501 ;;      Locals:         0       4       0       0       0       0       0       0
  7502 ;;      Temps:          1       0       0       0       0       0       0       0
  7503 ;;      Totals:         5       4       0       0       0       0       0       0
  7504 ;;Total ram usage:        9 bytes
  7505 ;; Hardware stack levels used: 1
  7506 ;; Hardware stack levels required when called: 4
  7507 ;; This function calls:
  7508 ;;		Nothing
  7509 ;; This function is called by:
  7510 ;;		_setCurrent
  7511 ;; This function uses a non-reentrant model
  7512 ;;
  7513                           
  7514                           
  7515                           ;psect for function ___awdiv
  7516  0744                     ___awdiv:
  7517  0744                     l3922:	
  7518                           ;incstack = 0
  7519                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7520                           
  7521  0744  0020               	movlb	0	; select bank0
  7522  0745  01A1               	clrf	___awdiv@sign
  7523  0746                     l3924:
  7524  0746  1FF4               	btfss	___awdiv@divisor+1,7
  7525  0747  2F49               	goto	u2511
  7526  0748  2F4A               	goto	u2510
  7527  0749                     u2511:
  7528  0749  2F51               	goto	l3930
  7529  074A                     u2510:
  7530  074A                     l3926:
  7531  074A  09F3               	comf	___awdiv@divisor,f
  7532  074B  09F4               	comf	___awdiv@divisor+1,f
  7533  074C  0AF3               	incf	___awdiv@divisor,f
  7534  074D  1903               	skipnz
  7535  074E  0AF4               	incf	___awdiv@divisor+1,f
  7536  074F                     l3928:
  7537  074F  01A1               	clrf	___awdiv@sign
  7538  0750  0AA1               	incf	___awdiv@sign,f
  7539  0751                     l3930:
  7540  0751  1FF6               	btfss	___awdiv@dividend+1,7
  7541  0752  2F54               	goto	u2521
  7542  0753  2F55               	goto	u2520
  7543  0754                     u2521:
  7544  0754  2F5E               	goto	l3936
  7545  0755                     u2520:
  7546  0755                     l3932:
  7547  0755  09F5               	comf	___awdiv@dividend,f
  7548  0756  09F6               	comf	___awdiv@dividend+1,f
  7549  0757  0AF5               	incf	___awdiv@dividend,f
  7550  0758  1903               	skipnz
  7551  0759  0AF6               	incf	___awdiv@dividend+1,f
  7552  075A                     l3934:
  7553  075A  3001               	movlw	1
  7554  075B  00F7               	movwf	??___awdiv
  7555  075C  0877               	movf	??___awdiv,w
  7556  075D  06A1               	xorwf	___awdiv@sign,f
  7557  075E                     l3936:
  7558  075E  01A2               	clrf	___awdiv@quotient
  7559  075F  01A3               	clrf	___awdiv@quotient+1
  7560  0760                     l3938:
  7561  0760  0873               	movf	___awdiv@divisor,w
  7562  0761  0474               	iorwf	___awdiv@divisor+1,w
  7563  0762  1903               	btfsc	3,2
  7564  0763  2F65               	goto	u2531
  7565  0764  2F66               	goto	u2530
  7566  0765                     u2531:
  7567  0765  2F95               	goto	l3958
  7568  0766                     u2530:
  7569  0766                     l3940:
  7570  0766  01A0               	clrf	___awdiv@counter
  7571  0767  0AA0               	incf	___awdiv@counter,f
  7572  0768  2F72               	goto	l3946
  7573  0769                     l3942:
  7574  0769  3001               	movlw	1
  7575  076A                     u2545:
  7576  076A  35F3               	lslf	___awdiv@divisor,f
  7577  076B  0DF4               	rlf	___awdiv@divisor+1,f
  7578  076C  0B89               	decfsz	9,f
  7579  076D  2F6A               	goto	u2545
  7580  076E                     l3944:
  7581  076E  3001               	movlw	1
  7582  076F  00F7               	movwf	??___awdiv
  7583  0770  0877               	movf	??___awdiv,w
  7584  0771  07A0               	addwf	___awdiv@counter,f
  7585  0772                     l3946:
  7586  0772  1FF4               	btfss	___awdiv@divisor+1,7
  7587  0773  2F75               	goto	u2551
  7588  0774  2F76               	goto	u2550
  7589  0775                     u2551:
  7590  0775  2F69               	goto	l3942
  7591  0776                     u2550:
  7592  0776                     l3948:
  7593  0776  3001               	movlw	1
  7594  0777                     u2565:
  7595  0777  35A2               	lslf	___awdiv@quotient,f
  7596  0778  0DA3               	rlf	___awdiv@quotient+1,f
  7597  0779  0B89               	decfsz	9,f
  7598  077A  2F77               	goto	u2565
  7599  077B  0874               	movf	___awdiv@divisor+1,w
  7600  077C  0276               	subwf	___awdiv@dividend+1,w
  7601  077D  1D03               	skipz
  7602  077E  2F81               	goto	u2575
  7603  077F  0873               	movf	___awdiv@divisor,w
  7604  0780  0275               	subwf	___awdiv@dividend,w
  7605  0781                     u2575:
  7606  0781  1C03               	skipc
  7607  0782  2F84               	goto	u2571
  7608  0783  2F85               	goto	u2570
  7609  0784                     u2571:
  7610  0784  2F8A               	goto	l3954
  7611  0785                     u2570:
  7612  0785                     l3950:
  7613  0785  0873               	movf	___awdiv@divisor,w
  7614  0786  02F5               	subwf	___awdiv@dividend,f
  7615  0787  0874               	movf	___awdiv@divisor+1,w
  7616  0788  3BF6               	subwfb	___awdiv@dividend+1,f
  7617  0789                     l3952:
  7618  0789  1422               	bsf	___awdiv@quotient,0
  7619  078A                     l3954:
  7620  078A  3001               	movlw	1
  7621  078B                     u2585:
  7622  078B  36F4               	lsrf	___awdiv@divisor+1,f
  7623  078C  0CF3               	rrf	___awdiv@divisor,f
  7624  078D  0B89               	decfsz	9,f
  7625  078E  2F8B               	goto	u2585
  7626  078F                     l3956:
  7627  078F  3001               	movlw	1
  7628  0790  02A0               	subwf	___awdiv@counter,f
  7629  0791  1D03               	btfss	3,2
  7630  0792  2F94               	goto	u2591
  7631  0793  2F95               	goto	u2590
  7632  0794                     u2591:
  7633  0794  2F76               	goto	l3948
  7634  0795                     u2590:
  7635  0795                     l3958:
  7636  0795  0821               	movf	___awdiv@sign,w
  7637  0796  1903               	btfsc	3,2
  7638  0797  2F99               	goto	u2601
  7639  0798  2F9A               	goto	u2600
  7640  0799                     u2601:
  7641  0799  2F9F               	goto	l3962
  7642  079A                     u2600:
  7643  079A                     l3960:
  7644  079A  09A2               	comf	___awdiv@quotient,f
  7645  079B  09A3               	comf	___awdiv@quotient+1,f
  7646  079C  0AA2               	incf	___awdiv@quotient,f
  7647  079D  1903               	skipnz
  7648  079E  0AA3               	incf	___awdiv@quotient+1,f
  7649  079F                     l3962:
  7650  079F  0823               	movf	___awdiv@quotient+1,w
  7651  07A0  00F4               	movwf	?___awdiv+1
  7652  07A1  0822               	movf	___awdiv@quotient,w
  7653  07A2  00F3               	movwf	?___awdiv
  7654  07A3                     l995:
  7655  07A3  0008               	return
  7656  07A4                     __end_of___awdiv:
  7657                           
  7658                           	psect	text12
  7659  0F85                     __ptext12:	
  7660 ;; *************** function _selectSomething *****************
  7661 ;; Defined at:
  7662 ;;		line 263 in file "main.c"
  7663 ;; Parameters:    Size  Location     Type
  7664 ;;		None
  7665 ;; Auto vars:     Size  Location     Type
  7666 ;;		None
  7667 ;; Return value:  Size  Location     Type
  7668 ;;                  1    wreg      void 
  7669 ;; Registers used:
  7670 ;;		wreg, status,2, status,0, pclath, cstack
  7671 ;; Tracked objects:
  7672 ;;		On entry : 0/0
  7673 ;;		On exit  : 0/0
  7674 ;;		Unchanged: 0/0
  7675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7676 ;;      Params:         0       0       0       0       0       0       0       0
  7677 ;;      Locals:         0       0       0       0       0       0       0       0
  7678 ;;      Temps:          0       2       0       0       0       0       0       0
  7679 ;;      Totals:         0       2       0       0       0       0       0       0
  7680 ;;Total ram usage:        2 bytes
  7681 ;; Hardware stack levels used: 1
  7682 ;; Hardware stack levels required when called: 5
  7683 ;; This function calls:
  7684 ;;		_setLEDColor
  7685 ;; This function is called by:
  7686 ;;		_process_remote_command
  7687 ;; This function uses a non-reentrant model
  7688 ;;
  7689                           
  7690                           
  7691                           ;psect for function _selectSomething
  7692  0F85                     _selectSomething:
  7693  0F85                     l4000:	
  7694                           ;incstack = 0
  7695                           ; Regs used in _selectSomething: [wreg+status,2+status,0+pclath+cstack]
  7696                           
  7697                           
  7698                           ;main.c: 265:   setLEDColor(0, 180, 230);
  7699  0F85  30B4               	movlw	180
  7700  0F86  0020               	movlb	0	; select bank0
  7701  0F87  00A0               	movwf	??_selectSomething
  7702  0F88  0820               	movf	??_selectSomething,w
  7703  0F89  00F3               	movwf	setLEDColor@green
  7704  0F8A  30E6               	movlw	230
  7705  0F8B  00A1               	movwf	??_selectSomething+1
  7706  0F8C  0821               	movf	??_selectSomething+1,w
  7707  0F8D  00F4               	movwf	setLEDColor@blue
  7708  0F8E  3000               	movlw	0
  7709  0F8F  318B  23C1  318F   	fcall	_setLEDColor
  7710  0F92                     l4002:
  7711                           
  7712                           ;main.c: 266:   _delay((unsigned long)((500)*(4000000/4000.0)));
  7713  0F92  3003               	movlw	3
  7714  0F93  0020               	movlb	0	; select bank0
  7715  0F94  00A1               	movwf	??_selectSomething+1
  7716  0F95  308A               	movlw	138
  7717  0F96  00A0               	movwf	??_selectSomething
  7718  0F97  3055               	movlw	85
  7719  0F98                     u3087:
  7720  0F98  0B89               	decfsz	9,f
  7721  0F99  2F98               	goto	u3087
  7722  0F9A  0BA0               	decfsz	??_selectSomething,f
  7723  0F9B  2F98               	goto	u3087
  7724  0F9C  0BA1               	decfsz	??_selectSomething+1,f
  7725  0F9D  2F98               	goto	u3087
  7726  0F9E  3200               	nop2
  7727  0F9F                     l4004:
  7728                           
  7729                           ;main.c: 267:   setLEDColor(0, 0, 0);
  7730  0F9F  01F3               	clrf	setLEDColor@green
  7731  0FA0  01F4               	clrf	setLEDColor@blue
  7732  0FA1  3000               	movlw	0
  7733  0FA2  318B  23C1  318F   	fcall	_setLEDColor
  7734                           
  7735                           ;main.c: 268:   _delay((unsigned long)((500)*(4000000/4000.0)));
  7736  0FA5  3003               	movlw	3
  7737  0FA6  0020               	movlb	0	; select bank0
  7738  0FA7  00A1               	movwf	??_selectSomething+1
  7739  0FA8  308A               	movlw	138
  7740  0FA9  00A0               	movwf	??_selectSomething
  7741  0FAA  3055               	movlw	85
  7742  0FAB                     u3097:
  7743  0FAB  0B89               	decfsz	9,f
  7744  0FAC  2FAB               	goto	u3097
  7745  0FAD  0BA0               	decfsz	??_selectSomething,f
  7746  0FAE  2FAB               	goto	u3097
  7747  0FAF  0BA1               	decfsz	??_selectSomething+1,f
  7748  0FB0  2FAB               	goto	u3097
  7749  0FB1  3200               	nop2
  7750  0FB2                     l4006:
  7751                           
  7752                           ;main.c: 269:   setLEDColor(0, 180, 230);
  7753  0FB2  30B4               	movlw	180
  7754  0FB3  0020               	movlb	0	; select bank0
  7755  0FB4  00A0               	movwf	??_selectSomething
  7756  0FB5  0820               	movf	??_selectSomething,w
  7757  0FB6  00F3               	movwf	setLEDColor@green
  7758  0FB7  30E6               	movlw	230
  7759  0FB8  00A1               	movwf	??_selectSomething+1
  7760  0FB9  0821               	movf	??_selectSomething+1,w
  7761  0FBA  00F4               	movwf	setLEDColor@blue
  7762  0FBB  3000               	movlw	0
  7763  0FBC  318B  23C1  318F   	fcall	_setLEDColor
  7764  0FBF                     l4008:
  7765                           
  7766                           ;main.c: 270:   _delay((unsigned long)((500)*(4000000/4000.0)));
  7767  0FBF  3003               	movlw	3
  7768  0FC0  0020               	movlb	0	; select bank0
  7769  0FC1  00A1               	movwf	??_selectSomething+1
  7770  0FC2  308A               	movlw	138
  7771  0FC3  00A0               	movwf	??_selectSomething
  7772  0FC4  3055               	movlw	85
  7773  0FC5                     u3107:
  7774  0FC5  0B89               	decfsz	9,f
  7775  0FC6  2FC5               	goto	u3107
  7776  0FC7  0BA0               	decfsz	??_selectSomething,f
  7777  0FC8  2FC5               	goto	u3107
  7778  0FC9  0BA1               	decfsz	??_selectSomething+1,f
  7779  0FCA  2FC5               	goto	u3107
  7780  0FCB  3200               	nop2
  7781                           
  7782                           ;main.c: 271:   setLEDColor(0, 0, 0);
  7783  0FCC  01F3               	clrf	setLEDColor@green
  7784  0FCD  01F4               	clrf	setLEDColor@blue
  7785  0FCE  3000               	movlw	0
  7786  0FCF  318B  23C1  318F   	fcall	_setLEDColor
  7787  0FD2                     l4010:
  7788                           
  7789                           ;main.c: 272:   _delay((unsigned long)((500)*(4000000/4000.0)));
  7790  0FD2  3003               	movlw	3
  7791  0FD3  0020               	movlb	0	; select bank0
  7792  0FD4  00A1               	movwf	??_selectSomething+1
  7793  0FD5  308A               	movlw	138
  7794  0FD6  00A0               	movwf	??_selectSomething
  7795  0FD7  3055               	movlw	85
  7796  0FD8                     u3117:
  7797  0FD8  0B89               	decfsz	9,f
  7798  0FD9  2FD8               	goto	u3117
  7799  0FDA  0BA0               	decfsz	??_selectSomething,f
  7800  0FDB  2FD8               	goto	u3117
  7801  0FDC  0BA1               	decfsz	??_selectSomething+1,f
  7802  0FDD  2FD8               	goto	u3117
  7803  0FDE  3200               	nop2
  7804  0FDF                     l667:
  7805  0FDF  0008               	return
  7806  0FE0                     __end_of_selectSomething:
  7807                           
  7808                           	psect	text13
  7809  0CC6                     __ptext13:	
  7810 ;; *************** function _selectIncrease *****************
  7811 ;; Defined at:
  7812 ;;		line 291 in file "main.c"
  7813 ;; Parameters:    Size  Location     Type
  7814 ;;		None
  7815 ;; Auto vars:     Size  Location     Type
  7816 ;;		None
  7817 ;; Return value:  Size  Location     Type
  7818 ;;                  1    wreg      void 
  7819 ;; Registers used:
  7820 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7821 ;; Tracked objects:
  7822 ;;		On entry : 0/0
  7823 ;;		On exit  : 0/0
  7824 ;;		Unchanged: 0/0
  7825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7826 ;;      Params:         0       0       0       0       0       0       0       0
  7827 ;;      Locals:         0       0       0       0       0       0       0       0
  7828 ;;      Temps:          0       2       0       0       0       0       0       0
  7829 ;;      Totals:         0       2       0       0       0       0       0       0
  7830 ;;Total ram usage:        2 bytes
  7831 ;; Hardware stack levels used: 1
  7832 ;; Hardware stack levels required when called: 10
  7833 ;; This function calls:
  7834 ;;		_printf
  7835 ;;		_setLEDColor
  7836 ;; This function is called by:
  7837 ;;		_process_remote_command
  7838 ;; This function uses a non-reentrant model
  7839 ;;
  7840                           
  7841                           
  7842                           ;psect for function _selectIncrease
  7843  0CC6                     _selectIncrease:
  7844  0CC6                     l4030:	
  7845                           ;incstack = 0
  7846                           ; Regs used in _selectIncrease: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7847                           
  7848                           
  7849                           ;main.c: 292:   setLEDColor(0, 50, 255);
  7850  0CC6  3032               	movlw	50
  7851  0CC7  0020               	movlb	0	; select bank0
  7852  0CC8  00B9               	movwf	??_selectIncrease
  7853  0CC9  0839               	movf	??_selectIncrease,w
  7854  0CCA  00F3               	movwf	setLEDColor@green
  7855  0CCB  30FF               	movlw	255
  7856  0CCC  00BA               	movwf	??_selectIncrease+1
  7857  0CCD  083A               	movf	??_selectIncrease+1,w
  7858  0CCE  00F4               	movwf	setLEDColor@blue
  7859  0CCF  3000               	movlw	0
  7860  0CD0  318B  23C1  318C   	fcall	_setLEDColor
  7861  0CD3                     l4032:
  7862                           
  7863                           ;main.c: 293:   _delay((unsigned long)((100)*(4000000/4000.0)));
  7864  0CD3  3082               	movlw	130
  7865  0CD4  0020               	movlb	0	; select bank0
  7866  0CD5  00B9               	movwf	??_selectIncrease
  7867  0CD6  30DD               	movlw	221
  7868  0CD7                     u3127:
  7869  0CD7  0B89               	decfsz	9,f
  7870  0CD8  2CD7               	goto	u3127
  7871  0CD9  0BB9               	decfsz	??_selectIncrease,f
  7872  0CDA  2CD7               	goto	u3127
  7873  0CDB  3200               	nop2
  7874  0CDC                     l4034:
  7875                           
  7876                           ;main.c: 294:   setLEDColor(0, 0, 0);
  7877  0CDC  01F3               	clrf	setLEDColor@green
  7878  0CDD  01F4               	clrf	setLEDColor@blue
  7879  0CDE  3000               	movlw	0
  7880  0CDF  318B  23C1  318C   	fcall	_setLEDColor
  7881  0CE2                     l4036:
  7882                           
  7883                           ;main.c: 295:   printf("\n increase selected");
  7884  0CE2  3059               	movlw	low (STR_3| (0+32768))
  7885  0CE3  0020               	movlb	0	; select bank0
  7886  0CE4  00B5               	movwf	printf@fmt
  7887  0CE5  3088               	movlw	high (STR_3| (0+32768))
  7888  0CE6  00B6               	movwf	printf@fmt+1
  7889  0CE7  318B  2388  318C   	fcall	_printf
  7890  0CEA                     l676:
  7891  0CEA  0008               	return
  7892  0CEB                     __end_of_selectIncrease:
  7893                           
  7894                           	psect	text14
  7895  0CEB                     __ptext14:	
  7896 ;; *************** function _selectFrequencyValue *****************
  7897 ;; Defined at:
  7898 ;;		line 319 in file "main.c"
  7899 ;; Parameters:    Size  Location     Type
  7900 ;;		None
  7901 ;; Auto vars:     Size  Location     Type
  7902 ;;		None
  7903 ;; Return value:  Size  Location     Type
  7904 ;;                  1    wreg      void 
  7905 ;; Registers used:
  7906 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7907 ;; Tracked objects:
  7908 ;;		On entry : 0/0
  7909 ;;		On exit  : 0/0
  7910 ;;		Unchanged: 0/0
  7911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7912 ;;      Params:         0       0       0       0       0       0       0       0
  7913 ;;      Locals:         0       0       0       0       0       0       0       0
  7914 ;;      Temps:          0       2       0       0       0       0       0       0
  7915 ;;      Totals:         0       2       0       0       0       0       0       0
  7916 ;;Total ram usage:        2 bytes
  7917 ;; Hardware stack levels used: 1
  7918 ;; Hardware stack levels required when called: 10
  7919 ;; This function calls:
  7920 ;;		_printf
  7921 ;;		_setLEDColor
  7922 ;; This function is called by:
  7923 ;;		_process_remote_command
  7924 ;; This function uses a non-reentrant model
  7925 ;;
  7926                           
  7927                           
  7928                           ;psect for function _selectFrequencyValue
  7929  0CEB                     _selectFrequencyValue:
  7930  0CEB                     l4054:	
  7931                           ;incstack = 0
  7932                           ; Regs used in _selectFrequencyValue: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7933                           
  7934                           
  7935                           ;main.c: 320:     setLEDColor(100, 0, 255);
  7936  0CEB  01F3               	clrf	setLEDColor@green
  7937  0CEC  30FF               	movlw	255
  7938  0CED  0020               	movlb	0	; select bank0
  7939  0CEE  00B9               	movwf	??_selectFrequencyValue
  7940  0CEF  0839               	movf	??_selectFrequencyValue,w
  7941  0CF0  00F4               	movwf	setLEDColor@blue
  7942  0CF1  3064               	movlw	100
  7943  0CF2  318B  23C1  318C   	fcall	_setLEDColor
  7944  0CF5                     l4056:
  7945                           
  7946                           ;main.c: 321:     _delay((unsigned long)((500)*(4000000/4000.0)));
  7947  0CF5  3003               	movlw	3
  7948  0CF6  0020               	movlb	0	; select bank0
  7949  0CF7  00BA               	movwf	??_selectFrequencyValue+1
  7950  0CF8  308A               	movlw	138
  7951  0CF9  00B9               	movwf	??_selectFrequencyValue
  7952  0CFA  3055               	movlw	85
  7953  0CFB                     u3137:
  7954  0CFB  0B89               	decfsz	9,f
  7955  0CFC  2CFB               	goto	u3137
  7956  0CFD  0BB9               	decfsz	??_selectFrequencyValue,f
  7957  0CFE  2CFB               	goto	u3137
  7958  0CFF  0BBA               	decfsz	??_selectFrequencyValue+1,f
  7959  0D00  2CFB               	goto	u3137
  7960  0D01  3200               	nop2
  7961  0D02                     l4058:
  7962                           
  7963                           ;main.c: 322:     setLEDColor(0,0,0);
  7964  0D02  01F3               	clrf	setLEDColor@green
  7965  0D03  01F4               	clrf	setLEDColor@blue
  7966  0D04  3000               	movlw	0
  7967  0D05  318B  23C1  318C   	fcall	_setLEDColor
  7968  0D08                     l4060:
  7969                           
  7970                           ;main.c: 323:     printf("\n current value selected");
  7971  0D08  3000               	movlw	low (STR_6| (0+32768))
  7972  0D09  0020               	movlb	0	; select bank0
  7973  0D0A  00B5               	movwf	printf@fmt
  7974  0D0B  3088               	movlw	high (STR_6| (0+32768))
  7975  0D0C  00B6               	movwf	printf@fmt+1
  7976  0D0D  318B  2388  318C   	fcall	_printf
  7977  0D10                     l688:
  7978  0D10  0008               	return
  7979  0D11                     __end_of_selectFrequencyValue:
  7980                           
  7981                           	psect	text15
  7982  0D62                     __ptext15:	
  7983 ;; *************** function _selectFrequency *****************
  7984 ;; Defined at:
  7985 ;;		line 275 in file "main.c"
  7986 ;; Parameters:    Size  Location     Type
  7987 ;;		None
  7988 ;; Auto vars:     Size  Location     Type
  7989 ;;		None
  7990 ;; Return value:  Size  Location     Type
  7991 ;;                  1    wreg      void 
  7992 ;; Registers used:
  7993 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7994 ;; Tracked objects:
  7995 ;;		On entry : 0/0
  7996 ;;		On exit  : 0/0
  7997 ;;		Unchanged: 0/0
  7998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7999 ;;      Params:         0       0       0       0       0       0       0       0
  8000 ;;      Locals:         0       0       0       0       0       0       0       0
  8001 ;;      Temps:          0       2       0       0       0       0       0       0
  8002 ;;      Totals:         0       2       0       0       0       0       0       0
  8003 ;;Total ram usage:        2 bytes
  8004 ;; Hardware stack levels used: 1
  8005 ;; Hardware stack levels required when called: 10
  8006 ;; This function calls:
  8007 ;;		_printf
  8008 ;;		_setLEDColor
  8009 ;; This function is called by:
  8010 ;;		_process_remote_command
  8011 ;; This function uses a non-reentrant model
  8012 ;;
  8013                           
  8014                           
  8015                           ;psect for function _selectFrequency
  8016  0D62                     _selectFrequency:
  8017  0D62                     l4012:	
  8018                           ;incstack = 0
  8019                           ; Regs used in _selectFrequency: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8020                           
  8021                           
  8022                           ;main.c: 276:   interfaceState = STATE_FREQUENCY;
  8023  0D62  3002               	movlw	2
  8024  0D63  0020               	movlb	0	; select bank0
  8025  0D64  00B9               	movwf	??_selectFrequency
  8026  0D65  0839               	movf	??_selectFrequency,w
  8027  0D66  00F8               	movwf	_interfaceState
  8028  0D67                     l4014:
  8029                           
  8030                           ;main.c: 277:   setLEDColor(0, 150, 0);
  8031  0D67  3096               	movlw	150
  8032  0D68  00B9               	movwf	??_selectFrequency
  8033  0D69  0839               	movf	??_selectFrequency,w
  8034  0D6A  00F3               	movwf	setLEDColor@green
  8035  0D6B  01F4               	clrf	setLEDColor@blue
  8036  0D6C  3000               	movlw	0
  8037  0D6D  318B  23C1  318D   	fcall	_setLEDColor
  8038  0D70                     l4016:
  8039                           
  8040                           ;main.c: 278:   _delay((unsigned long)((1000)*(4000000/4000.0)));
  8041  0D70  3006               	movlw	6
  8042  0D71  0020               	movlb	0	; select bank0
  8043  0D72  00BA               	movwf	??_selectFrequency+1
  8044  0D73  3013               	movlw	19
  8045  0D74  00B9               	movwf	??_selectFrequency
  8046  0D75  30AD               	movlw	173
  8047  0D76                     u3147:
  8048  0D76  0B89               	decfsz	9,f
  8049  0D77  2D76               	goto	u3147
  8050  0D78  0BB9               	decfsz	??_selectFrequency,f
  8051  0D79  2D76               	goto	u3147
  8052  0D7A  0BBA               	decfsz	??_selectFrequency+1,f
  8053  0D7B  2D76               	goto	u3147
  8054  0D7C  3200               	nop2
  8055                           
  8056                           ;main.c: 279:   setLEDColor(0, 0, 0);
  8057  0D7D  01F3               	clrf	setLEDColor@green
  8058  0D7E  01F4               	clrf	setLEDColor@blue
  8059  0D7F  3000               	movlw	0
  8060  0D80  318B  23C1  318D   	fcall	_setLEDColor
  8061  0D83                     l4018:
  8062                           
  8063                           ;main.c: 280:   printf("\n Frequency selected");
  8064  0D83  3030               	movlw	low (STR_1| (0+32768))
  8065  0D84  0020               	movlb	0	; select bank0
  8066  0D85  00B5               	movwf	printf@fmt
  8067  0D86  3088               	movlw	high (STR_1| (0+32768))
  8068  0D87  00B6               	movwf	printf@fmt+1
  8069  0D88  318B  2388  318D   	fcall	_printf
  8070  0D8B                     l670:
  8071  0D8B  0008               	return
  8072  0D8C                     __end_of_selectFrequency:
  8073                           
  8074                           	psect	text16
  8075  0C7F                     __ptext16:	
  8076 ;; *************** function _selectDecrease *****************
  8077 ;; Defined at:
  8078 ;;		line 298 in file "main.c"
  8079 ;; Parameters:    Size  Location     Type
  8080 ;;		None
  8081 ;; Auto vars:     Size  Location     Type
  8082 ;;		None
  8083 ;; Return value:  Size  Location     Type
  8084 ;;                  1    wreg      void 
  8085 ;; Registers used:
  8086 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8087 ;; Tracked objects:
  8088 ;;		On entry : 0/0
  8089 ;;		On exit  : 0/0
  8090 ;;		Unchanged: 0/0
  8091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8092 ;;      Params:         0       0       0       0       0       0       0       0
  8093 ;;      Locals:         0       0       0       0       0       0       0       0
  8094 ;;      Temps:          0       1       0       0       0       0       0       0
  8095 ;;      Totals:         0       1       0       0       0       0       0       0
  8096 ;;Total ram usage:        1 bytes
  8097 ;; Hardware stack levels used: 1
  8098 ;; Hardware stack levels required when called: 10
  8099 ;; This function calls:
  8100 ;;		_printf
  8101 ;;		_setLEDColor
  8102 ;; This function is called by:
  8103 ;;		_process_remote_command
  8104 ;; This function uses a non-reentrant model
  8105 ;;
  8106                           
  8107                           
  8108                           ;psect for function _selectDecrease
  8109  0C7F                     _selectDecrease:
  8110  0C7F                     l4038:	
  8111                           ;incstack = 0
  8112                           ; Regs used in _selectDecrease: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8113                           
  8114                           
  8115                           ;main.c: 299:   setLEDColor(130, 160, 0);
  8116  0C7F  30A0               	movlw	160
  8117  0C80  0020               	movlb	0	; select bank0
  8118  0C81  00B9               	movwf	??_selectDecrease
  8119  0C82  0839               	movf	??_selectDecrease,w
  8120  0C83  00F3               	movwf	setLEDColor@green
  8121  0C84  01F4               	clrf	setLEDColor@blue
  8122  0C85  3082               	movlw	130
  8123  0C86  318B  23C1  318C   	fcall	_setLEDColor
  8124  0C89                     l4040:
  8125                           
  8126                           ;main.c: 300:   _delay((unsigned long)((100)*(4000000/4000.0)));
  8127  0C89  3082               	movlw	130
  8128  0C8A  0020               	movlb	0	; select bank0
  8129  0C8B  00B9               	movwf	??_selectDecrease
  8130  0C8C  30DD               	movlw	221
  8131  0C8D                     u3157:
  8132  0C8D  0B89               	decfsz	9,f
  8133  0C8E  2C8D               	goto	u3157
  8134  0C8F  0BB9               	decfsz	??_selectDecrease,f
  8135  0C90  2C8D               	goto	u3157
  8136  0C91  3200               	nop2
  8137  0C92                     l4042:
  8138                           
  8139                           ;main.c: 301:   setLEDColor(0, 0, 0);
  8140  0C92  01F3               	clrf	setLEDColor@green
  8141  0C93  01F4               	clrf	setLEDColor@blue
  8142  0C94  3000               	movlw	0
  8143  0C95  318B  23C1  318C   	fcall	_setLEDColor
  8144  0C98                     l4044:
  8145                           
  8146                           ;main.c: 302:   printf("\n decrease selected");
  8147  0C98  3045               	movlw	low (STR_4| (0+32768))
  8148  0C99  0020               	movlb	0	; select bank0
  8149  0C9A  00B5               	movwf	printf@fmt
  8150  0C9B  3088               	movlw	high (STR_4| (0+32768))
  8151  0C9C  00B6               	movwf	printf@fmt+1
  8152  0C9D  318B  2388  318C   	fcall	_printf
  8153  0CA0                     l679:
  8154  0CA0  0008               	return
  8155  0CA1                     __end_of_selectDecrease:
  8156                           
  8157                           	psect	text17
  8158  0D39                     __ptext17:	
  8159 ;; *************** function _selectCurrentValue *****************
  8160 ;; Defined at:
  8161 ;;		line 312 in file "main.c"
  8162 ;; Parameters:    Size  Location     Type
  8163 ;;		None
  8164 ;; Auto vars:     Size  Location     Type
  8165 ;;		None
  8166 ;; Return value:  Size  Location     Type
  8167 ;;                  1    wreg      void 
  8168 ;; Registers used:
  8169 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8170 ;; Tracked objects:
  8171 ;;		On entry : 0/0
  8172 ;;		On exit  : 0/0
  8173 ;;		Unchanged: 0/0
  8174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8175 ;;      Params:         0       0       0       0       0       0       0       0
  8176 ;;      Locals:         0       0       0       0       0       0       0       0
  8177 ;;      Temps:          0       2       0       0       0       0       0       0
  8178 ;;      Totals:         0       2       0       0       0       0       0       0
  8179 ;;Total ram usage:        2 bytes
  8180 ;; Hardware stack levels used: 1
  8181 ;; Hardware stack levels required when called: 10
  8182 ;; This function calls:
  8183 ;;		_printf
  8184 ;;		_setLEDColor
  8185 ;; This function is called by:
  8186 ;;		_process_remote_command
  8187 ;; This function uses a non-reentrant model
  8188 ;;
  8189                           
  8190                           
  8191                           ;psect for function _selectCurrentValue
  8192  0D39                     _selectCurrentValue:
  8193  0D39                     l4046:	
  8194                           ;incstack = 0
  8195                           ; Regs used in _selectCurrentValue: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8196                           
  8197                           
  8198                           ;main.c: 313:     setLEDColor(150, 70, 100);
  8199  0D39  3046               	movlw	70
  8200  0D3A  0020               	movlb	0	; select bank0
  8201  0D3B  00B9               	movwf	??_selectCurrentValue
  8202  0D3C  0839               	movf	??_selectCurrentValue,w
  8203  0D3D  00F3               	movwf	setLEDColor@green
  8204  0D3E  3064               	movlw	100
  8205  0D3F  00BA               	movwf	??_selectCurrentValue+1
  8206  0D40  083A               	movf	??_selectCurrentValue+1,w
  8207  0D41  00F4               	movwf	setLEDColor@blue
  8208  0D42  3096               	movlw	150
  8209  0D43  318B  23C1  318D   	fcall	_setLEDColor
  8210  0D46                     l4048:
  8211                           
  8212                           ;main.c: 314:     _delay((unsigned long)((500)*(4000000/4000.0)));
  8213  0D46  3003               	movlw	3
  8214  0D47  0020               	movlb	0	; select bank0
  8215  0D48  00BA               	movwf	??_selectCurrentValue+1
  8216  0D49  308A               	movlw	138
  8217  0D4A  00B9               	movwf	??_selectCurrentValue
  8218  0D4B  3055               	movlw	85
  8219  0D4C                     u3167:
  8220  0D4C  0B89               	decfsz	9,f
  8221  0D4D  2D4C               	goto	u3167
  8222  0D4E  0BB9               	decfsz	??_selectCurrentValue,f
  8223  0D4F  2D4C               	goto	u3167
  8224  0D50  0BBA               	decfsz	??_selectCurrentValue+1,f
  8225  0D51  2D4C               	goto	u3167
  8226  0D52  3200               	nop2
  8227  0D53                     l4050:
  8228                           
  8229                           ;main.c: 315:     setLEDColor(0,0,0);
  8230  0D53  01F3               	clrf	setLEDColor@green
  8231  0D54  01F4               	clrf	setLEDColor@blue
  8232  0D55  3000               	movlw	0
  8233  0D56  318B  23C1  318D   	fcall	_setLEDColor
  8234  0D59                     l4052:
  8235                           
  8236                           ;main.c: 316:     printf("\n current value selected");
  8237  0D59  3000               	movlw	low (STR_6| (0+32768))
  8238  0D5A  0020               	movlb	0	; select bank0
  8239  0D5B  00B5               	movwf	printf@fmt
  8240  0D5C  3088               	movlw	high (STR_6| (0+32768))
  8241  0D5D  00B6               	movwf	printf@fmt+1
  8242  0D5E  318B  2388  318D   	fcall	_printf
  8243  0D61                     l685:
  8244  0D61  0008               	return
  8245  0D62                     __end_of_selectCurrentValue:
  8246                           
  8247                           	psect	text18
  8248  0D11                     __ptext18:	
  8249 ;; *************** function _selectCurrent *****************
  8250 ;; Defined at:
  8251 ;;		line 283 in file "main.c"
  8252 ;; Parameters:    Size  Location     Type
  8253 ;;		None
  8254 ;; Auto vars:     Size  Location     Type
  8255 ;;		None
  8256 ;; Return value:  Size  Location     Type
  8257 ;;                  1    wreg      void 
  8258 ;; Registers used:
  8259 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8260 ;; Tracked objects:
  8261 ;;		On entry : 0/0
  8262 ;;		On exit  : 0/0
  8263 ;;		Unchanged: 0/0
  8264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8265 ;;      Params:         0       0       0       0       0       0       0       0
  8266 ;;      Locals:         0       0       0       0       0       0       0       0
  8267 ;;      Temps:          0       2       0       0       0       0       0       0
  8268 ;;      Totals:         0       2       0       0       0       0       0       0
  8269 ;;Total ram usage:        2 bytes
  8270 ;; Hardware stack levels used: 1
  8271 ;; Hardware stack levels required when called: 10
  8272 ;; This function calls:
  8273 ;;		_printf
  8274 ;;		_setLEDColor
  8275 ;; This function is called by:
  8276 ;;		_process_remote_command
  8277 ;; This function uses a non-reentrant model
  8278 ;;
  8279                           
  8280                           
  8281                           ;psect for function _selectCurrent
  8282  0D11                     _selectCurrent:
  8283  0D11                     l4020:	
  8284                           ;incstack = 0
  8285                           ; Regs used in _selectCurrent: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8286                           
  8287                           
  8288                           ;main.c: 284:   interfaceState = STATE_CURRENT;
  8289  0D11  01F8               	clrf	_interfaceState
  8290  0D12  0AF8               	incf	_interfaceState,f
  8291  0D13                     l4022:
  8292                           
  8293                           ;main.c: 285:   setLEDColor(0, 0, 255);
  8294  0D13  01F3               	clrf	setLEDColor@green
  8295  0D14  30FF               	movlw	255
  8296  0D15  0020               	movlb	0	; select bank0
  8297  0D16  00B9               	movwf	??_selectCurrent
  8298  0D17  0839               	movf	??_selectCurrent,w
  8299  0D18  00F4               	movwf	setLEDColor@blue
  8300  0D19  3000               	movlw	0
  8301  0D1A  318B  23C1  318D   	fcall	_setLEDColor
  8302  0D1D                     l4024:
  8303                           
  8304                           ;main.c: 286:   _delay((unsigned long)((1000)*(4000000/4000.0)));
  8305  0D1D  3006               	movlw	6
  8306  0D1E  0020               	movlb	0	; select bank0
  8307  0D1F  00BA               	movwf	??_selectCurrent+1
  8308  0D20  3013               	movlw	19
  8309  0D21  00B9               	movwf	??_selectCurrent
  8310  0D22  30AD               	movlw	173
  8311  0D23                     u3177:
  8312  0D23  0B89               	decfsz	9,f
  8313  0D24  2D23               	goto	u3177
  8314  0D25  0BB9               	decfsz	??_selectCurrent,f
  8315  0D26  2D23               	goto	u3177
  8316  0D27  0BBA               	decfsz	??_selectCurrent+1,f
  8317  0D28  2D23               	goto	u3177
  8318  0D29  3200               	nop2
  8319  0D2A                     l4026:
  8320                           
  8321                           ;main.c: 287:   setLEDColor(0, 0, 0);
  8322  0D2A  01F3               	clrf	setLEDColor@green
  8323  0D2B  01F4               	clrf	setLEDColor@blue
  8324  0D2C  3000               	movlw	0
  8325  0D2D  318B  23C1  318D   	fcall	_setLEDColor
  8326  0D30                     l4028:
  8327                           
  8328                           ;main.c: 288:   printf("\n current selected");
  8329  0D30  306D               	movlw	low (STR_2| (0+32768))
  8330  0D31  0020               	movlb	0	; select bank0
  8331  0D32  00B5               	movwf	printf@fmt
  8332  0D33  3088               	movlw	high (STR_2| (0+32768))
  8333  0D34  00B6               	movwf	printf@fmt+1
  8334  0D35  318B  2388  318D   	fcall	_printf
  8335  0D38                     l673:
  8336  0D38  0008               	return
  8337  0D39                     __end_of_selectCurrent:
  8338                           
  8339                           	psect	text19
  8340  0B88                     __ptext19:	
  8341 ;; *************** function _printf *****************
  8342 ;; Defined at:
  8343 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\printf.c"
  8344 ;; Parameters:    Size  Location     Type
  8345 ;;  fmt             2   21[BANK0 ] PTR const unsigned char 
  8346 ;;		 -> STR_7(25), STR_6(25), STR_5(23), STR_4(20), 
  8347 ;;		 -> STR_3(20), STR_2(19), STR_1(21), 
  8348 ;; Auto vars:     Size  Location     Type
  8349 ;;  ret             2    0        int 
  8350 ;;  ap              1   24[BANK0 ] PTR void [1]
  8351 ;;		 -> ?_printf(2), 
  8352 ;; Return value:  Size  Location     Type
  8353 ;;                  2   21[BANK0 ] int 
  8354 ;; Registers used:
  8355 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8356 ;; Tracked objects:
  8357 ;;		On entry : 0/0
  8358 ;;		On exit  : 0/0
  8359 ;;		Unchanged: 0/0
  8360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8361 ;;      Params:         0       2       0       0       0       0       0       0
  8362 ;;      Locals:         0       1       0       0       0       0       0       0
  8363 ;;      Temps:          0       1       0       0       0       0       0       0
  8364 ;;      Totals:         0       4       0       0       0       0       0       0
  8365 ;;Total ram usage:        4 bytes
  8366 ;; Hardware stack levels used: 1
  8367 ;; Hardware stack levels required when called: 9
  8368 ;; This function calls:
  8369 ;;		_vfprintf
  8370 ;; This function is called by:
  8371 ;;		_selectFrequency
  8372 ;;		_selectCurrent
  8373 ;;		_selectIncrease
  8374 ;;		_selectDecrease
  8375 ;;		_selectCurrentValue
  8376 ;;		_selectFrequencyValue
  8377 ;;		_selectResetValue
  8378 ;; This function uses a non-reentrant model
  8379 ;;
  8380                           
  8381                           
  8382                           ;psect for function _printf
  8383  0B88                     _printf:
  8384  0B88                     l3862:	
  8385                           ;incstack = 0
  8386                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8387                           
  8388  0B88  3037               	movlw	(low ((?_printf| 0+2)))& (0+255)
  8389  0B89  0020               	movlb	0	; select bank0
  8390  0B8A  00B7               	movwf	??_printf
  8391  0B8B  0837               	movf	??_printf,w
  8392  0B8C  00B8               	movwf	printf@ap
  8393  0B8D                     l3864:
  8394  0B8D  0836               	movf	printf@fmt+1,w
  8395  0B8E  00AE               	movwf	vfprintf@fmt+1
  8396  0B8F  0835               	movf	printf@fmt,w
  8397  0B90  00AD               	movwf	vfprintf@fmt
  8398  0B91  3038               	movlw	(low (printf@ap| 0))& (0+255)
  8399  0B92  00B7               	movwf	??_printf
  8400  0B93  0837               	movf	??_printf,w
  8401  0B94  00AF               	movwf	vfprintf@ap
  8402  0B95  3000               	movlw	0
  8403  0B96  318D  25B8  318B   	fcall	_vfprintf
  8404  0B99                     l1305:
  8405  0B99  0008               	return
  8406  0B9A                     __end_of_printf:
  8407                           
  8408                           	psect	text20
  8409  0DB8                     __ptext20:	
  8410 ;; *************** function _vfprintf *****************
  8411 ;; Defined at:
  8412 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  8413 ;; Parameters:    Size  Location     Type
  8414 ;;  fp              1    wreg     PTR struct _IO_FILE
  8415 ;;		 -> NULL(0), 
  8416 ;;  fmt             2   13[BANK0 ] PTR const unsigned char 
  8417 ;;		 -> STR_7(25), STR_6(25), STR_5(23), STR_4(20), 
  8418 ;;		 -> STR_3(20), STR_2(19), STR_1(21), 
  8419 ;;  ap              1   15[BANK0 ] PTR PTR void 
  8420 ;;		 -> printf@ap(1), 
  8421 ;; Auto vars:     Size  Location     Type
  8422 ;;  fp              1   18[BANK0 ] PTR struct _IO_FILE
  8423 ;;		 -> NULL(0), 
  8424 ;;  cfmt            2   19[BANK0 ] PTR unsigned char 
  8425 ;;		 -> STR_7(25), STR_6(25), STR_5(23), STR_4(20), 
  8426 ;;		 -> STR_3(20), STR_2(19), STR_1(21), 
  8427 ;; Return value:  Size  Location     Type
  8428 ;;                  2   13[BANK0 ] int 
  8429 ;; Registers used:
  8430 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8431 ;; Tracked objects:
  8432 ;;		On entry : 0/0
  8433 ;;		On exit  : 0/0
  8434 ;;		Unchanged: 0/0
  8435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8436 ;;      Params:         0       3       0       0       0       0       0       0
  8437 ;;      Locals:         0       3       0       0       0       0       0       0
  8438 ;;      Temps:          0       2       0       0       0       0       0       0
  8439 ;;      Totals:         0       8       0       0       0       0       0       0
  8440 ;;Total ram usage:        8 bytes
  8441 ;; Hardware stack levels used: 1
  8442 ;; Hardware stack levels required when called: 8
  8443 ;; This function calls:
  8444 ;;		_vfpfcnvrt
  8445 ;; This function is called by:
  8446 ;;		_printf
  8447 ;; This function uses a non-reentrant model
  8448 ;;
  8449                           
  8450                           
  8451                           ;psect for function _vfprintf
  8452  0DB8                     _vfprintf:
  8453                           
  8454                           ;incstack = 0
  8455                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8456                           ;vfprintf@fp stored from wreg
  8457  0DB8  0020               	movlb	0	; select bank0
  8458  0DB9  00B2               	movwf	vfprintf@fp
  8459  0DBA                     l3786:
  8460                           
  8461                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
  8462  0DBA  082E               	movf	vfprintf@fmt+1,w
  8463  0DBB  00B4               	movwf	vfprintf@cfmt+1
  8464  0DBC  082D               	movf	vfprintf@fmt,w
  8465  0DBD  00B3               	movwf	vfprintf@cfmt
  8466  0DBE                     l3788:
  8467                           
  8468                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
  8469  0DBE  0021               	movlb	1	; select bank1
  8470  0DBF  01A0               	clrf	_nout^(0+128)
  8471  0DC0  01A1               	clrf	(_nout+1)^(0+128)
  8472                           
  8473                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  8474  0DC1  2DD6               	goto	l3792
  8475  0DC2                     l3790:
  8476                           
  8477                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
  8478  0DC2  3033               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  8479  0DC3  00B0               	movwf	??_vfprintf
  8480  0DC4  0830               	movf	??_vfprintf,w
  8481  0DC5  00A5               	movwf	vfpfcnvrt@fmt
  8482  0DC6  082F               	movf	vfprintf@ap,w
  8483  0DC7  00B1               	movwf	??_vfprintf+1
  8484  0DC8  0831               	movf	??_vfprintf+1,w
  8485  0DC9  00A6               	movwf	vfpfcnvrt@ap
  8486  0DCA  0832               	movf	vfprintf@fp,w
  8487  0DCB  3185  2588  318D   	fcall	_vfpfcnvrt
  8488  0DCE  0020               	movlb	0	; select bank0
  8489  0DCF  0825               	movf	?_vfpfcnvrt,w
  8490  0DD0  0021               	movlb	1	; select bank1
  8491  0DD1  07A0               	addwf	_nout^(0+128),f
  8492  0DD2  0020               	movlb	0	; select bank0
  8493  0DD3  0826               	movf	?_vfpfcnvrt+1,w
  8494  0DD4  0021               	movlb	1	; select bank1
  8495  0DD5  3DA1               	addwfc	(_nout+1)^(0+128),f
  8496  0DD6                     l3792:
  8497                           
  8498                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  8499  0DD6  0020               	movlb	0	; select bank0
  8500  0DD7  0833               	movf	vfprintf@cfmt,w
  8501  0DD8  0084               	movwf	4
  8502  0DD9  0834               	movf	vfprintf@cfmt+1,w
  8503  0DDA  0085               	movwf	5
  8504  0DDB  0012               	moviw fsr0++
  8505  0DDC  1D03               	btfss	3,2
  8506  0DDD  2DDF               	goto	u2321
  8507  0DDE  2DE0               	goto	u2320
  8508  0DDF                     u2321:
  8509  0DDF  2DC2               	goto	l3790
  8510  0DE0                     u2320:
  8511  0DE0                     l3794:
  8512                           
  8513                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
  8514  0DE0  0021               	movlb	1	; select bank1
  8515  0DE1  0821               	movf	(_nout+1)^(0+128),w
  8516  0DE2  0020               	movlb	0	; select bank0
  8517  0DE3  00AE               	movwf	?_vfprintf+1
  8518  0DE4  0021               	movlb	1	; select bank1
  8519  0DE5  0820               	movf	_nout^(0+128),w
  8520  0DE6  0020               	movlb	0	; select bank0
  8521  0DE7  00AD               	movwf	?_vfprintf
  8522  0DE8                     l1344:
  8523  0DE8  0008               	return
  8524  0DE9                     __end_of_vfprintf:
  8525                           
  8526                           	psect	text21
  8527  0588                     __ptext21:	
  8528 ;; *************** function _vfpfcnvrt *****************
  8529 ;; Defined at:
  8530 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  8531 ;; Parameters:    Size  Location     Type
  8532 ;;  fp              1    wreg     PTR struct _IO_FILE
  8533 ;;		 -> NULL(0), 
  8534 ;;  fmt             1    5[BANK0 ] PTR PTR unsigned char 
  8535 ;;		 -> vfprintf@cfmt(2), 
  8536 ;;  ap              1    6[BANK0 ] PTR PTR void 
  8537 ;;		 -> printf@ap(1), 
  8538 ;; Auto vars:     Size  Location     Type
  8539 ;;  fp              1   12[BANK0 ] PTR struct _IO_FILE
  8540 ;;		 -> NULL(0), 
  8541 ;;  llu             8    0        unsigned long long 
  8542 ;;  ll              8    0        long long 
  8543 ;;  f               4    0        long long 
  8544 ;;  ct              3    0        unsigned char [3]
  8545 ;;  vp              2    0        PTR void 
  8546 ;;  i               2    0        int 
  8547 ;;  done            2    0        int 
  8548 ;;  cp              2    0        PTR unsigned char 
  8549 ;;  c               1    0        unsigned char 
  8550 ;; Return value:  Size  Location     Type
  8551 ;;                  2    5[BANK0 ] int 
  8552 ;; Registers used:
  8553 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8554 ;; Tracked objects:
  8555 ;;		On entry : 0/0
  8556 ;;		On exit  : 0/0
  8557 ;;		Unchanged: 0/0
  8558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8559 ;;      Params:         0       2       0       0       0       0       0       0
  8560 ;;      Locals:         0       1       0       0       0       0       0       0
  8561 ;;      Temps:          0       5       0       0       0       0       0       0
  8562 ;;      Totals:         0       8       0       0       0       0       0       0
  8563 ;;Total ram usage:        8 bytes
  8564 ;; Hardware stack levels used: 1
  8565 ;; Hardware stack levels required when called: 7
  8566 ;; This function calls:
  8567 ;;		_fputc
  8568 ;; This function is called by:
  8569 ;;		_vfprintf
  8570 ;; This function uses a non-reentrant model
  8571 ;;
  8572                           
  8573                           
  8574                           ;psect for function _vfpfcnvrt
  8575  0588                     _vfpfcnvrt:
  8576                           
  8577                           ;incstack = 0
  8578                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8579                           ;vfpfcnvrt@fp stored from wreg
  8580  0588  0020               	movlb	0	; select bank0
  8581  0589  00AC               	movwf	vfpfcnvrt@fp
  8582  058A                     l3730:
  8583                           
  8584                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.32\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          2\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
  8585  058A  0825               	movf	vfpfcnvrt@fmt,w
  8586  058B  0086               	movwf	6
  8587  058C  0187               	clrf	7
  8588  058D  3F40               	moviw [0]fsr1
  8589  058E  00A7               	movwf	??_vfpfcnvrt
  8590  058F  3F41               	moviw [1]fsr1
  8591  0590  00A8               	movwf	??_vfpfcnvrt+1
  8592  0591  0827               	movf	??_vfpfcnvrt,w
  8593  0592  0084               	movwf	4
  8594  0593  0828               	movf	??_vfpfcnvrt+1,w
  8595  0594  0085               	movwf	5
  8596  0595  0012               	moviw fsr0++
  8597  0596  3A25               	xorlw	37
  8598  0597  1D03               	btfss	3,2
  8599  0598  2D9A               	goto	u2301
  8600  0599  2D9B               	goto	u2300
  8601  059A                     u2301:
  8602  059A  2DE2               	goto	l3754
  8603  059B                     u2300:
  8604  059B                     l3732:
  8605                           
  8606                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
  8607  059B  0825               	movf	vfpfcnvrt@fmt,w
  8608  059C  0086               	movwf	6
  8609  059D  0187               	clrf	7
  8610  059E  3001               	movlw	1
  8611  059F  0781               	addwf	1,f
  8612  05A0  3141               	addfsr 1,1
  8613  05A1  1803               	skipnc
  8614  05A2  0A81               	incf	1,f
  8615  05A3                     l3734:
  8616                           
  8617                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
  8618  05A3  0021               	movlb	1	; select bank1
  8619  05A4  01A2               	clrf	_width^(0+128)
  8620  05A5  01A3               	clrf	(_width+1)^(0+128)
  8621  05A6  01A6               	clrf	_flags^(0+128)
  8622  05A7  01A7               	clrf	(_flags+1)^(0+128)
  8623  05A8                     l3736:
  8624                           
  8625                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
  8626  05A8  30FF               	movlw	255
  8627  05A9  00A4               	movwf	_prec^(0+128)
  8628  05AA  30FF               	movlw	255
  8629  05AB  00A5               	movwf	(_prec^(0+128)+1)
  8630  05AC                     l3738:
  8631                           
  8632                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  8633  05AC  0020               	movlb	0	; select bank0
  8634  05AD  0825               	movf	vfpfcnvrt@fmt,w
  8635  05AE  0086               	movwf	6
  8636  05AF  0187               	clrf	7
  8637  05B0  3F40               	moviw [0]fsr1
  8638  05B1  00A7               	movwf	??_vfpfcnvrt
  8639  05B2  3F41               	moviw [1]fsr1
  8640  05B3  00A8               	movwf	??_vfpfcnvrt+1
  8641  05B4  0827               	movf	??_vfpfcnvrt,w
  8642  05B5  0084               	movwf	4
  8643  05B6  0828               	movf	??_vfpfcnvrt+1,w
  8644  05B7  0085               	movwf	5
  8645  05B8  0012               	moviw fsr0++
  8646  05B9  3A25               	xorlw	37
  8647  05BA  1D03               	btfss	3,2
  8648  05BB  2DBD               	goto	u2311
  8649  05BC  2DBE               	goto	u2310
  8650  05BD                     u2311:
  8651  05BD  2DD7               	goto	l3748
  8652  05BE                     u2310:
  8653  05BE                     l3740:
  8654                           
  8655                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  8656  05BE  0825               	movf	vfpfcnvrt@fmt,w
  8657  05BF  0086               	movwf	6
  8658  05C0  0187               	clrf	7
  8659  05C1  3001               	movlw	1
  8660  05C2  0781               	addwf	1,f
  8661  05C3  3141               	addfsr 1,1
  8662  05C4  1803               	skipnc
  8663  05C5  0A81               	incf	1,f
  8664  05C6                     l3742:
  8665                           
  8666                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  8667  05C6  3025               	movlw	37
  8668  05C7  00F5               	movwf	fputc@c
  8669  05C8  3000               	movlw	0
  8670  05C9  00F6               	movwf	fputc@c+1
  8671  05CA  082C               	movf	vfpfcnvrt@fp,w
  8672  05CB  00A7               	movwf	??_vfpfcnvrt
  8673  05CC  0827               	movf	??_vfpfcnvrt,w
  8674  05CD  00F7               	movwf	fputc@fp
  8675  05CE  318E  26BF  3185   	fcall	_fputc
  8676  05D1                     l3744:
  8677                           
  8678                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  8679  05D1  3001               	movlw	1
  8680  05D2  0020               	movlb	0	; select bank0
  8681  05D3  00A5               	movwf	?_vfpfcnvrt
  8682  05D4  3000               	movlw	0
  8683  05D5  00A6               	movwf	?_vfpfcnvrt+1
  8684  05D6  2E05               	goto	l1338
  8685  05D7                     l3748:
  8686                           
  8687                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  8688  05D7  0825               	movf	vfpfcnvrt@fmt,w
  8689  05D8  0086               	movwf	6
  8690  05D9  0187               	clrf	7
  8691  05DA  3001               	movlw	1
  8692  05DB  0781               	addwf	1,f
  8693  05DC  3141               	addfsr 1,1
  8694  05DD  1803               	skipnc
  8695  05DE  0A81               	incf	1,f
  8696  05DF                     l3750:
  8697                           
  8698                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  8699  05DF  01A5               	clrf	?_vfpfcnvrt
  8700  05E0  01A6               	clrf	?_vfpfcnvrt+1
  8701  05E1  2E05               	goto	l1338
  8702  05E2                     l3754:
  8703                           
  8704                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  8705  05E2  0825               	movf	vfpfcnvrt@fmt,w
  8706  05E3  0086               	movwf	6
  8707  05E4  0187               	clrf	7
  8708  05E5  3F40               	moviw [0]fsr1
  8709  05E6  00A7               	movwf	??_vfpfcnvrt
  8710  05E7  3F41               	moviw [1]fsr1
  8711  05E8  00A8               	movwf	??_vfpfcnvrt+1
  8712  05E9  0827               	movf	??_vfpfcnvrt,w
  8713  05EA  0084               	movwf	4
  8714  05EB  0828               	movf	??_vfpfcnvrt+1,w
  8715  05EC  0085               	movwf	5
  8716  05ED  0800               	movf	0,w	;code access
  8717  05EE  00A9               	movwf	??_vfpfcnvrt+2
  8718  05EF  01AA               	clrf	??_vfpfcnvrt+3
  8719  05F0  0829               	movf	??_vfpfcnvrt+2,w
  8720  05F1  00F5               	movwf	fputc@c
  8721  05F2  082A               	movf	??_vfpfcnvrt+3,w
  8722  05F3  00F6               	movwf	fputc@c+1
  8723  05F4  082C               	movf	vfpfcnvrt@fp,w
  8724  05F5  00AB               	movwf	??_vfpfcnvrt+4
  8725  05F6  082B               	movf	??_vfpfcnvrt+4,w
  8726  05F7  00F7               	movwf	fputc@fp
  8727  05F8  318E  26BF  3185   	fcall	_fputc
  8728  05FB                     l3756:
  8729                           
  8730                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  8731  05FB  0020               	movlb	0	; select bank0
  8732  05FC  0825               	movf	vfpfcnvrt@fmt,w
  8733  05FD  0086               	movwf	6
  8734  05FE  0187               	clrf	7
  8735  05FF  3001               	movlw	1
  8736  0600  0781               	addwf	1,f
  8737  0601  3141               	addfsr 1,1
  8738  0602  1803               	skipnc
  8739  0603  0A81               	incf	1,f
  8740  0604  2DD1               	goto	l3744
  8741  0605                     l1338:
  8742  0605  0008               	return
  8743  0606                     __end_of_vfpfcnvrt:
  8744                           
  8745                           	psect	text22
  8746  0EBF                     __ptext22:	
  8747 ;; *************** function _fputc *****************
  8748 ;; Defined at:
  8749 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputc.c"
  8750 ;; Parameters:    Size  Location     Type
  8751 ;;  c               2    5[COMMON] int 
  8752 ;;  fp              1    7[COMMON] PTR struct _IO_FILE
  8753 ;;		 -> NULL(0), 
  8754 ;; Auto vars:     Size  Location     Type
  8755 ;;		None
  8756 ;; Return value:  Size  Location     Type
  8757 ;;                  2    5[COMMON] int 
  8758 ;; Registers used:
  8759 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8760 ;; Tracked objects:
  8761 ;;		On entry : 0/0
  8762 ;;		On exit  : 0/0
  8763 ;;		Unchanged: 0/0
  8764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8765 ;;      Params:         3       0       0       0       0       0       0       0
  8766 ;;      Locals:         0       0       0       0       0       0       0       0
  8767 ;;      Temps:          0       5       0       0       0       0       0       0
  8768 ;;      Totals:         3       5       0       0       0       0       0       0
  8769 ;;Total ram usage:        8 bytes
  8770 ;; Hardware stack levels used: 1
  8771 ;; Hardware stack levels required when called: 6
  8772 ;; This function calls:
  8773 ;;		_putch
  8774 ;; This function is called by:
  8775 ;;		_vfpfcnvrt
  8776 ;; This function uses a non-reentrant model
  8777 ;;
  8778                           
  8779                           
  8780                           ;psect for function _fputc
  8781  0EBF                     _fputc:
  8782  0EBF                     l3716:	
  8783                           ;incstack = 0
  8784                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8785                           
  8786  0EBF  0877               	movf	fputc@fp,w
  8787  0EC0  1903               	btfsc	3,2
  8788  0EC1  2EC3               	goto	u2261
  8789  0EC2  2EC4               	goto	u2260
  8790  0EC3                     u2261:
  8791  0EC3  2EC9               	goto	l3720
  8792  0EC4                     u2260:
  8793  0EC4                     l3718:
  8794  0EC4  0877               	movf	fputc@fp,w
  8795  0EC5  1D03               	btfss	3,2
  8796  0EC6  2EC8               	goto	u2271
  8797  0EC7  2EC9               	goto	u2270
  8798  0EC8                     u2271:
  8799  0EC8  2ECE               	goto	l3722
  8800  0EC9                     u2270:
  8801  0EC9                     l3720:
  8802  0EC9  0875               	movf	fputc@c,w
  8803  0ECA  318A  22FD  318E   	fcall	_putch
  8804  0ECD  2EFE               	goto	l1356
  8805  0ECE                     l3722:
  8806  0ECE  0877               	movf	fputc@fp,w
  8807  0ECF  3E03               	addlw	3
  8808  0ED0  0086               	movwf	6
  8809  0ED1  0187               	clrf	7
  8810  0ED2  0016               	moviw fsr1++
  8811  0ED3  0401               	iorwf	1,w
  8812  0ED4  1903               	btfsc	3,2
  8813  0ED5  2ED7               	goto	u2281
  8814  0ED6  2ED8               	goto	u2280
  8815  0ED7                     u2281:
  8816  0ED7  2EF6               	goto	l3726
  8817  0ED8                     u2280:
  8818  0ED8                     l3724:
  8819  0ED8  0877               	movf	fputc@fp,w
  8820  0ED9  3E03               	addlw	3
  8821  0EDA  0086               	movwf	6
  8822  0EDB  0187               	clrf	7
  8823  0EDC  3F40               	moviw [0]fsr1
  8824  0EDD  0020               	movlb	0	; select bank0
  8825  0EDE  00A0               	movwf	??_fputc
  8826  0EDF  3F41               	moviw [1]fsr1
  8827  0EE0  00A1               	movwf	??_fputc+1
  8828  0EE1  0A77               	incf	fputc@fp,w
  8829  0EE2  0086               	movwf	6
  8830  0EE3  0187               	clrf	7
  8831  0EE4  3F40               	moviw [0]fsr1
  8832  0EE5  00A2               	movwf	??_fputc+2
  8833  0EE6  3F41               	moviw [1]fsr1
  8834  0EE7  00A3               	movwf	??_fputc+3
  8835  0EE8  0823               	movf	??_fputc+3,w
  8836  0EE9  3A80               	xorlw	128
  8837  0EEA  00A4               	movwf	??_fputc+4
  8838  0EEB  0821               	movf	??_fputc+1,w
  8839  0EEC  3A80               	xorlw	128
  8840  0EED  0224               	subwf	??_fputc+4,w
  8841  0EEE  1D03               	skipz
  8842  0EEF  2EF2               	goto	u2295
  8843  0EF0  0820               	movf	??_fputc,w
  8844  0EF1  0222               	subwf	??_fputc+2,w
  8845  0EF2                     u2295:
  8846  0EF2  1803               	skipnc
  8847  0EF3  2EF5               	goto	u2291
  8848  0EF4  2EF6               	goto	u2290
  8849  0EF5                     u2291:
  8850  0EF5  2EFE               	goto	l1356
  8851  0EF6                     u2290:
  8852  0EF6                     l3726:
  8853  0EF6  0A77               	incf	fputc@fp,w
  8854  0EF7  0086               	movwf	6
  8855  0EF8  0187               	clrf	7
  8856  0EF9  3001               	movlw	1
  8857  0EFA  0781               	addwf	1,f
  8858  0EFB  3141               	addfsr 1,1
  8859  0EFC  1803               	skipnc
  8860  0EFD  0A81               	incf	1,f
  8861  0EFE                     l1356:
  8862  0EFE  0008               	return
  8863  0EFF                     __end_of_fputc:
  8864                           
  8865                           	psect	text23
  8866  0AFD                     __ptext23:	
  8867 ;; *************** function _putch *****************
  8868 ;; Defined at:
  8869 ;;		line 146 in file "mcc_generated_files/eusart.c"
  8870 ;; Parameters:    Size  Location     Type
  8871 ;;  txData          1    wreg     unsigned char 
  8872 ;; Auto vars:     Size  Location     Type
  8873 ;;  txData          1    4[COMMON] unsigned char 
  8874 ;; Return value:  Size  Location     Type
  8875 ;;                  1    wreg      void 
  8876 ;; Registers used:
  8877 ;;		wreg, status,2, status,0, pclath, cstack
  8878 ;; Tracked objects:
  8879 ;;		On entry : 0/0
  8880 ;;		On exit  : 0/0
  8881 ;;		Unchanged: 0/0
  8882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8883 ;;      Params:         0       0       0       0       0       0       0       0
  8884 ;;      Locals:         1       0       0       0       0       0       0       0
  8885 ;;      Temps:          0       0       0       0       0       0       0       0
  8886 ;;      Totals:         1       0       0       0       0       0       0       0
  8887 ;;Total ram usage:        1 bytes
  8888 ;; Hardware stack levels used: 1
  8889 ;; Hardware stack levels required when called: 5
  8890 ;; This function calls:
  8891 ;;		_EUSART_Write
  8892 ;; This function is called by:
  8893 ;;		_fputc
  8894 ;; This function uses a non-reentrant model
  8895 ;;
  8896                           
  8897                           
  8898                           ;psect for function _putch
  8899  0AFD                     _putch:
  8900                           
  8901                           ;incstack = 0
  8902                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  8903                           ;putch@txData stored from wreg
  8904  0AFD  00F4               	movwf	putch@txData
  8905  0AFE                     l3714:
  8906                           
  8907                           ;mcc_generated_files/eusart.c: 146: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 147: {;mcc_generated_files/eusart.c: 148:     EUSART_Write(txData);
  8908  0AFE  0874               	movf	putch@txData,w
  8909  0AFF  318B  2326  318A   	fcall	_EUSART_Write
  8910  0B02                     l231:
  8911  0B02  0008               	return
  8912  0B03                     __end_of_putch:
  8913                           
  8914                           	psect	text24
  8915  0B26                     __ptext24:	
  8916 ;; *************** function _EUSART_Write *****************
  8917 ;; Defined at:
  8918 ;;		line 132 in file "mcc_generated_files/eusart.c"
  8919 ;; Parameters:    Size  Location     Type
  8920 ;;  txData          1    wreg     unsigned char 
  8921 ;; Auto vars:     Size  Location     Type
  8922 ;;  txData          1    3[COMMON] unsigned char 
  8923 ;; Return value:  Size  Location     Type
  8924 ;;                  1    wreg      void 
  8925 ;; Registers used:
  8926 ;;		wreg
  8927 ;; Tracked objects:
  8928 ;;		On entry : 0/0
  8929 ;;		On exit  : 0/0
  8930 ;;		Unchanged: 0/0
  8931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8932 ;;      Params:         0       0       0       0       0       0       0       0
  8933 ;;      Locals:         1       0       0       0       0       0       0       0
  8934 ;;      Temps:          0       0       0       0       0       0       0       0
  8935 ;;      Totals:         1       0       0       0       0       0       0       0
  8936 ;;Total ram usage:        1 bytes
  8937 ;; Hardware stack levels used: 1
  8938 ;; Hardware stack levels required when called: 4
  8939 ;; This function calls:
  8940 ;;		Nothing
  8941 ;; This function is called by:
  8942 ;;		_putch
  8943 ;; This function uses a non-reentrant model
  8944 ;;
  8945                           
  8946                           
  8947                           ;psect for function _EUSART_Write
  8948  0B26                     _EUSART_Write:
  8949                           
  8950                           ;incstack = 0
  8951                           ; Regs used in _EUSART_Write: [wreg]
  8952                           ;EUSART_Write@txData stored from wreg
  8953  0B26  00F3               	movwf	EUSART_Write@txData
  8954  0B27                     l3710:
  8955  0B27                     l222:	
  8956                           ;mcc_generated_files/eusart.c: 135:     {;mcc_generated_files/eusart.c: 136:     }
  8957                           
  8958                           
  8959                           ;mcc_generated_files/eusart.c: 134:     while(0 == PIR1bits.TXIF)
  8960  0B27  0020               	movlb	0	; select bank0
  8961  0B28  1E11               	btfss	17,4	;volatile
  8962  0B29  2B2B               	goto	u2251
  8963  0B2A  2B2C               	goto	u2250
  8964  0B2B                     u2251:
  8965  0B2B  2B27               	goto	l222
  8966  0B2C                     u2250:
  8967  0B2C                     l3712:
  8968                           
  8969                           ;mcc_generated_files/eusart.c: 138:     TX1REG = txData;
  8970  0B2C  0873               	movf	EUSART_Write@txData,w
  8971  0B2D  0023               	movlb	3	; select bank3
  8972  0B2E  009A               	movwf	26	;volatile
  8973  0B2F                     l225:
  8974  0B2F  0008               	return
  8975  0B30                     __end_of_EUSART_Write:
  8976                           
  8977                           	psect	text25
  8978  0E1C                     __ptext25:	
  8979 ;; *************** function _battery_voltage *****************
  8980 ;; Defined at:
  8981 ;;		line 148 in file "main.c"
  8982 ;; Parameters:    Size  Location     Type
  8983 ;;		None
  8984 ;; Auto vars:     Size  Location     Type
  8985 ;;		None
  8986 ;; Return value:  Size  Location     Type
  8987 ;;                  2   23[BANK0 ] short 
  8988 ;; Registers used:
  8989 ;;		wreg, status,2, status,0, pclath, cstack
  8990 ;; Tracked objects:
  8991 ;;		On entry : 0/0
  8992 ;;		On exit  : 0/0
  8993 ;;		Unchanged: 0/0
  8994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8995 ;;      Params:         0       2       0       0       0       0       0       0
  8996 ;;      Locals:         0       0       0       0       0       0       0       0
  8997 ;;      Temps:          0       0       0       0       0       0       0       0
  8998 ;;      Totals:         0       2       0       0       0       0       0       0
  8999 ;;Total ram usage:        2 bytes
  9000 ;; Hardware stack levels used: 1
  9001 ;; Hardware stack levels required when called: 5
  9002 ;; This function calls:
  9003 ;;		___aldiv
  9004 ;; This function is called by:
  9005 ;;		_process_remote_command
  9006 ;;		_main
  9007 ;; This function uses a non-reentrant model
  9008 ;;
  9009                           
  9010                           
  9011                           ;psect for function _battery_voltage
  9012  0E1C                     _battery_voltage:
  9013  0E1C                     l3994:	
  9014                           ;incstack = 0
  9015                           ; Regs used in _battery_voltage: [wreg+status,2+status,0+pclath+cstack]
  9016                           
  9017                           
  9018                           ;main.c: 150:   FVRCON = 0b10000001;
  9019  0E1C  3081               	movlw	129
  9020  0E1D  0022               	movlb	2	; select bank2
  9021  0E1E  0097               	movwf	23	;volatile
  9022                           
  9023                           ;main.c: 151:   ADCON0 = 0b01111101;
  9024  0E1F  307D               	movlw	125
  9025  0E20  0021               	movlb	1	; select bank1
  9026  0E21  009D               	movwf	29	;volatile
  9027                           
  9028                           ;main.c: 152:   ADCON1 = 0b10010000;
  9029  0E22  3090               	movlw	144
  9030  0E23  009E               	movwf	30	;volatile
  9031  0E24                     l642:	
  9032                           ;main.c: 153:   while(!FVRCONbits.FVRRDY){ }
  9033                           
  9034  0E24  0022               	movlb	2	; select bank2
  9035  0E25  1F17               	btfss	23,6	;volatile
  9036  0E26  2E28               	goto	u2621
  9037  0E27  2E29               	goto	u2620
  9038  0E28                     u2621:
  9039  0E28  2E24               	goto	l642
  9040  0E29                     u2620:
  9041  0E29                     l644:
  9042                           
  9043                           ;main.c: 154:   __nop();
  9044  0E29  0000               	nop
  9045                           
  9046                           ;main.c: 155:   __nop();
  9047  0E2A  0000               	nop
  9048                           
  9049                           ;main.c: 156:   __nop();
  9050  0E2B  0000               	nop
  9051                           
  9052                           ;main.c: 157:   __nop();
  9053  0E2C  0000               	nop
  9054                           
  9055                           ;main.c: 158:   __nop();
  9056  0E2D  0000               	nop
  9057                           
  9058                           ;main.c: 159:   ADCON0bits.GO_nDONE = 1;
  9059  0E2E  0021               	movlb	1	; select bank1
  9060  0E2F  149D               	bsf	29,1	;volatile
  9061  0E30                     l645:	
  9062                           ;main.c: 160:   while(ADCON0bits.GO_nDONE){ }
  9063                           
  9064  0E30  189D               	btfsc	29,1	;volatile
  9065  0E31  2E33               	goto	u2631
  9066  0E32  2E34               	goto	u2630
  9067  0E33                     u2631:
  9068  0E33  2E30               	goto	l645
  9069  0E34                     u2630:
  9070  0E34                     l647:
  9071                           
  9072                           ;main.c: 161:   ADCON0bits.ADON = 0;
  9073  0E34  101D               	bcf	29,0	;volatile
  9074  0E35                     l3996:
  9075                           
  9076                           ;main.c: 166:   return 1047552L / ADRES;
  9077  0E35  081B               	movf	27,w	;volatile
  9078  0E36  0020               	movlb	0	; select bank0
  9079  0E37  00A8               	movwf	___aldiv@divisor
  9080  0E38  0021               	movlb	1	; select bank1
  9081  0E39  081C               	movf	28,w	;volatile
  9082  0E3A  0020               	movlb	0	; select bank0
  9083  0E3B  00A9               	movwf	___aldiv@divisor+1
  9084  0E3C  01AA               	clrf	___aldiv@divisor+2
  9085  0E3D  01AB               	clrf	___aldiv@divisor+3
  9086  0E3E  3000               	movlw	0
  9087  0E3F  00AF               	movwf	___aldiv@dividend+3
  9088  0E40  300F               	movlw	15
  9089  0E41  00AE               	movwf	___aldiv@dividend+2
  9090  0E42  30FC               	movlw	252
  9091  0E43  00AD               	movwf	___aldiv@dividend+1
  9092  0E44  3000               	movlw	0
  9093  0E45  00AC               	movwf	___aldiv@dividend
  9094  0E46  3184  24F8  318E   	fcall	___aldiv
  9095  0E49  0020               	movlb	0	; select bank0
  9096  0E4A  0829               	movf	?___aldiv+1,w
  9097  0E4B  00B8               	movwf	?_battery_voltage+1
  9098  0E4C  0828               	movf	?___aldiv,w
  9099  0E4D  00B7               	movwf	?_battery_voltage
  9100  0E4E                     l648:
  9101  0E4E  0008               	return
  9102  0E4F                     __end_of_battery_voltage:
  9103                           
  9104                           	psect	text26
  9105  04F8                     __ptext26:	
  9106 ;; *************** function ___aldiv *****************
  9107 ;; Defined at:
  9108 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aldiv.c"
  9109 ;; Parameters:    Size  Location     Type
  9110 ;;  divisor         4    8[BANK0 ] long 
  9111 ;;  dividend        4   12[BANK0 ] long 
  9112 ;; Auto vars:     Size  Location     Type
  9113 ;;  quotient        4   19[BANK0 ] long 
  9114 ;;  sign            1   18[BANK0 ] unsigned char 
  9115 ;;  counter         1   17[BANK0 ] unsigned char 
  9116 ;; Return value:  Size  Location     Type
  9117 ;;                  4    8[BANK0 ] long 
  9118 ;; Registers used:
  9119 ;;		wreg, status,2, status,0
  9120 ;; Tracked objects:
  9121 ;;		On entry : 0/0
  9122 ;;		On exit  : 0/0
  9123 ;;		Unchanged: 0/0
  9124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9125 ;;      Params:         0       8       0       0       0       0       0       0
  9126 ;;      Locals:         0       6       0       0       0       0       0       0
  9127 ;;      Temps:          0       1       0       0       0       0       0       0
  9128 ;;      Totals:         0      15       0       0       0       0       0       0
  9129 ;;Total ram usage:       15 bytes
  9130 ;; Hardware stack levels used: 1
  9131 ;; Hardware stack levels required when called: 4
  9132 ;; This function calls:
  9133 ;;		Nothing
  9134 ;; This function is called by:
  9135 ;;		_battery_voltage
  9136 ;;		_setCurrent
  9137 ;;		_setFrequency
  9138 ;; This function uses a non-reentrant model
  9139 ;;
  9140                           
  9141                           
  9142                           ;psect for function ___aldiv
  9143  04F8                     ___aldiv:
  9144  04F8                     l3882:	
  9145                           ;incstack = 0
  9146                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9147                           
  9148  04F8  0020               	movlb	0	; select bank0
  9149  04F9  01B2               	clrf	___aldiv@sign
  9150  04FA                     l3884:
  9151  04FA  1FAB               	btfss	___aldiv@divisor+3,7
  9152  04FB  2CFD               	goto	u2411
  9153  04FC  2CFE               	goto	u2410
  9154  04FD                     u2411:
  9155  04FD  2D0B               	goto	l907
  9156  04FE                     u2410:
  9157  04FE                     l3886:
  9158  04FE  09A8               	comf	___aldiv@divisor,f
  9159  04FF  09A9               	comf	___aldiv@divisor+1,f
  9160  0500  09AA               	comf	___aldiv@divisor+2,f
  9161  0501  09AB               	comf	___aldiv@divisor+3,f
  9162  0502  0AA8               	incf	___aldiv@divisor,f
  9163  0503  1903               	skipnz
  9164  0504  0AA9               	incf	___aldiv@divisor+1,f
  9165  0505  1903               	skipnz
  9166  0506  0AAA               	incf	___aldiv@divisor+2,f
  9167  0507  1903               	skipnz
  9168  0508  0AAB               	incf	___aldiv@divisor+3,f
  9169  0509  01B2               	clrf	___aldiv@sign
  9170  050A  0AB2               	incf	___aldiv@sign,f
  9171  050B                     l907:
  9172  050B  1FAF               	btfss	___aldiv@dividend+3,7
  9173  050C  2D0E               	goto	u2421
  9174  050D  2D0F               	goto	u2420
  9175  050E                     u2421:
  9176  050E  2D1E               	goto	l3892
  9177  050F                     u2420:
  9178  050F                     l3888:
  9179  050F  09AC               	comf	___aldiv@dividend,f
  9180  0510  09AD               	comf	___aldiv@dividend+1,f
  9181  0511  09AE               	comf	___aldiv@dividend+2,f
  9182  0512  09AF               	comf	___aldiv@dividend+3,f
  9183  0513  0AAC               	incf	___aldiv@dividend,f
  9184  0514  1903               	skipnz
  9185  0515  0AAD               	incf	___aldiv@dividend+1,f
  9186  0516  1903               	skipnz
  9187  0517  0AAE               	incf	___aldiv@dividend+2,f
  9188  0518  1903               	skipnz
  9189  0519  0AAF               	incf	___aldiv@dividend+3,f
  9190  051A                     l3890:
  9191  051A  3001               	movlw	1
  9192  051B  00B0               	movwf	??___aldiv
  9193  051C  0830               	movf	??___aldiv,w
  9194  051D  06B2               	xorwf	___aldiv@sign,f
  9195  051E                     l3892:
  9196  051E  3000               	movlw	0
  9197  051F  00B6               	movwf	___aldiv@quotient+3
  9198  0520  3000               	movlw	0
  9199  0521  00B5               	movwf	___aldiv@quotient+2
  9200  0522  3000               	movlw	0
  9201  0523  00B4               	movwf	___aldiv@quotient+1
  9202  0524  3000               	movlw	0
  9203  0525  00B3               	movwf	___aldiv@quotient
  9204  0526                     l3894:
  9205  0526  082B               	movf	___aldiv@divisor+3,w
  9206  0527  042A               	iorwf	___aldiv@divisor+2,w
  9207  0528  0429               	iorwf	___aldiv@divisor+1,w
  9208  0529  0428               	iorwf	___aldiv@divisor,w
  9209  052A  1903               	skipnz
  9210  052B  2D2D               	goto	u2431
  9211  052C  2D2E               	goto	u2430
  9212  052D                     u2431:
  9213  052D  2D6F               	goto	l3914
  9214  052E                     u2430:
  9215  052E                     l3896:
  9216  052E  01B1               	clrf	___aldiv@counter
  9217  052F  0AB1               	incf	___aldiv@counter,f
  9218  0530  2D3C               	goto	l3900
  9219  0531                     l3898:
  9220  0531  3001               	movlw	1
  9221  0532                     u2445:
  9222  0532  35A8               	lslf	___aldiv@divisor,f
  9223  0533  0DA9               	rlf	___aldiv@divisor+1,f
  9224  0534  0DAA               	rlf	___aldiv@divisor+2,f
  9225  0535  0DAB               	rlf	___aldiv@divisor+3,f
  9226  0536  0B89               	decfsz	9,f
  9227  0537  2D32               	goto	u2445
  9228  0538  3001               	movlw	1
  9229  0539  00B0               	movwf	??___aldiv
  9230  053A  0830               	movf	??___aldiv,w
  9231  053B  07B1               	addwf	___aldiv@counter,f
  9232  053C                     l3900:
  9233  053C  1FAB               	btfss	___aldiv@divisor+3,7
  9234  053D  2D3F               	goto	u2451
  9235  053E  2D40               	goto	u2450
  9236  053F                     u2451:
  9237  053F  2D31               	goto	l3898
  9238  0540                     u2450:
  9239  0540                     l3902:
  9240  0540  3001               	movlw	1
  9241  0541                     u2465:
  9242  0541  35B3               	lslf	___aldiv@quotient,f
  9243  0542  0DB4               	rlf	___aldiv@quotient+1,f
  9244  0543  0DB5               	rlf	___aldiv@quotient+2,f
  9245  0544  0DB6               	rlf	___aldiv@quotient+3,f
  9246  0545  0B89               	decfsz	9,f
  9247  0546  2D41               	goto	u2465
  9248  0547                     l3904:
  9249  0547  082B               	movf	___aldiv@divisor+3,w
  9250  0548  022F               	subwf	___aldiv@dividend+3,w
  9251  0549  1D03               	skipz
  9252  054A  2D55               	goto	u2475
  9253  054B  082A               	movf	___aldiv@divisor+2,w
  9254  054C  022E               	subwf	___aldiv@dividend+2,w
  9255  054D  1D03               	skipz
  9256  054E  2D55               	goto	u2475
  9257  054F  0829               	movf	___aldiv@divisor+1,w
  9258  0550  022D               	subwf	___aldiv@dividend+1,w
  9259  0551  1D03               	skipz
  9260  0552  2D55               	goto	u2475
  9261  0553  0828               	movf	___aldiv@divisor,w
  9262  0554  022C               	subwf	___aldiv@dividend,w
  9263  0555                     u2475:
  9264  0555  1C03               	skipc
  9265  0556  2D58               	goto	u2471
  9266  0557  2D59               	goto	u2470
  9267  0558                     u2471:
  9268  0558  2D62               	goto	l3910
  9269  0559                     u2470:
  9270  0559                     l3906:
  9271  0559  0828               	movf	___aldiv@divisor,w
  9272  055A  02AC               	subwf	___aldiv@dividend,f
  9273  055B  0829               	movf	___aldiv@divisor+1,w
  9274  055C  3BAD               	subwfb	___aldiv@dividend+1,f
  9275  055D  082A               	movf	___aldiv@divisor+2,w
  9276  055E  3BAE               	subwfb	___aldiv@dividend+2,f
  9277  055F  082B               	movf	___aldiv@divisor+3,w
  9278  0560  3BAF               	subwfb	___aldiv@dividend+3,f
  9279  0561                     l3908:
  9280  0561  1433               	bsf	___aldiv@quotient,0
  9281  0562                     l3910:
  9282  0562  3001               	movlw	1
  9283  0563                     u2485:
  9284  0563  36AB               	lsrf	___aldiv@divisor+3,f
  9285  0564  0CAA               	rrf	___aldiv@divisor+2,f
  9286  0565  0CA9               	rrf	___aldiv@divisor+1,f
  9287  0566  0CA8               	rrf	___aldiv@divisor,f
  9288  0567  0B89               	decfsz	9,f
  9289  0568  2D63               	goto	u2485
  9290  0569                     l3912:
  9291  0569  3001               	movlw	1
  9292  056A  02B1               	subwf	___aldiv@counter,f
  9293  056B  1D03               	btfss	3,2
  9294  056C  2D6E               	goto	u2491
  9295  056D  2D6F               	goto	u2490
  9296  056E                     u2491:
  9297  056E  2D40               	goto	l3902
  9298  056F                     u2490:
  9299  056F                     l3914:
  9300  056F  0832               	movf	___aldiv@sign,w
  9301  0570  1903               	btfsc	3,2
  9302  0571  2D73               	goto	u2501
  9303  0572  2D74               	goto	u2500
  9304  0573                     u2501:
  9305  0573  2D7F               	goto	l3918
  9306  0574                     u2500:
  9307  0574                     l3916:
  9308  0574  09B3               	comf	___aldiv@quotient,f
  9309  0575  09B4               	comf	___aldiv@quotient+1,f
  9310  0576  09B5               	comf	___aldiv@quotient+2,f
  9311  0577  09B6               	comf	___aldiv@quotient+3,f
  9312  0578  0AB3               	incf	___aldiv@quotient,f
  9313  0579  1903               	skipnz
  9314  057A  0AB4               	incf	___aldiv@quotient+1,f
  9315  057B  1903               	skipnz
  9316  057C  0AB5               	incf	___aldiv@quotient+2,f
  9317  057D  1903               	skipnz
  9318  057E  0AB6               	incf	___aldiv@quotient+3,f
  9319  057F                     l3918:
  9320  057F  0836               	movf	___aldiv@quotient+3,w
  9321  0580  00AB               	movwf	?___aldiv+3
  9322  0581  0835               	movf	___aldiv@quotient+2,w
  9323  0582  00AA               	movwf	?___aldiv+2
  9324  0583  0834               	movf	___aldiv@quotient+1,w
  9325  0584  00A9               	movwf	?___aldiv+1
  9326  0585  0833               	movf	___aldiv@quotient,w
  9327  0586  00A8               	movwf	?___aldiv
  9328  0587                     l917:
  9329  0587  0008               	return
  9330  0588                     __end_of___aldiv:
  9331                           
  9332                           	psect	text27
  9333  0D8C                     __ptext27:	
  9334 ;; *************** function _lowBattery *****************
  9335 ;; Defined at:
  9336 ;;		line 235 in file "main.c"
  9337 ;; Parameters:    Size  Location     Type
  9338 ;;		None
  9339 ;; Auto vars:     Size  Location     Type
  9340 ;;		None
  9341 ;; Return value:  Size  Location     Type
  9342 ;;                  1    wreg      void 
  9343 ;; Registers used:
  9344 ;;		wreg, status,2, status,0, pclath, cstack
  9345 ;; Tracked objects:
  9346 ;;		On entry : 0/0
  9347 ;;		On exit  : 0/0
  9348 ;;		Unchanged: 0/0
  9349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9350 ;;      Params:         0       0       0       0       0       0       0       0
  9351 ;;      Locals:         0       0       0       0       0       0       0       0
  9352 ;;      Temps:          0       2       0       0       0       0       0       0
  9353 ;;      Totals:         0       2       0       0       0       0       0       0
  9354 ;;Total ram usage:        2 bytes
  9355 ;; Hardware stack levels used: 1
  9356 ;; Hardware stack levels required when called: 5
  9357 ;; This function calls:
  9358 ;;		_setLEDColor
  9359 ;; This function is called by:
  9360 ;;		_main
  9361 ;; This function uses a non-reentrant model
  9362 ;;
  9363                           
  9364                           
  9365                           ;psect for function _lowBattery
  9366  0D8C                     _lowBattery:
  9367  0D8C                     l4094:	
  9368                           ;incstack = 0
  9369                           ; Regs used in _lowBattery: [wreg+status,2+status,0+pclath+cstack]
  9370                           
  9371                           
  9372                           ;main.c: 236:   interfaceState = STATE_LOWBATTERY;
  9373  0D8C  3003               	movlw	3
  9374  0D8D  0020               	movlb	0	; select bank0
  9375  0D8E  00A0               	movwf	??_lowBattery
  9376  0D8F  0820               	movf	??_lowBattery,w
  9377  0D90  00F8               	movwf	_interfaceState
  9378  0D91                     l4096:
  9379                           
  9380                           ;main.c: 237:   setLEDColor(255, 0, 0);
  9381  0D91  01F3               	clrf	setLEDColor@green
  9382  0D92  01F4               	clrf	setLEDColor@blue
  9383  0D93  30FF               	movlw	255
  9384  0D94  318B  23C1  318D   	fcall	_setLEDColor
  9385  0D97                     l4098:
  9386                           
  9387                           ;main.c: 238:   _delay((unsigned long)((250)*(4000000/4000.0)));
  9388  0D97  3002               	movlw	2
  9389  0D98  0020               	movlb	0	; select bank0
  9390  0D99  00A1               	movwf	??_lowBattery+1
  9391  0D9A  3045               	movlw	69
  9392  0D9B  00A0               	movwf	??_lowBattery
  9393  0D9C  30A9               	movlw	169
  9394  0D9D                     u3187:
  9395  0D9D  0B89               	decfsz	9,f
  9396  0D9E  2D9D               	goto	u3187
  9397  0D9F  0BA0               	decfsz	??_lowBattery,f
  9398  0DA0  2D9D               	goto	u3187
  9399  0DA1  0BA1               	decfsz	??_lowBattery+1,f
  9400  0DA2  2D9D               	goto	u3187
  9401  0DA3  3200               	nop2
  9402                           
  9403                           ;main.c: 239:   setLEDColor(0, 0, 0);
  9404  0DA4  01F3               	clrf	setLEDColor@green
  9405  0DA5  01F4               	clrf	setLEDColor@blue
  9406  0DA6  3000               	movlw	0
  9407  0DA7  318B  23C1  318D   	fcall	_setLEDColor
  9408  0DAA                     l4100:
  9409                           
  9410                           ;main.c: 240:   _delay((unsigned long)((500)*(4000000/4000.0)));
  9411  0DAA  3003               	movlw	3
  9412  0DAB  0020               	movlb	0	; select bank0
  9413  0DAC  00A1               	movwf	??_lowBattery+1
  9414  0DAD  308A               	movlw	138
  9415  0DAE  00A0               	movwf	??_lowBattery
  9416  0DAF  3055               	movlw	85
  9417  0DB0                     u3197:
  9418  0DB0  0B89               	decfsz	9,f
  9419  0DB1  2DB0               	goto	u3197
  9420  0DB2  0BA0               	decfsz	??_lowBattery,f
  9421  0DB3  2DB0               	goto	u3197
  9422  0DB4  0BA1               	decfsz	??_lowBattery+1,f
  9423  0DB5  2DB0               	goto	u3197
  9424  0DB6  3200               	nop2
  9425  0DB7                     l659:
  9426  0DB7  0008               	return
  9427  0DB8                     __end_of_lowBattery:
  9428                           
  9429                           	psect	text28
  9430  0BC1                     __ptext28:	
  9431 ;; *************** function _setLEDColor *****************
  9432 ;; Defined at:
  9433 ;;		line 214 in file "main.c"
  9434 ;; Parameters:    Size  Location     Type
  9435 ;;  red             1    wreg     unsigned char 
  9436 ;;  green           1    3[COMMON] unsigned char 
  9437 ;;  blue            1    4[COMMON] unsigned char 
  9438 ;; Auto vars:     Size  Location     Type
  9439 ;;  red             1    6[COMMON] unsigned char 
  9440 ;; Return value:  Size  Location     Type
  9441 ;;                  1    wreg      void 
  9442 ;; Registers used:
  9443 ;;		wreg, status,2, status,0
  9444 ;; Tracked objects:
  9445 ;;		On entry : 0/0
  9446 ;;		On exit  : 0/0
  9447 ;;		Unchanged: 0/0
  9448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9449 ;;      Params:         2       0       0       0       0       0       0       0
  9450 ;;      Locals:         1       0       0       0       0       0       0       0
  9451 ;;      Temps:          1       0       0       0       0       0       0       0
  9452 ;;      Totals:         4       0       0       0       0       0       0       0
  9453 ;;Total ram usage:        4 bytes
  9454 ;; Hardware stack levels used: 1
  9455 ;; Hardware stack levels required when called: 4
  9456 ;; This function calls:
  9457 ;;		Nothing
  9458 ;; This function is called by:
  9459 ;;		_lowBattery
  9460 ;;		_startUp
  9461 ;;		_selectSomething
  9462 ;;		_selectFrequency
  9463 ;;		_selectCurrent
  9464 ;;		_selectIncrease
  9465 ;;		_selectDecrease
  9466 ;;		_selectCurrentValue
  9467 ;;		_selectFrequencyValue
  9468 ;;		_process_remote_command
  9469 ;;		_selectResetValue
  9470 ;; This function uses a non-reentrant model
  9471 ;;
  9472                           
  9473                           
  9474                           ;psect for function _setLEDColor
  9475  0BC1                     _setLEDColor:
  9476                           
  9477                           ;incstack = 0
  9478                           ; Regs used in _setLEDColor: [wreg+status,2+status,0]
  9479                           ;setLEDColor@red stored from wreg
  9480  0BC1  00F6               	movwf	setLEDColor@red
  9481  0BC2                     l3850:
  9482                           
  9483                           ;main.c: 214: void setLEDColor(uint8_t red, uint8_t green, uint8_t blue);main.c: 215: {;
      +                          main.c: 221:   if (0 == blue){
  9484  0BC2  0874               	movf	setLEDColor@blue,w
  9485  0BC3  1D03               	btfss	3,2
  9486  0BC4  2BC6               	goto	u2361
  9487  0BC5  2BC7               	goto	u2360
  9488  0BC6                     u2361:
  9489  0BC6  2BCA               	goto	l3854
  9490  0BC7                     u2360:
  9491  0BC7                     l3852:
  9492                           
  9493                           ;main.c: 222:     TRISC |= 0b00100000;
  9494  0BC7  0021               	movlb	1	; select bank1
  9495  0BC8  168E               	bsf	14,5	;volatile
  9496                           
  9497                           ;main.c: 223:   } else {
  9498  0BC9  2BCF               	goto	l3856
  9499  0BCA                     l3854:
  9500                           
  9501                           ;main.c: 224:     TRISC &= 0b11011111;
  9502  0BCA  30DF               	movlw	223
  9503  0BCB  00F5               	movwf	??_setLEDColor
  9504  0BCC  0875               	movf	??_setLEDColor,w
  9505  0BCD  0021               	movlb	1	; select bank1
  9506  0BCE  058E               	andwf	14,f	;volatile
  9507  0BCF                     l3856:
  9508                           
  9509                           ;main.c: 226:   CCPR1L = 255U - blue;
  9510  0BCF  0974               	comf	setLEDColor@blue,w
  9511  0BD0  0025               	movlb	5	; select bank5
  9512  0BD1  0091               	movwf	17	;volatile
  9513  0BD2                     l3858:
  9514                           
  9515                           ;main.c: 228:   PWM3DCH = red;
  9516  0BD2  0876               	movf	setLEDColor@red,w
  9517  0BD3  002C               	movlb	12	; select bank12
  9518  0BD4  0098               	movwf	24	;volatile
  9519  0BD5                     l3860:
  9520                           
  9521                           ;main.c: 230:   PWM4DCH = green;
  9522  0BD5  0873               	movf	setLEDColor@green,w
  9523  0BD6  009B               	movwf	27	;volatile
  9524  0BD7                     l656:
  9525  0BD7  0008               	return
  9526  0BD8                     __end_of_setLEDColor:
  9527                           
  9528                           	psect	text29
  9529  0F41                     __ptext29:	
  9530 ;; *************** function _initLED *****************
  9531 ;; Defined at:
  9532 ;;		line 173 in file "main.c"
  9533 ;; Parameters:    Size  Location     Type
  9534 ;;		None
  9535 ;; Auto vars:     Size  Location     Type
  9536 ;;		None
  9537 ;; Return value:  Size  Location     Type
  9538 ;;                  1    wreg      void 
  9539 ;; Registers used:
  9540 ;;		wreg, status,2, status,0
  9541 ;; Tracked objects:
  9542 ;;		On entry : 0/0
  9543 ;;		On exit  : 0/0
  9544 ;;		Unchanged: 0/0
  9545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9546 ;;      Params:         0       0       0       0       0       0       0       0
  9547 ;;      Locals:         0       0       0       0       0       0       0       0
  9548 ;;      Temps:          1       0       0       0       0       0       0       0
  9549 ;;      Totals:         1       0       0       0       0       0       0       0
  9550 ;;Total ram usage:        1 bytes
  9551 ;; Hardware stack levels used: 1
  9552 ;; Hardware stack levels required when called: 4
  9553 ;; This function calls:
  9554 ;;		Nothing
  9555 ;; This function is called by:
  9556 ;;		_main
  9557 ;; This function uses a non-reentrant model
  9558 ;;
  9559                           
  9560                           
  9561                           ;psect for function _initLED
  9562  0F41                     _initLED:
  9563  0F41                     l3256:	
  9564                           ;incstack = 0
  9565                           ; Regs used in _initLED: [wreg+status,2+status,0]
  9566                           
  9567                           
  9568                           ;main.c: 176:   PR2 = 255;
  9569  0F41  30FF               	movlw	255
  9570  0F42  0020               	movlb	0	; select bank0
  9571  0F43  009B               	movwf	27	;volatile
  9572  0F44                     l3258:
  9573                           
  9574                           ;main.c: 177:   T2CONbits.T2CKPS = 0b10;
  9575  0F44  081C               	movf	28,w	;volatile
  9576  0F45  39FC               	andlw	-4
  9577  0F46  3802               	iorlw	2
  9578  0F47  009C               	movwf	28	;volatile
  9579  0F48                     l3260:
  9580                           
  9581                           ;main.c: 178:   T2CONbits.TMR2ON = 1;
  9582  0F48  151C               	bsf	28,2	;volatile
  9583  0F49                     l3262:
  9584                           
  9585                           ;main.c: 182:   TRISC |= 0b00010000;
  9586  0F49  0021               	movlb	1	; select bank1
  9587  0F4A  160E               	bsf	14,4	;volatile
  9588  0F4B                     l3264:
  9589                           
  9590                           ;main.c: 183:   RC4PPS = 0b01110;
  9591  0F4B  300E               	movlw	14
  9592  0F4C  003D               	movlb	29	; select bank29
  9593  0F4D  00A4               	movwf	36	;volatile
  9594                           
  9595                           ;main.c: 184:   CCPTMRSbits.P3TSEL = 0b00;
  9596  0F4E  30CF               	movlw	-49
  9597  0F4F  0025               	movlb	5	; select bank5
  9598  0F50  059E               	andwf	30,f	;volatile
  9599  0F51                     l3266:
  9600                           
  9601                           ;main.c: 185:   PWM3DCH = 0;
  9602  0F51  002C               	movlb	12	; select bank12
  9603  0F52  0198               	clrf	24	;volatile
  9604  0F53                     l3268:
  9605                           
  9606                           ;main.c: 186:   PWM3DCLbits.PWM3DCL = 0;
  9607  0F53  303F               	movlw	-193
  9608  0F54  0597               	andwf	23,f	;volatile
  9609  0F55                     l3270:
  9610                           
  9611                           ;main.c: 187:   PWM3CONbits.PWM3POL = 1;
  9612  0F55  1619               	bsf	25,4	;volatile
  9613  0F56                     l3272:
  9614                           
  9615                           ;main.c: 188:   TRISC &= 0b11101111;
  9616  0F56  30EF               	movlw	239
  9617  0F57  00F3               	movwf	??_initLED
  9618  0F58  0873               	movf	??_initLED,w
  9619  0F59  0021               	movlb	1	; select bank1
  9620  0F5A  058E               	andwf	14,f	;volatile
  9621  0F5B                     l3274:
  9622                           
  9623                           ;main.c: 189:   PWM3CONbits.PWM3EN = 1;
  9624  0F5B  002C               	movlb	12	; select bank12
  9625  0F5C  1799               	bsf	25,7	;volatile
  9626  0F5D                     l3276:
  9627                           
  9628                           ;main.c: 193:   TRISA |= 0b00100000;
  9629  0F5D  0021               	movlb	1	; select bank1
  9630  0F5E  168C               	bsf	12,5	;volatile
  9631  0F5F                     l3278:
  9632                           
  9633                           ;main.c: 194:   RA5PPS = 0b01111;
  9634  0F5F  300F               	movlw	15
  9635  0F60  003D               	movlb	29	; select bank29
  9636  0F61  0095               	movwf	21	;volatile
  9637  0F62                     l3280:
  9638                           
  9639                           ;main.c: 195:   CCPTMRSbits.P4TSEL = 0b00;
  9640  0F62  303F               	movlw	-193
  9641  0F63  0025               	movlb	5	; select bank5
  9642  0F64  059E               	andwf	30,f	;volatile
  9643  0F65                     l3282:
  9644                           
  9645                           ;main.c: 196:   PWM4DCH = 0;
  9646  0F65  002C               	movlb	12	; select bank12
  9647  0F66  019B               	clrf	27	;volatile
  9648  0F67                     l3284:
  9649                           
  9650                           ;main.c: 197:   PWM4DCLbits.PWM4DCL = 0;
  9651  0F67  303F               	movlw	-193
  9652  0F68  059A               	andwf	26,f	;volatile
  9653  0F69                     l3286:
  9654                           
  9655                           ;main.c: 198:   PWM4CONbits.PWM4POL = 1;
  9656  0F69  161C               	bsf	28,4	;volatile
  9657  0F6A                     l3288:
  9658                           
  9659                           ;main.c: 199:   TRISA &= 0b11011111;
  9660  0F6A  30DF               	movlw	223
  9661  0F6B  00F3               	movwf	??_initLED
  9662  0F6C  0873               	movf	??_initLED,w
  9663  0F6D  0021               	movlb	1	; select bank1
  9664  0F6E  058C               	andwf	12,f	;volatile
  9665  0F6F                     l3290:
  9666                           
  9667                           ;main.c: 200:   PWM4CONbits.PWM4EN = 1;
  9668  0F6F  002C               	movlb	12	; select bank12
  9669  0F70  179C               	bsf	28,7	;volatile
  9670  0F71                     l3292:
  9671                           
  9672                           ;main.c: 206:   TRISC |= 0b00100000;
  9673  0F71  0021               	movlb	1	; select bank1
  9674  0F72  168E               	bsf	14,5	;volatile
  9675                           
  9676                           ;main.c: 207:   RC5PPS = 0b01100;
  9677  0F73  300C               	movlw	12
  9678  0F74  003D               	movlb	29	; select bank29
  9679  0F75  00A5               	movwf	37	;volatile
  9680  0F76                     l3294:
  9681                           
  9682                           ;main.c: 208:   CCP1CONbits.CCP1M = 0b1100;
  9683  0F76  0025               	movlb	5	; select bank5
  9684  0F77  0813               	movf	19,w	;volatile
  9685  0F78  39F0               	andlw	-16
  9686  0F79  380C               	iorlw	12
  9687  0F7A  0093               	movwf	19	;volatile
  9688  0F7B                     l3296:
  9689                           
  9690                           ;main.c: 209:   CCPR1L = 255;
  9691  0F7B  30FF               	movlw	255
  9692  0F7C  0091               	movwf	17	;volatile
  9693                           
  9694                           ;main.c: 210:   CCP1CONbits.DC1B = 0x3;
  9695  0F7D  3030               	movlw	48
  9696  0F7E  0493               	iorwf	19,f	;volatile
  9697                           
  9698                           ;main.c: 211:   TRISC &= 0b11011111;
  9699  0F7F  30DF               	movlw	223
  9700  0F80  00F3               	movwf	??_initLED
  9701  0F81  0873               	movf	??_initLED,w
  9702  0F82  0021               	movlb	1	; select bank1
  9703  0F83  058E               	andwf	14,f	;volatile
  9704  0F84                     l651:
  9705  0F84  0008               	return
  9706  0F85                     __end_of_initLED:
  9707                           
  9708                           	psect	text30
  9709  0CA1                     __ptext30:	
  9710 ;; *************** function _SYSTEM_Initialize *****************
  9711 ;; Defined at:
  9712 ;;		line 50 in file "mcc_generated_files/mcc.c"
  9713 ;; Parameters:    Size  Location     Type
  9714 ;;		None
  9715 ;; Auto vars:     Size  Location     Type
  9716 ;;		None
  9717 ;; Return value:  Size  Location     Type
  9718 ;;                  1    wreg      void 
  9719 ;; Registers used:
  9720 ;;		wreg, status,2, status,0, pclath, cstack
  9721 ;; Tracked objects:
  9722 ;;		On entry : 0/0
  9723 ;;		On exit  : 0/0
  9724 ;;		Unchanged: 0/0
  9725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9726 ;;      Params:         0       0       0       0       0       0       0       0
  9727 ;;      Locals:         0       0       0       0       0       0       0       0
  9728 ;;      Temps:          0       0       0       0       0       0       0       0
  9729 ;;      Totals:         0       0       0       0       0       0       0       0
  9730 ;;Total ram usage:        0 bytes
  9731 ;; Hardware stack levels used: 1
  9732 ;; Hardware stack levels required when called: 6
  9733 ;; This function calls:
  9734 ;;		_DAC_Initialize
  9735 ;;		_EUSART_Initialize
  9736 ;;		_EXT_INT_Initialize
  9737 ;;		_OPA1_Initialize
  9738 ;;		_OPA2_Initialize
  9739 ;;		_OSCILLATOR_Initialize
  9740 ;;		_PIN_MANAGER_Initialize
  9741 ;;		_TMR0_Initialize
  9742 ;;		_TMR1_Initialize
  9743 ;;		_TMR2_Initialize
  9744 ;;		_TMR4_Initialize
  9745 ;;		_WDT_Initialize
  9746 ;; This function is called by:
  9747 ;;		_main
  9748 ;; This function uses a non-reentrant model
  9749 ;;
  9750                           
  9751                           
  9752                           ;psect for function _SYSTEM_Initialize
  9753  0CA1                     _SYSTEM_Initialize:
  9754  0CA1                     l3194:	
  9755                           ;incstack = 0
  9756                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9757                           
  9758                           
  9759                           ;mcc_generated_files/mcc.c: 52:     PIN_MANAGER_Initialize();
  9760  0CA1  318D  25E9  318C   	fcall	_PIN_MANAGER_Initialize
  9761                           
  9762                           ;mcc_generated_files/mcc.c: 53:     OSCILLATOR_Initialize();
  9763  0CA4  318B  2316  318C   	fcall	_OSCILLATOR_Initialize
  9764  0CA7                     l3196:
  9765                           
  9766                           ;mcc_generated_files/mcc.c: 54:     WDT_Initialize();
  9767  0CA7  318A  22B3  318C   	fcall	_WDT_Initialize
  9768  0CAA                     l3198:
  9769                           
  9770                           ;mcc_generated_files/mcc.c: 55:     DAC_Initialize();
  9771  0CAA  318A  22CD  318C   	fcall	_DAC_Initialize
  9772  0CAD                     l3200:
  9773                           
  9774                           ;mcc_generated_files/mcc.c: 56:     OPA1_Initialize();
  9775  0CAD  318A  22B6  318C   	fcall	_OPA1_Initialize
  9776  0CB0                     l3202:
  9777                           
  9778                           ;mcc_generated_files/mcc.c: 57:     TMR4_Initialize();
  9779  0CB0  318B  239A  318C   	fcall	_TMR4_Initialize
  9780  0CB3                     l3204:
  9781                           
  9782                           ;mcc_generated_files/mcc.c: 58:     OPA2_Initialize();
  9783  0CB3  318A  22BA  318C   	fcall	_OPA2_Initialize
  9784  0CB6                     l3206:
  9785                           
  9786                           ;mcc_generated_files/mcc.c: 59:     TMR1_Initialize();
  9787  0CB6  318B  23F0  318C   	fcall	_TMR1_Initialize
  9788  0CB9                     l3208:
  9789                           
  9790                           ;mcc_generated_files/mcc.c: 60:     TMR2_Initialize();
  9791  0CB9  318B  231E  318C   	fcall	_TMR2_Initialize
  9792  0CBC                     l3210:
  9793                           
  9794                           ;mcc_generated_files/mcc.c: 61:     EXT_INT_Initialize();
  9795  0CBC  318B  2330  318C   	fcall	_EXT_INT_Initialize
  9796  0CBF                     l3212:
  9797                           
  9798                           ;mcc_generated_files/mcc.c: 62:     TMR0_Initialize();
  9799  0CBF  318B  2376  318C   	fcall	_TMR0_Initialize
  9800  0CC2                     l3214:
  9801                           
  9802                           ;mcc_generated_files/mcc.c: 63:     EUSART_Initialize();
  9803  0CC2  318C  245D  318C   	fcall	_EUSART_Initialize
  9804  0CC5                     l50:
  9805  0CC5  0008               	return
  9806  0CC6                     __end_of_SYSTEM_Initialize:
  9807                           
  9808                           	psect	text31
  9809  0AB3                     __ptext31:	
  9810 ;; *************** function _WDT_Initialize *****************
  9811 ;; Defined at:
  9812 ;;		line 78 in file "mcc_generated_files/mcc.c"
  9813 ;; Parameters:    Size  Location     Type
  9814 ;;		None
  9815 ;; Auto vars:     Size  Location     Type
  9816 ;;		None
  9817 ;; Return value:  Size  Location     Type
  9818 ;;                  1    wreg      void 
  9819 ;; Registers used:
  9820 ;;		status,2
  9821 ;; Tracked objects:
  9822 ;;		On entry : 0/0
  9823 ;;		On exit  : 0/0
  9824 ;;		Unchanged: 0/0
  9825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9826 ;;      Params:         0       0       0       0       0       0       0       0
  9827 ;;      Locals:         0       0       0       0       0       0       0       0
  9828 ;;      Temps:          0       0       0       0       0       0       0       0
  9829 ;;      Totals:         0       0       0       0       0       0       0       0
  9830 ;;Total ram usage:        0 bytes
  9831 ;; Hardware stack levels used: 1
  9832 ;; Hardware stack levels required when called: 4
  9833 ;; This function calls:
  9834 ;;		Nothing
  9835 ;; This function is called by:
  9836 ;;		_SYSTEM_Initialize
  9837 ;; This function uses a non-reentrant model
  9838 ;;
  9839                           
  9840                           
  9841                           ;psect for function _WDT_Initialize
  9842  0AB3                     _WDT_Initialize:
  9843  0AB3                     l2954:	
  9844                           ;incstack = 0
  9845                           ; Regs used in _WDT_Initialize: [status,2]
  9846                           
  9847                           
  9848                           ;mcc_generated_files/mcc.c: 81:     WDTCON = 0b00000000;
  9849  0AB3  0021               	movlb	1	; select bank1
  9850  0AB4  0197               	clrf	23	;volatile
  9851  0AB5                     l56:
  9852  0AB5  0008               	return
  9853  0AB6                     __end_of_WDT_Initialize:
  9854                           
  9855                           	psect	text32
  9856  0B9A                     __ptext32:	
  9857 ;; *************** function _TMR4_Initialize *****************
  9858 ;; Defined at:
  9859 ;;		line 65 in file "mcc_generated_files/tmr4.c"
  9860 ;; Parameters:    Size  Location     Type
  9861 ;;		None
  9862 ;; Auto vars:     Size  Location     Type
  9863 ;;		None
  9864 ;; Return value:  Size  Location     Type
  9865 ;;                  1    wreg      void 
  9866 ;; Registers used:
  9867 ;;		wreg, status,2, status,0, pclath, cstack
  9868 ;; Tracked objects:
  9869 ;;		On entry : 0/0
  9870 ;;		On exit  : 0/0
  9871 ;;		Unchanged: 0/0
  9872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9873 ;;      Params:         0       0       0       0       0       0       0       0
  9874 ;;      Locals:         0       0       0       0       0       0       0       0
  9875 ;;      Temps:          0       0       0       0       0       0       0       0
  9876 ;;      Totals:         0       0       0       0       0       0       0       0
  9877 ;;Total ram usage:        0 bytes
  9878 ;; Hardware stack levels used: 1
  9879 ;; Hardware stack levels required when called: 5
  9880 ;; This function calls:
  9881 ;;		_TMR4_SetInterruptHandler
  9882 ;; This function is called by:
  9883 ;;		_SYSTEM_Initialize
  9884 ;; This function uses a non-reentrant model
  9885 ;;
  9886                           
  9887                           
  9888                           ;psect for function _TMR4_Initialize
  9889  0B9A                     _TMR4_Initialize:
  9890  0B9A                     l2958:	
  9891                           ;incstack = 0
  9892                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9893                           
  9894                           
  9895                           ;mcc_generated_files/tmr4.c: 70:     PR4 = 0x04;
  9896  0B9A  3004               	movlw	4
  9897  0B9B  0028               	movlb	8	; select bank8
  9898  0B9C  0096               	movwf	22	;volatile
  9899  0B9D                     l2960:
  9900                           
  9901                           ;mcc_generated_files/tmr4.c: 73:     TMR4 = 0x00;
  9902  0B9D  0195               	clrf	21	;volatile
  9903  0B9E                     l2962:
  9904                           
  9905                           ;mcc_generated_files/tmr4.c: 76:     PIR2bits.TMR4IF = 0;
  9906  0B9E  0020               	movlb	0	; select bank0
  9907  0B9F  1092               	bcf	18,1	;volatile
  9908  0BA0                     l2964:
  9909                           
  9910                           ;mcc_generated_files/tmr4.c: 79:     PIE2bits.TMR4IE = 1;
  9911  0BA0  0021               	movlb	1	; select bank1
  9912  0BA1  1492               	bsf	18,1	;volatile
  9913  0BA2                     l2966:
  9914                           
  9915                           ;mcc_generated_files/tmr4.c: 82:     TMR4_SetInterruptHandler(TMR4_DefaultInterruptHandl
      +                          er);
  9916  0BA2  30FF               	movlw	low _TMR4_DefaultInterruptHandler
  9917  0BA3  00F3               	movwf	TMR4_SetInterruptHandler@InterruptHandler
  9918  0BA4  300E               	movlw	high _TMR4_DefaultInterruptHandler
  9919  0BA5  00F4               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1
  9920  0BA6  318A  22F7  318B   	fcall	_TMR4_SetInterruptHandler
  9921  0BA9                     l2968:
  9922                           
  9923                           ;mcc_generated_files/tmr4.c: 85:     T4CON = 0x16;
  9924  0BA9  3016               	movlw	22
  9925  0BAA  0028               	movlb	8	; select bank8
  9926  0BAB  0097               	movwf	23	;volatile
  9927  0BAC                     l402:
  9928  0BAC  0008               	return
  9929  0BAD                     __end_of_TMR4_Initialize:
  9930                           
  9931                           	psect	text33
  9932  0AF7                     __ptext33:	
  9933 ;; *************** function _TMR4_SetInterruptHandler *****************
  9934 ;; Defined at:
  9935 ;;		line 133 in file "mcc_generated_files/tmr4.c"
  9936 ;; Parameters:    Size  Location     Type
  9937 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  9938 ;;		 -> TMR4_DefaultInterruptHandler(1), 
  9939 ;; Auto vars:     Size  Location     Type
  9940 ;;		None
  9941 ;; Return value:  Size  Location     Type
  9942 ;;                  1    wreg      void 
  9943 ;; Registers used:
  9944 ;;		wreg
  9945 ;; Tracked objects:
  9946 ;;		On entry : 0/0
  9947 ;;		On exit  : 0/0
  9948 ;;		Unchanged: 0/0
  9949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9950 ;;      Params:         2       0       0       0       0       0       0       0
  9951 ;;      Locals:         0       0       0       0       0       0       0       0
  9952 ;;      Temps:          0       0       0       0       0       0       0       0
  9953 ;;      Totals:         2       0       0       0       0       0       0       0
  9954 ;;Total ram usage:        2 bytes
  9955 ;; Hardware stack levels used: 1
  9956 ;; Hardware stack levels required when called: 4
  9957 ;; This function calls:
  9958 ;;		Nothing
  9959 ;; This function is called by:
  9960 ;;		_TMR4_Initialize
  9961 ;; This function uses a non-reentrant model
  9962 ;;
  9963                           
  9964                           
  9965                           ;psect for function _TMR4_SetInterruptHandler
  9966  0AF7                     _TMR4_SetInterruptHandler:
  9967  0AF7                     l2742:	
  9968                           ;incstack = 0
  9969                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
  9970                           
  9971                           
  9972                           ;mcc_generated_files/tmr4.c: 134:     TMR4_InterruptHandler = InterruptHandler;
  9973  0AF7  0874               	movf	TMR4_SetInterruptHandler@InterruptHandler+1,w
  9974  0AF8  0021               	movlb	1	; select bank1
  9975  0AF9  00D5               	movwf	(_TMR4_InterruptHandler+1)^(0+128)
  9976  0AFA  0873               	movf	TMR4_SetInterruptHandler@InterruptHandler,w
  9977  0AFB  00D4               	movwf	_TMR4_InterruptHandler^(0+128)
  9978  0AFC                     l424:
  9979  0AFC  0008               	return
  9980  0AFD                     __end_of_TMR4_SetInterruptHandler:
  9981                           
  9982                           	psect	text34
  9983  0B1E                     __ptext34:	
  9984 ;; *************** function _TMR2_Initialize *****************
  9985 ;; Defined at:
  9986 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  9987 ;; Parameters:    Size  Location     Type
  9988 ;;		None
  9989 ;; Auto vars:     Size  Location     Type
  9990 ;;		None
  9991 ;; Return value:  Size  Location     Type
  9992 ;;                  1    wreg      void 
  9993 ;; Registers used:
  9994 ;;		wreg, status,2
  9995 ;; Tracked objects:
  9996 ;;		On entry : 0/0
  9997 ;;		On exit  : 0/0
  9998 ;;		Unchanged: 0/0
  9999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10000 ;;      Params:         0       0       0       0       0       0       0       0
 10001 ;;      Locals:         0       0       0       0       0       0       0       0
 10002 ;;      Temps:          0       0       0       0       0       0       0       0
 10003 ;;      Totals:         0       0       0       0       0       0       0       0
 10004 ;;Total ram usage:        0 bytes
 10005 ;; Hardware stack levels used: 1
 10006 ;; Hardware stack levels required when called: 4
 10007 ;; This function calls:
 10008 ;;		Nothing
 10009 ;; This function is called by:
 10010 ;;		_SYSTEM_Initialize
 10011 ;; This function uses a non-reentrant model
 10012 ;;
 10013                           
 10014                           
 10015                           ;psect for function _TMR2_Initialize
 10016  0B1E                     _TMR2_Initialize:
 10017  0B1E                     l2984:	
 10018                           ;incstack = 0
 10019                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 10020                           
 10021                           
 10022                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 255;
 10023  0B1E  30FF               	movlw	255
 10024  0B1F  0020               	movlb	0	; select bank0
 10025  0B20  009B               	movwf	27	;volatile
 10026  0B21                     l2986:
 10027                           
 10028                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
 10029  0B21  019A               	clrf	26	;volatile
 10030  0B22                     l2988:
 10031                           
 10032                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
 10033  0B22  1091               	bcf	17,1	;volatile
 10034  0B23                     l2990:
 10035                           
 10036                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x06;
 10037  0B23  3006               	movlw	6
 10038  0B24  009C               	movwf	28	;volatile
 10039  0B25                     l305:
 10040  0B25  0008               	return
 10041  0B26                     __end_of_TMR2_Initialize:
 10042                           
 10043                           	psect	text35
 10044  0BF0                     __ptext35:	
 10045 ;; *************** function _TMR1_Initialize *****************
 10046 ;; Defined at:
 10047 ;;		line 65 in file "tmr1.c"
 10048 ;; Parameters:    Size  Location     Type
 10049 ;;		None
 10050 ;; Auto vars:     Size  Location     Type
 10051 ;;		None
 10052 ;; Return value:  Size  Location     Type
 10053 ;;                  1    wreg      void 
 10054 ;; Registers used:
 10055 ;;		wreg, status,2, status,0, pclath, cstack
 10056 ;; Tracked objects:
 10057 ;;		On entry : 0/0
 10058 ;;		On exit  : 0/0
 10059 ;;		Unchanged: 0/0
 10060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10061 ;;      Params:         0       0       0       0       0       0       0       0
 10062 ;;      Locals:         0       0       0       0       0       0       0       0
 10063 ;;      Temps:          1       0       0       0       0       0       0       0
 10064 ;;      Totals:         1       0       0       0       0       0       0       0
 10065 ;;Total ram usage:        1 bytes
 10066 ;; Hardware stack levels used: 1
 10067 ;; Hardware stack levels required when called: 5
 10068 ;; This function calls:
 10069 ;;		_TMR1_SetInterruptHandler
 10070 ;; This function is called by:
 10071 ;;		_SYSTEM_Initialize
 10072 ;; This function uses a non-reentrant model
 10073 ;;
 10074                           
 10075                           
 10076                           ;psect for function _TMR1_Initialize
 10077  0BF0                     _TMR1_Initialize:
 10078  0BF0                     l2972:	
 10079                           ;incstack = 0
 10080                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10081                           
 10082                           
 10083                           ;tmr1.c: 73:     TMR1 = 65528;
 10084  0BF0  30FF               	movlw	255
 10085  0BF1  0020               	movlb	0	; select bank0
 10086  0BF2  0097               	movwf	23	;volatile
 10087  0BF3  30F8               	movlw	248
 10088  0BF4  0096               	movwf	22	;volatile
 10089  0BF5                     l2974:
 10090                           
 10091                           ;tmr1.c: 76:     timer1ReloadVal= 65528;
 10092  0BF5  30F8               	movlw	248
 10093  0BF6  00F5               	movwf	??_TMR1_Initialize
 10094  0BF7  0875               	movf	??_TMR1_Initialize,w
 10095  0BF8  0021               	movlb	1	; select bank1
 10096  0BF9  00E0               	movwf	_timer1ReloadVal^(0+128)	;volatile
 10097  0BFA                     l2976:
 10098                           
 10099                           ;tmr1.c: 79:     PIR1bits.TMR1IF = 0;
 10100  0BFA  0020               	movlb	0	; select bank0
 10101  0BFB  1011               	bcf	17,0	;volatile
 10102  0BFC                     l2978:
 10103                           
 10104                           ;tmr1.c: 82:     PIE1bits.TMR1IE = 1;
 10105  0BFC  0021               	movlb	1	; select bank1
 10106  0BFD  1411               	bsf	17,0	;volatile
 10107  0BFE                     l2980:
 10108                           
 10109                           ;tmr1.c: 84:     T1CONbits.TMR1ON = 0;
 10110  0BFE  0020               	movlb	0	; select bank0
 10111  0BFF  1018               	bcf	24,0	;volatile
 10112  0C00                     l2982:
 10113                           
 10114                           ;tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
 10115  0C00  300F               	movlw	low _TMR1_DefaultInterruptHandler
 10116  0C01  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler
 10117  0C02  300B               	movlw	high _TMR1_DefaultInterruptHandler
 10118  0C03  00F4               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
 10119  0C04  318A  22F1  318B   	fcall	_TMR1_SetInterruptHandler
 10120  0C07                     l501:
 10121  0C07  0008               	return
 10122  0C08                     __end_of_TMR1_Initialize:
 10123                           
 10124                           	psect	text36
 10125  0AF1                     __ptext36:	
 10126 ;; *************** function _TMR1_SetInterruptHandler *****************
 10127 ;; Defined at:
 10128 ;;		line 128 in file "tmr1.c"
 10129 ;; Parameters:    Size  Location     Type
 10130 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
 10131 ;;		 -> TMR1_DefaultInterruptHandler(1), 
 10132 ;; Auto vars:     Size  Location     Type
 10133 ;;		None
 10134 ;; Return value:  Size  Location     Type
 10135 ;;                  1    wreg      void 
 10136 ;; Registers used:
 10137 ;;		wreg
 10138 ;; Tracked objects:
 10139 ;;		On entry : 0/0
 10140 ;;		On exit  : 0/0
 10141 ;;		Unchanged: 0/0
 10142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10143 ;;      Params:         2       0       0       0       0       0       0       0
 10144 ;;      Locals:         0       0       0       0       0       0       0       0
 10145 ;;      Temps:          0       0       0       0       0       0       0       0
 10146 ;;      Totals:         2       0       0       0       0       0       0       0
 10147 ;;Total ram usage:        2 bytes
 10148 ;; Hardware stack levels used: 1
 10149 ;; Hardware stack levels required when called: 4
 10150 ;; This function calls:
 10151 ;;		Nothing
 10152 ;; This function is called by:
 10153 ;;		_TMR1_Initialize
 10154 ;; This function uses a non-reentrant model
 10155 ;;
 10156                           
 10157                           
 10158                           ;psect for function _TMR1_SetInterruptHandler
 10159  0AF1                     _TMR1_SetInterruptHandler:
 10160  0AF1                     l2796:	
 10161                           ;incstack = 0
 10162                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 10163                           
 10164                           
 10165                           ;tmr1.c: 129:     TMR1_InterruptHandler = InterruptHandler;
 10166  0AF1  0874               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 10167  0AF2  0021               	movlb	1	; select bank1
 10168  0AF3  00D3               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
 10169  0AF4  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 10170  0AF5  00D2               	movwf	_TMR1_InterruptHandler^(0+128)
 10171  0AF6                     l517:
 10172  0AF6  0008               	return
 10173  0AF7                     __end_of_TMR1_SetInterruptHandler:
 10174                           
 10175                           	psect	text37
 10176  0B76                     __ptext37:	
 10177 ;; *************** function _TMR0_Initialize *****************
 10178 ;; Defined at:
 10179 ;;		line 65 in file "mcc_generated_files/tmr0.c"
 10180 ;; Parameters:    Size  Location     Type
 10181 ;;		None
 10182 ;; Auto vars:     Size  Location     Type
 10183 ;;		None
 10184 ;; Return value:  Size  Location     Type
 10185 ;;                  1    wreg      void 
 10186 ;; Registers used:
 10187 ;;		wreg, status,2, status,0, pclath, cstack
 10188 ;; Tracked objects:
 10189 ;;		On entry : 0/0
 10190 ;;		On exit  : 0/0
 10191 ;;		Unchanged: 0/0
 10192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10193 ;;      Params:         0       0       0       0       0       0       0       0
 10194 ;;      Locals:         0       0       0       0       0       0       0       0
 10195 ;;      Temps:          0       0       0       0       0       0       0       0
 10196 ;;      Totals:         0       0       0       0       0       0       0       0
 10197 ;;Total ram usage:        0 bytes
 10198 ;; Hardware stack levels used: 1
 10199 ;; Hardware stack levels required when called: 5
 10200 ;; This function calls:
 10201 ;;		_TMR0_SetInterruptHandler
 10202 ;; This function is called by:
 10203 ;;		_SYSTEM_Initialize
 10204 ;; This function uses a non-reentrant model
 10205 ;;
 10206                           
 10207                           
 10208                           ;psect for function _TMR0_Initialize
 10209  0B76                     _TMR0_Initialize:
 10210  0B76                     l2998:	
 10211                           ;incstack = 0
 10212                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10213                           
 10214                           
 10215                           ;mcc_generated_files/tmr0.c: 70:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD5 
      +                          & 0x3F));
 10216  0B76  0021               	movlb	1	; select bank1
 10217  0B77  0815               	movf	21,w	;volatile
 10218  0B78  39C0               	andlw	192
 10219  0B79  3815               	iorlw	21
 10220  0B7A  0095               	movwf	21	;volatile
 10221  0B7B                     l3000:
 10222                           
 10223                           ;mcc_generated_files/tmr0.c: 73:     TMR0 = 0x00;
 10224  0B7B  0020               	movlb	0	; select bank0
 10225  0B7C  0195               	clrf	21	;volatile
 10226  0B7D                     l3002:
 10227                           
 10228                           ;mcc_generated_files/tmr0.c: 76:     timer0ReloadVal= 0x00;
 10229  0B7D  01F9               	clrf	_timer0ReloadVal	;volatile
 10230  0B7E                     l3004:
 10231                           
 10232                           ;mcc_generated_files/tmr0.c: 79:     INTCONbits.TMR0IF = 0;
 10233  0B7E  110B               	bcf	11,2	;volatile
 10234  0B7F                     l3006:
 10235                           
 10236                           ;mcc_generated_files/tmr0.c: 82:     INTCONbits.TMR0IE = 0;
 10237  0B7F  128B               	bcf	11,5	;volatile
 10238  0B80                     l3008:
 10239                           
 10240                           ;mcc_generated_files/tmr0.c: 85:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
 10241  0B80  3002               	movlw	low _TMR0_DefaultInterruptHandler
 10242  0B81  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 10243  0B82  3000               	movlw	high _TMR0_DefaultInterruptHandler
 10244  0B83  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 10245  0B84  318A  22EB  318B   	fcall	_TMR0_SetInterruptHandler
 10246  0B87                     l346:
 10247  0B87  0008               	return
 10248  0B88                     __end_of_TMR0_Initialize:
 10249                           
 10250                           	psect	text38
 10251  0AEB                     __ptext38:	
 10252 ;; *************** function _TMR0_SetInterruptHandler *****************
 10253 ;; Defined at:
 10254 ;;		line 126 in file "mcc_generated_files/tmr0.c"
 10255 ;; Parameters:    Size  Location     Type
 10256 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
 10257 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 10258 ;; Auto vars:     Size  Location     Type
 10259 ;;		None
 10260 ;; Return value:  Size  Location     Type
 10261 ;;                  1    wreg      void 
 10262 ;; Registers used:
 10263 ;;		wreg
 10264 ;; Tracked objects:
 10265 ;;		On entry : 0/0
 10266 ;;		On exit  : 0/0
 10267 ;;		Unchanged: 0/0
 10268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10269 ;;      Params:         2       0       0       0       0       0       0       0
 10270 ;;      Locals:         0       0       0       0       0       0       0       0
 10271 ;;      Temps:          0       0       0       0       0       0       0       0
 10272 ;;      Totals:         2       0       0       0       0       0       0       0
 10273 ;;Total ram usage:        2 bytes
 10274 ;; Hardware stack levels used: 1
 10275 ;; Hardware stack levels required when called: 4
 10276 ;; This function calls:
 10277 ;;		Nothing
 10278 ;; This function is called by:
 10279 ;;		_TMR0_Initialize
 10280 ;; This function uses a non-reentrant model
 10281 ;;
 10282                           
 10283                           
 10284                           ;psect for function _TMR0_SetInterruptHandler
 10285  0AEB                     _TMR0_SetInterruptHandler:
 10286  0AEB                     l2740:	
 10287                           ;incstack = 0
 10288                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 10289                           
 10290                           
 10291                           ;mcc_generated_files/tmr0.c: 127:     TMR0_InterruptHandler = InterruptHandler;
 10292  0AEB  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 10293  0AEC  0021               	movlb	1	; select bank1
 10294  0AED  00D7               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
 10295  0AEE  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 10296  0AEF  00D6               	movwf	_TMR0_InterruptHandler^(0+128)
 10297  0AF0                     l362:
 10298  0AF0  0008               	return
 10299  0AF1                     __end_of_TMR0_SetInterruptHandler:
 10300                           
 10301                           	psect	text39
 10302  0DE9                     __ptext39:	
 10303 ;; *************** function _PIN_MANAGER_Initialize *****************
 10304 ;; Defined at:
 10305 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 10306 ;; Parameters:    Size  Location     Type
 10307 ;;		None
 10308 ;; Auto vars:     Size  Location     Type
 10309 ;;		None
 10310 ;; Return value:  Size  Location     Type
 10311 ;;                  1    wreg      void 
 10312 ;; Registers used:
 10313 ;;		wreg, status,2
 10314 ;; Tracked objects:
 10315 ;;		On entry : 0/0
 10316 ;;		On exit  : 0/0
 10317 ;;		Unchanged: 0/0
 10318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10319 ;;      Params:         0       0       0       0       0       0       0       0
 10320 ;;      Locals:         0       0       0       0       0       0       0       0
 10321 ;;      Temps:          0       0       0       0       0       0       0       0
 10322 ;;      Totals:         0       0       0       0       0       0       0       0
 10323 ;;Total ram usage:        0 bytes
 10324 ;; Hardware stack levels used: 1
 10325 ;; Hardware stack levels required when called: 4
 10326 ;; This function calls:
 10327 ;;		Nothing
 10328 ;; This function is called by:
 10329 ;;		_SYSTEM_Initialize
 10330 ;; This function uses a non-reentrant model
 10331 ;;
 10332                           
 10333                           
 10334                           ;psect for function _PIN_MANAGER_Initialize
 10335  0DE9                     _PIN_MANAGER_Initialize:
 10336  0DE9                     l2916:	
 10337                           ;incstack = 0
 10338                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 10339                           
 10340                           
 10341                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
 10342  0DE9  0022               	movlb	2	; select bank2
 10343  0DEA  018C               	clrf	12	;volatile
 10344                           
 10345                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
 10346  0DEB  018D               	clrf	13	;volatile
 10347                           
 10348                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 10349  0DEC  018E               	clrf	14	;volatile
 10350  0DED                     l2918:
 10351                           
 10352                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x04;
 10353  0DED  3004               	movlw	4
 10354  0DEE  0021               	movlb	1	; select bank1
 10355  0DEF  008C               	movwf	12	;volatile
 10356  0DF0                     l2920:
 10357                           
 10358                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x30;
 10359  0DF0  3030               	movlw	48
 10360  0DF1  008D               	movwf	13	;volatile
 10361  0DF2                     l2922:
 10362                           
 10363                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x50;
 10364  0DF2  3050               	movlw	80
 10365  0DF3  008E               	movwf	14	;volatile
 10366  0DF4                     l2924:
 10367                           
 10368                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x40;
 10369  0DF4  3040               	movlw	64
 10370  0DF5  0023               	movlb	3	; select bank3
 10371  0DF6  008E               	movwf	14	;volatile
 10372  0DF7                     l2926:
 10373                           
 10374                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x10;
 10375  0DF7  3010               	movlw	16
 10376  0DF8  008D               	movwf	13	;volatile
 10377  0DF9                     l2928:
 10378                           
 10379                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x00;
 10380  0DF9  018C               	clrf	12	;volatile
 10381  0DFA                     l2930:
 10382                           
 10383                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
 10384  0DFA  0024               	movlb	4	; select bank4
 10385  0DFB  018D               	clrf	13	;volatile
 10386  0DFC                     l2932:
 10387                           
 10388                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
 10389  0DFC  018C               	clrf	12	;volatile
 10390  0DFD                     l2934:
 10391                           
 10392                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x00;
 10393  0DFD  018E               	clrf	14	;volatile
 10394  0DFE                     l2936:
 10395                           
 10396                           ;mcc_generated_files/pin_manager.c: 84:     OPTION_REGbits.nWPUEN = 0;
 10397  0DFE  0021               	movlb	1	; select bank1
 10398  0DFF  1395               	bcf	21,7	;volatile
 10399  0E00                     l2938:
 10400                           
 10401                           ;mcc_generated_files/pin_manager.c: 89:     ODCONA = 0x00;
 10402  0E00  0025               	movlb	5	; select bank5
 10403  0E01  018C               	clrf	12	;volatile
 10404  0E02                     l2940:
 10405                           
 10406                           ;mcc_generated_files/pin_manager.c: 90:     ODCONB = 0x00;
 10407  0E02  018D               	clrf	13	;volatile
 10408  0E03                     l2942:
 10409                           
 10410                           ;mcc_generated_files/pin_manager.c: 91:     ODCONC = 0x00;
 10411  0E03  018E               	clrf	14	;volatile
 10412                           
 10413                           ;mcc_generated_files/pin_manager.c: 96:     SLRCONA = 0x37;
 10414  0E04  3037               	movlw	55
 10415  0E05  0026               	movlb	6	; select bank6
 10416  0E06  008C               	movwf	12	;volatile
 10417                           
 10418                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONB = 0xF0;
 10419  0E07  30F0               	movlw	240
 10420  0E08  008D               	movwf	13	;volatile
 10421                           
 10422                           ;mcc_generated_files/pin_manager.c: 98:     SLRCONC = 0xFF;
 10423  0E09  30FF               	movlw	255
 10424  0E0A  008E               	movwf	14	;volatile
 10425                           
 10426                           ;mcc_generated_files/pin_manager.c: 103:     INLVLA = 0x3F;
 10427  0E0B  303F               	movlw	63
 10428  0E0C  0027               	movlb	7	; select bank7
 10429  0E0D  008C               	movwf	12	;volatile
 10430                           
 10431                           ;mcc_generated_files/pin_manager.c: 104:     INLVLB = 0xF0;
 10432  0E0E  30F0               	movlw	240
 10433  0E0F  008D               	movwf	13	;volatile
 10434                           
 10435                           ;mcc_generated_files/pin_manager.c: 105:     INLVLC = 0xFF;
 10436  0E10  30FF               	movlw	255
 10437  0E11  008E               	movwf	14	;volatile
 10438  0E12                     l2944:
 10439                           
 10440                           ;mcc_generated_files/pin_manager.c: 113:     INTCONbits.IOCIE = 1;
 10441  0E12  158B               	bsf	11,3	;volatile
 10442                           
 10443                           ;mcc_generated_files/pin_manager.c: 116:     INTPPS = 0x02;
 10444  0E13  3002               	movlw	2
 10445  0E14  003C               	movlb	28	; select bank28
 10446  0E15  0090               	movwf	16	;volatile
 10447                           
 10448                           ;mcc_generated_files/pin_manager.c: 117:     RXPPS = 0x0D;
 10449  0E16  300D               	movlw	13
 10450  0E17  00A4               	movwf	36	;volatile
 10451                           
 10452                           ;mcc_generated_files/pin_manager.c: 118:     RB7PPS = 0x14;
 10453  0E18  3014               	movlw	20
 10454  0E19  003D               	movlb	29	; select bank29
 10455  0E1A  009F               	movwf	31	;volatile
 10456  0E1B                     l111:
 10457  0E1B  0008               	return
 10458  0E1C                     __end_of_PIN_MANAGER_Initialize:
 10459                           
 10460                           	psect	text40
 10461  0B16                     __ptext40:	
 10462 ;; *************** function _OSCILLATOR_Initialize *****************
 10463 ;; Defined at:
 10464 ;;		line 66 in file "mcc_generated_files/mcc.c"
 10465 ;; Parameters:    Size  Location     Type
 10466 ;;		None
 10467 ;; Auto vars:     Size  Location     Type
 10468 ;;		None
 10469 ;; Return value:  Size  Location     Type
 10470 ;;                  1    wreg      void 
 10471 ;; Registers used:
 10472 ;;		wreg, status,2
 10473 ;; Tracked objects:
 10474 ;;		On entry : 0/0
 10475 ;;		On exit  : 0/0
 10476 ;;		Unchanged: 0/0
 10477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10478 ;;      Params:         0       0       0       0       0       0       0       0
 10479 ;;      Locals:         0       0       0       0       0       0       0       0
 10480 ;;      Temps:          0       0       0       0       0       0       0       0
 10481 ;;      Totals:         0       0       0       0       0       0       0       0
 10482 ;;Total ram usage:        0 bytes
 10483 ;; Hardware stack levels used: 1
 10484 ;; Hardware stack levels required when called: 4
 10485 ;; This function calls:
 10486 ;;		Nothing
 10487 ;; This function is called by:
 10488 ;;		_SYSTEM_Initialize
 10489 ;; This function uses a non-reentrant model
 10490 ;;
 10491                           
 10492                           
 10493                           ;psect for function _OSCILLATOR_Initialize
 10494  0B16                     _OSCILLATOR_Initialize:
 10495  0B16                     l2946:	
 10496                           ;incstack = 0
 10497                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10498                           
 10499                           
 10500                           ;mcc_generated_files/mcc.c: 69:     OSCCON = 0x6A;
 10501  0B16  306A               	movlw	106
 10502  0B17  0021               	movlb	1	; select bank1
 10503  0B18  0099               	movwf	25	;volatile
 10504  0B19                     l2948:
 10505                           
 10506                           ;mcc_generated_files/mcc.c: 71:     OSCSTAT = 0x00;
 10507  0B19  019A               	clrf	26	;volatile
 10508  0B1A                     l2950:
 10509                           
 10510                           ;mcc_generated_files/mcc.c: 73:     OSCTUNE = 0x00;
 10511  0B1A  0198               	clrf	24	;volatile
 10512  0B1B                     l2952:
 10513                           
 10514                           ;mcc_generated_files/mcc.c: 75:     BORCON = 0x00;
 10515  0B1B  0022               	movlb	2	; select bank2
 10516  0B1C  0196               	clrf	22	;volatile
 10517  0B1D                     l53:
 10518  0B1D  0008               	return
 10519  0B1E                     __end_of_OSCILLATOR_Initialize:
 10520                           
 10521                           	psect	text41
 10522  0ABA                     __ptext41:	
 10523 ;; *************** function _OPA2_Initialize *****************
 10524 ;; Defined at:
 10525 ;;		line 58 in file "mcc_generated_files/opa2.c"
 10526 ;; Parameters:    Size  Location     Type
 10527 ;;		None
 10528 ;; Auto vars:     Size  Location     Type
 10529 ;;		None
 10530 ;; Return value:  Size  Location     Type
 10531 ;;                  1    wreg      void 
 10532 ;; Registers used:
 10533 ;;		wreg
 10534 ;; Tracked objects:
 10535 ;;		On entry : 0/0
 10536 ;;		On exit  : 0/0
 10537 ;;		Unchanged: 0/0
 10538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10539 ;;      Params:         0       0       0       0       0       0       0       0
 10540 ;;      Locals:         0       0       0       0       0       0       0       0
 10541 ;;      Temps:          0       0       0       0       0       0       0       0
 10542 ;;      Totals:         0       0       0       0       0       0       0       0
 10543 ;;Total ram usage:        0 bytes
 10544 ;; Hardware stack levels used: 1
 10545 ;; Hardware stack levels required when called: 4
 10546 ;; This function calls:
 10547 ;;		Nothing
 10548 ;; This function is called by:
 10549 ;;		_SYSTEM_Initialize
 10550 ;;		_main
 10551 ;; This function uses a non-reentrant model
 10552 ;;
 10553                           
 10554                           
 10555                           ;psect for function _OPA2_Initialize
 10556  0ABA                     _OPA2_Initialize:
 10557  0ABA                     l2970:	
 10558                           ;incstack = 0
 10559                           ; Regs used in _OPA2_Initialize: [wreg]
 10560                           
 10561                           
 10562                           ;mcc_generated_files/opa2.c: 61:     OPA2CON = 0xC2;
 10563  0ABA  30C2               	movlw	194
 10564  0ABB  002A               	movlb	10	; select bank10
 10565  0ABC  0095               	movwf	21	;volatile
 10566  0ABD                     l329:
 10567  0ABD  0008               	return
 10568  0ABE                     __end_of_OPA2_Initialize:
 10569                           
 10570                           	psect	text42
 10571  0AB6                     __ptext42:	
 10572 ;; *************** function _OPA1_Initialize *****************
 10573 ;; Defined at:
 10574 ;;		line 58 in file "mcc_generated_files/opa1.c"
 10575 ;; Parameters:    Size  Location     Type
 10576 ;;		None
 10577 ;; Auto vars:     Size  Location     Type
 10578 ;;		None
 10579 ;; Return value:  Size  Location     Type
 10580 ;;                  1    wreg      void 
 10581 ;; Registers used:
 10582 ;;		wreg
 10583 ;; Tracked objects:
 10584 ;;		On entry : 0/0
 10585 ;;		On exit  : 0/0
 10586 ;;		Unchanged: 0/0
 10587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10588 ;;      Params:         0       0       0       0       0       0       0       0
 10589 ;;      Locals:         0       0       0       0       0       0       0       0
 10590 ;;      Temps:          0       0       0       0       0       0       0       0
 10591 ;;      Totals:         0       0       0       0       0       0       0       0
 10592 ;;Total ram usage:        0 bytes
 10593 ;; Hardware stack levels used: 1
 10594 ;; Hardware stack levels required when called: 4
 10595 ;; This function calls:
 10596 ;;		Nothing
 10597 ;; This function is called by:
 10598 ;;		_SYSTEM_Initialize
 10599 ;;		_main
 10600 ;; This function uses a non-reentrant model
 10601 ;;
 10602                           
 10603                           
 10604                           ;psect for function _OPA1_Initialize
 10605  0AB6                     _OPA1_Initialize:
 10606  0AB6                     l2956:	
 10607                           ;incstack = 0
 10608                           ; Regs used in _OPA1_Initialize: [wreg]
 10609                           
 10610                           
 10611                           ;mcc_generated_files/opa1.c: 61:     OPA1CON = 0xC2;
 10612  0AB6  30C2               	movlw	194
 10613  0AB7  002A               	movlb	10	; select bank10
 10614  0AB8  0091               	movwf	17	;volatile
 10615  0AB9                     l119:
 10616  0AB9  0008               	return
 10617  0ABA                     __end_of_OPA1_Initialize:
 10618                           
 10619                           	psect	text43
 10620  0B30                     __ptext43:	
 10621 ;; *************** function _EXT_INT_Initialize *****************
 10622 ;; Defined at:
 10623 ;;		line 138 in file "mcc_generated_files/ext_int.c"
 10624 ;; Parameters:    Size  Location     Type
 10625 ;;		None
 10626 ;; Auto vars:     Size  Location     Type
 10627 ;;		None
 10628 ;; Return value:  Size  Location     Type
 10629 ;;                  1    wreg      void 
 10630 ;; Registers used:
 10631 ;;		wreg, status,2, status,0, pclath, cstack
 10632 ;; Tracked objects:
 10633 ;;		On entry : 0/0
 10634 ;;		On exit  : 0/0
 10635 ;;		Unchanged: 0/0
 10636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10637 ;;      Params:         0       0       0       0       0       0       0       0
 10638 ;;      Locals:         0       0       0       0       0       0       0       0
 10639 ;;      Temps:          0       0       0       0       0       0       0       0
 10640 ;;      Totals:         0       0       0       0       0       0       0       0
 10641 ;;Total ram usage:        0 bytes
 10642 ;; Hardware stack levels used: 1
 10643 ;; Hardware stack levels required when called: 5
 10644 ;; This function calls:
 10645 ;;		_INT_SetInterruptHandler
 10646 ;; This function is called by:
 10647 ;;		_SYSTEM_Initialize
 10648 ;; This function uses a non-reentrant model
 10649 ;;
 10650                           
 10651                           
 10652                           ;psect for function _EXT_INT_Initialize
 10653  0B30                     _EXT_INT_Initialize:
 10654  0B30                     l2992:	
 10655                           ;incstack = 0
 10656                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10657                           
 10658                           
 10659                           ;mcc_generated_files/ext_int.c: 143:     (INTCONbits.INTF = 0);
 10660  0B30  108B               	bcf	11,1	;volatile
 10661                           
 10662                           ;mcc_generated_files/ext_int.c: 144:     (OPTION_REGbits.INTEDG = 0);
 10663  0B31  0021               	movlb	1	; select bank1
 10664  0B32  1315               	bcf	21,6	;volatile
 10665  0B33                     l2994:
 10666                           
 10667                           ;mcc_generated_files/ext_int.c: 146:     INT_SetInterruptHandler(INT_DefaultInterruptHan
      +                          dler);
 10668  0B33  3072               	movlw	low _INT_DefaultInterruptHandler
 10669  0B34  00F3               	movwf	INT_SetInterruptHandler@InterruptHandler
 10670  0B35  3006               	movlw	high _INT_DefaultInterruptHandler
 10671  0B36  00F4               	movwf	INT_SetInterruptHandler@InterruptHandler+1
 10672  0B37  318A  22E5  318B   	fcall	_INT_SetInterruptHandler
 10673  0B3A                     l2996:
 10674                           
 10675                           ;mcc_generated_files/ext_int.c: 147:     (INTCONbits.INTE = 1);
 10676  0B3A  160B               	bsf	11,4	;volatile
 10677  0B3B                     l292:
 10678  0B3B  0008               	return
 10679  0B3C                     __end_of_EXT_INT_Initialize:
 10680                           
 10681                           	psect	text44
 10682  0AE5                     __ptext44:	
 10683 ;; *************** function _INT_SetInterruptHandler *****************
 10684 ;; Defined at:
 10685 ;;		line 71 in file "mcc_generated_files/ext_int.c"
 10686 ;; Parameters:    Size  Location     Type
 10687 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
 10688 ;;		 -> INT_DefaultInterruptHandler(1), 
 10689 ;; Auto vars:     Size  Location     Type
 10690 ;;		None
 10691 ;; Return value:  Size  Location     Type
 10692 ;;                  1    wreg      void 
 10693 ;; Registers used:
 10694 ;;		wreg
 10695 ;; Tracked objects:
 10696 ;;		On entry : 0/0
 10697 ;;		On exit  : 0/0
 10698 ;;		Unchanged: 0/0
 10699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10700 ;;      Params:         2       0       0       0       0       0       0       0
 10701 ;;      Locals:         0       0       0       0       0       0       0       0
 10702 ;;      Temps:          0       0       0       0       0       0       0       0
 10703 ;;      Totals:         2       0       0       0       0       0       0       0
 10704 ;;Total ram usage:        2 bytes
 10705 ;; Hardware stack levels used: 1
 10706 ;; Hardware stack levels required when called: 4
 10707 ;; This function calls:
 10708 ;;		Nothing
 10709 ;; This function is called by:
 10710 ;;		_EXT_INT_Initialize
 10711 ;; This function uses a non-reentrant model
 10712 ;;
 10713                           
 10714                           
 10715                           ;psect for function _INT_SetInterruptHandler
 10716  0AE5                     _INT_SetInterruptHandler:
 10717  0AE5                     l2684:	
 10718                           ;incstack = 0
 10719                           ; Regs used in _INT_SetInterruptHandler: [wreg]
 10720                           
 10721                           
 10722                           ;mcc_generated_files/ext_int.c: 72:     INT_InterruptHandler = InterruptHandler;
 10723  0AE5  0874               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
 10724  0AE6  0021               	movlb	1	; select bank1
 10725  0AE7  00D9               	movwf	(_INT_InterruptHandler+1)^(0+128)
 10726  0AE8  0873               	movf	INT_SetInterruptHandler@InterruptHandler,w
 10727  0AE9  00D8               	movwf	_INT_InterruptHandler^(0+128)
 10728  0AEA                     l271:
 10729  0AEA  0008               	return
 10730  0AEB                     __end_of_INT_SetInterruptHandler:
 10731                           
 10732                           	psect	text45
 10733  0C5D                     __ptext45:	
 10734 ;; *************** function _EUSART_Initialize *****************
 10735 ;; Defined at:
 10736 ;;		line 66 in file "mcc_generated_files/eusart.c"
 10737 ;; Parameters:    Size  Location     Type
 10738 ;;		None
 10739 ;; Auto vars:     Size  Location     Type
 10740 ;;		None
 10741 ;; Return value:  Size  Location     Type
 10742 ;;                  1    wreg      void 
 10743 ;; Registers used:
 10744 ;;		wreg, status,2, status,0, pclath, cstack
 10745 ;; Tracked objects:
 10746 ;;		On entry : 0/0
 10747 ;;		On exit  : 0/0
 10748 ;;		Unchanged: 0/0
 10749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10750 ;;      Params:         0       0       0       0       0       0       0       0
 10751 ;;      Locals:         0       0       0       0       0       0       0       0
 10752 ;;      Temps:          0       0       0       0       0       0       0       0
 10753 ;;      Totals:         0       0       0       0       0       0       0       0
 10754 ;;Total ram usage:        0 bytes
 10755 ;; Hardware stack levels used: 1
 10756 ;; Hardware stack levels required when called: 5
 10757 ;; This function calls:
 10758 ;;		_EUSART_SetErrorHandler
 10759 ;;		_EUSART_SetFramingErrorHandler
 10760 ;;		_EUSART_SetOverrunErrorHandler
 10761 ;; This function is called by:
 10762 ;;		_SYSTEM_Initialize
 10763 ;; This function uses a non-reentrant model
 10764 ;;
 10765                           
 10766                           
 10767                           ;psect for function _EUSART_Initialize
 10768  0C5D                     _EUSART_Initialize:
 10769  0C5D                     l3010:	
 10770                           ;incstack = 0
 10771                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10772                           
 10773                           
 10774                           ;mcc_generated_files/eusart.c: 71:     BAUD1CON = 0x08;
 10775  0C5D  3008               	movlw	8
 10776  0C5E  0023               	movlb	3	; select bank3
 10777  0C5F  009F               	movwf	31	;volatile
 10778                           
 10779                           ;mcc_generated_files/eusart.c: 74:     RC1STA = 0x90;
 10780  0C60  3090               	movlw	144
 10781  0C61  009D               	movwf	29	;volatile
 10782                           
 10783                           ;mcc_generated_files/eusart.c: 77:     TX1STA = 0x24;
 10784  0C62  3024               	movlw	36
 10785  0C63  009E               	movwf	30	;volatile
 10786                           
 10787                           ;mcc_generated_files/eusart.c: 80:     SP1BRGL = 0x08;
 10788  0C64  3008               	movlw	8
 10789  0C65  009B               	movwf	27	;volatile
 10790  0C66                     l3012:
 10791                           
 10792                           ;mcc_generated_files/eusart.c: 83:     SP1BRGH = 0x00;
 10793  0C66  019C               	clrf	28	;volatile
 10794  0C67                     l3014:
 10795                           
 10796                           ;mcc_generated_files/eusart.c: 86:     EUSART_SetFramingErrorHandler(EUSART_DefaultFrami
      +                          ngErrorHandler);
 10797  0C67  3000               	movlw	0
 10798  0C68  00F3               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
 10799  0C69  3000               	movlw	0
 10800  0C6A  00F4               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
 10801  0C6B  318A  22D9  318C   	fcall	_EUSART_SetFramingErrorHandler
 10802  0C6E                     l3016:
 10803                           
 10804                           ;mcc_generated_files/eusart.c: 87:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOverr
      +                          unErrorHandler);
 10805  0C6E  3000               	movlw	0
 10806  0C6F  00F3               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
 10807  0C70  3000               	movlw	0
 10808  0C71  00F4               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
 10809  0C72  318A  22DF  318C   	fcall	_EUSART_SetOverrunErrorHandler
 10810  0C75                     l3018:
 10811                           
 10812                           ;mcc_generated_files/eusart.c: 88:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandler
      +                          );
 10813  0C75  3000               	movlw	0
 10814  0C76  00F3               	movwf	EUSART_SetErrorHandler@interruptHandler
 10815  0C77  3000               	movlw	0
 10816  0C78  00F4               	movwf	EUSART_SetErrorHandler@interruptHandler+1
 10817  0C79  318A  22D3  318C   	fcall	_EUSART_SetErrorHandler
 10818  0C7C                     l3020:
 10819                           
 10820                           ;mcc_generated_files/eusart.c: 90:     eusartRxLastError.status = 0;
 10821  0C7C  0021               	movlb	1	; select bank1
 10822  0C7D  01B2               	clrf	_eusartRxLastError^(0+128)	;volatile
 10823  0C7E                     l198:
 10824  0C7E  0008               	return
 10825  0C7F                     __end_of_EUSART_Initialize:
 10826                           
 10827                           	psect	text46
 10828  0ADF                     __ptext46:	
 10829 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
 10830 ;; Defined at:
 10831 ;;		line 170 in file "mcc_generated_files/eusart.c"
 10832 ;; Parameters:    Size  Location     Type
 10833 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
 10834 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
 10835 ;; Auto vars:     Size  Location     Type
 10836 ;;		None
 10837 ;; Return value:  Size  Location     Type
 10838 ;;                  1    wreg      void 
 10839 ;; Registers used:
 10840 ;;		wreg
 10841 ;; Tracked objects:
 10842 ;;		On entry : 0/0
 10843 ;;		On exit  : 0/0
 10844 ;;		Unchanged: 0/0
 10845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10846 ;;      Params:         2       0       0       0       0       0       0       0
 10847 ;;      Locals:         0       0       0       0       0       0       0       0
 10848 ;;      Temps:          0       0       0       0       0       0       0       0
 10849 ;;      Totals:         2       0       0       0       0       0       0       0
 10850 ;;Total ram usage:        2 bytes
 10851 ;; Hardware stack levels used: 1
 10852 ;; Hardware stack levels required when called: 4
 10853 ;; This function calls:
 10854 ;;		Nothing
 10855 ;; This function is called by:
 10856 ;;		_EUSART_Initialize
 10857 ;; This function uses a non-reentrant model
 10858 ;;
 10859                           
 10860                           
 10861                           ;psect for function _EUSART_SetOverrunErrorHandler
 10862  0ADF                     _EUSART_SetOverrunErrorHandler:
 10863  0ADF                     l2680:	
 10864                           ;incstack = 0
 10865                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
 10866                           
 10867                           
 10868                           ;mcc_generated_files/eusart.c: 171:     EUSART_OverrunErrorHandler = interruptHandler;
 10869  0ADF  0874               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
 10870  0AE0  0021               	movlb	1	; select bank1
 10871  0AE1  00DD               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
 10872  0AE2  0873               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
 10873  0AE3  00DC               	movwf	_EUSART_OverrunErrorHandler^(0+128)
 10874  0AE4                     l246:
 10875  0AE4  0008               	return
 10876  0AE5                     __end_of_EUSART_SetOverrunErrorHandler:
 10877                           
 10878                           	psect	text47
 10879  0AD9                     __ptext47:	
 10880 ;; *************** function _EUSART_SetFramingErrorHandler *****************
 10881 ;; Defined at:
 10882 ;;		line 166 in file "mcc_generated_files/eusart.c"
 10883 ;; Parameters:    Size  Location     Type
 10884 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
 10885 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
 10886 ;; Auto vars:     Size  Location     Type
 10887 ;;		None
 10888 ;; Return value:  Size  Location     Type
 10889 ;;                  1    wreg      void 
 10890 ;; Registers used:
 10891 ;;		wreg
 10892 ;; Tracked objects:
 10893 ;;		On entry : 0/0
 10894 ;;		On exit  : 0/0
 10895 ;;		Unchanged: 0/0
 10896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10897 ;;      Params:         2       0       0       0       0       0       0       0
 10898 ;;      Locals:         0       0       0       0       0       0       0       0
 10899 ;;      Temps:          0       0       0       0       0       0       0       0
 10900 ;;      Totals:         2       0       0       0       0       0       0       0
 10901 ;;Total ram usage:        2 bytes
 10902 ;; Hardware stack levels used: 1
 10903 ;; Hardware stack levels required when called: 4
 10904 ;; This function calls:
 10905 ;;		Nothing
 10906 ;; This function is called by:
 10907 ;;		_EUSART_Initialize
 10908 ;; This function uses a non-reentrant model
 10909 ;;
 10910                           
 10911                           
 10912                           ;psect for function _EUSART_SetFramingErrorHandler
 10913  0AD9                     _EUSART_SetFramingErrorHandler:
 10914  0AD9                     l2678:	
 10915                           ;incstack = 0
 10916                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
 10917                           
 10918                           
 10919                           ;mcc_generated_files/eusart.c: 167:     EUSART_FramingErrorHandler = interruptHandler;
 10920  0AD9  0874               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
 10921  0ADA  0021               	movlb	1	; select bank1
 10922  0ADB  00DF               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
 10923  0ADC  0873               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
 10924  0ADD  00DE               	movwf	_EUSART_FramingErrorHandler^(0+128)
 10925  0ADE                     l243:
 10926  0ADE  0008               	return
 10927  0ADF                     __end_of_EUSART_SetFramingErrorHandler:
 10928                           
 10929                           	psect	text48
 10930  0AD3                     __ptext48:	
 10931 ;; *************** function _EUSART_SetErrorHandler *****************
 10932 ;; Defined at:
 10933 ;;		line 174 in file "mcc_generated_files/eusart.c"
 10934 ;; Parameters:    Size  Location     Type
 10935 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
 10936 ;;		 -> EUSART_DefaultErrorHandler(1), 
 10937 ;; Auto vars:     Size  Location     Type
 10938 ;;		None
 10939 ;; Return value:  Size  Location     Type
 10940 ;;                  1    wreg      void 
 10941 ;; Registers used:
 10942 ;;		wreg
 10943 ;; Tracked objects:
 10944 ;;		On entry : 0/0
 10945 ;;		On exit  : 0/0
 10946 ;;		Unchanged: 0/0
 10947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10948 ;;      Params:         2       0       0       0       0       0       0       0
 10949 ;;      Locals:         0       0       0       0       0       0       0       0
 10950 ;;      Temps:          0       0       0       0       0       0       0       0
 10951 ;;      Totals:         2       0       0       0       0       0       0       0
 10952 ;;Total ram usage:        2 bytes
 10953 ;; Hardware stack levels used: 1
 10954 ;; Hardware stack levels required when called: 4
 10955 ;; This function calls:
 10956 ;;		Nothing
 10957 ;; This function is called by:
 10958 ;;		_EUSART_Initialize
 10959 ;; This function uses a non-reentrant model
 10960 ;;
 10961                           
 10962                           
 10963                           ;psect for function _EUSART_SetErrorHandler
 10964  0AD3                     _EUSART_SetErrorHandler:
 10965  0AD3                     l2682:	
 10966                           ;incstack = 0
 10967                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
 10968                           
 10969                           
 10970                           ;mcc_generated_files/eusart.c: 175:     EUSART_ErrorHandler = interruptHandler;
 10971  0AD3  0874               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
 10972  0AD4  0021               	movlb	1	; select bank1
 10973  0AD5  00DB               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
 10974  0AD6  0873               	movf	EUSART_SetErrorHandler@interruptHandler,w
 10975  0AD7  00DA               	movwf	_EUSART_ErrorHandler^(0+128)
 10976  0AD8                     l249:
 10977  0AD8  0008               	return
 10978  0AD9                     __end_of_EUSART_SetErrorHandler:
 10979                           
 10980                           	psect	text49
 10981  0ACD                     __ptext49:	
 10982 ;; *************** function _DAC_Initialize *****************
 10983 ;; Defined at:
 10984 ;;		line 58 in file "mcc_generated_files/dac.c"
 10985 ;; Parameters:    Size  Location     Type
 10986 ;;		None
 10987 ;; Auto vars:     Size  Location     Type
 10988 ;;		None
 10989 ;; Return value:  Size  Location     Type
 10990 ;;                  1    wreg      void 
 10991 ;; Registers used:
 10992 ;;		wreg
 10993 ;; Tracked objects:
 10994 ;;		On entry : 0/0
 10995 ;;		On exit  : 0/0
 10996 ;;		Unchanged: 0/0
 10997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10998 ;;      Params:         0       0       0       0       0       0       0       0
 10999 ;;      Locals:         0       0       0       0       0       0       0       0
 11000 ;;      Temps:          0       0       0       0       0       0       0       0
 11001 ;;      Totals:         0       0       0       0       0       0       0       0
 11002 ;;Total ram usage:        0 bytes
 11003 ;; Hardware stack levels used: 1
 11004 ;; Hardware stack levels required when called: 4
 11005 ;; This function calls:
 11006 ;;		Nothing
 11007 ;; This function is called by:
 11008 ;;		_SYSTEM_Initialize
 11009 ;;		_main
 11010 ;; This function uses a non-reentrant model
 11011 ;;
 11012                           
 11013                           
 11014                           ;psect for function _DAC_Initialize
 11015  0ACD                     _DAC_Initialize:
 11016  0ACD                     l2914:	
 11017                           ;incstack = 0
 11018                           ; Regs used in _DAC_Initialize: [wreg]
 11019                           
 11020                           
 11021                           ;mcc_generated_files/dac.c: 61:     DAC1CON0 = 0x80;
 11022  0ACD  3080               	movlw	128
 11023  0ACE  0022               	movlb	2	; select bank2
 11024  0ACF  0098               	movwf	24	;volatile
 11025                           
 11026                           ;mcc_generated_files/dac.c: 63:     DAC1CON1 = 0xFF;
 11027  0AD0  30FF               	movlw	255
 11028  0AD1  0099               	movwf	25	;volatile
 11029  0AD2                     l7:
 11030  0AD2  0008               	return
 11031  0AD3                     __end_of_DAC_Initialize:
 11032                           
 11033                           	psect	text50
 11034  0B49                     __ptext50:	
 11035 ;; *************** function _LATCH_Initialize *****************
 11036 ;; Defined at:
 11037 ;;		line 581 in file "main.c"
 11038 ;; Parameters:    Size  Location     Type
 11039 ;;		None
 11040 ;; Auto vars:     Size  Location     Type
 11041 ;;		None
 11042 ;; Return value:  Size  Location     Type
 11043 ;;                  1    wreg      void 
 11044 ;; Registers used:
 11045 ;;		None
 11046 ;; Tracked objects:
 11047 ;;		On entry : 0/0
 11048 ;;		On exit  : 0/0
 11049 ;;		Unchanged: 0/0
 11050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11051 ;;      Params:         0       0       0       0       0       0       0       0
 11052 ;;      Locals:         0       0       0       0       0       0       0       0
 11053 ;;      Temps:          0       0       0       0       0       0       0       0
 11054 ;;      Totals:         0       0       0       0       0       0       0       0
 11055 ;;Total ram usage:        0 bytes
 11056 ;; Hardware stack levels used: 1
 11057 ;; Hardware stack levels required when called: 4
 11058 ;; This function calls:
 11059 ;;		Nothing
 11060 ;; This function is called by:
 11061 ;;		_main
 11062 ;; This function uses a non-reentrant model
 11063 ;;
 11064                           
 11065                           
 11066                           ;psect for function _LATCH_Initialize
 11067  0B49                     _LATCH_Initialize:
 11068  0B49                     l3558:	
 11069                           ;incstack = 0
 11070                           ; Regs used in _LATCH_Initialize: []
 11071                           
 11072                           
 11073                           ;main.c: 582:     TRISBbits.TRISB6 = 0;
 11074  0B49  0021               	movlb	1	; select bank1
 11075  0B4A  130D               	bcf	13,6	;volatile
 11076                           
 11077                           ;main.c: 583:     TRISCbits.TRISC0 = 0;
 11078  0B4B  100E               	bcf	14,0	;volatile
 11079                           
 11080                           ;main.c: 584:     TRISAbits.TRISA4 = 0;
 11081  0B4C  120C               	bcf	12,4	;volatile
 11082                           
 11083                           ;main.c: 585:     TRISCbits.TRISC1 = 0;
 11084  0B4D  108E               	bcf	14,1	;volatile
 11085                           
 11086                           ;main.c: 586:     TRISCbits.TRISC7 = 0;
 11087  0B4E  138E               	bcf	14,7	;volatile
 11088                           
 11089                           ;main.c: 587:     LATBbits.LATB6 = 1;
 11090  0B4F  0022               	movlb	2	; select bank2
 11091  0B50  170D               	bsf	13,6	;volatile
 11092                           
 11093                           ;main.c: 588:     LATCbits.LATC0 = 1;
 11094  0B51  140E               	bsf	14,0	;volatile
 11095                           
 11096                           ;main.c: 589:     LATAbits.LATA4 = 1;
 11097  0B52  160C               	bsf	12,4	;volatile
 11098                           
 11099                           ;main.c: 590:     LATCbits.LATC1 = 1;
 11100  0B53  148E               	bsf	14,1	;volatile
 11101                           
 11102                           ;main.c: 591:     LATCbits.LATC7 = 1;
 11103  0B54  178E               	bsf	14,7	;volatile
 11104  0B55                     l758:
 11105  0B55  0008               	return
 11106  0B56                     __end_of_LATCH_Initialize:
 11107                           
 11108                           	psect	intentry
 11109  0004                     __pintentry:	
 11110 ;; *************** function _INTERRUPT_InterruptManager *****************
 11111 ;; Defined at:
 11112 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 11113 ;; Parameters:    Size  Location     Type
 11114 ;;		None
 11115 ;; Auto vars:     Size  Location     Type
 11116 ;;		None
 11117 ;; Return value:  Size  Location     Type
 11118 ;;                  1    wreg      void 
 11119 ;; Registers used:
 11120 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11121 ;; Tracked objects:
 11122 ;;		On entry : 0/0
 11123 ;;		On exit  : 0/0
 11124 ;;		Unchanged: 0/0
 11125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11126 ;;      Params:         0       0       0       0       0       0       0       0
 11127 ;;      Locals:         0       0       0       0       0       0       0       0
 11128 ;;      Temps:          0       0       0       0       0       0       0       0
 11129 ;;      Totals:         0       0       0       0       0       0       0       0
 11130 ;;Total ram usage:        0 bytes
 11131 ;; Hardware stack levels used: 1
 11132 ;; Hardware stack levels required when called: 3
 11133 ;; This function calls:
 11134 ;;		_INT_ISR
 11135 ;;		_PIN_MANAGER_IOC
 11136 ;;		_TMR0_ISR
 11137 ;;		_TMR1_ISR
 11138 ;;		_TMR4_ISR
 11139 ;; This function is called by:
 11140 ;;		Interrupt level 1
 11141 ;; This function uses a non-reentrant model
 11142 ;;
 11143                           
 11144  0004                     _INTERRUPT_InterruptManager:
 11145                           
 11146                           ;incstack = 0
 11147  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
 11148                           
 11149                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11150  0005  3180               	pagesel	$
 11151  0006                     i1l3560:
 11152                           
 11153                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 11154  0006  1E8B               	btfss	11,5	;volatile
 11155  0007  2809               	goto	u210_21
 11156  0008  280A               	goto	u210_20
 11157  0009                     u210_21:
 11158  0009  2812               	goto	i1l144
 11159  000A                     u210_20:
 11160  000A                     i1l3562:
 11161  000A  1D0B               	btfss	11,2	;volatile
 11162  000B  280D               	goto	u211_21
 11163  000C  280E               	goto	u211_20
 11164  000D                     u211_21:
 11165  000D  2812               	goto	i1l144
 11166  000E                     u211_20:
 11167  000E                     i1l3564:
 11168                           
 11169                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
 11170  000E  318B  2365  3180   	fcall	_TMR0_ISR
 11171                           
 11172                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 11173  0011  2849               	goto	i1l155
 11174  0012                     i1l144:	
 11175                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.INTE == 1 && INTCON
      +                          bits.INTF == 1)
 11176                           
 11177  0012  1E0B               	btfss	11,4	;volatile
 11178  0013  2815               	goto	u212_21
 11179  0014  2816               	goto	u212_20
 11180  0015                     u212_21:
 11181  0015  281E               	goto	i1l146
 11182  0016                     u212_20:
 11183  0016                     i1l3566:
 11184  0016  1C8B               	btfss	11,1	;volatile
 11185  0017  2819               	goto	u213_21
 11186  0018  281A               	goto	u213_20
 11187  0019                     u213_21:
 11188  0019  281E               	goto	i1l146
 11189  001A                     u213_20:
 11190  001A                     i1l3568:
 11191                           
 11192                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         INT_ISR();
 11193  001A  318A  22BE  3180   	fcall	_INT_ISR
 11194                           
 11195                           ;mcc_generated_files/interrupt_manager.c: 62:     }
 11196  001D  2849               	goto	i1l155
 11197  001E                     i1l146:	
 11198                           ;mcc_generated_files/interrupt_manager.c: 63:     else if(INTCONbits.IOCIE == 1 && INTCO
      +                          Nbits.IOCIF == 1)
 11199                           
 11200  001E  1D8B               	btfss	11,3	;volatile
 11201  001F  2821               	goto	u214_21
 11202  0020  2822               	goto	u214_20
 11203  0021                     u214_21:
 11204  0021  282A               	goto	i1l148
 11205  0022                     u214_20:
 11206  0022                     i1l3570:
 11207  0022  1C0B               	btfss	11,0	;volatile
 11208  0023  2825               	goto	u215_21
 11209  0024  2826               	goto	u215_20
 11210  0025                     u215_21:
 11211  0025  282A               	goto	i1l148
 11212  0026                     u215_20:
 11213  0026                     i1l3572:
 11214                           
 11215                           ;mcc_generated_files/interrupt_manager.c: 64:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 65:         PIN_MANAGER_IOC();
 11216  0026  318A  22B2  3180   	fcall	_PIN_MANAGER_IOC
 11217                           
 11218                           ;mcc_generated_files/interrupt_manager.c: 66:     }
 11219  0029  2849               	goto	i1l155
 11220  002A                     i1l148:	
 11221                           ;mcc_generated_files/interrupt_manager.c: 67:     else if(INTCONbits.PEIE == 1)
 11222                           
 11223  002A  1F0B               	btfss	11,6	;volatile
 11224  002B  282D               	goto	u216_21
 11225  002C  282E               	goto	u216_20
 11226  002D                     u216_21:
 11227  002D  2849               	goto	i1l147
 11228  002E                     u216_20:
 11229  002E                     i1l3574:
 11230                           
 11231                           ;mcc_generated_files/interrupt_manager.c: 68:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 69:         if(PIE2bits.TMR4IE == 1 && PIR2bits.TMR4IF == 1)
 11232  002E  0021               	movlb	1	; select bank1
 11233  002F  1C92               	btfss	18,1	;volatile
 11234  0030  2832               	goto	u217_21
 11235  0031  2833               	goto	u217_20
 11236  0032                     u217_21:
 11237  0032  283B               	goto	i1l152
 11238  0033                     u217_20:
 11239  0033                     i1l3576:
 11240  0033  0020               	movlb	0	; select bank0
 11241  0034  1C92               	btfss	18,1	;volatile
 11242  0035  2837               	goto	u218_21
 11243  0036  2838               	goto	u218_20
 11244  0037                     u218_21:
 11245  0037  283B               	goto	i1l152
 11246  0038                     u218_20:
 11247  0038                     i1l3578:
 11248                           
 11249                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             TMR4_ISR();
 11250  0038  318B  2356  3180   	fcall	_TMR4_ISR
 11251  003B                     i1l152:	
 11252                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 76:         }
 11253                           
 11254                           
 11255                           ;mcc_generated_files/interrupt_manager.c: 77:         if(PIE1bits.TMR1IE == 1 && PIR1bit
      +                          s.TMR1IF == 1) {
 11256  003B  0021               	movlb	1	; select bank1
 11257  003C  1C11               	btfss	17,0	;volatile
 11258  003D  283F               	goto	u219_21
 11259  003E  2840               	goto	u219_20
 11260  003F                     u219_21:
 11261  003F  2849               	goto	i1l147
 11262  0040                     u219_20:
 11263  0040                     i1l3580:
 11264  0040  0020               	movlb	0	; select bank0
 11265  0041  1C11               	btfss	17,0	;volatile
 11266  0042  2844               	goto	u220_21
 11267  0043  2845               	goto	u220_20
 11268  0044                     u220_21:
 11269  0044  2849               	goto	i1l147
 11270  0045                     u220_20:
 11271  0045                     i1l3582:
 11272                           
 11273                           ;mcc_generated_files/interrupt_manager.c: 78:             TMR1_ISR();
 11274  0045  318B  23D8  3180   	fcall	_TMR1_ISR
 11275  0048  2849               	goto	i1l155
 11276  0049                     i1l147:
 11277  0049                     i1l155:
 11278  0049  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 11279  004A  0009               	retfie
 11280  004B                     __end_of_INTERRUPT_InterruptManager:
 11281                           
 11282                           	psect	text52
 11283  0B56                     __ptext52:	
 11284 ;; *************** function _TMR4_ISR *****************
 11285 ;; Defined at:
 11286 ;;		line 120 in file "mcc_generated_files/tmr4.c"
 11287 ;; Parameters:    Size  Location     Type
 11288 ;;		None
 11289 ;; Auto vars:     Size  Location     Type
 11290 ;;		None
 11291 ;; Return value:  Size  Location     Type
 11292 ;;                  1    wreg      void 
 11293 ;; Registers used:
 11294 ;;		wreg, status,2, status,0, pclath, cstack
 11295 ;; Tracked objects:
 11296 ;;		On entry : 0/0
 11297 ;;		On exit  : 0/0
 11298 ;;		Unchanged: 0/0
 11299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11300 ;;      Params:         0       0       0       0       0       0       0       0
 11301 ;;      Locals:         0       0       0       0       0       0       0       0
 11302 ;;      Temps:          0       0       0       0       0       0       0       0
 11303 ;;      Totals:         0       0       0       0       0       0       0       0
 11304 ;;Total ram usage:        0 bytes
 11305 ;; Hardware stack levels used: 1
 11306 ;; Hardware stack levels required when called: 2
 11307 ;; This function calls:
 11308 ;;		Absolute function
 11309 ;;		_TMR4_DefaultInterruptHandler
 11310 ;; This function is called by:
 11311 ;;		_INTERRUPT_InterruptManager
 11312 ;; This function uses a non-reentrant model
 11313 ;;
 11314                           
 11315                           
 11316                           ;psect for function _TMR4_ISR
 11317  0B56                     _TMR4_ISR:
 11318  0B56                     i1l3228:	
 11319                           ;incstack = 0
 11320                           ; Regs used in _TMR4_ISR: [wreg+status,2+status,0+pclath+cstack]
 11321                           
 11322                           
 11323                           ;mcc_generated_files/tmr4.c: 124:     PIR2bits.TMR4IF = 0;
 11324  0B56  0020               	movlb	0	; select bank0
 11325  0B57  1092               	bcf	18,1	;volatile
 11326  0B58                     i1l3230:
 11327                           
 11328                           ;mcc_generated_files/tmr4.c: 126:     if(TMR4_InterruptHandler)
 11329  0B58  0021               	movlb	1	; select bank1
 11330  0B59  0854               	movf	_TMR4_InterruptHandler^(0+128),w
 11331  0B5A  0455               	iorwf	(_TMR4_InterruptHandler+1)^(0+128),w
 11332  0B5B  1903               	btfsc	3,2
 11333  0B5C  2B5E               	goto	u175_21
 11334  0B5D  2B5F               	goto	u175_20
 11335  0B5E                     u175_21:
 11336  0B5E  2B64               	goto	i1l421
 11337  0B5F                     u175_20:
 11338  0B5F                     i1l3232:
 11339                           
 11340                           ;mcc_generated_files/tmr4.c: 127:     {;mcc_generated_files/tmr4.c: 128:         TMR4_In
      +                          terruptHandler();
 11341  0B5F  0855               	movf	(_TMR4_InterruptHandler+1)^(0+128),w
 11342  0B60  008A               	movwf	10
 11343  0B61  0854               	movf	_TMR4_InterruptHandler^(0+128),w
 11344  0B62  000A               	callw
 11345  0B63  318B               	pagesel	$
 11346  0B64                     i1l421:
 11347  0B64  0008               	return
 11348  0B65                     __end_of_TMR4_ISR:
 11349                           
 11350                           	psect	text53
 11351  0EFF                     __ptext53:	
 11352 ;; *************** function _TMR4_DefaultInterruptHandler *****************
 11353 ;; Defined at:
 11354 ;;		line 147 in file "mcc_generated_files/tmr4.c"
 11355 ;; Parameters:    Size  Location     Type
 11356 ;;		None
 11357 ;; Auto vars:     Size  Location     Type
 11358 ;;		None
 11359 ;; Return value:  Size  Location     Type
 11360 ;;                  1    wreg      void 
 11361 ;; Registers used:
 11362 ;;		wreg, status,2, status,0, pclath, cstack
 11363 ;; Tracked objects:
 11364 ;;		On entry : 0/0
 11365 ;;		On exit  : 0/0
 11366 ;;		Unchanged: 0/0
 11367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11368 ;;      Params:         0       0       0       0       0       0       0       0
 11369 ;;      Locals:         0       0       0       0       0       0       0       0
 11370 ;;      Temps:          1       0       0       0       0       0       0       0
 11371 ;;      Totals:         1       0       0       0       0       0       0       0
 11372 ;;Total ram usage:        1 bytes
 11373 ;; Hardware stack levels used: 1
 11374 ;; Hardware stack levels required when called: 1
 11375 ;; This function calls:
 11376 ;;		_DAC_SetOutput
 11377 ;; This function is called by:
 11378 ;;		_TMR4_Initialize
 11379 ;;		_TMR4_ISR
 11380 ;; This function uses a non-reentrant model
 11381 ;;
 11382                           
 11383                           
 11384                           ;psect for function _TMR4_DefaultInterruptHandler
 11385  0EFF                     _TMR4_DefaultInterruptHandler:
 11386  0EFF                     i1l3026:	
 11387                           ;incstack = 0
 11388                           ; Regs used in _TMR4_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 11389                           
 11390                           
 11391                           ;mcc_generated_files/tmr4.c: 151:     if (dc_frequency_flag) {
 11392  0EFF  087A               	movf	_dc_frequency_flag,w
 11393  0F00  1903               	btfsc	3,2
 11394  0F01  2F03               	goto	u161_21
 11395  0F02  2F04               	goto	u161_20
 11396  0F03                     u161_21:
 11397  0F03  2F09               	goto	i1l3030
 11398  0F04                     u161_20:
 11399  0F04                     i1l3028:
 11400                           
 11401                           ;mcc_generated_files/tmr4.c: 152:         DAC_SetOutput(255);
 11402  0F04  30FF               	movlw	255
 11403  0F05  318A  22C3  318E   	fcall	_DAC_SetOutput
 11404                           
 11405                           ;mcc_generated_files/tmr4.c: 153:     }else{
 11406  0F08  2F40               	goto	i1l440
 11407  0F09                     i1l3030:
 11408                           
 11409                           ;mcc_generated_files/tmr4.c: 155:   if (currentIsOn){
 11410  0F09  0021               	movlb	1	; select bank1
 11411  0F0A  083D               	movf	_currentIsOn^(0+128),w
 11412  0F0B  1903               	btfsc	3,2
 11413  0F0C  2F0E               	goto	u162_21
 11414  0F0D  2F0F               	goto	u162_20
 11415  0F0E                     u162_21:
 11416  0F0E  2F15               	goto	i1l3036
 11417  0F0F                     u162_20:
 11418  0F0F                     i1l3032:
 11419                           
 11420                           ;mcc_generated_files/tmr4.c: 156:     currentIsOn = 0;
 11421  0F0F  01BD               	clrf	_currentIsOn^(0+128)
 11422  0F10                     i1l3034:
 11423                           
 11424                           ;mcc_generated_files/tmr4.c: 157:     DAC_SetOutput(255);
 11425  0F10  30FF               	movlw	255
 11426  0F11  318A  22C3  318E   	fcall	_DAC_SetOutput
 11427                           
 11428                           ;mcc_generated_files/tmr4.c: 161:   } else {
 11429  0F14  2F34               	goto	i1l3048
 11430  0F15                     i1l3036:
 11431                           
 11432                           ;mcc_generated_files/tmr4.c: 162:        if (PR4 == 255) {
 11433  0F15  0028               	movlb	8	; select bank8
 11434  0F16  0A16               	incf	22,w	;volatile
 11435  0F17  1D03               	btfss	3,2
 11436  0F18  2F1A               	goto	u163_21
 11437  0F19  2F1B               	goto	u163_20
 11438  0F1A                     u163_21:
 11439  0F1A  2F2D               	goto	i1l437
 11440  0F1B                     u163_20:
 11441  0F1B                     i1l3038:
 11442                           
 11443                           ;mcc_generated_files/tmr4.c: 163:             if (oneHzCounter == 81) {
 11444  0F1B  3051               	movlw	81
 11445  0F1C  0021               	movlb	1	; select bank1
 11446  0F1D  0630               	xorwf	_oneHzCounter^(0+128),w
 11447  0F1E  1D03               	btfss	3,2
 11448  0F1F  2F21               	goto	u164_21
 11449  0F20  2F22               	goto	u164_20
 11450  0F21                     u164_21:
 11451  0F21  2F28               	goto	i1l3044
 11452  0F22                     u164_20:
 11453  0F22                     i1l3040:
 11454                           
 11455                           ;mcc_generated_files/tmr4.c: 164:                 DAC_SetOutput(dac_value);
 11456  0F22  0831               	movf	_dac_value^(0+128),w
 11457  0F23  318A  22C3  318E   	fcall	_DAC_SetOutput
 11458  0F26                     i1l3042:
 11459                           
 11460                           ;mcc_generated_files/tmr4.c: 165:                 oneHzCounter = 0;
 11461  0F26  0021               	movlb	1	; select bank1
 11462  0F27  01B0               	clrf	_oneHzCounter^(0+128)
 11463  0F28                     i1l3044:
 11464                           
 11465                           ;mcc_generated_files/tmr4.c: 167:             oneHzCounter++;
 11466  0F28  3001               	movlw	1
 11467  0F29  00F1               	movwf	??_TMR4_DefaultInterruptHandler
 11468  0F2A  0871               	movf	??_TMR4_DefaultInterruptHandler,w
 11469  0F2B  07B0               	addwf	_oneHzCounter^(0+128),f
 11470                           
 11471                           ;mcc_generated_files/tmr4.c: 168:         } else {
 11472  0F2C  2F34               	goto	i1l3048
 11473  0F2D                     i1l437:
 11474                           
 11475                           ;mcc_generated_files/tmr4.c: 169:     currentIsOn = 1;
 11476  0F2D  0021               	movlb	1	; select bank1
 11477  0F2E  01BD               	clrf	_currentIsOn^(0+128)
 11478  0F2F  0ABD               	incf	_currentIsOn^(0+128),f
 11479  0F30                     i1l3046:
 11480                           
 11481                           ;mcc_generated_files/tmr4.c: 170:     DAC_SetOutput(dac_value);
 11482  0F30  0831               	movf	_dac_value^(0+128),w
 11483  0F31  318A  22C3  318E   	fcall	_DAC_SetOutput
 11484  0F34                     i1l3048:
 11485                           
 11486                           ;mcc_generated_files/tmr4.c: 173:   TMR1 = 65528;
 11487  0F34  30FF               	movlw	255
 11488  0F35  0020               	movlb	0	; select bank0
 11489  0F36  0097               	movwf	23	;volatile
 11490  0F37  30F8               	movlw	248
 11491  0F38  0096               	movwf	22	;volatile
 11492  0F39                     i1l3050:
 11493                           
 11494                           ;mcc_generated_files/tmr4.c: 175:   T1CONbits.TMR1ON = 1;
 11495  0F39  1418               	bsf	24,0	;volatile
 11496  0F3A                     i1l3052:
 11497                           
 11498                           ;mcc_generated_files/tmr4.c: 176:   LATBbits.LATB6 = 0;
 11499  0F3A  0022               	movlb	2	; select bank2
 11500  0F3B  130D               	bcf	13,6	;volatile
 11501  0F3C                     i1l3054:
 11502                           
 11503                           ;mcc_generated_files/tmr4.c: 177:   LATCbits.LATC0 = 0;
 11504  0F3C  100E               	bcf	14,0	;volatile
 11505  0F3D                     i1l3056:
 11506                           
 11507                           ;mcc_generated_files/tmr4.c: 178:   LATAbits.LATA4 = 0;
 11508  0F3D  120C               	bcf	12,4	;volatile
 11509  0F3E                     i1l3058:
 11510                           
 11511                           ;mcc_generated_files/tmr4.c: 179:   LATCbits.LATC1 = 0;
 11512  0F3E  108E               	bcf	14,1	;volatile
 11513  0F3F                     i1l3060:
 11514                           
 11515                           ;mcc_generated_files/tmr4.c: 180:   LATCbits.LATC7 = 0;
 11516  0F3F  138E               	bcf	14,7	;volatile
 11517  0F40                     i1l440:
 11518  0F40  0008               	return
 11519  0F41                     __end_of_TMR4_DefaultInterruptHandler:
 11520                           
 11521                           	psect	text54
 11522  0BD8                     __ptext54:	
 11523 ;; *************** function _TMR1_ISR *****************
 11524 ;; Defined at:
 11525 ;;		line 111 in file "tmr1.c"
 11526 ;; Parameters:    Size  Location     Type
 11527 ;;		None
 11528 ;; Auto vars:     Size  Location     Type
 11529 ;;		None
 11530 ;; Return value:  Size  Location     Type
 11531 ;;                  1    wreg      void 
 11532 ;; Registers used:
 11533 ;;		wreg, status,2, status,0, pclath, cstack
 11534 ;; Tracked objects:
 11535 ;;		On entry : 0/0
 11536 ;;		On exit  : 0/0
 11537 ;;		Unchanged: 0/0
 11538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11539 ;;      Params:         0       0       0       0       0       0       0       0
 11540 ;;      Locals:         0       0       0       0       0       0       0       0
 11541 ;;      Temps:          2       0       0       0       0       0       0       0
 11542 ;;      Totals:         2       0       0       0       0       0       0       0
 11543 ;;Total ram usage:        2 bytes
 11544 ;; Hardware stack levels used: 1
 11545 ;; Hardware stack levels required when called: 2
 11546 ;; This function calls:
 11547 ;;		Absolute function
 11548 ;;		_TMR1_DefaultInterruptHandler
 11549 ;; This function is called by:
 11550 ;;		_INTERRUPT_InterruptManager
 11551 ;; This function uses a non-reentrant model
 11552 ;;
 11553                           
 11554                           
 11555                           ;psect for function _TMR1_ISR
 11556  0BD8                     _TMR1_ISR:
 11557  0BD8                     i1l3234:	
 11558                           ;incstack = 0
 11559                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 11560                           
 11561                           
 11562                           ;tmr1.c: 115:     PIR1bits.TMR1IF = 0;
 11563  0BD8  0020               	movlb	0	; select bank0
 11564  0BD9  1011               	bcf	17,0	;volatile
 11565  0BDA                     i1l3236:
 11566                           
 11567                           ;tmr1.c: 117:     TMR1 = timer1ReloadVal;
 11568  0BDA  0021               	movlb	1	; select bank1
 11569  0BDB  0860               	movf	_timer1ReloadVal^(0+128),w	;volatile
 11570  0BDC  00F1               	movwf	??_TMR1_ISR
 11571  0BDD  01F2               	clrf	??_TMR1_ISR+1
 11572  0BDE  0871               	movf	??_TMR1_ISR,w
 11573  0BDF  0020               	movlb	0	; select bank0
 11574  0BE0  0096               	movwf	22	;volatile
 11575  0BE1  0872               	movf	??_TMR1_ISR+1,w
 11576  0BE2  0097               	movwf	23	;volatile
 11577  0BE3                     i1l3238:
 11578                           
 11579                           ;tmr1.c: 119:     if(TMR1_InterruptHandler)
 11580  0BE3  0021               	movlb	1	; select bank1
 11581  0BE4  0852               	movf	_TMR1_InterruptHandler^(0+128),w
 11582  0BE5  0453               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
 11583  0BE6  1903               	btfsc	3,2
 11584  0BE7  2BE9               	goto	u176_21
 11585  0BE8  2BEA               	goto	u176_20
 11586  0BE9                     u176_21:
 11587  0BE9  2BEF               	goto	i1l514
 11588  0BEA                     u176_20:
 11589  0BEA                     i1l3240:
 11590                           
 11591                           ;tmr1.c: 120:     {;tmr1.c: 121:         TMR1_InterruptHandler();
 11592  0BEA  0853               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
 11593  0BEB  008A               	movwf	10
 11594  0BEC  0852               	movf	_TMR1_InterruptHandler^(0+128),w
 11595  0BED  000A               	callw
 11596  0BEE  318B               	pagesel	$
 11597  0BEF                     i1l514:
 11598  0BEF  0008               	return
 11599  0BF0                     __end_of_TMR1_ISR:
 11600                           
 11601                           	psect	text55
 11602  0B0F                     __ptext55:	
 11603 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 11604 ;; Defined at:
 11605 ;;		line 132 in file "tmr1.c"
 11606 ;; Parameters:    Size  Location     Type
 11607 ;;		None
 11608 ;; Auto vars:     Size  Location     Type
 11609 ;;		None
 11610 ;; Return value:  Size  Location     Type
 11611 ;;                  1    wreg      void 
 11612 ;; Registers used:
 11613 ;;		wreg, status,2, status,0, pclath, cstack
 11614 ;; Tracked objects:
 11615 ;;		On entry : 0/0
 11616 ;;		On exit  : 0/0
 11617 ;;		Unchanged: 0/0
 11618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11619 ;;      Params:         0       0       0       0       0       0       0       0
 11620 ;;      Locals:         0       0       0       0       0       0       0       0
 11621 ;;      Temps:          0       0       0       0       0       0       0       0
 11622 ;;      Totals:         0       0       0       0       0       0       0       0
 11623 ;;Total ram usage:        0 bytes
 11624 ;; Hardware stack levels used: 1
 11625 ;; Hardware stack levels required when called: 1
 11626 ;; This function calls:
 11627 ;;		_DAC_SetOutput
 11628 ;; This function is called by:
 11629 ;;		_TMR1_Initialize
 11630 ;;		_TMR1_ISR
 11631 ;; This function uses a non-reentrant model
 11632 ;;
 11633                           
 11634                           
 11635                           ;psect for function _TMR1_DefaultInterruptHandler
 11636  0B0F                     _TMR1_DefaultInterruptHandler:
 11637  0B0F                     i1l3062:	
 11638                           ;incstack = 0
 11639                           ; Regs used in _TMR1_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 11640                           
 11641                           
 11642                           ;tmr1.c: 137:     T1CONbits.TMR1ON = 0;
 11643  0B0F  0020               	movlb	0	; select bank0
 11644  0B10  1018               	bcf	24,0	;volatile
 11645  0B11                     i1l3064:
 11646                           
 11647                           ;tmr1.c: 138:     DAC_SetOutput(255);
 11648  0B11  30FF               	movlw	255
 11649  0B12  318A  22C3  318B   	fcall	_DAC_SetOutput
 11650  0B15                     i1l520:
 11651  0B15  0008               	return
 11652  0B16                     __end_of_TMR1_DefaultInterruptHandler:
 11653                           
 11654                           	psect	text56
 11655  0AC3                     __ptext56:	
 11656 ;; *************** function _DAC_SetOutput *****************
 11657 ;; Defined at:
 11658 ;;		line 66 in file "mcc_generated_files/dac.c"
 11659 ;; Parameters:    Size  Location     Type
 11660 ;;  inputData       1    wreg     unsigned char 
 11661 ;; Auto vars:     Size  Location     Type
 11662 ;;  inputData       1    0[COMMON] unsigned char 
 11663 ;; Return value:  Size  Location     Type
 11664 ;;                  1    wreg      void 
 11665 ;; Registers used:
 11666 ;;		wreg
 11667 ;; Tracked objects:
 11668 ;;		On entry : 0/0
 11669 ;;		On exit  : 0/0
 11670 ;;		Unchanged: 0/0
 11671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11672 ;;      Params:         0       0       0       0       0       0       0       0
 11673 ;;      Locals:         1       0       0       0       0       0       0       0
 11674 ;;      Temps:          0       0       0       0       0       0       0       0
 11675 ;;      Totals:         1       0       0       0       0       0       0       0
 11676 ;;Total ram usage:        1 bytes
 11677 ;; Hardware stack levels used: 1
 11678 ;; This function calls:
 11679 ;;		Nothing
 11680 ;; This function is called by:
 11681 ;;		_TMR4_DefaultInterruptHandler
 11682 ;;		_TMR1_DefaultInterruptHandler
 11683 ;; This function uses a non-reentrant model
 11684 ;;
 11685                           
 11686                           
 11687                           ;psect for function _DAC_SetOutput
 11688  0AC3                     _DAC_SetOutput:
 11689                           
 11690                           ;incstack = 0
 11691                           ; Regs used in _DAC_SetOutput: [wreg]
 11692                           ;DAC_SetOutput@inputData stored from wreg
 11693  0AC3  00F0               	movwf	DAC_SetOutput@inputData
 11694  0AC4                     i1l2676:
 11695                           
 11696                           ;mcc_generated_files/dac.c: 66: void DAC_SetOutput(uint8_t inputData);mcc_generated_file
      +                          s/dac.c: 67: {;mcc_generated_files/dac.c: 68:     DAC1CON1 = inputData;
 11697  0AC4  0870               	movf	DAC_SetOutput@inputData,w
 11698  0AC5  0022               	movlb	2	; select bank2
 11699  0AC6  0099               	movwf	25	;volatile
 11700  0AC7                     i1l10:
 11701  0AC7  0008               	return
 11702  0AC8                     __end_of_DAC_SetOutput:
 11703                           
 11704                           	psect	text57
 11705  0B65                     __ptext57:	
 11706 ;; *************** function _TMR0_ISR *****************
 11707 ;; Defined at:
 11708 ;;		line 109 in file "mcc_generated_files/tmr0.c"
 11709 ;; Parameters:    Size  Location     Type
 11710 ;;		None
 11711 ;; Auto vars:     Size  Location     Type
 11712 ;;		None
 11713 ;; Return value:  Size  Location     Type
 11714 ;;                  1    wreg      void 
 11715 ;; Registers used:
 11716 ;;		wreg, status,2, status,0, pclath, cstack
 11717 ;; Tracked objects:
 11718 ;;		On entry : 0/0
 11719 ;;		On exit  : 0/0
 11720 ;;		Unchanged: 0/0
 11721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11722 ;;      Params:         0       0       0       0       0       0       0       0
 11723 ;;      Locals:         0       0       0       0       0       0       0       0
 11724 ;;      Temps:          0       0       0       0       0       0       0       0
 11725 ;;      Totals:         0       0       0       0       0       0       0       0
 11726 ;;Total ram usage:        0 bytes
 11727 ;; Hardware stack levels used: 1
 11728 ;; Hardware stack levels required when called: 1
 11729 ;; This function calls:
 11730 ;;		Absolute function
 11731 ;;		_TMR0_DefaultInterruptHandler
 11732 ;; This function is called by:
 11733 ;;		_INTERRUPT_InterruptManager
 11734 ;; This function uses a non-reentrant model
 11735 ;;
 11736                           
 11737                           
 11738                           ;psect for function _TMR0_ISR
 11739  0B65                     _TMR0_ISR:
 11740  0B65                     i1l3216:	
 11741                           ;incstack = 0
 11742                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 11743                           
 11744                           
 11745                           ;mcc_generated_files/tmr0.c: 113:     INTCONbits.TMR0IF = 0;
 11746  0B65  110B               	bcf	11,2	;volatile
 11747  0B66                     i1l3218:
 11748                           
 11749                           ;mcc_generated_files/tmr0.c: 115:     TMR0 = timer0ReloadVal;
 11750  0B66  0879               	movf	_timer0ReloadVal,w	;volatile
 11751  0B67  0020               	movlb	0	; select bank0
 11752  0B68  0095               	movwf	21	;volatile
 11753  0B69                     i1l3220:
 11754                           
 11755                           ;mcc_generated_files/tmr0.c: 117:     if(TMR0_InterruptHandler)
 11756  0B69  0021               	movlb	1	; select bank1
 11757  0B6A  0856               	movf	_TMR0_InterruptHandler^(0+128),w
 11758  0B6B  0457               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 11759  0B6C  1903               	btfsc	3,2
 11760  0B6D  2B6F               	goto	u174_21
 11761  0B6E  2B70               	goto	u174_20
 11762  0B6F                     u174_21:
 11763  0B6F  2B75               	goto	i1l359
 11764  0B70                     u174_20:
 11765  0B70                     i1l3222:
 11766                           
 11767                           ;mcc_generated_files/tmr0.c: 118:     {;mcc_generated_files/tmr0.c: 119:         TMR0_In
      +                          terruptHandler();
 11768  0B70  0857               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 11769  0B71  008A               	movwf	10
 11770  0B72  0856               	movf	_TMR0_InterruptHandler^(0+128),w
 11771  0B73  000A               	callw
 11772  0B74  318B               	pagesel	$
 11773  0B75                     i1l359:
 11774  0B75  0008               	return
 11775  0B76                     __end_of_TMR0_ISR:
 11776                           
 11777                           	psect	text58
 11778  0002                     __ptext58:	
 11779 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 11780 ;; Defined at:
 11781 ;;		line 130 in file "mcc_generated_files/tmr0.c"
 11782 ;; Parameters:    Size  Location     Type
 11783 ;;		None
 11784 ;; Auto vars:     Size  Location     Type
 11785 ;;		None
 11786 ;; Return value:  Size  Location     Type
 11787 ;;                  1    wreg      void 
 11788 ;; Registers used:
 11789 ;;		None
 11790 ;; Tracked objects:
 11791 ;;		On entry : 0/0
 11792 ;;		On exit  : 0/0
 11793 ;;		Unchanged: 0/0
 11794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11795 ;;      Params:         0       0       0       0       0       0       0       0
 11796 ;;      Locals:         0       0       0       0       0       0       0       0
 11797 ;;      Temps:          0       0       0       0       0       0       0       0
 11798 ;;      Totals:         0       0       0       0       0       0       0       0
 11799 ;;Total ram usage:        0 bytes
 11800 ;; Hardware stack levels used: 1
 11801 ;; This function calls:
 11802 ;;		Nothing
 11803 ;; This function is called by:
 11804 ;;		_TMR0_Initialize
 11805 ;;		_TMR0_ISR
 11806 ;; This function uses a non-reentrant model
 11807 ;;
 11808                           
 11809                           
 11810                           ;psect for function _TMR0_DefaultInterruptHandler
 11811  0002                     _TMR0_DefaultInterruptHandler:
 11812  0002                     i1l365:	
 11813                           ;incstack = 0
 11814                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 11815                           
 11816  0002  0008               	return
 11817  0003                     __end_of_TMR0_DefaultInterruptHandler:
 11818                           
 11819                           	psect	text59
 11820  0AB2                     __ptext59:	
 11821 ;; *************** function _PIN_MANAGER_IOC *****************
 11822 ;; Defined at:
 11823 ;;		line 121 in file "mcc_generated_files/pin_manager.c"
 11824 ;; Parameters:    Size  Location     Type
 11825 ;;		None
 11826 ;; Auto vars:     Size  Location     Type
 11827 ;;		None
 11828 ;; Return value:  Size  Location     Type
 11829 ;;                  1    wreg      void 
 11830 ;; Registers used:
 11831 ;;		None
 11832 ;; Tracked objects:
 11833 ;;		On entry : 0/0
 11834 ;;		On exit  : 0/0
 11835 ;;		Unchanged: 0/0
 11836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11837 ;;      Params:         0       0       0       0       0       0       0       0
 11838 ;;      Locals:         0       0       0       0       0       0       0       0
 11839 ;;      Temps:          0       0       0       0       0       0       0       0
 11840 ;;      Totals:         0       0       0       0       0       0       0       0
 11841 ;;Total ram usage:        0 bytes
 11842 ;; Hardware stack levels used: 1
 11843 ;; This function calls:
 11844 ;;		Nothing
 11845 ;; This function is called by:
 11846 ;;		_INTERRUPT_InterruptManager
 11847 ;; This function uses a non-reentrant model
 11848 ;;
 11849                           
 11850                           
 11851                           ;psect for function _PIN_MANAGER_IOC
 11852  0AB2                     _PIN_MANAGER_IOC:
 11853  0AB2                     i1l114:	
 11854                           ;incstack = 0
 11855                           ; Regs used in _PIN_MANAGER_IOC: []
 11856                           
 11857  0AB2  0008               	return
 11858  0AB3                     __end_of_PIN_MANAGER_IOC:
 11859                           
 11860                           	psect	text60
 11861  0ABE                     __ptext60:	
 11862 ;; *************** function _INT_ISR *****************
 11863 ;; Defined at:
 11864 ;;		line 54 in file "mcc_generated_files/ext_int.c"
 11865 ;; Parameters:    Size  Location     Type
 11866 ;;		None
 11867 ;; Auto vars:     Size  Location     Type
 11868 ;;		None
 11869 ;; Return value:  Size  Location     Type
 11870 ;;                  1    wreg      void 
 11871 ;; Registers used:
 11872 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11873 ;; Tracked objects:
 11874 ;;		On entry : 0/0
 11875 ;;		On exit  : 0/0
 11876 ;;		Unchanged: 0/0
 11877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11878 ;;      Params:         0       0       0       0       0       0       0       0
 11879 ;;      Locals:         0       0       0       0       0       0       0       0
 11880 ;;      Temps:          0       0       0       0       0       0       0       0
 11881 ;;      Totals:         0       0       0       0       0       0       0       0
 11882 ;;Total ram usage:        0 bytes
 11883 ;; Hardware stack levels used: 1
 11884 ;; Hardware stack levels required when called: 2
 11885 ;; This function calls:
 11886 ;;		_INT_CallBack
 11887 ;; This function is called by:
 11888 ;;		_INTERRUPT_InterruptManager
 11889 ;; This function uses a non-reentrant model
 11890 ;;
 11891                           
 11892                           
 11893                           ;psect for function _INT_ISR
 11894  0ABE                     _INT_ISR:
 11895  0ABE                     i1l3224:	
 11896                           ;incstack = 0
 11897                           ; Regs used in _INT_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11898                           
 11899                           
 11900                           ;mcc_generated_files/ext_int.c: 56:     (INTCONbits.INTF = 0);
 11901  0ABE  108B               	bcf	11,1	;volatile
 11902  0ABF                     i1l3226:
 11903                           
 11904                           ;mcc_generated_files/ext_int.c: 59:     INT_CallBack();
 11905  0ABF  318B  233C  318A   	fcall	_INT_CallBack
 11906  0AC2                     i1l264:
 11907  0AC2  0008               	return
 11908  0AC3                     __end_of_INT_ISR:
 11909                           
 11910                           	psect	text61
 11911  0B3C                     __ptext61:	
 11912 ;; *************** function _INT_CallBack *****************
 11913 ;; Defined at:
 11914 ;;		line 62 in file "mcc_generated_files/ext_int.c"
 11915 ;; Parameters:    Size  Location     Type
 11916 ;;		None
 11917 ;; Auto vars:     Size  Location     Type
 11918 ;;		None
 11919 ;; Return value:  Size  Location     Type
 11920 ;;                  1    wreg      void 
 11921 ;; Registers used:
 11922 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11923 ;; Tracked objects:
 11924 ;;		On entry : 0/0
 11925 ;;		On exit  : 0/0
 11926 ;;		Unchanged: 0/0
 11927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11928 ;;      Params:         0       0       0       0       0       0       0       0
 11929 ;;      Locals:         0       0       0       0       0       0       0       0
 11930 ;;      Temps:          0       0       0       0       0       0       0       0
 11931 ;;      Totals:         0       0       0       0       0       0       0       0
 11932 ;;Total ram usage:        0 bytes
 11933 ;; Hardware stack levels used: 1
 11934 ;; Hardware stack levels required when called: 1
 11935 ;; This function calls:
 11936 ;;		Absolute function
 11937 ;;		_INT_DefaultInterruptHandler
 11938 ;; This function is called by:
 11939 ;;		_INT_ISR
 11940 ;; This function uses a non-reentrant model
 11941 ;;
 11942                           
 11943                           
 11944                           ;psect for function _INT_CallBack
 11945  0B3C                     _INT_CallBack:
 11946  0B3C                     i1l3022:	
 11947                           ;incstack = 0
 11948                           ; Regs used in _INT_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11949                           
 11950                           
 11951                           ;mcc_generated_files/ext_int.c: 65:     if(INT_InterruptHandler)
 11952  0B3C  0021               	movlb	1	; select bank1
 11953  0B3D  0858               	movf	_INT_InterruptHandler^(0+128),w
 11954  0B3E  0459               	iorwf	(_INT_InterruptHandler+1)^(0+128),w
 11955  0B3F  1903               	btfsc	3,2
 11956  0B40  2B42               	goto	u160_21
 11957  0B41  2B43               	goto	u160_20
 11958  0B42                     u160_21:
 11959  0B42  2B48               	goto	i1l268
 11960  0B43                     u160_20:
 11961  0B43                     i1l3024:
 11962                           
 11963                           ;mcc_generated_files/ext_int.c: 66:     {;mcc_generated_files/ext_int.c: 67:         INT
      +                          _InterruptHandler();
 11964  0B43  0859               	movf	(_INT_InterruptHandler+1)^(0+128),w
 11965  0B44  008A               	movwf	10
 11966  0B45  0858               	movf	_INT_InterruptHandler^(0+128),w
 11967  0B46  000A               	callw
 11968  0B47  318B               	pagesel	$
 11969  0B48                     i1l268:
 11970  0B48  0008               	return
 11971  0B49                     __end_of_INT_CallBack:
 11972                           
 11973                           	psect	text62
 11974  0672                     __ptext62:	
 11975 ;; *************** function _INT_DefaultInterruptHandler *****************
 11976 ;; Defined at:
 11977 ;;		line 75 in file "mcc_generated_files/ext_int.c"
 11978 ;; Parameters:    Size  Location     Type
 11979 ;;		None
 11980 ;; Auto vars:     Size  Location     Type
 11981 ;;  time            1    2[COMMON] unsigned char 
 11982 ;; Return value:  Size  Location     Type
 11983 ;;                  1    wreg      void 
 11984 ;; Registers used:
 11985 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11986 ;; Tracked objects:
 11987 ;;		On entry : 0/0
 11988 ;;		On exit  : 0/0
 11989 ;;		Unchanged: 0/0
 11990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11991 ;;      Params:         0       0       0       0       0       0       0       0
 11992 ;;      Locals:         1       0       0       0       0       0       0       0
 11993 ;;      Temps:          2       0       0       0       0       0       0       0
 11994 ;;      Totals:         3       0       0       0       0       0       0       0
 11995 ;;Total ram usage:        3 bytes
 11996 ;; Hardware stack levels used: 1
 11997 ;; This function calls:
 11998 ;;		Nothing
 11999 ;; This function is called by:
 12000 ;;		_EXT_INT_Initialize
 12001 ;;		_INT_CallBack
 12002 ;; This function uses a non-reentrant model
 12003 ;;
 12004                           
 12005                           
 12006                           ;psect for function _INT_DefaultInterruptHandler
 12007  0672                     _INT_DefaultInterruptHandler:
 12008  0672                     i1l2686:	
 12009                           ;incstack = 0
 12010                           ; Regs used in _INT_DefaultInterruptHandler: [wreg-fsr0h+status,2+status,0]
 12011                           
 12012                           
 12013                           ;mcc_generated_files/ext_int.c: 77:   uint8_t time = TMR0;
 12014  0672  0020               	movlb	0	; select bank0
 12015  0673  0815               	movf	21,w	;volatile
 12016  0674  00F0               	movwf	??_INT_DefaultInterruptHandler
 12017  0675  0870               	movf	??_INT_DefaultInterruptHandler,w
 12018  0676  00F2               	movwf	INT_DefaultInterruptHandler@time
 12019  0677                     i1l2688:
 12020                           
 12021                           ;mcc_generated_files/ext_int.c: 78:   TMR0 = 0;
 12022  0677  0195               	clrf	21	;volatile
 12023  0678                     i1l2690:
 12024                           
 12025                           ;mcc_generated_files/ext_int.c: 81:   if (INTCONbits.TMR0IF){
 12026  0678  1D0B               	btfss	11,2	;volatile
 12027  0679  2E7B               	goto	u122_21
 12028  067A  2E7C               	goto	u122_20
 12029  067B                     u122_21:
 12030  067B  2E7D               	goto	i1l2694
 12031  067C                     u122_20:
 12032  067C                     i1l2692:
 12033                           
 12034                           ;mcc_generated_files/ext_int.c: 82:     time = 0;
 12035  067C  01F2               	clrf	INT_DefaultInterruptHandler@time
 12036  067D                     i1l2694:
 12037                           
 12038                           ;mcc_generated_files/ext_int.c: 84:   INTCONbits.TMR0IF = 0;
 12039  067D  110B               	bcf	11,2	;volatile
 12040                           
 12041                           ;mcc_generated_files/ext_int.c: 86:   switch(ir_code.state){
 12042  067E  2EC8               	goto	i1l2732
 12043  067F                     i1l2696:
 12044                           
 12045                           ;mcc_generated_files/ext_int.c: 89:     if (time >= 180 && time <= 243){
 12046  067F  30B4               	movlw	180
 12047  0680  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12048  0681  1C03               	skipc
 12049  0682  2E84               	goto	u123_21
 12050  0683  2E85               	goto	u123_20
 12051  0684                     u123_21:
 12052  0684  2EDC               	goto	i1l278
 12053  0685                     u123_20:
 12054  0685                     i1l2698:
 12055  0685  30F4               	movlw	244
 12056  0686  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12057  0687  1803               	skipnc
 12058  0688  2E8A               	goto	u124_21
 12059  0689  2E8B               	goto	u124_20
 12060  068A                     u124_21:
 12061  068A  2EDC               	goto	i1l278
 12062  068B                     u124_20:
 12063  068B                     i1l2700:
 12064                           
 12065                           ;mcc_generated_files/ext_int.c: 90:       ir_code.n_bits = 0;
 12066  068B  01B3               	clrf	_ir_code^(0+128)
 12067  068C                     i1l2702:
 12068                           
 12069                           ;mcc_generated_files/ext_int.c: 91:       ir_code.state = STATE_RECEIVING;
 12070  068C  01B4               	clrf	(_ir_code^(0+128)+1)
 12071  068D  0AB4               	incf	(_ir_code^(0+128)+1),f
 12072  068E  2EDC               	goto	i1l278
 12073  068F                     i1l2704:
 12074                           
 12075                           ;mcc_generated_files/ext_int.c: 99:     ir_code.code <<= 1;
 12076  068F  3001               	movlw	1
 12077  0690                     u125_25:
 12078  0690  35B5               	lslf	(_ir_code^(0+128)+2),f
 12079  0691  0DB6               	rlf	((_ir_code+1)^(0+128)+2),f
 12080  0692  0DB7               	rlf	((_ir_code+2)^(0+128)+2),f
 12081  0693  0DB8               	rlf	((_ir_code+3)^(0+128)+2),f
 12082  0694  0B89               	decfsz	9,f
 12083  0695  2E90               	goto	u125_25
 12084  0696                     i1l2706:
 12085                           
 12086                           ;mcc_generated_files/ext_int.c: 100:     if (time >= 29 && time <= 41){
 12087  0696  301D               	movlw	29
 12088  0697  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12089  0698  1C03               	skipc
 12090  0699  2E9B               	goto	u126_21
 12091  069A  2E9C               	goto	u126_20
 12092  069B                     u126_21:
 12093  069B  2EA8               	goto	i1l2714
 12094  069C                     u126_20:
 12095  069C                     i1l2708:
 12096  069C  302A               	movlw	42
 12097  069D  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12098  069E  1803               	skipnc
 12099  069F  2EA1               	goto	u127_21
 12100  06A0  2EA2               	goto	u127_20
 12101  06A1                     u127_21:
 12102  06A1  2EA8               	goto	i1l2714
 12103  06A2                     u127_20:
 12104  06A2                     i1l2710:
 12105                           
 12106                           ;mcc_generated_files/ext_int.c: 104:       ir_code.code |= 1;
 12107  06A2  1435               	bsf	(_ir_code^(0+128)+2),0
 12108  06A3                     i1l2712:
 12109                           
 12110                           ;mcc_generated_files/ext_int.c: 105:       ir_code.n_bits++;
 12111  06A3  3001               	movlw	1
 12112  06A4  00F0               	movwf	??_INT_DefaultInterruptHandler
 12113  06A5  0870               	movf	??_INT_DefaultInterruptHandler,w
 12114  06A6  07B3               	addwf	_ir_code^(0+128),f
 12115                           
 12116                           ;mcc_generated_files/ext_int.c: 106:     } else if (time >= 14 && time <= 20){
 12117  06A7  2EB7               	goto	i1l2722
 12118  06A8                     i1l2714:
 12119  06A8  300E               	movlw	14
 12120  06A9  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12121  06AA  1C03               	skipc
 12122  06AB  2EAD               	goto	u128_21
 12123  06AC  2EAE               	goto	u128_20
 12124  06AD                     u128_21:
 12125  06AD  2EB5               	goto	i1l2720
 12126  06AE                     u128_20:
 12127  06AE                     i1l2716:
 12128  06AE  3015               	movlw	21
 12129  06AF  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12130  06B0  1803               	skipnc
 12131  06B1  2EB3               	goto	u129_21
 12132  06B2  2EB4               	goto	u129_20
 12133  06B3                     u129_21:
 12134  06B3  2EB5               	goto	i1l2720
 12135  06B4                     u129_20:
 12136  06B4  2EA3               	goto	i1l2712
 12137  06B5                     i1l2720:
 12138                           
 12139                           ;mcc_generated_files/ext_int.c: 113:       ir_code.state = STATE_RESET;
 12140  06B5  01B4               	clrf	(_ir_code^(0+128)+1)
 12141                           
 12142                           ;mcc_generated_files/ext_int.c: 114:       break;
 12143  06B6  2EDC               	goto	i1l278
 12144  06B7                     i1l2722:
 12145                           
 12146                           ;mcc_generated_files/ext_int.c: 116:     if (32 == ir_code.n_bits){
 12147  06B7  3020               	movlw	32
 12148  06B8  0633               	xorwf	_ir_code^(0+128),w
 12149  06B9  1D03               	btfss	3,2
 12150  06BA  2EBC               	goto	u130_21
 12151  06BB  2EBD               	goto	u130_20
 12152  06BC                     u130_21:
 12153  06BC  2EDC               	goto	i1l278
 12154  06BD                     u130_20:
 12155  06BD                     i1l2724:
 12156                           
 12157                           ;mcc_generated_files/ext_int.c: 119:       if (ir_code.command == ((~ir_code.command_b) 
      +                          & 0xff)){
 12158  06BD  0935               	comf	(_ir_code^(0+128)+2),w
 12159  06BE  0636               	xorwf	(_ir_code^(0+128)+3),w
 12160  06BF  1D03               	skipz
 12161  06C0  2EC2               	goto	u131_21
 12162  06C1  2EC3               	goto	u131_20
 12163  06C2                     u131_21:
 12164  06C2  2EB5               	goto	i1l2720
 12165  06C3                     u131_20:
 12166  06C3                     i1l2726:
 12167                           
 12168                           ;mcc_generated_files/ext_int.c: 120:         ir_code.state = STATE_DONE;
 12169  06C3  3002               	movlw	2
 12170  06C4  00F0               	movwf	??_INT_DefaultInterruptHandler
 12171  06C5  0870               	movf	??_INT_DefaultInterruptHandler,w
 12172  06C6  00B4               	movwf	(_ir_code^(0+128)+1)
 12173                           
 12174                           ;mcc_generated_files/ext_int.c: 121:       } else {
 12175  06C7  2EDC               	goto	i1l278
 12176  06C8                     i1l2732:
 12177  06C8  0021               	movlb	1	; select bank1
 12178  06C9  0834               	movf	(_ir_code^(0+128)+1),w
 12179  06CA  00F0               	movwf	??_INT_DefaultInterruptHandler
 12180  06CB  01F1               	clrf	??_INT_DefaultInterruptHandler+1
 12181                           
 12182                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12183                           ; Switch size 1, requested type "simple"
 12184                           ; Number of cases is 1, Range of values is 0 to 0
 12185                           ; switch strategies available:
 12186                           ; Name         Instructions Cycles
 12187                           ; simple_byte            4     3 (average)
 12188                           ; direct_byte            8     6 (fixed)
 12189                           ; jumptable            260     6 (fixed)
 12190                           ;	Chosen strategy is simple_byte
 12191  06CC  0871               	movf	??_INT_DefaultInterruptHandler+1,w
 12192  06CD  3A00               	xorlw	0	; case 0
 12193  06CE  1903               	skipnz
 12194  06CF  2ED1               	goto	i1l4488
 12195  06D0  2EB5               	goto	i1l2720
 12196  06D1                     i1l4488:
 12197                           
 12198                           ; Switch size 1, requested type "simple"
 12199                           ; Number of cases is 3, Range of values is 0 to 2
 12200                           ; switch strategies available:
 12201                           ; Name         Instructions Cycles
 12202                           ; simple_byte           10     6 (average)
 12203                           ; direct_byte           12     6 (fixed)
 12204                           ; jumptable            260     6 (fixed)
 12205                           ;	Chosen strategy is simple_byte
 12206  06D1  0870               	movf	??_INT_DefaultInterruptHandler,w
 12207  06D2  3A00               	xorlw	0	; case 0
 12208  06D3  1903               	skipnz
 12209  06D4  2E7F               	goto	i1l2696
 12210  06D5  3A01               	xorlw	1	; case 1
 12211  06D6  1903               	skipnz
 12212  06D7  2E8F               	goto	i1l2704
 12213  06D8  3A03               	xorlw	3	; case 2
 12214  06D9  1903               	skipnz
 12215  06DA  2EDC               	goto	i1l278
 12216  06DB  2EB5               	goto	i1l2720
 12217  06DC                     i1l278:
 12218                           
 12219                           ;mcc_generated_files/ext_int.c: 135:   INTCONbits.INTF = 0;
 12220  06DC  108B               	bcf	11,1	;volatile
 12221  06DD                     i1l289:
 12222  06DD  0008               	return
 12223  06DE                     __end_of_INT_DefaultInterruptHandler:
 12224  007E                     btemp	set	126	;btemp
 12225  007E                     int$flags	set	126
 12226  007E                     wtemp0	set	126
 12227                           
 12228                           	psect	config
 12229                           
 12230                           ;Config register CONFIG1 @ 0x8007
 12231                           ;	Oscillator Selection Bits
 12232                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 12233                           ;	Watchdog Timer Enable
 12234                           ;	WDTE = 0x1, user specified literal
 12235                           ;	Power-up Timer Enable
 12236                           ;	PWRTE = OFF, PWRT disabled
 12237                           ;	MCLR Pin Function Select
 12238                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 12239                           ;	Flash Program Memory Code Protection
 12240                           ;	CP = OFF, Program memory code protection is disabled
 12241                           ;	Brown-out Reset Enable
 12242                           ;	BOREN = OFF, Brown-out Reset disabled
 12243                           ;	Clock Out Enable
 12244                           ;	CLKOUTEN = ON, CLKOUT function is enabled on the CLKOUT pin
 12245                           ;	Internal/External Switchover Mode
 12246                           ;	IESO = OFF, Internal/External Switchover Mode is disabled
 12247                           ;	Fail-Safe Clock Monitor Enable
 12248                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 12249  8007                     	org	32775
 12250  8007  21EC               	dw	8684
 12251                           
 12252                           ;Config register CONFIG2 @ 0x8008
 12253                           ;	Flash Memory Self-Write Protection
 12254                           ;	WRT = OFF, Write protection off
 12255                           ;	Peripheral Pin Select one-way control
 12256                           ;	PPS1WAY = ON, The PPSLOCK bit cannot be cleared once it is set by software
 12257                           ;	Zero-cross detect disable
 12258                           ;	ZCDDIS = ON, Zero-cross detect circuit is disabled at POR
 12259                           ;	Phase Lock Loop enable
 12260                           ;	PLLEN = OFF, 4x PLL is enabled when software sets the SPLLEN bit
 12261                           ;	Stack Overflow/Underflow Reset Enable
 12262                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 12263                           ;	Brown-out Reset Voltage Selection
 12264                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 12265                           ;	Low-Power Brown Out Reset
 12266                           ;	LPBOR = OFF, Low-Power BOR is disabled
 12267                           ;	Low-Voltage Programming Enable
 12268                           ;	LVP = ON, Low-voltage programming enabled
 12269  8008                     	org	32776
 12270  8008  3EFF               	dw	16127

Data Sizes:
    Strings     128
    Constant    4
    Data        46
    BSS         92
    Persistent  51
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     80      80
    BANK1            80      8      77
    BANK2            80      0      52
    BANK3            80      0      33
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    S1953_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_7(CODE[25]), STR_6(CODE[25]), STR_5(CODE[23]), STR_4(CODE[20]), 
		 -> STR_3(CODE[20]), STR_2(CODE[19]), STR_1(CODE[21]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 25
		 -> STR_7(CODE[25]), STR_6(CODE[25]), STR_5(CODE[23]), STR_4(CODE[20]), 
		 -> STR_3(CODE[20]), STR_2(CODE[19]), STR_1(CODE[21]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_7(CODE[25]), STR_6(CODE[25]), STR_5(CODE[23]), STR_4(CODE[20]), 
		 -> STR_3(CODE[20]), STR_2(CODE[19]), STR_1(CODE[21]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    process_remote_command@code	PTR struct . size(1) Largest target is 6
		 -> ir_code(BANK1[6]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 64
		 -> writePersistentState@buf(BANK0[64]), 

    TMR4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _startUp->_setLEDColor
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _setCurrent->___awdiv
    _selectSomething->_setLEDColor
    _vfpfcnvrt->_fputc
    _fputc->_putch
    _putch->_EUSART_Write
    ___aldiv->___awdiv
    _lowBattery->_setLEDColor
    _SYSTEM_Initialize->_TMR1_Initialize
    _TMR4_Initialize->_TMR4_SetInterruptHandler
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_TMR1_ISR
    _TMR4_ISR->_TMR4_DefaultInterruptHandler
    _TMR4_DefaultInterruptHandler->_DAC_SetOutput
    _TMR1_DefaultInterruptHandler->_DAC_SetOutput
    _INT_CallBack->_INT_DefaultInterruptHandler

Critical Paths under _main in BANK0

    _process_remote_command->_writePersistentState
    _writePersistentState->_FLASH_WriteBlock
    _setFrequency->___aldiv
    _setCurrent->_battery_voltage
    _selectIncrease->_printf
    _selectFrequencyValue->_printf
    _selectFrequency->_printf
    _selectDecrease->_printf
    _selectCurrentValue->_printf
    _selectCurrent->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_fputc
    _battery_voltage->___aldiv
    ___aldiv->___lmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_process_remote_command

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  104555
                                              3 BANK1      5     5      0
                     _DAC_Initialize
                   _LATCH_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
                  _SYSTEM_Initialize
                    _battery_voltage
                            _initLED
                         _lowBattery
             _process_remote_command
                _readPersistentState
                         _setCurrent
                       _setFrequency
                            _startUp
 ---------------------------------------------------------------------------------
 (1) _startUp                                              4     4      0    6142
                                              0 BANK0      4     4      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (1) _readPersistentState                                  2     2      0       0
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _process_remote_command                               3     3      0   80284
                                              0 BANK1      3     3      0
                    _battery_voltage
                      _selectCurrent
                 _selectCurrentValue
                     _selectDecrease
                    _selectFrequency
               _selectFrequencyValue
                     _selectIncrease
                    _selectSomething
                         _setCurrent
                       _setFrequency
                        _setLEDColor
               _writePersistentState
 ---------------------------------------------------------------------------------
 (2) _writePersistentState                                70    70      0    1464
                                             10 BANK0     70    70      0
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    10     7      3    1140
                                              0 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     3     1      2     215
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _setFrequency                                         5     3      2    3632
                                             23 BANK0      5     3      2
            _TMR4_LoadPeriodRegister
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) _TMR4_LoadPeriodRegister                              1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setCurrent                                          16    12      4    6046
                                             25 BANK0     16    12      4
                            ___aldiv
                            ___awdiv
                             ___lmul
                    _battery_voltage (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     612
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     683
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _selectSomething                                      2     2      0    6074
                                              0 BANK0      2     2      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectIncrease                                       2     2      0    9254
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectFrequencyValue                                 2     2      0    9254
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectFrequency                                      2     2      0    9254
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectDecrease                                       1     1      0    9254
                                             25 BANK0      1     1      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectCurrentValue                                   2     2      0    9254
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectCurrent                                        2     2      0    9254
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (3) _printf                                               6     4      2    3180
                                             21 BANK0      4     2      2
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             8     5      3    2272
                                             13 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           40    38      2    1759
                                              5 BANK0      8     6      2
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                8     5      3    1158
                                              5 COMMON     3     0      3
                                              0 BANK0      5     5      0
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0      62
                                              4 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (8) _EUSART_Write                                         1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _battery_voltage                                      2     0      2    1397
                                             23 BANK0      2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8    1397
                                              8 BANK0     15     7      8
                            ___awdiv (ARG)
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _lowBattery                                           2     2      0    6074
                                              0 BANK0      2     2      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _setLEDColor                                          4     2      2    6074
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLED                                              1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     875
                     _DAC_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0     125
           _TMR4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR4_SetInterruptHandler                             2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      1     1      0     125
                                              5 COMMON     1     1      0
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     125
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     125
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     375
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LATCH_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           0     0      0     178
                            _INT_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                           _TMR1_ISR
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR4_ISR                                            0     0      0      22
                   Absolute function *
       _TMR4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR4_DefaultInterruptHandler                        1     1      0      22
                                              1 COMMON     1     1      0
                      _DAC_SetOutput
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            2     2      0      22
                                              1 COMMON     2     2      0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR1_DefaultInterruptHandler                        0     0      0      22
                      _DAC_SetOutput
 ---------------------------------------------------------------------------------
 (12) _DAC_SetOutput                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT_ISR                                             0     0      0     134
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (11) _INT_CallBack                                        0     0      0     134
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (12) _INT_DefaultInterruptHandler                         3     3      0     134
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DAC_Initialize
   _LATCH_Initialize
   _OPA1_Initialize
   _OPA2_Initialize
   _SYSTEM_Initialize
     _DAC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OPA1_Initialize
     _OPA2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
     _TMR4_Initialize
       _TMR4_SetInterruptHandler
     _WDT_Initialize
   _battery_voltage
     ___aldiv
       ___awdiv (ARG)
       ___lmul (ARG)
   _initLED
   _lowBattery
     _setLEDColor
   _process_remote_command
     _battery_voltage
     _selectCurrent
       _printf
         _vfprintf
           _vfpfcnvrt
             _fputc
               _putch
                 _EUSART_Write
       _setLEDColor
     _selectCurrentValue
       _printf
       _setLEDColor
     _selectDecrease
       _printf
       _setLEDColor
     _selectFrequency
       _printf
       _setLEDColor
     _selectFrequencyValue
       _printf
       _setLEDColor
     _selectIncrease
       _printf
       _setLEDColor
     _selectSomething
       _setLEDColor
     _setCurrent
       ___aldiv
       ___awdiv
       ___lmul
       _battery_voltage (ARG)
     _setFrequency
       _TMR4_LoadPeriodRegister
       ___aldiv
       ___lmul
     _setLEDColor
     _writePersistentState
       _FLASH_WriteBlock
         _FLASH_EraseBlock
   _readPersistentState
   _setCurrent
   _setFrequency
   _startUp
     _setLEDColor

 _INTERRUPT_InterruptManager (ROOT)
   _INT_ISR
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
   _TMR1_ISR
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
       _DAC_SetOutput
   _TMR4_ISR
     Absolute function(Fake) *
     _TMR4_DefaultInterruptHandler *
       _DAC_SetOutput

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      FD       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     50      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      8      4D       8       96.2%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      34      10       65.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      21      12       41.2%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      FD      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Oct 27 12:26:42 2021

                                            l7 0AD2                                             l50 0CC5  
                                           l53 0B1D                                             l56 0AB5  
                                 ___awdiv@sign 0021                        __end_of_OPA1_Initialize 0ABA  
                              _timer0ReloadVal 0079                        __size_of_selectIncrease 0025  
                                          l111 0E1B                                            l222 0B27  
                                          l119 0AB9                                            l231 0B02  
                                          l305 0B25                                            l225 0B2F  
                                          l402 0BAC                                            l243 0ADE  
                                          l501 0C07                                            l246 0AE4  
                                          l271 0AEA                                            l424 0AFC  
                                          l249 0AD8                                            l329 0ABD  
                                          l417 0ACC                                            l362 0AF0  
                                          l346 0B87                                            l292 0B3B  
                                          l517 0AF6                                            l198 0C7E  
                                          l702 0743                                            l471 061C  
                                          l472 0671                                            l642 0E24  
                                          l474 0669                                            l634 0C5C  
                                          l651 0F84                                            l644 0E29  
                                          l645 0E30                                            l670 0D8B  
                                          l478 0C3C                                            l647 0E34  
                                          l639 07FF                                            l656 0BD7  
                                          l648 0E4E                                            l664 0EBE  
                                          l673 0D38                                            l659 0DB7  
                                          l907 050B                                            l667 0FDF  
                                          l755 03BC                                            l676 0CEA  
                                          l917 0587                                            l685 0D61  
                                          l758 0B55                                            l679 0CA0  
                                          l695 0461                                            l688 0D10  
                                          l856 0E82                                            l698 071E  
                                          l995 07A3                                            _PR2 001B  
                                          _PR4 0416                          ?_selectFrequencyValue 0070  
                              _timer1ReloadVal 00E0                 ?_EUSART_SetFramingErrorHandler 0073  
                              _TMR2_Initialize 0B1E                                            wreg 0009  
                                  main@batt_mv 00EB                 FLASH_WriteBlock@flashWordArray 0022  
                     __size_of_selectFrequency 002A                                           l3000 0B7B  
                                         l1305 0B99                                           l3010 0C5D  
                                         l3002 0B7D                                           l3020 0C7C  
                                         l3012 0C66                                           l3004 0B7E  
                                         l3014 0C67                                           l3006 0B7F  
                                         l3016 0C6E                                           l3008 0B80  
                                         l3200 0CAD                                           l1344 0DE8  
                                         l4000 0F85                                           l3018 0C75  
                                         l3210 0CBC                                           l3202 0CB0  
                                         l1338 0605                                           l4010 0FD2  
                                         l4002 0F92                                           l3212 0CBF  
                                         l3204 0CB3                                           l4100 0DAA  
                                         l1356 0EFE                                           l4020 0D11  
                                         l4012 0D62                                           l4004 0F9F  
                                         l3214 0CC2                                           l3206 0CB6  
                                         l4022 0D13                                           l4014 0D67  
                                         l4030 0CC6                                           l4006 0FB2  
                                         l4110 0E94                                           l4102 0E83  
                                         l3208 0CB9                                           l4024 0D1D  
                                         l4040 0C89                                           l4016 0D70  
                                         l4032 0CD3                                           l4008 0FBF  
                                         l4200 0190                                           l4120 00A6  
                                         l4112 0E9D                                           l4026 0D2A  
                                         l4050 0D53                                           l4042 0C92  
                                         l4018 0D83                                           l4034 0CDC  
                                         l4210 01B1                                           l4202 0193  
                                         l4122 00AB                                           l4130 00CA  
                                         l4114 0089                                           l3260 0F48  
                                         l4028 0D30                                           l4052 0D59  
                                         l4044 0C98                                           l4060 0D08  
                                         l4036 0CE2                                           l4300 02E1  
                                         l4220 01CE                                           l4212 01B5  
                                         l4204 0196                                           l4140 00EE  
                                         l4132 00D0                                           l4124 00AF  
                                         l4116 0090                                           l4108 0E87  
                                         l3270 0F55                                           l3262 0F49  
                                         l4046 0D39                                           l4038 0C7F  
                                         l4054 0CEB                                           l4070 045A  
                                         l4062 03BD                                           l4310 0305  
                                         l4302 02E6                                           l4230 01F2  
                                         l4222 01D3                                           l4214 01BB  
                                         l4206 019B                                           l4150 010D  
                                         l4142 00FC                                           l4134 00E2  
                                         l4126 00B2                                           l4118 0095  
                                         l3254 0C3D                                           l3280 0F62  
                                         l3272 0F56                                           l3264 0F4B  
                                         l3256 0F41                                           l4048 0D46  
                                         l4056 0CF5                                           l4072 045C  
                                         l4064 0443                                           l4080 072C  
                                         l4320 0330                                           l4312 0310  
                                         l4304 02F9                                           l4240 021D  
                                         l4232 01FD                                           l4224 01E6  
                                         l4216 01C6                                           l4208 01AE  
                                         l4160 0120                                           l4152 0111  
                                         l4136 00E7                                           l4144 00FF  
                                         l4128 00C7                                           l4400 049B  
                                         l3194 0CA1                                           l3290 0F6F  
                                         l3282 0F65                                           l3274 0F5B  
                                         l3266 0F51                                           l3258 0F44  
                                         l4058 0D02                                           l4066 0450  
                                         l4090 0741                                           l4082 0731  
                                         l4074 06DE                                           l4330 034C  
                                         l4314 0315                                           l4250 0239  
                                         l4234 0202                                           l4218 01CB  
                                         l4170 0145                                           l4162 0124  
                                         l4154 0116                                           l4146 0104  
                                         l4138 00EB                                           l4410 04BA  
                                         l4402 049C                                           l2740 0AEB  
                                         l3196 0CA7                                           l3292 0F71  
                                         l3284 0F67                                           l3276 0F5D  
                                         l3268 0F53                                           l4068 0455  
                                         l4092 0742                                           l4084 0732  
                                         l4076 070C                                           l4332 034F  
                                         l4324 0336                                           l4316 0318  
                                         l4308 02FF                                           l4260 025A  
                                         l4252 023C                                           l4244 0223  
                                         l4236 0205                                           l4228 01EC  
                                         l4180 0157                                           l4172 014A  
                                         l4164 0127                                           l4156 011A  
                                         l4148 0107                                           l4420 04E8  
                                         l4412 04C0                                           l4404 049F  
                                         l2742 0AF7                                           l3198 0CAA  
                                         l3294 0F76                                           l3286 0F69  
                                         l3278 0F5F                                           l4094 0D8C  
                                         l3710 0B27                                           l4086 0737  
                                         l4078 0719                                           l4334 0354  
                                         l4326 033C                                           l4318 031D  
                                         l4270 0278                                           l4262 0260  
                                         l4254 0241                                           l4246 0229  
                                         l4238 020A                                           l4182 0165  
                                         l4174 014E                                           l4166 013C  
                                         l4158 011E                                           l4342 036D  
                                         l4422 04EF                                           l4414 04C3  
                                         l4406 04A2                                           l2680 0ADF  
                                         l2920 0DF0                                           l3296 0F7B  
                                         l3288 0F6A                                           l4096 0D91  
                                         l3712 0B2C                                           l3720 0EC9  
                                         l4088 073E                                           l3800 0606  
                                         l4336 0367                                           l4328 0347  
                                         l4280 02A2                                           l4272 028B  
                                         l4264 026B                                           l4256 0254  
                                         l4248 0234                                           l4192 0177  
                                         l4176 0150                                           l4184 0168  
                                         l4168 013F                                           l4344 03A3  
                                         l4424 04F3                                           l4416 04D0  
                                         l4408 04AD                                           l2914 0ACD  
                                         l2682 0AD3                                           l2930 0DFA  
                                         l2922 0DF2                                           l4098 0D97  
                                         l3714 0AFE                                           l3722 0ECE  
                                         l3730 058A                                           l3810 0624  
                                         l3802 060D                                           l4346 03A9  
                                         l4282 02A7                                           l4266 0270  
                                         l4194 017B                                           l4186 016D  
                                         l4178 0154                                           l4418 04D3  
                                         l2684 0AE5                                           l2940 0E02  
                                         l2932 0DFC                                           l2924 0DF4  
                                         l2916 0DE9                                           l3900 053C  
                                         l3724 0ED8                                           l3716 0EBF  
                                         l3740 05BE                                           l3732 059B  
                                         l3812 0626                                           l3804 0611  
                                         l4348 03B6                                           l4292 02C8  
                                         l4284 02AA                                           l4276 0291  
                                         l4268 0273                                           l4196 017F  
                                         l4188 0170                                           l4380 0462  
                                         l3558 0B49                                           l2678 0AD9  
                                         l2950 0B1A                                           l2942 0E03  
                                         l2934 0DFD                                           l2926 0DF7  
                                         l2918 0DED                                           l3910 0562  
                                         l3902 0540                                           l3726 0EF6  
                                         l3718 0EC4                                           l3750 05DF  
                                         l3742 05C6                                           l3734 05A3  
                                         l3830 0649                                           l3822 062A  
                                         l3814 0627                                           l4294 02CE  
                                         l4286 02AF                                           l4278 0297  
                                         l4198 0185                                           l4390 0471  
                                         l4382 0465                                           l2952 0B1B  
                                         l2944 0E12                                           l2936 0DFE  
                                         l2928 0DF9                                           l2960 0B9D  
                                         l3912 0569                                           l3904 0547  
                                         l3744 05D1                                           l3736 05A8  
                                         l3840 0659                                           l3832 0650  
                                         l3824 062D                                           l3816 0628  
                                         l3808 061D                                           l4296 02D9  
                                         l4288 02C2                                           l4392 0474  
                                         l4384 0468                                           l2970 0ABA  
                                         l2946 0B16                                           l2938 0E00  
                                         l2962 0B9E                                           l2954 0AB3  
                                         l3850 0BC2                                           l3906 0559  
                                         l3914 056F                                           l3738 05AC  
                                         l3754 05E2                                           l3930 0751  
                                         l3922 0744                                           l3770 0C2B  
                                         l3762 0C21                                           l3842 065F  
                                         l3834 0652                                           l3826 0631  
                                         l4298 02DE                                           l4394 0477  
                                         l4386 046B                                           l2956 0AB6  
                                         l2948 0B19                                           l2796 0AF1  
                                         l2980 0BFE                                           l2972 0BF0  
                                         l2964 0BA0                                           l3860 0BD5  
                                         l3852 0BC7                                           l3916 0574  
                                         l3908 0561                                           l3756 05FB  
                                         l3748 05D7                                           l3940 0766  
                                         l3932 0755                                           l3924 0746  
                                         l3780 0C34                                           l3772 0C2C  
                                         l3764 0C25                                           l3844 0663  
                                         l3836 0657                                           l3828 063B  
                                         l4396 048C                                           l4388 046E  
                                         l2982 0C00                                           l2974 0BF5  
                                         l2990 0B23                                           l2966 0BA2  
                                         l2958 0B9A                                           l3854 0BCA  
                                         l3918 057F                                           l3790 0DC2  
                                         l3862 0B88                                           l3950 0785  
                                         l3942 0769                                           l3934 075A  
                                         l3926 074A                                           l3870 0E57  
                                         l3782 0C35                                           l3774 0C2D  
                                         l3766 0C26                                           l3846 066B  
                                         l3838 0658                                           l4486 037A  
                                         l4398 049A                                           l2992 0B30  
                                         l2976 0BFA                                           l2984 0B1E  
                                         l2968 0BA9                                           l3856 0BCF  
                                         l3792 0DD6                                           l3864 0B8D  
                                         l3960 079A                                           l3952 0789  
                                         l3944 076E                                           l3936 075E  
                                         l3928 074F                                           l3872 0E5C  
                                         l3784 0C37                                           l3776 0C32  
                                         l3768 0C29                                           l2994 0B33  
                                         l2978 0BFC                                           l2986 0B21  
                                         l3858 0BD2                                           l3890 051A  
                                         l3882 04F8                                           l3794 0DE0  
                                         l3786 0DBA                                           l3962 079F  
                                         l3954 078A                                           l3946 0772  
                                         l3938 0760                                           l3874 0E64  
                                         l3778 0C33                                           l2996 0B3A  
                                         l2988 0B22                                           l3892 051E  
                                         l3884 04FA                                           l3788 0DBE  
                                         l3956 078F                                           l3948 0776  
                                         l3876 0E6B                                           l3868 0E4F  
                                         l3980 07B3                                           l3972 07A6  
                                         l2998 0B76                                           l3894 0526  
                                         l3886 04FE                                           l3958 0795  
                                         l3878 0E7A                                           l3798 0AC9  
                                         l3990 07F0                                           l3982 07C3  
                                         l3974 07A8                                           l3966 07A4  
                                         l3896 052E                                           l3888 050F  
                                         l3992 07F4                                           l3984 07C7  
                                         l3976 07AC                                           l3898 0531  
                                         l3994 0E1C                                           l3986 07DF  
                                         l3978 07B2                                           l3996 0E35  
                                         l3988 07E3                                           STR_1 0830  
                                         STR_2 086D                                           STR_3 0859  
                                         STR_4 0845                                           STR_5 0819  
                                         STR_6 0800                                           STR_7 0800  
                                         u3000 0354                                           u3001 0353  
                                         u2300 059B                                           u3020 04BA  
                                         u2301 059A                                           u3021 04B9  
                                         _LATA 010C                                           u2310 05BE  
                                         u3030 04D0                                           _LATB 010D  
                              __end_of_INT_ISR 0AC3                                           u2311 05BD  
                                         u3031 04CF                                           _LATC 010E  
                                         u2320 0DE0                                           u2400 0E7A  
                                         u3040 04EF                                           u2321 0DDF  
                                         u2401 0E79                                           u3041 04EE  
                                         u3025 04B6                                           u2410 04FE  
                                         u2250 0B2C                                           u2330 061B  
                                         u2411 04FD                                           u2251 0B2B  
                                         u3107 0FC5                                           u2331 061A  
                                         u3035 04CC                                           u2500 0574  
                                         u2420 050F                                           u2260 0EC4  
                                         u2340 0650                                           u2501 0573  
                                         u2421 050E                                           u2261 0EC3  
                                         u3117 0FD8                                           u2341 064F  
                                         u2430 052E                                           u2270 0EC9  
                                         u2510 074A                                           u2350 0669  
                                         u2431 052D                                           u2271 0EC8  
                                         u3127 0CD7                                           u2511 0749  
                                         u2351 0668                                           u2335 0617  
                                         u2360 0BC7                                           u2280 0ED8  
                                         u2600 079A                                           u2520 0755  
                                         u2361 0BC6                                           u2281 0ED7  
                                         u3137 0CFB                                           u2601 0799  
                                         u2521 0754                                           u3057 0E98  
                                         u2450 0540                                           u2290 0EF6  
                                         u2530 0766                                           u2370 0E5C  
                                         u2610 07B2                                           u2451 053F  
                                         u2291 0EF5                                           u3147 0D76  
                                         u2531 0765                                           u2371 0E5B  
                                         u2611 07B1                                           u3067 0EA7  
                                         u2620 0E29                                           u2700 0EBE  
                                         u2445 0532                                           u2621 0E28  
                                         u3157 0C8D                                           u3077 03AF  
                                         u2701 0EBD                                           u2470 0559  
                                         u2630 0E34                                           u2550 0776  
                                         u2710 0095                                           u2471 0558  
                                         u2631 0E33                                           u2295 0EF2  
                                         u3167 0D4C                                           u3087 0F98  
                                         u2551 0775                                           u2711 0094  
                                         u2640 0429                                           u2800 014E  
                                         u2720 00A6                                           u2465 0541  
                                         u3177 0D23                                           u3097 0FAB  
                                         u2545 076A                                           u2385 0E65  
                                         u2801 014D                                           u2721 00A5  
                                         u2705 0EBA                                           u2490 056F  
                                         u2570 0785                                           u2650 0450  
                                         u2810 016D                                           u2730 00D0  
                                         u3187 0D9D                                           u2491 056E  
                                         u2475 0555                                           u2571 0784  
                                         u2395 0E6C                                           u2651 044F  
                                         u2811 016C                                           u2731 00CF  
                                         u2660 045A                                           u2900 0241  
                                         u2820 0176                                           u2740 00E2  
                                         u3197 0DB0                                           u2485 0563  
                                         u2565 0777                                           u2661 0459  
                                         u2645 0425                                           u2901 0240  
                                         u2821 0175                                           u2741 00E1  
                                         u2725 00A2                                           u2590 0795  
                                         u2670 0719                                           u2910 0260  
                                         u2830 0185                                           u2750 0104  
                                         u2591 0794                                           u2575 0781  
                                         u2655 044C                                           u2671 0718  
                                         u2911 025F                                           u2831 0184  
                                         u2751 0103                                           u2680 072C  
                                         u2920 0278                                           u2840 019B  
                                         u2760 010D                                           u2585 078B  
                                         u2681 072B                                           u2921 0277  
                                         u2841 019A                                           u2761 010C  
                                         u2745 00DE                                           i1l10 0AC7  
                                         u2690 073E                                           u2930 0297  
                                         u2850 01BB                                           u2770 0116  
                                         u2691 073D                                           u2675 0715  
                                         u2931 0296                                           u2851 01BA  
                                         u2771 0115                                           u2940 02AF  
                                         u2860 01D3                                           u2780 011E  
                                         u2685 0728                                           u2941 02AE  
                                         u2861 01D2                                           u2781 011D  
                                         u2950 02CE                                           u2870 01F2  
                                         u2790 0145                                           u2951 02CD  
                                         u2871 01F1                                           u2791 0144  
                                         u2960 02E6                                           u2880 020A  
                                         u2961 02E5                                           u2881 0209  
                                         u2970 0305                                           u2890 0229  
                                         u2971 0304                                           u2891 0228  
                                         u2980 031D                                           u2981 031C  
                                         u2990 033C                                           u2991 033B  
                                         _TMR0 0015                                           _TMR1 0016  
                                         _TMR2 001A                                           _TMR4 0415  
                      __end_of_OPA2_Initialize 0ABE                                           _WPUA 020C  
                                         _WPUB 020D                                           _WPUC 020E  
                                         _dbuf 0120                                           _main 0462  
                                         _prec 00A4                                           _nout 00A0  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E                              ?_FLASH_WriteBlock 0020  
          __end_of_INT_DefaultInterruptHandler 06DE                    _INT_DefaultInterruptHandler 0672  
                                         start 004B                __end_of_INT_SetInterruptHandler 0AEB  
                           ??_FLASH_WriteBlock 0023                     ??_TMR1_SetInterruptHandler 0075  
                   ??_TMR4_SetInterruptHandler 0075                        __end_of_TMR0_Initialize 0B88  
               ??_TMR0_DefaultInterruptHandler 0070                                  ?_EUSART_Write 0070  
               __size_of_OSCILLATOR_Initialize 0008                  __end_of_OSCILLATOR_Initialize 0B1E  
                              __end_of___aldiv 0588                                          ?_main 0070  
                              __end_of___awdiv 07A4                                          _ADRES 009B  
                              ___awdiv@divisor 0073                                          _T2CON 001C  
                                        _T4CON 0417                                          i1l114 0AB2  
                                        i1l152 003B                                          i1l144 0012  
                                        i1l146 001E                                          i1l147 0049  
                                        i1l155 0049                                          i1l148 002A  
                                        i1l421 0B64                                          i1l264 0AC2  
                                        i1l520 0B15                                          i1l440 0F40  
                                        i1l514 0BEF                                          i1l268 0B48  
                                        i1l365 0002                                          i1l437 0F2D  
                                        i1l278 06DC                                          i1l359 0B75  
                                        i1l289 06DD                                   ?_setLEDColor 0073  
                              ___awdiv@counter 0020                                   vfpfcnvrt@fmt 0025  
                     __size_of_selectSomething 005B                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        _RXPPS 0E24              __size_of_TMR0_SetInterruptHandler 0006  
                              _TMR4_Initialize 0B9A                            ___lmul@multiplicand 0024  
                    ?_TMR0_SetInterruptHandler 0073                               __end_of_TMR0_ISR 0B76  
                             __end_of_TMR1_ISR 0BF0                               __end_of_TMR4_ISR 0B65  
                              __end_of_initLED 0F85                        __end_of_PIN_MANAGER_IOC 0AB3  
                                        _flags 00A6                                 _WDT_Initialize 0AB3  
                                        _fputc 0EBF                            _readPersistentState 0C3D  
                                        _width 00A2                                          _putch 0AFD  
                                        _stats 01A0                        __end_of_TMR1_Initialize 0C08  
                                        pclath 000A                                __end_of_startUp 0EBF  
                                        status 0003                        ?_process_remote_command 0070  
                                        wtemp0 007E                               ??_DAC_Initialize 0073  
                              __initialization 004D                                   __end_of_main 04F8  
                         ?_readPersistentState 0070                          __end_of_selectCurrent 0D39  
                               ??_EUSART_Write 0073                        __end_of_TMR2_Initialize 0B26  
                  ?_INTERRUPT_InterruptManager 0070                               ?_OPA1_Initialize 0070  
                       ??_selectFrequencyValue 0039                                         ??_main 00E8  
                     __size_of_battery_voltage 0033                  __size_of_writePersistentState 005C  
                     ?_TMR4_LoadPeriodRegister 0070                         __end_of_WDT_Initialize 0AB6  
                                    ??_INT_ISR 0073              _EUSART_DefaultFramingErrorHandler 0000  
                                       _ADCON0 009D                                         _ADCON1 009E  
                   _EUSART_OverrunErrorHandler 00DC                      FLASH_WriteBlock@writeAddr 0020  
                                       ?_fputc 0075                                         _CCPR1L 0291  
                             ___awdiv@dividend 0075                                         _ANSELA 018C  
                                       ?_putch 0070                                         _ANSELB 018D  
                                       _ANSELC 018E                                         _BORCON 0116  
                                       _RC1REG 0199                                         _RA5PPS 0E95  
                                       _RC1STA 019D                                         _RC4PPS 0EA4  
                                       _RB7PPS 0E9F                                         _RC5PPS 0EA5  
                                       i1l3022 0B3C                                         i1l3030 0F09  
                                       i1l3024 0B43                                         i1l3040 0F22  
                                       i1l3032 0F0F                                         _ODCONA 028C  
                                       i1l3050 0F39                                         i1l3042 0F26  
                                       i1l3034 0F10                                         i1l3026 0EFF  
                                       _ODCONB 028D                                         _ODCONC 028E  
                                       i1l3220 0B69                                         i1l3060 0F3F  
                                       i1l3052 0F3A                                         i1l3044 0F28  
                                       i1l3036 0F15                                         i1l3028 0F04  
                                       i1l3222 0B70                                         i1l3062 0B0F  
                                       i1l3054 0F3C                                         i1l3046 0F30  
                                       i1l3038 0F1B                                         i1l3230 0B58  
                                       i1l3224 0ABE                                         i1l3216 0B65  
                                       i1l3064 0B11                                         i1l3240 0BEA  
                                       i1l3056 0F3D                                         i1l3048 0F34  
                                       i1l3232 0B5F                                         i1l3226 0ABF  
                                       i1l3218 0B66                                         i1l3234 0BD8  
                                       i1l3058 0F3E                 __end_of_process_remote_command 03BD  
                                       i1l2700 068B                                         i1l3236 0BDA  
                                       i1l3228 0B56                                         i1l2710 06A2  
                                       i1l2702 068C                                         i1l3238 0BE3  
                                       u130_20 06BD                                         i1l2720 06B5  
                                       i1l2712 06A3                                         i1l2704 068F  
                                       u122_20 067C                                         u210_20 000A  
                                       u130_21 06BC                                         u122_21 067B  
                                       u210_21 0009                                         i1l2722 06B7  
                                       i1l2714 06A8                                         i1l2706 0696  
                                       i1l2724 06BD                                         i1l2716 06AE  
                                       i1l2708 069C                                         i1l2732 06C8  
                                       i1l2726 06C3                                         u131_20 06C3  
                                       u123_20 0685                                         u211_20 000E  
                                       i1l3560 0006                                         u131_21 06C2  
                                       u123_21 0684                                         u211_21 000D  
                                       i1l2690 0678                                         i1l3570 0022  
                                       i1l3562 000A                                         i1l2692 067C  
                                       i1l2676 0AC4                                         i1l3580 0040  
                                       i1l3572 0026                                         i1l3564 000E  
                                       i1l2694 067D                                         i1l2686 0672  
                                       i1l3582 0045                                         i1l3574 002E  
                                       i1l3566 0016                                         u124_20 068B  
                                       i1l2696 067F                                         i1l2688 0677  
                                       u220_20 0045                                         i1l3576 0033  
                                       i1l3568 001A                                         u212_20 0016  
                                       u124_21 068A                                         u220_21 0044  
                                       u212_21 0015                                         i1l2698 0685  
                                       i1l3578 0038                                         i1l4488 06D1  
                                       u213_20 001A                                         u213_21 0019  
                                       u125_25 0690                                         u126_20 069C  
                                       u214_20 0022                                         u126_21 069B  
                                       u214_21 0021                                         u127_20 06A2  
                                       u215_20 0026                                         u127_21 06A1  
                                       u215_21 0025                                         u128_20 06AE  
                                       u160_20 0B43                                         u216_20 002E  
                                       u128_21 06AD                                         u160_21 0B42  
                                       u216_21 002D                                         _INLVLA 038C  
                                       _INLVLB 038D                                         _INLVLC 038E  
                                       u129_20 06B4                                         u161_20 0F04  
                                       u217_20 0033                                         u129_21 06B3  
                                       u161_21 0F03                                         u217_21 0032  
                                       u162_20 0F0F                                         u218_20 0038  
                                       u162_21 0F0E                                         u218_21 0037  
                                       u163_20 0F1B                                         u219_20 0040  
                                       _FVRCON 0117                                         u163_21 0F1A  
                                       u219_21 003F                                         u164_20 0F22  
                                       u164_21 0F21                                         u174_20 0B70  
                                       u174_21 0B6F                                         u175_20 0B5F  
                                       u175_21 0B5E                                         u176_20 0BEA  
                                       u176_21 0BE9                                         _INTPPS 0E10  
                                       _PMADRH 0192                                         _PMADRL 0191  
                             ?_OPA2_Initialize 0070                                         _PMDATH 0194  
                                       _PMDATL 0193                                         _PMCON2 0196  
                    __size_of_FLASH_EraseBlock 001C                                         _OSCCON 0099  
                                       _TX1REG 019A                                         _WDTCON 0097  
                                       _TX1STA 019E                               _LATCH_Initialize 0B49  
                            ??_selectFrequency 0039                                 _selectDecrease 0C7F  
                                       _Vdd_mv 00A8           __end_of_TMR1_DefaultInterruptHandler 0B16  
        __size_of_TMR1_DefaultInterruptHandler 0007                   _TMR1_DefaultInterruptHandler 0B0F  
                                 vfprintf@cfmt 0033                          ??_readPersistentState 0073  
                                       ___lmul 0E4F                                      ??___aldiv 0030  
                                    ??___awdiv 0077                               ?_TMR0_Initialize 0070  
                      __end_of_TMR4_Initialize 0BAD                               ___awdiv@quotient 0022  
                               _selectIncrease 0CC6                                         _printf 0B88  
                                ?_INT_CallBack 0070                                      ??_initLED 0073  
         __end_of_TMR4_DefaultInterruptHandler 0F41          __size_of_TMR4_DefaultInterruptHandler 0042  
                 _TMR4_DefaultInterruptHandler 0EFF                                         fputc@c 0075  
                                 __pdataCOMMON 007A                               setCurrent@Vdd_mv 003B  
                              ?_WDT_Initialize 0070                     __end_of_selectCurrentValue 0D62  
             __size_of_INT_SetInterruptHandler 0006                               __end_of_vfprintf 0DE9  
                                    ??_startUp 0020       TMR1_SetInterruptHandler@InterruptHandler 0073  
     TMR4_SetInterruptHandler@InterruptHandler 0073       TMR0_SetInterruptHandler@InterruptHandler 0073  
      INT_SetInterruptHandler@InterruptHandler 0073                               ?_PIN_MANAGER_IOC 0070  
                            ??_selectSomething 0020                               ?_TMR1_Initialize 0070  
                            _SYSTEM_Initialize 0CA1                        __end_of__initialization 0083  
                       __end_of_selectDecrease 0CA1                             ?_SYSTEM_Initialize 0070  
                       DAC_SetOutput@inputData 0070                              _dc_frequency_flag 007A  
                               __pcstackCOMMON 0070                                   __pidataBANK1 0C08  
                                 __pidataBANK2 0BAD                            ??_SYSTEM_Initialize 0076  
                                    ?_TMR0_ISR 0070                                      ?_TMR1_ISR 0070  
                ?_TMR1_DefaultInterruptHandler 0070                                      ?_TMR4_ISR 0070  
                       __end_of_selectIncrease 0CEB                                  __end_of_fputc 0EFF  
                                __end_of_putch 0B03                               ?_TMR2_Initialize 0070  
              __end_of_TMR4_LoadPeriodRegister 0ACD                          main@low_reading_count 00E9  
                               ??_INT_CallBack 0073                    __size_of_EXT_INT_Initialize 000C  
                               _OPTION_REGbits 0095                  ?_TMR4_DefaultInterruptHandler 0070  
                       __size_of_DAC_SetOutput 0005                           __size_of_setLEDColor 0017  
                  FLASH_WriteBlock@GIEBitValue 0028                ??_EUSART_SetOverrunErrorHandler 0075  
                            ??_battery_voltage 0078                                        ??_fputc 0020  
                    __end_of_SYSTEM_Initialize 0CC6                                        ??_putch 0074  
                                ?_setFrequency 0037                                     __pbssBANK1 00A0  
                                   __pbssBANK2 0120                                     __pbssBANK3 01A0  
                         __end_of_EUSART_Write 0B30                                ?_selectDecrease 0070  
                        _TMR4_InterruptHandler 00D4                                     __pmaintext 0462  
             __end_of_TMR0_SetInterruptHandler 0AF1                                        ?___lmul 0020  
                                   ??_TMR0_ISR 0070                                     ??_TMR1_ISR 0071  
                                   ??_TMR4_ISR 0072                                     __pintentry 0004  
                              ?_selectIncrease 0070                                 ___lmul@product 0073  
                             ?_TMR4_Initialize 0070                                        ?_printf 0035  
                    __size_of_FLASH_WriteBlock 006C                                        _OPA1CON 0511  
                                      _OPA2CON 0515                                        _LED_red 00AE  
                                      _SP1BRGH 019C                                        _SP1BRGL 019B  
                                      _INT_ISR 0ABE                             __size_of_vfpfcnvrt 007E  
                            _maxFrequencyIndex 00B9                                        _OSCSTAT 009A  
                                      _OSCTUNE 0098                                        _PWM3DCH 0618  
                                      _PWM4DCH 061B                                        _SLRCONA 030C  
                                      _SLRCONB 030D                                        _SLRCONC 030E  
                     ??_EUSART_SetErrorHandler 0075                                 ??_setFrequency 0039  
                              _maxCurrentIndex 00BB                               _FLASH_EraseBlock 0C21  
                                _DAC_SetOutput 0AC3                                        ___aldiv 04F8  
                                      ___awdiv 0744                                __size_of___lmul 0034  
                                    ?_vfprintf 002D                                        __ptext1 0E83  
                                      __ptext2 0C3D                                        __ptext3 0087  
                                      __ptext4 07A4                                        __ptext5 0606  
                                      __ptext6 0C21                                        __ptext7 06DE  
                                      __ptext8 0AC8                                        __ptext9 03BD  
                              __size_of_printf 0012                 ??_TMR1_DefaultInterruptHandler 0071  
                     __end_of_LATCH_Initialize 0B56                                        _initLED 0F41  
                                    _T1CONbits 0018                                        _ir_code 00B3  
                                   _lowBattery 0D8C                          _OSCILLATOR_Initialize 0B16  
                                    _T2CONbits 001C              __size_of_TMR1_SetInterruptHandler 0006  
                             ___aldiv@dividend 002C                                      _T4CONbits 0417  
                     ??_PIN_MANAGER_Initialize 0073              __size_of_TMR4_SetInterruptHandler 0006  
                    ?_TMR1_SetInterruptHandler 0073                        _INT_SetInterruptHandler 0AE5  
                    ?_TMR4_SetInterruptHandler 0073                                _selectFrequency 0D62  
                                      _startUp 0E83                     __size_of_SYSTEM_Initialize 0025  
                                      clrloop0 0B04                           end_of_initialization 0083  
               ??_TMR4_DefaultInterruptHandler 0071                                     _setCurrent 03BD  
        __end_of_EUSART_SetOverrunErrorHandler 0AE5         __size_of_EUSART_SetOverrunErrorHandler 0006  
                _EUSART_SetOverrunErrorHandler 0ADF                   __end_of_writePersistentState 0800  
                                    _LED_green 00AD                                        fputc@fp 0077  
                                      init_ram 0B09                                        initloop 0B0A  
                         __end_of_INT_CallBack 0B49               __size_of_TMR4_LoadPeriodRegister 0005  
                            _EUSART_Initialize 0C5D                                 _frequencyIndex 00E1  
                            setCurrent@Vdac_mv 0045                                 ?_DAC_SetOutput 0070  
                               _frequencyValue 0140                  __end_ofmain@BATTERY_THRESHOLD 0882  
                           ?_EUSART_Initialize 0070                              __end_of_vfpfcnvrt 0606  
                             ___aldiv@quotient 0033                                     ??_vfprintf 0030  
                              setLEDColor@blue 0074                            ??_EUSART_Initialize 0075  
                             ??_WDT_Initialize 0073                       _TMR0_SetInterruptHandler 0AEB  
                              _selectSomething 0F85                        writePersistentState@buf 002E  
                      writePersistentState@idx 006F                  __size_of_selectFrequencyValue 0026  
                                    _TRISAbits 008C                                      _TRISBbits 008D  
                                    _TRISCbits 008E                          __size_of_EUSART_Write 000A  
                     __size_of_OPA1_Initialize 0004                __size_of_EUSART_SetErrorHandler 0006  
                       __size_of_selectCurrent 0028                      __end_of_EUSART_Initialize 0C7F  
                                  _CCP1CONbits 0293                    __end_of_readPersistentState 0C5D  
                           _selectCurrentValue 0D39                              FLASH_WriteBlock@i 0029  
                     __size_of_OPA2_Initialize 0004                            ?_selectCurrentValue 0070  
                         __end_of_setFrequency 0744                                 __end_of___lmul 0E83  
                   _EUSART_DefaultErrorHandler 0000                                    vfpfcnvrt@ap 0026  
                                  vfpfcnvrt@fp 002C                                _battery_voltage 0E1C  
                                __pidataCOMMON 0003                                   _EUSART_Write 0B26  
                            __size_of_TMR0_ISR 0011                              __size_of_TMR1_ISR 0018  
                            __size_of_TMR4_ISR 000F                               _FLASH_WriteBlock 0606  
                       ?_OSCILLATOR_Initialize 0070                        __end_of_selectFrequency 0D8C  
                    ??_INT_SetInterruptHandler 0075                        __size_of_DAC_Initialize 0006  
                                  ?_lowBattery 0070                                 __end_of_printf 0B9A  
                 __p_HEF_persistent_state_text 0FE0                            start_initialization 004D  
                     __size_of_TMR0_Initialize 0012                __size_of_PIN_MANAGER_Initialize 0033  
                             ??_selectDecrease 0039                           ??_selectCurrentValue 0039  
                                  putch@txData 0074                                    ?_setCurrent 0039  
                              ??_DAC_SetOutput 0070                       __size_of_PIN_MANAGER_IOC 0001  
                 ?_INT_DefaultInterruptHandler 0070                               ??_selectIncrease 0039  
               ?_EUSART_SetOverrunErrorHandler 0073                       __size_of_TMR1_Initialize 0018  
                                  vfprintf@fmt 002D                     _EUSART_FramingErrorHandler 00DE  
                      __end_of_selectSomething 0FE0                                       ??___lmul 0073  
                       _EUSART_SetErrorHandler 0AD3                                    _CCPTMRSbits 029E  
                                _selectCurrent 0D11                                    __pdataBANK1 00B9  
                                  __pdataBANK2 0140                    FLASH_EraseBlock@GIEBitValue 0075  
                   __end_of_EXT_INT_Initialize 0B3C                       __end_of_FLASH_EraseBlock 0C3D  
                                     ??_printf 0037                           _writePersistentState 07A4  
                                ??_setLEDColor 0075                          writePersistentState@i 006E  
                                  __pbssCOMMON 0078                                      ___latbits 0001  
                     ??_process_remote_command 00E5                                       ?_INT_ISR 0070  
                                __pcstackBANK0 0020                                  __pcstackBANK1 00E5  
                     __size_of_TMR2_Initialize 0008                          __size_of_INT_CallBack 000D  
                                    _dac_value 00B1                        _TMR4_LoadPeriodRegister 0AC8  
                   __size_of_EUSART_Initialize 0022                                   _currentIndex 00E3  
                            ??_OPA1_Initialize 0073                                   _currentValue 00BE  
                        _TMR0_InterruptHandler 00D6                                      __pnvBANK1 00D2  
                                 _oneHzCounter 00B0                            __size_of_lowBattery 002C  
                       _PIN_MANAGER_Initialize 0DE9                        __end_of_battery_voltage 0E4F  
                ??_INT_DefaultInterruptHandler 0070               __end_of_TMR1_SetInterruptHandler 0AF7  
                                     ?___aldiv 0028               __end_of_TMR4_SetInterruptHandler 0AFD  
                               ?_selectCurrent 0070                                       ?___awdiv 0073  
                                     _DAC1CON0 0118                                       _DAC1CON1 0119  
                 ??_INTERRUPT_InterruptManager 0073                            __size_of_setCurrent 00A5  
                        ?_writePersistentState 0070                              ??_OPA2_Initialize 0073  
                            __size_of_vfprintf 0031                               ?_selectFrequency 0070  
                                 _INT_CallBack 0B3C                                       _BAUD1CON 019F  
                                     ?_initLED 0070                              ?_LATCH_Initialize 0070  
                           ??_LATCH_Initialize 0073                       __size_of_TMR4_Initialize 0013  
                                     ?_startUp 0070                            __end_of_setLEDColor 0BD8  
                               __size_of_fputc 0040                                      _microamps 00AA  
                               __size_of_putch 0006                 FLASH_WriteBlock@blockStartAddr 0026  
         __end_ofmain@BATTERY_NUM_LOW_READINGS 0884                   main@BATTERY_NUM_LOW_READINGS 0882  
                              ___aldiv@divisor 0028                              ??_TMR0_Initialize 0075  
                              ___aldiv@counter 0031                                       _LATAbits 010C  
       EUSART_SetErrorHandler@interruptHandler 0073                                       _LATBbits 010D  
                                     _LATCbits 010E                                       _LED_blue 00AC  
                                    clear_ram0 0B03                                       _PIE1bits 0091  
                                     _PIE2bits 0092                              _eusartRxLastError 00B2  
                 _HEF_persistent_state_absaddr 0FE0                          __size_of_setFrequency 0066  
          __size_of_INTERRUPT_InterruptManager 0047                     ??_TMR0_SetInterruptHandler 0075  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 0075  
                                     _PIR2bits 0012                      FLASH_EraseBlock@startAddr 0073  
                             ?_selectSomething 0070                                 setLEDColor@red 0076  
                                     _TMR0_ISR 0B65              _EUSART_DefaultOverrunErrorHandler 0000  
                                     _TMR1_ISR 0BD8                                       _TMR4_ISR 0B56  
                            ??_PIN_MANAGER_IOC 0070                                      _vfpfcnvrt 0588  
                            ??_TMR1_Initialize 0075                                     _ADCON0bits 009D  
                               _DAC_Initialize 0ACD           __size_of_INT_DefaultInterruptHandler 006C  
              __size_of_process_remote_command 0336                               __size_of_INT_ISR 0005  
                    ??_TMR4_LoadPeriodRegister 0073                              ___lmul@multiplier 0020  
                                  _latchTester 00AF                                   _setFrequency 06DE  
                            ??_TMR2_Initialize 0073                   __end_of_HEF_persistent_state 1000  
                     __end_of_FLASH_WriteBlock 0672                   __end_of_selectFrequencyValue 0D11  
                              ??_selectCurrent 0039                               ?_battery_voltage 0037  
                                   vfprintf@ap 002F                                     vfprintf@fp 0032  
                        main@BATTERY_THRESHOLD 0880                        ??_OSCILLATOR_Initialize 0073  
                          _EUSART_ErrorHandler 00DA                               __size_of___aldiv 0090  
                             __size_of___awdiv 0060                         ??_writePersistentState 002A  
                       __end_of_DAC_Initialize 0AD3                                     ?_vfpfcnvrt 0025  
                          setFrequency@PR4_val 003A                       _TMR1_SetInterruptHandler 0AF1  
                     _TMR4_SetInterruptHandler 0AF7                                   ??_lowBattery 0020  
                        _TMR1_InterruptHandler 00D2                                    _currentIsOn 00BD  
                                  _setLEDColor 0BC1                             setCurrent@DACValue 0047  
                             __size_of_initLED 0044                                       __ptext10 0E4F  
                                     __ptext11 0744                                       __ptext20 0DB8  
                                     __ptext12 0F85                                       __ptext21 0588  
                                     __ptext13 0CC6                                       __ptext30 0CA1  
                                     __ptext22 0EBF                                       __ptext14 0CEB  
                                     __ptext31 0AB3                                       __ptext23 0AFD  
                                     __ptext15 0D62                                       __ptext40 0B16  
                                     __ptext32 0B9A                                       __ptext24 0B26  
                                     __ptext16 0C7F                                       __ptext41 0ABA  
                                     __ptext33 0AF7                                       __ptext25 0E1C  
                                     __ptext17 0D39                                       __ptext50 0B49  
                                     __ptext42 0AB6                                       __ptext34 0B1E  
                                     __ptext26 04F8                                       __ptext18 0D11  
                                     __ptext43 0B30                                       __ptext35 0BF0  
                                     __ptext27 0D8C                                       __ptext19 0B88  
                                     __ptext60 0ABE                                       __ptext52 0B56  
                                     __ptext44 0AE5                                       __ptext36 0AF1  
                                     __ptext28 0BC1                                       __ptext61 0B3C  
                                     __ptext53 0EFF                                       __ptext45 0C5D  
                                     __ptext37 0B76                                       __ptext29 0F41  
                                     __ptext62 0672                                       __ptext54 0BD8  
                                     __ptext46 0ADF                                       __ptext38 0AEB  
                                     __ptext55 0B0F                                       __ptext47 0AD9  
                                     __ptext39 0DE9                                       __ptext56 0AC3  
                                     __ptext48 0AD3                                       __ptext57 0B65  
                                     __ptext49 0ACD                                       __ptext58 0002  
                                     __ptext59 0AB2                               __size_of_startUp 003C  
                                 ??_setCurrent 003D                                 _interfaceState 0078  
                            ??_TMR4_Initialize 0075                                  __size_of_main 0096  
         __end_of_TMR0_DefaultInterruptHandler 0003          __size_of_TMR0_DefaultInterruptHandler 0001  
                 _TMR0_DefaultInterruptHandler 0002                        ?_EUSART_SetErrorHandler 0073  
                       _process_remote_command 0087                                     _RC1STAbits 019D  
                           __end_of_lowBattery 0DB8  EUSART_SetOverrunErrorHandler@interruptHandler 0073  
                                     int$flags 007E                   __size_of_readPersistentState 0020  
                                     _vfprintf 0DB8             __end_of_INTERRUPT_InterruptManager 004B  
                   _INTERRUPT_InterruptManager 0004                                      printf@fmt 0035  
        __end_of_EUSART_SetFramingErrorHandler 0ADF         __size_of_EUSART_SetFramingErrorHandler 0006  
                _EUSART_SetFramingErrorHandler 0AD9                                ?_DAC_Initialize 0070  
                            ?_FLASH_EraseBlock 0073                             __end_of_setCurrent 0462  
                           ??_FLASH_EraseBlock 0075                                     _INTCONbits 000B  
              INT_DefaultInterruptHandler@time 0072                                    _PWM3DCLbits 0617  
                              _OPA1_Initialize 0AB6                                    _PWM4DCLbits 061A  
                                   _FVRCONbits 0117                           _INT_InterruptHandler 00D8  
                                  _PWM3CONbits 0619                                    _PWM4CONbits 061C  
                           _EXT_INT_Initialize 0B30                        __size_of_WDT_Initialize 0003  
                  __size_of_selectCurrentValue 0029                                       intlevel1 0000  
                                   _PMCON1bits 0195                        ?_PIN_MANAGER_Initialize 0070  
                   process_remote_command@code 00E7                 __end_of_EUSART_SetErrorHandler 0AD9  
                          ?_EXT_INT_Initialize 0070                          __end_of_DAC_SetOutput 0AC8  
                              _OPA2_Initialize 0ABA                  ?_TMR0_DefaultInterruptHandler 0070  
                                     printf@ap 0038  EUSART_SetFramingErrorHandler@interruptHandler 0073  
                     ?_INT_SetInterruptHandler 0073                                    ??_vfpfcnvrt 0027  
                                     startUp@i 0022                                  __pstringtext1 0880  
                                __pstringtext2 0882                                  __pstringtext3 0800  
                                __pstringtext4 0819                                  __pstringtext5 0830  
                                __pstringtext6 0845                                  __pstringtext7 0859  
                                __pstringtext8 086D                                  __pstringtext9 0000  
                         ??_EXT_INT_Initialize 0075                                     _OPTION_REG 0095  
                         _HEF_persistent_state 0FE0                               setLEDColor@green 0073  
                         _selectFrequencyValue 0CEB                                _TMR0_Initialize 0B76  
                          setCurrent@microamps 0039                                   ___aldiv@sign 0032  
                                   _TX1STAbits 019E                       setFrequency@frequency_hz 0037  
                           EUSART_Write@txData 0073                 __end_of_PIN_MANAGER_Initialize 0E1C  
                              _PIN_MANAGER_IOC 0AB2                      __size_of_LATCH_Initialize 000D  
                              _TMR1_Initialize 0BF0                        __size_of_selectDecrease 0022  
             TMR4_LoadPeriodRegister@periodVal 0073  
