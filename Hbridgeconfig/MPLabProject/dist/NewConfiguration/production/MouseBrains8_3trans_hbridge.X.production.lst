

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Apr 26 16:39:08 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16LF1708
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=2,noexec
     7                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     9                           	psect	_HEF_persistent_state_text,global,class=STRCODE,delta=2,noexec
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    15                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    16                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    17                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    20                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    21                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    22                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    23                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    24                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,noexec
    25                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    26                           	psect	inittext,global,class=CODE,delta=2
    27                           	psect	clrtext,global,class=CODE,delta=2
    28                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    29                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    30                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    31                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    32                           	psect	text1,local,class=CODE,merge=1,delta=2
    33                           	psect	text2,local,class=CODE,merge=1,delta=2
    34                           	psect	text3,local,class=CODE,merge=1,delta=2
    35                           	psect	text4,local,class=CODE,merge=1,delta=2
    36                           	psect	text5,local,class=CODE,merge=1,delta=2
    37                           	psect	text6,local,class=CODE,merge=1,delta=2
    38                           	psect	text7,local,class=CODE,merge=1,delta=2
    39                           	psect	text8,local,class=CODE,merge=1,delta=2
    40                           	psect	text9,local,class=CODE,merge=1,delta=2
    41                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text12,local,class=CODE,merge=1,delta=2
    44                           	psect	text13,local,class=CODE,merge=1,delta=2
    45                           	psect	text14,local,class=CODE,merge=1,delta=2
    46                           	psect	text15,local,class=CODE,merge=1,delta=2
    47                           	psect	text16,local,class=CODE,merge=1,delta=2
    48                           	psect	text17,local,class=CODE,merge=1,delta=2
    49                           	psect	text18,local,class=CODE,merge=1,delta=2
    50                           	psect	text19,local,class=CODE,merge=1,delta=2
    51                           	psect	text20,local,class=CODE,merge=1,delta=2,group=3
    52                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text23,local,class=CODE,merge=1,delta=2,group=3
    55                           	psect	text24,local,class=CODE,merge=1,delta=2
    56                           	psect	text25,local,class=CODE,merge=1,delta=2
    57                           	psect	text26,local,class=CODE,merge=1,delta=2
    58                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text28,local,class=CODE,merge=1,delta=2
    60                           	psect	text29,local,class=CODE,merge=1,delta=2
    61                           	psect	text30,local,class=CODE,merge=1,delta=2
    62                           	psect	text31,local,class=CODE,merge=1,delta=2
    63                           	psect	text32,local,class=CODE,merge=1,delta=2
    64                           	psect	text33,local,class=CODE,merge=1,delta=2
    65                           	psect	text34,local,class=CODE,merge=1,delta=2
    66                           	psect	text35,local,class=CODE,merge=1,delta=2
    67                           	psect	text36,local,class=CODE,merge=1,delta=2
    68                           	psect	text37,local,class=CODE,merge=1,delta=2
    69                           	psect	text38,local,class=CODE,merge=1,delta=2
    70                           	psect	text39,local,class=CODE,merge=1,delta=2
    71                           	psect	text40,local,class=CODE,merge=1,delta=2
    72                           	psect	text41,local,class=CODE,merge=1,delta=2
    73                           	psect	text42,local,class=CODE,merge=1,delta=2
    74                           	psect	text43,local,class=CODE,merge=1,delta=2
    75                           	psect	text44,local,class=CODE,merge=1,delta=2
    76                           	psect	text45,local,class=CODE,merge=1,delta=2
    77                           	psect	text46,local,class=CODE,merge=1,delta=2
    78                           	psect	text47,local,class=CODE,merge=1,delta=2
    79                           	psect	text48,local,class=CODE,merge=1,delta=2
    80                           	psect	text49,local,class=CODE,merge=1,delta=2
    81                           	psect	intentry,global,class=CODE,delta=2
    82                           	psect	text51,local,class=CODE,merge=1,delta=2
    83                           	psect	text52,local,class=CODE,merge=1,delta=2
    84                           	psect	text53,local,class=CODE,merge=1,delta=2
    85                           	psect	text54,local,class=CODE,merge=1,delta=2
    86                           	psect	text55,local,class=CODE,merge=1,delta=2
    87                           	psect	text56,local,class=CODE,merge=1,delta=2
    88                           	psect	text57,local,class=CODE,merge=1,delta=2
    89                           	psect	text58,local,class=CODE,merge=1,delta=2
    90                           	psect	text59,local,class=CODE,merge=1,delta=2
    91                           	psect	text60,local,class=CODE,merge=1,delta=2
    92                           	psect	text61,local,class=CODE,merge=1,delta=2
    93                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    94                           	dabs	1,0x7E,2
    95  0000                     
    96                           ; Version 2.32
    97                           ; Generated 02/02/2021 GMT
    98                           ; 
    99                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   100                           ; All rights reserved.
   101                           ; 
   102                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   103                           ; 
   104                           ; Redistribution and use in source and binary forms, with or without modification, are
   105                           ; permitted provided that the following conditions are met:
   106                           ; 
   107                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   108                           ;        conditions and the following disclaimer.
   109                           ; 
   110                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   111                           ;        of conditions and the following disclaimer in the documentation and/or other
   112                           ;        materials provided with the distribution. Publication is not required when
   113                           ;        this file is used in an embedded application.
   114                           ; 
   115                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   116                           ;        software without specific prior written permission.
   117                           ; 
   118                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   119                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   120                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   121                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   122                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   123                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   124                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   125                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   126                           ; 
   127                           ; 
   128                           ; Code-generator required, PIC16LF1708 Definitions
   129                           ; 
   130                           ; SFR Addresses
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  0008                     	;# 
   140  0009                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000D                     	;# 
   145  000E                     	;# 
   146  0011                     	;# 
   147  0012                     	;# 
   148  0013                     	;# 
   149  0015                     	;# 
   150  0016                     	;# 
   151  0016                     	;# 
   152  0017                     	;# 
   153  0018                     	;# 
   154  0019                     	;# 
   155  001A                     	;# 
   156  001B                     	;# 
   157  001C                     	;# 
   158  008C                     	;# 
   159  008D                     	;# 
   160  008E                     	;# 
   161  0091                     	;# 
   162  0092                     	;# 
   163  0093                     	;# 
   164  0095                     	;# 
   165  0096                     	;# 
   166  0097                     	;# 
   167  0098                     	;# 
   168  0099                     	;# 
   169  009A                     	;# 
   170  009B                     	;# 
   171  009B                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  009F                     	;# 
   176  010C                     	;# 
   177  010D                     	;# 
   178  010E                     	;# 
   179  0111                     	;# 
   180  0112                     	;# 
   181  0113                     	;# 
   182  0114                     	;# 
   183  0115                     	;# 
   184  0116                     	;# 
   185  0117                     	;# 
   186  0118                     	;# 
   187  0119                     	;# 
   188  011C                     	;# 
   189  018C                     	;# 
   190  018D                     	;# 
   191  018E                     	;# 
   192  0191                     	;# 
   193  0191                     	;# 
   194  0192                     	;# 
   195  0193                     	;# 
   196  0193                     	;# 
   197  0194                     	;# 
   198  0195                     	;# 
   199  0196                     	;# 
   200  0199                     	;# 
   201  0199                     	;# 
   202  0199                     	;# 
   203  019A                     	;# 
   204  019A                     	;# 
   205  019A                     	;# 
   206  019B                     	;# 
   207  019B                     	;# 
   208  019B                     	;# 
   209  019B                     	;# 
   210  019B                     	;# 
   211  019C                     	;# 
   212  019C                     	;# 
   213  019C                     	;# 
   214  019D                     	;# 
   215  019D                     	;# 
   216  019D                     	;# 
   217  019E                     	;# 
   218  019E                     	;# 
   219  019E                     	;# 
   220  019F                     	;# 
   221  019F                     	;# 
   222  019F                     	;# 
   223  019F                     	;# 
   224  019F                     	;# 
   225  020C                     	;# 
   226  020D                     	;# 
   227  020E                     	;# 
   228  0211                     	;# 
   229  0211                     	;# 
   230  0212                     	;# 
   231  0212                     	;# 
   232  0213                     	;# 
   233  0213                     	;# 
   234  0214                     	;# 
   235  0214                     	;# 
   236  0215                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0216                     	;# 
   241  0216                     	;# 
   242  0217                     	;# 
   243  0217                     	;# 
   244  028C                     	;# 
   245  028D                     	;# 
   246  028E                     	;# 
   247  0291                     	;# 
   248  0291                     	;# 
   249  0292                     	;# 
   250  0293                     	;# 
   251  0293                     	;# 
   252  0298                     	;# 
   253  0298                     	;# 
   254  0299                     	;# 
   255  029A                     	;# 
   256  029A                     	;# 
   257  029E                     	;# 
   258  030C                     	;# 
   259  030D                     	;# 
   260  030E                     	;# 
   261  038C                     	;# 
   262  038D                     	;# 
   263  038E                     	;# 
   264  0391                     	;# 
   265  0392                     	;# 
   266  0393                     	;# 
   267  0394                     	;# 
   268  0395                     	;# 
   269  0396                     	;# 
   270  0397                     	;# 
   271  0398                     	;# 
   272  0399                     	;# 
   273  0415                     	;# 
   274  0416                     	;# 
   275  0417                     	;# 
   276  041C                     	;# 
   277  041D                     	;# 
   278  041E                     	;# 
   279  0511                     	;# 
   280  0515                     	;# 
   281  0617                     	;# 
   282  0618                     	;# 
   283  0619                     	;# 
   284  0619                     	;# 
   285  061A                     	;# 
   286  061B                     	;# 
   287  061C                     	;# 
   288  061C                     	;# 
   289  0691                     	;# 
   290  0692                     	;# 
   291  0693                     	;# 
   292  0694                     	;# 
   293  0695                     	;# 
   294  0696                     	;# 
   295  0697                     	;# 
   296  0698                     	;# 
   297  0699                     	;# 
   298  069A                     	;# 
   299  069B                     	;# 
   300  069C                     	;# 
   301  069D                     	;# 
   302  069E                     	;# 
   303  069F                     	;# 
   304  0E0F                     	;# 
   305  0E10                     	;# 
   306  0E11                     	;# 
   307  0E12                     	;# 
   308  0E13                     	;# 
   309  0E14                     	;# 
   310  0E15                     	;# 
   311  0E17                     	;# 
   312  0E20                     	;# 
   313  0E21                     	;# 
   314  0E22                     	;# 
   315  0E24                     	;# 
   316  0E25                     	;# 
   317  0E28                     	;# 
   318  0E29                     	;# 
   319  0E2A                     	;# 
   320  0E2B                     	;# 
   321  0E90                     	;# 
   322  0E91                     	;# 
   323  0E92                     	;# 
   324  0E94                     	;# 
   325  0E95                     	;# 
   326  0E9C                     	;# 
   327  0E9D                     	;# 
   328  0E9E                     	;# 
   329  0E9F                     	;# 
   330  0EA0                     	;# 
   331  0EA1                     	;# 
   332  0EA2                     	;# 
   333  0EA3                     	;# 
   334  0EA4                     	;# 
   335  0EA5                     	;# 
   336  0EA6                     	;# 
   337  0EA7                     	;# 
   338  0F0F                     	;# 
   339  0F10                     	;# 
   340  0F11                     	;# 
   341  0F12                     	;# 
   342  0F13                     	;# 
   343  0F14                     	;# 
   344  0F15                     	;# 
   345  0F16                     	;# 
   346  0F17                     	;# 
   347  0F18                     	;# 
   348  0F19                     	;# 
   349  0F1A                     	;# 
   350  0F1B                     	;# 
   351  0F1C                     	;# 
   352  0F1D                     	;# 
   353  0F1E                     	;# 
   354  0F1F                     	;# 
   355  0F20                     	;# 
   356  0F21                     	;# 
   357  0F22                     	;# 
   358  0F23                     	;# 
   359  0F24                     	;# 
   360  0F25                     	;# 
   361  0F26                     	;# 
   362  0F27                     	;# 
   363  0F28                     	;# 
   364  0F29                     	;# 
   365  0F2A                     	;# 
   366  0F2B                     	;# 
   367  0F2C                     	;# 
   368  0F2D                     	;# 
   369  0FE4                     	;# 
   370  0FE5                     	;# 
   371  0FE6                     	;# 
   372  0FE7                     	;# 
   373  0FE8                     	;# 
   374  0FE9                     	;# 
   375  0FEA                     	;# 
   376  0FEB                     	;# 
   377  0FED                     	;# 
   378  0FEE                     	;# 
   379  0FEF                     	;# 
   380  0000                     	;# 
   381  0001                     	;# 
   382  0002                     	;# 
   383  0003                     	;# 
   384  0004                     	;# 
   385  0005                     	;# 
   386  0006                     	;# 
   387  0007                     	;# 
   388  0008                     	;# 
   389  0009                     	;# 
   390  000A                     	;# 
   391  000B                     	;# 
   392  000C                     	;# 
   393  000D                     	;# 
   394  000E                     	;# 
   395  0011                     	;# 
   396  0012                     	;# 
   397  0013                     	;# 
   398  0015                     	;# 
   399  0016                     	;# 
   400  0016                     	;# 
   401  0017                     	;# 
   402  0018                     	;# 
   403  0019                     	;# 
   404  001A                     	;# 
   405  001B                     	;# 
   406  001C                     	;# 
   407  008C                     	;# 
   408  008D                     	;# 
   409  008E                     	;# 
   410  0091                     	;# 
   411  0092                     	;# 
   412  0093                     	;# 
   413  0095                     	;# 
   414  0096                     	;# 
   415  0097                     	;# 
   416  0098                     	;# 
   417  0099                     	;# 
   418  009A                     	;# 
   419  009B                     	;# 
   420  009B                     	;# 
   421  009C                     	;# 
   422  009D                     	;# 
   423  009E                     	;# 
   424  009F                     	;# 
   425  010C                     	;# 
   426  010D                     	;# 
   427  010E                     	;# 
   428  0111                     	;# 
   429  0112                     	;# 
   430  0113                     	;# 
   431  0114                     	;# 
   432  0115                     	;# 
   433  0116                     	;# 
   434  0117                     	;# 
   435  0118                     	;# 
   436  0119                     	;# 
   437  011C                     	;# 
   438  018C                     	;# 
   439  018D                     	;# 
   440  018E                     	;# 
   441  0191                     	;# 
   442  0191                     	;# 
   443  0192                     	;# 
   444  0193                     	;# 
   445  0193                     	;# 
   446  0194                     	;# 
   447  0195                     	;# 
   448  0196                     	;# 
   449  0199                     	;# 
   450  0199                     	;# 
   451  0199                     	;# 
   452  019A                     	;# 
   453  019A                     	;# 
   454  019A                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019B                     	;# 
   458  019B                     	;# 
   459  019B                     	;# 
   460  019C                     	;# 
   461  019C                     	;# 
   462  019C                     	;# 
   463  019D                     	;# 
   464  019D                     	;# 
   465  019D                     	;# 
   466  019E                     	;# 
   467  019E                     	;# 
   468  019E                     	;# 
   469  019F                     	;# 
   470  019F                     	;# 
   471  019F                     	;# 
   472  019F                     	;# 
   473  019F                     	;# 
   474  020C                     	;# 
   475  020D                     	;# 
   476  020E                     	;# 
   477  0211                     	;# 
   478  0211                     	;# 
   479  0212                     	;# 
   480  0212                     	;# 
   481  0213                     	;# 
   482  0213                     	;# 
   483  0214                     	;# 
   484  0214                     	;# 
   485  0215                     	;# 
   486  0215                     	;# 
   487  0215                     	;# 
   488  0215                     	;# 
   489  0216                     	;# 
   490  0216                     	;# 
   491  0217                     	;# 
   492  0217                     	;# 
   493  028C                     	;# 
   494  028D                     	;# 
   495  028E                     	;# 
   496  0291                     	;# 
   497  0291                     	;# 
   498  0292                     	;# 
   499  0293                     	;# 
   500  0293                     	;# 
   501  0298                     	;# 
   502  0298                     	;# 
   503  0299                     	;# 
   504  029A                     	;# 
   505  029A                     	;# 
   506  029E                     	;# 
   507  030C                     	;# 
   508  030D                     	;# 
   509  030E                     	;# 
   510  038C                     	;# 
   511  038D                     	;# 
   512  038E                     	;# 
   513  0391                     	;# 
   514  0392                     	;# 
   515  0393                     	;# 
   516  0394                     	;# 
   517  0395                     	;# 
   518  0396                     	;# 
   519  0397                     	;# 
   520  0398                     	;# 
   521  0399                     	;# 
   522  0415                     	;# 
   523  0416                     	;# 
   524  0417                     	;# 
   525  041C                     	;# 
   526  041D                     	;# 
   527  041E                     	;# 
   528  0511                     	;# 
   529  0515                     	;# 
   530  0617                     	;# 
   531  0618                     	;# 
   532  0619                     	;# 
   533  0619                     	;# 
   534  061A                     	;# 
   535  061B                     	;# 
   536  061C                     	;# 
   537  061C                     	;# 
   538  0691                     	;# 
   539  0692                     	;# 
   540  0693                     	;# 
   541  0694                     	;# 
   542  0695                     	;# 
   543  0696                     	;# 
   544  0697                     	;# 
   545  0698                     	;# 
   546  0699                     	;# 
   547  069A                     	;# 
   548  069B                     	;# 
   549  069C                     	;# 
   550  069D                     	;# 
   551  069E                     	;# 
   552  069F                     	;# 
   553  0E0F                     	;# 
   554  0E10                     	;# 
   555  0E11                     	;# 
   556  0E12                     	;# 
   557  0E13                     	;# 
   558  0E14                     	;# 
   559  0E15                     	;# 
   560  0E17                     	;# 
   561  0E20                     	;# 
   562  0E21                     	;# 
   563  0E22                     	;# 
   564  0E24                     	;# 
   565  0E25                     	;# 
   566  0E28                     	;# 
   567  0E29                     	;# 
   568  0E2A                     	;# 
   569  0E2B                     	;# 
   570  0E90                     	;# 
   571  0E91                     	;# 
   572  0E92                     	;# 
   573  0E94                     	;# 
   574  0E95                     	;# 
   575  0E9C                     	;# 
   576  0E9D                     	;# 
   577  0E9E                     	;# 
   578  0E9F                     	;# 
   579  0EA0                     	;# 
   580  0EA1                     	;# 
   581  0EA2                     	;# 
   582  0EA3                     	;# 
   583  0EA4                     	;# 
   584  0EA5                     	;# 
   585  0EA6                     	;# 
   586  0EA7                     	;# 
   587  0F0F                     	;# 
   588  0F10                     	;# 
   589  0F11                     	;# 
   590  0F12                     	;# 
   591  0F13                     	;# 
   592  0F14                     	;# 
   593  0F15                     	;# 
   594  0F16                     	;# 
   595  0F17                     	;# 
   596  0F18                     	;# 
   597  0F19                     	;# 
   598  0F1A                     	;# 
   599  0F1B                     	;# 
   600  0F1C                     	;# 
   601  0F1D                     	;# 
   602  0F1E                     	;# 
   603  0F1F                     	;# 
   604  0F20                     	;# 
   605  0F21                     	;# 
   606  0F22                     	;# 
   607  0F23                     	;# 
   608  0F24                     	;# 
   609  0F25                     	;# 
   610  0F26                     	;# 
   611  0F27                     	;# 
   612  0F28                     	;# 
   613  0F29                     	;# 
   614  0F2A                     	;# 
   615  0F2B                     	;# 
   616  0F2C                     	;# 
   617  0F2D                     	;# 
   618  0FE4                     	;# 
   619  0FE5                     	;# 
   620  0FE6                     	;# 
   621  0FE7                     	;# 
   622  0FE8                     	;# 
   623  0FE9                     	;# 
   624  0FEA                     	;# 
   625  0FEB                     	;# 
   626  0FED                     	;# 
   627  0FEE                     	;# 
   628  0FEF                     	;# 
   629  0000                     	;# 
   630  0001                     	;# 
   631  0002                     	;# 
   632  0003                     	;# 
   633  0004                     	;# 
   634  0005                     	;# 
   635  0006                     	;# 
   636  0007                     	;# 
   637  0008                     	;# 
   638  0009                     	;# 
   639  000A                     	;# 
   640  000B                     	;# 
   641  000C                     	;# 
   642  000D                     	;# 
   643  000E                     	;# 
   644  0011                     	;# 
   645  0012                     	;# 
   646  0013                     	;# 
   647  0015                     	;# 
   648  0016                     	;# 
   649  0016                     	;# 
   650  0017                     	;# 
   651  0018                     	;# 
   652  0019                     	;# 
   653  001A                     	;# 
   654  001B                     	;# 
   655  001C                     	;# 
   656  008C                     	;# 
   657  008D                     	;# 
   658  008E                     	;# 
   659  0091                     	;# 
   660  0092                     	;# 
   661  0093                     	;# 
   662  0095                     	;# 
   663  0096                     	;# 
   664  0097                     	;# 
   665  0098                     	;# 
   666  0099                     	;# 
   667  009A                     	;# 
   668  009B                     	;# 
   669  009B                     	;# 
   670  009C                     	;# 
   671  009D                     	;# 
   672  009E                     	;# 
   673  009F                     	;# 
   674  010C                     	;# 
   675  010D                     	;# 
   676  010E                     	;# 
   677  0111                     	;# 
   678  0112                     	;# 
   679  0113                     	;# 
   680  0114                     	;# 
   681  0115                     	;# 
   682  0116                     	;# 
   683  0117                     	;# 
   684  0118                     	;# 
   685  0119                     	;# 
   686  011C                     	;# 
   687  018C                     	;# 
   688  018D                     	;# 
   689  018E                     	;# 
   690  0191                     	;# 
   691  0191                     	;# 
   692  0192                     	;# 
   693  0193                     	;# 
   694  0193                     	;# 
   695  0194                     	;# 
   696  0195                     	;# 
   697  0196                     	;# 
   698  0199                     	;# 
   699  0199                     	;# 
   700  0199                     	;# 
   701  019A                     	;# 
   702  019A                     	;# 
   703  019A                     	;# 
   704  019B                     	;# 
   705  019B                     	;# 
   706  019B                     	;# 
   707  019B                     	;# 
   708  019B                     	;# 
   709  019C                     	;# 
   710  019C                     	;# 
   711  019C                     	;# 
   712  019D                     	;# 
   713  019D                     	;# 
   714  019D                     	;# 
   715  019E                     	;# 
   716  019E                     	;# 
   717  019E                     	;# 
   718  019F                     	;# 
   719  019F                     	;# 
   720  019F                     	;# 
   721  019F                     	;# 
   722  019F                     	;# 
   723  020C                     	;# 
   724  020D                     	;# 
   725  020E                     	;# 
   726  0211                     	;# 
   727  0211                     	;# 
   728  0212                     	;# 
   729  0212                     	;# 
   730  0213                     	;# 
   731  0213                     	;# 
   732  0214                     	;# 
   733  0214                     	;# 
   734  0215                     	;# 
   735  0215                     	;# 
   736  0215                     	;# 
   737  0215                     	;# 
   738  0216                     	;# 
   739  0216                     	;# 
   740  0217                     	;# 
   741  0217                     	;# 
   742  028C                     	;# 
   743  028D                     	;# 
   744  028E                     	;# 
   745  0291                     	;# 
   746  0291                     	;# 
   747  0292                     	;# 
   748  0293                     	;# 
   749  0293                     	;# 
   750  0298                     	;# 
   751  0298                     	;# 
   752  0299                     	;# 
   753  029A                     	;# 
   754  029A                     	;# 
   755  029E                     	;# 
   756  030C                     	;# 
   757  030D                     	;# 
   758  030E                     	;# 
   759  038C                     	;# 
   760  038D                     	;# 
   761  038E                     	;# 
   762  0391                     	;# 
   763  0392                     	;# 
   764  0393                     	;# 
   765  0394                     	;# 
   766  0395                     	;# 
   767  0396                     	;# 
   768  0397                     	;# 
   769  0398                     	;# 
   770  0399                     	;# 
   771  0415                     	;# 
   772  0416                     	;# 
   773  0417                     	;# 
   774  041C                     	;# 
   775  041D                     	;# 
   776  041E                     	;# 
   777  0511                     	;# 
   778  0515                     	;# 
   779  0617                     	;# 
   780  0618                     	;# 
   781  0619                     	;# 
   782  0619                     	;# 
   783  061A                     	;# 
   784  061B                     	;# 
   785  061C                     	;# 
   786  061C                     	;# 
   787  0691                     	;# 
   788  0692                     	;# 
   789  0693                     	;# 
   790  0694                     	;# 
   791  0695                     	;# 
   792  0696                     	;# 
   793  0697                     	;# 
   794  0698                     	;# 
   795  0699                     	;# 
   796  069A                     	;# 
   797  069B                     	;# 
   798  069C                     	;# 
   799  069D                     	;# 
   800  069E                     	;# 
   801  069F                     	;# 
   802  0E0F                     	;# 
   803  0E10                     	;# 
   804  0E11                     	;# 
   805  0E12                     	;# 
   806  0E13                     	;# 
   807  0E14                     	;# 
   808  0E15                     	;# 
   809  0E17                     	;# 
   810  0E20                     	;# 
   811  0E21                     	;# 
   812  0E22                     	;# 
   813  0E24                     	;# 
   814  0E25                     	;# 
   815  0E28                     	;# 
   816  0E29                     	;# 
   817  0E2A                     	;# 
   818  0E2B                     	;# 
   819  0E90                     	;# 
   820  0E91                     	;# 
   821  0E92                     	;# 
   822  0E94                     	;# 
   823  0E95                     	;# 
   824  0E9C                     	;# 
   825  0E9D                     	;# 
   826  0E9E                     	;# 
   827  0E9F                     	;# 
   828  0EA0                     	;# 
   829  0EA1                     	;# 
   830  0EA2                     	;# 
   831  0EA3                     	;# 
   832  0EA4                     	;# 
   833  0EA5                     	;# 
   834  0EA6                     	;# 
   835  0EA7                     	;# 
   836  0F0F                     	;# 
   837  0F10                     	;# 
   838  0F11                     	;# 
   839  0F12                     	;# 
   840  0F13                     	;# 
   841  0F14                     	;# 
   842  0F15                     	;# 
   843  0F16                     	;# 
   844  0F17                     	;# 
   845  0F18                     	;# 
   846  0F19                     	;# 
   847  0F1A                     	;# 
   848  0F1B                     	;# 
   849  0F1C                     	;# 
   850  0F1D                     	;# 
   851  0F1E                     	;# 
   852  0F1F                     	;# 
   853  0F20                     	;# 
   854  0F21                     	;# 
   855  0F22                     	;# 
   856  0F23                     	;# 
   857  0F24                     	;# 
   858  0F25                     	;# 
   859  0F26                     	;# 
   860  0F27                     	;# 
   861  0F28                     	;# 
   862  0F29                     	;# 
   863  0F2A                     	;# 
   864  0F2B                     	;# 
   865  0F2C                     	;# 
   866  0F2D                     	;# 
   867  0FE4                     	;# 
   868  0FE5                     	;# 
   869  0FE6                     	;# 
   870  0FE7                     	;# 
   871  0FE8                     	;# 
   872  0FE9                     	;# 
   873  0FEA                     	;# 
   874  0FEB                     	;# 
   875  0FED                     	;# 
   876  0FEE                     	;# 
   877  0FEF                     	;# 
   878  0000                     	;# 
   879  0001                     	;# 
   880  0002                     	;# 
   881  0003                     	;# 
   882  0004                     	;# 
   883  0005                     	;# 
   884  0006                     	;# 
   885  0007                     	;# 
   886  0008                     	;# 
   887  0009                     	;# 
   888  000A                     	;# 
   889  000B                     	;# 
   890  000C                     	;# 
   891  000D                     	;# 
   892  000E                     	;# 
   893  0011                     	;# 
   894  0012                     	;# 
   895  0013                     	;# 
   896  0015                     	;# 
   897  0016                     	;# 
   898  0016                     	;# 
   899  0017                     	;# 
   900  0018                     	;# 
   901  0019                     	;# 
   902  001A                     	;# 
   903  001B                     	;# 
   904  001C                     	;# 
   905  008C                     	;# 
   906  008D                     	;# 
   907  008E                     	;# 
   908  0091                     	;# 
   909  0092                     	;# 
   910  0093                     	;# 
   911  0095                     	;# 
   912  0096                     	;# 
   913  0097                     	;# 
   914  0098                     	;# 
   915  0099                     	;# 
   916  009A                     	;# 
   917  009B                     	;# 
   918  009B                     	;# 
   919  009C                     	;# 
   920  009D                     	;# 
   921  009E                     	;# 
   922  009F                     	;# 
   923  010C                     	;# 
   924  010D                     	;# 
   925  010E                     	;# 
   926  0111                     	;# 
   927  0112                     	;# 
   928  0113                     	;# 
   929  0114                     	;# 
   930  0115                     	;# 
   931  0116                     	;# 
   932  0117                     	;# 
   933  0118                     	;# 
   934  0119                     	;# 
   935  011C                     	;# 
   936  018C                     	;# 
   937  018D                     	;# 
   938  018E                     	;# 
   939  0191                     	;# 
   940  0191                     	;# 
   941  0192                     	;# 
   942  0193                     	;# 
   943  0193                     	;# 
   944  0194                     	;# 
   945  0195                     	;# 
   946  0196                     	;# 
   947  0199                     	;# 
   948  0199                     	;# 
   949  0199                     	;# 
   950  019A                     	;# 
   951  019A                     	;# 
   952  019A                     	;# 
   953  019B                     	;# 
   954  019B                     	;# 
   955  019B                     	;# 
   956  019B                     	;# 
   957  019B                     	;# 
   958  019C                     	;# 
   959  019C                     	;# 
   960  019C                     	;# 
   961  019D                     	;# 
   962  019D                     	;# 
   963  019D                     	;# 
   964  019E                     	;# 
   965  019E                     	;# 
   966  019E                     	;# 
   967  019F                     	;# 
   968  019F                     	;# 
   969  019F                     	;# 
   970  019F                     	;# 
   971  019F                     	;# 
   972  020C                     	;# 
   973  020D                     	;# 
   974  020E                     	;# 
   975  0211                     	;# 
   976  0211                     	;# 
   977  0212                     	;# 
   978  0212                     	;# 
   979  0213                     	;# 
   980  0213                     	;# 
   981  0214                     	;# 
   982  0214                     	;# 
   983  0215                     	;# 
   984  0215                     	;# 
   985  0215                     	;# 
   986  0215                     	;# 
   987  0216                     	;# 
   988  0216                     	;# 
   989  0217                     	;# 
   990  0217                     	;# 
   991  028C                     	;# 
   992  028D                     	;# 
   993  028E                     	;# 
   994  0291                     	;# 
   995  0291                     	;# 
   996  0292                     	;# 
   997  0293                     	;# 
   998  0293                     	;# 
   999  0298                     	;# 
  1000  0298                     	;# 
  1001  0299                     	;# 
  1002  029A                     	;# 
  1003  029A                     	;# 
  1004  029E                     	;# 
  1005  030C                     	;# 
  1006  030D                     	;# 
  1007  030E                     	;# 
  1008  038C                     	;# 
  1009  038D                     	;# 
  1010  038E                     	;# 
  1011  0391                     	;# 
  1012  0392                     	;# 
  1013  0393                     	;# 
  1014  0394                     	;# 
  1015  0395                     	;# 
  1016  0396                     	;# 
  1017  0397                     	;# 
  1018  0398                     	;# 
  1019  0399                     	;# 
  1020  0415                     	;# 
  1021  0416                     	;# 
  1022  0417                     	;# 
  1023  041C                     	;# 
  1024  041D                     	;# 
  1025  041E                     	;# 
  1026  0511                     	;# 
  1027  0515                     	;# 
  1028  0617                     	;# 
  1029  0618                     	;# 
  1030  0619                     	;# 
  1031  0619                     	;# 
  1032  061A                     	;# 
  1033  061B                     	;# 
  1034  061C                     	;# 
  1035  061C                     	;# 
  1036  0691                     	;# 
  1037  0692                     	;# 
  1038  0693                     	;# 
  1039  0694                     	;# 
  1040  0695                     	;# 
  1041  0696                     	;# 
  1042  0697                     	;# 
  1043  0698                     	;# 
  1044  0699                     	;# 
  1045  069A                     	;# 
  1046  069B                     	;# 
  1047  069C                     	;# 
  1048  069D                     	;# 
  1049  069E                     	;# 
  1050  069F                     	;# 
  1051  0E0F                     	;# 
  1052  0E10                     	;# 
  1053  0E11                     	;# 
  1054  0E12                     	;# 
  1055  0E13                     	;# 
  1056  0E14                     	;# 
  1057  0E15                     	;# 
  1058  0E17                     	;# 
  1059  0E20                     	;# 
  1060  0E21                     	;# 
  1061  0E22                     	;# 
  1062  0E24                     	;# 
  1063  0E25                     	;# 
  1064  0E28                     	;# 
  1065  0E29                     	;# 
  1066  0E2A                     	;# 
  1067  0E2B                     	;# 
  1068  0E90                     	;# 
  1069  0E91                     	;# 
  1070  0E92                     	;# 
  1071  0E94                     	;# 
  1072  0E95                     	;# 
  1073  0E9C                     	;# 
  1074  0E9D                     	;# 
  1075  0E9E                     	;# 
  1076  0E9F                     	;# 
  1077  0EA0                     	;# 
  1078  0EA1                     	;# 
  1079  0EA2                     	;# 
  1080  0EA3                     	;# 
  1081  0EA4                     	;# 
  1082  0EA5                     	;# 
  1083  0EA6                     	;# 
  1084  0EA7                     	;# 
  1085  0F0F                     	;# 
  1086  0F10                     	;# 
  1087  0F11                     	;# 
  1088  0F12                     	;# 
  1089  0F13                     	;# 
  1090  0F14                     	;# 
  1091  0F15                     	;# 
  1092  0F16                     	;# 
  1093  0F17                     	;# 
  1094  0F18                     	;# 
  1095  0F19                     	;# 
  1096  0F1A                     	;# 
  1097  0F1B                     	;# 
  1098  0F1C                     	;# 
  1099  0F1D                     	;# 
  1100  0F1E                     	;# 
  1101  0F1F                     	;# 
  1102  0F20                     	;# 
  1103  0F21                     	;# 
  1104  0F22                     	;# 
  1105  0F23                     	;# 
  1106  0F24                     	;# 
  1107  0F25                     	;# 
  1108  0F26                     	;# 
  1109  0F27                     	;# 
  1110  0F28                     	;# 
  1111  0F29                     	;# 
  1112  0F2A                     	;# 
  1113  0F2B                     	;# 
  1114  0F2C                     	;# 
  1115  0F2D                     	;# 
  1116  0FE4                     	;# 
  1117  0FE5                     	;# 
  1118  0FE6                     	;# 
  1119  0FE7                     	;# 
  1120  0FE8                     	;# 
  1121  0FE9                     	;# 
  1122  0FEA                     	;# 
  1123  0FEB                     	;# 
  1124  0FED                     	;# 
  1125  0FEE                     	;# 
  1126  0FEF                     	;# 
  1127  0000                     	;# 
  1128  0001                     	;# 
  1129  0002                     	;# 
  1130  0003                     	;# 
  1131  0004                     	;# 
  1132  0005                     	;# 
  1133  0006                     	;# 
  1134  0007                     	;# 
  1135  0008                     	;# 
  1136  0009                     	;# 
  1137  000A                     	;# 
  1138  000B                     	;# 
  1139  000C                     	;# 
  1140  000D                     	;# 
  1141  000E                     	;# 
  1142  0011                     	;# 
  1143  0012                     	;# 
  1144  0013                     	;# 
  1145  0015                     	;# 
  1146  0016                     	;# 
  1147  0016                     	;# 
  1148  0017                     	;# 
  1149  0018                     	;# 
  1150  0019                     	;# 
  1151  001A                     	;# 
  1152  001B                     	;# 
  1153  001C                     	;# 
  1154  008C                     	;# 
  1155  008D                     	;# 
  1156  008E                     	;# 
  1157  0091                     	;# 
  1158  0092                     	;# 
  1159  0093                     	;# 
  1160  0095                     	;# 
  1161  0096                     	;# 
  1162  0097                     	;# 
  1163  0098                     	;# 
  1164  0099                     	;# 
  1165  009A                     	;# 
  1166  009B                     	;# 
  1167  009B                     	;# 
  1168  009C                     	;# 
  1169  009D                     	;# 
  1170  009E                     	;# 
  1171  009F                     	;# 
  1172  010C                     	;# 
  1173  010D                     	;# 
  1174  010E                     	;# 
  1175  0111                     	;# 
  1176  0112                     	;# 
  1177  0113                     	;# 
  1178  0114                     	;# 
  1179  0115                     	;# 
  1180  0116                     	;# 
  1181  0117                     	;# 
  1182  0118                     	;# 
  1183  0119                     	;# 
  1184  011C                     	;# 
  1185  018C                     	;# 
  1186  018D                     	;# 
  1187  018E                     	;# 
  1188  0191                     	;# 
  1189  0191                     	;# 
  1190  0192                     	;# 
  1191  0193                     	;# 
  1192  0193                     	;# 
  1193  0194                     	;# 
  1194  0195                     	;# 
  1195  0196                     	;# 
  1196  0199                     	;# 
  1197  0199                     	;# 
  1198  0199                     	;# 
  1199  019A                     	;# 
  1200  019A                     	;# 
  1201  019A                     	;# 
  1202  019B                     	;# 
  1203  019B                     	;# 
  1204  019B                     	;# 
  1205  019B                     	;# 
  1206  019B                     	;# 
  1207  019C                     	;# 
  1208  019C                     	;# 
  1209  019C                     	;# 
  1210  019D                     	;# 
  1211  019D                     	;# 
  1212  019D                     	;# 
  1213  019E                     	;# 
  1214  019E                     	;# 
  1215  019E                     	;# 
  1216  019F                     	;# 
  1217  019F                     	;# 
  1218  019F                     	;# 
  1219  019F                     	;# 
  1220  019F                     	;# 
  1221  020C                     	;# 
  1222  020D                     	;# 
  1223  020E                     	;# 
  1224  0211                     	;# 
  1225  0211                     	;# 
  1226  0212                     	;# 
  1227  0212                     	;# 
  1228  0213                     	;# 
  1229  0213                     	;# 
  1230  0214                     	;# 
  1231  0214                     	;# 
  1232  0215                     	;# 
  1233  0215                     	;# 
  1234  0215                     	;# 
  1235  0215                     	;# 
  1236  0216                     	;# 
  1237  0216                     	;# 
  1238  0217                     	;# 
  1239  0217                     	;# 
  1240  028C                     	;# 
  1241  028D                     	;# 
  1242  028E                     	;# 
  1243  0291                     	;# 
  1244  0291                     	;# 
  1245  0292                     	;# 
  1246  0293                     	;# 
  1247  0293                     	;# 
  1248  0298                     	;# 
  1249  0298                     	;# 
  1250  0299                     	;# 
  1251  029A                     	;# 
  1252  029A                     	;# 
  1253  029E                     	;# 
  1254  030C                     	;# 
  1255  030D                     	;# 
  1256  030E                     	;# 
  1257  038C                     	;# 
  1258  038D                     	;# 
  1259  038E                     	;# 
  1260  0391                     	;# 
  1261  0392                     	;# 
  1262  0393                     	;# 
  1263  0394                     	;# 
  1264  0395                     	;# 
  1265  0396                     	;# 
  1266  0397                     	;# 
  1267  0398                     	;# 
  1268  0399                     	;# 
  1269  0415                     	;# 
  1270  0416                     	;# 
  1271  0417                     	;# 
  1272  041C                     	;# 
  1273  041D                     	;# 
  1274  041E                     	;# 
  1275  0511                     	;# 
  1276  0515                     	;# 
  1277  0617                     	;# 
  1278  0618                     	;# 
  1279  0619                     	;# 
  1280  0619                     	;# 
  1281  061A                     	;# 
  1282  061B                     	;# 
  1283  061C                     	;# 
  1284  061C                     	;# 
  1285  0691                     	;# 
  1286  0692                     	;# 
  1287  0693                     	;# 
  1288  0694                     	;# 
  1289  0695                     	;# 
  1290  0696                     	;# 
  1291  0697                     	;# 
  1292  0698                     	;# 
  1293  0699                     	;# 
  1294  069A                     	;# 
  1295  069B                     	;# 
  1296  069C                     	;# 
  1297  069D                     	;# 
  1298  069E                     	;# 
  1299  069F                     	;# 
  1300  0E0F                     	;# 
  1301  0E10                     	;# 
  1302  0E11                     	;# 
  1303  0E12                     	;# 
  1304  0E13                     	;# 
  1305  0E14                     	;# 
  1306  0E15                     	;# 
  1307  0E17                     	;# 
  1308  0E20                     	;# 
  1309  0E21                     	;# 
  1310  0E22                     	;# 
  1311  0E24                     	;# 
  1312  0E25                     	;# 
  1313  0E28                     	;# 
  1314  0E29                     	;# 
  1315  0E2A                     	;# 
  1316  0E2B                     	;# 
  1317  0E90                     	;# 
  1318  0E91                     	;# 
  1319  0E92                     	;# 
  1320  0E94                     	;# 
  1321  0E95                     	;# 
  1322  0E9C                     	;# 
  1323  0E9D                     	;# 
  1324  0E9E                     	;# 
  1325  0E9F                     	;# 
  1326  0EA0                     	;# 
  1327  0EA1                     	;# 
  1328  0EA2                     	;# 
  1329  0EA3                     	;# 
  1330  0EA4                     	;# 
  1331  0EA5                     	;# 
  1332  0EA6                     	;# 
  1333  0EA7                     	;# 
  1334  0F0F                     	;# 
  1335  0F10                     	;# 
  1336  0F11                     	;# 
  1337  0F12                     	;# 
  1338  0F13                     	;# 
  1339  0F14                     	;# 
  1340  0F15                     	;# 
  1341  0F16                     	;# 
  1342  0F17                     	;# 
  1343  0F18                     	;# 
  1344  0F19                     	;# 
  1345  0F1A                     	;# 
  1346  0F1B                     	;# 
  1347  0F1C                     	;# 
  1348  0F1D                     	;# 
  1349  0F1E                     	;# 
  1350  0F1F                     	;# 
  1351  0F20                     	;# 
  1352  0F21                     	;# 
  1353  0F22                     	;# 
  1354  0F23                     	;# 
  1355  0F24                     	;# 
  1356  0F25                     	;# 
  1357  0F26                     	;# 
  1358  0F27                     	;# 
  1359  0F28                     	;# 
  1360  0F29                     	;# 
  1361  0F2A                     	;# 
  1362  0F2B                     	;# 
  1363  0F2C                     	;# 
  1364  0F2D                     	;# 
  1365  0FE4                     	;# 
  1366  0FE5                     	;# 
  1367  0FE6                     	;# 
  1368  0FE7                     	;# 
  1369  0FE8                     	;# 
  1370  0FE9                     	;# 
  1371  0FEA                     	;# 
  1372  0FEB                     	;# 
  1373  0FED                     	;# 
  1374  0FEE                     	;# 
  1375  0FEF                     	;# 
  1376  0000                     	;# 
  1377  0001                     	;# 
  1378  0002                     	;# 
  1379  0003                     	;# 
  1380  0004                     	;# 
  1381  0005                     	;# 
  1382  0006                     	;# 
  1383  0007                     	;# 
  1384  0008                     	;# 
  1385  0009                     	;# 
  1386  000A                     	;# 
  1387  000B                     	;# 
  1388  000C                     	;# 
  1389  000D                     	;# 
  1390  000E                     	;# 
  1391  0011                     	;# 
  1392  0012                     	;# 
  1393  0013                     	;# 
  1394  0015                     	;# 
  1395  0016                     	;# 
  1396  0016                     	;# 
  1397  0017                     	;# 
  1398  0018                     	;# 
  1399  0019                     	;# 
  1400  001A                     	;# 
  1401  001B                     	;# 
  1402  001C                     	;# 
  1403  008C                     	;# 
  1404  008D                     	;# 
  1405  008E                     	;# 
  1406  0091                     	;# 
  1407  0092                     	;# 
  1408  0093                     	;# 
  1409  0095                     	;# 
  1410  0096                     	;# 
  1411  0097                     	;# 
  1412  0098                     	;# 
  1413  0099                     	;# 
  1414  009A                     	;# 
  1415  009B                     	;# 
  1416  009B                     	;# 
  1417  009C                     	;# 
  1418  009D                     	;# 
  1419  009E                     	;# 
  1420  009F                     	;# 
  1421  010C                     	;# 
  1422  010D                     	;# 
  1423  010E                     	;# 
  1424  0111                     	;# 
  1425  0112                     	;# 
  1426  0113                     	;# 
  1427  0114                     	;# 
  1428  0115                     	;# 
  1429  0116                     	;# 
  1430  0117                     	;# 
  1431  0118                     	;# 
  1432  0119                     	;# 
  1433  011C                     	;# 
  1434  018C                     	;# 
  1435  018D                     	;# 
  1436  018E                     	;# 
  1437  0191                     	;# 
  1438  0191                     	;# 
  1439  0192                     	;# 
  1440  0193                     	;# 
  1441  0193                     	;# 
  1442  0194                     	;# 
  1443  0195                     	;# 
  1444  0196                     	;# 
  1445  0199                     	;# 
  1446  0199                     	;# 
  1447  0199                     	;# 
  1448  019A                     	;# 
  1449  019A                     	;# 
  1450  019A                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019B                     	;# 
  1456  019C                     	;# 
  1457  019C                     	;# 
  1458  019C                     	;# 
  1459  019D                     	;# 
  1460  019D                     	;# 
  1461  019D                     	;# 
  1462  019E                     	;# 
  1463  019E                     	;# 
  1464  019E                     	;# 
  1465  019F                     	;# 
  1466  019F                     	;# 
  1467  019F                     	;# 
  1468  019F                     	;# 
  1469  019F                     	;# 
  1470  020C                     	;# 
  1471  020D                     	;# 
  1472  020E                     	;# 
  1473  0211                     	;# 
  1474  0211                     	;# 
  1475  0212                     	;# 
  1476  0212                     	;# 
  1477  0213                     	;# 
  1478  0213                     	;# 
  1479  0214                     	;# 
  1480  0214                     	;# 
  1481  0215                     	;# 
  1482  0215                     	;# 
  1483  0215                     	;# 
  1484  0215                     	;# 
  1485  0216                     	;# 
  1486  0216                     	;# 
  1487  0217                     	;# 
  1488  0217                     	;# 
  1489  028C                     	;# 
  1490  028D                     	;# 
  1491  028E                     	;# 
  1492  0291                     	;# 
  1493  0291                     	;# 
  1494  0292                     	;# 
  1495  0293                     	;# 
  1496  0293                     	;# 
  1497  0298                     	;# 
  1498  0298                     	;# 
  1499  0299                     	;# 
  1500  029A                     	;# 
  1501  029A                     	;# 
  1502  029E                     	;# 
  1503  030C                     	;# 
  1504  030D                     	;# 
  1505  030E                     	;# 
  1506  038C                     	;# 
  1507  038D                     	;# 
  1508  038E                     	;# 
  1509  0391                     	;# 
  1510  0392                     	;# 
  1511  0393                     	;# 
  1512  0394                     	;# 
  1513  0395                     	;# 
  1514  0396                     	;# 
  1515  0397                     	;# 
  1516  0398                     	;# 
  1517  0399                     	;# 
  1518  0415                     	;# 
  1519  0416                     	;# 
  1520  0417                     	;# 
  1521  041C                     	;# 
  1522  041D                     	;# 
  1523  041E                     	;# 
  1524  0511                     	;# 
  1525  0515                     	;# 
  1526  0617                     	;# 
  1527  0618                     	;# 
  1528  0619                     	;# 
  1529  0619                     	;# 
  1530  061A                     	;# 
  1531  061B                     	;# 
  1532  061C                     	;# 
  1533  061C                     	;# 
  1534  0691                     	;# 
  1535  0692                     	;# 
  1536  0693                     	;# 
  1537  0694                     	;# 
  1538  0695                     	;# 
  1539  0696                     	;# 
  1540  0697                     	;# 
  1541  0698                     	;# 
  1542  0699                     	;# 
  1543  069A                     	;# 
  1544  069B                     	;# 
  1545  069C                     	;# 
  1546  069D                     	;# 
  1547  069E                     	;# 
  1548  069F                     	;# 
  1549  0E0F                     	;# 
  1550  0E10                     	;# 
  1551  0E11                     	;# 
  1552  0E12                     	;# 
  1553  0E13                     	;# 
  1554  0E14                     	;# 
  1555  0E15                     	;# 
  1556  0E17                     	;# 
  1557  0E20                     	;# 
  1558  0E21                     	;# 
  1559  0E22                     	;# 
  1560  0E24                     	;# 
  1561  0E25                     	;# 
  1562  0E28                     	;# 
  1563  0E29                     	;# 
  1564  0E2A                     	;# 
  1565  0E2B                     	;# 
  1566  0E90                     	;# 
  1567  0E91                     	;# 
  1568  0E92                     	;# 
  1569  0E94                     	;# 
  1570  0E95                     	;# 
  1571  0E9C                     	;# 
  1572  0E9D                     	;# 
  1573  0E9E                     	;# 
  1574  0E9F                     	;# 
  1575  0EA0                     	;# 
  1576  0EA1                     	;# 
  1577  0EA2                     	;# 
  1578  0EA3                     	;# 
  1579  0EA4                     	;# 
  1580  0EA5                     	;# 
  1581  0EA6                     	;# 
  1582  0EA7                     	;# 
  1583  0F0F                     	;# 
  1584  0F10                     	;# 
  1585  0F11                     	;# 
  1586  0F12                     	;# 
  1587  0F13                     	;# 
  1588  0F14                     	;# 
  1589  0F15                     	;# 
  1590  0F16                     	;# 
  1591  0F17                     	;# 
  1592  0F18                     	;# 
  1593  0F19                     	;# 
  1594  0F1A                     	;# 
  1595  0F1B                     	;# 
  1596  0F1C                     	;# 
  1597  0F1D                     	;# 
  1598  0F1E                     	;# 
  1599  0F1F                     	;# 
  1600  0F20                     	;# 
  1601  0F21                     	;# 
  1602  0F22                     	;# 
  1603  0F23                     	;# 
  1604  0F24                     	;# 
  1605  0F25                     	;# 
  1606  0F26                     	;# 
  1607  0F27                     	;# 
  1608  0F28                     	;# 
  1609  0F29                     	;# 
  1610  0F2A                     	;# 
  1611  0F2B                     	;# 
  1612  0F2C                     	;# 
  1613  0F2D                     	;# 
  1614  0FE4                     	;# 
  1615  0FE5                     	;# 
  1616  0FE6                     	;# 
  1617  0FE7                     	;# 
  1618  0FE8                     	;# 
  1619  0FE9                     	;# 
  1620  0FEA                     	;# 
  1621  0FEB                     	;# 
  1622  0FED                     	;# 
  1623  0FEE                     	;# 
  1624  0FEF                     	;# 
  1625  0000                     	;# 
  1626  0001                     	;# 
  1627  0002                     	;# 
  1628  0003                     	;# 
  1629  0004                     	;# 
  1630  0005                     	;# 
  1631  0006                     	;# 
  1632  0007                     	;# 
  1633  0008                     	;# 
  1634  0009                     	;# 
  1635  000A                     	;# 
  1636  000B                     	;# 
  1637  000C                     	;# 
  1638  000D                     	;# 
  1639  000E                     	;# 
  1640  0011                     	;# 
  1641  0012                     	;# 
  1642  0013                     	;# 
  1643  0015                     	;# 
  1644  0016                     	;# 
  1645  0016                     	;# 
  1646  0017                     	;# 
  1647  0018                     	;# 
  1648  0019                     	;# 
  1649  001A                     	;# 
  1650  001B                     	;# 
  1651  001C                     	;# 
  1652  008C                     	;# 
  1653  008D                     	;# 
  1654  008E                     	;# 
  1655  0091                     	;# 
  1656  0092                     	;# 
  1657  0093                     	;# 
  1658  0095                     	;# 
  1659  0096                     	;# 
  1660  0097                     	;# 
  1661  0098                     	;# 
  1662  0099                     	;# 
  1663  009A                     	;# 
  1664  009B                     	;# 
  1665  009B                     	;# 
  1666  009C                     	;# 
  1667  009D                     	;# 
  1668  009E                     	;# 
  1669  009F                     	;# 
  1670  010C                     	;# 
  1671  010D                     	;# 
  1672  010E                     	;# 
  1673  0111                     	;# 
  1674  0112                     	;# 
  1675  0113                     	;# 
  1676  0114                     	;# 
  1677  0115                     	;# 
  1678  0116                     	;# 
  1679  0117                     	;# 
  1680  0118                     	;# 
  1681  0119                     	;# 
  1682  011C                     	;# 
  1683  018C                     	;# 
  1684  018D                     	;# 
  1685  018E                     	;# 
  1686  0191                     	;# 
  1687  0191                     	;# 
  1688  0192                     	;# 
  1689  0193                     	;# 
  1690  0193                     	;# 
  1691  0194                     	;# 
  1692  0195                     	;# 
  1693  0196                     	;# 
  1694  0199                     	;# 
  1695  0199                     	;# 
  1696  0199                     	;# 
  1697  019A                     	;# 
  1698  019A                     	;# 
  1699  019A                     	;# 
  1700  019B                     	;# 
  1701  019B                     	;# 
  1702  019B                     	;# 
  1703  019B                     	;# 
  1704  019B                     	;# 
  1705  019C                     	;# 
  1706  019C                     	;# 
  1707  019C                     	;# 
  1708  019D                     	;# 
  1709  019D                     	;# 
  1710  019D                     	;# 
  1711  019E                     	;# 
  1712  019E                     	;# 
  1713  019E                     	;# 
  1714  019F                     	;# 
  1715  019F                     	;# 
  1716  019F                     	;# 
  1717  019F                     	;# 
  1718  019F                     	;# 
  1719  020C                     	;# 
  1720  020D                     	;# 
  1721  020E                     	;# 
  1722  0211                     	;# 
  1723  0211                     	;# 
  1724  0212                     	;# 
  1725  0212                     	;# 
  1726  0213                     	;# 
  1727  0213                     	;# 
  1728  0214                     	;# 
  1729  0214                     	;# 
  1730  0215                     	;# 
  1731  0215                     	;# 
  1732  0215                     	;# 
  1733  0215                     	;# 
  1734  0216                     	;# 
  1735  0216                     	;# 
  1736  0217                     	;# 
  1737  0217                     	;# 
  1738  028C                     	;# 
  1739  028D                     	;# 
  1740  028E                     	;# 
  1741  0291                     	;# 
  1742  0291                     	;# 
  1743  0292                     	;# 
  1744  0293                     	;# 
  1745  0293                     	;# 
  1746  0298                     	;# 
  1747  0298                     	;# 
  1748  0299                     	;# 
  1749  029A                     	;# 
  1750  029A                     	;# 
  1751  029E                     	;# 
  1752  030C                     	;# 
  1753  030D                     	;# 
  1754  030E                     	;# 
  1755  038C                     	;# 
  1756  038D                     	;# 
  1757  038E                     	;# 
  1758  0391                     	;# 
  1759  0392                     	;# 
  1760  0393                     	;# 
  1761  0394                     	;# 
  1762  0395                     	;# 
  1763  0396                     	;# 
  1764  0397                     	;# 
  1765  0398                     	;# 
  1766  0399                     	;# 
  1767  0415                     	;# 
  1768  0416                     	;# 
  1769  0417                     	;# 
  1770  041C                     	;# 
  1771  041D                     	;# 
  1772  041E                     	;# 
  1773  0511                     	;# 
  1774  0515                     	;# 
  1775  0617                     	;# 
  1776  0618                     	;# 
  1777  0619                     	;# 
  1778  0619                     	;# 
  1779  061A                     	;# 
  1780  061B                     	;# 
  1781  061C                     	;# 
  1782  061C                     	;# 
  1783  0691                     	;# 
  1784  0692                     	;# 
  1785  0693                     	;# 
  1786  0694                     	;# 
  1787  0695                     	;# 
  1788  0696                     	;# 
  1789  0697                     	;# 
  1790  0698                     	;# 
  1791  0699                     	;# 
  1792  069A                     	;# 
  1793  069B                     	;# 
  1794  069C                     	;# 
  1795  069D                     	;# 
  1796  069E                     	;# 
  1797  069F                     	;# 
  1798  0E0F                     	;# 
  1799  0E10                     	;# 
  1800  0E11                     	;# 
  1801  0E12                     	;# 
  1802  0E13                     	;# 
  1803  0E14                     	;# 
  1804  0E15                     	;# 
  1805  0E17                     	;# 
  1806  0E20                     	;# 
  1807  0E21                     	;# 
  1808  0E22                     	;# 
  1809  0E24                     	;# 
  1810  0E25                     	;# 
  1811  0E28                     	;# 
  1812  0E29                     	;# 
  1813  0E2A                     	;# 
  1814  0E2B                     	;# 
  1815  0E90                     	;# 
  1816  0E91                     	;# 
  1817  0E92                     	;# 
  1818  0E94                     	;# 
  1819  0E95                     	;# 
  1820  0E9C                     	;# 
  1821  0E9D                     	;# 
  1822  0E9E                     	;# 
  1823  0E9F                     	;# 
  1824  0EA0                     	;# 
  1825  0EA1                     	;# 
  1826  0EA2                     	;# 
  1827  0EA3                     	;# 
  1828  0EA4                     	;# 
  1829  0EA5                     	;# 
  1830  0EA6                     	;# 
  1831  0EA7                     	;# 
  1832  0F0F                     	;# 
  1833  0F10                     	;# 
  1834  0F11                     	;# 
  1835  0F12                     	;# 
  1836  0F13                     	;# 
  1837  0F14                     	;# 
  1838  0F15                     	;# 
  1839  0F16                     	;# 
  1840  0F17                     	;# 
  1841  0F18                     	;# 
  1842  0F19                     	;# 
  1843  0F1A                     	;# 
  1844  0F1B                     	;# 
  1845  0F1C                     	;# 
  1846  0F1D                     	;# 
  1847  0F1E                     	;# 
  1848  0F1F                     	;# 
  1849  0F20                     	;# 
  1850  0F21                     	;# 
  1851  0F22                     	;# 
  1852  0F23                     	;# 
  1853  0F24                     	;# 
  1854  0F25                     	;# 
  1855  0F26                     	;# 
  1856  0F27                     	;# 
  1857  0F28                     	;# 
  1858  0F29                     	;# 
  1859  0F2A                     	;# 
  1860  0F2B                     	;# 
  1861  0F2C                     	;# 
  1862  0F2D                     	;# 
  1863  0FE4                     	;# 
  1864  0FE5                     	;# 
  1865  0FE6                     	;# 
  1866  0FE7                     	;# 
  1867  0FE8                     	;# 
  1868  0FE9                     	;# 
  1869  0FEA                     	;# 
  1870  0FEB                     	;# 
  1871  0FED                     	;# 
  1872  0FEE                     	;# 
  1873  0FEF                     	;# 
  1874  0000                     	;# 
  1875  0001                     	;# 
  1876  0002                     	;# 
  1877  0003                     	;# 
  1878  0004                     	;# 
  1879  0005                     	;# 
  1880  0006                     	;# 
  1881  0007                     	;# 
  1882  0008                     	;# 
  1883  0009                     	;# 
  1884  000A                     	;# 
  1885  000B                     	;# 
  1886  000C                     	;# 
  1887  000D                     	;# 
  1888  000E                     	;# 
  1889  0011                     	;# 
  1890  0012                     	;# 
  1891  0013                     	;# 
  1892  0015                     	;# 
  1893  0016                     	;# 
  1894  0016                     	;# 
  1895  0017                     	;# 
  1896  0018                     	;# 
  1897  0019                     	;# 
  1898  001A                     	;# 
  1899  001B                     	;# 
  1900  001C                     	;# 
  1901  008C                     	;# 
  1902  008D                     	;# 
  1903  008E                     	;# 
  1904  0091                     	;# 
  1905  0092                     	;# 
  1906  0093                     	;# 
  1907  0095                     	;# 
  1908  0096                     	;# 
  1909  0097                     	;# 
  1910  0098                     	;# 
  1911  0099                     	;# 
  1912  009A                     	;# 
  1913  009B                     	;# 
  1914  009B                     	;# 
  1915  009C                     	;# 
  1916  009D                     	;# 
  1917  009E                     	;# 
  1918  009F                     	;# 
  1919  010C                     	;# 
  1920  010D                     	;# 
  1921  010E                     	;# 
  1922  0111                     	;# 
  1923  0112                     	;# 
  1924  0113                     	;# 
  1925  0114                     	;# 
  1926  0115                     	;# 
  1927  0116                     	;# 
  1928  0117                     	;# 
  1929  0118                     	;# 
  1930  0119                     	;# 
  1931  011C                     	;# 
  1932  018C                     	;# 
  1933  018D                     	;# 
  1934  018E                     	;# 
  1935  0191                     	;# 
  1936  0191                     	;# 
  1937  0192                     	;# 
  1938  0193                     	;# 
  1939  0193                     	;# 
  1940  0194                     	;# 
  1941  0195                     	;# 
  1942  0196                     	;# 
  1943  0199                     	;# 
  1944  0199                     	;# 
  1945  0199                     	;# 
  1946  019A                     	;# 
  1947  019A                     	;# 
  1948  019A                     	;# 
  1949  019B                     	;# 
  1950  019B                     	;# 
  1951  019B                     	;# 
  1952  019B                     	;# 
  1953  019B                     	;# 
  1954  019C                     	;# 
  1955  019C                     	;# 
  1956  019C                     	;# 
  1957  019D                     	;# 
  1958  019D                     	;# 
  1959  019D                     	;# 
  1960  019E                     	;# 
  1961  019E                     	;# 
  1962  019E                     	;# 
  1963  019F                     	;# 
  1964  019F                     	;# 
  1965  019F                     	;# 
  1966  019F                     	;# 
  1967  019F                     	;# 
  1968  020C                     	;# 
  1969  020D                     	;# 
  1970  020E                     	;# 
  1971  0211                     	;# 
  1972  0211                     	;# 
  1973  0212                     	;# 
  1974  0212                     	;# 
  1975  0213                     	;# 
  1976  0213                     	;# 
  1977  0214                     	;# 
  1978  0214                     	;# 
  1979  0215                     	;# 
  1980  0215                     	;# 
  1981  0215                     	;# 
  1982  0215                     	;# 
  1983  0216                     	;# 
  1984  0216                     	;# 
  1985  0217                     	;# 
  1986  0217                     	;# 
  1987  028C                     	;# 
  1988  028D                     	;# 
  1989  028E                     	;# 
  1990  0291                     	;# 
  1991  0291                     	;# 
  1992  0292                     	;# 
  1993  0293                     	;# 
  1994  0293                     	;# 
  1995  0298                     	;# 
  1996  0298                     	;# 
  1997  0299                     	;# 
  1998  029A                     	;# 
  1999  029A                     	;# 
  2000  029E                     	;# 
  2001  030C                     	;# 
  2002  030D                     	;# 
  2003  030E                     	;# 
  2004  038C                     	;# 
  2005  038D                     	;# 
  2006  038E                     	;# 
  2007  0391                     	;# 
  2008  0392                     	;# 
  2009  0393                     	;# 
  2010  0394                     	;# 
  2011  0395                     	;# 
  2012  0396                     	;# 
  2013  0397                     	;# 
  2014  0398                     	;# 
  2015  0399                     	;# 
  2016  0415                     	;# 
  2017  0416                     	;# 
  2018  0417                     	;# 
  2019  041C                     	;# 
  2020  041D                     	;# 
  2021  041E                     	;# 
  2022  0511                     	;# 
  2023  0515                     	;# 
  2024  0617                     	;# 
  2025  0618                     	;# 
  2026  0619                     	;# 
  2027  0619                     	;# 
  2028  061A                     	;# 
  2029  061B                     	;# 
  2030  061C                     	;# 
  2031  061C                     	;# 
  2032  0691                     	;# 
  2033  0692                     	;# 
  2034  0693                     	;# 
  2035  0694                     	;# 
  2036  0695                     	;# 
  2037  0696                     	;# 
  2038  0697                     	;# 
  2039  0698                     	;# 
  2040  0699                     	;# 
  2041  069A                     	;# 
  2042  069B                     	;# 
  2043  069C                     	;# 
  2044  069D                     	;# 
  2045  069E                     	;# 
  2046  069F                     	;# 
  2047  0E0F                     	;# 
  2048  0E10                     	;# 
  2049  0E11                     	;# 
  2050  0E12                     	;# 
  2051  0E13                     	;# 
  2052  0E14                     	;# 
  2053  0E15                     	;# 
  2054  0E17                     	;# 
  2055  0E20                     	;# 
  2056  0E21                     	;# 
  2057  0E22                     	;# 
  2058  0E24                     	;# 
  2059  0E25                     	;# 
  2060  0E28                     	;# 
  2061  0E29                     	;# 
  2062  0E2A                     	;# 
  2063  0E2B                     	;# 
  2064  0E90                     	;# 
  2065  0E91                     	;# 
  2066  0E92                     	;# 
  2067  0E94                     	;# 
  2068  0E95                     	;# 
  2069  0E9C                     	;# 
  2070  0E9D                     	;# 
  2071  0E9E                     	;# 
  2072  0E9F                     	;# 
  2073  0EA0                     	;# 
  2074  0EA1                     	;# 
  2075  0EA2                     	;# 
  2076  0EA3                     	;# 
  2077  0EA4                     	;# 
  2078  0EA5                     	;# 
  2079  0EA6                     	;# 
  2080  0EA7                     	;# 
  2081  0F0F                     	;# 
  2082  0F10                     	;# 
  2083  0F11                     	;# 
  2084  0F12                     	;# 
  2085  0F13                     	;# 
  2086  0F14                     	;# 
  2087  0F15                     	;# 
  2088  0F16                     	;# 
  2089  0F17                     	;# 
  2090  0F18                     	;# 
  2091  0F19                     	;# 
  2092  0F1A                     	;# 
  2093  0F1B                     	;# 
  2094  0F1C                     	;# 
  2095  0F1D                     	;# 
  2096  0F1E                     	;# 
  2097  0F1F                     	;# 
  2098  0F20                     	;# 
  2099  0F21                     	;# 
  2100  0F22                     	;# 
  2101  0F23                     	;# 
  2102  0F24                     	;# 
  2103  0F25                     	;# 
  2104  0F26                     	;# 
  2105  0F27                     	;# 
  2106  0F28                     	;# 
  2107  0F29                     	;# 
  2108  0F2A                     	;# 
  2109  0F2B                     	;# 
  2110  0F2C                     	;# 
  2111  0F2D                     	;# 
  2112  0FE4                     	;# 
  2113  0FE5                     	;# 
  2114  0FE6                     	;# 
  2115  0FE7                     	;# 
  2116  0FE8                     	;# 
  2117  0FE9                     	;# 
  2118  0FEA                     	;# 
  2119  0FEB                     	;# 
  2120  0FED                     	;# 
  2121  0FEE                     	;# 
  2122  0FEF                     	;# 
  2123  0000                     	;# 
  2124  0001                     	;# 
  2125  0002                     	;# 
  2126  0003                     	;# 
  2127  0004                     	;# 
  2128  0005                     	;# 
  2129  0006                     	;# 
  2130  0007                     	;# 
  2131  0008                     	;# 
  2132  0009                     	;# 
  2133  000A                     	;# 
  2134  000B                     	;# 
  2135  000C                     	;# 
  2136  000D                     	;# 
  2137  000E                     	;# 
  2138  0011                     	;# 
  2139  0012                     	;# 
  2140  0013                     	;# 
  2141  0015                     	;# 
  2142  0016                     	;# 
  2143  0016                     	;# 
  2144  0017                     	;# 
  2145  0018                     	;# 
  2146  0019                     	;# 
  2147  001A                     	;# 
  2148  001B                     	;# 
  2149  001C                     	;# 
  2150  008C                     	;# 
  2151  008D                     	;# 
  2152  008E                     	;# 
  2153  0091                     	;# 
  2154  0092                     	;# 
  2155  0093                     	;# 
  2156  0095                     	;# 
  2157  0096                     	;# 
  2158  0097                     	;# 
  2159  0098                     	;# 
  2160  0099                     	;# 
  2161  009A                     	;# 
  2162  009B                     	;# 
  2163  009B                     	;# 
  2164  009C                     	;# 
  2165  009D                     	;# 
  2166  009E                     	;# 
  2167  009F                     	;# 
  2168  010C                     	;# 
  2169  010D                     	;# 
  2170  010E                     	;# 
  2171  0111                     	;# 
  2172  0112                     	;# 
  2173  0113                     	;# 
  2174  0114                     	;# 
  2175  0115                     	;# 
  2176  0116                     	;# 
  2177  0117                     	;# 
  2178  0118                     	;# 
  2179  0119                     	;# 
  2180  011C                     	;# 
  2181  018C                     	;# 
  2182  018D                     	;# 
  2183  018E                     	;# 
  2184  0191                     	;# 
  2185  0191                     	;# 
  2186  0192                     	;# 
  2187  0193                     	;# 
  2188  0193                     	;# 
  2189  0194                     	;# 
  2190  0195                     	;# 
  2191  0196                     	;# 
  2192  0199                     	;# 
  2193  0199                     	;# 
  2194  0199                     	;# 
  2195  019A                     	;# 
  2196  019A                     	;# 
  2197  019A                     	;# 
  2198  019B                     	;# 
  2199  019B                     	;# 
  2200  019B                     	;# 
  2201  019B                     	;# 
  2202  019B                     	;# 
  2203  019C                     	;# 
  2204  019C                     	;# 
  2205  019C                     	;# 
  2206  019D                     	;# 
  2207  019D                     	;# 
  2208  019D                     	;# 
  2209  019E                     	;# 
  2210  019E                     	;# 
  2211  019E                     	;# 
  2212  019F                     	;# 
  2213  019F                     	;# 
  2214  019F                     	;# 
  2215  019F                     	;# 
  2216  019F                     	;# 
  2217  020C                     	;# 
  2218  020D                     	;# 
  2219  020E                     	;# 
  2220  0211                     	;# 
  2221  0211                     	;# 
  2222  0212                     	;# 
  2223  0212                     	;# 
  2224  0213                     	;# 
  2225  0213                     	;# 
  2226  0214                     	;# 
  2227  0214                     	;# 
  2228  0215                     	;# 
  2229  0215                     	;# 
  2230  0215                     	;# 
  2231  0215                     	;# 
  2232  0216                     	;# 
  2233  0216                     	;# 
  2234  0217                     	;# 
  2235  0217                     	;# 
  2236  028C                     	;# 
  2237  028D                     	;# 
  2238  028E                     	;# 
  2239  0291                     	;# 
  2240  0291                     	;# 
  2241  0292                     	;# 
  2242  0293                     	;# 
  2243  0293                     	;# 
  2244  0298                     	;# 
  2245  0298                     	;# 
  2246  0299                     	;# 
  2247  029A                     	;# 
  2248  029A                     	;# 
  2249  029E                     	;# 
  2250  030C                     	;# 
  2251  030D                     	;# 
  2252  030E                     	;# 
  2253  038C                     	;# 
  2254  038D                     	;# 
  2255  038E                     	;# 
  2256  0391                     	;# 
  2257  0392                     	;# 
  2258  0393                     	;# 
  2259  0394                     	;# 
  2260  0395                     	;# 
  2261  0396                     	;# 
  2262  0397                     	;# 
  2263  0398                     	;# 
  2264  0399                     	;# 
  2265  0415                     	;# 
  2266  0416                     	;# 
  2267  0417                     	;# 
  2268  041C                     	;# 
  2269  041D                     	;# 
  2270  041E                     	;# 
  2271  0511                     	;# 
  2272  0515                     	;# 
  2273  0617                     	;# 
  2274  0618                     	;# 
  2275  0619                     	;# 
  2276  0619                     	;# 
  2277  061A                     	;# 
  2278  061B                     	;# 
  2279  061C                     	;# 
  2280  061C                     	;# 
  2281  0691                     	;# 
  2282  0692                     	;# 
  2283  0693                     	;# 
  2284  0694                     	;# 
  2285  0695                     	;# 
  2286  0696                     	;# 
  2287  0697                     	;# 
  2288  0698                     	;# 
  2289  0699                     	;# 
  2290  069A                     	;# 
  2291  069B                     	;# 
  2292  069C                     	;# 
  2293  069D                     	;# 
  2294  069E                     	;# 
  2295  069F                     	;# 
  2296  0E0F                     	;# 
  2297  0E10                     	;# 
  2298  0E11                     	;# 
  2299  0E12                     	;# 
  2300  0E13                     	;# 
  2301  0E14                     	;# 
  2302  0E15                     	;# 
  2303  0E17                     	;# 
  2304  0E20                     	;# 
  2305  0E21                     	;# 
  2306  0E22                     	;# 
  2307  0E24                     	;# 
  2308  0E25                     	;# 
  2309  0E28                     	;# 
  2310  0E29                     	;# 
  2311  0E2A                     	;# 
  2312  0E2B                     	;# 
  2313  0E90                     	;# 
  2314  0E91                     	;# 
  2315  0E92                     	;# 
  2316  0E94                     	;# 
  2317  0E95                     	;# 
  2318  0E9C                     	;# 
  2319  0E9D                     	;# 
  2320  0E9E                     	;# 
  2321  0E9F                     	;# 
  2322  0EA0                     	;# 
  2323  0EA1                     	;# 
  2324  0EA2                     	;# 
  2325  0EA3                     	;# 
  2326  0EA4                     	;# 
  2327  0EA5                     	;# 
  2328  0EA6                     	;# 
  2329  0EA7                     	;# 
  2330  0F0F                     	;# 
  2331  0F10                     	;# 
  2332  0F11                     	;# 
  2333  0F12                     	;# 
  2334  0F13                     	;# 
  2335  0F14                     	;# 
  2336  0F15                     	;# 
  2337  0F16                     	;# 
  2338  0F17                     	;# 
  2339  0F18                     	;# 
  2340  0F19                     	;# 
  2341  0F1A                     	;# 
  2342  0F1B                     	;# 
  2343  0F1C                     	;# 
  2344  0F1D                     	;# 
  2345  0F1E                     	;# 
  2346  0F1F                     	;# 
  2347  0F20                     	;# 
  2348  0F21                     	;# 
  2349  0F22                     	;# 
  2350  0F23                     	;# 
  2351  0F24                     	;# 
  2352  0F25                     	;# 
  2353  0F26                     	;# 
  2354  0F27                     	;# 
  2355  0F28                     	;# 
  2356  0F29                     	;# 
  2357  0F2A                     	;# 
  2358  0F2B                     	;# 
  2359  0F2C                     	;# 
  2360  0F2D                     	;# 
  2361  0FE4                     	;# 
  2362  0FE5                     	;# 
  2363  0FE6                     	;# 
  2364  0FE7                     	;# 
  2365  0FE8                     	;# 
  2366  0FE9                     	;# 
  2367  0FEA                     	;# 
  2368  0FEB                     	;# 
  2369  0FED                     	;# 
  2370  0FEE                     	;# 
  2371  0FEF                     	;# 
  2372  0000                     	;# 
  2373  0001                     	;# 
  2374  0002                     	;# 
  2375  0003                     	;# 
  2376  0004                     	;# 
  2377  0005                     	;# 
  2378  0006                     	;# 
  2379  0007                     	;# 
  2380  0008                     	;# 
  2381  0009                     	;# 
  2382  000A                     	;# 
  2383  000B                     	;# 
  2384  000C                     	;# 
  2385  000D                     	;# 
  2386  000E                     	;# 
  2387  0011                     	;# 
  2388  0012                     	;# 
  2389  0013                     	;# 
  2390  0015                     	;# 
  2391  0016                     	;# 
  2392  0016                     	;# 
  2393  0017                     	;# 
  2394  0018                     	;# 
  2395  0019                     	;# 
  2396  001A                     	;# 
  2397  001B                     	;# 
  2398  001C                     	;# 
  2399  008C                     	;# 
  2400  008D                     	;# 
  2401  008E                     	;# 
  2402  0091                     	;# 
  2403  0092                     	;# 
  2404  0093                     	;# 
  2405  0095                     	;# 
  2406  0096                     	;# 
  2407  0097                     	;# 
  2408  0098                     	;# 
  2409  0099                     	;# 
  2410  009A                     	;# 
  2411  009B                     	;# 
  2412  009B                     	;# 
  2413  009C                     	;# 
  2414  009D                     	;# 
  2415  009E                     	;# 
  2416  009F                     	;# 
  2417  010C                     	;# 
  2418  010D                     	;# 
  2419  010E                     	;# 
  2420  0111                     	;# 
  2421  0112                     	;# 
  2422  0113                     	;# 
  2423  0114                     	;# 
  2424  0115                     	;# 
  2425  0116                     	;# 
  2426  0117                     	;# 
  2427  0118                     	;# 
  2428  0119                     	;# 
  2429  011C                     	;# 
  2430  018C                     	;# 
  2431  018D                     	;# 
  2432  018E                     	;# 
  2433  0191                     	;# 
  2434  0191                     	;# 
  2435  0192                     	;# 
  2436  0193                     	;# 
  2437  0193                     	;# 
  2438  0194                     	;# 
  2439  0195                     	;# 
  2440  0196                     	;# 
  2441  0199                     	;# 
  2442  0199                     	;# 
  2443  0199                     	;# 
  2444  019A                     	;# 
  2445  019A                     	;# 
  2446  019A                     	;# 
  2447  019B                     	;# 
  2448  019B                     	;# 
  2449  019B                     	;# 
  2450  019B                     	;# 
  2451  019B                     	;# 
  2452  019C                     	;# 
  2453  019C                     	;# 
  2454  019C                     	;# 
  2455  019D                     	;# 
  2456  019D                     	;# 
  2457  019D                     	;# 
  2458  019E                     	;# 
  2459  019E                     	;# 
  2460  019E                     	;# 
  2461  019F                     	;# 
  2462  019F                     	;# 
  2463  019F                     	;# 
  2464  019F                     	;# 
  2465  019F                     	;# 
  2466  020C                     	;# 
  2467  020D                     	;# 
  2468  020E                     	;# 
  2469  0211                     	;# 
  2470  0211                     	;# 
  2471  0212                     	;# 
  2472  0212                     	;# 
  2473  0213                     	;# 
  2474  0213                     	;# 
  2475  0214                     	;# 
  2476  0214                     	;# 
  2477  0215                     	;# 
  2478  0215                     	;# 
  2479  0215                     	;# 
  2480  0215                     	;# 
  2481  0216                     	;# 
  2482  0216                     	;# 
  2483  0217                     	;# 
  2484  0217                     	;# 
  2485  028C                     	;# 
  2486  028D                     	;# 
  2487  028E                     	;# 
  2488  0291                     	;# 
  2489  0291                     	;# 
  2490  0292                     	;# 
  2491  0293                     	;# 
  2492  0293                     	;# 
  2493  0298                     	;# 
  2494  0298                     	;# 
  2495  0299                     	;# 
  2496  029A                     	;# 
  2497  029A                     	;# 
  2498  029E                     	;# 
  2499  030C                     	;# 
  2500  030D                     	;# 
  2501  030E                     	;# 
  2502  038C                     	;# 
  2503  038D                     	;# 
  2504  038E                     	;# 
  2505  0391                     	;# 
  2506  0392                     	;# 
  2507  0393                     	;# 
  2508  0394                     	;# 
  2509  0395                     	;# 
  2510  0396                     	;# 
  2511  0397                     	;# 
  2512  0398                     	;# 
  2513  0399                     	;# 
  2514  0415                     	;# 
  2515  0416                     	;# 
  2516  0417                     	;# 
  2517  041C                     	;# 
  2518  041D                     	;# 
  2519  041E                     	;# 
  2520  0511                     	;# 
  2521  0515                     	;# 
  2522  0617                     	;# 
  2523  0618                     	;# 
  2524  0619                     	;# 
  2525  0619                     	;# 
  2526  061A                     	;# 
  2527  061B                     	;# 
  2528  061C                     	;# 
  2529  061C                     	;# 
  2530  0691                     	;# 
  2531  0692                     	;# 
  2532  0693                     	;# 
  2533  0694                     	;# 
  2534  0695                     	;# 
  2535  0696                     	;# 
  2536  0697                     	;# 
  2537  0698                     	;# 
  2538  0699                     	;# 
  2539  069A                     	;# 
  2540  069B                     	;# 
  2541  069C                     	;# 
  2542  069D                     	;# 
  2543  069E                     	;# 
  2544  069F                     	;# 
  2545  0E0F                     	;# 
  2546  0E10                     	;# 
  2547  0E11                     	;# 
  2548  0E12                     	;# 
  2549  0E13                     	;# 
  2550  0E14                     	;# 
  2551  0E15                     	;# 
  2552  0E17                     	;# 
  2553  0E20                     	;# 
  2554  0E21                     	;# 
  2555  0E22                     	;# 
  2556  0E24                     	;# 
  2557  0E25                     	;# 
  2558  0E28                     	;# 
  2559  0E29                     	;# 
  2560  0E2A                     	;# 
  2561  0E2B                     	;# 
  2562  0E90                     	;# 
  2563  0E91                     	;# 
  2564  0E92                     	;# 
  2565  0E94                     	;# 
  2566  0E95                     	;# 
  2567  0E9C                     	;# 
  2568  0E9D                     	;# 
  2569  0E9E                     	;# 
  2570  0E9F                     	;# 
  2571  0EA0                     	;# 
  2572  0EA1                     	;# 
  2573  0EA2                     	;# 
  2574  0EA3                     	;# 
  2575  0EA4                     	;# 
  2576  0EA5                     	;# 
  2577  0EA6                     	;# 
  2578  0EA7                     	;# 
  2579  0F0F                     	;# 
  2580  0F10                     	;# 
  2581  0F11                     	;# 
  2582  0F12                     	;# 
  2583  0F13                     	;# 
  2584  0F14                     	;# 
  2585  0F15                     	;# 
  2586  0F16                     	;# 
  2587  0F17                     	;# 
  2588  0F18                     	;# 
  2589  0F19                     	;# 
  2590  0F1A                     	;# 
  2591  0F1B                     	;# 
  2592  0F1C                     	;# 
  2593  0F1D                     	;# 
  2594  0F1E                     	;# 
  2595  0F1F                     	;# 
  2596  0F20                     	;# 
  2597  0F21                     	;# 
  2598  0F22                     	;# 
  2599  0F23                     	;# 
  2600  0F24                     	;# 
  2601  0F25                     	;# 
  2602  0F26                     	;# 
  2603  0F27                     	;# 
  2604  0F28                     	;# 
  2605  0F29                     	;# 
  2606  0F2A                     	;# 
  2607  0F2B                     	;# 
  2608  0F2C                     	;# 
  2609  0F2D                     	;# 
  2610  0FE4                     	;# 
  2611  0FE5                     	;# 
  2612  0FE6                     	;# 
  2613  0FE7                     	;# 
  2614  0FE8                     	;# 
  2615  0FE9                     	;# 
  2616  0FEA                     	;# 
  2617  0FEB                     	;# 
  2618  0FED                     	;# 
  2619  0FEE                     	;# 
  2620  0FEF                     	;# 
  2621  0000                     	;# 
  2622  0001                     	;# 
  2623  0002                     	;# 
  2624  0003                     	;# 
  2625  0004                     	;# 
  2626  0005                     	;# 
  2627  0006                     	;# 
  2628  0007                     	;# 
  2629  0008                     	;# 
  2630  0009                     	;# 
  2631  000A                     	;# 
  2632  000B                     	;# 
  2633  000C                     	;# 
  2634  000D                     	;# 
  2635  000E                     	;# 
  2636  0011                     	;# 
  2637  0012                     	;# 
  2638  0013                     	;# 
  2639  0015                     	;# 
  2640  0016                     	;# 
  2641  0016                     	;# 
  2642  0017                     	;# 
  2643  0018                     	;# 
  2644  0019                     	;# 
  2645  001A                     	;# 
  2646  001B                     	;# 
  2647  001C                     	;# 
  2648  008C                     	;# 
  2649  008D                     	;# 
  2650  008E                     	;# 
  2651  0091                     	;# 
  2652  0092                     	;# 
  2653  0093                     	;# 
  2654  0095                     	;# 
  2655  0096                     	;# 
  2656  0097                     	;# 
  2657  0098                     	;# 
  2658  0099                     	;# 
  2659  009A                     	;# 
  2660  009B                     	;# 
  2661  009B                     	;# 
  2662  009C                     	;# 
  2663  009D                     	;# 
  2664  009E                     	;# 
  2665  009F                     	;# 
  2666  010C                     	;# 
  2667  010D                     	;# 
  2668  010E                     	;# 
  2669  0111                     	;# 
  2670  0112                     	;# 
  2671  0113                     	;# 
  2672  0114                     	;# 
  2673  0115                     	;# 
  2674  0116                     	;# 
  2675  0117                     	;# 
  2676  0118                     	;# 
  2677  0119                     	;# 
  2678  011C                     	;# 
  2679  018C                     	;# 
  2680  018D                     	;# 
  2681  018E                     	;# 
  2682  0191                     	;# 
  2683  0191                     	;# 
  2684  0192                     	;# 
  2685  0193                     	;# 
  2686  0193                     	;# 
  2687  0194                     	;# 
  2688  0195                     	;# 
  2689  0196                     	;# 
  2690  0199                     	;# 
  2691  0199                     	;# 
  2692  0199                     	;# 
  2693  019A                     	;# 
  2694  019A                     	;# 
  2695  019A                     	;# 
  2696  019B                     	;# 
  2697  019B                     	;# 
  2698  019B                     	;# 
  2699  019B                     	;# 
  2700  019B                     	;# 
  2701  019C                     	;# 
  2702  019C                     	;# 
  2703  019C                     	;# 
  2704  019D                     	;# 
  2705  019D                     	;# 
  2706  019D                     	;# 
  2707  019E                     	;# 
  2708  019E                     	;# 
  2709  019E                     	;# 
  2710  019F                     	;# 
  2711  019F                     	;# 
  2712  019F                     	;# 
  2713  019F                     	;# 
  2714  019F                     	;# 
  2715  020C                     	;# 
  2716  020D                     	;# 
  2717  020E                     	;# 
  2718  0211                     	;# 
  2719  0211                     	;# 
  2720  0212                     	;# 
  2721  0212                     	;# 
  2722  0213                     	;# 
  2723  0213                     	;# 
  2724  0214                     	;# 
  2725  0214                     	;# 
  2726  0215                     	;# 
  2727  0215                     	;# 
  2728  0215                     	;# 
  2729  0215                     	;# 
  2730  0216                     	;# 
  2731  0216                     	;# 
  2732  0217                     	;# 
  2733  0217                     	;# 
  2734  028C                     	;# 
  2735  028D                     	;# 
  2736  028E                     	;# 
  2737  0291                     	;# 
  2738  0291                     	;# 
  2739  0292                     	;# 
  2740  0293                     	;# 
  2741  0293                     	;# 
  2742  0298                     	;# 
  2743  0298                     	;# 
  2744  0299                     	;# 
  2745  029A                     	;# 
  2746  029A                     	;# 
  2747  029E                     	;# 
  2748  030C                     	;# 
  2749  030D                     	;# 
  2750  030E                     	;# 
  2751  038C                     	;# 
  2752  038D                     	;# 
  2753  038E                     	;# 
  2754  0391                     	;# 
  2755  0392                     	;# 
  2756  0393                     	;# 
  2757  0394                     	;# 
  2758  0395                     	;# 
  2759  0396                     	;# 
  2760  0397                     	;# 
  2761  0398                     	;# 
  2762  0399                     	;# 
  2763  0415                     	;# 
  2764  0416                     	;# 
  2765  0417                     	;# 
  2766  041C                     	;# 
  2767  041D                     	;# 
  2768  041E                     	;# 
  2769  0511                     	;# 
  2770  0515                     	;# 
  2771  0617                     	;# 
  2772  0618                     	;# 
  2773  0619                     	;# 
  2774  0619                     	;# 
  2775  061A                     	;# 
  2776  061B                     	;# 
  2777  061C                     	;# 
  2778  061C                     	;# 
  2779  0691                     	;# 
  2780  0692                     	;# 
  2781  0693                     	;# 
  2782  0694                     	;# 
  2783  0695                     	;# 
  2784  0696                     	;# 
  2785  0697                     	;# 
  2786  0698                     	;# 
  2787  0699                     	;# 
  2788  069A                     	;# 
  2789  069B                     	;# 
  2790  069C                     	;# 
  2791  069D                     	;# 
  2792  069E                     	;# 
  2793  069F                     	;# 
  2794  0E0F                     	;# 
  2795  0E10                     	;# 
  2796  0E11                     	;# 
  2797  0E12                     	;# 
  2798  0E13                     	;# 
  2799  0E14                     	;# 
  2800  0E15                     	;# 
  2801  0E17                     	;# 
  2802  0E20                     	;# 
  2803  0E21                     	;# 
  2804  0E22                     	;# 
  2805  0E24                     	;# 
  2806  0E25                     	;# 
  2807  0E28                     	;# 
  2808  0E29                     	;# 
  2809  0E2A                     	;# 
  2810  0E2B                     	;# 
  2811  0E90                     	;# 
  2812  0E91                     	;# 
  2813  0E92                     	;# 
  2814  0E94                     	;# 
  2815  0E95                     	;# 
  2816  0E9C                     	;# 
  2817  0E9D                     	;# 
  2818  0E9E                     	;# 
  2819  0E9F                     	;# 
  2820  0EA0                     	;# 
  2821  0EA1                     	;# 
  2822  0EA2                     	;# 
  2823  0EA3                     	;# 
  2824  0EA4                     	;# 
  2825  0EA5                     	;# 
  2826  0EA6                     	;# 
  2827  0EA7                     	;# 
  2828  0F0F                     	;# 
  2829  0F10                     	;# 
  2830  0F11                     	;# 
  2831  0F12                     	;# 
  2832  0F13                     	;# 
  2833  0F14                     	;# 
  2834  0F15                     	;# 
  2835  0F16                     	;# 
  2836  0F17                     	;# 
  2837  0F18                     	;# 
  2838  0F19                     	;# 
  2839  0F1A                     	;# 
  2840  0F1B                     	;# 
  2841  0F1C                     	;# 
  2842  0F1D                     	;# 
  2843  0F1E                     	;# 
  2844  0F1F                     	;# 
  2845  0F20                     	;# 
  2846  0F21                     	;# 
  2847  0F22                     	;# 
  2848  0F23                     	;# 
  2849  0F24                     	;# 
  2850  0F25                     	;# 
  2851  0F26                     	;# 
  2852  0F27                     	;# 
  2853  0F28                     	;# 
  2854  0F29                     	;# 
  2855  0F2A                     	;# 
  2856  0F2B                     	;# 
  2857  0F2C                     	;# 
  2858  0F2D                     	;# 
  2859  0FE4                     	;# 
  2860  0FE5                     	;# 
  2861  0FE6                     	;# 
  2862  0FE7                     	;# 
  2863  0FE8                     	;# 
  2864  0FE9                     	;# 
  2865  0FEA                     	;# 
  2866  0FEB                     	;# 
  2867  0FED                     	;# 
  2868  0FEE                     	;# 
  2869  0FEF                     	;# 
  2870  0000                     	;# 
  2871  0001                     	;# 
  2872  0002                     	;# 
  2873  0003                     	;# 
  2874  0004                     	;# 
  2875  0005                     	;# 
  2876  0006                     	;# 
  2877  0007                     	;# 
  2878  0008                     	;# 
  2879  0009                     	;# 
  2880  000A                     	;# 
  2881  000B                     	;# 
  2882  000C                     	;# 
  2883  000D                     	;# 
  2884  000E                     	;# 
  2885  0011                     	;# 
  2886  0012                     	;# 
  2887  0013                     	;# 
  2888  0015                     	;# 
  2889  0016                     	;# 
  2890  0016                     	;# 
  2891  0017                     	;# 
  2892  0018                     	;# 
  2893  0019                     	;# 
  2894  001A                     	;# 
  2895  001B                     	;# 
  2896  001C                     	;# 
  2897  008C                     	;# 
  2898  008D                     	;# 
  2899  008E                     	;# 
  2900  0091                     	;# 
  2901  0092                     	;# 
  2902  0093                     	;# 
  2903  0095                     	;# 
  2904  0096                     	;# 
  2905  0097                     	;# 
  2906  0098                     	;# 
  2907  0099                     	;# 
  2908  009A                     	;# 
  2909  009B                     	;# 
  2910  009B                     	;# 
  2911  009C                     	;# 
  2912  009D                     	;# 
  2913  009E                     	;# 
  2914  009F                     	;# 
  2915  010C                     	;# 
  2916  010D                     	;# 
  2917  010E                     	;# 
  2918  0111                     	;# 
  2919  0112                     	;# 
  2920  0113                     	;# 
  2921  0114                     	;# 
  2922  0115                     	;# 
  2923  0116                     	;# 
  2924  0117                     	;# 
  2925  0118                     	;# 
  2926  0119                     	;# 
  2927  011C                     	;# 
  2928  018C                     	;# 
  2929  018D                     	;# 
  2930  018E                     	;# 
  2931  0191                     	;# 
  2932  0191                     	;# 
  2933  0192                     	;# 
  2934  0193                     	;# 
  2935  0193                     	;# 
  2936  0194                     	;# 
  2937  0195                     	;# 
  2938  0196                     	;# 
  2939  0199                     	;# 
  2940  0199                     	;# 
  2941  0199                     	;# 
  2942  019A                     	;# 
  2943  019A                     	;# 
  2944  019A                     	;# 
  2945  019B                     	;# 
  2946  019B                     	;# 
  2947  019B                     	;# 
  2948  019B                     	;# 
  2949  019B                     	;# 
  2950  019C                     	;# 
  2951  019C                     	;# 
  2952  019C                     	;# 
  2953  019D                     	;# 
  2954  019D                     	;# 
  2955  019D                     	;# 
  2956  019E                     	;# 
  2957  019E                     	;# 
  2958  019E                     	;# 
  2959  019F                     	;# 
  2960  019F                     	;# 
  2961  019F                     	;# 
  2962  019F                     	;# 
  2963  019F                     	;# 
  2964  020C                     	;# 
  2965  020D                     	;# 
  2966  020E                     	;# 
  2967  0211                     	;# 
  2968  0211                     	;# 
  2969  0212                     	;# 
  2970  0212                     	;# 
  2971  0213                     	;# 
  2972  0213                     	;# 
  2973  0214                     	;# 
  2974  0214                     	;# 
  2975  0215                     	;# 
  2976  0215                     	;# 
  2977  0215                     	;# 
  2978  0215                     	;# 
  2979  0216                     	;# 
  2980  0216                     	;# 
  2981  0217                     	;# 
  2982  0217                     	;# 
  2983  028C                     	;# 
  2984  028D                     	;# 
  2985  028E                     	;# 
  2986  0291                     	;# 
  2987  0291                     	;# 
  2988  0292                     	;# 
  2989  0293                     	;# 
  2990  0293                     	;# 
  2991  0298                     	;# 
  2992  0298                     	;# 
  2993  0299                     	;# 
  2994  029A                     	;# 
  2995  029A                     	;# 
  2996  029E                     	;# 
  2997  030C                     	;# 
  2998  030D                     	;# 
  2999  030E                     	;# 
  3000  038C                     	;# 
  3001  038D                     	;# 
  3002  038E                     	;# 
  3003  0391                     	;# 
  3004  0392                     	;# 
  3005  0393                     	;# 
  3006  0394                     	;# 
  3007  0395                     	;# 
  3008  0396                     	;# 
  3009  0397                     	;# 
  3010  0398                     	;# 
  3011  0399                     	;# 
  3012  0415                     	;# 
  3013  0416                     	;# 
  3014  0417                     	;# 
  3015  041C                     	;# 
  3016  041D                     	;# 
  3017  041E                     	;# 
  3018  0511                     	;# 
  3019  0515                     	;# 
  3020  0617                     	;# 
  3021  0618                     	;# 
  3022  0619                     	;# 
  3023  0619                     	;# 
  3024  061A                     	;# 
  3025  061B                     	;# 
  3026  061C                     	;# 
  3027  061C                     	;# 
  3028  0691                     	;# 
  3029  0692                     	;# 
  3030  0693                     	;# 
  3031  0694                     	;# 
  3032  0695                     	;# 
  3033  0696                     	;# 
  3034  0697                     	;# 
  3035  0698                     	;# 
  3036  0699                     	;# 
  3037  069A                     	;# 
  3038  069B                     	;# 
  3039  069C                     	;# 
  3040  069D                     	;# 
  3041  069E                     	;# 
  3042  069F                     	;# 
  3043  0E0F                     	;# 
  3044  0E10                     	;# 
  3045  0E11                     	;# 
  3046  0E12                     	;# 
  3047  0E13                     	;# 
  3048  0E14                     	;# 
  3049  0E15                     	;# 
  3050  0E17                     	;# 
  3051  0E20                     	;# 
  3052  0E21                     	;# 
  3053  0E22                     	;# 
  3054  0E24                     	;# 
  3055  0E25                     	;# 
  3056  0E28                     	;# 
  3057  0E29                     	;# 
  3058  0E2A                     	;# 
  3059  0E2B                     	;# 
  3060  0E90                     	;# 
  3061  0E91                     	;# 
  3062  0E92                     	;# 
  3063  0E94                     	;# 
  3064  0E95                     	;# 
  3065  0E9C                     	;# 
  3066  0E9D                     	;# 
  3067  0E9E                     	;# 
  3068  0E9F                     	;# 
  3069  0EA0                     	;# 
  3070  0EA1                     	;# 
  3071  0EA2                     	;# 
  3072  0EA3                     	;# 
  3073  0EA4                     	;# 
  3074  0EA5                     	;# 
  3075  0EA6                     	;# 
  3076  0EA7                     	;# 
  3077  0F0F                     	;# 
  3078  0F10                     	;# 
  3079  0F11                     	;# 
  3080  0F12                     	;# 
  3081  0F13                     	;# 
  3082  0F14                     	;# 
  3083  0F15                     	;# 
  3084  0F16                     	;# 
  3085  0F17                     	;# 
  3086  0F18                     	;# 
  3087  0F19                     	;# 
  3088  0F1A                     	;# 
  3089  0F1B                     	;# 
  3090  0F1C                     	;# 
  3091  0F1D                     	;# 
  3092  0F1E                     	;# 
  3093  0F1F                     	;# 
  3094  0F20                     	;# 
  3095  0F21                     	;# 
  3096  0F22                     	;# 
  3097  0F23                     	;# 
  3098  0F24                     	;# 
  3099  0F25                     	;# 
  3100  0F26                     	;# 
  3101  0F27                     	;# 
  3102  0F28                     	;# 
  3103  0F29                     	;# 
  3104  0F2A                     	;# 
  3105  0F2B                     	;# 
  3106  0F2C                     	;# 
  3107  0F2D                     	;# 
  3108  0FE4                     	;# 
  3109  0FE5                     	;# 
  3110  0FE6                     	;# 
  3111  0FE7                     	;# 
  3112  0FE8                     	;# 
  3113  0FE9                     	;# 
  3114  0FEA                     	;# 
  3115  0FEB                     	;# 
  3116  0FED                     	;# 
  3117  0FEE                     	;# 
  3118  0FEF                     	;# 
  3119  0000                     	;# 
  3120  0001                     	;# 
  3121  0002                     	;# 
  3122  0003                     	;# 
  3123  0004                     	;# 
  3124  0005                     	;# 
  3125  0006                     	;# 
  3126  0007                     	;# 
  3127  0008                     	;# 
  3128  0009                     	;# 
  3129  000A                     	;# 
  3130  000B                     	;# 
  3131  000C                     	;# 
  3132  000D                     	;# 
  3133  000E                     	;# 
  3134  0011                     	;# 
  3135  0012                     	;# 
  3136  0013                     	;# 
  3137  0015                     	;# 
  3138  0016                     	;# 
  3139  0016                     	;# 
  3140  0017                     	;# 
  3141  0018                     	;# 
  3142  0019                     	;# 
  3143  001A                     	;# 
  3144  001B                     	;# 
  3145  001C                     	;# 
  3146  008C                     	;# 
  3147  008D                     	;# 
  3148  008E                     	;# 
  3149  0091                     	;# 
  3150  0092                     	;# 
  3151  0093                     	;# 
  3152  0095                     	;# 
  3153  0096                     	;# 
  3154  0097                     	;# 
  3155  0098                     	;# 
  3156  0099                     	;# 
  3157  009A                     	;# 
  3158  009B                     	;# 
  3159  009B                     	;# 
  3160  009C                     	;# 
  3161  009D                     	;# 
  3162  009E                     	;# 
  3163  009F                     	;# 
  3164  010C                     	;# 
  3165  010D                     	;# 
  3166  010E                     	;# 
  3167  0111                     	;# 
  3168  0112                     	;# 
  3169  0113                     	;# 
  3170  0114                     	;# 
  3171  0115                     	;# 
  3172  0116                     	;# 
  3173  0117                     	;# 
  3174  0118                     	;# 
  3175  0119                     	;# 
  3176  011C                     	;# 
  3177  018C                     	;# 
  3178  018D                     	;# 
  3179  018E                     	;# 
  3180  0191                     	;# 
  3181  0191                     	;# 
  3182  0192                     	;# 
  3183  0193                     	;# 
  3184  0193                     	;# 
  3185  0194                     	;# 
  3186  0195                     	;# 
  3187  0196                     	;# 
  3188  0199                     	;# 
  3189  0199                     	;# 
  3190  0199                     	;# 
  3191  019A                     	;# 
  3192  019A                     	;# 
  3193  019A                     	;# 
  3194  019B                     	;# 
  3195  019B                     	;# 
  3196  019B                     	;# 
  3197  019B                     	;# 
  3198  019B                     	;# 
  3199  019C                     	;# 
  3200  019C                     	;# 
  3201  019C                     	;# 
  3202  019D                     	;# 
  3203  019D                     	;# 
  3204  019D                     	;# 
  3205  019E                     	;# 
  3206  019E                     	;# 
  3207  019E                     	;# 
  3208  019F                     	;# 
  3209  019F                     	;# 
  3210  019F                     	;# 
  3211  019F                     	;# 
  3212  019F                     	;# 
  3213  020C                     	;# 
  3214  020D                     	;# 
  3215  020E                     	;# 
  3216  0211                     	;# 
  3217  0211                     	;# 
  3218  0212                     	;# 
  3219  0212                     	;# 
  3220  0213                     	;# 
  3221  0213                     	;# 
  3222  0214                     	;# 
  3223  0214                     	;# 
  3224  0215                     	;# 
  3225  0215                     	;# 
  3226  0215                     	;# 
  3227  0215                     	;# 
  3228  0216                     	;# 
  3229  0216                     	;# 
  3230  0217                     	;# 
  3231  0217                     	;# 
  3232  028C                     	;# 
  3233  028D                     	;# 
  3234  028E                     	;# 
  3235  0291                     	;# 
  3236  0291                     	;# 
  3237  0292                     	;# 
  3238  0293                     	;# 
  3239  0293                     	;# 
  3240  0298                     	;# 
  3241  0298                     	;# 
  3242  0299                     	;# 
  3243  029A                     	;# 
  3244  029A                     	;# 
  3245  029E                     	;# 
  3246  030C                     	;# 
  3247  030D                     	;# 
  3248  030E                     	;# 
  3249  038C                     	;# 
  3250  038D                     	;# 
  3251  038E                     	;# 
  3252  0391                     	;# 
  3253  0392                     	;# 
  3254  0393                     	;# 
  3255  0394                     	;# 
  3256  0395                     	;# 
  3257  0396                     	;# 
  3258  0397                     	;# 
  3259  0398                     	;# 
  3260  0399                     	;# 
  3261  0415                     	;# 
  3262  0416                     	;# 
  3263  0417                     	;# 
  3264  041C                     	;# 
  3265  041D                     	;# 
  3266  041E                     	;# 
  3267  0511                     	;# 
  3268  0515                     	;# 
  3269  0617                     	;# 
  3270  0618                     	;# 
  3271  0619                     	;# 
  3272  0619                     	;# 
  3273  061A                     	;# 
  3274  061B                     	;# 
  3275  061C                     	;# 
  3276  061C                     	;# 
  3277  0691                     	;# 
  3278  0692                     	;# 
  3279  0693                     	;# 
  3280  0694                     	;# 
  3281  0695                     	;# 
  3282  0696                     	;# 
  3283  0697                     	;# 
  3284  0698                     	;# 
  3285  0699                     	;# 
  3286  069A                     	;# 
  3287  069B                     	;# 
  3288  069C                     	;# 
  3289  069D                     	;# 
  3290  069E                     	;# 
  3291  069F                     	;# 
  3292  0E0F                     	;# 
  3293  0E10                     	;# 
  3294  0E11                     	;# 
  3295  0E12                     	;# 
  3296  0E13                     	;# 
  3297  0E14                     	;# 
  3298  0E15                     	;# 
  3299  0E17                     	;# 
  3300  0E20                     	;# 
  3301  0E21                     	;# 
  3302  0E22                     	;# 
  3303  0E24                     	;# 
  3304  0E25                     	;# 
  3305  0E28                     	;# 
  3306  0E29                     	;# 
  3307  0E2A                     	;# 
  3308  0E2B                     	;# 
  3309  0E90                     	;# 
  3310  0E91                     	;# 
  3311  0E92                     	;# 
  3312  0E94                     	;# 
  3313  0E95                     	;# 
  3314  0E9C                     	;# 
  3315  0E9D                     	;# 
  3316  0E9E                     	;# 
  3317  0E9F                     	;# 
  3318  0EA0                     	;# 
  3319  0EA1                     	;# 
  3320  0EA2                     	;# 
  3321  0EA3                     	;# 
  3322  0EA4                     	;# 
  3323  0EA5                     	;# 
  3324  0EA6                     	;# 
  3325  0EA7                     	;# 
  3326  0F0F                     	;# 
  3327  0F10                     	;# 
  3328  0F11                     	;# 
  3329  0F12                     	;# 
  3330  0F13                     	;# 
  3331  0F14                     	;# 
  3332  0F15                     	;# 
  3333  0F16                     	;# 
  3334  0F17                     	;# 
  3335  0F18                     	;# 
  3336  0F19                     	;# 
  3337  0F1A                     	;# 
  3338  0F1B                     	;# 
  3339  0F1C                     	;# 
  3340  0F1D                     	;# 
  3341  0F1E                     	;# 
  3342  0F1F                     	;# 
  3343  0F20                     	;# 
  3344  0F21                     	;# 
  3345  0F22                     	;# 
  3346  0F23                     	;# 
  3347  0F24                     	;# 
  3348  0F25                     	;# 
  3349  0F26                     	;# 
  3350  0F27                     	;# 
  3351  0F28                     	;# 
  3352  0F29                     	;# 
  3353  0F2A                     	;# 
  3354  0F2B                     	;# 
  3355  0F2C                     	;# 
  3356  0F2D                     	;# 
  3357  0FE4                     	;# 
  3358  0FE5                     	;# 
  3359  0FE6                     	;# 
  3360  0FE7                     	;# 
  3361  0FE8                     	;# 
  3362  0FE9                     	;# 
  3363  0FEA                     	;# 
  3364  0FEB                     	;# 
  3365  0FED                     	;# 
  3366  0FEE                     	;# 
  3367  0FEF                     	;# 
  3368  0000                     	;# 
  3369  0001                     	;# 
  3370  0002                     	;# 
  3371  0003                     	;# 
  3372  0004                     	;# 
  3373  0005                     	;# 
  3374  0006                     	;# 
  3375  0007                     	;# 
  3376  0008                     	;# 
  3377  0009                     	;# 
  3378  000A                     	;# 
  3379  000B                     	;# 
  3380  000C                     	;# 
  3381  000D                     	;# 
  3382  000E                     	;# 
  3383  0011                     	;# 
  3384  0012                     	;# 
  3385  0013                     	;# 
  3386  0015                     	;# 
  3387  0016                     	;# 
  3388  0016                     	;# 
  3389  0017                     	;# 
  3390  0018                     	;# 
  3391  0019                     	;# 
  3392  001A                     	;# 
  3393  001B                     	;# 
  3394  001C                     	;# 
  3395  008C                     	;# 
  3396  008D                     	;# 
  3397  008E                     	;# 
  3398  0091                     	;# 
  3399  0092                     	;# 
  3400  0093                     	;# 
  3401  0095                     	;# 
  3402  0096                     	;# 
  3403  0097                     	;# 
  3404  0098                     	;# 
  3405  0099                     	;# 
  3406  009A                     	;# 
  3407  009B                     	;# 
  3408  009B                     	;# 
  3409  009C                     	;# 
  3410  009D                     	;# 
  3411  009E                     	;# 
  3412  009F                     	;# 
  3413  010C                     	;# 
  3414  010D                     	;# 
  3415  010E                     	;# 
  3416  0111                     	;# 
  3417  0112                     	;# 
  3418  0113                     	;# 
  3419  0114                     	;# 
  3420  0115                     	;# 
  3421  0116                     	;# 
  3422  0117                     	;# 
  3423  0118                     	;# 
  3424  0119                     	;# 
  3425  011C                     	;# 
  3426  018C                     	;# 
  3427  018D                     	;# 
  3428  018E                     	;# 
  3429  0191                     	;# 
  3430  0191                     	;# 
  3431  0192                     	;# 
  3432  0193                     	;# 
  3433  0193                     	;# 
  3434  0194                     	;# 
  3435  0195                     	;# 
  3436  0196                     	;# 
  3437  0199                     	;# 
  3438  0199                     	;# 
  3439  0199                     	;# 
  3440  019A                     	;# 
  3441  019A                     	;# 
  3442  019A                     	;# 
  3443  019B                     	;# 
  3444  019B                     	;# 
  3445  019B                     	;# 
  3446  019B                     	;# 
  3447  019B                     	;# 
  3448  019C                     	;# 
  3449  019C                     	;# 
  3450  019C                     	;# 
  3451  019D                     	;# 
  3452  019D                     	;# 
  3453  019D                     	;# 
  3454  019E                     	;# 
  3455  019E                     	;# 
  3456  019E                     	;# 
  3457  019F                     	;# 
  3458  019F                     	;# 
  3459  019F                     	;# 
  3460  019F                     	;# 
  3461  019F                     	;# 
  3462  020C                     	;# 
  3463  020D                     	;# 
  3464  020E                     	;# 
  3465  0211                     	;# 
  3466  0211                     	;# 
  3467  0212                     	;# 
  3468  0212                     	;# 
  3469  0213                     	;# 
  3470  0213                     	;# 
  3471  0214                     	;# 
  3472  0214                     	;# 
  3473  0215                     	;# 
  3474  0215                     	;# 
  3475  0215                     	;# 
  3476  0215                     	;# 
  3477  0216                     	;# 
  3478  0216                     	;# 
  3479  0217                     	;# 
  3480  0217                     	;# 
  3481  028C                     	;# 
  3482  028D                     	;# 
  3483  028E                     	;# 
  3484  0291                     	;# 
  3485  0291                     	;# 
  3486  0292                     	;# 
  3487  0293                     	;# 
  3488  0293                     	;# 
  3489  0298                     	;# 
  3490  0298                     	;# 
  3491  0299                     	;# 
  3492  029A                     	;# 
  3493  029A                     	;# 
  3494  029E                     	;# 
  3495  030C                     	;# 
  3496  030D                     	;# 
  3497  030E                     	;# 
  3498  038C                     	;# 
  3499  038D                     	;# 
  3500  038E                     	;# 
  3501  0391                     	;# 
  3502  0392                     	;# 
  3503  0393                     	;# 
  3504  0394                     	;# 
  3505  0395                     	;# 
  3506  0396                     	;# 
  3507  0397                     	;# 
  3508  0398                     	;# 
  3509  0399                     	;# 
  3510  0415                     	;# 
  3511  0416                     	;# 
  3512  0417                     	;# 
  3513  041C                     	;# 
  3514  041D                     	;# 
  3515  041E                     	;# 
  3516  0511                     	;# 
  3517  0515                     	;# 
  3518  0617                     	;# 
  3519  0618                     	;# 
  3520  0619                     	;# 
  3521  0619                     	;# 
  3522  061A                     	;# 
  3523  061B                     	;# 
  3524  061C                     	;# 
  3525  061C                     	;# 
  3526  0691                     	;# 
  3527  0692                     	;# 
  3528  0693                     	;# 
  3529  0694                     	;# 
  3530  0695                     	;# 
  3531  0696                     	;# 
  3532  0697                     	;# 
  3533  0698                     	;# 
  3534  0699                     	;# 
  3535  069A                     	;# 
  3536  069B                     	;# 
  3537  069C                     	;# 
  3538  069D                     	;# 
  3539  069E                     	;# 
  3540  069F                     	;# 
  3541  0E0F                     	;# 
  3542  0E10                     	;# 
  3543  0E11                     	;# 
  3544  0E12                     	;# 
  3545  0E13                     	;# 
  3546  0E14                     	;# 
  3547  0E15                     	;# 
  3548  0E17                     	;# 
  3549  0E20                     	;# 
  3550  0E21                     	;# 
  3551  0E22                     	;# 
  3552  0E24                     	;# 
  3553  0E25                     	;# 
  3554  0E28                     	;# 
  3555  0E29                     	;# 
  3556  0E2A                     	;# 
  3557  0E2B                     	;# 
  3558  0E90                     	;# 
  3559  0E91                     	;# 
  3560  0E92                     	;# 
  3561  0E94                     	;# 
  3562  0E95                     	;# 
  3563  0E9C                     	;# 
  3564  0E9D                     	;# 
  3565  0E9E                     	;# 
  3566  0E9F                     	;# 
  3567  0EA0                     	;# 
  3568  0EA1                     	;# 
  3569  0EA2                     	;# 
  3570  0EA3                     	;# 
  3571  0EA4                     	;# 
  3572  0EA5                     	;# 
  3573  0EA6                     	;# 
  3574  0EA7                     	;# 
  3575  0F0F                     	;# 
  3576  0F10                     	;# 
  3577  0F11                     	;# 
  3578  0F12                     	;# 
  3579  0F13                     	;# 
  3580  0F14                     	;# 
  3581  0F15                     	;# 
  3582  0F16                     	;# 
  3583  0F17                     	;# 
  3584  0F18                     	;# 
  3585  0F19                     	;# 
  3586  0F1A                     	;# 
  3587  0F1B                     	;# 
  3588  0F1C                     	;# 
  3589  0F1D                     	;# 
  3590  0F1E                     	;# 
  3591  0F1F                     	;# 
  3592  0F20                     	;# 
  3593  0F21                     	;# 
  3594  0F22                     	;# 
  3595  0F23                     	;# 
  3596  0F24                     	;# 
  3597  0F25                     	;# 
  3598  0F26                     	;# 
  3599  0F27                     	;# 
  3600  0F28                     	;# 
  3601  0F29                     	;# 
  3602  0F2A                     	;# 
  3603  0F2B                     	;# 
  3604  0F2C                     	;# 
  3605  0F2D                     	;# 
  3606  0FE4                     	;# 
  3607  0FE5                     	;# 
  3608  0FE6                     	;# 
  3609  0FE7                     	;# 
  3610  0FE8                     	;# 
  3611  0FE9                     	;# 
  3612  0FEA                     	;# 
  3613  0FEB                     	;# 
  3614  0FED                     	;# 
  3615  0FEE                     	;# 
  3616  0FEF                     	;# 
  3617                           
  3618 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  3619  0000                     
  3620 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  3621  0000                     
  3622 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  3623  0000                     
  3624                           	psect	idataCOMMON
  3625  0003                     __pidataCOMMON:
  3626                           
  3627                           ;initializer for _dc_frequency_flag
  3628  0003  3401               	retlw	1
  3629                           
  3630                           	psect	idataBANK1
  3631  0C2A                     __pidataBANK1:
  3632                           
  3633                           ;initializer for _maxFrequencyIndex
  3634  0C2A  340A               	retlw	10
  3635  0C2B  3400               	retlw	0
  3636                           
  3637                           ;initializer for _maxCurrentIndex
  3638  0C2C  340A               	retlw	10
  3639  0C2D  3400               	retlw	0
  3640                           
  3641                           ;initializer for _toggle
  3642  0C2E  3401               	retlw	1
  3643                           
  3644                           ;initializer for _currentIsOn
  3645  0C2F  3401               	retlw	1
  3646                           
  3647                           ;initializer for _currentValue
  3648  0C30  3400               	retlw	0
  3649  0C31  3400               	retlw	0
  3650  0C32  341E               	retlw	30
  3651  0C33  3400               	retlw	0
  3652  0C34  3432               	retlw	50
  3653  0C35  3400               	retlw	0
  3654  0C36  3446               	retlw	70
  3655  0C37  3400               	retlw	0
  3656  0C38  345A               	retlw	90
  3657  0C39  3400               	retlw	0
  3658  0C3A  346E               	retlw	110
  3659  0C3B  3400               	retlw	0
  3660  0C3C  3482               	retlw	130
  3661  0C3D  3400               	retlw	0
  3662  0C3E  34A0               	retlw	160
  3663  0C3F  3400               	retlw	0
  3664  0C40  34DC               	retlw	220
  3665  0C41  3400               	retlw	0
  3666  0C42  34FA               	retlw	250
  3667  0C43  3400               	retlw	0
  3668                           
  3669                           	psect	idataBANK2
  3670  0BD0                     __pidataBANK2:
  3671                           
  3672                           ;initializer for _frequencyValue
  3673  0BD0  3400               	retlw	0
  3674  0BD1  3400               	retlw	0
  3675  0BD2  3401               	retlw	1
  3676  0BD3  3400               	retlw	0
  3677  0BD4  3441               	retlw	65
  3678  0BD5  3400               	retlw	0
  3679  0BD6  3446               	retlw	70
  3680  0BD7  3400               	retlw	0
  3681  0BD8  344B               	retlw	75
  3682  0BD9  3400               	retlw	0
  3683  0BDA  3450               	retlw	80
  3684  0BDB  3400               	retlw	0
  3685  0BDC  3464               	retlw	100
  3686  0BDD  3400               	retlw	0
  3687  0BDE  3478               	retlw	120
  3688  0BDF  3400               	retlw	0
  3689  0BE0  3482               	retlw	130
  3690  0BE1  3400               	retlw	0
  3691  0BE2  348C               	retlw	140
  3692  0BE3  3400               	retlw	0
  3693                           
  3694                           	psect	stringtext1
  3695  0871                     __pstringtext1:
  3696  0871                     main@BATTERY_THRESHOLD:
  3697  0871  34D0               	retlw	208
  3698  0872  3407               	retlw	7
  3699  0873                     __end_ofmain@BATTERY_THRESHOLD:
  3700                           
  3701                           	psect	stringtext2
  3702  0873                     __pstringtext2:
  3703  0873                     main@BATTERY_NUM_LOW_READINGS:
  3704  0873  3410               	retlw	16
  3705  0874  3427               	retlw	39
  3706  0875                     __end_ofmain@BATTERY_NUM_LOW_READINGS:
  3707  0FE0                     _HEF_persistent_state_absaddr	set	4064
  3708  0FE0                     _HEF_persistent_state_absaddr	set	4064
  3709                           
  3710                           	psect	_HEF_persistent_state_text
  3711  0FE0                     __p_HEF_persistent_state_text:
  3712  0FE0                     _HEF_persistent_state:
  3713  0FE0  3405               	retlw	5
  3714  0FE1  3403               	retlw	3
  3715  0FE2  3400               	retlw	0
  3716  0FE3  3400               	retlw	0
  3717  0FE4  3400               	retlw	0
  3718  0FE5  3400               	retlw	0
  3719  0FE6  3400               	retlw	0
  3720  0FE7  3400               	retlw	0
  3721  0FE8  3400               	retlw	0
  3722  0FE9  3400               	retlw	0
  3723  0FEA  3400               	retlw	0
  3724  0FEB  3400               	retlw	0
  3725  0FEC  3400               	retlw	0
  3726  0FED  3400               	retlw	0
  3727  0FEE  3400               	retlw	0
  3728  0FEF  3400               	retlw	0
  3729  0FF0  3400               	retlw	0
  3730  0FF1  3400               	retlw	0
  3731  0FF2  3400               	retlw	0
  3732  0FF3  3400               	retlw	0
  3733  0FF4  3400               	retlw	0
  3734  0FF5  3400               	retlw	0
  3735  0FF6  3400               	retlw	0
  3736  0FF7  3400               	retlw	0
  3737  0FF8  3400               	retlw	0
  3738  0FF9  3400               	retlw	0
  3739  0FFA  3400               	retlw	0
  3740  0FFB  3400               	retlw	0
  3741  0FFC  3400               	retlw	0
  3742  0FFD  3400               	retlw	0
  3743  0FFE  3400               	retlw	0
  3744  0FFF  3400               	retlw	0
  3745  1000                     __end_of_HEF_persistent_state:
  3746                           
  3747                           	psect	nvBANK1
  3748  00D4                     __pnvBANK1:
  3749  00D4                     _TMR1_InterruptHandler:
  3750  00D4                     	ds	2
  3751  00D6                     _timer1ReloadVal:
  3752  00D6                     	ds	2
  3753  00D8                     _TMR4_InterruptHandler:
  3754  00D8                     	ds	2
  3755  00DA                     _TMR0_InterruptHandler:
  3756  00DA                     	ds	2
  3757  00DC                     _INT_InterruptHandler:
  3758  00DC                     	ds	2
  3759  00DE                     _EUSART_ErrorHandler:
  3760  00DE                     	ds	2
  3761  00E0                     _EUSART_OverrunErrorHandler:
  3762  00E0                     	ds	2
  3763  00E2                     _EUSART_FramingErrorHandler:
  3764  00E2                     	ds	2
  3765  00E4                     _frequencyIndex:
  3766  00E4                     	ds	2
  3767  00E6                     _currentIndex:
  3768  00E6                     	ds	2
  3769  0016                     _TMR1	set	22
  3770  0018                     _T1CONbits	set	24
  3771  001C                     _T2CONbits	set	28
  3772  001C                     _T2CON	set	28
  3773  001A                     _TMR2	set	26
  3774  001B                     _PR2	set	27
  3775  0015                     _TMR0	set	21
  3776  0011                     _PIR1bits	set	17
  3777  0012                     _PIR2bits	set	18
  3778  000B                     _INTCONbits	set	11
  3779  008E                     _TRISCbits	set	142
  3780  008D                     _TRISBbits	set	141
  3781  009D                     _ADCON0bits	set	157
  3782  009E                     _ADCON1	set	158
  3783  009D                     _ADCON0	set	157
  3784  0095                     _OPTION_REG	set	149
  3785  0091                     _PIE1bits	set	145
  3786  0092                     _PIE2bits	set	146
  3787  0095                     _OPTION_REGbits	set	149
  3788  008E                     _TRISC	set	142
  3789  008D                     _TRISB	set	141
  3790  008C                     _TRISA	set	140
  3791  0097                     _WDTCON	set	151
  3792  0098                     _OSCTUNE	set	152
  3793  009A                     _OSCSTAT	set	154
  3794  0099                     _OSCCON	set	153
  3795  009B                     _ADRES	set	155
  3796  010D                     _LATBbits	set	269
  3797  0117                     _FVRCONbits	set	279
  3798  0117                     _FVRCON	set	279
  3799  010E                     _LATCbits	set	270
  3800  010E                     _LATC	set	270
  3801  010D                     _LATB	set	269
  3802  010C                     _LATA	set	268
  3803  0116                     _BORCON	set	278
  3804  0119                     _DAC1CON1	set	281
  3805  0118                     _DAC1CON0	set	280
  3806  0196                     _PMCON2	set	406
  3807  0193                     _PMDATL	set	403
  3808  0194                     _PMDATH	set	404
  3809  0195                     _PMCON1bits	set	405
  3810  0192                     _PMADRH	set	402
  3811  0191                     _PMADRL	set	401
  3812  019A                     _TX1REG	set	410
  3813  0199                     _RC1REG	set	409
  3814  019D                     _RC1STAbits	set	413
  3815  019E                     _TX1STAbits	set	414
  3816  019C                     _SP1BRGH	set	412
  3817  019B                     _SP1BRGL	set	411
  3818  019E                     _TX1STA	set	414
  3819  019D                     _RC1STA	set	413
  3820  019F                     _BAUD1CON	set	415
  3821  018C                     _ANSELA	set	396
  3822  018D                     _ANSELB	set	397
  3823  018E                     _ANSELC	set	398
  3824  020E                     _WPUC	set	526
  3825  020C                     _WPUA	set	524
  3826  020D                     _WPUB	set	525
  3827  0291                     _CCPR1L	set	657
  3828  0293                     _CCP1CONbits	set	659
  3829  029E                     _CCPTMRSbits	set	670
  3830  028E                     _ODCONC	set	654
  3831  028D                     _ODCONB	set	653
  3832  028C                     _ODCONA	set	652
  3833  030E                     _SLRCONC	set	782
  3834  030D                     _SLRCONB	set	781
  3835  030C                     _SLRCONA	set	780
  3836  038E                     _INLVLC	set	910
  3837  038D                     _INLVLB	set	909
  3838  038C                     _INLVLA	set	908
  3839  0417                     _T4CONbits	set	1047
  3840  0417                     _T4CON	set	1047
  3841  0415                     _TMR4	set	1045
  3842  0416                     _PR4	set	1046
  3843  0515                     _OPA2CON	set	1301
  3844  0511                     _OPA1CON	set	1297
  3845  061C                     _PWM4CONbits	set	1564
  3846  061A                     _PWM4DCLbits	set	1562
  3847  061B                     _PWM4DCH	set	1563
  3848  0619                     _PWM3CONbits	set	1561
  3849  0617                     _PWM3DCLbits	set	1559
  3850  0618                     _PWM3DCH	set	1560
  3851  0E24                     _RXPPS	set	3620
  3852  0E10                     _INTPPS	set	3600
  3853  0EA5                     _RC5PPS	set	3749
  3854  0E95                     _RA5PPS	set	3733
  3855  0EA4                     _RC4PPS	set	3748
  3856  0E9F                     _RB7PPS	set	3743
  3857                           
  3858                           	psect	stringtext3
  3859  07F1                     __pstringtext3:
  3860  07F1                     STR_6:
  3861  07F1  340A               	retlw	10
  3862  07F2  3420               	retlw	32	;' '
  3863  07F3  3463               	retlw	99	;'c'
  3864  07F4  3475               	retlw	117	;'u'
  3865  07F5  3472               	retlw	114	;'r'
  3866  07F6  3472               	retlw	114	;'r'
  3867  07F7  3465               	retlw	101	;'e'
  3868  07F8  346E               	retlw	110	;'n'
  3869  07F9  3474               	retlw	116	;'t'
  3870  07FA  3420               	retlw	32	;' '
  3871  07FB  3476               	retlw	118	;'v'
  3872  07FC  3461               	retlw	97	;'a'
  3873  07FD  346C               	retlw	108	;'l'
  3874  07FE  3475               	retlw	117	;'u'
  3875  07FF  3465               	retlw	101	;'e'
  3876  0800  3420               	retlw	32	;' '
  3877  0801  3473               	retlw	115	;'s'
  3878  0802  3465               	retlw	101	;'e'
  3879  0803  346C               	retlw	108	;'l'
  3880  0804  3465               	retlw	101	;'e'
  3881  0805  3463               	retlw	99	;'c'
  3882  0806  3474               	retlw	116	;'t'
  3883  0807  3465               	retlw	101	;'e'
  3884  0808  3464               	retlw	100	;'d'
  3885  0809  3400               	retlw	0
  3886                           
  3887                           	psect	stringtext4
  3888  080A                     __pstringtext4:
  3889  080A                     STR_5:
  3890  080A  340A               	retlw	10
  3891  080B  3420               	retlw	32	;' '
  3892  080C  3472               	retlw	114	;'r'
  3893  080D  3465               	retlw	101	;'e'
  3894  080E  3473               	retlw	115	;'s'
  3895  080F  3465               	retlw	101	;'e'
  3896  0810  3474               	retlw	116	;'t'
  3897  0811  3420               	retlw	32	;' '
  3898  0812  3476               	retlw	118	;'v'
  3899  0813  3461               	retlw	97	;'a'
  3900  0814  346C               	retlw	108	;'l'
  3901  0815  3475               	retlw	117	;'u'
  3902  0816  3465               	retlw	101	;'e'
  3903  0817  3420               	retlw	32	;' '
  3904  0818  3473               	retlw	115	;'s'
  3905  0819  3465               	retlw	101	;'e'
  3906  081A  346C               	retlw	108	;'l'
  3907  081B  3465               	retlw	101	;'e'
  3908  081C  3463               	retlw	99	;'c'
  3909  081D  3474               	retlw	116	;'t'
  3910  081E  3465               	retlw	101	;'e'
  3911  081F  3464               	retlw	100	;'d'
  3912  0820  3400               	retlw	0
  3913                           
  3914                           	psect	stringtext5
  3915  0821                     __pstringtext5:
  3916  0821                     STR_1:
  3917  0821  340A               	retlw	10
  3918  0822  3420               	retlw	32	;' '
  3919  0823  3446               	retlw	70	;'F'
  3920  0824  3472               	retlw	114	;'r'
  3921  0825  3465               	retlw	101	;'e'
  3922  0826  3471               	retlw	113	;'q'
  3923  0827  3475               	retlw	117	;'u'
  3924  0828  3465               	retlw	101	;'e'
  3925  0829  346E               	retlw	110	;'n'
  3926  082A  3463               	retlw	99	;'c'
  3927  082B  3479               	retlw	121	;'y'
  3928  082C  3420               	retlw	32	;' '
  3929  082D  3473               	retlw	115	;'s'
  3930  082E  3465               	retlw	101	;'e'
  3931  082F  346C               	retlw	108	;'l'
  3932  0830  3465               	retlw	101	;'e'
  3933  0831  3463               	retlw	99	;'c'
  3934  0832  3474               	retlw	116	;'t'
  3935  0833  3465               	retlw	101	;'e'
  3936  0834  3464               	retlw	100	;'d'
  3937  0835  3400               	retlw	0
  3938                           
  3939                           	psect	stringtext6
  3940  0836                     __pstringtext6:
  3941  0836                     STR_4:
  3942  0836  340A               	retlw	10
  3943  0837  3420               	retlw	32	;' '
  3944  0838  3464               	retlw	100	;'d'
  3945  0839  3465               	retlw	101	;'e'
  3946  083A  3463               	retlw	99	;'c'
  3947  083B  3472               	retlw	114	;'r'
  3948  083C  3465               	retlw	101	;'e'
  3949  083D  3461               	retlw	97	;'a'
  3950  083E  3473               	retlw	115	;'s'
  3951  083F  3465               	retlw	101	;'e'
  3952  0840  3420               	retlw	32	;' '
  3953  0841  3473               	retlw	115	;'s'
  3954  0842  3465               	retlw	101	;'e'
  3955  0843  346C               	retlw	108	;'l'
  3956  0844  3465               	retlw	101	;'e'
  3957  0845  3463               	retlw	99	;'c'
  3958  0846  3474               	retlw	116	;'t'
  3959  0847  3465               	retlw	101	;'e'
  3960  0848  3464               	retlw	100	;'d'
  3961  0849  3400               	retlw	0
  3962                           
  3963                           	psect	stringtext7
  3964  084A                     __pstringtext7:
  3965  084A                     STR_3:
  3966  084A  340A               	retlw	10
  3967  084B  3420               	retlw	32	;' '
  3968  084C  3469               	retlw	105	;'i'
  3969  084D  346E               	retlw	110	;'n'
  3970  084E  3463               	retlw	99	;'c'
  3971  084F  3472               	retlw	114	;'r'
  3972  0850  3465               	retlw	101	;'e'
  3973  0851  3461               	retlw	97	;'a'
  3974  0852  3473               	retlw	115	;'s'
  3975  0853  3465               	retlw	101	;'e'
  3976  0854  3420               	retlw	32	;' '
  3977  0855  3473               	retlw	115	;'s'
  3978  0856  3465               	retlw	101	;'e'
  3979  0857  346C               	retlw	108	;'l'
  3980  0858  3465               	retlw	101	;'e'
  3981  0859  3463               	retlw	99	;'c'
  3982  085A  3474               	retlw	116	;'t'
  3983  085B  3465               	retlw	101	;'e'
  3984  085C  3464               	retlw	100	;'d'
  3985  085D  3400               	retlw	0
  3986                           
  3987                           	psect	stringtext8
  3988  085E                     __pstringtext8:
  3989  085E                     STR_2:
  3990  085E  340A               	retlw	10
  3991  085F  3420               	retlw	32	;' '
  3992  0860  3463               	retlw	99	;'c'
  3993  0861  3475               	retlw	117	;'u'
  3994  0862  3472               	retlw	114	;'r'
  3995  0863  3472               	retlw	114	;'r'
  3996  0864  3465               	retlw	101	;'e'
  3997  0865  346E               	retlw	110	;'n'
  3998  0866  3474               	retlw	116	;'t'
  3999  0867  3420               	retlw	32	;' '
  4000  0868  3473               	retlw	115	;'s'
  4001  0869  3465               	retlw	101	;'e'
  4002  086A  346C               	retlw	108	;'l'
  4003  086B  3465               	retlw	101	;'e'
  4004  086C  3463               	retlw	99	;'c'
  4005  086D  3474               	retlw	116	;'t'
  4006  086E  3465               	retlw	101	;'e'
  4007  086F  3464               	retlw	100	;'d'
  4008  0870  3400               	retlw	0
  4009                           
  4010                           	psect	stringtext9
  4011  0000                     __pstringtext9:
  4012  07F1                     
  4013                           	psect	cinit
  4014  004D                     start_initialization:	
  4015                           ; #config settings
  4016                           
  4017  004D                     __initialization:
  4018                           
  4019                           ; Initialize objects allocated to COMMON
  4020  004D  3180  2003  3180   	fcall	__pidataCOMMON	;fetch initializer
  4021  0050  00FA               	movwf	__pdataCOMMON& (0+127)
  4022                           
  4023                           ; Initialize objects allocated to BANK1
  4024  0051  302A               	movlw	low __pidataBANK1
  4025  0052  0084               	movwf	4
  4026  0053  308C               	movlw	(high __pidataBANK1)| (0+128)
  4027  0054  0085               	movwf	5
  4028  0055  30BA               	movlw	low __pdataBANK1
  4029  0056  0086               	movwf	6
  4030  0057  3000               	movlw	high __pdataBANK1
  4031  0058  0087               	movwf	7
  4032  0059  301A               	movlw	26
  4033  005A  318B  232B  3180   	fcall	init_ram
  4034                           
  4035                           ; Initialize objects allocated to BANK2
  4036  005D  30D0               	movlw	low __pidataBANK2
  4037  005E  0084               	movwf	4
  4038  005F  308B               	movlw	(high __pidataBANK2)| (0+128)
  4039  0060  0085               	movwf	5
  4040  0061  3040               	movlw	low __pdataBANK2
  4041  0062  0086               	movwf	6
  4042  0063  3001               	movlw	high __pdataBANK2
  4043  0064  0087               	movwf	7
  4044  0065  3014               	movlw	20
  4045  0066  318B  232B  3180   	fcall	init_ram
  4046                           
  4047                           ; Clear objects allocated to COMMON
  4048  0069  01F8               	clrf	__pbssCOMMON& (0+127)
  4049  006A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  4050                           
  4051                           ; Clear objects allocated to BANK1
  4052  006B  30A0               	movlw	low __pbssBANK1
  4053  006C  0084               	movwf	4
  4054  006D  3000               	movlw	high __pbssBANK1
  4055  006E  0085               	movwf	5
  4056  006F  301A               	movlw	26
  4057  0070  318B  2325  3180   	fcall	clear_ram0
  4058                           
  4059                           ; Clear objects allocated to BANK2
  4060  0073  3020               	movlw	low __pbssBANK2
  4061  0074  0084               	movwf	4
  4062  0075  3001               	movlw	high __pbssBANK2
  4063  0076  0085               	movwf	5
  4064  0077  3020               	movlw	32
  4065  0078  318B  2325  3180   	fcall	clear_ram0
  4066                           
  4067                           ; Clear objects allocated to BANK3
  4068  007B  30A0               	movlw	low __pbssBANK3
  4069  007C  0084               	movwf	4
  4070  007D  3001               	movlw	high __pbssBANK3
  4071  007E  0085               	movwf	5
  4072  007F  3021               	movlw	33
  4073  0080  318B  2325  3180   	fcall	clear_ram0
  4074  0083                     end_of_initialization:	
  4075                           ;End of C runtime variable initialization code
  4076                           
  4077  0083                     __end_of__initialization:
  4078  0083  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4079  0084  0020               	movlb	0
  4080  0085  3184  2CF4         	ljmp	_main	;jump to C main() function
  4081                           
  4082                           	psect	bssCOMMON
  4083  0078                     __pbssCOMMON:
  4084  0078                     _interfaceState:
  4085  0078                     	ds	1
  4086  0079                     _timer0ReloadVal:
  4087  0079                     	ds	1
  4088                           
  4089                           	psect	dataCOMMON
  4090  007A                     __pdataCOMMON:
  4091  007A                     _dc_frequency_flag:
  4092  007A                     	ds	1
  4093                           
  4094                           	psect	bssBANK1
  4095  00A0                     __pbssBANK1:
  4096  00A0                     _nout:
  4097  00A0                     	ds	2
  4098  00A2                     _width:
  4099  00A2                     	ds	2
  4100  00A4                     _prec:
  4101  00A4                     	ds	2
  4102  00A6                     _flags:
  4103  00A6                     	ds	2
  4104  00A8                     _Vdd_mv:
  4105  00A8                     	ds	2
  4106  00AA                     _microamps:
  4107  00AA                     	ds	2
  4108  00AC                     _dac_value:
  4109  00AC                     	ds	2
  4110  00AE                     _LED_blue:
  4111  00AE                     	ds	1
  4112  00AF                     _LED_green:
  4113  00AF                     	ds	1
  4114  00B0                     _LED_red:
  4115  00B0                     	ds	1
  4116  00B1                     _latch:
  4117  00B1                     	ds	1
  4118  00B2                     _oneHzCounter:
  4119  00B2                     	ds	1
  4120  00B3                     _eusartRxLastError:
  4121  00B3                     	ds	1
  4122  00B4                     _ir_code:
  4123  00B4                     	ds	6
  4124                           
  4125                           	psect	dataBANK1
  4126  00BA                     __pdataBANK1:
  4127  00BA                     _maxFrequencyIndex:
  4128  00BA                     	ds	2
  4129  00BC                     _maxCurrentIndex:
  4130  00BC                     	ds	2
  4131  00BE                     _toggle:
  4132  00BE                     	ds	1
  4133  00BF                     _currentIsOn:
  4134  00BF                     	ds	1
  4135  00C0                     _currentValue:
  4136  00C0                     	ds	20
  4137                           
  4138                           	psect	bssBANK2
  4139  0120                     __pbssBANK2:
  4140  0120                     _dbuf:
  4141  0120                     	ds	32
  4142                           
  4143                           	psect	dataBANK2
  4144  0140                     __pdataBANK2:
  4145  0140                     _frequencyValue:
  4146  0140                     	ds	20
  4147                           
  4148                           	psect	bssBANK3
  4149  01A0                     __pbssBANK3:
  4150  01A0                     _stats:
  4151  01A0                     	ds	33
  4152                           
  4153                           	psect	inittext
  4154  0B2B                     init_ram:
  4155  0B2B  00FE               	movwf	btemp
  4156  0B2C                     initloop:
  4157  0B2C  0012               	moviw fsr0++
  4158  0B2D  001E               	movwi fsr1++
  4159  0B2E  0BFE               	decfsz	btemp,f
  4160  0B2F  2B2C               	goto	initloop
  4161  0B30  3400               	retlw	0
  4162                           
  4163                           	psect	clrtext
  4164  0B25                     clear_ram0:	
  4165                           ;	Called with FSR0 containing the base address, and
  4166                           ;	WREG with the size to clear
  4167                           
  4168  0B25  0064               	clrwdt	;clear the watchdog before getting into this loop
  4169  0B26                     clrloop0:
  4170  0B26  0180               	clrf	0	;clear RAM location pointed to by FSR
  4171  0B27  3101               	addfsr 0,1
  4172  0B28  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4173  0B29  2B26               	goto	clrloop0	;have we reached the end yet?
  4174  0B2A  3400               	retlw	0	;all done for this memory range, return
  4175                           
  4176                           	psect	cstackBANK1
  4177  00E8                     __pcstackBANK1:
  4178  00E8                     ??_process_remote_command:
  4179                           
  4180                           ; 1 bytes @ 0x0
  4181  00E8                     	ds	2
  4182  00EA                     process_remote_command@code:
  4183                           
  4184                           ; 1 bytes @ 0x2
  4185  00EA                     	ds	1
  4186  00EB                     ??_main:
  4187                           
  4188                           ; 1 bytes @ 0x3
  4189  00EB                     	ds	1
  4190  00EC                     main@low_reading_count:
  4191                           
  4192                           ; 2 bytes @ 0x4
  4193  00EC                     	ds	2
  4194  00EE                     main@batt_mv:
  4195                           
  4196                           ; 2 bytes @ 0x6
  4197  00EE                     	ds	2
  4198                           
  4199                           	psect	cstackCOMMON
  4200  0070                     __pcstackCOMMON:
  4201  0070                     ?_PIN_MANAGER_Initialize:
  4202  0070                     ?_OSCILLATOR_Initialize:	
  4203                           ; 1 bytes @ 0x0
  4204                           
  4205  0070                     ?_WDT_Initialize:	
  4206                           ; 1 bytes @ 0x0
  4207                           
  4208  0070                     ?_OPA1_Initialize:	
  4209                           ; 1 bytes @ 0x0
  4210                           
  4211  0070                     ?_TMR4_Initialize:	
  4212                           ; 1 bytes @ 0x0
  4213                           
  4214  0070                     ?_OPA2_Initialize:	
  4215                           ; 1 bytes @ 0x0
  4216                           
  4217  0070                     ?_TMR1_Initialize:	
  4218                           ; 1 bytes @ 0x0
  4219                           
  4220  0070                     ?_TMR2_Initialize:	
  4221                           ; 1 bytes @ 0x0
  4222                           
  4223  0070                     ?_EXT_INT_Initialize:	
  4224                           ; 1 bytes @ 0x0
  4225                           
  4226  0070                     ?_TMR0_Initialize:	
  4227                           ; 1 bytes @ 0x0
  4228                           
  4229  0070                     ?_EUSART_Initialize:	
  4230                           ; 1 bytes @ 0x0
  4231                           
  4232  0070                     ?_TMR0_ISR:	
  4233                           ; 1 bytes @ 0x0
  4234                           
  4235  0070                     ??_TMR0_ISR:	
  4236                           ; 1 bytes @ 0x0
  4237                           
  4238  0070                     ?_INT_ISR:	
  4239                           ; 1 bytes @ 0x0
  4240                           
  4241  0070                     ?_TMR4_ISR:	
  4242                           ; 1 bytes @ 0x0
  4243                           
  4244  0070                     ?_TMR1_ISR:	
  4245                           ; 1 bytes @ 0x0
  4246                           
  4247  0070                     ?_INT_CallBack:	
  4248                           ; 1 bytes @ 0x0
  4249                           
  4250  0070                     ?_TMR0_DefaultInterruptHandler:	
  4251                           ; 1 bytes @ 0x0
  4252                           
  4253  0070                     ??_TMR0_DefaultInterruptHandler:	
  4254                           ; 1 bytes @ 0x0
  4255                           
  4256  0070                     ?_TMR4_DefaultInterruptHandler:	
  4257                           ; 1 bytes @ 0x0
  4258                           
  4259  0070                     ?_TMR1_DefaultInterruptHandler:	
  4260                           ; 1 bytes @ 0x0
  4261                           
  4262  0070                     ?_DAC_Initialize:	
  4263                           ; 1 bytes @ 0x0
  4264                           
  4265  0070                     ?_DAC_SetOutput:	
  4266                           ; 1 bytes @ 0x0
  4267                           
  4268  0070                     ??_DAC_SetOutput:	
  4269                           ; 1 bytes @ 0x0
  4270                           
  4271  0070                     ?_SYSTEM_Initialize:	
  4272                           ; 1 bytes @ 0x0
  4273                           
  4274  0070                     ?_PIN_MANAGER_IOC:	
  4275                           ; 1 bytes @ 0x0
  4276                           
  4277  0070                     ??_PIN_MANAGER_IOC:	
  4278                           ; 1 bytes @ 0x0
  4279                           
  4280  0070                     ?_INTERRUPT_InterruptManager:	
  4281                           ; 1 bytes @ 0x0
  4282                           
  4283  0070                     ?_EUSART_Write:	
  4284                           ; 1 bytes @ 0x0
  4285                           
  4286  0070                     ?_putch:	
  4287                           ; 1 bytes @ 0x0
  4288                           
  4289  0070                     ?_INT_DefaultInterruptHandler:	
  4290                           ; 1 bytes @ 0x0
  4291                           
  4292  0070                     ??_INT_DefaultInterruptHandler:	
  4293                           ; 1 bytes @ 0x0
  4294                           
  4295  0070                     ?_TMR4_LoadPeriodRegister:	
  4296                           ; 1 bytes @ 0x0
  4297                           
  4298  0070                     ?_readPersistentState:	
  4299                           ; 1 bytes @ 0x0
  4300                           
  4301  0070                     ?_writePersistentState:	
  4302                           ; 1 bytes @ 0x0
  4303                           
  4304  0070                     ?_initLED:	
  4305                           ; 1 bytes @ 0x0
  4306                           
  4307  0070                     ?_startUp:	
  4308                           ; 1 bytes @ 0x0
  4309                           
  4310  0070                     ?_selectSomething:	
  4311                           ; 1 bytes @ 0x0
  4312                           
  4313  0070                     ?_selectFrequency:	
  4314                           ; 1 bytes @ 0x0
  4315                           
  4316  0070                     ?_selectCurrent:	
  4317                           ; 1 bytes @ 0x0
  4318                           
  4319  0070                     ?_selectIncrease:	
  4320                           ; 1 bytes @ 0x0
  4321                           
  4322  0070                     ?_selectDecrease:	
  4323                           ; 1 bytes @ 0x0
  4324                           
  4325  0070                     ?_selectCurrentValue:	
  4326                           ; 1 bytes @ 0x0
  4327                           
  4328  0070                     ?_selectFrequencyValue:	
  4329                           ; 1 bytes @ 0x0
  4330                           
  4331  0070                     ?_process_remote_command:	
  4332                           ; 1 bytes @ 0x0
  4333                           
  4334  0070                     ?_LATCH_Initialize:	
  4335                           ; 1 bytes @ 0x0
  4336                           
  4337  0070                     ?_main:	
  4338                           ; 1 bytes @ 0x0
  4339                           
  4340  0070                     DAC_SetOutput@inputData:	
  4341                           ; 1 bytes @ 0x0
  4342                           
  4343                           
  4344                           ; 1 bytes @ 0x0
  4345  0070                     	ds	1
  4346  0071                     ??_TMR1_ISR:
  4347  0071                     ??_TMR4_DefaultInterruptHandler:	
  4348                           ; 1 bytes @ 0x1
  4349                           
  4350  0071                     ??_TMR1_DefaultInterruptHandler:	
  4351                           ; 1 bytes @ 0x1
  4352                           
  4353                           
  4354                           ; 1 bytes @ 0x1
  4355  0071                     	ds	1
  4356  0072                     ??_TMR4_ISR:
  4357  0072                     INT_DefaultInterruptHandler@time:	
  4358                           ; 1 bytes @ 0x2
  4359                           
  4360                           
  4361                           ; 1 bytes @ 0x2
  4362  0072                     	ds	1
  4363  0073                     ??_PIN_MANAGER_Initialize:
  4364  0073                     ??_OSCILLATOR_Initialize:	
  4365                           ; 1 bytes @ 0x3
  4366                           
  4367  0073                     ??_WDT_Initialize:	
  4368                           ; 1 bytes @ 0x3
  4369                           
  4370  0073                     ??_OPA1_Initialize:	
  4371                           ; 1 bytes @ 0x3
  4372                           
  4373  0073                     ??_OPA2_Initialize:	
  4374                           ; 1 bytes @ 0x3
  4375                           
  4376  0073                     ??_TMR2_Initialize:	
  4377                           ; 1 bytes @ 0x3
  4378                           
  4379  0073                     ??_INT_ISR:	
  4380                           ; 1 bytes @ 0x3
  4381                           
  4382  0073                     ?_EUSART_SetFramingErrorHandler:	
  4383                           ; 1 bytes @ 0x3
  4384                           
  4385  0073                     ?_EUSART_SetOverrunErrorHandler:	
  4386                           ; 1 bytes @ 0x3
  4387                           
  4388  0073                     ?_EUSART_SetErrorHandler:	
  4389                           ; 1 bytes @ 0x3
  4390                           
  4391  0073                     ??_INT_CallBack:	
  4392                           ; 1 bytes @ 0x3
  4393                           
  4394  0073                     ?_TMR0_SetInterruptHandler:	
  4395                           ; 1 bytes @ 0x3
  4396                           
  4397  0073                     ?_TMR4_SetInterruptHandler:	
  4398                           ; 1 bytes @ 0x3
  4399                           
  4400  0073                     ?_FLASH_EraseBlock:	
  4401                           ; 1 bytes @ 0x3
  4402                           
  4403  0073                     ?_TMR1_SetInterruptHandler:	
  4404                           ; 1 bytes @ 0x3
  4405                           
  4406  0073                     ??_DAC_Initialize:	
  4407                           ; 1 bytes @ 0x3
  4408                           
  4409  0073                     ??_INTERRUPT_InterruptManager:	
  4410                           ; 1 bytes @ 0x3
  4411                           
  4412  0073                     ??_EUSART_Write:	
  4413                           ; 1 bytes @ 0x3
  4414                           
  4415  0073                     ?_INT_SetInterruptHandler:	
  4416                           ; 1 bytes @ 0x3
  4417                           
  4418  0073                     ??_TMR4_LoadPeriodRegister:	
  4419                           ; 1 bytes @ 0x3
  4420                           
  4421  0073                     ??_readPersistentState:	
  4422                           ; 1 bytes @ 0x3
  4423                           
  4424  0073                     ??_initLED:	
  4425                           ; 1 bytes @ 0x3
  4426                           
  4427  0073                     ?_setLEDColor:	
  4428                           ; 1 bytes @ 0x3
  4429                           
  4430  0073                     ??_LATCH_Initialize:	
  4431                           ; 1 bytes @ 0x3
  4432                           
  4433  0073                     ??___lmul:	
  4434                           ; 1 bytes @ 0x3
  4435                           
  4436  0073                     ?___awdiv:	
  4437                           ; 1 bytes @ 0x3
  4438                           
  4439  0073                     EUSART_Write@txData:	
  4440                           ; 2 bytes @ 0x3
  4441                           
  4442  0073                     TMR4_LoadPeriodRegister@periodVal:	
  4443                           ; 1 bytes @ 0x3
  4444                           
  4445  0073                     setLEDColor@green:	
  4446                           ; 1 bytes @ 0x3
  4447                           
  4448  0073                     EUSART_SetFramingErrorHandler@interruptHandler:	
  4449                           ; 1 bytes @ 0x3
  4450                           
  4451  0073                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  4452                           ; 2 bytes @ 0x3
  4453                           
  4454  0073                     EUSART_SetErrorHandler@interruptHandler:	
  4455                           ; 2 bytes @ 0x3
  4456                           
  4457  0073                     INT_SetInterruptHandler@InterruptHandler:	
  4458                           ; 2 bytes @ 0x3
  4459                           
  4460  0073                     TMR0_SetInterruptHandler@InterruptHandler:	
  4461                           ; 2 bytes @ 0x3
  4462                           
  4463  0073                     TMR4_SetInterruptHandler@InterruptHandler:	
  4464                           ; 2 bytes @ 0x3
  4465                           
  4466  0073                     FLASH_EraseBlock@startAddr:	
  4467                           ; 2 bytes @ 0x3
  4468                           
  4469  0073                     TMR1_SetInterruptHandler@InterruptHandler:	
  4470                           ; 2 bytes @ 0x3
  4471                           
  4472  0073                     ___awdiv@divisor:	
  4473                           ; 2 bytes @ 0x3
  4474                           
  4475  0073                     ___lmul@product:	
  4476                           ; 2 bytes @ 0x3
  4477                           
  4478                           
  4479                           ; 4 bytes @ 0x3
  4480  0073                     	ds	1
  4481  0074                     ??_putch:
  4482  0074                     putch@txData:	
  4483                           ; 1 bytes @ 0x4
  4484                           
  4485  0074                     setLEDColor@blue:	
  4486                           ; 1 bytes @ 0x4
  4487                           
  4488                           
  4489                           ; 1 bytes @ 0x4
  4490  0074                     	ds	1
  4491  0075                     ??_TMR4_Initialize:
  4492  0075                     ??_TMR1_Initialize:	
  4493                           ; 1 bytes @ 0x5
  4494                           
  4495  0075                     ??_EXT_INT_Initialize:	
  4496                           ; 1 bytes @ 0x5
  4497                           
  4498  0075                     ??_TMR0_Initialize:	
  4499                           ; 1 bytes @ 0x5
  4500                           
  4501  0075                     ??_EUSART_Initialize:	
  4502                           ; 1 bytes @ 0x5
  4503                           
  4504  0075                     ??_EUSART_SetFramingErrorHandler:	
  4505                           ; 1 bytes @ 0x5
  4506                           
  4507  0075                     ??_EUSART_SetOverrunErrorHandler:	
  4508                           ; 1 bytes @ 0x5
  4509                           
  4510  0075                     ??_EUSART_SetErrorHandler:	
  4511                           ; 1 bytes @ 0x5
  4512                           
  4513  0075                     ??_TMR0_SetInterruptHandler:	
  4514                           ; 1 bytes @ 0x5
  4515                           
  4516  0075                     ??_TMR4_SetInterruptHandler:	
  4517                           ; 1 bytes @ 0x5
  4518                           
  4519  0075                     ??_FLASH_EraseBlock:	
  4520                           ; 1 bytes @ 0x5
  4521                           
  4522  0075                     ??_TMR1_SetInterruptHandler:	
  4523                           ; 1 bytes @ 0x5
  4524                           
  4525  0075                     ??_SYSTEM_Initialize:	
  4526                           ; 1 bytes @ 0x5
  4527                           
  4528  0075                     ??_INT_SetInterruptHandler:	
  4529                           ; 1 bytes @ 0x5
  4530                           
  4531  0075                     ??_setLEDColor:	
  4532                           ; 1 bytes @ 0x5
  4533                           
  4534  0075                     ?_fputc:	
  4535                           ; 1 bytes @ 0x5
  4536                           
  4537  0075                     FLASH_EraseBlock@GIEBitValue:	
  4538                           ; 2 bytes @ 0x5
  4539                           
  4540  0075                     ___awdiv@dividend:	
  4541                           ; 1 bytes @ 0x5
  4542                           
  4543  0075                     fputc@c:	
  4544                           ; 2 bytes @ 0x5
  4545                           
  4546                           
  4547                           ; 2 bytes @ 0x5
  4548  0075                     	ds	1
  4549  0076                     setLEDColor@red:
  4550                           
  4551                           ; 1 bytes @ 0x6
  4552  0076                     	ds	1
  4553  0077                     ??___awdiv:
  4554  0077                     fputc@fp:	
  4555                           ; 1 bytes @ 0x7
  4556                           
  4557                           
  4558                           ; 1 bytes @ 0x7
  4559  0077                     	ds	1
  4560  0078                     ??_battery_voltage:
  4561                           
  4562                           	psect	cstackBANK0
  4563  0020                     __pcstackBANK0:	
  4564                           ; 1 bytes @ 0x8
  4565                           
  4566  0020                     ?_FLASH_WriteBlock:
  4567  0020                     ??_fputc:	
  4568                           ; 1 bytes @ 0x0
  4569                           
  4570  0020                     ??_startUp:	
  4571                           ; 1 bytes @ 0x0
  4572                           
  4573  0020                     ??_selectSomething:	
  4574                           ; 1 bytes @ 0x0
  4575                           
  4576  0020                     ?___lmul:	
  4577                           ; 1 bytes @ 0x0
  4578                           
  4579  0020                     ___awdiv@counter:	
  4580                           ; 4 bytes @ 0x0
  4581                           
  4582  0020                     FLASH_WriteBlock@writeAddr:	
  4583                           ; 1 bytes @ 0x0
  4584                           
  4585  0020                     ___lmul@multiplier:	
  4586                           ; 2 bytes @ 0x0
  4587                           
  4588                           
  4589                           ; 4 bytes @ 0x0
  4590  0020                     	ds	1
  4591  0021                     ___awdiv@sign:
  4592                           
  4593                           ; 1 bytes @ 0x1
  4594  0021                     	ds	1
  4595  0022                     FLASH_WriteBlock@flashWordArray:
  4596  0022                     startUp@i:	
  4597                           ; 1 bytes @ 0x2
  4598                           
  4599  0022                     ___awdiv@quotient:	
  4600                           ; 2 bytes @ 0x2
  4601                           
  4602                           
  4603                           ; 2 bytes @ 0x2
  4604  0022                     	ds	1
  4605  0023                     ??_FLASH_WriteBlock:
  4606                           
  4607                           ; 1 bytes @ 0x3
  4608  0023                     	ds	1
  4609  0024                     ___lmul@multiplicand:
  4610                           
  4611                           ; 4 bytes @ 0x4
  4612  0024                     	ds	1
  4613  0025                     ?_vfpfcnvrt:
  4614  0025                     vfpfcnvrt@fmt:	
  4615                           ; 2 bytes @ 0x5
  4616                           
  4617                           
  4618                           ; 1 bytes @ 0x5
  4619  0025                     	ds	1
  4620  0026                     vfpfcnvrt@ap:
  4621  0026                     FLASH_WriteBlock@blockStartAddr:	
  4622                           ; 1 bytes @ 0x6
  4623                           
  4624                           
  4625                           ; 2 bytes @ 0x6
  4626  0026                     	ds	1
  4627  0027                     ??_vfpfcnvrt:
  4628                           
  4629                           ; 1 bytes @ 0x7
  4630  0027                     	ds	1
  4631  0028                     ?___aldiv:
  4632  0028                     FLASH_WriteBlock@GIEBitValue:	
  4633                           ; 4 bytes @ 0x8
  4634                           
  4635  0028                     ___aldiv@divisor:	
  4636                           ; 1 bytes @ 0x8
  4637                           
  4638                           
  4639                           ; 4 bytes @ 0x8
  4640  0028                     	ds	1
  4641  0029                     FLASH_WriteBlock@i:
  4642                           
  4643                           ; 1 bytes @ 0x9
  4644  0029                     	ds	1
  4645  002A                     ??_writePersistentState:
  4646                           
  4647                           ; 1 bytes @ 0xA
  4648  002A                     	ds	2
  4649  002C                     vfpfcnvrt@fp:
  4650  002C                     ___aldiv@dividend:	
  4651                           ; 1 bytes @ 0xC
  4652                           
  4653                           
  4654                           ; 4 bytes @ 0xC
  4655  002C                     	ds	1
  4656  002D                     ?_vfprintf:
  4657  002D                     vfprintf@fmt:	
  4658                           ; 2 bytes @ 0xD
  4659                           
  4660                           
  4661                           ; 2 bytes @ 0xD
  4662  002D                     	ds	1
  4663  002E                     writePersistentState@buf:
  4664                           
  4665                           ; 64 bytes @ 0xE
  4666  002E                     	ds	1
  4667  002F                     vfprintf@ap:
  4668                           
  4669                           ; 1 bytes @ 0xF
  4670  002F                     	ds	1
  4671  0030                     ??_vfprintf:
  4672  0030                     ??___aldiv:	
  4673                           ; 1 bytes @ 0x10
  4674                           
  4675                           
  4676                           ; 1 bytes @ 0x10
  4677  0030                     	ds	1
  4678  0031                     ___aldiv@counter:
  4679                           
  4680                           ; 1 bytes @ 0x11
  4681  0031                     	ds	1
  4682  0032                     ___aldiv@sign:
  4683  0032                     vfprintf@fp:	
  4684                           ; 1 bytes @ 0x12
  4685                           
  4686                           
  4687                           ; 1 bytes @ 0x12
  4688  0032                     	ds	1
  4689  0033                     vfprintf@cfmt:
  4690  0033                     ___aldiv@quotient:	
  4691                           ; 2 bytes @ 0x13
  4692                           
  4693                           
  4694                           ; 4 bytes @ 0x13
  4695  0033                     	ds	2
  4696  0035                     ?_printf:
  4697  0035                     printf@fmt:	
  4698                           ; 2 bytes @ 0x15
  4699                           
  4700                           
  4701                           ; 2 bytes @ 0x15
  4702  0035                     	ds	2
  4703  0037                     ??_printf:
  4704  0037                     ?_setFrequency:	
  4705                           ; 1 bytes @ 0x17
  4706                           
  4707  0037                     ?_battery_voltage:	
  4708                           ; 1 bytes @ 0x17
  4709                           
  4710  0037                     setFrequency@frequency_hz:	
  4711                           ; 2 bytes @ 0x17
  4712                           
  4713                           
  4714                           ; 2 bytes @ 0x17
  4715  0037                     	ds	1
  4716  0038                     printf@ap:
  4717                           
  4718                           ; 1 bytes @ 0x18
  4719  0038                     	ds	1
  4720  0039                     ??_selectFrequency:
  4721  0039                     ??_selectCurrent:	
  4722                           ; 1 bytes @ 0x19
  4723                           
  4724  0039                     ??_selectIncrease:	
  4725                           ; 1 bytes @ 0x19
  4726                           
  4727  0039                     ??_selectDecrease:	
  4728                           ; 1 bytes @ 0x19
  4729                           
  4730  0039                     ??_selectCurrentValue:	
  4731                           ; 1 bytes @ 0x19
  4732                           
  4733  0039                     ??_selectFrequencyValue:	
  4734                           ; 1 bytes @ 0x19
  4735                           
  4736  0039                     ?_setCurrent:	
  4737                           ; 1 bytes @ 0x19
  4738                           
  4739  0039                     ??_setFrequency:	
  4740                           ; 1 bytes @ 0x19
  4741                           
  4742  0039                     setCurrent@microamps:	
  4743                           ; 1 bytes @ 0x19
  4744                           
  4745                           
  4746                           ; 2 bytes @ 0x19
  4747  0039                     	ds	1
  4748  003A                     setFrequency@PR4_val:
  4749                           
  4750                           ; 2 bytes @ 0x1A
  4751  003A                     	ds	1
  4752  003B                     setCurrent@Vdd_mv:
  4753                           
  4754                           ; 2 bytes @ 0x1B
  4755  003B                     	ds	2
  4756  003D                     ??_setCurrent:
  4757                           
  4758                           ; 1 bytes @ 0x1D
  4759  003D                     	ds	8
  4760  0045                     setCurrent@Vdac_mv:
  4761                           
  4762                           ; 2 bytes @ 0x25
  4763  0045                     	ds	2
  4764  0047                     setCurrent@DACValue:
  4765                           
  4766                           ; 2 bytes @ 0x27
  4767  0047                     	ds	39
  4768  006E                     writePersistentState@i:
  4769                           
  4770                           ; 1 bytes @ 0x4E
  4771  006E                     	ds	1
  4772  006F                     writePersistentState@idx:
  4773                           
  4774                           ; 1 bytes @ 0x4F
  4775  006F                     	ds	1
  4776                           
  4777                           	psect	maintext
  4778  04F4                     __pmaintext:	
  4779 ;;
  4780 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4781 ;;
  4782 ;; *************** function _main *****************
  4783 ;; Defined at:
  4784 ;;		line 598 in file "main.c"
  4785 ;; Parameters:    Size  Location     Type
  4786 ;;		None
  4787 ;; Auto vars:     Size  Location     Type
  4788 ;;  batt_mv         2    6[BANK1 ] short 
  4789 ;;  low_reading_    2    4[BANK1 ] short 
  4790 ;; Return value:  Size  Location     Type
  4791 ;;                  1    wreg      void 
  4792 ;; Registers used:
  4793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4794 ;; Tracked objects:
  4795 ;;		On entry : B1F/0
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4799 ;;      Params:         0       0       0       0       0       0       0       0
  4800 ;;      Locals:         0       0       4       0       0       0       0       0
  4801 ;;      Temps:          0       0       1       0       0       0       0       0
  4802 ;;      Totals:         0       0       5       0       0       0       0       0
  4803 ;;Total ram usage:        5 bytes
  4804 ;; Hardware stack levels required when called: 12
  4805 ;; This function calls:
  4806 ;;		_DAC_Initialize
  4807 ;;		_LATCH_Initialize
  4808 ;;		_OPA1_Initialize
  4809 ;;		_OPA2_Initialize
  4810 ;;		_SYSTEM_Initialize
  4811 ;;		_battery_voltage
  4812 ;;		_initLED
  4813 ;;		_process_remote_command
  4814 ;;		_readPersistentState
  4815 ;;		_setCurrent
  4816 ;;		_setFrequency
  4817 ;;		_startUp
  4818 ;; This function is called by:
  4819 ;;		Startup code after reset
  4820 ;; This function uses a non-reentrant model
  4821 ;;
  4822                           
  4823                           
  4824                           ;psect for function _main
  4825  04F4                     _main:
  4826  04F4                     l4378:	
  4827                           ;incstack = 0
  4828                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4829                           
  4830                           
  4831                           ;main.c: 600:   SYSTEM_Initialize();
  4832  04F4  318C  24C4  3184   	fcall	_SYSTEM_Initialize
  4833  04F7                     l4380:
  4834                           
  4835                           ;main.c: 601:   LATCH_Initialize();
  4836  04F7  318B  2355  3184   	fcall	_LATCH_Initialize
  4837  04FA                     l4382:
  4838                           
  4839                           ;main.c: 602:   DAC_Initialize();
  4840  04FA  318A  22EF  3184   	fcall	_DAC_Initialize
  4841  04FD                     l4384:
  4842                           
  4843                           ;main.c: 603:   OPA1_Initialize();
  4844  04FD  318A  22D8  3184   	fcall	_OPA1_Initialize
  4845  0500                     l4386:
  4846                           
  4847                           ;main.c: 604:   OPA2_Initialize();
  4848  0500  318A  22DC  3184   	fcall	_OPA2_Initialize
  4849  0503                     l4388:
  4850                           
  4851                           ;main.c: 605:   initLED();
  4852  0503  318E  26F6  3184   	fcall	_initLED
  4853  0506                     l4390:
  4854                           
  4855                           ;main.c: 610:   readPersistentState();
  4856  0506  318C  2460  3184   	fcall	_readPersistentState
  4857  0509                     l4392:
  4858                           
  4859                           ;main.c: 611:   setCurrent(currentValue[currentIndex], battery_voltage());
  4860  0509  0021               	movlb	1	; select bank1
  4861  050A  3566               	lslf	_currentIndex^(0+128),w
  4862  050B  3EC0               	addlw	(low (_currentValue| 0))& (0+255)
  4863  050C  0086               	movwf	6
  4864  050D  0187               	clrf	7
  4865  050E  3F40               	moviw [0]fsr1
  4866  050F  0020               	movlb	0	; select bank0
  4867  0510  00B9               	movwf	setCurrent@microamps
  4868  0511  3F41               	moviw [1]fsr1
  4869  0512  00BA               	movwf	setCurrent@microamps+1
  4870  0513  318E  2613  3184   	fcall	_battery_voltage
  4871  0516  0020               	movlb	0	; select bank0
  4872  0517  0838               	movf	?_battery_voltage+1,w
  4873  0518  00BC               	movwf	setCurrent@Vdd_mv+1
  4874  0519  0837               	movf	?_battery_voltage,w
  4875  051A  00BB               	movwf	setCurrent@Vdd_mv
  4876  051B  3183  23BD  3184   	fcall	_setCurrent
  4877  051E                     l4394:
  4878                           
  4879                           ;main.c: 612:   setFrequency(frequencyValue[frequencyIndex]);
  4880  051E  0021               	movlb	1	; select bank1
  4881  051F  3564               	lslf	_frequencyIndex^(0+128),w
  4882  0520  3E40               	addlw	(low (_frequencyValue| (0+256)))& (0+255)
  4883  0521  0086               	movwf	6
  4884  0522  3001               	movlw	1	; select bank2/3
  4885  0523  0087               	movwf	7
  4886  0524  3F40               	moviw [0]fsr1
  4887  0525  0020               	movlb	0	; select bank0
  4888  0526  00B7               	movwf	setFrequency@frequency_hz
  4889  0527  3F41               	moviw [1]fsr1
  4890  0528  00B8               	movwf	setFrequency@frequency_hz+1
  4891  0529  3186  26CF  3184   	fcall	_setFrequency
  4892  052C                     l4396:
  4893                           
  4894                           ;main.c: 614:   (INTCONbits.GIE = 1);
  4895  052C  178B               	bsf	11,7	;volatile
  4896  052D                     l4398:
  4897                           
  4898                           ;main.c: 615:   (INTCONbits.PEIE = 1);
  4899  052D  170B               	bsf	11,6	;volatile
  4900  052E                     l4400:
  4901                           
  4902                           ;main.c: 616:   startUp();
  4903  052E  318E  267A  3184   	fcall	_startUp
  4904  0531                     l4402:
  4905                           
  4906                           ;main.c: 618:   const int16_t BATTERY_NUM_LOW_READINGS = 10000;;main.c: 619:   int16_t l
      +                          ow_reading_count = 0;
  4907  0531  0021               	movlb	1	; select bank1
  4908  0532  01EC               	clrf	main@low_reading_count^(0+128)
  4909  0533  01ED               	clrf	(main@low_reading_count+1)^(0+128)
  4910  0534                     l4404:
  4911                           
  4912                           ;main.c: 624:     int16_t batt_mv = battery_voltage();
  4913  0534  318E  2613  3184   	fcall	_battery_voltage
  4914  0537  0020               	movlb	0	; select bank0
  4915  0538  0838               	movf	?_battery_voltage+1,w
  4916  0539  0021               	movlb	1	; select bank1
  4917  053A  00EF               	movwf	(main@batt_mv+1)^(0+128)
  4918  053B  0020               	movlb	0	; select bank0
  4919  053C  0837               	movf	?_battery_voltage,w
  4920  053D  0021               	movlb	1	; select bank1
  4921  053E  00EE               	movwf	main@batt_mv^(0+128)
  4922  053F                     l4406:
  4923                           
  4924                           ;main.c: 625:     const int16_t BATTERY_THRESHOLD = 2000;;main.c: 627:     if (batt_mv <
      +                           BATTERY_THRESHOLD)
  4925  053F  086F               	movf	(main@batt_mv+1)^(0+128),w
  4926  0540  3A80               	xorlw	128
  4927  0541  00EB               	movwf	??_main^(0+128)
  4928  0542  3087               	movlw	135
  4929  0543  026B               	subwf	??_main^(0+128),w
  4930  0544  1D03               	skipz
  4931  0545  2D48               	goto	u3025
  4932  0546  30D0               	movlw	208
  4933  0547  026E               	subwf	main@batt_mv^(0+128),w
  4934  0548                     u3025:
  4935  0548  1803               	skipnc
  4936  0549  2D4B               	goto	u3021
  4937  054A  2D4C               	goto	u3020
  4938  054B                     u3021:
  4939  054B  2D52               	goto	l4410
  4940  054C                     u3020:
  4941  054C                     l4408:
  4942                           
  4943                           ;main.c: 628:     {;main.c: 629:         low_reading_count++;
  4944  054C  3001               	movlw	1
  4945  054D  0021               	movlb	1	; select bank1
  4946  054E  07EC               	addwf	main@low_reading_count^(0+128),f
  4947  054F  3000               	movlw	0
  4948  0550  3DED               	addwfc	(main@low_reading_count+1)^(0+128),f
  4949                           
  4950                           ;main.c: 632:     } else {
  4951  0551  2D55               	goto	l4414
  4952  0552                     l4410:
  4953                           
  4954                           ;main.c: 633:         low_reading_count = 0;
  4955  0552  0021               	movlb	1	; select bank1
  4956  0553  01EC               	clrf	main@low_reading_count^(0+128)
  4957  0554  01ED               	clrf	(main@low_reading_count+1)^(0+128)
  4958  0555                     l4414:
  4959                           
  4960                           ;main.c: 643:     setCurrent(currentValue[currentIndex], batt_mv);
  4961  0555  3566               	lslf	_currentIndex^(0+128),w
  4962  0556  3EC0               	addlw	(low (_currentValue| 0))& (0+255)
  4963  0557  0086               	movwf	6
  4964  0558  0187               	clrf	7
  4965  0559  3F40               	moviw [0]fsr1
  4966  055A  0020               	movlb	0	; select bank0
  4967  055B  00B9               	movwf	setCurrent@microamps
  4968  055C  3F41               	moviw [1]fsr1
  4969  055D  00BA               	movwf	setCurrent@microamps+1
  4970  055E  0021               	movlb	1	; select bank1
  4971  055F  086F               	movf	(main@batt_mv+1)^(0+128),w
  4972  0560  0020               	movlb	0	; select bank0
  4973  0561  00BC               	movwf	setCurrent@Vdd_mv+1
  4974  0562  0021               	movlb	1	; select bank1
  4975  0563  086E               	movf	main@batt_mv^(0+128),w
  4976  0564  0020               	movlb	0	; select bank0
  4977  0565  00BB               	movwf	setCurrent@Vdd_mv
  4978  0566  3183  23BD  3184   	fcall	_setCurrent
  4979  0569                     l4416:
  4980                           
  4981                           ;main.c: 650:     if (STATE_DONE == ir_code.state){
  4982  0569  3002               	movlw	2
  4983  056A  0021               	movlb	1	; select bank1
  4984  056B  0635               	xorwf	(_ir_code^(0+128)+1),w
  4985  056C  1D03               	btfss	3,2
  4986  056D  2D6F               	goto	u3031
  4987  056E  2D70               	goto	u3030
  4988  056F                     u3031:
  4989  056F  2D34               	goto	l4404
  4990  0570                     u3030:
  4991  0570                     l4418:
  4992                           
  4993                           ;main.c: 668:       process_remote_command(&ir_code);
  4994  0570  30B4               	movlw	(low (_ir_code| 0))& (0+255)
  4995  0571  3180  2087  3184   	fcall	_process_remote_command
  4996  0574                     l4420:
  4997                           
  4998                           ;main.c: 671:       ir_code.state = STATE_RESET;
  4999  0574  0021               	movlb	1	; select bank1
  5000  0575  01B5               	clrf	(_ir_code^(0+128)+1)
  5001  0576  2D34               	goto	l4404
  5002  0577  3180  284B         	ljmp	start
  5003  0579                     __end_of_main:
  5004                           
  5005                           	psect	text1
  5006  0E7A                     __ptext1:	
  5007 ;; *************** function _startUp *****************
  5008 ;; Defined at:
  5009 ;;		line 253 in file "main.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;		None
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;  i               2    2[BANK0 ] int 
  5014 ;; Return value:  Size  Location     Type
  5015 ;;                  1    wreg      void 
  5016 ;; Registers used:
  5017 ;;		wreg, status,2, status,0, pclath, cstack
  5018 ;; Tracked objects:
  5019 ;;		On entry : 0/0
  5020 ;;		On exit  : 0/0
  5021 ;;		Unchanged: 0/0
  5022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5023 ;;      Params:         0       0       0       0       0       0       0       0
  5024 ;;      Locals:         0       2       0       0       0       0       0       0
  5025 ;;      Temps:          0       2       0       0       0       0       0       0
  5026 ;;      Totals:         0       4       0       0       0       0       0       0
  5027 ;;Total ram usage:        4 bytes
  5028 ;; Hardware stack levels used: 1
  5029 ;; Hardware stack levels required when called: 5
  5030 ;; This function calls:
  5031 ;;		_setLEDColor
  5032 ;; This function is called by:
  5033 ;;		_main
  5034 ;; This function uses a non-reentrant model
  5035 ;;
  5036                           
  5037                           
  5038                           ;psect for function _startUp
  5039  0E7A                     _startUp:
  5040  0E7A                     l4092:	
  5041                           ;incstack = 0
  5042                           ; Regs used in _startUp: [wreg+status,2+status,0+pclath+cstack]
  5043                           
  5044                           
  5045                           ;main.c: 254:   interfaceState = STATE_RUNNING;
  5046  0E7A  01F8               	clrf	_interfaceState
  5047                           
  5048                           ;main.c: 255:   for (int i = 0; i < 5; i++){
  5049  0E7B  0020               	movlb	0	; select bank0
  5050  0E7C  01A2               	clrf	startUp@i
  5051  0E7D  01A3               	clrf	startUp@i+1
  5052  0E7E                     l4098:
  5053                           
  5054                           ;main.c: 256:     setLEDColor(0, 180, 230);
  5055  0E7E  30B4               	movlw	180
  5056  0E7F  0020               	movlb	0	; select bank0
  5057  0E80  00A0               	movwf	??_startUp
  5058  0E81  0820               	movf	??_startUp,w
  5059  0E82  00F3               	movwf	setLEDColor@green
  5060  0E83  30E6               	movlw	230
  5061  0E84  00A1               	movwf	??_startUp+1
  5062  0E85  0821               	movf	??_startUp+1,w
  5063  0E86  00F4               	movwf	setLEDColor@blue
  5064  0E87  3000               	movlw	0
  5065  0E88  318B  23FB  318E   	fcall	_setLEDColor
  5066  0E8B                     l4100:
  5067                           
  5068                           ;main.c: 257:     _delay((unsigned long)((100)*(4000000/4000.0)));
  5069  0E8B  3082               	movlw	130
  5070  0E8C  0020               	movlb	0	; select bank0
  5071  0E8D  00A0               	movwf	??_startUp
  5072  0E8E  30DD               	movlw	221
  5073  0E8F                     u3047:
  5074  0E8F  0B89               	decfsz	9,f
  5075  0E90  2E8F               	goto	u3047
  5076  0E91  0BA0               	decfsz	??_startUp,f
  5077  0E92  2E8F               	goto	u3047
  5078  0E93  3200               	nop2
  5079  0E94                     l4102:
  5080                           
  5081                           ;main.c: 258:     setLEDColor(0, 0, 0);
  5082  0E94  01F3               	clrf	setLEDColor@green
  5083  0E95  01F4               	clrf	setLEDColor@blue
  5084  0E96  3000               	movlw	0
  5085  0E97  318B  23FB  318E   	fcall	_setLEDColor
  5086                           
  5087                           ;main.c: 259:     _delay((unsigned long)((100)*(4000000/4000.0)));
  5088  0E9A  3082               	movlw	130
  5089  0E9B  0020               	movlb	0	; select bank0
  5090  0E9C  00A0               	movwf	??_startUp
  5091  0E9D  30DD               	movlw	221
  5092  0E9E                     u3057:
  5093  0E9E  0B89               	decfsz	9,f
  5094  0E9F  2E9E               	goto	u3057
  5095  0EA0  0BA0               	decfsz	??_startUp,f
  5096  0EA1  2E9E               	goto	u3057
  5097  0EA2  3200               	nop2
  5098                           
  5099                           ;main.c: 260:   }
  5100  0EA3  3001               	movlw	1
  5101  0EA4  0020               	movlb	0	; select bank0
  5102  0EA5  07A2               	addwf	startUp@i,f
  5103  0EA6  3000               	movlw	0
  5104  0EA7  3DA3               	addwfc	startUp@i+1,f
  5105  0EA8  0823               	movf	startUp@i+1,w
  5106  0EA9  3A80               	xorlw	128
  5107  0EAA  00A0               	movwf	??_startUp
  5108  0EAB  3080               	movlw	128
  5109  0EAC  0220               	subwf	??_startUp,w
  5110  0EAD  1D03               	skipz
  5111  0EAE  2EB1               	goto	u2705
  5112  0EAF  3005               	movlw	5
  5113  0EB0  0222               	subwf	startUp@i,w
  5114  0EB1                     u2705:
  5115  0EB1  1C03               	skipc
  5116  0EB2  2EB4               	goto	u2701
  5117  0EB3  2EB5               	goto	u2700
  5118  0EB4                     u2701:
  5119  0EB4  2E7E               	goto	l4098
  5120  0EB5                     u2700:
  5121  0EB5                     l660:
  5122  0EB5  0008               	return
  5123  0EB6                     __end_of_startUp:
  5124                           
  5125                           	psect	text2
  5126  0C60                     __ptext2:	
  5127 ;; *************** function _readPersistentState *****************
  5128 ;; Defined at:
  5129 ;;		line 115 in file "main.c"
  5130 ;; Parameters:    Size  Location     Type
  5131 ;;		None
  5132 ;; Auto vars:     Size  Location     Type
  5133 ;;		None
  5134 ;; Return value:  Size  Location     Type
  5135 ;;                  1    wreg      void 
  5136 ;; Registers used:
  5137 ;;		wreg, fsr0l, fsr0h, pclath
  5138 ;; Tracked objects:
  5139 ;;		On entry : 0/0
  5140 ;;		On exit  : 0/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5143 ;;      Params:         0       0       0       0       0       0       0       0
  5144 ;;      Locals:         0       0       0       0       0       0       0       0
  5145 ;;      Temps:          2       0       0       0       0       0       0       0
  5146 ;;      Totals:         2       0       0       0       0       0       0       0
  5147 ;;Total ram usage:        2 bytes
  5148 ;; Hardware stack levels used: 1
  5149 ;; Hardware stack levels required when called: 4
  5150 ;; This function calls:
  5151 ;;		Nothing
  5152 ;; This function is called by:
  5153 ;;		_main
  5154 ;; This function uses a non-reentrant model
  5155 ;;
  5156                           
  5157                           
  5158                           ;psect for function _readPersistentState
  5159  0C60                     _readPersistentState:
  5160  0C60                     l3254:	
  5161                           ;incstack = 0
  5162                           ; Regs used in _readPersistentState: [wreg-fsr0h+pclath]
  5163                           
  5164                           
  5165                           ;main.c: 117:   currentIndex = HEF_persistent_state.currentIndex;
  5166  0C60  30E0               	movlw	224
  5167  0C61  0084               	movwf	4
  5168  0C62  308F               	movlw	143
  5169  0C63  0085               	movwf	5
  5170  0C64  0800               	movf	0,w	;code access
  5171  0C65  00F3               	movwf	??_readPersistentState
  5172  0C66  01F4               	clrf	??_readPersistentState+1
  5173  0C67  0873               	movf	??_readPersistentState,w
  5174  0C68  0021               	movlb	1	; select bank1
  5175  0C69  00E6               	movwf	_currentIndex^(0+128)
  5176  0C6A  0874               	movf	??_readPersistentState+1,w
  5177  0C6B  00E7               	movwf	(_currentIndex+1)^(0+128)
  5178                           
  5179                           ;main.c: 118:   frequencyIndex = HEF_persistent_state.frequencyIndex;
  5180  0C6C  30E1               	movlw	225
  5181  0C6D  0084               	movwf	4
  5182  0C6E  308F               	movlw	143
  5183  0C6F  0085               	movwf	5
  5184  0C70  0800               	movf	0,w	;code access
  5185  0C71  00F3               	movwf	??_readPersistentState
  5186  0C72  01F4               	clrf	??_readPersistentState+1
  5187  0C73  0873               	movf	??_readPersistentState,w
  5188  0C74  00E4               	movwf	_frequencyIndex^(0+128)
  5189  0C75  0874               	movf	??_readPersistentState+1,w
  5190  0C76  00E5               	movwf	(_frequencyIndex+1)^(0+128)
  5191                           
  5192                           ;main.c: 119:   dc_frequency_flag = HEF_persistent_state.dc_frequency_flag;
  5193  0C77  30E2               	movlw	226
  5194  0C78  0084               	movwf	4
  5195  0C79  308F               	movlw	143
  5196  0C7A  0085               	movwf	5
  5197  0C7B  0800               	movf	0,w	;code access
  5198  0C7C  00F3               	movwf	??_readPersistentState
  5199  0C7D  0873               	movf	??_readPersistentState,w
  5200  0C7E  00FA               	movwf	_dc_frequency_flag
  5201  0C7F                     l630:
  5202  0C7F  0008               	return
  5203  0C80                     __end_of_readPersistentState:
  5204                           
  5205                           	psect	text3
  5206  0087                     __ptext3:	
  5207 ;; *************** function _process_remote_command *****************
  5208 ;; Defined at:
  5209 ;;		line 383 in file "main.c"
  5210 ;; Parameters:    Size  Location     Type
  5211 ;;  code            1    wreg     PTR struct .
  5212 ;;		 -> ir_code(6), 
  5213 ;; Auto vars:     Size  Location     Type
  5214 ;;  code            1    2[BANK1 ] PTR struct .
  5215 ;;		 -> ir_code(6), 
  5216 ;; Return value:  Size  Location     Type
  5217 ;;                  1    wreg      void 
  5218 ;; Registers used:
  5219 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5220 ;; Tracked objects:
  5221 ;;		On entry : 0/0
  5222 ;;		On exit  : 0/0
  5223 ;;		Unchanged: 0/0
  5224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5225 ;;      Params:         0       0       0       0       0       0       0       0
  5226 ;;      Locals:         0       0       1       0       0       0       0       0
  5227 ;;      Temps:          0       0       2       0       0       0       0       0
  5228 ;;      Totals:         0       0       3       0       0       0       0       0
  5229 ;;Total ram usage:        3 bytes
  5230 ;; Hardware stack levels used: 1
  5231 ;; Hardware stack levels required when called: 11
  5232 ;; This function calls:
  5233 ;;		_battery_voltage
  5234 ;;		_selectCurrent
  5235 ;;		_selectCurrentValue
  5236 ;;		_selectDecrease
  5237 ;;		_selectFrequency
  5238 ;;		_selectFrequencyValue
  5239 ;;		_selectIncrease
  5240 ;;		_selectSomething
  5241 ;;		_setCurrent
  5242 ;;		_setFrequency
  5243 ;;		_setLEDColor
  5244 ;;		_writePersistentState
  5245 ;; This function is called by:
  5246 ;;		_main
  5247 ;; This function uses a non-reentrant model
  5248 ;;
  5249                           
  5250                           
  5251                           ;psect for function _process_remote_command
  5252  0087                     _process_remote_command:
  5253                           
  5254                           ;incstack = 0
  5255                           ; Regs used in _process_remote_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5256                           ;process_remote_command@code stored from wreg
  5257  0087  0021               	movlb	1	; select bank1
  5258  0088  00EA               	movwf	process_remote_command@code^(0+128)
  5259  0089                     l4104:
  5260                           
  5261                           ;main.c: 384:   setLEDColor(0, 0, 0);
  5262  0089  01F3               	clrf	setLEDColor@green
  5263  008A  01F4               	clrf	setLEDColor@blue
  5264  008B  3000               	movlw	0
  5265  008C  318B  23FB  3180   	fcall	_setLEDColor
  5266                           
  5267                           ;main.c: 386:   switch(code->command){
  5268  008F  2B6D               	goto	l4332
  5269  0090                     l4106:
  5270                           
  5271                           ;main.c: 388:     if(STATE_CURRENT == interfaceState){
  5272  0090  0378               	decf	_interfaceState,w
  5273  0091  1D03               	btfss	3,2
  5274  0092  2894               	goto	u2711
  5275  0093  2895               	goto	u2710
  5276  0094                     u2711:
  5277  0094  28CA               	goto	l4120
  5278  0095                     u2710:
  5279  0095                     l4108:
  5280                           
  5281                           ;main.c: 389:       currentIndex++;
  5282  0095  3001               	movlw	1
  5283  0096  07E6               	addwf	_currentIndex^(0+128),f
  5284  0097  3000               	movlw	0
  5285  0098  3DE7               	addwfc	(_currentIndex+1)^(0+128),f
  5286                           
  5287                           ;main.c: 390:       if (currentIndex > maxCurrentIndex - 1)
  5288  0099  0867               	movf	(_currentIndex+1)^(0+128),w
  5289  009A  3A80               	xorlw	128
  5290  009B  00E8               	movwf	??_process_remote_command^(0+128)
  5291  009C  3080               	movlw	128
  5292  009D  0268               	subwf	??_process_remote_command^(0+128),w
  5293  009E  1D03               	skipz
  5294  009F  28A2               	goto	u2725
  5295  00A0  300A               	movlw	10
  5296  00A1  0266               	subwf	_currentIndex^(0+128),w
  5297  00A2                     u2725:
  5298  00A2  1C03               	skipc
  5299  00A3  28A5               	goto	u2721
  5300  00A4  28A6               	goto	u2720
  5301  00A5                     u2721:
  5302  00A5  28AF               	goto	l4114
  5303  00A6                     u2720:
  5304  00A6                     l4110:
  5305                           
  5306                           ;main.c: 391:       {;main.c: 392:         currentIndex = maxCurrentIndex - 1;
  5307  00A6  3009               	movlw	9
  5308  00A7  0021               	movlb	1	; select bank1
  5309  00A8  00E6               	movwf	_currentIndex^(0+128)
  5310  00A9  3000               	movlw	0
  5311  00AA  00E7               	movwf	(_currentIndex^(0+128)+1)
  5312  00AB                     l4112:
  5313                           
  5314                           ;main.c: 393:         selectSomething();
  5315  00AB  318F  2785  3180   	fcall	_selectSomething
  5316                           
  5317                           ;main.c: 394:       } else {
  5318  00AE  28B2               	goto	l4116
  5319  00AF                     l4114:
  5320                           
  5321                           ;main.c: 395:         selectIncrease();
  5322  00AF  318C  24E9  3180   	fcall	_selectIncrease
  5323  00B2                     l4116:
  5324                           
  5325                           ;main.c: 397:       setCurrent(currentValue[currentIndex], battery_voltage());
  5326  00B2  0021               	movlb	1	; select bank1
  5327  00B3  3566               	lslf	_currentIndex^(0+128),w
  5328  00B4  3EC0               	addlw	(low (_currentValue| 0))& (0+255)
  5329  00B5  0086               	movwf	6
  5330  00B6  0187               	clrf	7
  5331  00B7  3F40               	moviw [0]fsr1
  5332  00B8  0020               	movlb	0	; select bank0
  5333  00B9  00B9               	movwf	setCurrent@microamps
  5334  00BA  3F41               	moviw [1]fsr1
  5335  00BB  00BA               	movwf	setCurrent@microamps+1
  5336  00BC  318E  2613  3180   	fcall	_battery_voltage
  5337  00BF  0020               	movlb	0	; select bank0
  5338  00C0  0838               	movf	?_battery_voltage+1,w
  5339  00C1  00BC               	movwf	setCurrent@Vdd_mv+1
  5340  00C2  0837               	movf	?_battery_voltage,w
  5341  00C3  00BB               	movwf	setCurrent@Vdd_mv
  5342  00C4  3183  23BD  3180   	fcall	_setCurrent
  5343  00C7                     l4118:
  5344                           
  5345                           ;main.c: 398:       writePersistentState();
  5346  00C7  3187  2795  3180   	fcall	_writePersistentState
  5347  00CA                     l4120:
  5348                           
  5349                           ;main.c: 400:     if(STATE_FREQUENCY == interfaceState){
  5350  00CA  3002               	movlw	2
  5351  00CB  0678               	xorwf	_interfaceState,w
  5352  00CC  1D03               	btfss	3,2
  5353  00CD  28CF               	goto	u2731
  5354  00CE  28D0               	goto	u2730
  5355  00CF                     u2731:
  5356  00CF  28FF               	goto	l4134
  5357  00D0                     u2730:
  5358  00D0                     l4122:
  5359                           
  5360                           ;main.c: 401:       frequencyIndex++;
  5361  00D0  3001               	movlw	1
  5362  00D1  0021               	movlb	1	; select bank1
  5363  00D2  07E4               	addwf	_frequencyIndex^(0+128),f
  5364  00D3  3000               	movlw	0
  5365  00D4  3DE5               	addwfc	(_frequencyIndex+1)^(0+128),f
  5366                           
  5367                           ;main.c: 402:       if (frequencyIndex > maxFrequencyIndex - 1)
  5368  00D5  0865               	movf	(_frequencyIndex+1)^(0+128),w
  5369  00D6  3A80               	xorlw	128
  5370  00D7  00E8               	movwf	??_process_remote_command^(0+128)
  5371  00D8  3080               	movlw	128
  5372  00D9  0268               	subwf	??_process_remote_command^(0+128),w
  5373  00DA  1D03               	skipz
  5374  00DB  28DE               	goto	u2745
  5375  00DC  300A               	movlw	10
  5376  00DD  0264               	subwf	_frequencyIndex^(0+128),w
  5377  00DE                     u2745:
  5378  00DE  1C03               	skipc
  5379  00DF  28E1               	goto	u2741
  5380  00E0  28E2               	goto	u2740
  5381  00E1                     u2741:
  5382  00E1  28EB               	goto	l4128
  5383  00E2                     u2740:
  5384  00E2                     l4124:
  5385                           
  5386                           ;main.c: 403:       {;main.c: 404:         frequencyIndex = maxFrequencyIndex - 1;
  5387  00E2  3009               	movlw	9
  5388  00E3  0021               	movlb	1	; select bank1
  5389  00E4  00E4               	movwf	_frequencyIndex^(0+128)
  5390  00E5  3000               	movlw	0
  5391  00E6  00E5               	movwf	(_frequencyIndex^(0+128)+1)
  5392  00E7                     l4126:
  5393                           
  5394                           ;main.c: 405:         selectSomething();
  5395  00E7  318F  2785  3180   	fcall	_selectSomething
  5396                           
  5397                           ;main.c: 406:       } else {
  5398  00EA  28EE               	goto	l4130
  5399  00EB                     l4128:
  5400                           
  5401                           ;main.c: 407:         selectIncrease();
  5402  00EB  318C  24E9  3180   	fcall	_selectIncrease
  5403  00EE                     l4130:
  5404                           
  5405                           ;main.c: 409:       setFrequency(frequencyValue[frequencyIndex]);
  5406  00EE  0021               	movlb	1	; select bank1
  5407  00EF  3564               	lslf	_frequencyIndex^(0+128),w
  5408  00F0  3E40               	addlw	(low (_frequencyValue| (0+256)))& (0+255)
  5409  00F1  0086               	movwf	6
  5410  00F2  3001               	movlw	1	; select bank2/3
  5411  00F3  0087               	movwf	7
  5412  00F4  3F40               	moviw [0]fsr1
  5413  00F5  0020               	movlb	0	; select bank0
  5414  00F6  00B7               	movwf	setFrequency@frequency_hz
  5415  00F7  3F41               	moviw [1]fsr1
  5416  00F8  00B8               	movwf	setFrequency@frequency_hz+1
  5417  00F9  3186  26CF  3180   	fcall	_setFrequency
  5418  00FC                     l4132:
  5419                           
  5420                           ;main.c: 410:       writePersistentState();
  5421  00FC  3187  2795  3180   	fcall	_writePersistentState
  5422  00FF                     l4134:
  5423                           
  5424                           ;main.c: 412:     if(STATE_RUNNING == interfaceState){
  5425  00FF  0878               	movf	_interfaceState,w
  5426  0100  1D03               	btfss	3,2
  5427  0101  2903               	goto	u2751
  5428  0102  2904               	goto	u2750
  5429  0103                     u2751:
  5430  0103  2907               	goto	l4138
  5431  0104                     u2750:
  5432  0104                     l4136:
  5433                           
  5434                           ;main.c: 413:       selectSomething();
  5435  0104  318F  2785  3180   	fcall	_selectSomething
  5436  0107                     l4138:
  5437                           
  5438                           ;main.c: 415:     if(STATE_LOWBATTERY == interfaceState){
  5439  0107  3003               	movlw	3
  5440  0108  0678               	xorwf	_interfaceState,w
  5441  0109  1D03               	btfss	3,2
  5442  010A  290C               	goto	u2761
  5443  010B  290D               	goto	u2760
  5444  010C                     u2761:
  5445  010C  2BA3               	goto	l4334
  5446  010D                     u2760:
  5447  010D                     l4140:
  5448                           
  5449                           ;main.c: 416:       selectSomething();
  5450  010D  318F  2785  3180   	fcall	_selectSomething
  5451  0110  2BA3               	goto	l4334
  5452  0111                     l4142:
  5453                           
  5454                           ;main.c: 420:     if(STATE_CURRENT == interfaceState){
  5455  0111  0378               	decf	_interfaceState,w
  5456  0112  1D03               	btfss	3,2
  5457  0113  2915               	goto	u2771
  5458  0114  2916               	goto	u2770
  5459  0115                     u2771:
  5460  0115  293F               	goto	l4158
  5461  0116                     u2770:
  5462  0116                     l4144:
  5463                           
  5464                           ;main.c: 421:       currentIndex--;
  5465  0116  30FF               	movlw	255
  5466  0117  07E6               	addwf	_currentIndex^(0+128),f
  5467  0118  30FF               	movlw	255
  5468  0119  3DE7               	addwfc	(_currentIndex+1)^(0+128),f
  5469  011A                     l4146:
  5470                           
  5471                           ;main.c: 422:       if (currentIndex < 0)
  5472  011A  1FE7               	btfss	(_currentIndex+1)^(0+128),7
  5473  011B  291D               	goto	u2781
  5474  011C  291E               	goto	u2780
  5475  011D                     u2781:
  5476  011D  2924               	goto	l4152
  5477  011E                     u2780:
  5478  011E                     l4148:
  5479                           
  5480                           ;main.c: 423:       {;main.c: 424:         currentIndex = 0;
  5481  011E  01E6               	clrf	_currentIndex^(0+128)
  5482  011F  01E7               	clrf	(_currentIndex+1)^(0+128)
  5483  0120                     l4150:
  5484                           
  5485                           ;main.c: 425:         selectSomething();
  5486  0120  318F  2785  3180   	fcall	_selectSomething
  5487                           
  5488                           ;main.c: 426:       } else {
  5489  0123  2927               	goto	l4154
  5490  0124                     l4152:
  5491                           
  5492                           ;main.c: 427:         selectDecrease();
  5493  0124  318C  24A2  3180   	fcall	_selectDecrease
  5494  0127                     l4154:
  5495                           
  5496                           ;main.c: 429:       setCurrent(currentValue[currentIndex], battery_voltage());
  5497  0127  0021               	movlb	1	; select bank1
  5498  0128  3566               	lslf	_currentIndex^(0+128),w
  5499  0129  3EC0               	addlw	(low (_currentValue| 0))& (0+255)
  5500  012A  0086               	movwf	6
  5501  012B  0187               	clrf	7
  5502  012C  3F40               	moviw [0]fsr1
  5503  012D  0020               	movlb	0	; select bank0
  5504  012E  00B9               	movwf	setCurrent@microamps
  5505  012F  3F41               	moviw [1]fsr1
  5506  0130  00BA               	movwf	setCurrent@microamps+1
  5507  0131  318E  2613  3180   	fcall	_battery_voltage
  5508  0134  0020               	movlb	0	; select bank0
  5509  0135  0838               	movf	?_battery_voltage+1,w
  5510  0136  00BC               	movwf	setCurrent@Vdd_mv+1
  5511  0137  0837               	movf	?_battery_voltage,w
  5512  0138  00BB               	movwf	setCurrent@Vdd_mv
  5513  0139  3183  23BD  3180   	fcall	_setCurrent
  5514  013C                     l4156:
  5515                           
  5516                           ;main.c: 430:       writePersistentState();
  5517  013C  3187  2795  3180   	fcall	_writePersistentState
  5518  013F                     l4158:
  5519                           
  5520                           ;main.c: 432:     if(STATE_FREQUENCY == interfaceState){
  5521  013F  3002               	movlw	2
  5522  0140  0678               	xorwf	_interfaceState,w
  5523  0141  1D03               	btfss	3,2
  5524  0142  2944               	goto	u2791
  5525  0143  2945               	goto	u2790
  5526  0144                     u2791:
  5527  0144  2968               	goto	l4174
  5528  0145                     u2790:
  5529  0145                     l4160:
  5530                           
  5531                           ;main.c: 433:       frequencyIndex--;
  5532  0145  30FF               	movlw	255
  5533  0146  0021               	movlb	1	; select bank1
  5534  0147  07E4               	addwf	_frequencyIndex^(0+128),f
  5535  0148  30FF               	movlw	255
  5536  0149  3DE5               	addwfc	(_frequencyIndex+1)^(0+128),f
  5537  014A                     l4162:
  5538                           
  5539                           ;main.c: 434:       if (frequencyIndex < 0)
  5540  014A  1FE5               	btfss	(_frequencyIndex+1)^(0+128),7
  5541  014B  294D               	goto	u2801
  5542  014C  294E               	goto	u2800
  5543  014D                     u2801:
  5544  014D  2954               	goto	l4168
  5545  014E                     u2800:
  5546  014E                     l4164:
  5547                           
  5548                           ;main.c: 435:       {;main.c: 436:         frequencyIndex = 0;
  5549  014E  01E4               	clrf	_frequencyIndex^(0+128)
  5550  014F  01E5               	clrf	(_frequencyIndex+1)^(0+128)
  5551  0150                     l4166:
  5552                           
  5553                           ;main.c: 437:         selectSomething();
  5554  0150  318F  2785  3180   	fcall	_selectSomething
  5555                           
  5556                           ;main.c: 438:       } else {
  5557  0153  2957               	goto	l4170
  5558  0154                     l4168:
  5559                           
  5560                           ;main.c: 439:         selectDecrease();
  5561  0154  318C  24A2  3180   	fcall	_selectDecrease
  5562  0157                     l4170:
  5563                           
  5564                           ;main.c: 441:       setFrequency(frequencyValue[frequencyIndex]);
  5565  0157  0021               	movlb	1	; select bank1
  5566  0158  3564               	lslf	_frequencyIndex^(0+128),w
  5567  0159  3E40               	addlw	(low (_frequencyValue| (0+256)))& (0+255)
  5568  015A  0086               	movwf	6
  5569  015B  3001               	movlw	1	; select bank2/3
  5570  015C  0087               	movwf	7
  5571  015D  3F40               	moviw [0]fsr1
  5572  015E  0020               	movlb	0	; select bank0
  5573  015F  00B7               	movwf	setFrequency@frequency_hz
  5574  0160  3F41               	moviw [1]fsr1
  5575  0161  00B8               	movwf	setFrequency@frequency_hz+1
  5576  0162  3186  26CF  3180   	fcall	_setFrequency
  5577  0165                     l4172:
  5578                           
  5579                           ;main.c: 442:       writePersistentState();
  5580  0165  3187  2795  3180   	fcall	_writePersistentState
  5581  0168                     l4174:
  5582                           
  5583                           ;main.c: 444:     if(STATE_RUNNING == interfaceState){
  5584  0168  0878               	movf	_interfaceState,w
  5585  0169  1D03               	btfss	3,2
  5586  016A  296C               	goto	u2811
  5587  016B  296D               	goto	u2810
  5588  016C                     u2811:
  5589  016C  2970               	goto	l4178
  5590  016D                     u2810:
  5591  016D                     l4176:
  5592                           
  5593                           ;main.c: 445:       selectSomething();
  5594  016D  318F  2785  3180   	fcall	_selectSomething
  5595  0170                     l4178:
  5596                           
  5597                           ;main.c: 447:     if(STATE_LOWBATTERY == interfaceState){
  5598  0170  3003               	movlw	3
  5599  0171  0678               	xorwf	_interfaceState,w
  5600  0172  1D03               	btfss	3,2
  5601  0173  2975               	goto	u2821
  5602  0174  2976               	goto	u2820
  5603  0175                     u2821:
  5604  0175  2BA3               	goto	l4334
  5605  0176                     u2820:
  5606  0176  290D               	goto	l4140
  5607  0177                     l4182:
  5608                           
  5609                           ;main.c: 452:     selectFrequency();
  5610  0177  318D  2585  3180   	fcall	_selectFrequency
  5611                           
  5612                           ;main.c: 453:     break;
  5613  017A  2BA3               	goto	l4334
  5614  017B                     l4184:
  5615                           
  5616                           ;main.c: 455:     selectCurrent();
  5617  017B  318D  2534  3180   	fcall	_selectCurrent
  5618                           
  5619                           ;main.c: 456:     break;
  5620  017E  2BA3               	goto	l4334
  5621  017F                     l4186:
  5622                           
  5623                           ;main.c: 458:        if (interfaceState == STATE_FREQUENCY){
  5624  017F  3002               	movlw	2
  5625  0180  0678               	xorwf	_interfaceState,w
  5626  0181  1D03               	btfss	3,2
  5627  0182  2984               	goto	u2831
  5628  0183  2985               	goto	u2830
  5629  0184                     u2831:
  5630  0184  2996               	goto	l4194
  5631  0185                     u2830:
  5632  0185                     l4188:
  5633                           
  5634                           ;main.c: 459:            setFrequency(frequencyValue[0]);
  5635  0185  0022               	movlb	2	; select bank2
  5636  0186  0841               	movf	(_frequencyValue+1)^(0+256),w
  5637  0187  0020               	movlb	0	; select bank0
  5638  0188  00B8               	movwf	setFrequency@frequency_hz+1
  5639  0189  0022               	movlb	2	; select bank2
  5640  018A  0840               	movf	_frequencyValue^(0+256),w
  5641  018B  0020               	movlb	0	; select bank0
  5642  018C  00B7               	movwf	setFrequency@frequency_hz
  5643  018D  3186  26CF  3180   	fcall	_setFrequency
  5644  0190                     l4190:
  5645                           
  5646                           ;main.c: 460:            frequencyIndex = 0;
  5647  0190  0021               	movlb	1	; select bank1
  5648  0191  01E4               	clrf	_frequencyIndex^(0+128)
  5649  0192  01E5               	clrf	(_frequencyIndex+1)^(0+128)
  5650  0193                     l4192:
  5651                           
  5652                           ;main.c: 461:            selectFrequencyValue();
  5653  0193  318D  250E  3180   	fcall	_selectFrequencyValue
  5654  0196                     l4194:
  5655                           
  5656                           ;main.c: 463:        if (interfaceState == STATE_CURRENT){
  5657  0196  0378               	decf	_interfaceState,w
  5658  0197  1D03               	btfss	3,2
  5659  0198  299A               	goto	u2841
  5660  0199  299B               	goto	u2840
  5661  019A                     u2841:
  5662  019A  2BA3               	goto	l4334
  5663  019B                     u2840:
  5664  019B                     l4196:
  5665                           
  5666                           ;main.c: 464:            setCurrent(currentValue[0], battery_voltage());
  5667  019B  0021               	movlb	1	; select bank1
  5668  019C  0841               	movf	(_currentValue+1)^(0+128),w
  5669  019D  0020               	movlb	0	; select bank0
  5670  019E  00BA               	movwf	setCurrent@microamps+1
  5671  019F  0021               	movlb	1	; select bank1
  5672  01A0  0840               	movf	_currentValue^(0+128),w
  5673  01A1  0020               	movlb	0	; select bank0
  5674  01A2  00B9               	movwf	setCurrent@microamps
  5675  01A3  318E  2613  3180   	fcall	_battery_voltage
  5676  01A6  0020               	movlb	0	; select bank0
  5677  01A7  0838               	movf	?_battery_voltage+1,w
  5678  01A8  00BC               	movwf	setCurrent@Vdd_mv+1
  5679  01A9  0837               	movf	?_battery_voltage,w
  5680  01AA  00BB               	movwf	setCurrent@Vdd_mv
  5681  01AB  3183  23BD  3180   	fcall	_setCurrent
  5682  01AE                     l4198:
  5683                           
  5684                           ;main.c: 465:            currentIndex = 0;
  5685  01AE  0021               	movlb	1	; select bank1
  5686  01AF  01E6               	clrf	_currentIndex^(0+128)
  5687  01B0  01E7               	clrf	(_currentIndex+1)^(0+128)
  5688  01B1                     l4200:
  5689                           
  5690                           ;main.c: 466:            selectCurrentValue();
  5691  01B1  318D  255C  3180   	fcall	_selectCurrentValue
  5692  01B4  2BA3               	goto	l4334
  5693  01B5                     l4202:
  5694                           
  5695                           ;main.c: 473:      if (interfaceState == STATE_FREQUENCY) {
  5696  01B5  3002               	movlw	2
  5697  01B6  0678               	xorwf	_interfaceState,w
  5698  01B7  1D03               	btfss	3,2
  5699  01B8  29BA               	goto	u2851
  5700  01B9  29BB               	goto	u2850
  5701  01BA                     u2851:
  5702  01BA  29CE               	goto	l4210
  5703  01BB                     u2850:
  5704  01BB                     l4204:
  5705                           
  5706                           ;main.c: 474:          setFrequency(frequencyValue[1]);
  5707  01BB  0022               	movlb	2	; select bank2
  5708  01BC  0843               	movf	((_frequencyValue+1)^(0+256)+2),w
  5709  01BD  0020               	movlb	0	; select bank0
  5710  01BE  00B8               	movwf	setFrequency@frequency_hz+1
  5711  01BF  0022               	movlb	2	; select bank2
  5712  01C0  0842               	movf	(_frequencyValue^(0+256)+2),w
  5713  01C1  0020               	movlb	0	; select bank0
  5714  01C2  00B7               	movwf	setFrequency@frequency_hz
  5715  01C3  3186  26CF  3180   	fcall	_setFrequency
  5716  01C6                     l4206:
  5717                           
  5718                           ;main.c: 475:          frequencyIndex = 1;
  5719  01C6  3001               	movlw	1
  5720  01C7  0021               	movlb	1	; select bank1
  5721  01C8  00E4               	movwf	_frequencyIndex^(0+128)
  5722  01C9  3000               	movlw	0
  5723  01CA  00E5               	movwf	(_frequencyIndex^(0+128)+1)
  5724  01CB                     l4208:
  5725                           
  5726                           ;main.c: 476:          selectFrequencyValue();
  5727  01CB  318D  250E  3180   	fcall	_selectFrequencyValue
  5728  01CE                     l4210:
  5729                           
  5730                           ;main.c: 478:      if (interfaceState == STATE_CURRENT) {
  5731  01CE  0378               	decf	_interfaceState,w
  5732  01CF  1D03               	btfss	3,2
  5733  01D0  29D2               	goto	u2861
  5734  01D1  29D3               	goto	u2860
  5735  01D2                     u2861:
  5736  01D2  2BA3               	goto	l4334
  5737  01D3                     u2860:
  5738  01D3                     l4212:
  5739                           
  5740                           ;main.c: 479:          setCurrent(currentValue[1], battery_voltage());
  5741  01D3  0021               	movlb	1	; select bank1
  5742  01D4  0843               	movf	((_currentValue+1)^(0+128)+2),w
  5743  01D5  0020               	movlb	0	; select bank0
  5744  01D6  00BA               	movwf	setCurrent@microamps+1
  5745  01D7  0021               	movlb	1	; select bank1
  5746  01D8  0842               	movf	(_currentValue^(0+128)+2),w
  5747  01D9  0020               	movlb	0	; select bank0
  5748  01DA  00B9               	movwf	setCurrent@microamps
  5749  01DB  318E  2613  3180   	fcall	_battery_voltage
  5750  01DE  0020               	movlb	0	; select bank0
  5751  01DF  0838               	movf	?_battery_voltage+1,w
  5752  01E0  00BC               	movwf	setCurrent@Vdd_mv+1
  5753  01E1  0837               	movf	?_battery_voltage,w
  5754  01E2  00BB               	movwf	setCurrent@Vdd_mv
  5755  01E3  3183  23BD  3180   	fcall	_setCurrent
  5756  01E6                     l4214:
  5757                           
  5758                           ;main.c: 480:          currentIndex = 1;
  5759  01E6  3001               	movlw	1
  5760  01E7  0021               	movlb	1	; select bank1
  5761  01E8  00E6               	movwf	_currentIndex^(0+128)
  5762  01E9  3000               	movlw	0
  5763  01EA  00E7               	movwf	(_currentIndex^(0+128)+1)
  5764  01EB  29B1               	goto	l4200
  5765  01EC                     l4218:
  5766                           
  5767                           ;main.c: 489:      if (interfaceState == STATE_FREQUENCY) {
  5768  01EC  3002               	movlw	2
  5769  01ED  0678               	xorwf	_interfaceState,w
  5770  01EE  1D03               	btfss	3,2
  5771  01EF  29F1               	goto	u2871
  5772  01F0  29F2               	goto	u2870
  5773  01F1                     u2871:
  5774  01F1  2A05               	goto	l4226
  5775  01F2                     u2870:
  5776  01F2                     l4220:
  5777                           
  5778                           ;main.c: 490:          setFrequency(frequencyValue[2]);
  5779  01F2  0022               	movlb	2	; select bank2
  5780  01F3  0845               	movf	((_frequencyValue+1)^(0+256)+4),w
  5781  01F4  0020               	movlb	0	; select bank0
  5782  01F5  00B8               	movwf	setFrequency@frequency_hz+1
  5783  01F6  0022               	movlb	2	; select bank2
  5784  01F7  0844               	movf	(_frequencyValue^(0+256)+4),w
  5785  01F8  0020               	movlb	0	; select bank0
  5786  01F9  00B7               	movwf	setFrequency@frequency_hz
  5787  01FA  3186  26CF  3180   	fcall	_setFrequency
  5788  01FD                     l4222:
  5789                           
  5790                           ;main.c: 491:          frequencyIndex = 2;
  5791  01FD  3002               	movlw	2
  5792  01FE  0021               	movlb	1	; select bank1
  5793  01FF  00E4               	movwf	_frequencyIndex^(0+128)
  5794  0200  3000               	movlw	0
  5795  0201  00E5               	movwf	(_frequencyIndex^(0+128)+1)
  5796  0202                     l4224:
  5797                           
  5798                           ;main.c: 492:          selectFrequencyValue();
  5799  0202  318D  250E  3180   	fcall	_selectFrequencyValue
  5800  0205                     l4226:
  5801                           
  5802                           ;main.c: 494:      if (interfaceState == STATE_CURRENT) {
  5803  0205  0378               	decf	_interfaceState,w
  5804  0206  1D03               	btfss	3,2
  5805  0207  2A09               	goto	u2881
  5806  0208  2A0A               	goto	u2880
  5807  0209                     u2881:
  5808  0209  2BA3               	goto	l4334
  5809  020A                     u2880:
  5810  020A                     l4228:
  5811                           
  5812                           ;main.c: 495:          setCurrent(currentValue[2], battery_voltage());
  5813  020A  0021               	movlb	1	; select bank1
  5814  020B  0845               	movf	((_currentValue+1)^(0+128)+4),w
  5815  020C  0020               	movlb	0	; select bank0
  5816  020D  00BA               	movwf	setCurrent@microamps+1
  5817  020E  0021               	movlb	1	; select bank1
  5818  020F  0844               	movf	(_currentValue^(0+128)+4),w
  5819  0210  0020               	movlb	0	; select bank0
  5820  0211  00B9               	movwf	setCurrent@microamps
  5821  0212  318E  2613  3180   	fcall	_battery_voltage
  5822  0215  0020               	movlb	0	; select bank0
  5823  0216  0838               	movf	?_battery_voltage+1,w
  5824  0217  00BC               	movwf	setCurrent@Vdd_mv+1
  5825  0218  0837               	movf	?_battery_voltage,w
  5826  0219  00BB               	movwf	setCurrent@Vdd_mv
  5827  021A  3183  23BD  3180   	fcall	_setCurrent
  5828  021D                     l4230:
  5829                           
  5830                           ;main.c: 496:          currentIndex = 2;
  5831  021D  3002               	movlw	2
  5832  021E  0021               	movlb	1	; select bank1
  5833  021F  00E6               	movwf	_currentIndex^(0+128)
  5834  0220  3000               	movlw	0
  5835  0221  00E7               	movwf	(_currentIndex^(0+128)+1)
  5836  0222  29B1               	goto	l4200
  5837  0223                     l4234:
  5838                           
  5839                           ;main.c: 501:        if (interfaceState == STATE_FREQUENCY) {
  5840  0223  3002               	movlw	2
  5841  0224  0678               	xorwf	_interfaceState,w
  5842  0225  1D03               	btfss	3,2
  5843  0226  2A28               	goto	u2891
  5844  0227  2A29               	goto	u2890
  5845  0228                     u2891:
  5846  0228  2A3C               	goto	l4242
  5847  0229                     u2890:
  5848  0229                     l4236:
  5849                           
  5850                           ;main.c: 502:            setFrequency(frequencyValue[3]);
  5851  0229  0022               	movlb	2	; select bank2
  5852  022A  0847               	movf	((_frequencyValue+1)^(0+256)+6),w
  5853  022B  0020               	movlb	0	; select bank0
  5854  022C  00B8               	movwf	setFrequency@frequency_hz+1
  5855  022D  0022               	movlb	2	; select bank2
  5856  022E  0846               	movf	(_frequencyValue^(0+256)+6),w
  5857  022F  0020               	movlb	0	; select bank0
  5858  0230  00B7               	movwf	setFrequency@frequency_hz
  5859  0231  3186  26CF  3180   	fcall	_setFrequency
  5860  0234                     l4238:
  5861                           
  5862                           ;main.c: 503:            frequencyIndex = 3;
  5863  0234  3003               	movlw	3
  5864  0235  0021               	movlb	1	; select bank1
  5865  0236  00E4               	movwf	_frequencyIndex^(0+128)
  5866  0237  3000               	movlw	0
  5867  0238  00E5               	movwf	(_frequencyIndex^(0+128)+1)
  5868  0239                     l4240:
  5869                           
  5870                           ;main.c: 504:            selectFrequencyValue();
  5871  0239  318D  250E  3180   	fcall	_selectFrequencyValue
  5872  023C                     l4242:
  5873                           
  5874                           ;main.c: 506:        if (interfaceState == STATE_CURRENT) {
  5875  023C  0378               	decf	_interfaceState,w
  5876  023D  1D03               	btfss	3,2
  5877  023E  2A40               	goto	u2901
  5878  023F  2A41               	goto	u2900
  5879  0240                     u2901:
  5880  0240  2BA3               	goto	l4334
  5881  0241                     u2900:
  5882  0241                     l4244:
  5883                           
  5884                           ;main.c: 507:            setCurrent(currentValue[3], battery_voltage());
  5885  0241  0021               	movlb	1	; select bank1
  5886  0242  0847               	movf	((_currentValue+1)^(0+128)+6),w
  5887  0243  0020               	movlb	0	; select bank0
  5888  0244  00BA               	movwf	setCurrent@microamps+1
  5889  0245  0021               	movlb	1	; select bank1
  5890  0246  0846               	movf	(_currentValue^(0+128)+6),w
  5891  0247  0020               	movlb	0	; select bank0
  5892  0248  00B9               	movwf	setCurrent@microamps
  5893  0249  318E  2613  3180   	fcall	_battery_voltage
  5894  024C  0020               	movlb	0	; select bank0
  5895  024D  0838               	movf	?_battery_voltage+1,w
  5896  024E  00BC               	movwf	setCurrent@Vdd_mv+1
  5897  024F  0837               	movf	?_battery_voltage,w
  5898  0250  00BB               	movwf	setCurrent@Vdd_mv
  5899  0251  3183  23BD  3180   	fcall	_setCurrent
  5900  0254                     l4246:
  5901                           
  5902                           ;main.c: 508:            currentIndex = 3;
  5903  0254  3003               	movlw	3
  5904  0255  0021               	movlb	1	; select bank1
  5905  0256  00E6               	movwf	_currentIndex^(0+128)
  5906  0257  3000               	movlw	0
  5907  0258  00E7               	movwf	(_currentIndex^(0+128)+1)
  5908  0259  29B1               	goto	l4200
  5909  025A                     l4250:
  5910                           
  5911                           ;main.c: 513:        if (interfaceState == STATE_FREQUENCY) {
  5912  025A  3002               	movlw	2
  5913  025B  0678               	xorwf	_interfaceState,w
  5914  025C  1D03               	btfss	3,2
  5915  025D  2A5F               	goto	u2911
  5916  025E  2A60               	goto	u2910
  5917  025F                     u2911:
  5918  025F  2A73               	goto	l4258
  5919  0260                     u2910:
  5920  0260                     l4252:
  5921                           
  5922                           ;main.c: 514:            setFrequency(frequencyValue[4]);
  5923  0260  0022               	movlb	2	; select bank2
  5924  0261  0849               	movf	((_frequencyValue+1)^(0+256)+8),w
  5925  0262  0020               	movlb	0	; select bank0
  5926  0263  00B8               	movwf	setFrequency@frequency_hz+1
  5927  0264  0022               	movlb	2	; select bank2
  5928  0265  0848               	movf	(_frequencyValue^(0+256)+8),w
  5929  0266  0020               	movlb	0	; select bank0
  5930  0267  00B7               	movwf	setFrequency@frequency_hz
  5931  0268  3186  26CF  3180   	fcall	_setFrequency
  5932  026B                     l4254:
  5933                           
  5934                           ;main.c: 515:            frequencyIndex = 4;
  5935  026B  3004               	movlw	4
  5936  026C  0021               	movlb	1	; select bank1
  5937  026D  00E4               	movwf	_frequencyIndex^(0+128)
  5938  026E  3000               	movlw	0
  5939  026F  00E5               	movwf	(_frequencyIndex^(0+128)+1)
  5940  0270                     l4256:
  5941                           
  5942                           ;main.c: 516:            selectFrequencyValue();
  5943  0270  318D  250E  3180   	fcall	_selectFrequencyValue
  5944  0273                     l4258:
  5945                           
  5946                           ;main.c: 518:        if (interfaceState == STATE_CURRENT) {
  5947  0273  0378               	decf	_interfaceState,w
  5948  0274  1D03               	btfss	3,2
  5949  0275  2A77               	goto	u2921
  5950  0276  2A78               	goto	u2920
  5951  0277                     u2921:
  5952  0277  2BA3               	goto	l4334
  5953  0278                     u2920:
  5954  0278                     l4260:
  5955                           
  5956                           ;main.c: 519:            setCurrent(currentValue[4], battery_voltage());
  5957  0278  0021               	movlb	1	; select bank1
  5958  0279  0849               	movf	((_currentValue+1)^(0+128)+8),w
  5959  027A  0020               	movlb	0	; select bank0
  5960  027B  00BA               	movwf	setCurrent@microamps+1
  5961  027C  0021               	movlb	1	; select bank1
  5962  027D  0848               	movf	(_currentValue^(0+128)+8),w
  5963  027E  0020               	movlb	0	; select bank0
  5964  027F  00B9               	movwf	setCurrent@microamps
  5965  0280  318E  2613  3180   	fcall	_battery_voltage
  5966  0283  0020               	movlb	0	; select bank0
  5967  0284  0838               	movf	?_battery_voltage+1,w
  5968  0285  00BC               	movwf	setCurrent@Vdd_mv+1
  5969  0286  0837               	movf	?_battery_voltage,w
  5970  0287  00BB               	movwf	setCurrent@Vdd_mv
  5971  0288  3183  23BD  3180   	fcall	_setCurrent
  5972  028B                     l4262:
  5973                           
  5974                           ;main.c: 520:            currentIndex = 4;
  5975  028B  3004               	movlw	4
  5976  028C  0021               	movlb	1	; select bank1
  5977  028D  00E6               	movwf	_currentIndex^(0+128)
  5978  028E  3000               	movlw	0
  5979  028F  00E7               	movwf	(_currentIndex^(0+128)+1)
  5980  0290  29B1               	goto	l4200
  5981  0291                     l4266:
  5982                           
  5983                           ;main.c: 525:        if (interfaceState == STATE_FREQUENCY) {
  5984  0291  3002               	movlw	2
  5985  0292  0678               	xorwf	_interfaceState,w
  5986  0293  1D03               	btfss	3,2
  5987  0294  2A96               	goto	u2931
  5988  0295  2A97               	goto	u2930
  5989  0296                     u2931:
  5990  0296  2AAA               	goto	l4274
  5991  0297                     u2930:
  5992  0297                     l4268:
  5993                           
  5994                           ;main.c: 526:            setFrequency(frequencyValue[5]);
  5995  0297  0022               	movlb	2	; select bank2
  5996  0298  084B               	movf	((_frequencyValue+1)^(0+256)+10),w
  5997  0299  0020               	movlb	0	; select bank0
  5998  029A  00B8               	movwf	setFrequency@frequency_hz+1
  5999  029B  0022               	movlb	2	; select bank2
  6000  029C  084A               	movf	(_frequencyValue^(0+256)+10),w
  6001  029D  0020               	movlb	0	; select bank0
  6002  029E  00B7               	movwf	setFrequency@frequency_hz
  6003  029F  3186  26CF  3180   	fcall	_setFrequency
  6004  02A2                     l4270:
  6005                           
  6006                           ;main.c: 527:            frequencyIndex = 5;
  6007  02A2  3005               	movlw	5
  6008  02A3  0021               	movlb	1	; select bank1
  6009  02A4  00E4               	movwf	_frequencyIndex^(0+128)
  6010  02A5  3000               	movlw	0
  6011  02A6  00E5               	movwf	(_frequencyIndex^(0+128)+1)
  6012  02A7                     l4272:
  6013                           
  6014                           ;main.c: 528:            selectFrequencyValue();
  6015  02A7  318D  250E  3180   	fcall	_selectFrequencyValue
  6016  02AA                     l4274:
  6017                           
  6018                           ;main.c: 530:        if (interfaceState == STATE_CURRENT) {
  6019  02AA  0378               	decf	_interfaceState,w
  6020  02AB  1D03               	btfss	3,2
  6021  02AC  2AAE               	goto	u2941
  6022  02AD  2AAF               	goto	u2940
  6023  02AE                     u2941:
  6024  02AE  2BA3               	goto	l4334
  6025  02AF                     u2940:
  6026  02AF                     l4276:
  6027                           
  6028                           ;main.c: 531:            setCurrent(currentValue[5], battery_voltage());
  6029  02AF  0021               	movlb	1	; select bank1
  6030  02B0  084B               	movf	((_currentValue+1)^(0+128)+10),w
  6031  02B1  0020               	movlb	0	; select bank0
  6032  02B2  00BA               	movwf	setCurrent@microamps+1
  6033  02B3  0021               	movlb	1	; select bank1
  6034  02B4  084A               	movf	(_currentValue^(0+128)+10),w
  6035  02B5  0020               	movlb	0	; select bank0
  6036  02B6  00B9               	movwf	setCurrent@microamps
  6037  02B7  318E  2613  3180   	fcall	_battery_voltage
  6038  02BA  0020               	movlb	0	; select bank0
  6039  02BB  0838               	movf	?_battery_voltage+1,w
  6040  02BC  00BC               	movwf	setCurrent@Vdd_mv+1
  6041  02BD  0837               	movf	?_battery_voltage,w
  6042  02BE  00BB               	movwf	setCurrent@Vdd_mv
  6043  02BF  3183  23BD  3180   	fcall	_setCurrent
  6044  02C2                     l4278:
  6045                           
  6046                           ;main.c: 532:            currentIndex = 5;
  6047  02C2  3005               	movlw	5
  6048  02C3  0021               	movlb	1	; select bank1
  6049  02C4  00E6               	movwf	_currentIndex^(0+128)
  6050  02C5  3000               	movlw	0
  6051  02C6  00E7               	movwf	(_currentIndex^(0+128)+1)
  6052  02C7  29B1               	goto	l4200
  6053  02C8                     l4282:
  6054                           
  6055                           ;main.c: 537:        if (interfaceState == STATE_FREQUENCY) {
  6056  02C8  3002               	movlw	2
  6057  02C9  0678               	xorwf	_interfaceState,w
  6058  02CA  1D03               	btfss	3,2
  6059  02CB  2ACD               	goto	u2951
  6060  02CC  2ACE               	goto	u2950
  6061  02CD                     u2951:
  6062  02CD  2AE1               	goto	l4290
  6063  02CE                     u2950:
  6064  02CE                     l4284:
  6065                           
  6066                           ;main.c: 538:            setFrequency(frequencyValue[6]);
  6067  02CE  0022               	movlb	2	; select bank2
  6068  02CF  084D               	movf	((_frequencyValue+1)^(0+256)+12),w
  6069  02D0  0020               	movlb	0	; select bank0
  6070  02D1  00B8               	movwf	setFrequency@frequency_hz+1
  6071  02D2  0022               	movlb	2	; select bank2
  6072  02D3  084C               	movf	(_frequencyValue^(0+256)+12),w
  6073  02D4  0020               	movlb	0	; select bank0
  6074  02D5  00B7               	movwf	setFrequency@frequency_hz
  6075  02D6  3186  26CF  3180   	fcall	_setFrequency
  6076  02D9                     l4286:
  6077                           
  6078                           ;main.c: 539:            frequencyIndex = 6;
  6079  02D9  3006               	movlw	6
  6080  02DA  0021               	movlb	1	; select bank1
  6081  02DB  00E4               	movwf	_frequencyIndex^(0+128)
  6082  02DC  3000               	movlw	0
  6083  02DD  00E5               	movwf	(_frequencyIndex^(0+128)+1)
  6084  02DE                     l4288:
  6085                           
  6086                           ;main.c: 540:            selectFrequencyValue();
  6087  02DE  318D  250E  3180   	fcall	_selectFrequencyValue
  6088  02E1                     l4290:
  6089                           
  6090                           ;main.c: 542:        if (interfaceState == STATE_CURRENT) {
  6091  02E1  0378               	decf	_interfaceState,w
  6092  02E2  1D03               	btfss	3,2
  6093  02E3  2AE5               	goto	u2961
  6094  02E4  2AE6               	goto	u2960
  6095  02E5                     u2961:
  6096  02E5  2BA3               	goto	l4334
  6097  02E6                     u2960:
  6098  02E6                     l4292:
  6099                           
  6100                           ;main.c: 543:            setCurrent(currentValue[6], battery_voltage());
  6101  02E6  0021               	movlb	1	; select bank1
  6102  02E7  084D               	movf	((_currentValue+1)^(0+128)+12),w
  6103  02E8  0020               	movlb	0	; select bank0
  6104  02E9  00BA               	movwf	setCurrent@microamps+1
  6105  02EA  0021               	movlb	1	; select bank1
  6106  02EB  084C               	movf	(_currentValue^(0+128)+12),w
  6107  02EC  0020               	movlb	0	; select bank0
  6108  02ED  00B9               	movwf	setCurrent@microamps
  6109  02EE  318E  2613  3180   	fcall	_battery_voltage
  6110  02F1  0020               	movlb	0	; select bank0
  6111  02F2  0838               	movf	?_battery_voltage+1,w
  6112  02F3  00BC               	movwf	setCurrent@Vdd_mv+1
  6113  02F4  0837               	movf	?_battery_voltage,w
  6114  02F5  00BB               	movwf	setCurrent@Vdd_mv
  6115  02F6  3183  23BD  3180   	fcall	_setCurrent
  6116  02F9                     l4294:
  6117                           
  6118                           ;main.c: 544:            currentIndex = 6;
  6119  02F9  3006               	movlw	6
  6120  02FA  0021               	movlb	1	; select bank1
  6121  02FB  00E6               	movwf	_currentIndex^(0+128)
  6122  02FC  3000               	movlw	0
  6123  02FD  00E7               	movwf	(_currentIndex^(0+128)+1)
  6124  02FE  29B1               	goto	l4200
  6125  02FF                     l4298:
  6126                           
  6127                           ;main.c: 549:        if (interfaceState == STATE_FREQUENCY) {
  6128  02FF  3002               	movlw	2
  6129  0300  0678               	xorwf	_interfaceState,w
  6130  0301  1D03               	btfss	3,2
  6131  0302  2B04               	goto	u2971
  6132  0303  2B05               	goto	u2970
  6133  0304                     u2971:
  6134  0304  2B18               	goto	l4306
  6135  0305                     u2970:
  6136  0305                     l4300:
  6137                           
  6138                           ;main.c: 550:            setFrequency(frequencyValue[7]);
  6139  0305  0022               	movlb	2	; select bank2
  6140  0306  084F               	movf	((_frequencyValue+1)^(0+256)+14),w
  6141  0307  0020               	movlb	0	; select bank0
  6142  0308  00B8               	movwf	setFrequency@frequency_hz+1
  6143  0309  0022               	movlb	2	; select bank2
  6144  030A  084E               	movf	(_frequencyValue^(0+256)+14),w
  6145  030B  0020               	movlb	0	; select bank0
  6146  030C  00B7               	movwf	setFrequency@frequency_hz
  6147  030D  3186  26CF  3180   	fcall	_setFrequency
  6148  0310                     l4302:
  6149                           
  6150                           ;main.c: 551:            frequencyIndex = 7;
  6151  0310  3007               	movlw	7
  6152  0311  0021               	movlb	1	; select bank1
  6153  0312  00E4               	movwf	_frequencyIndex^(0+128)
  6154  0313  3000               	movlw	0
  6155  0314  00E5               	movwf	(_frequencyIndex^(0+128)+1)
  6156  0315                     l4304:
  6157                           
  6158                           ;main.c: 552:            selectFrequencyValue();
  6159  0315  318D  250E  3180   	fcall	_selectFrequencyValue
  6160  0318                     l4306:
  6161                           
  6162                           ;main.c: 554:        if (interfaceState == STATE_CURRENT) {
  6163  0318  0378               	decf	_interfaceState,w
  6164  0319  1D03               	btfss	3,2
  6165  031A  2B1C               	goto	u2981
  6166  031B  2B1D               	goto	u2980
  6167  031C                     u2981:
  6168  031C  2BA3               	goto	l4334
  6169  031D                     u2980:
  6170  031D                     l4308:
  6171                           
  6172                           ;main.c: 555:            setCurrent(currentValue[7], battery_voltage());
  6173  031D  0021               	movlb	1	; select bank1
  6174  031E  084F               	movf	((_currentValue+1)^(0+128)+14),w
  6175  031F  0020               	movlb	0	; select bank0
  6176  0320  00BA               	movwf	setCurrent@microamps+1
  6177  0321  0021               	movlb	1	; select bank1
  6178  0322  084E               	movf	(_currentValue^(0+128)+14),w
  6179  0323  0020               	movlb	0	; select bank0
  6180  0324  00B9               	movwf	setCurrent@microamps
  6181  0325  318E  2613  3180   	fcall	_battery_voltage
  6182  0328  0020               	movlb	0	; select bank0
  6183  0329  0838               	movf	?_battery_voltage+1,w
  6184  032A  00BC               	movwf	setCurrent@Vdd_mv+1
  6185  032B  0837               	movf	?_battery_voltage,w
  6186  032C  00BB               	movwf	setCurrent@Vdd_mv
  6187  032D  3183  23BD  3180   	fcall	_setCurrent
  6188  0330                     l4310:
  6189                           
  6190                           ;main.c: 556:            currentIndex = 7;
  6191  0330  3007               	movlw	7
  6192  0331  0021               	movlb	1	; select bank1
  6193  0332  00E6               	movwf	_currentIndex^(0+128)
  6194  0333  3000               	movlw	0
  6195  0334  00E7               	movwf	(_currentIndex^(0+128)+1)
  6196  0335  29B1               	goto	l4200
  6197  0336                     l4314:
  6198                           
  6199                           ;main.c: 561:        if (interfaceState == STATE_FREQUENCY) {
  6200  0336  3002               	movlw	2
  6201  0337  0678               	xorwf	_interfaceState,w
  6202  0338  1D03               	btfss	3,2
  6203  0339  2B3B               	goto	u2991
  6204  033A  2B3C               	goto	u2990
  6205  033B                     u2991:
  6206  033B  2B4F               	goto	l4322
  6207  033C                     u2990:
  6208  033C                     l4316:
  6209                           
  6210                           ;main.c: 562:            setFrequency(frequencyValue[8]);
  6211  033C  0022               	movlb	2	; select bank2
  6212  033D  0851               	movf	((_frequencyValue+1)^(0+256)+16),w
  6213  033E  0020               	movlb	0	; select bank0
  6214  033F  00B8               	movwf	setFrequency@frequency_hz+1
  6215  0340  0022               	movlb	2	; select bank2
  6216  0341  0850               	movf	(_frequencyValue^(0+256)+16),w
  6217  0342  0020               	movlb	0	; select bank0
  6218  0343  00B7               	movwf	setFrequency@frequency_hz
  6219  0344  3186  26CF  3180   	fcall	_setFrequency
  6220  0347                     l4318:
  6221                           
  6222                           ;main.c: 563:            frequencyIndex = 8;
  6223  0347  3008               	movlw	8
  6224  0348  0021               	movlb	1	; select bank1
  6225  0349  00E4               	movwf	_frequencyIndex^(0+128)
  6226  034A  3000               	movlw	0
  6227  034B  00E5               	movwf	(_frequencyIndex^(0+128)+1)
  6228  034C                     l4320:
  6229                           
  6230                           ;main.c: 564:            selectFrequencyValue();
  6231  034C  318D  250E  3180   	fcall	_selectFrequencyValue
  6232  034F                     l4322:
  6233                           
  6234                           ;main.c: 566:        if (interfaceState == STATE_CURRENT) {
  6235  034F  0378               	decf	_interfaceState,w
  6236  0350  1D03               	btfss	3,2
  6237  0351  2B53               	goto	u3001
  6238  0352  2B54               	goto	u3000
  6239  0353                     u3001:
  6240  0353  2BA3               	goto	l4334
  6241  0354                     u3000:
  6242  0354                     l4324:
  6243                           
  6244                           ;main.c: 567:            setCurrent(currentValue[8], battery_voltage());
  6245  0354  0021               	movlb	1	; select bank1
  6246  0355  0851               	movf	((_currentValue+1)^(0+128)+16),w
  6247  0356  0020               	movlb	0	; select bank0
  6248  0357  00BA               	movwf	setCurrent@microamps+1
  6249  0358  0021               	movlb	1	; select bank1
  6250  0359  0850               	movf	(_currentValue^(0+128)+16),w
  6251  035A  0020               	movlb	0	; select bank0
  6252  035B  00B9               	movwf	setCurrent@microamps
  6253  035C  318E  2613  3180   	fcall	_battery_voltage
  6254  035F  0020               	movlb	0	; select bank0
  6255  0360  0838               	movf	?_battery_voltage+1,w
  6256  0361  00BC               	movwf	setCurrent@Vdd_mv+1
  6257  0362  0837               	movf	?_battery_voltage,w
  6258  0363  00BB               	movwf	setCurrent@Vdd_mv
  6259  0364  3183  23BD  3180   	fcall	_setCurrent
  6260  0367                     l4326:
  6261                           
  6262                           ;main.c: 568:            currentIndex = 8;
  6263  0367  3008               	movlw	8
  6264  0368  0021               	movlb	1	; select bank1
  6265  0369  00E6               	movwf	_currentIndex^(0+128)
  6266  036A  3000               	movlw	0
  6267  036B  00E7               	movwf	(_currentIndex^(0+128)+1)
  6268  036C  29B1               	goto	l4200
  6269  036D                     l4332:
  6270  036D  0021               	movlb	1	; select bank1
  6271  036E  086A               	movf	process_remote_command@code^(0+128),w
  6272  036F  3E03               	addlw	3
  6273  0370  0086               	movwf	6
  6274  0371  0187               	clrf	7
  6275  0372  0801               	movf	1,w
  6276  0373  00E8               	movwf	??_process_remote_command^(0+128)
  6277  0374  01E9               	clrf	(??_process_remote_command^(0+128)+1)
  6278                           
  6279                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6280                           ; Switch size 1, requested type "simple"
  6281                           ; Number of cases is 1, Range of values is 0 to 0
  6282                           ; switch strategies available:
  6283                           ; Name         Instructions Cycles
  6284                           ; simple_byte            4     3 (average)
  6285                           ; direct_byte            8     6 (fixed)
  6286                           ; jumptable            260     6 (fixed)
  6287                           ;	Chosen strategy is simple_byte
  6288  0375  0869               	movf	(??_process_remote_command+1)^(0+128),w
  6289  0376  3A00               	xorlw	0	; case 0
  6290  0377  1903               	skipnz
  6291  0378  2B7A               	goto	l4482
  6292  0379  2BA3               	goto	l4334
  6293  037A                     l4482:
  6294                           
  6295                           ; Switch size 1, requested type "simple"
  6296                           ; Number of cases is 13, Range of values is 8 to 176
  6297                           ; switch strategies available:
  6298                           ; Name         Instructions Cycles
  6299                           ; simple_byte           40    21 (average)
  6300                           ; jumptable            263     9 (fixed)
  6301                           ;	Chosen strategy is simple_byte
  6302  037A  0868               	movf	??_process_remote_command^(0+128),w
  6303  037B  3A08               	xorlw	8	; case 8
  6304  037C  1903               	skipnz
  6305  037D  297F               	goto	l4186
  6306  037E  3A18               	xorlw	24	; case 16
  6307  037F  1903               	skipnz
  6308  0380  297B               	goto	l4184
  6309  0381  3A08               	xorlw	8	; case 24
  6310  0382  1903               	skipnz
  6311  0383  2AC8               	goto	l4282
  6312  0384  3A30               	xorlw	48	; case 40
  6313  0385  1903               	skipnz
  6314  0386  2A23               	goto	l4234
  6315  0387  3A60               	xorlw	96	; case 72
  6316  0388  1903               	skipnz
  6317  0389  29EC               	goto	l4218
  6318  038A  3A18               	xorlw	24	; case 80
  6319  038B  1903               	skipnz
  6320  038C  2977               	goto	l4182
  6321  038D  3A08               	xorlw	8	; case 88
  6322  038E  1903               	skipnz
  6323  038F  2B36               	goto	l4314
  6324  0390  3A30               	xorlw	48	; case 104
  6325  0391  1903               	skipnz
  6326  0392  2A91               	goto	l4266
  6327  0393  3AE0               	xorlw	224	; case 136
  6328  0394  1903               	skipnz
  6329  0395  29B5               	goto	l4202
  6330  0396  3A10               	xorlw	16	; case 152
  6331  0397  1903               	skipnz
  6332  0398  2AFF               	goto	l4298
  6333  0399  3A38               	xorlw	56	; case 160
  6334  039A  1903               	skipnz
  6335  039B  2890               	goto	l4106
  6336  039C  3A08               	xorlw	8	; case 168
  6337  039D  1903               	skipnz
  6338  039E  2A5A               	goto	l4250
  6339  039F  3A18               	xorlw	24	; case 176
  6340  03A0  1903               	skipnz
  6341  03A1  2911               	goto	l4142
  6342  03A2  2BA3               	goto	l4334
  6343  03A3                     l4334:
  6344                           
  6345                           ;main.c: 576:   setLEDColor(LED_red, LED_green, LED_blue);
  6346  03A3  01F3               	clrf	setLEDColor@green
  6347  03A4  01F4               	clrf	setLEDColor@blue
  6348  03A5  3000               	movlw	0
  6349  03A6  318B  23FB  3180   	fcall	_setLEDColor
  6350  03A9                     l4336:
  6351                           
  6352                           ;main.c: 577:   _delay((unsigned long)((1000)*(4000000/4000.0)));
  6353  03A9  3006               	movlw	6
  6354  03AA  0021               	movlb	1	; select bank1
  6355  03AB  00E9               	movwf	(??_process_remote_command^(0+128)+1)
  6356  03AC  3013               	movlw	19
  6357  03AD  00E8               	movwf	??_process_remote_command^(0+128)
  6358  03AE  30AD               	movlw	173
  6359  03AF                     u3067:
  6360  03AF  0B89               	decfsz	9,f
  6361  03B0  2BAF               	goto	u3067
  6362  03B1  0BE8               	decfsz	??_process_remote_command^(0+128),f
  6363  03B2  2BAF               	goto	u3067
  6364  03B3  0BE9               	decfsz	(??_process_remote_command^(0+128)+1),f
  6365  03B4  2BAF               	goto	u3067
  6366  03B5  3200               	nop2
  6367  03B6                     l4338:
  6368                           
  6369                           ;main.c: 578:   setLEDColor(0, 0, 0);
  6370  03B6  01F3               	clrf	setLEDColor@green
  6371  03B7  01F4               	clrf	setLEDColor@blue
  6372  03B8  3000               	movlw	0
  6373  03B9  318B  23FB  3180   	fcall	_setLEDColor
  6374  03BC                     l751:
  6375  03BC  0008               	return
  6376  03BD                     __end_of_process_remote_command:
  6377                           
  6378                           	psect	text4
  6379  0795                     __ptext4:	
  6380 ;; *************** function _writePersistentState *****************
  6381 ;; Defined at:
  6382 ;;		line 127 in file "main.c"
  6383 ;; Parameters:    Size  Location     Type
  6384 ;;		None
  6385 ;; Auto vars:     Size  Location     Type
  6386 ;;  i               1   78[BANK0 ] unsigned char 
  6387 ;;  buf            64   14[BANK0 ] unsigned short [32]
  6388 ;;  idx             1   79[BANK0 ] unsigned char 
  6389 ;; Return value:  Size  Location     Type
  6390 ;;                  1    wreg      void 
  6391 ;; Registers used:
  6392 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6393 ;; Tracked objects:
  6394 ;;		On entry : 0/0
  6395 ;;		On exit  : 0/0
  6396 ;;		Unchanged: 0/0
  6397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6398 ;;      Params:         0       0       0       0       0       0       0       0
  6399 ;;      Locals:         0      66       0       0       0       0       0       0
  6400 ;;      Temps:          0       4       0       0       0       0       0       0
  6401 ;;      Totals:         0      70       0       0       0       0       0       0
  6402 ;;Total ram usage:       70 bytes
  6403 ;; Hardware stack levels used: 1
  6404 ;; Hardware stack levels required when called: 6
  6405 ;; This function calls:
  6406 ;;		_FLASH_WriteBlock
  6407 ;; This function is called by:
  6408 ;;		_process_remote_command
  6409 ;; This function uses a non-reentrant model
  6410 ;;
  6411                           
  6412                           
  6413                           ;psect for function _writePersistentState
  6414  0795                     _writePersistentState:
  6415  0795                     l3964:	
  6416                           ;incstack = 0
  6417                           ; Regs used in _writePersistentState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6418                           
  6419                           
  6420                           ;main.c: 130:   uint16_t buf[32];;main.c: 131:   for (uint8_t i=0; i<32; i++){
  6421  0795  0020               	movlb	0	; select bank0
  6422  0796  01EE               	clrf	writePersistentState@i
  6423  0797                     l3970:
  6424                           
  6425                           ;main.c: 132:     buf[0] = 0;
  6426  0797  01AE               	clrf	writePersistentState@buf
  6427  0798  01AF               	clrf	writePersistentState@buf+1
  6428  0799                     l3972:
  6429                           
  6430                           ;main.c: 133:   }
  6431  0799  3001               	movlw	1
  6432  079A  00AA               	movwf	??_writePersistentState
  6433  079B  082A               	movf	??_writePersistentState,w
  6434  079C  07EE               	addwf	writePersistentState@i,f
  6435  079D                     l3974:
  6436  079D  3020               	movlw	32
  6437  079E  026E               	subwf	writePersistentState@i,w
  6438  079F  1C03               	skipc
  6439  07A0  2FA2               	goto	u2611
  6440  07A1  2FA3               	goto	u2610
  6441  07A2                     u2611:
  6442  07A2  2F97               	goto	l3970
  6443  07A3                     u2610:
  6444  07A3                     l3976:
  6445                           
  6446                           ;main.c: 136:   uint8_t idx = 0;
  6447  07A3  01EF               	clrf	writePersistentState@idx
  6448  07A4                     l3978:
  6449                           
  6450                           ;main.c: 137:   buf[idx++] = ((uint16_t)(0x3400 | (currentIndex & 0xff)));
  6451  07A4  30FF               	movlw	255
  6452  07A5  0021               	movlb	1	; select bank1
  6453  07A6  0566               	andwf	_currentIndex^(0+128),w
  6454  07A7  0020               	movlb	0	; select bank0
  6455  07A8  00AA               	movwf	??_writePersistentState
  6456  07A9  3000               	movlw	0
  6457  07AA  0021               	movlb	1	; select bank1
  6458  07AB  0567               	andwf	(_currentIndex+1)^(0+128),w
  6459  07AC  0020               	movlb	0	; select bank0
  6460  07AD  00AB               	movwf	??_writePersistentState+1
  6461  07AE  3000               	movlw	0
  6462  07AF  042A               	iorwf	??_writePersistentState,w
  6463  07B0  00AE               	movwf	writePersistentState@buf
  6464  07B1  3034               	movlw	52
  6465  07B2  042B               	iorwf	??_writePersistentState+1,w
  6466  07B3  00AF               	movwf	writePersistentState@buf+1
  6467  07B4                     l3980:
  6468  07B4  3001               	movlw	1
  6469  07B5  00AA               	movwf	??_writePersistentState
  6470  07B6  082A               	movf	??_writePersistentState,w
  6471  07B7  07EF               	addwf	writePersistentState@idx,f
  6472  07B8                     l3982:
  6473                           
  6474                           ;main.c: 138:   buf[idx++] = ((uint16_t)(0x3400 | (frequencyIndex & 0xff)));
  6475  07B8  30FF               	movlw	255
  6476  07B9  0021               	movlb	1	; select bank1
  6477  07BA  0564               	andwf	_frequencyIndex^(0+128),w
  6478  07BB  0020               	movlb	0	; select bank0
  6479  07BC  00AA               	movwf	??_writePersistentState
  6480  07BD  3000               	movlw	0
  6481  07BE  0021               	movlb	1	; select bank1
  6482  07BF  0565               	andwf	(_frequencyIndex+1)^(0+128),w
  6483  07C0  0020               	movlb	0	; select bank0
  6484  07C1  00AB               	movwf	??_writePersistentState+1
  6485  07C2  3000               	movlw	0
  6486  07C3  042A               	iorwf	??_writePersistentState,w
  6487  07C4  00AC               	movwf	??_writePersistentState+2
  6488  07C5  3034               	movlw	52
  6489  07C6  042B               	iorwf	??_writePersistentState+1,w
  6490  07C7  00AD               	movwf	??_writePersistentState+3
  6491  07C8  356F               	lslf	writePersistentState@idx,w
  6492  07C9  3E2E               	addlw	(low (writePersistentState@buf| 0))& (0+255)
  6493  07CA  0086               	movwf	6
  6494  07CB  0187               	clrf	7
  6495  07CC  082C               	movf	??_writePersistentState+2,w
  6496  07CD  3FC0               	movwi [0]fsr1
  6497  07CE  082D               	movf	??_writePersistentState+3,w
  6498  07CF  3FC1               	movwi [1]fsr1
  6499  07D0                     l3984:
  6500  07D0  3001               	movlw	1
  6501  07D1  00AA               	movwf	??_writePersistentState
  6502  07D2  082A               	movf	??_writePersistentState,w
  6503  07D3  07EF               	addwf	writePersistentState@idx,f
  6504  07D4                     l3986:
  6505                           
  6506                           ;main.c: 139:   buf[idx++] = ((uint16_t)(0x3400 | (dc_frequency_flag & 0xff)));
  6507  07D4  3000               	movlw	0
  6508  07D5  047A               	iorwf	_dc_frequency_flag,w
  6509  07D6  00AA               	movwf	??_writePersistentState
  6510  07D7  3034               	movlw	52
  6511  07D8  00AB               	movwf	??_writePersistentState+1
  6512  07D9  356F               	lslf	writePersistentState@idx,w
  6513  07DA  3E2E               	addlw	(low (writePersistentState@buf| 0))& (0+255)
  6514  07DB  0086               	movwf	6
  6515  07DC  0187               	clrf	7
  6516  07DD  082A               	movf	??_writePersistentState,w
  6517  07DE  3FC0               	movwi [0]fsr1
  6518  07DF  082B               	movf	??_writePersistentState+1,w
  6519  07E0  3FC1               	movwi [1]fsr1
  6520  07E1                     l3988:
  6521  07E1  3001               	movlw	1
  6522  07E2  00AA               	movwf	??_writePersistentState
  6523  07E3  082A               	movf	??_writePersistentState,w
  6524  07E4  07EF               	addwf	writePersistentState@idx,f
  6525  07E5                     l3990:
  6526                           
  6527                           ;main.c: 141:   FLASH_WriteBlock((uint16_t)&HEF_persistent_state, buf);
  6528  07E5  30E0               	movlw	224
  6529  07E6  00A0               	movwf	FLASH_WriteBlock@writeAddr
  6530  07E7  300F               	movlw	15
  6531  07E8  00A1               	movwf	FLASH_WriteBlock@writeAddr+1
  6532  07E9  302E               	movlw	(low (writePersistentState@buf| 0))& (0+255)
  6533  07EA  00AA               	movwf	??_writePersistentState
  6534  07EB  082A               	movf	??_writePersistentState,w
  6535  07EC  00A2               	movwf	FLASH_WriteBlock@flashWordArray
  6536  07ED  3185  25F7  3187   	fcall	_FLASH_WriteBlock
  6537  07F0                     l635:
  6538  07F0  0008               	return
  6539  07F1                     __end_of_writePersistentState:
  6540                           
  6541                           	psect	text5
  6542  05F7                     __ptext5:	
  6543 ;; *************** function _FLASH_WriteBlock *****************
  6544 ;; Defined at:
  6545 ;;		line 94 in file "mcc_generated_files/memory.c"
  6546 ;; Parameters:    Size  Location     Type
  6547 ;;  writeAddr       2    0[BANK0 ] unsigned short 
  6548 ;;  flashWordArr    1    2[BANK0 ] PTR unsigned short 
  6549 ;;		 -> writePersistentState@buf(64), 
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;  blockStartAd    2    6[BANK0 ] unsigned short 
  6552 ;;  i               1    9[BANK0 ] unsigned char 
  6553 ;;  GIEBitValue     1    8[BANK0 ] unsigned char 
  6554 ;; Return value:  Size  Location     Type
  6555 ;;                  1    wreg      char 
  6556 ;; Registers used:
  6557 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/0
  6560 ;;		On exit  : 0/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6563 ;;      Params:         0       3       0       0       0       0       0       0
  6564 ;;      Locals:         0       4       0       0       0       0       0       0
  6565 ;;      Temps:          0       3       0       0       0       0       0       0
  6566 ;;      Totals:         0      10       0       0       0       0       0       0
  6567 ;;Total ram usage:       10 bytes
  6568 ;; Hardware stack levels used: 1
  6569 ;; Hardware stack levels required when called: 5
  6570 ;; This function calls:
  6571 ;;		_FLASH_EraseBlock
  6572 ;; This function is called by:
  6573 ;;		_writePersistentState
  6574 ;;		_FLASH_WriteWord
  6575 ;; This function uses a non-reentrant model
  6576 ;;
  6577                           
  6578                           
  6579                           ;psect for function _FLASH_WriteBlock
  6580  05F7                     _FLASH_WriteBlock:
  6581  05F7                     l3798:	
  6582                           ;incstack = 0
  6583                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6584                           
  6585                           
  6586                           ;mcc_generated_files/memory.c: 94: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t 
      +                          *flashWordArray);mcc_generated_files/memory.c: 95: {;mcc_generated_files/memory.c: 96:  
      +                             uint16_t blockStartAddr = (uint16_t )(writeAddr & ((0x1000 -1) ^ (32 -1)));
  6587  05F7  30E0               	movlw	224
  6588  05F8  0020               	movlb	0	; select bank0
  6589  05F9  0520               	andwf	FLASH_WriteBlock@writeAddr,w
  6590  05FA  00A6               	movwf	FLASH_WriteBlock@blockStartAddr
  6591  05FB  300F               	movlw	15
  6592  05FC  0521               	andwf	FLASH_WriteBlock@writeAddr+1,w
  6593  05FD  00A7               	movwf	FLASH_WriteBlock@blockStartAddr+1
  6594  05FE                     l3800:
  6595                           
  6596                           ;mcc_generated_files/memory.c: 97:     uint8_t GIEBitValue = INTCONbits.GIE;
  6597  05FE  3000               	movlw	0
  6598  05FF  1B8B               	btfsc	11,7	;volatile
  6599  0600  3001               	movlw	1
  6600  0601  00A8               	movwf	FLASH_WriteBlock@GIEBitValue
  6601  0602                     l3802:
  6602                           
  6603                           ;mcc_generated_files/memory.c: 98:     uint8_t i;;mcc_generated_files/memory.c: 101:    
      +                           if( writeAddr != blockStartAddr )
  6604  0602  0827               	movf	FLASH_WriteBlock@blockStartAddr+1,w
  6605  0603  0621               	xorwf	FLASH_WriteBlock@writeAddr+1,w
  6606  0604  1D03               	skipz
  6607  0605  2E08               	goto	u2335
  6608  0606  0826               	movf	FLASH_WriteBlock@blockStartAddr,w
  6609  0607  0620               	xorwf	FLASH_WriteBlock@writeAddr,w
  6610  0608                     u2335:
  6611  0608  1903               	skipnz
  6612  0609  2E0B               	goto	u2331
  6613  060A  2E0C               	goto	u2330
  6614  060B                     u2331:
  6615  060B  2E0D               	goto	l467
  6616  060C                     u2330:
  6617  060C  2E62               	goto	l468
  6618  060D                     l467:	
  6619                           ;mcc_generated_files/memory.c: 104:     }
  6620                           
  6621                           
  6622                           ;mcc_generated_files/memory.c: 106:     INTCONbits.GIE = 0;
  6623  060D  138B               	bcf	11,7	;volatile
  6624  060E                     l3806:
  6625                           
  6626                           ;mcc_generated_files/memory.c: 109:     FLASH_EraseBlock(writeAddr);
  6627  060E  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
  6628  060F  00F4               	movwf	FLASH_EraseBlock@startAddr+1
  6629  0610  0820               	movf	FLASH_WriteBlock@writeAddr,w
  6630  0611  00F3               	movwf	FLASH_EraseBlock@startAddr
  6631  0612  318C  2444  3185   	fcall	_FLASH_EraseBlock
  6632  0615                     l3808:
  6633                           
  6634                           ;mcc_generated_files/memory.c: 112:     PMCON1bits.CFGS = 0;
  6635  0615  0023               	movlb	3	; select bank3
  6636  0616  1315               	bcf	21,6	;volatile
  6637  0617                     l3810:
  6638                           
  6639                           ;mcc_generated_files/memory.c: 113:     PMCON1bits.WREN = 1;
  6640  0617  1515               	bsf	21,2	;volatile
  6641  0618                     l3812:
  6642                           
  6643                           ;mcc_generated_files/memory.c: 114:     PMCON1bits.LWLO = 1;
  6644  0618  1695               	bsf	21,5	;volatile
  6645  0619                     l3814:
  6646                           
  6647                           ;mcc_generated_files/memory.c: 116:     for (i=0; i<32; i++)
  6648  0619  0020               	movlb	0	; select bank0
  6649  061A  01A9               	clrf	FLASH_WriteBlock@i
  6650  061B                     l3820:
  6651                           
  6652                           ;mcc_generated_files/memory.c: 117:     {;mcc_generated_files/memory.c: 119:         PMA
      +                          DRL = (writeAddr & 0xFF);
  6653  061B  0820               	movf	FLASH_WriteBlock@writeAddr,w
  6654  061C  0023               	movlb	3	; select bank3
  6655  061D  0091               	movwf	17	;volatile
  6656  061E                     l3822:
  6657                           
  6658                           ;mcc_generated_files/memory.c: 121:         PMADRH = ((writeAddr & 0xFF00) >> 8);
  6659  061E  0020               	movlb	0	; select bank0
  6660  061F  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
  6661  0620  0023               	movlb	3	; select bank3
  6662  0621  0092               	movwf	18	;volatile
  6663  0622                     l3824:
  6664                           
  6665                           ;mcc_generated_files/memory.c: 124:         PMDATL = flashWordArray[i];
  6666  0622  0020               	movlb	0	; select bank0
  6667  0623  3529               	lslf	FLASH_WriteBlock@i,w
  6668  0624  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
  6669  0625  00A3               	movwf	??_FLASH_WriteBlock
  6670  0626  0823               	movf	??_FLASH_WriteBlock,w
  6671  0627  0086               	movwf	6
  6672  0628  0187               	clrf	7
  6673  0629  0801               	movf	1,w
  6674  062A  0023               	movlb	3	; select bank3
  6675  062B  0093               	movwf	19	;volatile
  6676  062C                     l3826:
  6677                           
  6678                           ;mcc_generated_files/memory.c: 125:         PMDATH = ((flashWordArray[i] & 0xFF00) >> 8)
      +                          ;
  6679  062C  0020               	movlb	0	; select bank0
  6680  062D  3529               	lslf	FLASH_WriteBlock@i,w
  6681  062E  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
  6682  062F  00A3               	movwf	??_FLASH_WriteBlock
  6683  0630  0823               	movf	??_FLASH_WriteBlock,w
  6684  0631  0086               	movwf	6
  6685  0632  0187               	clrf	7
  6686  0633  3F40               	moviw [0]fsr1
  6687  0634  00A4               	movwf	??_FLASH_WriteBlock+1
  6688  0635  3F41               	moviw [1]fsr1
  6689  0636  00A5               	movwf	??_FLASH_WriteBlock+2
  6690  0637  0825               	movf	??_FLASH_WriteBlock+2,w
  6691  0638  0023               	movlb	3	; select bank3
  6692  0639  0094               	movwf	20	;volatile
  6693  063A                     l3828:
  6694                           
  6695                           ;mcc_generated_files/memory.c: 127:         if(i == (32 -1))
  6696  063A  301F               	movlw	31
  6697  063B  0020               	movlb	0	; select bank0
  6698  063C  0629               	xorwf	FLASH_WriteBlock@i,w
  6699  063D  1D03               	btfss	3,2
  6700  063E  2E40               	goto	u2341
  6701  063F  2E41               	goto	u2340
  6702  0640                     u2341:
  6703  0640  2E43               	goto	l3832
  6704  0641                     u2340:
  6705  0641                     l3830:
  6706                           
  6707                           ;mcc_generated_files/memory.c: 128:         {;mcc_generated_files/memory.c: 130:        
      +                               PMCON1bits.LWLO = 0;
  6708  0641  0023               	movlb	3	; select bank3
  6709  0642  1295               	bcf	21,5	;volatile
  6710  0643                     l3832:
  6711                           
  6712                           ;mcc_generated_files/memory.c: 133:         PMCON2 = 0x55;
  6713  0643  3055               	movlw	85
  6714  0644  0023               	movlb	3	; select bank3
  6715  0645  0096               	movwf	22	;volsfr
  6716                           
  6717                           ;mcc_generated_files/memory.c: 134:         PMCON2 = 0xAA;
  6718  0646  30AA               	movlw	170
  6719  0647  0096               	movwf	22	;volsfr
  6720  0648                     l3834:
  6721                           
  6722                           ;mcc_generated_files/memory.c: 135:         PMCON1bits.WR = 1;
  6723  0648  1495               	bsf	21,1	;volatile
  6724  0649                     l3836:
  6725                           
  6726                           ;mcc_generated_files/memory.c: 136:         __nop();
  6727  0649  0000               	nop
  6728  064A                     l3838:
  6729                           
  6730                           ;mcc_generated_files/memory.c: 137:         __nop();
  6731  064A  0000               	nop
  6732                           
  6733                           ;mcc_generated_files/memory.c: 139:  writeAddr++;
  6734  064B  3001               	movlw	1
  6735  064C  0020               	movlb	0	; select bank0
  6736  064D  07A0               	addwf	FLASH_WriteBlock@writeAddr,f
  6737  064E  3000               	movlw	0
  6738  064F  3DA1               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  6739  0650                     l3840:
  6740                           
  6741                           ;mcc_generated_files/memory.c: 140:     }
  6742  0650  3001               	movlw	1
  6743  0651  00A3               	movwf	??_FLASH_WriteBlock
  6744  0652  0823               	movf	??_FLASH_WriteBlock,w
  6745  0653  07A9               	addwf	FLASH_WriteBlock@i,f
  6746  0654                     l3842:
  6747  0654  3020               	movlw	32
  6748  0655  0229               	subwf	FLASH_WriteBlock@i,w
  6749  0656  1C03               	skipc
  6750  0657  2E59               	goto	u2351
  6751  0658  2E5A               	goto	u2350
  6752  0659                     u2351:
  6753  0659  2E1B               	goto	l3820
  6754  065A                     u2350:
  6755  065A                     l470:
  6756                           
  6757                           ;mcc_generated_files/memory.c: 142:     PMCON1bits.WREN = 0;
  6758  065A  0023               	movlb	3	; select bank3
  6759  065B  1115               	bcf	21,2	;volatile
  6760  065C                     l3844:
  6761                           
  6762                           ;mcc_generated_files/memory.c: 143:     INTCONbits.GIE = GIEBitValue;
  6763  065C  0020               	movlb	0	; select bank0
  6764  065D  0C28               	rrf	FLASH_WriteBlock@GIEBitValue,w
  6765  065E  1C03               	skipc
  6766  065F  138B               	bcf	11,7	;volatile
  6767  0660  1803               	skipnc
  6768  0661  178B               	bsf	11,7	;volatile
  6769  0662                     l468:
  6770  0662  0008               	return
  6771  0663                     __end_of_FLASH_WriteBlock:
  6772                           
  6773                           	psect	text6
  6774  0C44                     __ptext6:	
  6775 ;; *************** function _FLASH_EraseBlock *****************
  6776 ;; Defined at:
  6777 ;;		line 148 in file "mcc_generated_files/memory.c"
  6778 ;; Parameters:    Size  Location     Type
  6779 ;;  startAddr       2    3[COMMON] unsigned short 
  6780 ;; Auto vars:     Size  Location     Type
  6781 ;;  GIEBitValue     1    5[COMMON] unsigned char 
  6782 ;; Return value:  Size  Location     Type
  6783 ;;                  1    wreg      void 
  6784 ;; Registers used:
  6785 ;;		wreg, status,2, status,0
  6786 ;; Tracked objects:
  6787 ;;		On entry : 0/0
  6788 ;;		On exit  : 0/0
  6789 ;;		Unchanged: 0/0
  6790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6791 ;;      Params:         2       0       0       0       0       0       0       0
  6792 ;;      Locals:         1       0       0       0       0       0       0       0
  6793 ;;      Temps:          0       0       0       0       0       0       0       0
  6794 ;;      Totals:         3       0       0       0       0       0       0       0
  6795 ;;Total ram usage:        3 bytes
  6796 ;; Hardware stack levels used: 1
  6797 ;; Hardware stack levels required when called: 4
  6798 ;; This function calls:
  6799 ;;		Nothing
  6800 ;; This function is called by:
  6801 ;;		_FLASH_WriteBlock
  6802 ;; This function uses a non-reentrant model
  6803 ;;
  6804                           
  6805                           
  6806                           ;psect for function _FLASH_EraseBlock
  6807  0C44                     _FLASH_EraseBlock:
  6808  0C44                     l3760:	
  6809                           ;incstack = 0
  6810                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  6811                           
  6812                           
  6813                           ;mcc_generated_files/memory.c: 148: void FLASH_EraseBlock(uint16_t startAddr);mcc_genera
      +                          ted_files/memory.c: 149: {;mcc_generated_files/memory.c: 150:     uint8_t GIEBitValue = 
      +                          INTCONbits.GIE;
  6814  0C44  3000               	movlw	0
  6815  0C45  1B8B               	btfsc	11,7	;volatile
  6816  0C46  3001               	movlw	1
  6817  0C47  00F5               	movwf	FLASH_EraseBlock@GIEBitValue
  6818  0C48                     l3762:
  6819                           
  6820                           ;mcc_generated_files/memory.c: 153:     INTCONbits.GIE = 0;
  6821  0C48  138B               	bcf	11,7	;volatile
  6822  0C49                     l3764:
  6823                           
  6824                           ;mcc_generated_files/memory.c: 155:     PMADRL = (startAddr & 0xFF);
  6825  0C49  0873               	movf	FLASH_EraseBlock@startAddr,w
  6826  0C4A  0023               	movlb	3	; select bank3
  6827  0C4B  0091               	movwf	17	;volatile
  6828  0C4C                     l3766:
  6829                           
  6830                           ;mcc_generated_files/memory.c: 157:     PMADRH = ((startAddr & 0xFF00) >> 8);
  6831  0C4C  0874               	movf	FLASH_EraseBlock@startAddr+1,w
  6832  0C4D  0092               	movwf	18	;volatile
  6833  0C4E                     l3768:
  6834                           
  6835                           ;mcc_generated_files/memory.c: 160:     PMCON1bits.CFGS = 0;
  6836  0C4E  1315               	bcf	21,6	;volatile
  6837  0C4F                     l3770:
  6838                           
  6839                           ;mcc_generated_files/memory.c: 161:     PMCON1bits.FREE = 1;
  6840  0C4F  1615               	bsf	21,4	;volatile
  6841  0C50                     l3772:
  6842                           
  6843                           ;mcc_generated_files/memory.c: 162:     PMCON1bits.WREN = 1;
  6844  0C50  1515               	bsf	21,2	;volatile
  6845                           
  6846                           ;mcc_generated_files/memory.c: 165:     PMCON2 = 0x55;
  6847  0C51  3055               	movlw	85
  6848  0C52  0096               	movwf	22	;volsfr
  6849                           
  6850                           ;mcc_generated_files/memory.c: 166:     PMCON2 = 0xAA;
  6851  0C53  30AA               	movlw	170
  6852  0C54  0096               	movwf	22	;volsfr
  6853  0C55                     l3774:
  6854                           
  6855                           ;mcc_generated_files/memory.c: 167:     PMCON1bits.WR = 1;
  6856  0C55  1495               	bsf	21,1	;volatile
  6857  0C56                     l3776:
  6858                           
  6859                           ;mcc_generated_files/memory.c: 168:     __nop();
  6860  0C56  0000               	nop
  6861  0C57                     l3778:
  6862                           
  6863                           ;mcc_generated_files/memory.c: 169:     __nop();
  6864  0C57  0000               	nop
  6865  0C58                     l3780:
  6866                           
  6867                           ;mcc_generated_files/memory.c: 171:     PMCON1bits.WREN = 0;
  6868  0C58  0023               	movlb	3	; select bank3
  6869  0C59  1115               	bcf	21,2	;volatile
  6870  0C5A                     l3782:
  6871                           
  6872                           ;mcc_generated_files/memory.c: 172:     INTCONbits.GIE = GIEBitValue;
  6873  0C5A  0C75               	rrf	FLASH_EraseBlock@GIEBitValue,w
  6874  0C5B  1C03               	skipc
  6875  0C5C  138B               	bcf	11,7	;volatile
  6876  0C5D  1803               	skipnc
  6877  0C5E  178B               	bsf	11,7	;volatile
  6878  0C5F                     l474:
  6879  0C5F  0008               	return
  6880  0C60                     __end_of_FLASH_EraseBlock:
  6881                           
  6882                           	psect	text7
  6883  06CF                     __ptext7:	
  6884 ;; *************** function _setFrequency *****************
  6885 ;; Defined at:
  6886 ;;		line 342 in file "main.c"
  6887 ;; Parameters:    Size  Location     Type
  6888 ;;  frequency_hz    2   23[BANK0 ] short 
  6889 ;; Auto vars:     Size  Location     Type
  6890 ;;  PR4_val         2   26[BANK0 ] short 
  6891 ;; Return value:  Size  Location     Type
  6892 ;;                  1    wreg      void 
  6893 ;; Registers used:
  6894 ;;		wreg, status,2, status,0, pclath, cstack
  6895 ;; Tracked objects:
  6896 ;;		On entry : 0/0
  6897 ;;		On exit  : 0/0
  6898 ;;		Unchanged: 0/0
  6899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6900 ;;      Params:         0       2       0       0       0       0       0       0
  6901 ;;      Locals:         0       2       0       0       0       0       0       0
  6902 ;;      Temps:          0       1       0       0       0       0       0       0
  6903 ;;      Totals:         0       5       0       0       0       0       0       0
  6904 ;;Total ram usage:        5 bytes
  6905 ;; Hardware stack levels used: 1
  6906 ;; Hardware stack levels required when called: 5
  6907 ;; This function calls:
  6908 ;;		_TMR4_LoadPeriodRegister
  6909 ;;		___aldiv
  6910 ;;		___lmul
  6911 ;; This function is called by:
  6912 ;;		_process_remote_command
  6913 ;;		_main
  6914 ;; This function uses a non-reentrant model
  6915 ;;
  6916                           
  6917                           
  6918                           ;psect for function _setFrequency
  6919  06CF                     _setFrequency:
  6920  06CF                     l4072:	
  6921                           ;incstack = 0
  6922                           ; Regs used in _setFrequency: [wreg+status,2+status,0+pclath+cstack]
  6923                           
  6924                           
  6925                           ;main.c: 342: void setFrequency(int16_t frequency_hz);main.c: 343: {;main.c: 358:   int1
      +                          6_t PR4_val = 1000000L / (96L * frequency_hz);
  6926  06CF  0020               	movlb	0	; select bank0
  6927  06D0  0837               	movf	setFrequency@frequency_hz,w
  6928  06D1  00A0               	movwf	___lmul@multiplier
  6929  06D2  0838               	movf	setFrequency@frequency_hz+1,w
  6930  06D3  00A1               	movwf	___lmul@multiplier+1
  6931  06D4  0D89               	rlf	9,f
  6932  06D5  3B89               	subwfb	9,f
  6933  06D6  0989               	comf	9,f
  6934  06D7  00A2               	movwf	___lmul@multiplier+2
  6935  06D8  00A3               	movwf	___lmul@multiplier+3
  6936  06D9  3000               	movlw	0
  6937  06DA  00A7               	movwf	___lmul@multiplicand+3
  6938  06DB  3000               	movlw	0
  6939  06DC  00A6               	movwf	___lmul@multiplicand+2
  6940  06DD  3000               	movlw	0
  6941  06DE  00A5               	movwf	___lmul@multiplicand+1
  6942  06DF  3060               	movlw	96
  6943  06E0  00A4               	movwf	___lmul@multiplicand
  6944  06E1  318E  2646  3186   	fcall	___lmul
  6945  06E4  0020               	movlb	0	; select bank0
  6946  06E5  0823               	movf	?___lmul+3,w
  6947  06E6  00AB               	movwf	___aldiv@divisor+3
  6948  06E7  0822               	movf	?___lmul+2,w
  6949  06E8  00AA               	movwf	___aldiv@divisor+2
  6950  06E9  0821               	movf	?___lmul+1,w
  6951  06EA  00A9               	movwf	___aldiv@divisor+1
  6952  06EB  0820               	movf	?___lmul,w
  6953  06EC  00A8               	movwf	___aldiv@divisor
  6954  06ED  3000               	movlw	0
  6955  06EE  00AF               	movwf	___aldiv@dividend+3
  6956  06EF  300F               	movlw	15
  6957  06F0  00AE               	movwf	___aldiv@dividend+2
  6958  06F1  3042               	movlw	66
  6959  06F2  00AD               	movwf	___aldiv@dividend+1
  6960  06F3  3040               	movlw	64
  6961  06F4  00AC               	movwf	___aldiv@dividend
  6962  06F5  3184  2464  3186   	fcall	___aldiv
  6963  06F8  0020               	movlb	0	; select bank0
  6964  06F9  0829               	movf	?___aldiv+1,w
  6965  06FA  00BB               	movwf	setFrequency@PR4_val+1
  6966  06FB  0828               	movf	?___aldiv,w
  6967  06FC  00BA               	movwf	setFrequency@PR4_val
  6968  06FD                     l4074:
  6969                           
  6970                           ;main.c: 359:   if (PR4_val > 255){
  6971  06FD  083B               	movf	setFrequency@PR4_val+1,w
  6972  06FE  3A80               	xorlw	128
  6973  06FF  00B9               	movwf	??_setFrequency
  6974  0700  3081               	movlw	129
  6975  0701  0239               	subwf	??_setFrequency,w
  6976  0702  1D03               	skipz
  6977  0703  2F06               	goto	u2675
  6978  0704  3000               	movlw	0
  6979  0705  023A               	subwf	setFrequency@PR4_val,w
  6980  0706                     u2675:
  6981  0706  1C03               	skipc
  6982  0707  2F09               	goto	u2671
  6983  0708  2F0A               	goto	u2670
  6984  0709                     u2671:
  6985  0709  2F0F               	goto	l694
  6986  070A                     u2670:
  6987  070A                     l4076:
  6988                           
  6989                           ;main.c: 360:     PR4_val = 255;
  6990  070A  30FF               	movlw	255
  6991  070B  0020               	movlb	0	; select bank0
  6992  070C  00BA               	movwf	setFrequency@PR4_val
  6993  070D  3000               	movlw	0
  6994  070E  00BB               	movwf	setFrequency@PR4_val+1
  6995  070F                     l694:	
  6996                           ;main.c: 361:   }
  6997                           
  6998                           
  6999                           ;main.c: 362:   if (PR4_val < 68){
  7000  070F  0020               	movlb	0	; select bank0
  7001  0710  083B               	movf	setFrequency@PR4_val+1,w
  7002  0711  3A80               	xorlw	128
  7003  0712  00B9               	movwf	??_setFrequency
  7004  0713  3080               	movlw	128
  7005  0714  0239               	subwf	??_setFrequency,w
  7006  0715  1D03               	skipz
  7007  0716  2F19               	goto	u2685
  7008  0717  3044               	movlw	68
  7009  0718  023A               	subwf	setFrequency@PR4_val,w
  7010  0719                     u2685:
  7011  0719  1803               	skipnc
  7012  071A  2F1C               	goto	u2681
  7013  071B  2F1D               	goto	u2680
  7014  071C                     u2681:
  7015  071C  2F22               	goto	l4080
  7016  071D                     u2680:
  7017  071D                     l4078:
  7018                           
  7019                           ;main.c: 363:     PR4_val = 68;
  7020  071D  3044               	movlw	68
  7021  071E  0020               	movlb	0	; select bank0
  7022  071F  00BA               	movwf	setFrequency@PR4_val
  7023  0720  3000               	movlw	0
  7024  0721  00BB               	movwf	setFrequency@PR4_val+1
  7025  0722                     l4080:
  7026                           
  7027                           ;main.c: 370:   (INTCONbits.GIE = 0);
  7028  0722  138B               	bcf	11,7	;volatile
  7029  0723                     l4082:
  7030                           
  7031                           ;main.c: 371:   TMR4_LoadPeriodRegister((uint16_t)PR4_val);
  7032  0723  0020               	movlb	0	; select bank0
  7033  0724  083A               	movf	setFrequency@PR4_val,w
  7034  0725  318A  22EA  3186   	fcall	_TMR4_LoadPeriodRegister
  7035  0728                     l4084:
  7036                           
  7037                           ;main.c: 372:   if (0 == frequency_hz){
  7038  0728  0020               	movlb	0	; select bank0
  7039  0729  0837               	movf	setFrequency@frequency_hz,w
  7040  072A  0438               	iorwf	setFrequency@frequency_hz+1,w
  7041  072B  1D03               	btfss	3,2
  7042  072C  2F2E               	goto	u2691
  7043  072D  2F2F               	goto	u2690
  7044  072E                     u2691:
  7045  072E  2F32               	goto	l4088
  7046  072F                     u2690:
  7047  072F                     l4086:
  7048                           
  7049                           ;main.c: 373:     dc_frequency_flag = 1;
  7050  072F  01FA               	clrf	_dc_frequency_flag
  7051  0730  0AFA               	incf	_dc_frequency_flag,f
  7052                           
  7053                           ;main.c: 374:   } else {
  7054  0731  2F33               	goto	l4090
  7055  0732                     l4088:
  7056                           
  7057                           ;main.c: 375:     dc_frequency_flag = 0;
  7058  0732  01FA               	clrf	_dc_frequency_flag
  7059  0733                     l4090:
  7060                           
  7061                           ;main.c: 377:   (INTCONbits.GIE = 1);
  7062  0733  178B               	bsf	11,7	;volatile
  7063  0734                     l698:
  7064  0734  0008               	return
  7065  0735                     __end_of_setFrequency:
  7066                           
  7067                           	psect	text8
  7068  0AEA                     __ptext8:	
  7069 ;; *************** function _TMR4_LoadPeriodRegister *****************
  7070 ;; Defined at:
  7071 ;;		line 115 in file "mcc_generated_files/tmr4.c"
  7072 ;; Parameters:    Size  Location     Type
  7073 ;;  periodVal       1    wreg     unsigned char 
  7074 ;; Auto vars:     Size  Location     Type
  7075 ;;  periodVal       1    3[COMMON] unsigned char 
  7076 ;; Return value:  Size  Location     Type
  7077 ;;                  1    wreg      void 
  7078 ;; Registers used:
  7079 ;;		wreg
  7080 ;; Tracked objects:
  7081 ;;		On entry : 0/0
  7082 ;;		On exit  : 0/0
  7083 ;;		Unchanged: 0/0
  7084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7085 ;;      Params:         0       0       0       0       0       0       0       0
  7086 ;;      Locals:         1       0       0       0       0       0       0       0
  7087 ;;      Temps:          0       0       0       0       0       0       0       0
  7088 ;;      Totals:         1       0       0       0       0       0       0       0
  7089 ;;Total ram usage:        1 bytes
  7090 ;; Hardware stack levels used: 1
  7091 ;; Hardware stack levels required when called: 4
  7092 ;; This function calls:
  7093 ;;		Nothing
  7094 ;; This function is called by:
  7095 ;;		_setFrequency
  7096 ;; This function uses a non-reentrant model
  7097 ;;
  7098                           
  7099                           
  7100                           ;psect for function _TMR4_LoadPeriodRegister
  7101  0AEA                     _TMR4_LoadPeriodRegister:
  7102                           
  7103                           ;incstack = 0
  7104                           ; Regs used in _TMR4_LoadPeriodRegister: [wreg]
  7105                           ;TMR4_LoadPeriodRegister@periodVal stored from wreg
  7106  0AEA  00F3               	movwf	TMR4_LoadPeriodRegister@periodVal
  7107  0AEB                     l3796:
  7108                           
  7109                           ;mcc_generated_files/tmr4.c: 115: void TMR4_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr4.c: 116: {;mcc_generated_files/tmr4.c: 117:    PR4 = periodVal;
  7110  0AEB  0873               	movf	TMR4_LoadPeriodRegister@periodVal,w
  7111  0AEC  0028               	movlb	8	; select bank8
  7112  0AED  0096               	movwf	22	;volatile
  7113  0AEE                     l411:
  7114  0AEE  0008               	return
  7115  0AEF                     __end_of_TMR4_LoadPeriodRegister:
  7116                           
  7117                           	psect	text9
  7118  03BD                     __ptext9:	
  7119 ;; *************** function _setCurrent *****************
  7120 ;; Defined at:
  7121 ;;		line 331 in file "main.c"
  7122 ;; Parameters:    Size  Location     Type
  7123 ;;  microamps       2   25[BANK0 ] int 
  7124 ;;  Vdd_mv          2   27[BANK0 ] int 
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;  DACValue        2   39[BANK0 ] int 
  7127 ;;  Vdac_mv         2   37[BANK0 ] int 
  7128 ;; Return value:  Size  Location     Type
  7129 ;;                  1    wreg      void 
  7130 ;; Registers used:
  7131 ;;		wreg, status,2, status,0, pclath, cstack
  7132 ;; Tracked objects:
  7133 ;;		On entry : 0/0
  7134 ;;		On exit  : 0/0
  7135 ;;		Unchanged: 0/0
  7136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7137 ;;      Params:         0       4       0       0       0       0       0       0
  7138 ;;      Locals:         0       4       0       0       0       0       0       0
  7139 ;;      Temps:          0       8       0       0       0       0       0       0
  7140 ;;      Totals:         0      16       0       0       0       0       0       0
  7141 ;;Total ram usage:       16 bytes
  7142 ;; Hardware stack levels used: 1
  7143 ;; Hardware stack levels required when called: 5
  7144 ;; This function calls:
  7145 ;;		___aldiv
  7146 ;;		___awdiv
  7147 ;;		___lmul
  7148 ;; This function is called by:
  7149 ;;		_process_remote_command
  7150 ;;		_main
  7151 ;; This function uses a non-reentrant model
  7152 ;;
  7153                           
  7154                           
  7155                           ;psect for function _setCurrent
  7156  03BD                     _setCurrent:
  7157  03BD                     l4060:	
  7158                           ;incstack = 0
  7159                           ; Regs used in _setCurrent: [wreg+status,2+status,0+pclath+cstack]
  7160                           
  7161                           
  7162                           ;main.c: 331: void setCurrent(int microamps, int Vdd_mv);main.c: 332: {;main.c: 333:   i
      +                          nt Vdac_mv = Vdd_mv - ((int32_t)(4700) * microamps + 500) / 1000;
  7163  03BD  3000               	movlw	0
  7164  03BE  0020               	movlb	0	; select bank0
  7165  03BF  00AB               	movwf	___aldiv@divisor+3
  7166  03C0  3000               	movlw	0
  7167  03C1  00AA               	movwf	___aldiv@divisor+2
  7168  03C2  3003               	movlw	3
  7169  03C3  00A9               	movwf	___aldiv@divisor+1
  7170  03C4  30E8               	movlw	232
  7171  03C5  00A8               	movwf	___aldiv@divisor
  7172  03C6  30F4               	movlw	244
  7173  03C7  00BD               	movwf	??_setCurrent
  7174  03C8  3001               	movlw	1
  7175  03C9  00BE               	movwf	??_setCurrent+1
  7176  03CA  3000               	movlw	0
  7177  03CB  00BF               	movwf	??_setCurrent+2
  7178  03CC  3000               	movlw	0
  7179  03CD  00C0               	movwf	??_setCurrent+3
  7180  03CE  0839               	movf	setCurrent@microamps,w
  7181  03CF  00A0               	movwf	___lmul@multiplier
  7182  03D0  083A               	movf	setCurrent@microamps+1,w
  7183  03D1  00A1               	movwf	___lmul@multiplier+1
  7184  03D2  0D89               	rlf	9,f
  7185  03D3  3B89               	subwfb	9,f
  7186  03D4  0989               	comf	9,f
  7187  03D5  00A2               	movwf	___lmul@multiplier+2
  7188  03D6  00A3               	movwf	___lmul@multiplier+3
  7189  03D7  3000               	movlw	0
  7190  03D8  00A7               	movwf	___lmul@multiplicand+3
  7191  03D9  3000               	movlw	0
  7192  03DA  00A6               	movwf	___lmul@multiplicand+2
  7193  03DB  3012               	movlw	18
  7194  03DC  00A5               	movwf	___lmul@multiplicand+1
  7195  03DD  305C               	movlw	92
  7196  03DE  00A4               	movwf	___lmul@multiplicand
  7197  03DF  318E  2646  3183   	fcall	___lmul
  7198  03E2  0020               	movlb	0	; select bank0
  7199  03E3  0820               	movf	?___lmul,w
  7200  03E4  07BD               	addwf	??_setCurrent,f
  7201  03E5  0821               	movf	?___lmul+1,w
  7202  03E6  3DBE               	addwfc	??_setCurrent+1,f
  7203  03E7  0822               	movf	?___lmul+2,w
  7204  03E8  3DBF               	addwfc	??_setCurrent+2,f
  7205  03E9  0823               	movf	?___lmul+3,w
  7206  03EA  3DC0               	addwfc	??_setCurrent+3,f
  7207  03EB  0840               	movf	??_setCurrent+3,w
  7208  03EC  00AF               	movwf	___aldiv@dividend+3
  7209  03ED  083F               	movf	??_setCurrent+2,w
  7210  03EE  00AE               	movwf	___aldiv@dividend+2
  7211  03EF  083E               	movf	??_setCurrent+1,w
  7212  03F0  00AD               	movwf	___aldiv@dividend+1
  7213  03F1  083D               	movf	??_setCurrent,w
  7214  03F2  00AC               	movwf	___aldiv@dividend
  7215  03F3  3184  2464  3183   	fcall	___aldiv
  7216  03F6  0020               	movlb	0	; select bank0
  7217  03F7  0828               	movf	?___aldiv,w
  7218  03F8  023B               	subwf	setCurrent@Vdd_mv,w
  7219  03F9  00C5               	movwf	setCurrent@Vdac_mv
  7220  03FA  0829               	movf	?___aldiv+1,w
  7221  03FB  3B3C               	subwfb	setCurrent@Vdd_mv+1,w
  7222  03FC  00C6               	movwf	setCurrent@Vdac_mv+1
  7223                           
  7224                           ;main.c: 334:   int DACValue = (256L * Vdac_mv + Vdd_mv/2) / Vdd_mv;
  7225  03FD  083B               	movf	setCurrent@Vdd_mv,w
  7226  03FE  00A8               	movwf	___aldiv@divisor
  7227  03FF  083C               	movf	setCurrent@Vdd_mv+1,w
  7228  0400  00A9               	movwf	___aldiv@divisor+1
  7229  0401  0D89               	rlf	9,f
  7230  0402  3B89               	subwfb	9,f
  7231  0403  0989               	comf	9,f
  7232  0404  00AA               	movwf	___aldiv@divisor+2
  7233  0405  00AB               	movwf	___aldiv@divisor+3
  7234  0406  3002               	movlw	2
  7235  0407  00F3               	movwf	___awdiv@divisor
  7236  0408  3000               	movlw	0
  7237  0409  00F4               	movwf	___awdiv@divisor+1
  7238  040A  083C               	movf	setCurrent@Vdd_mv+1,w
  7239  040B  00F6               	movwf	___awdiv@dividend+1
  7240  040C  083B               	movf	setCurrent@Vdd_mv,w
  7241  040D  00F5               	movwf	___awdiv@dividend
  7242  040E  3187  2735  3183   	fcall	___awdiv
  7243  0411  0873               	movf	?___awdiv,w
  7244  0412  0020               	movlb	0	; select bank0
  7245  0413  00BD               	movwf	??_setCurrent
  7246  0414  0874               	movf	?___awdiv+1,w
  7247  0415  00BE               	movwf	??_setCurrent+1
  7248  0416  3000               	movlw	0
  7249  0417  1BBE               	btfsc	??_setCurrent+1,7
  7250  0418  30FF               	movlw	255
  7251  0419  00BF               	movwf	??_setCurrent+2
  7252  041A  00C0               	movwf	??_setCurrent+3
  7253  041B  0845               	movf	setCurrent@Vdac_mv,w
  7254  041C  00C1               	movwf	??_setCurrent+4
  7255  041D  0846               	movf	setCurrent@Vdac_mv+1,w
  7256  041E  00C2               	movwf	??_setCurrent+5
  7257  041F  3000               	movlw	0
  7258  0420  1BC2               	btfsc	??_setCurrent+5,7
  7259  0421  30FF               	movlw	255
  7260  0422  00C3               	movwf	??_setCurrent+6
  7261  0423  00C4               	movwf	??_setCurrent+7
  7262  0424  3008               	movlw	8
  7263  0425                     u2645:
  7264  0425  35C1               	lslf	??_setCurrent+4,f
  7265  0426  0DC2               	rlf	??_setCurrent+5,f
  7266  0427  0DC3               	rlf	??_setCurrent+6,f
  7267  0428  0DC4               	rlf	??_setCurrent+7,f
  7268  0429                     u2640:
  7269  0429  0B89               	decfsz	9,f
  7270  042A  2C25               	goto	u2645
  7271  042B  0841               	movf	??_setCurrent+4,w
  7272  042C  07BD               	addwf	??_setCurrent,f
  7273  042D  0842               	movf	??_setCurrent+5,w
  7274  042E  3DBE               	addwfc	??_setCurrent+1,f
  7275  042F  0843               	movf	??_setCurrent+6,w
  7276  0430  3DBF               	addwfc	??_setCurrent+2,f
  7277  0431  0844               	movf	??_setCurrent+7,w
  7278  0432  3DC0               	addwfc	??_setCurrent+3,f
  7279  0433  0840               	movf	??_setCurrent+3,w
  7280  0434  00AF               	movwf	___aldiv@dividend+3
  7281  0435  083F               	movf	??_setCurrent+2,w
  7282  0436  00AE               	movwf	___aldiv@dividend+2
  7283  0437  083E               	movf	??_setCurrent+1,w
  7284  0438  00AD               	movwf	___aldiv@dividend+1
  7285  0439  083D               	movf	??_setCurrent,w
  7286  043A  00AC               	movwf	___aldiv@dividend
  7287  043B  3184  2464  3183   	fcall	___aldiv
  7288  043E  0020               	movlb	0	; select bank0
  7289  043F  0829               	movf	?___aldiv+1,w
  7290  0440  00C8               	movwf	setCurrent@DACValue+1
  7291  0441  0828               	movf	?___aldiv,w
  7292  0442  00C7               	movwf	setCurrent@DACValue
  7293  0443                     l4062:
  7294                           
  7295                           ;main.c: 335:   if(DACValue > 255){DACValue = 255;}
  7296  0443  0848               	movf	setCurrent@DACValue+1,w
  7297  0444  3A80               	xorlw	128
  7298  0445  00BD               	movwf	??_setCurrent
  7299  0446  3081               	movlw	129
  7300  0447  023D               	subwf	??_setCurrent,w
  7301  0448  1D03               	skipz
  7302  0449  2C4C               	goto	u2655
  7303  044A  3000               	movlw	0
  7304  044B  0247               	subwf	setCurrent@DACValue,w
  7305  044C                     u2655:
  7306  044C  1C03               	skipc
  7307  044D  2C4F               	goto	u2651
  7308  044E  2C50               	goto	u2650
  7309  044F                     u2651:
  7310  044F  2C55               	goto	l4066
  7311  0450                     u2650:
  7312  0450                     l4064:
  7313  0450  30FF               	movlw	255
  7314  0451  0020               	movlb	0	; select bank0
  7315  0452  00C7               	movwf	setCurrent@DACValue
  7316  0453  3000               	movlw	0
  7317  0454  00C8               	movwf	setCurrent@DACValue+1
  7318  0455                     l4066:
  7319                           
  7320                           ;main.c: 336:   if(DACValue < 0){DACValue = 0;}
  7321  0455  0020               	movlb	0	; select bank0
  7322  0456  1FC8               	btfss	setCurrent@DACValue+1,7
  7323  0457  2C59               	goto	u2661
  7324  0458  2C5A               	goto	u2660
  7325  0459                     u2661:
  7326  0459  2C5C               	goto	l4070
  7327  045A                     u2660:
  7328  045A                     l4068:
  7329  045A  01C7               	clrf	setCurrent@DACValue
  7330  045B  01C8               	clrf	setCurrent@DACValue+1
  7331  045C                     l4070:
  7332                           
  7333                           ;main.c: 337:   dac_value = (uint16_t)DACValue;
  7334  045C  0848               	movf	setCurrent@DACValue+1,w
  7335  045D  0021               	movlb	1	; select bank1
  7336  045E  00AD               	movwf	(_dac_value+1)^(0+128)
  7337  045F  0020               	movlb	0	; select bank0
  7338  0460  0847               	movf	setCurrent@DACValue,w
  7339  0461  0021               	movlb	1	; select bank1
  7340  0462  00AC               	movwf	_dac_value^(0+128)
  7341  0463                     l691:
  7342  0463  0008               	return
  7343  0464                     __end_of_setCurrent:
  7344                           
  7345                           	psect	text10
  7346  0E46                     __ptext10:	
  7347 ;; *************** function ___lmul *****************
  7348 ;; Defined at:
  7349 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul32.c"
  7350 ;; Parameters:    Size  Location     Type
  7351 ;;  multiplier      4    0[BANK0 ] unsigned long 
  7352 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  7353 ;; Auto vars:     Size  Location     Type
  7354 ;;  product         4    3[COMMON] unsigned long 
  7355 ;; Return value:  Size  Location     Type
  7356 ;;                  4    0[BANK0 ] unsigned long 
  7357 ;; Registers used:
  7358 ;;		wreg, status,2, status,0
  7359 ;; Tracked objects:
  7360 ;;		On entry : 0/0
  7361 ;;		On exit  : 0/0
  7362 ;;		Unchanged: 0/0
  7363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7364 ;;      Params:         0       8       0       0       0       0       0       0
  7365 ;;      Locals:         4       0       0       0       0       0       0       0
  7366 ;;      Temps:          0       0       0       0       0       0       0       0
  7367 ;;      Totals:         4       8       0       0       0       0       0       0
  7368 ;;Total ram usage:       12 bytes
  7369 ;; Hardware stack levels used: 1
  7370 ;; Hardware stack levels required when called: 4
  7371 ;; This function calls:
  7372 ;;		Nothing
  7373 ;; This function is called by:
  7374 ;;		_setCurrent
  7375 ;;		_setFrequency
  7376 ;; This function uses a non-reentrant model
  7377 ;;
  7378                           
  7379                           
  7380                           ;psect for function ___lmul
  7381  0E46                     ___lmul:
  7382  0E46                     l3866:	
  7383                           ;incstack = 0
  7384                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7385                           
  7386  0E46  3000               	movlw	0
  7387  0E47  00F6               	movwf	___lmul@product+3
  7388  0E48  3000               	movlw	0
  7389  0E49  00F5               	movwf	___lmul@product+2
  7390  0E4A  3000               	movlw	0
  7391  0E4B  00F4               	movwf	___lmul@product+1
  7392  0E4C  3000               	movlw	0
  7393  0E4D  00F3               	movwf	___lmul@product
  7394  0E4E                     l3868:
  7395  0E4E  0020               	movlb	0	; select bank0
  7396  0E4F  1C20               	btfss	___lmul@multiplier,0
  7397  0E50  2E52               	goto	u2371
  7398  0E51  2E53               	goto	u2370
  7399  0E52                     u2371:
  7400  0E52  2E5B               	goto	l3872
  7401  0E53                     u2370:
  7402  0E53                     l3870:
  7403  0E53  0824               	movf	___lmul@multiplicand,w
  7404  0E54  07F3               	addwf	___lmul@product,f
  7405  0E55  0825               	movf	___lmul@multiplicand+1,w
  7406  0E56  3DF4               	addwfc	___lmul@product+1,f
  7407  0E57  0826               	movf	___lmul@multiplicand+2,w
  7408  0E58  3DF5               	addwfc	___lmul@product+2,f
  7409  0E59  0827               	movf	___lmul@multiplicand+3,w
  7410  0E5A  3DF6               	addwfc	___lmul@product+3,f
  7411  0E5B                     l3872:
  7412  0E5B  3001               	movlw	1
  7413  0E5C                     u2385:
  7414  0E5C  35A4               	lslf	___lmul@multiplicand,f
  7415  0E5D  0DA5               	rlf	___lmul@multiplicand+1,f
  7416  0E5E  0DA6               	rlf	___lmul@multiplicand+2,f
  7417  0E5F  0DA7               	rlf	___lmul@multiplicand+3,f
  7418  0E60  0B89               	decfsz	9,f
  7419  0E61  2E5C               	goto	u2385
  7420  0E62                     l3874:
  7421  0E62  3001               	movlw	1
  7422  0E63                     u2395:
  7423  0E63  36A3               	lsrf	___lmul@multiplier+3,f
  7424  0E64  0CA2               	rrf	___lmul@multiplier+2,f
  7425  0E65  0CA1               	rrf	___lmul@multiplier+1,f
  7426  0E66  0CA0               	rrf	___lmul@multiplier,f
  7427  0E67  0B89               	decfsz	9,f
  7428  0E68  2E63               	goto	u2395
  7429  0E69  0823               	movf	___lmul@multiplier+3,w
  7430  0E6A  0422               	iorwf	___lmul@multiplier+2,w
  7431  0E6B  0421               	iorwf	___lmul@multiplier+1,w
  7432  0E6C  0420               	iorwf	___lmul@multiplier,w
  7433  0E6D  1D03               	skipz
  7434  0E6E  2E70               	goto	u2401
  7435  0E6F  2E71               	goto	u2400
  7436  0E70                     u2401:
  7437  0E70  2E4E               	goto	l3868
  7438  0E71                     u2400:
  7439  0E71                     l3876:
  7440  0E71  0876               	movf	___lmul@product+3,w
  7441  0E72  00A3               	movwf	?___lmul+3
  7442  0E73  0875               	movf	___lmul@product+2,w
  7443  0E74  00A2               	movwf	?___lmul+2
  7444  0E75  0874               	movf	___lmul@product+1,w
  7445  0E76  00A1               	movwf	?___lmul+1
  7446  0E77  0873               	movf	___lmul@product,w
  7447  0E78  00A0               	movwf	?___lmul
  7448  0E79                     l852:
  7449  0E79  0008               	return
  7450  0E7A                     __end_of___lmul:
  7451                           
  7452                           	psect	text11
  7453  0735                     __ptext11:	
  7454 ;; *************** function ___awdiv *****************
  7455 ;; Defined at:
  7456 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
  7457 ;; Parameters:    Size  Location     Type
  7458 ;;  divisor         2    3[COMMON] int 
  7459 ;;  dividend        2    5[COMMON] int 
  7460 ;; Auto vars:     Size  Location     Type
  7461 ;;  quotient        2    2[BANK0 ] int 
  7462 ;;  sign            1    1[BANK0 ] unsigned char 
  7463 ;;  counter         1    0[BANK0 ] unsigned char 
  7464 ;; Return value:  Size  Location     Type
  7465 ;;                  2    3[COMMON] int 
  7466 ;; Registers used:
  7467 ;;		wreg, status,2, status,0
  7468 ;; Tracked objects:
  7469 ;;		On entry : 0/0
  7470 ;;		On exit  : 0/0
  7471 ;;		Unchanged: 0/0
  7472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7473 ;;      Params:         4       0       0       0       0       0       0       0
  7474 ;;      Locals:         0       4       0       0       0       0       0       0
  7475 ;;      Temps:          1       0       0       0       0       0       0       0
  7476 ;;      Totals:         5       4       0       0       0       0       0       0
  7477 ;;Total ram usage:        9 bytes
  7478 ;; Hardware stack levels used: 1
  7479 ;; Hardware stack levels required when called: 4
  7480 ;; This function calls:
  7481 ;;		Nothing
  7482 ;; This function is called by:
  7483 ;;		_setCurrent
  7484 ;; This function uses a non-reentrant model
  7485 ;;
  7486                           
  7487                           
  7488                           ;psect for function ___awdiv
  7489  0735                     ___awdiv:
  7490  0735                     l3920:	
  7491                           ;incstack = 0
  7492                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7493                           
  7494  0735  0020               	movlb	0	; select bank0
  7495  0736  01A1               	clrf	___awdiv@sign
  7496  0737                     l3922:
  7497  0737  1FF4               	btfss	___awdiv@divisor+1,7
  7498  0738  2F3A               	goto	u2511
  7499  0739  2F3B               	goto	u2510
  7500  073A                     u2511:
  7501  073A  2F42               	goto	l3928
  7502  073B                     u2510:
  7503  073B                     l3924:
  7504  073B  09F3               	comf	___awdiv@divisor,f
  7505  073C  09F4               	comf	___awdiv@divisor+1,f
  7506  073D  0AF3               	incf	___awdiv@divisor,f
  7507  073E  1903               	skipnz
  7508  073F  0AF4               	incf	___awdiv@divisor+1,f
  7509  0740                     l3926:
  7510  0740  01A1               	clrf	___awdiv@sign
  7511  0741  0AA1               	incf	___awdiv@sign,f
  7512  0742                     l3928:
  7513  0742  1FF6               	btfss	___awdiv@dividend+1,7
  7514  0743  2F45               	goto	u2521
  7515  0744  2F46               	goto	u2520
  7516  0745                     u2521:
  7517  0745  2F4F               	goto	l3934
  7518  0746                     u2520:
  7519  0746                     l3930:
  7520  0746  09F5               	comf	___awdiv@dividend,f
  7521  0747  09F6               	comf	___awdiv@dividend+1,f
  7522  0748  0AF5               	incf	___awdiv@dividend,f
  7523  0749  1903               	skipnz
  7524  074A  0AF6               	incf	___awdiv@dividend+1,f
  7525  074B                     l3932:
  7526  074B  3001               	movlw	1
  7527  074C  00F7               	movwf	??___awdiv
  7528  074D  0877               	movf	??___awdiv,w
  7529  074E  06A1               	xorwf	___awdiv@sign,f
  7530  074F                     l3934:
  7531  074F  01A2               	clrf	___awdiv@quotient
  7532  0750  01A3               	clrf	___awdiv@quotient+1
  7533  0751                     l3936:
  7534  0751  0873               	movf	___awdiv@divisor,w
  7535  0752  0474               	iorwf	___awdiv@divisor+1,w
  7536  0753  1903               	btfsc	3,2
  7537  0754  2F56               	goto	u2531
  7538  0755  2F57               	goto	u2530
  7539  0756                     u2531:
  7540  0756  2F86               	goto	l3956
  7541  0757                     u2530:
  7542  0757                     l3938:
  7543  0757  01A0               	clrf	___awdiv@counter
  7544  0758  0AA0               	incf	___awdiv@counter,f
  7545  0759  2F63               	goto	l3944
  7546  075A                     l3940:
  7547  075A  3001               	movlw	1
  7548  075B                     u2545:
  7549  075B  35F3               	lslf	___awdiv@divisor,f
  7550  075C  0DF4               	rlf	___awdiv@divisor+1,f
  7551  075D  0B89               	decfsz	9,f
  7552  075E  2F5B               	goto	u2545
  7553  075F                     l3942:
  7554  075F  3001               	movlw	1
  7555  0760  00F7               	movwf	??___awdiv
  7556  0761  0877               	movf	??___awdiv,w
  7557  0762  07A0               	addwf	___awdiv@counter,f
  7558  0763                     l3944:
  7559  0763  1FF4               	btfss	___awdiv@divisor+1,7
  7560  0764  2F66               	goto	u2551
  7561  0765  2F67               	goto	u2550
  7562  0766                     u2551:
  7563  0766  2F5A               	goto	l3940
  7564  0767                     u2550:
  7565  0767                     l3946:
  7566  0767  3001               	movlw	1
  7567  0768                     u2565:
  7568  0768  35A2               	lslf	___awdiv@quotient,f
  7569  0769  0DA3               	rlf	___awdiv@quotient+1,f
  7570  076A  0B89               	decfsz	9,f
  7571  076B  2F68               	goto	u2565
  7572  076C  0874               	movf	___awdiv@divisor+1,w
  7573  076D  0276               	subwf	___awdiv@dividend+1,w
  7574  076E  1D03               	skipz
  7575  076F  2F72               	goto	u2575
  7576  0770  0873               	movf	___awdiv@divisor,w
  7577  0771  0275               	subwf	___awdiv@dividend,w
  7578  0772                     u2575:
  7579  0772  1C03               	skipc
  7580  0773  2F75               	goto	u2571
  7581  0774  2F76               	goto	u2570
  7582  0775                     u2571:
  7583  0775  2F7B               	goto	l3952
  7584  0776                     u2570:
  7585  0776                     l3948:
  7586  0776  0873               	movf	___awdiv@divisor,w
  7587  0777  02F5               	subwf	___awdiv@dividend,f
  7588  0778  0874               	movf	___awdiv@divisor+1,w
  7589  0779  3BF6               	subwfb	___awdiv@dividend+1,f
  7590  077A                     l3950:
  7591  077A  1422               	bsf	___awdiv@quotient,0
  7592  077B                     l3952:
  7593  077B  3001               	movlw	1
  7594  077C                     u2585:
  7595  077C  36F4               	lsrf	___awdiv@divisor+1,f
  7596  077D  0CF3               	rrf	___awdiv@divisor,f
  7597  077E  0B89               	decfsz	9,f
  7598  077F  2F7C               	goto	u2585
  7599  0780                     l3954:
  7600  0780  3001               	movlw	1
  7601  0781  02A0               	subwf	___awdiv@counter,f
  7602  0782  1D03               	btfss	3,2
  7603  0783  2F85               	goto	u2591
  7604  0784  2F86               	goto	u2590
  7605  0785                     u2591:
  7606  0785  2F67               	goto	l3946
  7607  0786                     u2590:
  7608  0786                     l3956:
  7609  0786  0821               	movf	___awdiv@sign,w
  7610  0787  1903               	btfsc	3,2
  7611  0788  2F8A               	goto	u2601
  7612  0789  2F8B               	goto	u2600
  7613  078A                     u2601:
  7614  078A  2F90               	goto	l3960
  7615  078B                     u2600:
  7616  078B                     l3958:
  7617  078B  09A2               	comf	___awdiv@quotient,f
  7618  078C  09A3               	comf	___awdiv@quotient+1,f
  7619  078D  0AA2               	incf	___awdiv@quotient,f
  7620  078E  1903               	skipnz
  7621  078F  0AA3               	incf	___awdiv@quotient+1,f
  7622  0790                     l3960:
  7623  0790  0823               	movf	___awdiv@quotient+1,w
  7624  0791  00F4               	movwf	?___awdiv+1
  7625  0792  0822               	movf	___awdiv@quotient,w
  7626  0793  00F3               	movwf	?___awdiv
  7627  0794                     l991:
  7628  0794  0008               	return
  7629  0795                     __end_of___awdiv:
  7630                           
  7631                           	psect	text12
  7632  0F85                     __ptext12:	
  7633 ;; *************** function _selectSomething *****************
  7634 ;; Defined at:
  7635 ;;		line 263 in file "main.c"
  7636 ;; Parameters:    Size  Location     Type
  7637 ;;		None
  7638 ;; Auto vars:     Size  Location     Type
  7639 ;;		None
  7640 ;; Return value:  Size  Location     Type
  7641 ;;                  1    wreg      void 
  7642 ;; Registers used:
  7643 ;;		wreg, status,2, status,0, pclath, cstack
  7644 ;; Tracked objects:
  7645 ;;		On entry : 0/0
  7646 ;;		On exit  : 0/0
  7647 ;;		Unchanged: 0/0
  7648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7649 ;;      Params:         0       0       0       0       0       0       0       0
  7650 ;;      Locals:         0       0       0       0       0       0       0       0
  7651 ;;      Temps:          0       2       0       0       0       0       0       0
  7652 ;;      Totals:         0       2       0       0       0       0       0       0
  7653 ;;Total ram usage:        2 bytes
  7654 ;; Hardware stack levels used: 1
  7655 ;; Hardware stack levels required when called: 5
  7656 ;; This function calls:
  7657 ;;		_setLEDColor
  7658 ;; This function is called by:
  7659 ;;		_process_remote_command
  7660 ;; This function uses a non-reentrant model
  7661 ;;
  7662                           
  7663                           
  7664                           ;psect for function _selectSomething
  7665  0F85                     _selectSomething:
  7666  0F85                     l3998:	
  7667                           ;incstack = 0
  7668                           ; Regs used in _selectSomething: [wreg+status,2+status,0+pclath+cstack]
  7669                           
  7670                           
  7671                           ;main.c: 265:   setLEDColor(0, 180, 230);
  7672  0F85  30B4               	movlw	180
  7673  0F86  0020               	movlb	0	; select bank0
  7674  0F87  00A0               	movwf	??_selectSomething
  7675  0F88  0820               	movf	??_selectSomething,w
  7676  0F89  00F3               	movwf	setLEDColor@green
  7677  0F8A  30E6               	movlw	230
  7678  0F8B  00A1               	movwf	??_selectSomething+1
  7679  0F8C  0821               	movf	??_selectSomething+1,w
  7680  0F8D  00F4               	movwf	setLEDColor@blue
  7681  0F8E  3000               	movlw	0
  7682  0F8F  318B  23FB  318F   	fcall	_setLEDColor
  7683  0F92                     l4000:
  7684                           
  7685                           ;main.c: 266:   _delay((unsigned long)((500)*(4000000/4000.0)));
  7686  0F92  3003               	movlw	3
  7687  0F93  0020               	movlb	0	; select bank0
  7688  0F94  00A1               	movwf	??_selectSomething+1
  7689  0F95  308A               	movlw	138
  7690  0F96  00A0               	movwf	??_selectSomething
  7691  0F97  3055               	movlw	85
  7692  0F98                     u3077:
  7693  0F98  0B89               	decfsz	9,f
  7694  0F99  2F98               	goto	u3077
  7695  0F9A  0BA0               	decfsz	??_selectSomething,f
  7696  0F9B  2F98               	goto	u3077
  7697  0F9C  0BA1               	decfsz	??_selectSomething+1,f
  7698  0F9D  2F98               	goto	u3077
  7699  0F9E  3200               	nop2
  7700  0F9F                     l4002:
  7701                           
  7702                           ;main.c: 267:   setLEDColor(0, 0, 0);
  7703  0F9F  01F3               	clrf	setLEDColor@green
  7704  0FA0  01F4               	clrf	setLEDColor@blue
  7705  0FA1  3000               	movlw	0
  7706  0FA2  318B  23FB  318F   	fcall	_setLEDColor
  7707                           
  7708                           ;main.c: 268:   _delay((unsigned long)((500)*(4000000/4000.0)));
  7709  0FA5  3003               	movlw	3
  7710  0FA6  0020               	movlb	0	; select bank0
  7711  0FA7  00A1               	movwf	??_selectSomething+1
  7712  0FA8  308A               	movlw	138
  7713  0FA9  00A0               	movwf	??_selectSomething
  7714  0FAA  3055               	movlw	85
  7715  0FAB                     u3087:
  7716  0FAB  0B89               	decfsz	9,f
  7717  0FAC  2FAB               	goto	u3087
  7718  0FAD  0BA0               	decfsz	??_selectSomething,f
  7719  0FAE  2FAB               	goto	u3087
  7720  0FAF  0BA1               	decfsz	??_selectSomething+1,f
  7721  0FB0  2FAB               	goto	u3087
  7722  0FB1  3200               	nop2
  7723  0FB2                     l4004:
  7724                           
  7725                           ;main.c: 269:   setLEDColor(0, 180, 230);
  7726  0FB2  30B4               	movlw	180
  7727  0FB3  0020               	movlb	0	; select bank0
  7728  0FB4  00A0               	movwf	??_selectSomething
  7729  0FB5  0820               	movf	??_selectSomething,w
  7730  0FB6  00F3               	movwf	setLEDColor@green
  7731  0FB7  30E6               	movlw	230
  7732  0FB8  00A1               	movwf	??_selectSomething+1
  7733  0FB9  0821               	movf	??_selectSomething+1,w
  7734  0FBA  00F4               	movwf	setLEDColor@blue
  7735  0FBB  3000               	movlw	0
  7736  0FBC  318B  23FB  318F   	fcall	_setLEDColor
  7737  0FBF                     l4006:
  7738                           
  7739                           ;main.c: 270:   _delay((unsigned long)((500)*(4000000/4000.0)));
  7740  0FBF  3003               	movlw	3
  7741  0FC0  0020               	movlb	0	; select bank0
  7742  0FC1  00A1               	movwf	??_selectSomething+1
  7743  0FC2  308A               	movlw	138
  7744  0FC3  00A0               	movwf	??_selectSomething
  7745  0FC4  3055               	movlw	85
  7746  0FC5                     u3097:
  7747  0FC5  0B89               	decfsz	9,f
  7748  0FC6  2FC5               	goto	u3097
  7749  0FC7  0BA0               	decfsz	??_selectSomething,f
  7750  0FC8  2FC5               	goto	u3097
  7751  0FC9  0BA1               	decfsz	??_selectSomething+1,f
  7752  0FCA  2FC5               	goto	u3097
  7753  0FCB  3200               	nop2
  7754                           
  7755                           ;main.c: 271:   setLEDColor(0, 0, 0);
  7756  0FCC  01F3               	clrf	setLEDColor@green
  7757  0FCD  01F4               	clrf	setLEDColor@blue
  7758  0FCE  3000               	movlw	0
  7759  0FCF  318B  23FB  318F   	fcall	_setLEDColor
  7760  0FD2                     l4008:
  7761                           
  7762                           ;main.c: 272:   _delay((unsigned long)((500)*(4000000/4000.0)));
  7763  0FD2  3003               	movlw	3
  7764  0FD3  0020               	movlb	0	; select bank0
  7765  0FD4  00A1               	movwf	??_selectSomething+1
  7766  0FD5  308A               	movlw	138
  7767  0FD6  00A0               	movwf	??_selectSomething
  7768  0FD7  3055               	movlw	85
  7769  0FD8                     u3107:
  7770  0FD8  0B89               	decfsz	9,f
  7771  0FD9  2FD8               	goto	u3107
  7772  0FDA  0BA0               	decfsz	??_selectSomething,f
  7773  0FDB  2FD8               	goto	u3107
  7774  0FDC  0BA1               	decfsz	??_selectSomething+1,f
  7775  0FDD  2FD8               	goto	u3107
  7776  0FDE  3200               	nop2
  7777  0FDF                     l663:
  7778  0FDF  0008               	return
  7779  0FE0                     __end_of_selectSomething:
  7780                           
  7781                           	psect	text13
  7782  0CE9                     __ptext13:	
  7783 ;; *************** function _selectIncrease *****************
  7784 ;; Defined at:
  7785 ;;		line 291 in file "main.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;		None
  7788 ;; Auto vars:     Size  Location     Type
  7789 ;;		None
  7790 ;; Return value:  Size  Location     Type
  7791 ;;                  1    wreg      void 
  7792 ;; Registers used:
  7793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7799 ;;      Params:         0       0       0       0       0       0       0       0
  7800 ;;      Locals:         0       0       0       0       0       0       0       0
  7801 ;;      Temps:          0       2       0       0       0       0       0       0
  7802 ;;      Totals:         0       2       0       0       0       0       0       0
  7803 ;;Total ram usage:        2 bytes
  7804 ;; Hardware stack levels used: 1
  7805 ;; Hardware stack levels required when called: 10
  7806 ;; This function calls:
  7807 ;;		_printf
  7808 ;;		_setLEDColor
  7809 ;; This function is called by:
  7810 ;;		_process_remote_command
  7811 ;; This function uses a non-reentrant model
  7812 ;;
  7813                           
  7814                           
  7815                           ;psect for function _selectIncrease
  7816  0CE9                     _selectIncrease:
  7817  0CE9                     l4028:	
  7818                           ;incstack = 0
  7819                           ; Regs used in _selectIncrease: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7820                           
  7821                           
  7822                           ;main.c: 292:   setLEDColor(0, 50, 255);
  7823  0CE9  3032               	movlw	50
  7824  0CEA  0020               	movlb	0	; select bank0
  7825  0CEB  00B9               	movwf	??_selectIncrease
  7826  0CEC  0839               	movf	??_selectIncrease,w
  7827  0CED  00F3               	movwf	setLEDColor@green
  7828  0CEE  30FF               	movlw	255
  7829  0CEF  00BA               	movwf	??_selectIncrease+1
  7830  0CF0  083A               	movf	??_selectIncrease+1,w
  7831  0CF1  00F4               	movwf	setLEDColor@blue
  7832  0CF2  3000               	movlw	0
  7833  0CF3  318B  23FB  318C   	fcall	_setLEDColor
  7834  0CF6                     l4030:
  7835                           
  7836                           ;main.c: 293:   _delay((unsigned long)((100)*(4000000/4000.0)));
  7837  0CF6  3082               	movlw	130
  7838  0CF7  0020               	movlb	0	; select bank0
  7839  0CF8  00B9               	movwf	??_selectIncrease
  7840  0CF9  30DD               	movlw	221
  7841  0CFA                     u3117:
  7842  0CFA  0B89               	decfsz	9,f
  7843  0CFB  2CFA               	goto	u3117
  7844  0CFC  0BB9               	decfsz	??_selectIncrease,f
  7845  0CFD  2CFA               	goto	u3117
  7846  0CFE  3200               	nop2
  7847  0CFF                     l4032:
  7848                           
  7849                           ;main.c: 294:   setLEDColor(0, 0, 0);
  7850  0CFF  01F3               	clrf	setLEDColor@green
  7851  0D00  01F4               	clrf	setLEDColor@blue
  7852  0D01  3000               	movlw	0
  7853  0D02  318B  23FB  318C   	fcall	_setLEDColor
  7854  0D05                     l4034:
  7855                           
  7856                           ;main.c: 295:   printf("\n increase selected");
  7857  0D05  304A               	movlw	low (STR_3| (0+32768))
  7858  0D06  0020               	movlb	0	; select bank0
  7859  0D07  00B5               	movwf	printf@fmt
  7860  0D08  3088               	movlw	high (STR_3| (0+32768))
  7861  0D09  00B6               	movwf	printf@fmt+1
  7862  0D0A  318B  23AB  318C   	fcall	_printf
  7863  0D0D                     l672:
  7864  0D0D  0008               	return
  7865  0D0E                     __end_of_selectIncrease:
  7866                           
  7867                           	psect	text14
  7868  0D0E                     __ptext14:	
  7869 ;; *************** function _selectFrequencyValue *****************
  7870 ;; Defined at:
  7871 ;;		line 319 in file "main.c"
  7872 ;; Parameters:    Size  Location     Type
  7873 ;;		None
  7874 ;; Auto vars:     Size  Location     Type
  7875 ;;		None
  7876 ;; Return value:  Size  Location     Type
  7877 ;;                  1    wreg      void 
  7878 ;; Registers used:
  7879 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7880 ;; Tracked objects:
  7881 ;;		On entry : 0/0
  7882 ;;		On exit  : 0/0
  7883 ;;		Unchanged: 0/0
  7884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7885 ;;      Params:         0       0       0       0       0       0       0       0
  7886 ;;      Locals:         0       0       0       0       0       0       0       0
  7887 ;;      Temps:          0       2       0       0       0       0       0       0
  7888 ;;      Totals:         0       2       0       0       0       0       0       0
  7889 ;;Total ram usage:        2 bytes
  7890 ;; Hardware stack levels used: 1
  7891 ;; Hardware stack levels required when called: 10
  7892 ;; This function calls:
  7893 ;;		_printf
  7894 ;;		_setLEDColor
  7895 ;; This function is called by:
  7896 ;;		_process_remote_command
  7897 ;; This function uses a non-reentrant model
  7898 ;;
  7899                           
  7900                           
  7901                           ;psect for function _selectFrequencyValue
  7902  0D0E                     _selectFrequencyValue:
  7903  0D0E                     l4052:	
  7904                           ;incstack = 0
  7905                           ; Regs used in _selectFrequencyValue: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7906                           
  7907                           
  7908                           ;main.c: 320:     setLEDColor(100, 0, 255);
  7909  0D0E  01F3               	clrf	setLEDColor@green
  7910  0D0F  30FF               	movlw	255
  7911  0D10  0020               	movlb	0	; select bank0
  7912  0D11  00B9               	movwf	??_selectFrequencyValue
  7913  0D12  0839               	movf	??_selectFrequencyValue,w
  7914  0D13  00F4               	movwf	setLEDColor@blue
  7915  0D14  3064               	movlw	100
  7916  0D15  318B  23FB  318D   	fcall	_setLEDColor
  7917  0D18                     l4054:
  7918                           
  7919                           ;main.c: 321:     _delay((unsigned long)((500)*(4000000/4000.0)));
  7920  0D18  3003               	movlw	3
  7921  0D19  0020               	movlb	0	; select bank0
  7922  0D1A  00BA               	movwf	??_selectFrequencyValue+1
  7923  0D1B  308A               	movlw	138
  7924  0D1C  00B9               	movwf	??_selectFrequencyValue
  7925  0D1D  3055               	movlw	85
  7926  0D1E                     u3127:
  7927  0D1E  0B89               	decfsz	9,f
  7928  0D1F  2D1E               	goto	u3127
  7929  0D20  0BB9               	decfsz	??_selectFrequencyValue,f
  7930  0D21  2D1E               	goto	u3127
  7931  0D22  0BBA               	decfsz	??_selectFrequencyValue+1,f
  7932  0D23  2D1E               	goto	u3127
  7933  0D24  3200               	nop2
  7934  0D25                     l4056:
  7935                           
  7936                           ;main.c: 322:     setLEDColor(0,0,0);
  7937  0D25  01F3               	clrf	setLEDColor@green
  7938  0D26  01F4               	clrf	setLEDColor@blue
  7939  0D27  3000               	movlw	0
  7940  0D28  318B  23FB  318D   	fcall	_setLEDColor
  7941  0D2B                     l4058:
  7942                           
  7943                           ;main.c: 323:     printf("\n current value selected");
  7944  0D2B  30F1               	movlw	low (STR_6| (0+32768))
  7945  0D2C  0020               	movlb	0	; select bank0
  7946  0D2D  00B5               	movwf	printf@fmt
  7947  0D2E  3087               	movlw	high (STR_6| (0+32768))
  7948  0D2F  00B6               	movwf	printf@fmt+1
  7949  0D30  318B  23AB  318D   	fcall	_printf
  7950  0D33                     l684:
  7951  0D33  0008               	return
  7952  0D34                     __end_of_selectFrequencyValue:
  7953                           
  7954                           	psect	text15
  7955  0D85                     __ptext15:	
  7956 ;; *************** function _selectFrequency *****************
  7957 ;; Defined at:
  7958 ;;		line 275 in file "main.c"
  7959 ;; Parameters:    Size  Location     Type
  7960 ;;		None
  7961 ;; Auto vars:     Size  Location     Type
  7962 ;;		None
  7963 ;; Return value:  Size  Location     Type
  7964 ;;                  1    wreg      void 
  7965 ;; Registers used:
  7966 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7967 ;; Tracked objects:
  7968 ;;		On entry : 0/0
  7969 ;;		On exit  : 0/0
  7970 ;;		Unchanged: 0/0
  7971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7972 ;;      Params:         0       0       0       0       0       0       0       0
  7973 ;;      Locals:         0       0       0       0       0       0       0       0
  7974 ;;      Temps:          0       2       0       0       0       0       0       0
  7975 ;;      Totals:         0       2       0       0       0       0       0       0
  7976 ;;Total ram usage:        2 bytes
  7977 ;; Hardware stack levels used: 1
  7978 ;; Hardware stack levels required when called: 10
  7979 ;; This function calls:
  7980 ;;		_printf
  7981 ;;		_setLEDColor
  7982 ;; This function is called by:
  7983 ;;		_process_remote_command
  7984 ;; This function uses a non-reentrant model
  7985 ;;
  7986                           
  7987                           
  7988                           ;psect for function _selectFrequency
  7989  0D85                     _selectFrequency:
  7990  0D85                     l4010:	
  7991                           ;incstack = 0
  7992                           ; Regs used in _selectFrequency: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7993                           
  7994                           
  7995                           ;main.c: 276:   interfaceState = STATE_FREQUENCY;
  7996  0D85  3002               	movlw	2
  7997  0D86  0020               	movlb	0	; select bank0
  7998  0D87  00B9               	movwf	??_selectFrequency
  7999  0D88  0839               	movf	??_selectFrequency,w
  8000  0D89  00F8               	movwf	_interfaceState
  8001  0D8A                     l4012:
  8002                           
  8003                           ;main.c: 277:   setLEDColor(0, 150, 0);
  8004  0D8A  3096               	movlw	150
  8005  0D8B  00B9               	movwf	??_selectFrequency
  8006  0D8C  0839               	movf	??_selectFrequency,w
  8007  0D8D  00F3               	movwf	setLEDColor@green
  8008  0D8E  01F4               	clrf	setLEDColor@blue
  8009  0D8F  3000               	movlw	0
  8010  0D90  318B  23FB  318D   	fcall	_setLEDColor
  8011  0D93                     l4014:
  8012                           
  8013                           ;main.c: 278:   _delay((unsigned long)((1000)*(4000000/4000.0)));
  8014  0D93  3006               	movlw	6
  8015  0D94  0020               	movlb	0	; select bank0
  8016  0D95  00BA               	movwf	??_selectFrequency+1
  8017  0D96  3013               	movlw	19
  8018  0D97  00B9               	movwf	??_selectFrequency
  8019  0D98  30AD               	movlw	173
  8020  0D99                     u3137:
  8021  0D99  0B89               	decfsz	9,f
  8022  0D9A  2D99               	goto	u3137
  8023  0D9B  0BB9               	decfsz	??_selectFrequency,f
  8024  0D9C  2D99               	goto	u3137
  8025  0D9D  0BBA               	decfsz	??_selectFrequency+1,f
  8026  0D9E  2D99               	goto	u3137
  8027  0D9F  3200               	nop2
  8028                           
  8029                           ;main.c: 279:   setLEDColor(0, 0, 0);
  8030  0DA0  01F3               	clrf	setLEDColor@green
  8031  0DA1  01F4               	clrf	setLEDColor@blue
  8032  0DA2  3000               	movlw	0
  8033  0DA3  318B  23FB  318D   	fcall	_setLEDColor
  8034  0DA6                     l4016:
  8035                           
  8036                           ;main.c: 280:   printf("\n Frequency selected");
  8037  0DA6  3021               	movlw	low (STR_1| (0+32768))
  8038  0DA7  0020               	movlb	0	; select bank0
  8039  0DA8  00B5               	movwf	printf@fmt
  8040  0DA9  3088               	movlw	high (STR_1| (0+32768))
  8041  0DAA  00B6               	movwf	printf@fmt+1
  8042  0DAB  318B  23AB  318D   	fcall	_printf
  8043  0DAE                     l666:
  8044  0DAE  0008               	return
  8045  0DAF                     __end_of_selectFrequency:
  8046                           
  8047                           	psect	text16
  8048  0CA2                     __ptext16:	
  8049 ;; *************** function _selectDecrease *****************
  8050 ;; Defined at:
  8051 ;;		line 298 in file "main.c"
  8052 ;; Parameters:    Size  Location     Type
  8053 ;;		None
  8054 ;; Auto vars:     Size  Location     Type
  8055 ;;		None
  8056 ;; Return value:  Size  Location     Type
  8057 ;;                  1    wreg      void 
  8058 ;; Registers used:
  8059 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8060 ;; Tracked objects:
  8061 ;;		On entry : 0/0
  8062 ;;		On exit  : 0/0
  8063 ;;		Unchanged: 0/0
  8064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8065 ;;      Params:         0       0       0       0       0       0       0       0
  8066 ;;      Locals:         0       0       0       0       0       0       0       0
  8067 ;;      Temps:          0       1       0       0       0       0       0       0
  8068 ;;      Totals:         0       1       0       0       0       0       0       0
  8069 ;;Total ram usage:        1 bytes
  8070 ;; Hardware stack levels used: 1
  8071 ;; Hardware stack levels required when called: 10
  8072 ;; This function calls:
  8073 ;;		_printf
  8074 ;;		_setLEDColor
  8075 ;; This function is called by:
  8076 ;;		_process_remote_command
  8077 ;; This function uses a non-reentrant model
  8078 ;;
  8079                           
  8080                           
  8081                           ;psect for function _selectDecrease
  8082  0CA2                     _selectDecrease:
  8083  0CA2                     l4036:	
  8084                           ;incstack = 0
  8085                           ; Regs used in _selectDecrease: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8086                           
  8087                           
  8088                           ;main.c: 299:   setLEDColor(130, 160, 0);
  8089  0CA2  30A0               	movlw	160
  8090  0CA3  0020               	movlb	0	; select bank0
  8091  0CA4  00B9               	movwf	??_selectDecrease
  8092  0CA5  0839               	movf	??_selectDecrease,w
  8093  0CA6  00F3               	movwf	setLEDColor@green
  8094  0CA7  01F4               	clrf	setLEDColor@blue
  8095  0CA8  3082               	movlw	130
  8096  0CA9  318B  23FB  318C   	fcall	_setLEDColor
  8097  0CAC                     l4038:
  8098                           
  8099                           ;main.c: 300:   _delay((unsigned long)((100)*(4000000/4000.0)));
  8100  0CAC  3082               	movlw	130
  8101  0CAD  0020               	movlb	0	; select bank0
  8102  0CAE  00B9               	movwf	??_selectDecrease
  8103  0CAF  30DD               	movlw	221
  8104  0CB0                     u3147:
  8105  0CB0  0B89               	decfsz	9,f
  8106  0CB1  2CB0               	goto	u3147
  8107  0CB2  0BB9               	decfsz	??_selectDecrease,f
  8108  0CB3  2CB0               	goto	u3147
  8109  0CB4  3200               	nop2
  8110  0CB5                     l4040:
  8111                           
  8112                           ;main.c: 301:   setLEDColor(0, 0, 0);
  8113  0CB5  01F3               	clrf	setLEDColor@green
  8114  0CB6  01F4               	clrf	setLEDColor@blue
  8115  0CB7  3000               	movlw	0
  8116  0CB8  318B  23FB  318C   	fcall	_setLEDColor
  8117  0CBB                     l4042:
  8118                           
  8119                           ;main.c: 302:   printf("\n decrease selected");
  8120  0CBB  3036               	movlw	low (STR_4| (0+32768))
  8121  0CBC  0020               	movlb	0	; select bank0
  8122  0CBD  00B5               	movwf	printf@fmt
  8123  0CBE  3088               	movlw	high (STR_4| (0+32768))
  8124  0CBF  00B6               	movwf	printf@fmt+1
  8125  0CC0  318B  23AB  318C   	fcall	_printf
  8126  0CC3                     l675:
  8127  0CC3  0008               	return
  8128  0CC4                     __end_of_selectDecrease:
  8129                           
  8130                           	psect	text17
  8131  0D5C                     __ptext17:	
  8132 ;; *************** function _selectCurrentValue *****************
  8133 ;; Defined at:
  8134 ;;		line 312 in file "main.c"
  8135 ;; Parameters:    Size  Location     Type
  8136 ;;		None
  8137 ;; Auto vars:     Size  Location     Type
  8138 ;;		None
  8139 ;; Return value:  Size  Location     Type
  8140 ;;                  1    wreg      void 
  8141 ;; Registers used:
  8142 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8143 ;; Tracked objects:
  8144 ;;		On entry : 0/0
  8145 ;;		On exit  : 0/0
  8146 ;;		Unchanged: 0/0
  8147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8148 ;;      Params:         0       0       0       0       0       0       0       0
  8149 ;;      Locals:         0       0       0       0       0       0       0       0
  8150 ;;      Temps:          0       2       0       0       0       0       0       0
  8151 ;;      Totals:         0       2       0       0       0       0       0       0
  8152 ;;Total ram usage:        2 bytes
  8153 ;; Hardware stack levels used: 1
  8154 ;; Hardware stack levels required when called: 10
  8155 ;; This function calls:
  8156 ;;		_printf
  8157 ;;		_setLEDColor
  8158 ;; This function is called by:
  8159 ;;		_process_remote_command
  8160 ;; This function uses a non-reentrant model
  8161 ;;
  8162                           
  8163                           
  8164                           ;psect for function _selectCurrentValue
  8165  0D5C                     _selectCurrentValue:
  8166  0D5C                     l4044:	
  8167                           ;incstack = 0
  8168                           ; Regs used in _selectCurrentValue: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8169                           
  8170                           
  8171                           ;main.c: 313:     setLEDColor(150, 70, 100);
  8172  0D5C  3046               	movlw	70
  8173  0D5D  0020               	movlb	0	; select bank0
  8174  0D5E  00B9               	movwf	??_selectCurrentValue
  8175  0D5F  0839               	movf	??_selectCurrentValue,w
  8176  0D60  00F3               	movwf	setLEDColor@green
  8177  0D61  3064               	movlw	100
  8178  0D62  00BA               	movwf	??_selectCurrentValue+1
  8179  0D63  083A               	movf	??_selectCurrentValue+1,w
  8180  0D64  00F4               	movwf	setLEDColor@blue
  8181  0D65  3096               	movlw	150
  8182  0D66  318B  23FB  318D   	fcall	_setLEDColor
  8183  0D69                     l4046:
  8184                           
  8185                           ;main.c: 314:     _delay((unsigned long)((500)*(4000000/4000.0)));
  8186  0D69  3003               	movlw	3
  8187  0D6A  0020               	movlb	0	; select bank0
  8188  0D6B  00BA               	movwf	??_selectCurrentValue+1
  8189  0D6C  308A               	movlw	138
  8190  0D6D  00B9               	movwf	??_selectCurrentValue
  8191  0D6E  3055               	movlw	85
  8192  0D6F                     u3157:
  8193  0D6F  0B89               	decfsz	9,f
  8194  0D70  2D6F               	goto	u3157
  8195  0D71  0BB9               	decfsz	??_selectCurrentValue,f
  8196  0D72  2D6F               	goto	u3157
  8197  0D73  0BBA               	decfsz	??_selectCurrentValue+1,f
  8198  0D74  2D6F               	goto	u3157
  8199  0D75  3200               	nop2
  8200  0D76                     l4048:
  8201                           
  8202                           ;main.c: 315:     setLEDColor(0,0,0);
  8203  0D76  01F3               	clrf	setLEDColor@green
  8204  0D77  01F4               	clrf	setLEDColor@blue
  8205  0D78  3000               	movlw	0
  8206  0D79  318B  23FB  318D   	fcall	_setLEDColor
  8207  0D7C                     l4050:
  8208                           
  8209                           ;main.c: 316:     printf("\n current value selected");
  8210  0D7C  30F1               	movlw	low (STR_6| (0+32768))
  8211  0D7D  0020               	movlb	0	; select bank0
  8212  0D7E  00B5               	movwf	printf@fmt
  8213  0D7F  3087               	movlw	high (STR_6| (0+32768))
  8214  0D80  00B6               	movwf	printf@fmt+1
  8215  0D81  318B  23AB  318D   	fcall	_printf
  8216  0D84                     l681:
  8217  0D84  0008               	return
  8218  0D85                     __end_of_selectCurrentValue:
  8219                           
  8220                           	psect	text18
  8221  0D34                     __ptext18:	
  8222 ;; *************** function _selectCurrent *****************
  8223 ;; Defined at:
  8224 ;;		line 283 in file "main.c"
  8225 ;; Parameters:    Size  Location     Type
  8226 ;;		None
  8227 ;; Auto vars:     Size  Location     Type
  8228 ;;		None
  8229 ;; Return value:  Size  Location     Type
  8230 ;;                  1    wreg      void 
  8231 ;; Registers used:
  8232 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8233 ;; Tracked objects:
  8234 ;;		On entry : 0/0
  8235 ;;		On exit  : 0/0
  8236 ;;		Unchanged: 0/0
  8237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8238 ;;      Params:         0       0       0       0       0       0       0       0
  8239 ;;      Locals:         0       0       0       0       0       0       0       0
  8240 ;;      Temps:          0       2       0       0       0       0       0       0
  8241 ;;      Totals:         0       2       0       0       0       0       0       0
  8242 ;;Total ram usage:        2 bytes
  8243 ;; Hardware stack levels used: 1
  8244 ;; Hardware stack levels required when called: 10
  8245 ;; This function calls:
  8246 ;;		_printf
  8247 ;;		_setLEDColor
  8248 ;; This function is called by:
  8249 ;;		_process_remote_command
  8250 ;; This function uses a non-reentrant model
  8251 ;;
  8252                           
  8253                           
  8254                           ;psect for function _selectCurrent
  8255  0D34                     _selectCurrent:
  8256  0D34                     l4018:	
  8257                           ;incstack = 0
  8258                           ; Regs used in _selectCurrent: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8259                           
  8260                           
  8261                           ;main.c: 284:   interfaceState = STATE_CURRENT;
  8262  0D34  01F8               	clrf	_interfaceState
  8263  0D35  0AF8               	incf	_interfaceState,f
  8264  0D36                     l4020:
  8265                           
  8266                           ;main.c: 285:   setLEDColor(0, 0, 255);
  8267  0D36  01F3               	clrf	setLEDColor@green
  8268  0D37  30FF               	movlw	255
  8269  0D38  0020               	movlb	0	; select bank0
  8270  0D39  00B9               	movwf	??_selectCurrent
  8271  0D3A  0839               	movf	??_selectCurrent,w
  8272  0D3B  00F4               	movwf	setLEDColor@blue
  8273  0D3C  3000               	movlw	0
  8274  0D3D  318B  23FB  318D   	fcall	_setLEDColor
  8275  0D40                     l4022:
  8276                           
  8277                           ;main.c: 286:   _delay((unsigned long)((1000)*(4000000/4000.0)));
  8278  0D40  3006               	movlw	6
  8279  0D41  0020               	movlb	0	; select bank0
  8280  0D42  00BA               	movwf	??_selectCurrent+1
  8281  0D43  3013               	movlw	19
  8282  0D44  00B9               	movwf	??_selectCurrent
  8283  0D45  30AD               	movlw	173
  8284  0D46                     u3167:
  8285  0D46  0B89               	decfsz	9,f
  8286  0D47  2D46               	goto	u3167
  8287  0D48  0BB9               	decfsz	??_selectCurrent,f
  8288  0D49  2D46               	goto	u3167
  8289  0D4A  0BBA               	decfsz	??_selectCurrent+1,f
  8290  0D4B  2D46               	goto	u3167
  8291  0D4C  3200               	nop2
  8292  0D4D                     l4024:
  8293                           
  8294                           ;main.c: 287:   setLEDColor(0, 0, 0);
  8295  0D4D  01F3               	clrf	setLEDColor@green
  8296  0D4E  01F4               	clrf	setLEDColor@blue
  8297  0D4F  3000               	movlw	0
  8298  0D50  318B  23FB  318D   	fcall	_setLEDColor
  8299  0D53                     l4026:
  8300                           
  8301                           ;main.c: 288:   printf("\n current selected");
  8302  0D53  305E               	movlw	low (STR_2| (0+32768))
  8303  0D54  0020               	movlb	0	; select bank0
  8304  0D55  00B5               	movwf	printf@fmt
  8305  0D56  3088               	movlw	high (STR_2| (0+32768))
  8306  0D57  00B6               	movwf	printf@fmt+1
  8307  0D58  318B  23AB  318D   	fcall	_printf
  8308  0D5B                     l669:
  8309  0D5B  0008               	return
  8310  0D5C                     __end_of_selectCurrent:
  8311                           
  8312                           	psect	text19
  8313  0BFB                     __ptext19:	
  8314 ;; *************** function _setLEDColor *****************
  8315 ;; Defined at:
  8316 ;;		line 214 in file "main.c"
  8317 ;; Parameters:    Size  Location     Type
  8318 ;;  red             1    wreg     unsigned char 
  8319 ;;  green           1    3[COMMON] unsigned char 
  8320 ;;  blue            1    4[COMMON] unsigned char 
  8321 ;; Auto vars:     Size  Location     Type
  8322 ;;  red             1    6[COMMON] unsigned char 
  8323 ;; Return value:  Size  Location     Type
  8324 ;;                  1    wreg      void 
  8325 ;; Registers used:
  8326 ;;		wreg, status,2, status,0
  8327 ;; Tracked objects:
  8328 ;;		On entry : 0/0
  8329 ;;		On exit  : 0/0
  8330 ;;		Unchanged: 0/0
  8331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8332 ;;      Params:         2       0       0       0       0       0       0       0
  8333 ;;      Locals:         1       0       0       0       0       0       0       0
  8334 ;;      Temps:          1       0       0       0       0       0       0       0
  8335 ;;      Totals:         4       0       0       0       0       0       0       0
  8336 ;;Total ram usage:        4 bytes
  8337 ;; Hardware stack levels used: 1
  8338 ;; Hardware stack levels required when called: 4
  8339 ;; This function calls:
  8340 ;;		Nothing
  8341 ;; This function is called by:
  8342 ;;		_startUp
  8343 ;;		_selectSomething
  8344 ;;		_selectFrequency
  8345 ;;		_selectCurrent
  8346 ;;		_selectIncrease
  8347 ;;		_selectDecrease
  8348 ;;		_selectCurrentValue
  8349 ;;		_selectFrequencyValue
  8350 ;;		_process_remote_command
  8351 ;;		_lowBattery
  8352 ;;		_selectResetValue
  8353 ;; This function uses a non-reentrant model
  8354 ;;
  8355                           
  8356                           
  8357                           ;psect for function _setLEDColor
  8358  0BFB                     _setLEDColor:
  8359                           
  8360                           ;incstack = 0
  8361                           ; Regs used in _setLEDColor: [wreg+status,2+status,0]
  8362                           ;setLEDColor@red stored from wreg
  8363  0BFB  00F6               	movwf	setLEDColor@red
  8364  0BFC                     l3848:
  8365                           
  8366                           ;main.c: 214: void setLEDColor(uint8_t red, uint8_t green, uint8_t blue);main.c: 215: {;
      +                          main.c: 221:   if (0 == blue){
  8367  0BFC  0874               	movf	setLEDColor@blue,w
  8368  0BFD  1D03               	btfss	3,2
  8369  0BFE  2C00               	goto	u2361
  8370  0BFF  2C01               	goto	u2360
  8371  0C00                     u2361:
  8372  0C00  2C04               	goto	l3852
  8373  0C01                     u2360:
  8374  0C01                     l3850:
  8375                           
  8376                           ;main.c: 222:     TRISC |= 0b00100000;
  8377  0C01  0021               	movlb	1	; select bank1
  8378  0C02  168E               	bsf	14,5	;volatile
  8379                           
  8380                           ;main.c: 223:   } else {
  8381  0C03  2C09               	goto	l3854
  8382  0C04                     l3852:
  8383                           
  8384                           ;main.c: 224:     TRISC &= 0b11011111;
  8385  0C04  30DF               	movlw	223
  8386  0C05  00F5               	movwf	??_setLEDColor
  8387  0C06  0875               	movf	??_setLEDColor,w
  8388  0C07  0021               	movlb	1	; select bank1
  8389  0C08  058E               	andwf	14,f	;volatile
  8390  0C09                     l3854:
  8391                           
  8392                           ;main.c: 226:   CCPR1L = 255U - blue;
  8393  0C09  0974               	comf	setLEDColor@blue,w
  8394  0C0A  0025               	movlb	5	; select bank5
  8395  0C0B  0091               	movwf	17	;volatile
  8396  0C0C                     l3856:
  8397                           
  8398                           ;main.c: 228:   PWM3DCH = red;
  8399  0C0C  0876               	movf	setLEDColor@red,w
  8400  0C0D  002C               	movlb	12	; select bank12
  8401  0C0E  0098               	movwf	24	;volatile
  8402  0C0F                     l3858:
  8403                           
  8404                           ;main.c: 230:   PWM4DCH = green;
  8405  0C0F  0873               	movf	setLEDColor@green,w
  8406  0C10  009B               	movwf	27	;volatile
  8407  0C11                     l652:
  8408  0C11  0008               	return
  8409  0C12                     __end_of_setLEDColor:
  8410                           
  8411                           	psect	text20
  8412  0BAB                     __ptext20:	
  8413 ;; *************** function _printf *****************
  8414 ;; Defined at:
  8415 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\printf.c"
  8416 ;; Parameters:    Size  Location     Type
  8417 ;;  fmt             2   21[BANK0 ] PTR const unsigned char 
  8418 ;;		 -> STR_7(25), STR_6(25), STR_5(23), STR_4(20), 
  8419 ;;		 -> STR_3(20), STR_2(19), STR_1(21), 
  8420 ;; Auto vars:     Size  Location     Type
  8421 ;;  ret             2    0        int 
  8422 ;;  ap              1   24[BANK0 ] PTR void [1]
  8423 ;;		 -> ?_printf(2), 
  8424 ;; Return value:  Size  Location     Type
  8425 ;;                  2   21[BANK0 ] int 
  8426 ;; Registers used:
  8427 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8428 ;; Tracked objects:
  8429 ;;		On entry : 0/0
  8430 ;;		On exit  : 0/0
  8431 ;;		Unchanged: 0/0
  8432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8433 ;;      Params:         0       2       0       0       0       0       0       0
  8434 ;;      Locals:         0       1       0       0       0       0       0       0
  8435 ;;      Temps:          0       1       0       0       0       0       0       0
  8436 ;;      Totals:         0       4       0       0       0       0       0       0
  8437 ;;Total ram usage:        4 bytes
  8438 ;; Hardware stack levels used: 1
  8439 ;; Hardware stack levels required when called: 9
  8440 ;; This function calls:
  8441 ;;		_vfprintf
  8442 ;; This function is called by:
  8443 ;;		_selectFrequency
  8444 ;;		_selectCurrent
  8445 ;;		_selectIncrease
  8446 ;;		_selectDecrease
  8447 ;;		_selectCurrentValue
  8448 ;;		_selectFrequencyValue
  8449 ;;		_selectResetValue
  8450 ;; This function uses a non-reentrant model
  8451 ;;
  8452                           
  8453                           
  8454                           ;psect for function _printf
  8455  0BAB                     _printf:
  8456  0BAB                     l3860:	
  8457                           ;incstack = 0
  8458                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8459                           
  8460  0BAB  3037               	movlw	(low ((?_printf| 0+2)))& (0+255)
  8461  0BAC  0020               	movlb	0	; select bank0
  8462  0BAD  00B7               	movwf	??_printf
  8463  0BAE  0837               	movf	??_printf,w
  8464  0BAF  00B8               	movwf	printf@ap
  8465  0BB0                     l3862:
  8466  0BB0  0836               	movf	printf@fmt+1,w
  8467  0BB1  00AE               	movwf	vfprintf@fmt+1
  8468  0BB2  0835               	movf	printf@fmt,w
  8469  0BB3  00AD               	movwf	vfprintf@fmt
  8470  0BB4  3038               	movlw	(low (printf@ap| 0))& (0+255)
  8471  0BB5  00B7               	movwf	??_printf
  8472  0BB6  0837               	movf	??_printf,w
  8473  0BB7  00AF               	movwf	vfprintf@ap
  8474  0BB8  3000               	movlw	0
  8475  0BB9  318D  25AF  318B   	fcall	_vfprintf
  8476  0BBC                     l1301:
  8477  0BBC  0008               	return
  8478  0BBD                     __end_of_printf:
  8479                           
  8480                           	psect	text21
  8481  0DAF                     __ptext21:	
  8482 ;; *************** function _vfprintf *****************
  8483 ;; Defined at:
  8484 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  8485 ;; Parameters:    Size  Location     Type
  8486 ;;  fp              1    wreg     PTR struct _IO_FILE
  8487 ;;		 -> NULL(0), 
  8488 ;;  fmt             2   13[BANK0 ] PTR const unsigned char 
  8489 ;;		 -> STR_7(25), STR_6(25), STR_5(23), STR_4(20), 
  8490 ;;		 -> STR_3(20), STR_2(19), STR_1(21), 
  8491 ;;  ap              1   15[BANK0 ] PTR PTR void 
  8492 ;;		 -> printf@ap(1), 
  8493 ;; Auto vars:     Size  Location     Type
  8494 ;;  fp              1   18[BANK0 ] PTR struct _IO_FILE
  8495 ;;		 -> NULL(0), 
  8496 ;;  cfmt            2   19[BANK0 ] PTR unsigned char 
  8497 ;;		 -> STR_7(25), STR_6(25), STR_5(23), STR_4(20), 
  8498 ;;		 -> STR_3(20), STR_2(19), STR_1(21), 
  8499 ;; Return value:  Size  Location     Type
  8500 ;;                  2   13[BANK0 ] int 
  8501 ;; Registers used:
  8502 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8503 ;; Tracked objects:
  8504 ;;		On entry : 0/0
  8505 ;;		On exit  : 0/0
  8506 ;;		Unchanged: 0/0
  8507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8508 ;;      Params:         0       3       0       0       0       0       0       0
  8509 ;;      Locals:         0       3       0       0       0       0       0       0
  8510 ;;      Temps:          0       2       0       0       0       0       0       0
  8511 ;;      Totals:         0       8       0       0       0       0       0       0
  8512 ;;Total ram usage:        8 bytes
  8513 ;; Hardware stack levels used: 1
  8514 ;; Hardware stack levels required when called: 8
  8515 ;; This function calls:
  8516 ;;		_vfpfcnvrt
  8517 ;; This function is called by:
  8518 ;;		_printf
  8519 ;; This function uses a non-reentrant model
  8520 ;;
  8521                           
  8522                           
  8523                           ;psect for function _vfprintf
  8524  0DAF                     _vfprintf:
  8525                           
  8526                           ;incstack = 0
  8527                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8528                           ;vfprintf@fp stored from wreg
  8529  0DAF  0020               	movlb	0	; select bank0
  8530  0DB0  00B2               	movwf	vfprintf@fp
  8531  0DB1                     l3784:
  8532                           
  8533                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
  8534  0DB1  082E               	movf	vfprintf@fmt+1,w
  8535  0DB2  00B4               	movwf	vfprintf@cfmt+1
  8536  0DB3  082D               	movf	vfprintf@fmt,w
  8537  0DB4  00B3               	movwf	vfprintf@cfmt
  8538  0DB5                     l3786:
  8539                           
  8540                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
  8541  0DB5  0021               	movlb	1	; select bank1
  8542  0DB6  01A0               	clrf	_nout^(0+128)
  8543  0DB7  01A1               	clrf	(_nout+1)^(0+128)
  8544                           
  8545                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  8546  0DB8  2DCD               	goto	l3790
  8547  0DB9                     l3788:
  8548                           
  8549                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
  8550  0DB9  3033               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  8551  0DBA  00B0               	movwf	??_vfprintf
  8552  0DBB  0830               	movf	??_vfprintf,w
  8553  0DBC  00A5               	movwf	vfpfcnvrt@fmt
  8554  0DBD  082F               	movf	vfprintf@ap,w
  8555  0DBE  00B1               	movwf	??_vfprintf+1
  8556  0DBF  0831               	movf	??_vfprintf+1,w
  8557  0DC0  00A6               	movwf	vfpfcnvrt@ap
  8558  0DC1  0832               	movf	vfprintf@fp,w
  8559  0DC2  3185  2579  318D   	fcall	_vfpfcnvrt
  8560  0DC5  0020               	movlb	0	; select bank0
  8561  0DC6  0825               	movf	?_vfpfcnvrt,w
  8562  0DC7  0021               	movlb	1	; select bank1
  8563  0DC8  07A0               	addwf	_nout^(0+128),f
  8564  0DC9  0020               	movlb	0	; select bank0
  8565  0DCA  0826               	movf	?_vfpfcnvrt+1,w
  8566  0DCB  0021               	movlb	1	; select bank1
  8567  0DCC  3DA1               	addwfc	(_nout+1)^(0+128),f
  8568  0DCD                     l3790:
  8569                           
  8570                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  8571  0DCD  0020               	movlb	0	; select bank0
  8572  0DCE  0833               	movf	vfprintf@cfmt,w
  8573  0DCF  0084               	movwf	4
  8574  0DD0  0834               	movf	vfprintf@cfmt+1,w
  8575  0DD1  0085               	movwf	5
  8576  0DD2  0012               	moviw fsr0++
  8577  0DD3  1D03               	btfss	3,2
  8578  0DD4  2DD6               	goto	u2321
  8579  0DD5  2DD7               	goto	u2320
  8580  0DD6                     u2321:
  8581  0DD6  2DB9               	goto	l3788
  8582  0DD7                     u2320:
  8583  0DD7                     l3792:
  8584                           
  8585                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
  8586  0DD7  0021               	movlb	1	; select bank1
  8587  0DD8  0821               	movf	(_nout+1)^(0+128),w
  8588  0DD9  0020               	movlb	0	; select bank0
  8589  0DDA  00AE               	movwf	?_vfprintf+1
  8590  0DDB  0021               	movlb	1	; select bank1
  8591  0DDC  0820               	movf	_nout^(0+128),w
  8592  0DDD  0020               	movlb	0	; select bank0
  8593  0DDE  00AD               	movwf	?_vfprintf
  8594  0DDF                     l1340:
  8595  0DDF  0008               	return
  8596  0DE0                     __end_of_vfprintf:
  8597                           
  8598                           	psect	text22
  8599  0579                     __ptext22:	
  8600 ;; *************** function _vfpfcnvrt *****************
  8601 ;; Defined at:
  8602 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  8603 ;; Parameters:    Size  Location     Type
  8604 ;;  fp              1    wreg     PTR struct _IO_FILE
  8605 ;;		 -> NULL(0), 
  8606 ;;  fmt             1    5[BANK0 ] PTR PTR unsigned char 
  8607 ;;		 -> vfprintf@cfmt(2), 
  8608 ;;  ap              1    6[BANK0 ] PTR PTR void 
  8609 ;;		 -> printf@ap(1), 
  8610 ;; Auto vars:     Size  Location     Type
  8611 ;;  fp              1   12[BANK0 ] PTR struct _IO_FILE
  8612 ;;		 -> NULL(0), 
  8613 ;;  llu             8    0        unsigned long long 
  8614 ;;  ll              8    0        long long 
  8615 ;;  f               4    0        long long 
  8616 ;;  ct              3    0        unsigned char [3]
  8617 ;;  vp              2    0        PTR void 
  8618 ;;  i               2    0        int 
  8619 ;;  done            2    0        int 
  8620 ;;  cp              2    0        PTR unsigned char 
  8621 ;;  c               1    0        unsigned char 
  8622 ;; Return value:  Size  Location     Type
  8623 ;;                  2    5[BANK0 ] int 
  8624 ;; Registers used:
  8625 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8626 ;; Tracked objects:
  8627 ;;		On entry : 0/0
  8628 ;;		On exit  : 0/0
  8629 ;;		Unchanged: 0/0
  8630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8631 ;;      Params:         0       2       0       0       0       0       0       0
  8632 ;;      Locals:         0       1       0       0       0       0       0       0
  8633 ;;      Temps:          0       5       0       0       0       0       0       0
  8634 ;;      Totals:         0       8       0       0       0       0       0       0
  8635 ;;Total ram usage:        8 bytes
  8636 ;; Hardware stack levels used: 1
  8637 ;; Hardware stack levels required when called: 7
  8638 ;; This function calls:
  8639 ;;		_fputc
  8640 ;; This function is called by:
  8641 ;;		_vfprintf
  8642 ;; This function uses a non-reentrant model
  8643 ;;
  8644                           
  8645                           
  8646                           ;psect for function _vfpfcnvrt
  8647  0579                     _vfpfcnvrt:
  8648                           
  8649                           ;incstack = 0
  8650                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8651                           ;vfpfcnvrt@fp stored from wreg
  8652  0579  0020               	movlb	0	; select bank0
  8653  057A  00AC               	movwf	vfpfcnvrt@fp
  8654  057B                     l3728:
  8655                           
  8656                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.32\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          2\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
  8657  057B  0825               	movf	vfpfcnvrt@fmt,w
  8658  057C  0086               	movwf	6
  8659  057D  0187               	clrf	7
  8660  057E  3F40               	moviw [0]fsr1
  8661  057F  00A7               	movwf	??_vfpfcnvrt
  8662  0580  3F41               	moviw [1]fsr1
  8663  0581  00A8               	movwf	??_vfpfcnvrt+1
  8664  0582  0827               	movf	??_vfpfcnvrt,w
  8665  0583  0084               	movwf	4
  8666  0584  0828               	movf	??_vfpfcnvrt+1,w
  8667  0585  0085               	movwf	5
  8668  0586  0012               	moviw fsr0++
  8669  0587  3A25               	xorlw	37
  8670  0588  1D03               	btfss	3,2
  8671  0589  2D8B               	goto	u2301
  8672  058A  2D8C               	goto	u2300
  8673  058B                     u2301:
  8674  058B  2DD3               	goto	l3752
  8675  058C                     u2300:
  8676  058C                     l3730:
  8677                           
  8678                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
  8679  058C  0825               	movf	vfpfcnvrt@fmt,w
  8680  058D  0086               	movwf	6
  8681  058E  0187               	clrf	7
  8682  058F  3001               	movlw	1
  8683  0590  0781               	addwf	1,f
  8684  0591  3141               	addfsr 1,1
  8685  0592  1803               	skipnc
  8686  0593  0A81               	incf	1,f
  8687  0594                     l3732:
  8688                           
  8689                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
  8690  0594  0021               	movlb	1	; select bank1
  8691  0595  01A2               	clrf	_width^(0+128)
  8692  0596  01A3               	clrf	(_width+1)^(0+128)
  8693  0597  01A6               	clrf	_flags^(0+128)
  8694  0598  01A7               	clrf	(_flags+1)^(0+128)
  8695  0599                     l3734:
  8696                           
  8697                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
  8698  0599  30FF               	movlw	255
  8699  059A  00A4               	movwf	_prec^(0+128)
  8700  059B  30FF               	movlw	255
  8701  059C  00A5               	movwf	(_prec^(0+128)+1)
  8702  059D                     l3736:
  8703                           
  8704                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  8705  059D  0020               	movlb	0	; select bank0
  8706  059E  0825               	movf	vfpfcnvrt@fmt,w
  8707  059F  0086               	movwf	6
  8708  05A0  0187               	clrf	7
  8709  05A1  3F40               	moviw [0]fsr1
  8710  05A2  00A7               	movwf	??_vfpfcnvrt
  8711  05A3  3F41               	moviw [1]fsr1
  8712  05A4  00A8               	movwf	??_vfpfcnvrt+1
  8713  05A5  0827               	movf	??_vfpfcnvrt,w
  8714  05A6  0084               	movwf	4
  8715  05A7  0828               	movf	??_vfpfcnvrt+1,w
  8716  05A8  0085               	movwf	5
  8717  05A9  0012               	moviw fsr0++
  8718  05AA  3A25               	xorlw	37
  8719  05AB  1D03               	btfss	3,2
  8720  05AC  2DAE               	goto	u2311
  8721  05AD  2DAF               	goto	u2310
  8722  05AE                     u2311:
  8723  05AE  2DC8               	goto	l3746
  8724  05AF                     u2310:
  8725  05AF                     l3738:
  8726                           
  8727                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  8728  05AF  0825               	movf	vfpfcnvrt@fmt,w
  8729  05B0  0086               	movwf	6
  8730  05B1  0187               	clrf	7
  8731  05B2  3001               	movlw	1
  8732  05B3  0781               	addwf	1,f
  8733  05B4  3141               	addfsr 1,1
  8734  05B5  1803               	skipnc
  8735  05B6  0A81               	incf	1,f
  8736  05B7                     l3740:
  8737                           
  8738                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  8739  05B7  3025               	movlw	37
  8740  05B8  00F5               	movwf	fputc@c
  8741  05B9  3000               	movlw	0
  8742  05BA  00F6               	movwf	fputc@c+1
  8743  05BB  082C               	movf	vfpfcnvrt@fp,w
  8744  05BC  00A7               	movwf	??_vfpfcnvrt
  8745  05BD  0827               	movf	??_vfpfcnvrt,w
  8746  05BE  00F7               	movwf	fputc@fp
  8747  05BF  318E  26B6  3185   	fcall	_fputc
  8748  05C2                     l3742:
  8749                           
  8750                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  8751  05C2  3001               	movlw	1
  8752  05C3  0020               	movlb	0	; select bank0
  8753  05C4  00A5               	movwf	?_vfpfcnvrt
  8754  05C5  3000               	movlw	0
  8755  05C6  00A6               	movwf	?_vfpfcnvrt+1
  8756  05C7  2DF6               	goto	l1334
  8757  05C8                     l3746:
  8758                           
  8759                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  8760  05C8  0825               	movf	vfpfcnvrt@fmt,w
  8761  05C9  0086               	movwf	6
  8762  05CA  0187               	clrf	7
  8763  05CB  3001               	movlw	1
  8764  05CC  0781               	addwf	1,f
  8765  05CD  3141               	addfsr 1,1
  8766  05CE  1803               	skipnc
  8767  05CF  0A81               	incf	1,f
  8768  05D0                     l3748:
  8769                           
  8770                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  8771  05D0  01A5               	clrf	?_vfpfcnvrt
  8772  05D1  01A6               	clrf	?_vfpfcnvrt+1
  8773  05D2  2DF6               	goto	l1334
  8774  05D3                     l3752:
  8775                           
  8776                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  8777  05D3  0825               	movf	vfpfcnvrt@fmt,w
  8778  05D4  0086               	movwf	6
  8779  05D5  0187               	clrf	7
  8780  05D6  3F40               	moviw [0]fsr1
  8781  05D7  00A7               	movwf	??_vfpfcnvrt
  8782  05D8  3F41               	moviw [1]fsr1
  8783  05D9  00A8               	movwf	??_vfpfcnvrt+1
  8784  05DA  0827               	movf	??_vfpfcnvrt,w
  8785  05DB  0084               	movwf	4
  8786  05DC  0828               	movf	??_vfpfcnvrt+1,w
  8787  05DD  0085               	movwf	5
  8788  05DE  0800               	movf	0,w	;code access
  8789  05DF  00A9               	movwf	??_vfpfcnvrt+2
  8790  05E0  01AA               	clrf	??_vfpfcnvrt+3
  8791  05E1  0829               	movf	??_vfpfcnvrt+2,w
  8792  05E2  00F5               	movwf	fputc@c
  8793  05E3  082A               	movf	??_vfpfcnvrt+3,w
  8794  05E4  00F6               	movwf	fputc@c+1
  8795  05E5  082C               	movf	vfpfcnvrt@fp,w
  8796  05E6  00AB               	movwf	??_vfpfcnvrt+4
  8797  05E7  082B               	movf	??_vfpfcnvrt+4,w
  8798  05E8  00F7               	movwf	fputc@fp
  8799  05E9  318E  26B6  3185   	fcall	_fputc
  8800  05EC                     l3754:
  8801                           
  8802                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  8803  05EC  0020               	movlb	0	; select bank0
  8804  05ED  0825               	movf	vfpfcnvrt@fmt,w
  8805  05EE  0086               	movwf	6
  8806  05EF  0187               	clrf	7
  8807  05F0  3001               	movlw	1
  8808  05F1  0781               	addwf	1,f
  8809  05F2  3141               	addfsr 1,1
  8810  05F3  1803               	skipnc
  8811  05F4  0A81               	incf	1,f
  8812  05F5  2DC2               	goto	l3742
  8813  05F6                     l1334:
  8814  05F6  0008               	return
  8815  05F7                     __end_of_vfpfcnvrt:
  8816                           
  8817                           	psect	text23
  8818  0EB6                     __ptext23:	
  8819 ;; *************** function _fputc *****************
  8820 ;; Defined at:
  8821 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputc.c"
  8822 ;; Parameters:    Size  Location     Type
  8823 ;;  c               2    5[COMMON] int 
  8824 ;;  fp              1    7[COMMON] PTR struct _IO_FILE
  8825 ;;		 -> NULL(0), 
  8826 ;; Auto vars:     Size  Location     Type
  8827 ;;		None
  8828 ;; Return value:  Size  Location     Type
  8829 ;;                  2    5[COMMON] int 
  8830 ;; Registers used:
  8831 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8832 ;; Tracked objects:
  8833 ;;		On entry : 0/0
  8834 ;;		On exit  : 0/0
  8835 ;;		Unchanged: 0/0
  8836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8837 ;;      Params:         3       0       0       0       0       0       0       0
  8838 ;;      Locals:         0       0       0       0       0       0       0       0
  8839 ;;      Temps:          0       5       0       0       0       0       0       0
  8840 ;;      Totals:         3       5       0       0       0       0       0       0
  8841 ;;Total ram usage:        8 bytes
  8842 ;; Hardware stack levels used: 1
  8843 ;; Hardware stack levels required when called: 6
  8844 ;; This function calls:
  8845 ;;		_putch
  8846 ;; This function is called by:
  8847 ;;		_vfpfcnvrt
  8848 ;; This function uses a non-reentrant model
  8849 ;;
  8850                           
  8851                           
  8852                           ;psect for function _fputc
  8853  0EB6                     _fputc:
  8854  0EB6                     l3714:	
  8855                           ;incstack = 0
  8856                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8857                           
  8858  0EB6  0877               	movf	fputc@fp,w
  8859  0EB7  1903               	btfsc	3,2
  8860  0EB8  2EBA               	goto	u2261
  8861  0EB9  2EBB               	goto	u2260
  8862  0EBA                     u2261:
  8863  0EBA  2EC0               	goto	l3718
  8864  0EBB                     u2260:
  8865  0EBB                     l3716:
  8866  0EBB  0877               	movf	fputc@fp,w
  8867  0EBC  1D03               	btfss	3,2
  8868  0EBD  2EBF               	goto	u2271
  8869  0EBE  2EC0               	goto	u2270
  8870  0EBF                     u2271:
  8871  0EBF  2EC5               	goto	l3720
  8872  0EC0                     u2270:
  8873  0EC0                     l3718:
  8874  0EC0  0875               	movf	fputc@c,w
  8875  0EC1  318B  231F  318E   	fcall	_putch
  8876  0EC4  2EF5               	goto	l1352
  8877  0EC5                     l3720:
  8878  0EC5  0877               	movf	fputc@fp,w
  8879  0EC6  3E03               	addlw	3
  8880  0EC7  0086               	movwf	6
  8881  0EC8  0187               	clrf	7
  8882  0EC9  0016               	moviw fsr1++
  8883  0ECA  0401               	iorwf	1,w
  8884  0ECB  1903               	btfsc	3,2
  8885  0ECC  2ECE               	goto	u2281
  8886  0ECD  2ECF               	goto	u2280
  8887  0ECE                     u2281:
  8888  0ECE  2EED               	goto	l3724
  8889  0ECF                     u2280:
  8890  0ECF                     l3722:
  8891  0ECF  0877               	movf	fputc@fp,w
  8892  0ED0  3E03               	addlw	3
  8893  0ED1  0086               	movwf	6
  8894  0ED2  0187               	clrf	7
  8895  0ED3  3F40               	moviw [0]fsr1
  8896  0ED4  0020               	movlb	0	; select bank0
  8897  0ED5  00A0               	movwf	??_fputc
  8898  0ED6  3F41               	moviw [1]fsr1
  8899  0ED7  00A1               	movwf	??_fputc+1
  8900  0ED8  0A77               	incf	fputc@fp,w
  8901  0ED9  0086               	movwf	6
  8902  0EDA  0187               	clrf	7
  8903  0EDB  3F40               	moviw [0]fsr1
  8904  0EDC  00A2               	movwf	??_fputc+2
  8905  0EDD  3F41               	moviw [1]fsr1
  8906  0EDE  00A3               	movwf	??_fputc+3
  8907  0EDF  0823               	movf	??_fputc+3,w
  8908  0EE0  3A80               	xorlw	128
  8909  0EE1  00A4               	movwf	??_fputc+4
  8910  0EE2  0821               	movf	??_fputc+1,w
  8911  0EE3  3A80               	xorlw	128
  8912  0EE4  0224               	subwf	??_fputc+4,w
  8913  0EE5  1D03               	skipz
  8914  0EE6  2EE9               	goto	u2295
  8915  0EE7  0820               	movf	??_fputc,w
  8916  0EE8  0222               	subwf	??_fputc+2,w
  8917  0EE9                     u2295:
  8918  0EE9  1803               	skipnc
  8919  0EEA  2EEC               	goto	u2291
  8920  0EEB  2EED               	goto	u2290
  8921  0EEC                     u2291:
  8922  0EEC  2EF5               	goto	l1352
  8923  0EED                     u2290:
  8924  0EED                     l3724:
  8925  0EED  0A77               	incf	fputc@fp,w
  8926  0EEE  0086               	movwf	6
  8927  0EEF  0187               	clrf	7
  8928  0EF0  3001               	movlw	1
  8929  0EF1  0781               	addwf	1,f
  8930  0EF2  3141               	addfsr 1,1
  8931  0EF3  1803               	skipnc
  8932  0EF4  0A81               	incf	1,f
  8933  0EF5                     l1352:
  8934  0EF5  0008               	return
  8935  0EF6                     __end_of_fputc:
  8936                           
  8937                           	psect	text24
  8938  0B1F                     __ptext24:	
  8939 ;; *************** function _putch *****************
  8940 ;; Defined at:
  8941 ;;		line 146 in file "mcc_generated_files/eusart.c"
  8942 ;; Parameters:    Size  Location     Type
  8943 ;;  txData          1    wreg     unsigned char 
  8944 ;; Auto vars:     Size  Location     Type
  8945 ;;  txData          1    4[COMMON] unsigned char 
  8946 ;; Return value:  Size  Location     Type
  8947 ;;                  1    wreg      void 
  8948 ;; Registers used:
  8949 ;;		wreg, status,2, status,0, pclath, cstack
  8950 ;; Tracked objects:
  8951 ;;		On entry : 0/0
  8952 ;;		On exit  : 0/0
  8953 ;;		Unchanged: 0/0
  8954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8955 ;;      Params:         0       0       0       0       0       0       0       0
  8956 ;;      Locals:         1       0       0       0       0       0       0       0
  8957 ;;      Temps:          0       0       0       0       0       0       0       0
  8958 ;;      Totals:         1       0       0       0       0       0       0       0
  8959 ;;Total ram usage:        1 bytes
  8960 ;; Hardware stack levels used: 1
  8961 ;; Hardware stack levels required when called: 5
  8962 ;; This function calls:
  8963 ;;		_EUSART_Write
  8964 ;; This function is called by:
  8965 ;;		_fputc
  8966 ;; This function uses a non-reentrant model
  8967 ;;
  8968                           
  8969                           
  8970                           ;psect for function _putch
  8971  0B1F                     _putch:
  8972                           
  8973                           ;incstack = 0
  8974                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  8975                           ;putch@txData stored from wreg
  8976  0B1F  00F4               	movwf	putch@txData
  8977  0B20                     l3712:
  8978                           
  8979                           ;mcc_generated_files/eusart.c: 146: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 147: {;mcc_generated_files/eusart.c: 148:     EUSART_Write(txData);
  8980  0B20  0874               	movf	putch@txData,w
  8981  0B21  318B  234B  318B   	fcall	_EUSART_Write
  8982  0B24                     l231:
  8983  0B24  0008               	return
  8984  0B25                     __end_of_putch:
  8985                           
  8986                           	psect	text25
  8987  0B4B                     __ptext25:	
  8988 ;; *************** function _EUSART_Write *****************
  8989 ;; Defined at:
  8990 ;;		line 132 in file "mcc_generated_files/eusart.c"
  8991 ;; Parameters:    Size  Location     Type
  8992 ;;  txData          1    wreg     unsigned char 
  8993 ;; Auto vars:     Size  Location     Type
  8994 ;;  txData          1    3[COMMON] unsigned char 
  8995 ;; Return value:  Size  Location     Type
  8996 ;;                  1    wreg      void 
  8997 ;; Registers used:
  8998 ;;		wreg
  8999 ;; Tracked objects:
  9000 ;;		On entry : 0/0
  9001 ;;		On exit  : 0/0
  9002 ;;		Unchanged: 0/0
  9003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9004 ;;      Params:         0       0       0       0       0       0       0       0
  9005 ;;      Locals:         1       0       0       0       0       0       0       0
  9006 ;;      Temps:          0       0       0       0       0       0       0       0
  9007 ;;      Totals:         1       0       0       0       0       0       0       0
  9008 ;;Total ram usage:        1 bytes
  9009 ;; Hardware stack levels used: 1
  9010 ;; Hardware stack levels required when called: 4
  9011 ;; This function calls:
  9012 ;;		Nothing
  9013 ;; This function is called by:
  9014 ;;		_putch
  9015 ;; This function uses a non-reentrant model
  9016 ;;
  9017                           
  9018                           
  9019                           ;psect for function _EUSART_Write
  9020  0B4B                     _EUSART_Write:
  9021                           
  9022                           ;incstack = 0
  9023                           ; Regs used in _EUSART_Write: [wreg]
  9024                           ;EUSART_Write@txData stored from wreg
  9025  0B4B  00F3               	movwf	EUSART_Write@txData
  9026  0B4C                     l3708:
  9027  0B4C                     l222:	
  9028                           ;mcc_generated_files/eusart.c: 135:     {;mcc_generated_files/eusart.c: 136:     }
  9029                           
  9030                           
  9031                           ;mcc_generated_files/eusart.c: 134:     while(0 == PIR1bits.TXIF)
  9032  0B4C  0020               	movlb	0	; select bank0
  9033  0B4D  1E11               	btfss	17,4	;volatile
  9034  0B4E  2B50               	goto	u2251
  9035  0B4F  2B51               	goto	u2250
  9036  0B50                     u2251:
  9037  0B50  2B4C               	goto	l222
  9038  0B51                     u2250:
  9039  0B51                     l3710:
  9040                           
  9041                           ;mcc_generated_files/eusart.c: 138:     TX1REG = txData;
  9042  0B51  0873               	movf	EUSART_Write@txData,w
  9043  0B52  0023               	movlb	3	; select bank3
  9044  0B53  009A               	movwf	26	;volatile
  9045  0B54                     l225:
  9046  0B54  0008               	return
  9047  0B55                     __end_of_EUSART_Write:
  9048                           
  9049                           	psect	text26
  9050  0E13                     __ptext26:	
  9051 ;; *************** function _battery_voltage *****************
  9052 ;; Defined at:
  9053 ;;		line 148 in file "main.c"
  9054 ;; Parameters:    Size  Location     Type
  9055 ;;		None
  9056 ;; Auto vars:     Size  Location     Type
  9057 ;;		None
  9058 ;; Return value:  Size  Location     Type
  9059 ;;                  2   23[BANK0 ] short 
  9060 ;; Registers used:
  9061 ;;		wreg, status,2, status,0, pclath, cstack
  9062 ;; Tracked objects:
  9063 ;;		On entry : 0/0
  9064 ;;		On exit  : 0/0
  9065 ;;		Unchanged: 0/0
  9066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9067 ;;      Params:         0       2       0       0       0       0       0       0
  9068 ;;      Locals:         0       0       0       0       0       0       0       0
  9069 ;;      Temps:          0       0       0       0       0       0       0       0
  9070 ;;      Totals:         0       2       0       0       0       0       0       0
  9071 ;;Total ram usage:        2 bytes
  9072 ;; Hardware stack levels used: 1
  9073 ;; Hardware stack levels required when called: 5
  9074 ;; This function calls:
  9075 ;;		___aldiv
  9076 ;; This function is called by:
  9077 ;;		_process_remote_command
  9078 ;;		_main
  9079 ;; This function uses a non-reentrant model
  9080 ;;
  9081                           
  9082                           
  9083                           ;psect for function _battery_voltage
  9084  0E13                     _battery_voltage:
  9085  0E13                     l3992:	
  9086                           ;incstack = 0
  9087                           ; Regs used in _battery_voltage: [wreg+status,2+status,0+pclath+cstack]
  9088                           
  9089                           
  9090                           ;main.c: 150:   FVRCON = 0b10000001;
  9091  0E13  3081               	movlw	129
  9092  0E14  0022               	movlb	2	; select bank2
  9093  0E15  0097               	movwf	23	;volatile
  9094                           
  9095                           ;main.c: 151:   ADCON0 = 0b01111101;
  9096  0E16  307D               	movlw	125
  9097  0E17  0021               	movlb	1	; select bank1
  9098  0E18  009D               	movwf	29	;volatile
  9099                           
  9100                           ;main.c: 152:   ADCON1 = 0b10010000;
  9101  0E19  3090               	movlw	144
  9102  0E1A  009E               	movwf	30	;volatile
  9103  0E1B                     l638:	
  9104                           ;main.c: 153:   while(!FVRCONbits.FVRRDY){ }
  9105                           
  9106  0E1B  0022               	movlb	2	; select bank2
  9107  0E1C  1F17               	btfss	23,6	;volatile
  9108  0E1D  2E1F               	goto	u2621
  9109  0E1E  2E20               	goto	u2620
  9110  0E1F                     u2621:
  9111  0E1F  2E1B               	goto	l638
  9112  0E20                     u2620:
  9113  0E20                     l640:
  9114                           
  9115                           ;main.c: 154:   __nop();
  9116  0E20  0000               	nop
  9117                           
  9118                           ;main.c: 155:   __nop();
  9119  0E21  0000               	nop
  9120                           
  9121                           ;main.c: 156:   __nop();
  9122  0E22  0000               	nop
  9123                           
  9124                           ;main.c: 157:   __nop();
  9125  0E23  0000               	nop
  9126                           
  9127                           ;main.c: 158:   __nop();
  9128  0E24  0000               	nop
  9129                           
  9130                           ;main.c: 159:   ADCON0bits.GO_nDONE = 1;
  9131  0E25  0021               	movlb	1	; select bank1
  9132  0E26  149D               	bsf	29,1	;volatile
  9133  0E27                     l641:	
  9134                           ;main.c: 160:   while(ADCON0bits.GO_nDONE){ }
  9135                           
  9136  0E27  189D               	btfsc	29,1	;volatile
  9137  0E28  2E2A               	goto	u2631
  9138  0E29  2E2B               	goto	u2630
  9139  0E2A                     u2631:
  9140  0E2A  2E27               	goto	l641
  9141  0E2B                     u2630:
  9142  0E2B                     l643:
  9143                           
  9144                           ;main.c: 161:   ADCON0bits.ADON = 0;
  9145  0E2B  101D               	bcf	29,0	;volatile
  9146  0E2C                     l3994:
  9147                           
  9148                           ;main.c: 166:   return 1047552L / ADRES;
  9149  0E2C  081B               	movf	27,w	;volatile
  9150  0E2D  0020               	movlb	0	; select bank0
  9151  0E2E  00A8               	movwf	___aldiv@divisor
  9152  0E2F  0021               	movlb	1	; select bank1
  9153  0E30  081C               	movf	28,w	;volatile
  9154  0E31  0020               	movlb	0	; select bank0
  9155  0E32  00A9               	movwf	___aldiv@divisor+1
  9156  0E33  01AA               	clrf	___aldiv@divisor+2
  9157  0E34  01AB               	clrf	___aldiv@divisor+3
  9158  0E35  3000               	movlw	0
  9159  0E36  00AF               	movwf	___aldiv@dividend+3
  9160  0E37  300F               	movlw	15
  9161  0E38  00AE               	movwf	___aldiv@dividend+2
  9162  0E39  30FC               	movlw	252
  9163  0E3A  00AD               	movwf	___aldiv@dividend+1
  9164  0E3B  3000               	movlw	0
  9165  0E3C  00AC               	movwf	___aldiv@dividend
  9166  0E3D  3184  2464  318E   	fcall	___aldiv
  9167  0E40  0020               	movlb	0	; select bank0
  9168  0E41  0829               	movf	?___aldiv+1,w
  9169  0E42  00B8               	movwf	?_battery_voltage+1
  9170  0E43  0828               	movf	?___aldiv,w
  9171  0E44  00B7               	movwf	?_battery_voltage
  9172  0E45                     l644:
  9173  0E45  0008               	return
  9174  0E46                     __end_of_battery_voltage:
  9175                           
  9176                           	psect	text27
  9177  0464                     __ptext27:	
  9178 ;; *************** function ___aldiv *****************
  9179 ;; Defined at:
  9180 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aldiv.c"
  9181 ;; Parameters:    Size  Location     Type
  9182 ;;  divisor         4    8[BANK0 ] long 
  9183 ;;  dividend        4   12[BANK0 ] long 
  9184 ;; Auto vars:     Size  Location     Type
  9185 ;;  quotient        4   19[BANK0 ] long 
  9186 ;;  sign            1   18[BANK0 ] unsigned char 
  9187 ;;  counter         1   17[BANK0 ] unsigned char 
  9188 ;; Return value:  Size  Location     Type
  9189 ;;                  4    8[BANK0 ] long 
  9190 ;; Registers used:
  9191 ;;		wreg, status,2, status,0
  9192 ;; Tracked objects:
  9193 ;;		On entry : 0/0
  9194 ;;		On exit  : 0/0
  9195 ;;		Unchanged: 0/0
  9196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9197 ;;      Params:         0       8       0       0       0       0       0       0
  9198 ;;      Locals:         0       6       0       0       0       0       0       0
  9199 ;;      Temps:          0       1       0       0       0       0       0       0
  9200 ;;      Totals:         0      15       0       0       0       0       0       0
  9201 ;;Total ram usage:       15 bytes
  9202 ;; Hardware stack levels used: 1
  9203 ;; Hardware stack levels required when called: 4
  9204 ;; This function calls:
  9205 ;;		Nothing
  9206 ;; This function is called by:
  9207 ;;		_battery_voltage
  9208 ;;		_setCurrent
  9209 ;;		_setFrequency
  9210 ;; This function uses a non-reentrant model
  9211 ;;
  9212                           
  9213                           
  9214                           ;psect for function ___aldiv
  9215  0464                     ___aldiv:
  9216  0464                     l3880:	
  9217                           ;incstack = 0
  9218                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9219                           
  9220  0464  0020               	movlb	0	; select bank0
  9221  0465  01B2               	clrf	___aldiv@sign
  9222  0466                     l3882:
  9223  0466  1FAB               	btfss	___aldiv@divisor+3,7
  9224  0467  2C69               	goto	u2411
  9225  0468  2C6A               	goto	u2410
  9226  0469                     u2411:
  9227  0469  2C77               	goto	l903
  9228  046A                     u2410:
  9229  046A                     l3884:
  9230  046A  09A8               	comf	___aldiv@divisor,f
  9231  046B  09A9               	comf	___aldiv@divisor+1,f
  9232  046C  09AA               	comf	___aldiv@divisor+2,f
  9233  046D  09AB               	comf	___aldiv@divisor+3,f
  9234  046E  0AA8               	incf	___aldiv@divisor,f
  9235  046F  1903               	skipnz
  9236  0470  0AA9               	incf	___aldiv@divisor+1,f
  9237  0471  1903               	skipnz
  9238  0472  0AAA               	incf	___aldiv@divisor+2,f
  9239  0473  1903               	skipnz
  9240  0474  0AAB               	incf	___aldiv@divisor+3,f
  9241  0475  01B2               	clrf	___aldiv@sign
  9242  0476  0AB2               	incf	___aldiv@sign,f
  9243  0477                     l903:
  9244  0477  1FAF               	btfss	___aldiv@dividend+3,7
  9245  0478  2C7A               	goto	u2421
  9246  0479  2C7B               	goto	u2420
  9247  047A                     u2421:
  9248  047A  2C8A               	goto	l3890
  9249  047B                     u2420:
  9250  047B                     l3886:
  9251  047B  09AC               	comf	___aldiv@dividend,f
  9252  047C  09AD               	comf	___aldiv@dividend+1,f
  9253  047D  09AE               	comf	___aldiv@dividend+2,f
  9254  047E  09AF               	comf	___aldiv@dividend+3,f
  9255  047F  0AAC               	incf	___aldiv@dividend,f
  9256  0480  1903               	skipnz
  9257  0481  0AAD               	incf	___aldiv@dividend+1,f
  9258  0482  1903               	skipnz
  9259  0483  0AAE               	incf	___aldiv@dividend+2,f
  9260  0484  1903               	skipnz
  9261  0485  0AAF               	incf	___aldiv@dividend+3,f
  9262  0486                     l3888:
  9263  0486  3001               	movlw	1
  9264  0487  00B0               	movwf	??___aldiv
  9265  0488  0830               	movf	??___aldiv,w
  9266  0489  06B2               	xorwf	___aldiv@sign,f
  9267  048A                     l3890:
  9268  048A  3000               	movlw	0
  9269  048B  00B6               	movwf	___aldiv@quotient+3
  9270  048C  3000               	movlw	0
  9271  048D  00B5               	movwf	___aldiv@quotient+2
  9272  048E  3000               	movlw	0
  9273  048F  00B4               	movwf	___aldiv@quotient+1
  9274  0490  3000               	movlw	0
  9275  0491  00B3               	movwf	___aldiv@quotient
  9276  0492                     l3892:
  9277  0492  082B               	movf	___aldiv@divisor+3,w
  9278  0493  042A               	iorwf	___aldiv@divisor+2,w
  9279  0494  0429               	iorwf	___aldiv@divisor+1,w
  9280  0495  0428               	iorwf	___aldiv@divisor,w
  9281  0496  1903               	skipnz
  9282  0497  2C99               	goto	u2431
  9283  0498  2C9A               	goto	u2430
  9284  0499                     u2431:
  9285  0499  2CDB               	goto	l3912
  9286  049A                     u2430:
  9287  049A                     l3894:
  9288  049A  01B1               	clrf	___aldiv@counter
  9289  049B  0AB1               	incf	___aldiv@counter,f
  9290  049C  2CA8               	goto	l3898
  9291  049D                     l3896:
  9292  049D  3001               	movlw	1
  9293  049E                     u2445:
  9294  049E  35A8               	lslf	___aldiv@divisor,f
  9295  049F  0DA9               	rlf	___aldiv@divisor+1,f
  9296  04A0  0DAA               	rlf	___aldiv@divisor+2,f
  9297  04A1  0DAB               	rlf	___aldiv@divisor+3,f
  9298  04A2  0B89               	decfsz	9,f
  9299  04A3  2C9E               	goto	u2445
  9300  04A4  3001               	movlw	1
  9301  04A5  00B0               	movwf	??___aldiv
  9302  04A6  0830               	movf	??___aldiv,w
  9303  04A7  07B1               	addwf	___aldiv@counter,f
  9304  04A8                     l3898:
  9305  04A8  1FAB               	btfss	___aldiv@divisor+3,7
  9306  04A9  2CAB               	goto	u2451
  9307  04AA  2CAC               	goto	u2450
  9308  04AB                     u2451:
  9309  04AB  2C9D               	goto	l3896
  9310  04AC                     u2450:
  9311  04AC                     l3900:
  9312  04AC  3001               	movlw	1
  9313  04AD                     u2465:
  9314  04AD  35B3               	lslf	___aldiv@quotient,f
  9315  04AE  0DB4               	rlf	___aldiv@quotient+1,f
  9316  04AF  0DB5               	rlf	___aldiv@quotient+2,f
  9317  04B0  0DB6               	rlf	___aldiv@quotient+3,f
  9318  04B1  0B89               	decfsz	9,f
  9319  04B2  2CAD               	goto	u2465
  9320  04B3                     l3902:
  9321  04B3  082B               	movf	___aldiv@divisor+3,w
  9322  04B4  022F               	subwf	___aldiv@dividend+3,w
  9323  04B5  1D03               	skipz
  9324  04B6  2CC1               	goto	u2475
  9325  04B7  082A               	movf	___aldiv@divisor+2,w
  9326  04B8  022E               	subwf	___aldiv@dividend+2,w
  9327  04B9  1D03               	skipz
  9328  04BA  2CC1               	goto	u2475
  9329  04BB  0829               	movf	___aldiv@divisor+1,w
  9330  04BC  022D               	subwf	___aldiv@dividend+1,w
  9331  04BD  1D03               	skipz
  9332  04BE  2CC1               	goto	u2475
  9333  04BF  0828               	movf	___aldiv@divisor,w
  9334  04C0  022C               	subwf	___aldiv@dividend,w
  9335  04C1                     u2475:
  9336  04C1  1C03               	skipc
  9337  04C2  2CC4               	goto	u2471
  9338  04C3  2CC5               	goto	u2470
  9339  04C4                     u2471:
  9340  04C4  2CCE               	goto	l3908
  9341  04C5                     u2470:
  9342  04C5                     l3904:
  9343  04C5  0828               	movf	___aldiv@divisor,w
  9344  04C6  02AC               	subwf	___aldiv@dividend,f
  9345  04C7  0829               	movf	___aldiv@divisor+1,w
  9346  04C8  3BAD               	subwfb	___aldiv@dividend+1,f
  9347  04C9  082A               	movf	___aldiv@divisor+2,w
  9348  04CA  3BAE               	subwfb	___aldiv@dividend+2,f
  9349  04CB  082B               	movf	___aldiv@divisor+3,w
  9350  04CC  3BAF               	subwfb	___aldiv@dividend+3,f
  9351  04CD                     l3906:
  9352  04CD  1433               	bsf	___aldiv@quotient,0
  9353  04CE                     l3908:
  9354  04CE  3001               	movlw	1
  9355  04CF                     u2485:
  9356  04CF  36AB               	lsrf	___aldiv@divisor+3,f
  9357  04D0  0CAA               	rrf	___aldiv@divisor+2,f
  9358  04D1  0CA9               	rrf	___aldiv@divisor+1,f
  9359  04D2  0CA8               	rrf	___aldiv@divisor,f
  9360  04D3  0B89               	decfsz	9,f
  9361  04D4  2CCF               	goto	u2485
  9362  04D5                     l3910:
  9363  04D5  3001               	movlw	1
  9364  04D6  02B1               	subwf	___aldiv@counter,f
  9365  04D7  1D03               	btfss	3,2
  9366  04D8  2CDA               	goto	u2491
  9367  04D9  2CDB               	goto	u2490
  9368  04DA                     u2491:
  9369  04DA  2CAC               	goto	l3900
  9370  04DB                     u2490:
  9371  04DB                     l3912:
  9372  04DB  0832               	movf	___aldiv@sign,w
  9373  04DC  1903               	btfsc	3,2
  9374  04DD  2CDF               	goto	u2501
  9375  04DE  2CE0               	goto	u2500
  9376  04DF                     u2501:
  9377  04DF  2CEB               	goto	l3916
  9378  04E0                     u2500:
  9379  04E0                     l3914:
  9380  04E0  09B3               	comf	___aldiv@quotient,f
  9381  04E1  09B4               	comf	___aldiv@quotient+1,f
  9382  04E2  09B5               	comf	___aldiv@quotient+2,f
  9383  04E3  09B6               	comf	___aldiv@quotient+3,f
  9384  04E4  0AB3               	incf	___aldiv@quotient,f
  9385  04E5  1903               	skipnz
  9386  04E6  0AB4               	incf	___aldiv@quotient+1,f
  9387  04E7  1903               	skipnz
  9388  04E8  0AB5               	incf	___aldiv@quotient+2,f
  9389  04E9  1903               	skipnz
  9390  04EA  0AB6               	incf	___aldiv@quotient+3,f
  9391  04EB                     l3916:
  9392  04EB  0836               	movf	___aldiv@quotient+3,w
  9393  04EC  00AB               	movwf	?___aldiv+3
  9394  04ED  0835               	movf	___aldiv@quotient+2,w
  9395  04EE  00AA               	movwf	?___aldiv+2
  9396  04EF  0834               	movf	___aldiv@quotient+1,w
  9397  04F0  00A9               	movwf	?___aldiv+1
  9398  04F1  0833               	movf	___aldiv@quotient,w
  9399  04F2  00A8               	movwf	?___aldiv
  9400  04F3                     l913:
  9401  04F3  0008               	return
  9402  04F4                     __end_of___aldiv:
  9403                           
  9404                           	psect	text28
  9405  0EF6                     __ptext28:	
  9406 ;; *************** function _initLED *****************
  9407 ;; Defined at:
  9408 ;;		line 173 in file "main.c"
  9409 ;; Parameters:    Size  Location     Type
  9410 ;;		None
  9411 ;; Auto vars:     Size  Location     Type
  9412 ;;		None
  9413 ;; Return value:  Size  Location     Type
  9414 ;;                  1    wreg      void 
  9415 ;; Registers used:
  9416 ;;		wreg, status,2, status,0
  9417 ;; Tracked objects:
  9418 ;;		On entry : 0/0
  9419 ;;		On exit  : 0/0
  9420 ;;		Unchanged: 0/0
  9421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9422 ;;      Params:         0       0       0       0       0       0       0       0
  9423 ;;      Locals:         0       0       0       0       0       0       0       0
  9424 ;;      Temps:          1       0       0       0       0       0       0       0
  9425 ;;      Totals:         1       0       0       0       0       0       0       0
  9426 ;;Total ram usage:        1 bytes
  9427 ;; Hardware stack levels used: 1
  9428 ;; Hardware stack levels required when called: 4
  9429 ;; This function calls:
  9430 ;;		Nothing
  9431 ;; This function is called by:
  9432 ;;		_main
  9433 ;; This function uses a non-reentrant model
  9434 ;;
  9435                           
  9436                           
  9437                           ;psect for function _initLED
  9438  0EF6                     _initLED:
  9439  0EF6                     l3256:	
  9440                           ;incstack = 0
  9441                           ; Regs used in _initLED: [wreg+status,2+status,0]
  9442                           
  9443                           
  9444                           ;main.c: 176:   PR2 = 255;
  9445  0EF6  30FF               	movlw	255
  9446  0EF7  0020               	movlb	0	; select bank0
  9447  0EF8  009B               	movwf	27	;volatile
  9448  0EF9                     l3258:
  9449                           
  9450                           ;main.c: 177:   T2CONbits.T2CKPS = 0b10;
  9451  0EF9  081C               	movf	28,w	;volatile
  9452  0EFA  39FC               	andlw	-4
  9453  0EFB  3802               	iorlw	2
  9454  0EFC  009C               	movwf	28	;volatile
  9455  0EFD                     l3260:
  9456                           
  9457                           ;main.c: 178:   T2CONbits.TMR2ON = 1;
  9458  0EFD  151C               	bsf	28,2	;volatile
  9459  0EFE                     l3262:
  9460                           
  9461                           ;main.c: 182:   TRISC |= 0b00010000;
  9462  0EFE  0021               	movlb	1	; select bank1
  9463  0EFF  160E               	bsf	14,4	;volatile
  9464  0F00                     l3264:
  9465                           
  9466                           ;main.c: 183:   RC4PPS = 0b01110;
  9467  0F00  300E               	movlw	14
  9468  0F01  003D               	movlb	29	; select bank29
  9469  0F02  00A4               	movwf	36	;volatile
  9470                           
  9471                           ;main.c: 184:   CCPTMRSbits.P3TSEL = 0b00;
  9472  0F03  30CF               	movlw	-49
  9473  0F04  0025               	movlb	5	; select bank5
  9474  0F05  059E               	andwf	30,f	;volatile
  9475  0F06                     l3266:
  9476                           
  9477                           ;main.c: 185:   PWM3DCH = 0;
  9478  0F06  002C               	movlb	12	; select bank12
  9479  0F07  0198               	clrf	24	;volatile
  9480  0F08                     l3268:
  9481                           
  9482                           ;main.c: 186:   PWM3DCLbits.PWM3DCL = 0;
  9483  0F08  303F               	movlw	-193
  9484  0F09  0597               	andwf	23,f	;volatile
  9485  0F0A                     l3270:
  9486                           
  9487                           ;main.c: 187:   PWM3CONbits.PWM3POL = 1;
  9488  0F0A  1619               	bsf	25,4	;volatile
  9489  0F0B                     l3272:
  9490                           
  9491                           ;main.c: 188:   TRISC &= 0b11101111;
  9492  0F0B  30EF               	movlw	239
  9493  0F0C  00F3               	movwf	??_initLED
  9494  0F0D  0873               	movf	??_initLED,w
  9495  0F0E  0021               	movlb	1	; select bank1
  9496  0F0F  058E               	andwf	14,f	;volatile
  9497  0F10                     l3274:
  9498                           
  9499                           ;main.c: 189:   PWM3CONbits.PWM3EN = 1;
  9500  0F10  002C               	movlb	12	; select bank12
  9501  0F11  1799               	bsf	25,7	;volatile
  9502  0F12                     l3276:
  9503                           
  9504                           ;main.c: 193:   TRISA |= 0b00100000;
  9505  0F12  0021               	movlb	1	; select bank1
  9506  0F13  168C               	bsf	12,5	;volatile
  9507  0F14                     l3278:
  9508                           
  9509                           ;main.c: 194:   RA5PPS = 0b01111;
  9510  0F14  300F               	movlw	15
  9511  0F15  003D               	movlb	29	; select bank29
  9512  0F16  0095               	movwf	21	;volatile
  9513  0F17                     l3280:
  9514                           
  9515                           ;main.c: 195:   CCPTMRSbits.P4TSEL = 0b00;
  9516  0F17  303F               	movlw	-193
  9517  0F18  0025               	movlb	5	; select bank5
  9518  0F19  059E               	andwf	30,f	;volatile
  9519  0F1A                     l3282:
  9520                           
  9521                           ;main.c: 196:   PWM4DCH = 0;
  9522  0F1A  002C               	movlb	12	; select bank12
  9523  0F1B  019B               	clrf	27	;volatile
  9524  0F1C                     l3284:
  9525                           
  9526                           ;main.c: 197:   PWM4DCLbits.PWM4DCL = 0;
  9527  0F1C  303F               	movlw	-193
  9528  0F1D  059A               	andwf	26,f	;volatile
  9529  0F1E                     l3286:
  9530                           
  9531                           ;main.c: 198:   PWM4CONbits.PWM4POL = 1;
  9532  0F1E  161C               	bsf	28,4	;volatile
  9533  0F1F                     l3288:
  9534                           
  9535                           ;main.c: 199:   TRISA &= 0b11011111;
  9536  0F1F  30DF               	movlw	223
  9537  0F20  00F3               	movwf	??_initLED
  9538  0F21  0873               	movf	??_initLED,w
  9539  0F22  0021               	movlb	1	; select bank1
  9540  0F23  058C               	andwf	12,f	;volatile
  9541  0F24                     l3290:
  9542                           
  9543                           ;main.c: 200:   PWM4CONbits.PWM4EN = 1;
  9544  0F24  002C               	movlb	12	; select bank12
  9545  0F25  179C               	bsf	28,7	;volatile
  9546  0F26                     l3292:
  9547                           
  9548                           ;main.c: 206:   TRISC |= 0b00100000;
  9549  0F26  0021               	movlb	1	; select bank1
  9550  0F27  168E               	bsf	14,5	;volatile
  9551                           
  9552                           ;main.c: 207:   RC5PPS = 0b01100;
  9553  0F28  300C               	movlw	12
  9554  0F29  003D               	movlb	29	; select bank29
  9555  0F2A  00A5               	movwf	37	;volatile
  9556  0F2B                     l3294:
  9557                           
  9558                           ;main.c: 208:   CCP1CONbits.CCP1M = 0b1100;
  9559  0F2B  0025               	movlb	5	; select bank5
  9560  0F2C  0813               	movf	19,w	;volatile
  9561  0F2D  39F0               	andlw	-16
  9562  0F2E  380C               	iorlw	12
  9563  0F2F  0093               	movwf	19	;volatile
  9564  0F30                     l3296:
  9565                           
  9566                           ;main.c: 209:   CCPR1L = 255;
  9567  0F30  30FF               	movlw	255
  9568  0F31  0091               	movwf	17	;volatile
  9569                           
  9570                           ;main.c: 210:   CCP1CONbits.DC1B = 0x3;
  9571  0F32  3030               	movlw	48
  9572  0F33  0493               	iorwf	19,f	;volatile
  9573                           
  9574                           ;main.c: 211:   TRISC &= 0b11011111;
  9575  0F34  30DF               	movlw	223
  9576  0F35  00F3               	movwf	??_initLED
  9577  0F36  0873               	movf	??_initLED,w
  9578  0F37  0021               	movlb	1	; select bank1
  9579  0F38  058E               	andwf	14,f	;volatile
  9580  0F39                     l647:
  9581  0F39  0008               	return
  9582  0F3A                     __end_of_initLED:
  9583                           
  9584                           	psect	text29
  9585  0CC4                     __ptext29:	
  9586 ;; *************** function _SYSTEM_Initialize *****************
  9587 ;; Defined at:
  9588 ;;		line 50 in file "mcc_generated_files/mcc.c"
  9589 ;; Parameters:    Size  Location     Type
  9590 ;;		None
  9591 ;; Auto vars:     Size  Location     Type
  9592 ;;		None
  9593 ;; Return value:  Size  Location     Type
  9594 ;;                  1    wreg      void 
  9595 ;; Registers used:
  9596 ;;		wreg, status,2, status,0, pclath, cstack
  9597 ;; Tracked objects:
  9598 ;;		On entry : 0/0
  9599 ;;		On exit  : 0/0
  9600 ;;		Unchanged: 0/0
  9601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9602 ;;      Params:         0       0       0       0       0       0       0       0
  9603 ;;      Locals:         0       0       0       0       0       0       0       0
  9604 ;;      Temps:          0       0       0       0       0       0       0       0
  9605 ;;      Totals:         0       0       0       0       0       0       0       0
  9606 ;;Total ram usage:        0 bytes
  9607 ;; Hardware stack levels used: 1
  9608 ;; Hardware stack levels required when called: 6
  9609 ;; This function calls:
  9610 ;;		_DAC_Initialize
  9611 ;;		_EUSART_Initialize
  9612 ;;		_EXT_INT_Initialize
  9613 ;;		_OPA1_Initialize
  9614 ;;		_OPA2_Initialize
  9615 ;;		_OSCILLATOR_Initialize
  9616 ;;		_PIN_MANAGER_Initialize
  9617 ;;		_TMR0_Initialize
  9618 ;;		_TMR1_Initialize
  9619 ;;		_TMR2_Initialize
  9620 ;;		_TMR4_Initialize
  9621 ;;		_WDT_Initialize
  9622 ;; This function is called by:
  9623 ;;		_main
  9624 ;; This function uses a non-reentrant model
  9625 ;;
  9626                           
  9627                           
  9628                           ;psect for function _SYSTEM_Initialize
  9629  0CC4                     _SYSTEM_Initialize:
  9630  0CC4                     l3194:	
  9631                           ;incstack = 0
  9632                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9633                           
  9634                           
  9635                           ;mcc_generated_files/mcc.c: 52:     PIN_MANAGER_Initialize();
  9636  0CC4  318D  25E0  318C   	fcall	_PIN_MANAGER_Initialize
  9637                           
  9638                           ;mcc_generated_files/mcc.c: 53:     OSCILLATOR_Initialize();
  9639  0CC7  318B  2331  318C   	fcall	_OSCILLATOR_Initialize
  9640  0CCA                     l3196:
  9641                           
  9642                           ;mcc_generated_files/mcc.c: 54:     WDT_Initialize();
  9643  0CCA  318A  22D5  318C   	fcall	_WDT_Initialize
  9644  0CCD                     l3198:
  9645                           
  9646                           ;mcc_generated_files/mcc.c: 55:     DAC_Initialize();
  9647  0CCD  318A  22EF  318C   	fcall	_DAC_Initialize
  9648  0CD0                     l3200:
  9649                           
  9650                           ;mcc_generated_files/mcc.c: 56:     OPA1_Initialize();
  9651  0CD0  318A  22D8  318C   	fcall	_OPA1_Initialize
  9652  0CD3                     l3202:
  9653                           
  9654                           ;mcc_generated_files/mcc.c: 57:     TMR4_Initialize();
  9655  0CD3  318B  23BD  318C   	fcall	_TMR4_Initialize
  9656  0CD6                     l3204:
  9657                           
  9658                           ;mcc_generated_files/mcc.c: 58:     OPA2_Initialize();
  9659  0CD6  318A  22DC  318C   	fcall	_OPA2_Initialize
  9660  0CD9                     l3206:
  9661                           
  9662                           ;mcc_generated_files/mcc.c: 59:     TMR1_Initialize();
  9663  0CD9  318C  2412  318C   	fcall	_TMR1_Initialize
  9664  0CDC                     l3208:
  9665                           
  9666                           ;mcc_generated_files/mcc.c: 60:     TMR2_Initialize();
  9667  0CDC  318B  2339  318C   	fcall	_TMR2_Initialize
  9668  0CDF                     l3210:
  9669                           
  9670                           ;mcc_generated_files/mcc.c: 61:     EXT_INT_Initialize();
  9671  0CDF  318B  2360  318C   	fcall	_EXT_INT_Initialize
  9672  0CE2                     l3212:
  9673                           
  9674                           ;mcc_generated_files/mcc.c: 62:     TMR0_Initialize();
  9675  0CE2  318B  2399  318C   	fcall	_TMR0_Initialize
  9676  0CE5                     l3214:
  9677                           
  9678                           ;mcc_generated_files/mcc.c: 63:     EUSART_Initialize();
  9679  0CE5  318C  2480  318C   	fcall	_EUSART_Initialize
  9680  0CE8                     l50:
  9681  0CE8  0008               	return
  9682  0CE9                     __end_of_SYSTEM_Initialize:
  9683                           
  9684                           	psect	text30
  9685  0AD5                     __ptext30:	
  9686 ;; *************** function _WDT_Initialize *****************
  9687 ;; Defined at:
  9688 ;;		line 78 in file "mcc_generated_files/mcc.c"
  9689 ;; Parameters:    Size  Location     Type
  9690 ;;		None
  9691 ;; Auto vars:     Size  Location     Type
  9692 ;;		None
  9693 ;; Return value:  Size  Location     Type
  9694 ;;                  1    wreg      void 
  9695 ;; Registers used:
  9696 ;;		status,2
  9697 ;; Tracked objects:
  9698 ;;		On entry : 0/0
  9699 ;;		On exit  : 0/0
  9700 ;;		Unchanged: 0/0
  9701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9702 ;;      Params:         0       0       0       0       0       0       0       0
  9703 ;;      Locals:         0       0       0       0       0       0       0       0
  9704 ;;      Temps:          0       0       0       0       0       0       0       0
  9705 ;;      Totals:         0       0       0       0       0       0       0       0
  9706 ;;Total ram usage:        0 bytes
  9707 ;; Hardware stack levels used: 1
  9708 ;; Hardware stack levels required when called: 4
  9709 ;; This function calls:
  9710 ;;		Nothing
  9711 ;; This function is called by:
  9712 ;;		_SYSTEM_Initialize
  9713 ;; This function uses a non-reentrant model
  9714 ;;
  9715                           
  9716                           
  9717                           ;psect for function _WDT_Initialize
  9718  0AD5                     _WDT_Initialize:
  9719  0AD5                     l2958:	
  9720                           ;incstack = 0
  9721                           ; Regs used in _WDT_Initialize: [status,2]
  9722                           
  9723                           
  9724                           ;mcc_generated_files/mcc.c: 81:     WDTCON = 0b00000000;
  9725  0AD5  0021               	movlb	1	; select bank1
  9726  0AD6  0197               	clrf	23	;volatile
  9727  0AD7                     l56:
  9728  0AD7  0008               	return
  9729  0AD8                     __end_of_WDT_Initialize:
  9730                           
  9731                           	psect	text31
  9732  0BBD                     __ptext31:	
  9733 ;; *************** function _TMR4_Initialize *****************
  9734 ;; Defined at:
  9735 ;;		line 65 in file "mcc_generated_files/tmr4.c"
  9736 ;; Parameters:    Size  Location     Type
  9737 ;;		None
  9738 ;; Auto vars:     Size  Location     Type
  9739 ;;		None
  9740 ;; Return value:  Size  Location     Type
  9741 ;;                  1    wreg      void 
  9742 ;; Registers used:
  9743 ;;		wreg, status,2, status,0, pclath, cstack
  9744 ;; Tracked objects:
  9745 ;;		On entry : 0/0
  9746 ;;		On exit  : 0/0
  9747 ;;		Unchanged: 0/0
  9748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9749 ;;      Params:         0       0       0       0       0       0       0       0
  9750 ;;      Locals:         0       0       0       0       0       0       0       0
  9751 ;;      Temps:          0       0       0       0       0       0       0       0
  9752 ;;      Totals:         0       0       0       0       0       0       0       0
  9753 ;;Total ram usage:        0 bytes
  9754 ;; Hardware stack levels used: 1
  9755 ;; Hardware stack levels required when called: 5
  9756 ;; This function calls:
  9757 ;;		_TMR4_SetInterruptHandler
  9758 ;; This function is called by:
  9759 ;;		_SYSTEM_Initialize
  9760 ;; This function uses a non-reentrant model
  9761 ;;
  9762                           
  9763                           
  9764                           ;psect for function _TMR4_Initialize
  9765  0BBD                     _TMR4_Initialize:
  9766  0BBD                     l2962:	
  9767                           ;incstack = 0
  9768                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9769                           
  9770                           
  9771                           ;mcc_generated_files/tmr4.c: 70:     PR4 = 0x04;
  9772  0BBD  3004               	movlw	4
  9773  0BBE  0028               	movlb	8	; select bank8
  9774  0BBF  0096               	movwf	22	;volatile
  9775  0BC0                     l2964:
  9776                           
  9777                           ;mcc_generated_files/tmr4.c: 73:     TMR4 = 0x00;
  9778  0BC0  0195               	clrf	21	;volatile
  9779  0BC1                     l2966:
  9780                           
  9781                           ;mcc_generated_files/tmr4.c: 76:     PIR2bits.TMR4IF = 0;
  9782  0BC1  0020               	movlb	0	; select bank0
  9783  0BC2  1092               	bcf	18,1	;volatile
  9784  0BC3                     l2968:
  9785                           
  9786                           ;mcc_generated_files/tmr4.c: 79:     PIE2bits.TMR4IE = 1;
  9787  0BC3  0021               	movlb	1	; select bank1
  9788  0BC4  1492               	bsf	18,1	;volatile
  9789  0BC5                     l2970:
  9790                           
  9791                           ;mcc_generated_files/tmr4.c: 82:     TMR4_SetInterruptHandler(TMR4_DefaultInterruptHandl
      +                          er);
  9792  0BC5  303A               	movlw	low _TMR4_DefaultInterruptHandler
  9793  0BC6  00F3               	movwf	TMR4_SetInterruptHandler@InterruptHandler
  9794  0BC7  300F               	movlw	high _TMR4_DefaultInterruptHandler
  9795  0BC8  00F4               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1
  9796  0BC9  318B  2319  318B   	fcall	_TMR4_SetInterruptHandler
  9797  0BCC                     l2972:
  9798                           
  9799                           ;mcc_generated_files/tmr4.c: 85:     T4CON = 0x16;
  9800  0BCC  3016               	movlw	22
  9801  0BCD  0028               	movlb	8	; select bank8
  9802  0BCE  0097               	movwf	23	;volatile
  9803  0BCF                     l396:
  9804  0BCF  0008               	return
  9805  0BD0                     __end_of_TMR4_Initialize:
  9806                           
  9807                           	psect	text32
  9808  0B19                     __ptext32:	
  9809 ;; *************** function _TMR4_SetInterruptHandler *****************
  9810 ;; Defined at:
  9811 ;;		line 133 in file "mcc_generated_files/tmr4.c"
  9812 ;; Parameters:    Size  Location     Type
  9813 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  9814 ;;		 -> TMR4_DefaultInterruptHandler(1), 
  9815 ;; Auto vars:     Size  Location     Type
  9816 ;;		None
  9817 ;; Return value:  Size  Location     Type
  9818 ;;                  1    wreg      void 
  9819 ;; Registers used:
  9820 ;;		wreg
  9821 ;; Tracked objects:
  9822 ;;		On entry : 0/0
  9823 ;;		On exit  : 0/0
  9824 ;;		Unchanged: 0/0
  9825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9826 ;;      Params:         2       0       0       0       0       0       0       0
  9827 ;;      Locals:         0       0       0       0       0       0       0       0
  9828 ;;      Temps:          0       0       0       0       0       0       0       0
  9829 ;;      Totals:         2       0       0       0       0       0       0       0
  9830 ;;Total ram usage:        2 bytes
  9831 ;; Hardware stack levels used: 1
  9832 ;; Hardware stack levels required when called: 4
  9833 ;; This function calls:
  9834 ;;		Nothing
  9835 ;; This function is called by:
  9836 ;;		_TMR4_Initialize
  9837 ;; This function uses a non-reentrant model
  9838 ;;
  9839                           
  9840                           
  9841                           ;psect for function _TMR4_SetInterruptHandler
  9842  0B19                     _TMR4_SetInterruptHandler:
  9843  0B19                     l2746:	
  9844                           ;incstack = 0
  9845                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
  9846                           
  9847                           
  9848                           ;mcc_generated_files/tmr4.c: 134:     TMR4_InterruptHandler = InterruptHandler;
  9849  0B19  0874               	movf	TMR4_SetInterruptHandler@InterruptHandler+1,w
  9850  0B1A  0021               	movlb	1	; select bank1
  9851  0B1B  00D9               	movwf	(_TMR4_InterruptHandler+1)^(0+128)
  9852  0B1C  0873               	movf	TMR4_SetInterruptHandler@InterruptHandler,w
  9853  0B1D  00D8               	movwf	_TMR4_InterruptHandler^(0+128)
  9854  0B1E                     l418:
  9855  0B1E  0008               	return
  9856  0B1F                     __end_of_TMR4_SetInterruptHandler:
  9857                           
  9858                           	psect	text33
  9859  0B39                     __ptext33:	
  9860 ;; *************** function _TMR2_Initialize *****************
  9861 ;; Defined at:
  9862 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  9863 ;; Parameters:    Size  Location     Type
  9864 ;;		None
  9865 ;; Auto vars:     Size  Location     Type
  9866 ;;		None
  9867 ;; Return value:  Size  Location     Type
  9868 ;;                  1    wreg      void 
  9869 ;; Registers used:
  9870 ;;		wreg, status,2
  9871 ;; Tracked objects:
  9872 ;;		On entry : 0/0
  9873 ;;		On exit  : 0/0
  9874 ;;		Unchanged: 0/0
  9875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9876 ;;      Params:         0       0       0       0       0       0       0       0
  9877 ;;      Locals:         0       0       0       0       0       0       0       0
  9878 ;;      Temps:          0       0       0       0       0       0       0       0
  9879 ;;      Totals:         0       0       0       0       0       0       0       0
  9880 ;;Total ram usage:        0 bytes
  9881 ;; Hardware stack levels used: 1
  9882 ;; Hardware stack levels required when called: 4
  9883 ;; This function calls:
  9884 ;;		Nothing
  9885 ;; This function is called by:
  9886 ;;		_SYSTEM_Initialize
  9887 ;; This function uses a non-reentrant model
  9888 ;;
  9889                           
  9890                           
  9891                           ;psect for function _TMR2_Initialize
  9892  0B39                     _TMR2_Initialize:
  9893  0B39                     l2988:	
  9894                           ;incstack = 0
  9895                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  9896                           
  9897                           
  9898                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 255;
  9899  0B39  30FF               	movlw	255
  9900  0B3A  0020               	movlb	0	; select bank0
  9901  0B3B  009B               	movwf	27	;volatile
  9902  0B3C                     l2990:
  9903                           
  9904                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  9905  0B3C  019A               	clrf	26	;volatile
  9906  0B3D                     l2992:
  9907                           
  9908                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  9909  0B3D  1091               	bcf	17,1	;volatile
  9910  0B3E                     l2994:
  9911                           
  9912                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x06;
  9913  0B3E  3006               	movlw	6
  9914  0B3F  009C               	movwf	28	;volatile
  9915  0B40                     l305:
  9916  0B40  0008               	return
  9917  0B41                     __end_of_TMR2_Initialize:
  9918                           
  9919                           	psect	text34
  9920  0C12                     __ptext34:	
  9921 ;; *************** function _TMR1_Initialize *****************
  9922 ;; Defined at:
  9923 ;;		line 65 in file "tmr1.c"
  9924 ;; Parameters:    Size  Location     Type
  9925 ;;		None
  9926 ;; Auto vars:     Size  Location     Type
  9927 ;;		None
  9928 ;; Return value:  Size  Location     Type
  9929 ;;                  1    wreg      void 
  9930 ;; Registers used:
  9931 ;;		wreg, status,2, status,0, pclath, cstack
  9932 ;; Tracked objects:
  9933 ;;		On entry : 0/0
  9934 ;;		On exit  : 0/0
  9935 ;;		Unchanged: 0/0
  9936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9937 ;;      Params:         0       0       0       0       0       0       0       0
  9938 ;;      Locals:         0       0       0       0       0       0       0       0
  9939 ;;      Temps:          0       0       0       0       0       0       0       0
  9940 ;;      Totals:         0       0       0       0       0       0       0       0
  9941 ;;Total ram usage:        0 bytes
  9942 ;; Hardware stack levels used: 1
  9943 ;; Hardware stack levels required when called: 5
  9944 ;; This function calls:
  9945 ;;		_TMR1_SetInterruptHandler
  9946 ;; This function is called by:
  9947 ;;		_SYSTEM_Initialize
  9948 ;; This function uses a non-reentrant model
  9949 ;;
  9950                           
  9951                           
  9952                           ;psect for function _TMR1_Initialize
  9953  0C12                     _TMR1_Initialize:
  9954  0C12                     l2976:	
  9955                           ;incstack = 0
  9956                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9957                           
  9958                           
  9959                           ;tmr1.c: 73:     TMR1 = 65528;
  9960  0C12  30FF               	movlw	255
  9961  0C13  0020               	movlb	0	; select bank0
  9962  0C14  0097               	movwf	23	;volatile
  9963  0C15  30F8               	movlw	248
  9964  0C16  0096               	movwf	22	;volatile
  9965  0C17                     l2978:
  9966                           
  9967                           ;tmr1.c: 76:     timer1ReloadVal= 65528;
  9968  0C17  30F8               	movlw	248
  9969  0C18  0021               	movlb	1	; select bank1
  9970  0C19  00D6               	movwf	_timer1ReloadVal^(0+128)	;volatile
  9971  0C1A  30FF               	movlw	255
  9972  0C1B  00D7               	movwf	(_timer1ReloadVal^(0+128)+1)	;volatile
  9973  0C1C                     l2980:
  9974                           
  9975                           ;tmr1.c: 79:     PIR1bits.TMR1IF = 0;
  9976  0C1C  0020               	movlb	0	; select bank0
  9977  0C1D  1011               	bcf	17,0	;volatile
  9978  0C1E                     l2982:
  9979                           
  9980                           ;tmr1.c: 82:     PIE1bits.TMR1IE = 1;
  9981  0C1E  0021               	movlb	1	; select bank1
  9982  0C1F  1411               	bsf	17,0	;volatile
  9983  0C20                     l2984:
  9984                           
  9985                           ;tmr1.c: 84:     T1CONbits.TMR1ON = 0;
  9986  0C20  0020               	movlb	0	; select bank0
  9987  0C21  1018               	bcf	24,0	;volatile
  9988  0C22                     l2986:
  9989                           
  9990                           ;tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  9991  0C22  3041               	movlw	low _TMR1_DefaultInterruptHandler
  9992  0C23  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  9993  0C24  300B               	movlw	high _TMR1_DefaultInterruptHandler
  9994  0C25  00F4               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  9995  0C26  318B  2313  318C   	fcall	_TMR1_SetInterruptHandler
  9996  0C29                     l499:
  9997  0C29  0008               	return
  9998  0C2A                     __end_of_TMR1_Initialize:
  9999                           
 10000                           	psect	text35
 10001  0B13                     __ptext35:	
 10002 ;; *************** function _TMR1_SetInterruptHandler *****************
 10003 ;; Defined at:
 10004 ;;		line 128 in file "tmr1.c"
 10005 ;; Parameters:    Size  Location     Type
 10006 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
 10007 ;;		 -> TMR1_DefaultInterruptHandler(1), 
 10008 ;; Auto vars:     Size  Location     Type
 10009 ;;		None
 10010 ;; Return value:  Size  Location     Type
 10011 ;;                  1    wreg      void 
 10012 ;; Registers used:
 10013 ;;		wreg
 10014 ;; Tracked objects:
 10015 ;;		On entry : 0/0
 10016 ;;		On exit  : 0/0
 10017 ;;		Unchanged: 0/0
 10018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10019 ;;      Params:         2       0       0       0       0       0       0       0
 10020 ;;      Locals:         0       0       0       0       0       0       0       0
 10021 ;;      Temps:          0       0       0       0       0       0       0       0
 10022 ;;      Totals:         2       0       0       0       0       0       0       0
 10023 ;;Total ram usage:        2 bytes
 10024 ;; Hardware stack levels used: 1
 10025 ;; Hardware stack levels required when called: 4
 10026 ;; This function calls:
 10027 ;;		Nothing
 10028 ;; This function is called by:
 10029 ;;		_TMR1_Initialize
 10030 ;; This function uses a non-reentrant model
 10031 ;;
 10032                           
 10033                           
 10034                           ;psect for function _TMR1_SetInterruptHandler
 10035  0B13                     _TMR1_SetInterruptHandler:
 10036  0B13                     l2800:	
 10037                           ;incstack = 0
 10038                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 10039                           
 10040                           
 10041                           ;tmr1.c: 129:     TMR1_InterruptHandler = InterruptHandler;
 10042  0B13  0874               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 10043  0B14  0021               	movlb	1	; select bank1
 10044  0B15  00D5               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
 10045  0B16  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 10046  0B17  00D4               	movwf	_TMR1_InterruptHandler^(0+128)
 10047  0B18                     l515:
 10048  0B18  0008               	return
 10049  0B19                     __end_of_TMR1_SetInterruptHandler:
 10050                           
 10051                           	psect	text36
 10052  0B99                     __ptext36:	
 10053 ;; *************** function _TMR0_Initialize *****************
 10054 ;; Defined at:
 10055 ;;		line 65 in file "mcc_generated_files/tmr0.c"
 10056 ;; Parameters:    Size  Location     Type
 10057 ;;		None
 10058 ;; Auto vars:     Size  Location     Type
 10059 ;;		None
 10060 ;; Return value:  Size  Location     Type
 10061 ;;                  1    wreg      void 
 10062 ;; Registers used:
 10063 ;;		wreg, status,2, status,0, pclath, cstack
 10064 ;; Tracked objects:
 10065 ;;		On entry : 0/0
 10066 ;;		On exit  : 0/0
 10067 ;;		Unchanged: 0/0
 10068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10069 ;;      Params:         0       0       0       0       0       0       0       0
 10070 ;;      Locals:         0       0       0       0       0       0       0       0
 10071 ;;      Temps:          0       0       0       0       0       0       0       0
 10072 ;;      Totals:         0       0       0       0       0       0       0       0
 10073 ;;Total ram usage:        0 bytes
 10074 ;; Hardware stack levels used: 1
 10075 ;; Hardware stack levels required when called: 5
 10076 ;; This function calls:
 10077 ;;		_TMR0_SetInterruptHandler
 10078 ;; This function is called by:
 10079 ;;		_SYSTEM_Initialize
 10080 ;; This function uses a non-reentrant model
 10081 ;;
 10082                           
 10083                           
 10084                           ;psect for function _TMR0_Initialize
 10085  0B99                     _TMR0_Initialize:
 10086  0B99                     l3002:	
 10087                           ;incstack = 0
 10088                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10089                           
 10090                           
 10091                           ;mcc_generated_files/tmr0.c: 70:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD5 
      +                          & 0x3F));
 10092  0B99  0021               	movlb	1	; select bank1
 10093  0B9A  0815               	movf	21,w	;volatile
 10094  0B9B  39C0               	andlw	192
 10095  0B9C  3815               	iorlw	21
 10096  0B9D  0095               	movwf	21	;volatile
 10097  0B9E                     l3004:
 10098                           
 10099                           ;mcc_generated_files/tmr0.c: 73:     TMR0 = 0x00;
 10100  0B9E  0020               	movlb	0	; select bank0
 10101  0B9F  0195               	clrf	21	;volatile
 10102  0BA0                     l3006:
 10103                           
 10104                           ;mcc_generated_files/tmr0.c: 76:     timer0ReloadVal= 0x00;
 10105  0BA0  01F9               	clrf	_timer0ReloadVal	;volatile
 10106  0BA1                     l3008:
 10107                           
 10108                           ;mcc_generated_files/tmr0.c: 79:     INTCONbits.TMR0IF = 0;
 10109  0BA1  110B               	bcf	11,2	;volatile
 10110  0BA2                     l3010:
 10111                           
 10112                           ;mcc_generated_files/tmr0.c: 82:     INTCONbits.TMR0IE = 0;
 10113  0BA2  128B               	bcf	11,5	;volatile
 10114  0BA3                     l3012:
 10115                           
 10116                           ;mcc_generated_files/tmr0.c: 85:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
 10117  0BA3  3002               	movlw	low _TMR0_DefaultInterruptHandler
 10118  0BA4  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 10119  0BA5  3000               	movlw	high _TMR0_DefaultInterruptHandler
 10120  0BA6  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 10121  0BA7  318B  230D  318B   	fcall	_TMR0_SetInterruptHandler
 10122  0BAA                     l346:
 10123  0BAA  0008               	return
 10124  0BAB                     __end_of_TMR0_Initialize:
 10125                           
 10126                           	psect	text37
 10127  0B0D                     __ptext37:	
 10128 ;; *************** function _TMR0_SetInterruptHandler *****************
 10129 ;; Defined at:
 10130 ;;		line 126 in file "mcc_generated_files/tmr0.c"
 10131 ;; Parameters:    Size  Location     Type
 10132 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
 10133 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 10134 ;; Auto vars:     Size  Location     Type
 10135 ;;		None
 10136 ;; Return value:  Size  Location     Type
 10137 ;;                  1    wreg      void 
 10138 ;; Registers used:
 10139 ;;		wreg
 10140 ;; Tracked objects:
 10141 ;;		On entry : 0/0
 10142 ;;		On exit  : 0/0
 10143 ;;		Unchanged: 0/0
 10144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10145 ;;      Params:         2       0       0       0       0       0       0       0
 10146 ;;      Locals:         0       0       0       0       0       0       0       0
 10147 ;;      Temps:          0       0       0       0       0       0       0       0
 10148 ;;      Totals:         2       0       0       0       0       0       0       0
 10149 ;;Total ram usage:        2 bytes
 10150 ;; Hardware stack levels used: 1
 10151 ;; Hardware stack levels required when called: 4
 10152 ;; This function calls:
 10153 ;;		Nothing
 10154 ;; This function is called by:
 10155 ;;		_TMR0_Initialize
 10156 ;; This function uses a non-reentrant model
 10157 ;;
 10158                           
 10159                           
 10160                           ;psect for function _TMR0_SetInterruptHandler
 10161  0B0D                     _TMR0_SetInterruptHandler:
 10162  0B0D                     l2744:	
 10163                           ;incstack = 0
 10164                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 10165                           
 10166                           
 10167                           ;mcc_generated_files/tmr0.c: 127:     TMR0_InterruptHandler = InterruptHandler;
 10168  0B0D  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 10169  0B0E  0021               	movlb	1	; select bank1
 10170  0B0F  00DB               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
 10171  0B10  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 10172  0B11  00DA               	movwf	_TMR0_InterruptHandler^(0+128)
 10173  0B12                     l362:
 10174  0B12  0008               	return
 10175  0B13                     __end_of_TMR0_SetInterruptHandler:
 10176                           
 10177                           	psect	text38
 10178  0DE0                     __ptext38:	
 10179 ;; *************** function _PIN_MANAGER_Initialize *****************
 10180 ;; Defined at:
 10181 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 10182 ;; Parameters:    Size  Location     Type
 10183 ;;		None
 10184 ;; Auto vars:     Size  Location     Type
 10185 ;;		None
 10186 ;; Return value:  Size  Location     Type
 10187 ;;                  1    wreg      void 
 10188 ;; Registers used:
 10189 ;;		wreg, status,2
 10190 ;; Tracked objects:
 10191 ;;		On entry : 0/0
 10192 ;;		On exit  : 0/0
 10193 ;;		Unchanged: 0/0
 10194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10195 ;;      Params:         0       0       0       0       0       0       0       0
 10196 ;;      Locals:         0       0       0       0       0       0       0       0
 10197 ;;      Temps:          0       0       0       0       0       0       0       0
 10198 ;;      Totals:         0       0       0       0       0       0       0       0
 10199 ;;Total ram usage:        0 bytes
 10200 ;; Hardware stack levels used: 1
 10201 ;; Hardware stack levels required when called: 4
 10202 ;; This function calls:
 10203 ;;		Nothing
 10204 ;; This function is called by:
 10205 ;;		_SYSTEM_Initialize
 10206 ;; This function uses a non-reentrant model
 10207 ;;
 10208                           
 10209                           
 10210                           ;psect for function _PIN_MANAGER_Initialize
 10211  0DE0                     _PIN_MANAGER_Initialize:
 10212  0DE0                     l2920:	
 10213                           ;incstack = 0
 10214                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 10215                           
 10216                           
 10217                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
 10218  0DE0  0022               	movlb	2	; select bank2
 10219  0DE1  018C               	clrf	12	;volatile
 10220                           
 10221                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
 10222  0DE2  018D               	clrf	13	;volatile
 10223                           
 10224                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 10225  0DE3  018E               	clrf	14	;volatile
 10226  0DE4                     l2922:
 10227                           
 10228                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x04;
 10229  0DE4  3004               	movlw	4
 10230  0DE5  0021               	movlb	1	; select bank1
 10231  0DE6  008C               	movwf	12	;volatile
 10232  0DE7                     l2924:
 10233                           
 10234                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x30;
 10235  0DE7  3030               	movlw	48
 10236  0DE8  008D               	movwf	13	;volatile
 10237  0DE9                     l2926:
 10238                           
 10239                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x50;
 10240  0DE9  3050               	movlw	80
 10241  0DEA  008E               	movwf	14	;volatile
 10242  0DEB                     l2928:
 10243                           
 10244                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x40;
 10245  0DEB  3040               	movlw	64
 10246  0DEC  0023               	movlb	3	; select bank3
 10247  0DED  008E               	movwf	14	;volatile
 10248  0DEE                     l2930:
 10249                           
 10250                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x10;
 10251  0DEE  3010               	movlw	16
 10252  0DEF  008D               	movwf	13	;volatile
 10253  0DF0                     l2932:
 10254                           
 10255                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x00;
 10256  0DF0  018C               	clrf	12	;volatile
 10257  0DF1                     l2934:
 10258                           
 10259                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
 10260  0DF1  0024               	movlb	4	; select bank4
 10261  0DF2  018D               	clrf	13	;volatile
 10262  0DF3                     l2936:
 10263                           
 10264                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
 10265  0DF3  018C               	clrf	12	;volatile
 10266  0DF4                     l2938:
 10267                           
 10268                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x00;
 10269  0DF4  018E               	clrf	14	;volatile
 10270  0DF5                     l2940:
 10271                           
 10272                           ;mcc_generated_files/pin_manager.c: 84:     OPTION_REGbits.nWPUEN = 0;
 10273  0DF5  0021               	movlb	1	; select bank1
 10274  0DF6  1395               	bcf	21,7	;volatile
 10275  0DF7                     l2942:
 10276                           
 10277                           ;mcc_generated_files/pin_manager.c: 89:     ODCONA = 0x00;
 10278  0DF7  0025               	movlb	5	; select bank5
 10279  0DF8  018C               	clrf	12	;volatile
 10280  0DF9                     l2944:
 10281                           
 10282                           ;mcc_generated_files/pin_manager.c: 90:     ODCONB = 0x00;
 10283  0DF9  018D               	clrf	13	;volatile
 10284  0DFA                     l2946:
 10285                           
 10286                           ;mcc_generated_files/pin_manager.c: 91:     ODCONC = 0x00;
 10287  0DFA  018E               	clrf	14	;volatile
 10288                           
 10289                           ;mcc_generated_files/pin_manager.c: 96:     SLRCONA = 0x37;
 10290  0DFB  3037               	movlw	55
 10291  0DFC  0026               	movlb	6	; select bank6
 10292  0DFD  008C               	movwf	12	;volatile
 10293                           
 10294                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONB = 0xF0;
 10295  0DFE  30F0               	movlw	240
 10296  0DFF  008D               	movwf	13	;volatile
 10297                           
 10298                           ;mcc_generated_files/pin_manager.c: 98:     SLRCONC = 0xFF;
 10299  0E00  30FF               	movlw	255
 10300  0E01  008E               	movwf	14	;volatile
 10301                           
 10302                           ;mcc_generated_files/pin_manager.c: 103:     INLVLA = 0x3F;
 10303  0E02  303F               	movlw	63
 10304  0E03  0027               	movlb	7	; select bank7
 10305  0E04  008C               	movwf	12	;volatile
 10306                           
 10307                           ;mcc_generated_files/pin_manager.c: 104:     INLVLB = 0xF0;
 10308  0E05  30F0               	movlw	240
 10309  0E06  008D               	movwf	13	;volatile
 10310                           
 10311                           ;mcc_generated_files/pin_manager.c: 105:     INLVLC = 0xFF;
 10312  0E07  30FF               	movlw	255
 10313  0E08  008E               	movwf	14	;volatile
 10314  0E09                     l2948:
 10315                           
 10316                           ;mcc_generated_files/pin_manager.c: 113:     INTCONbits.IOCIE = 1;
 10317  0E09  158B               	bsf	11,3	;volatile
 10318                           
 10319                           ;mcc_generated_files/pin_manager.c: 116:     INTPPS = 0x02;
 10320  0E0A  3002               	movlw	2
 10321  0E0B  003C               	movlb	28	; select bank28
 10322  0E0C  0090               	movwf	16	;volatile
 10323                           
 10324                           ;mcc_generated_files/pin_manager.c: 117:     RXPPS = 0x0D;
 10325  0E0D  300D               	movlw	13
 10326  0E0E  00A4               	movwf	36	;volatile
 10327                           
 10328                           ;mcc_generated_files/pin_manager.c: 118:     RB7PPS = 0x14;
 10329  0E0F  3014               	movlw	20
 10330  0E10  003D               	movlb	29	; select bank29
 10331  0E11  009F               	movwf	31	;volatile
 10332  0E12                     l111:
 10333  0E12  0008               	return
 10334  0E13                     __end_of_PIN_MANAGER_Initialize:
 10335                           
 10336                           	psect	text39
 10337  0B31                     __ptext39:	
 10338 ;; *************** function _OSCILLATOR_Initialize *****************
 10339 ;; Defined at:
 10340 ;;		line 66 in file "mcc_generated_files/mcc.c"
 10341 ;; Parameters:    Size  Location     Type
 10342 ;;		None
 10343 ;; Auto vars:     Size  Location     Type
 10344 ;;		None
 10345 ;; Return value:  Size  Location     Type
 10346 ;;                  1    wreg      void 
 10347 ;; Registers used:
 10348 ;;		wreg, status,2
 10349 ;; Tracked objects:
 10350 ;;		On entry : 0/0
 10351 ;;		On exit  : 0/0
 10352 ;;		Unchanged: 0/0
 10353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10354 ;;      Params:         0       0       0       0       0       0       0       0
 10355 ;;      Locals:         0       0       0       0       0       0       0       0
 10356 ;;      Temps:          0       0       0       0       0       0       0       0
 10357 ;;      Totals:         0       0       0       0       0       0       0       0
 10358 ;;Total ram usage:        0 bytes
 10359 ;; Hardware stack levels used: 1
 10360 ;; Hardware stack levels required when called: 4
 10361 ;; This function calls:
 10362 ;;		Nothing
 10363 ;; This function is called by:
 10364 ;;		_SYSTEM_Initialize
 10365 ;; This function uses a non-reentrant model
 10366 ;;
 10367                           
 10368                           
 10369                           ;psect for function _OSCILLATOR_Initialize
 10370  0B31                     _OSCILLATOR_Initialize:
 10371  0B31                     l2950:	
 10372                           ;incstack = 0
 10373                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10374                           
 10375                           
 10376                           ;mcc_generated_files/mcc.c: 69:     OSCCON = 0x6A;
 10377  0B31  306A               	movlw	106
 10378  0B32  0021               	movlb	1	; select bank1
 10379  0B33  0099               	movwf	25	;volatile
 10380  0B34                     l2952:
 10381                           
 10382                           ;mcc_generated_files/mcc.c: 71:     OSCSTAT = 0x00;
 10383  0B34  019A               	clrf	26	;volatile
 10384  0B35                     l2954:
 10385                           
 10386                           ;mcc_generated_files/mcc.c: 73:     OSCTUNE = 0x00;
 10387  0B35  0198               	clrf	24	;volatile
 10388  0B36                     l2956:
 10389                           
 10390                           ;mcc_generated_files/mcc.c: 75:     BORCON = 0x00;
 10391  0B36  0022               	movlb	2	; select bank2
 10392  0B37  0196               	clrf	22	;volatile
 10393  0B38                     l53:
 10394  0B38  0008               	return
 10395  0B39                     __end_of_OSCILLATOR_Initialize:
 10396                           
 10397                           	psect	text40
 10398  0ADC                     __ptext40:	
 10399 ;; *************** function _OPA2_Initialize *****************
 10400 ;; Defined at:
 10401 ;;		line 58 in file "mcc_generated_files/opa2.c"
 10402 ;; Parameters:    Size  Location     Type
 10403 ;;		None
 10404 ;; Auto vars:     Size  Location     Type
 10405 ;;		None
 10406 ;; Return value:  Size  Location     Type
 10407 ;;                  1    wreg      void 
 10408 ;; Registers used:
 10409 ;;		wreg
 10410 ;; Tracked objects:
 10411 ;;		On entry : 0/0
 10412 ;;		On exit  : 0/0
 10413 ;;		Unchanged: 0/0
 10414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10415 ;;      Params:         0       0       0       0       0       0       0       0
 10416 ;;      Locals:         0       0       0       0       0       0       0       0
 10417 ;;      Temps:          0       0       0       0       0       0       0       0
 10418 ;;      Totals:         0       0       0       0       0       0       0       0
 10419 ;;Total ram usage:        0 bytes
 10420 ;; Hardware stack levels used: 1
 10421 ;; Hardware stack levels required when called: 4
 10422 ;; This function calls:
 10423 ;;		Nothing
 10424 ;; This function is called by:
 10425 ;;		_SYSTEM_Initialize
 10426 ;;		_main
 10427 ;; This function uses a non-reentrant model
 10428 ;;
 10429                           
 10430                           
 10431                           ;psect for function _OPA2_Initialize
 10432  0ADC                     _OPA2_Initialize:
 10433  0ADC                     l2974:	
 10434                           ;incstack = 0
 10435                           ; Regs used in _OPA2_Initialize: [wreg]
 10436                           
 10437                           
 10438                           ;mcc_generated_files/opa2.c: 61:     OPA2CON = 0xC2;
 10439  0ADC  30C2               	movlw	194
 10440  0ADD  002A               	movlb	10	; select bank10
 10441  0ADE  0095               	movwf	21	;volatile
 10442  0ADF                     l329:
 10443  0ADF  0008               	return
 10444  0AE0                     __end_of_OPA2_Initialize:
 10445                           
 10446                           	psect	text41
 10447  0AD8                     __ptext41:	
 10448 ;; *************** function _OPA1_Initialize *****************
 10449 ;; Defined at:
 10450 ;;		line 58 in file "mcc_generated_files/opa1.c"
 10451 ;; Parameters:    Size  Location     Type
 10452 ;;		None
 10453 ;; Auto vars:     Size  Location     Type
 10454 ;;		None
 10455 ;; Return value:  Size  Location     Type
 10456 ;;                  1    wreg      void 
 10457 ;; Registers used:
 10458 ;;		wreg
 10459 ;; Tracked objects:
 10460 ;;		On entry : 0/0
 10461 ;;		On exit  : 0/0
 10462 ;;		Unchanged: 0/0
 10463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10464 ;;      Params:         0       0       0       0       0       0       0       0
 10465 ;;      Locals:         0       0       0       0       0       0       0       0
 10466 ;;      Temps:          0       0       0       0       0       0       0       0
 10467 ;;      Totals:         0       0       0       0       0       0       0       0
 10468 ;;Total ram usage:        0 bytes
 10469 ;; Hardware stack levels used: 1
 10470 ;; Hardware stack levels required when called: 4
 10471 ;; This function calls:
 10472 ;;		Nothing
 10473 ;; This function is called by:
 10474 ;;		_SYSTEM_Initialize
 10475 ;;		_main
 10476 ;; This function uses a non-reentrant model
 10477 ;;
 10478                           
 10479                           
 10480                           ;psect for function _OPA1_Initialize
 10481  0AD8                     _OPA1_Initialize:
 10482  0AD8                     l2960:	
 10483                           ;incstack = 0
 10484                           ; Regs used in _OPA1_Initialize: [wreg]
 10485                           
 10486                           
 10487                           ;mcc_generated_files/opa1.c: 61:     OPA1CON = 0xC2;
 10488  0AD8  30C2               	movlw	194
 10489  0AD9  002A               	movlb	10	; select bank10
 10490  0ADA  0091               	movwf	17	;volatile
 10491  0ADB                     l119:
 10492  0ADB  0008               	return
 10493  0ADC                     __end_of_OPA1_Initialize:
 10494                           
 10495                           	psect	text42
 10496  0B60                     __ptext42:	
 10497 ;; *************** function _EXT_INT_Initialize *****************
 10498 ;; Defined at:
 10499 ;;		line 138 in file "mcc_generated_files/ext_int.c"
 10500 ;; Parameters:    Size  Location     Type
 10501 ;;		None
 10502 ;; Auto vars:     Size  Location     Type
 10503 ;;		None
 10504 ;; Return value:  Size  Location     Type
 10505 ;;                  1    wreg      void 
 10506 ;; Registers used:
 10507 ;;		wreg, status,2, status,0, pclath, cstack
 10508 ;; Tracked objects:
 10509 ;;		On entry : 0/0
 10510 ;;		On exit  : 0/0
 10511 ;;		Unchanged: 0/0
 10512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10513 ;;      Params:         0       0       0       0       0       0       0       0
 10514 ;;      Locals:         0       0       0       0       0       0       0       0
 10515 ;;      Temps:          0       0       0       0       0       0       0       0
 10516 ;;      Totals:         0       0       0       0       0       0       0       0
 10517 ;;Total ram usage:        0 bytes
 10518 ;; Hardware stack levels used: 1
 10519 ;; Hardware stack levels required when called: 5
 10520 ;; This function calls:
 10521 ;;		_INT_SetInterruptHandler
 10522 ;; This function is called by:
 10523 ;;		_SYSTEM_Initialize
 10524 ;; This function uses a non-reentrant model
 10525 ;;
 10526                           
 10527                           
 10528                           ;psect for function _EXT_INT_Initialize
 10529  0B60                     _EXT_INT_Initialize:
 10530  0B60                     l2996:	
 10531                           ;incstack = 0
 10532                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10533                           
 10534                           
 10535                           ;mcc_generated_files/ext_int.c: 143:     (INTCONbits.INTF = 0);
 10536  0B60  108B               	bcf	11,1	;volatile
 10537                           
 10538                           ;mcc_generated_files/ext_int.c: 144:     (OPTION_REGbits.INTEDG = 0);
 10539  0B61  0021               	movlb	1	; select bank1
 10540  0B62  1315               	bcf	21,6	;volatile
 10541  0B63                     l2998:
 10542                           
 10543                           ;mcc_generated_files/ext_int.c: 146:     INT_SetInterruptHandler(INT_DefaultInterruptHan
      +                          dler);
 10544  0B63  3063               	movlw	low _INT_DefaultInterruptHandler
 10545  0B64  00F3               	movwf	INT_SetInterruptHandler@InterruptHandler
 10546  0B65  3006               	movlw	high _INT_DefaultInterruptHandler
 10547  0B66  00F4               	movwf	INT_SetInterruptHandler@InterruptHandler+1
 10548  0B67  318B  2307  318B   	fcall	_INT_SetInterruptHandler
 10549  0B6A                     l3000:
 10550                           
 10551                           ;mcc_generated_files/ext_int.c: 147:     (INTCONbits.INTE = 1);
 10552  0B6A  160B               	bsf	11,4	;volatile
 10553  0B6B                     l292:
 10554  0B6B  0008               	return
 10555  0B6C                     __end_of_EXT_INT_Initialize:
 10556                           
 10557                           	psect	text43
 10558  0B07                     __ptext43:	
 10559 ;; *************** function _INT_SetInterruptHandler *****************
 10560 ;; Defined at:
 10561 ;;		line 71 in file "mcc_generated_files/ext_int.c"
 10562 ;; Parameters:    Size  Location     Type
 10563 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
 10564 ;;		 -> INT_DefaultInterruptHandler(1), 
 10565 ;; Auto vars:     Size  Location     Type
 10566 ;;		None
 10567 ;; Return value:  Size  Location     Type
 10568 ;;                  1    wreg      void 
 10569 ;; Registers used:
 10570 ;;		wreg
 10571 ;; Tracked objects:
 10572 ;;		On entry : 0/0
 10573 ;;		On exit  : 0/0
 10574 ;;		Unchanged: 0/0
 10575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10576 ;;      Params:         2       0       0       0       0       0       0       0
 10577 ;;      Locals:         0       0       0       0       0       0       0       0
 10578 ;;      Temps:          0       0       0       0       0       0       0       0
 10579 ;;      Totals:         2       0       0       0       0       0       0       0
 10580 ;;Total ram usage:        2 bytes
 10581 ;; Hardware stack levels used: 1
 10582 ;; Hardware stack levels required when called: 4
 10583 ;; This function calls:
 10584 ;;		Nothing
 10585 ;; This function is called by:
 10586 ;;		_EXT_INT_Initialize
 10587 ;; This function uses a non-reentrant model
 10588 ;;
 10589                           
 10590                           
 10591                           ;psect for function _INT_SetInterruptHandler
 10592  0B07                     _INT_SetInterruptHandler:
 10593  0B07                     l2688:	
 10594                           ;incstack = 0
 10595                           ; Regs used in _INT_SetInterruptHandler: [wreg]
 10596                           
 10597                           
 10598                           ;mcc_generated_files/ext_int.c: 72:     INT_InterruptHandler = InterruptHandler;
 10599  0B07  0874               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
 10600  0B08  0021               	movlb	1	; select bank1
 10601  0B09  00DD               	movwf	(_INT_InterruptHandler+1)^(0+128)
 10602  0B0A  0873               	movf	INT_SetInterruptHandler@InterruptHandler,w
 10603  0B0B  00DC               	movwf	_INT_InterruptHandler^(0+128)
 10604  0B0C                     l271:
 10605  0B0C  0008               	return
 10606  0B0D                     __end_of_INT_SetInterruptHandler:
 10607                           
 10608                           	psect	text44
 10609  0C80                     __ptext44:	
 10610 ;; *************** function _EUSART_Initialize *****************
 10611 ;; Defined at:
 10612 ;;		line 66 in file "mcc_generated_files/eusart.c"
 10613 ;; Parameters:    Size  Location     Type
 10614 ;;		None
 10615 ;; Auto vars:     Size  Location     Type
 10616 ;;		None
 10617 ;; Return value:  Size  Location     Type
 10618 ;;                  1    wreg      void 
 10619 ;; Registers used:
 10620 ;;		wreg, status,2, status,0, pclath, cstack
 10621 ;; Tracked objects:
 10622 ;;		On entry : 0/0
 10623 ;;		On exit  : 0/0
 10624 ;;		Unchanged: 0/0
 10625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10626 ;;      Params:         0       0       0       0       0       0       0       0
 10627 ;;      Locals:         0       0       0       0       0       0       0       0
 10628 ;;      Temps:          0       0       0       0       0       0       0       0
 10629 ;;      Totals:         0       0       0       0       0       0       0       0
 10630 ;;Total ram usage:        0 bytes
 10631 ;; Hardware stack levels used: 1
 10632 ;; Hardware stack levels required when called: 5
 10633 ;; This function calls:
 10634 ;;		_EUSART_SetErrorHandler
 10635 ;;		_EUSART_SetFramingErrorHandler
 10636 ;;		_EUSART_SetOverrunErrorHandler
 10637 ;; This function is called by:
 10638 ;;		_SYSTEM_Initialize
 10639 ;; This function uses a non-reentrant model
 10640 ;;
 10641                           
 10642                           
 10643                           ;psect for function _EUSART_Initialize
 10644  0C80                     _EUSART_Initialize:
 10645  0C80                     l3014:	
 10646                           ;incstack = 0
 10647                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10648                           
 10649                           
 10650                           ;mcc_generated_files/eusart.c: 71:     BAUD1CON = 0x08;
 10651  0C80  3008               	movlw	8
 10652  0C81  0023               	movlb	3	; select bank3
 10653  0C82  009F               	movwf	31	;volatile
 10654                           
 10655                           ;mcc_generated_files/eusart.c: 74:     RC1STA = 0x90;
 10656  0C83  3090               	movlw	144
 10657  0C84  009D               	movwf	29	;volatile
 10658                           
 10659                           ;mcc_generated_files/eusart.c: 77:     TX1STA = 0x24;
 10660  0C85  3024               	movlw	36
 10661  0C86  009E               	movwf	30	;volatile
 10662                           
 10663                           ;mcc_generated_files/eusart.c: 80:     SP1BRGL = 0x08;
 10664  0C87  3008               	movlw	8
 10665  0C88  009B               	movwf	27	;volatile
 10666  0C89                     l3016:
 10667                           
 10668                           ;mcc_generated_files/eusart.c: 83:     SP1BRGH = 0x00;
 10669  0C89  019C               	clrf	28	;volatile
 10670  0C8A                     l3018:
 10671                           
 10672                           ;mcc_generated_files/eusart.c: 86:     EUSART_SetFramingErrorHandler(EUSART_DefaultFrami
      +                          ngErrorHandler);
 10673  0C8A  3000               	movlw	0
 10674  0C8B  00F3               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
 10675  0C8C  3000               	movlw	0
 10676  0C8D  00F4               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
 10677  0C8E  318A  22FB  318C   	fcall	_EUSART_SetFramingErrorHandler
 10678  0C91                     l3020:
 10679                           
 10680                           ;mcc_generated_files/eusart.c: 87:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOverr
      +                          unErrorHandler);
 10681  0C91  3000               	movlw	0
 10682  0C92  00F3               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
 10683  0C93  3000               	movlw	0
 10684  0C94  00F4               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
 10685  0C95  318B  2301  318C   	fcall	_EUSART_SetOverrunErrorHandler
 10686  0C98                     l3022:
 10687                           
 10688                           ;mcc_generated_files/eusart.c: 88:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandler
      +                          );
 10689  0C98  3000               	movlw	0
 10690  0C99  00F3               	movwf	EUSART_SetErrorHandler@interruptHandler
 10691  0C9A  3000               	movlw	0
 10692  0C9B  00F4               	movwf	EUSART_SetErrorHandler@interruptHandler+1
 10693  0C9C  318A  22F5  318C   	fcall	_EUSART_SetErrorHandler
 10694  0C9F                     l3024:
 10695                           
 10696                           ;mcc_generated_files/eusart.c: 90:     eusartRxLastError.status = 0;
 10697  0C9F  0021               	movlb	1	; select bank1
 10698  0CA0  01B3               	clrf	_eusartRxLastError^(0+128)	;volatile
 10699  0CA1                     l198:
 10700  0CA1  0008               	return
 10701  0CA2                     __end_of_EUSART_Initialize:
 10702                           
 10703                           	psect	text45
 10704  0B01                     __ptext45:	
 10705 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
 10706 ;; Defined at:
 10707 ;;		line 170 in file "mcc_generated_files/eusart.c"
 10708 ;; Parameters:    Size  Location     Type
 10709 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
 10710 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
 10711 ;; Auto vars:     Size  Location     Type
 10712 ;;		None
 10713 ;; Return value:  Size  Location     Type
 10714 ;;                  1    wreg      void 
 10715 ;; Registers used:
 10716 ;;		wreg
 10717 ;; Tracked objects:
 10718 ;;		On entry : 0/0
 10719 ;;		On exit  : 0/0
 10720 ;;		Unchanged: 0/0
 10721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10722 ;;      Params:         2       0       0       0       0       0       0       0
 10723 ;;      Locals:         0       0       0       0       0       0       0       0
 10724 ;;      Temps:          0       0       0       0       0       0       0       0
 10725 ;;      Totals:         2       0       0       0       0       0       0       0
 10726 ;;Total ram usage:        2 bytes
 10727 ;; Hardware stack levels used: 1
 10728 ;; Hardware stack levels required when called: 4
 10729 ;; This function calls:
 10730 ;;		Nothing
 10731 ;; This function is called by:
 10732 ;;		_EUSART_Initialize
 10733 ;; This function uses a non-reentrant model
 10734 ;;
 10735                           
 10736                           
 10737                           ;psect for function _EUSART_SetOverrunErrorHandler
 10738  0B01                     _EUSART_SetOverrunErrorHandler:
 10739  0B01                     l2684:	
 10740                           ;incstack = 0
 10741                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
 10742                           
 10743                           
 10744                           ;mcc_generated_files/eusart.c: 171:     EUSART_OverrunErrorHandler = interruptHandler;
 10745  0B01  0874               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
 10746  0B02  0021               	movlb	1	; select bank1
 10747  0B03  00E1               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
 10748  0B04  0873               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
 10749  0B05  00E0               	movwf	_EUSART_OverrunErrorHandler^(0+128)
 10750  0B06                     l246:
 10751  0B06  0008               	return
 10752  0B07                     __end_of_EUSART_SetOverrunErrorHandler:
 10753                           
 10754                           	psect	text46
 10755  0AFB                     __ptext46:	
 10756 ;; *************** function _EUSART_SetFramingErrorHandler *****************
 10757 ;; Defined at:
 10758 ;;		line 166 in file "mcc_generated_files/eusart.c"
 10759 ;; Parameters:    Size  Location     Type
 10760 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
 10761 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
 10762 ;; Auto vars:     Size  Location     Type
 10763 ;;		None
 10764 ;; Return value:  Size  Location     Type
 10765 ;;                  1    wreg      void 
 10766 ;; Registers used:
 10767 ;;		wreg
 10768 ;; Tracked objects:
 10769 ;;		On entry : 0/0
 10770 ;;		On exit  : 0/0
 10771 ;;		Unchanged: 0/0
 10772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10773 ;;      Params:         2       0       0       0       0       0       0       0
 10774 ;;      Locals:         0       0       0       0       0       0       0       0
 10775 ;;      Temps:          0       0       0       0       0       0       0       0
 10776 ;;      Totals:         2       0       0       0       0       0       0       0
 10777 ;;Total ram usage:        2 bytes
 10778 ;; Hardware stack levels used: 1
 10779 ;; Hardware stack levels required when called: 4
 10780 ;; This function calls:
 10781 ;;		Nothing
 10782 ;; This function is called by:
 10783 ;;		_EUSART_Initialize
 10784 ;; This function uses a non-reentrant model
 10785 ;;
 10786                           
 10787                           
 10788                           ;psect for function _EUSART_SetFramingErrorHandler
 10789  0AFB                     _EUSART_SetFramingErrorHandler:
 10790  0AFB                     l2682:	
 10791                           ;incstack = 0
 10792                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
 10793                           
 10794                           
 10795                           ;mcc_generated_files/eusart.c: 167:     EUSART_FramingErrorHandler = interruptHandler;
 10796  0AFB  0874               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
 10797  0AFC  0021               	movlb	1	; select bank1
 10798  0AFD  00E3               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
 10799  0AFE  0873               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
 10800  0AFF  00E2               	movwf	_EUSART_FramingErrorHandler^(0+128)
 10801  0B00                     l243:
 10802  0B00  0008               	return
 10803  0B01                     __end_of_EUSART_SetFramingErrorHandler:
 10804                           
 10805                           	psect	text47
 10806  0AF5                     __ptext47:	
 10807 ;; *************** function _EUSART_SetErrorHandler *****************
 10808 ;; Defined at:
 10809 ;;		line 174 in file "mcc_generated_files/eusart.c"
 10810 ;; Parameters:    Size  Location     Type
 10811 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
 10812 ;;		 -> EUSART_DefaultErrorHandler(1), 
 10813 ;; Auto vars:     Size  Location     Type
 10814 ;;		None
 10815 ;; Return value:  Size  Location     Type
 10816 ;;                  1    wreg      void 
 10817 ;; Registers used:
 10818 ;;		wreg
 10819 ;; Tracked objects:
 10820 ;;		On entry : 0/0
 10821 ;;		On exit  : 0/0
 10822 ;;		Unchanged: 0/0
 10823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10824 ;;      Params:         2       0       0       0       0       0       0       0
 10825 ;;      Locals:         0       0       0       0       0       0       0       0
 10826 ;;      Temps:          0       0       0       0       0       0       0       0
 10827 ;;      Totals:         2       0       0       0       0       0       0       0
 10828 ;;Total ram usage:        2 bytes
 10829 ;; Hardware stack levels used: 1
 10830 ;; Hardware stack levels required when called: 4
 10831 ;; This function calls:
 10832 ;;		Nothing
 10833 ;; This function is called by:
 10834 ;;		_EUSART_Initialize
 10835 ;; This function uses a non-reentrant model
 10836 ;;
 10837                           
 10838                           
 10839                           ;psect for function _EUSART_SetErrorHandler
 10840  0AF5                     _EUSART_SetErrorHandler:
 10841  0AF5                     l2686:	
 10842                           ;incstack = 0
 10843                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
 10844                           
 10845                           
 10846                           ;mcc_generated_files/eusart.c: 175:     EUSART_ErrorHandler = interruptHandler;
 10847  0AF5  0874               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
 10848  0AF6  0021               	movlb	1	; select bank1
 10849  0AF7  00DF               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
 10850  0AF8  0873               	movf	EUSART_SetErrorHandler@interruptHandler,w
 10851  0AF9  00DE               	movwf	_EUSART_ErrorHandler^(0+128)
 10852  0AFA                     l249:
 10853  0AFA  0008               	return
 10854  0AFB                     __end_of_EUSART_SetErrorHandler:
 10855                           
 10856                           	psect	text48
 10857  0AEF                     __ptext48:	
 10858 ;; *************** function _DAC_Initialize *****************
 10859 ;; Defined at:
 10860 ;;		line 58 in file "mcc_generated_files/dac.c"
 10861 ;; Parameters:    Size  Location     Type
 10862 ;;		None
 10863 ;; Auto vars:     Size  Location     Type
 10864 ;;		None
 10865 ;; Return value:  Size  Location     Type
 10866 ;;                  1    wreg      void 
 10867 ;; Registers used:
 10868 ;;		wreg
 10869 ;; Tracked objects:
 10870 ;;		On entry : 0/0
 10871 ;;		On exit  : 0/0
 10872 ;;		Unchanged: 0/0
 10873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10874 ;;      Params:         0       0       0       0       0       0       0       0
 10875 ;;      Locals:         0       0       0       0       0       0       0       0
 10876 ;;      Temps:          0       0       0       0       0       0       0       0
 10877 ;;      Totals:         0       0       0       0       0       0       0       0
 10878 ;;Total ram usage:        0 bytes
 10879 ;; Hardware stack levels used: 1
 10880 ;; Hardware stack levels required when called: 4
 10881 ;; This function calls:
 10882 ;;		Nothing
 10883 ;; This function is called by:
 10884 ;;		_SYSTEM_Initialize
 10885 ;;		_main
 10886 ;; This function uses a non-reentrant model
 10887 ;;
 10888                           
 10889                           
 10890                           ;psect for function _DAC_Initialize
 10891  0AEF                     _DAC_Initialize:
 10892  0AEF                     l2918:	
 10893                           ;incstack = 0
 10894                           ; Regs used in _DAC_Initialize: [wreg]
 10895                           
 10896                           
 10897                           ;mcc_generated_files/dac.c: 61:     DAC1CON0 = 0x80;
 10898  0AEF  3080               	movlw	128
 10899  0AF0  0022               	movlb	2	; select bank2
 10900  0AF1  0098               	movwf	24	;volatile
 10901                           
 10902                           ;mcc_generated_files/dac.c: 63:     DAC1CON1 = 0xFF;
 10903  0AF2  30FF               	movlw	255
 10904  0AF3  0099               	movwf	25	;volatile
 10905  0AF4                     l7:
 10906  0AF4  0008               	return
 10907  0AF5                     __end_of_DAC_Initialize:
 10908                           
 10909                           	psect	text49
 10910  0B55                     __ptext49:	
 10911 ;; *************** function _LATCH_Initialize *****************
 10912 ;; Defined at:
 10913 ;;		line 581 in file "main.c"
 10914 ;; Parameters:    Size  Location     Type
 10915 ;;		None
 10916 ;; Auto vars:     Size  Location     Type
 10917 ;;		None
 10918 ;; Return value:  Size  Location     Type
 10919 ;;                  1    wreg      void 
 10920 ;; Registers used:
 10921 ;;		None
 10922 ;; Tracked objects:
 10923 ;;		On entry : 0/0
 10924 ;;		On exit  : 0/0
 10925 ;;		Unchanged: 0/0
 10926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10927 ;;      Params:         0       0       0       0       0       0       0       0
 10928 ;;      Locals:         0       0       0       0       0       0       0       0
 10929 ;;      Temps:          0       0       0       0       0       0       0       0
 10930 ;;      Totals:         0       0       0       0       0       0       0       0
 10931 ;;Total ram usage:        0 bytes
 10932 ;; Hardware stack levels used: 1
 10933 ;; Hardware stack levels required when called: 4
 10934 ;; This function calls:
 10935 ;;		Nothing
 10936 ;; This function is called by:
 10937 ;;		_main
 10938 ;; This function uses a non-reentrant model
 10939 ;;
 10940                           
 10941                           
 10942                           ;psect for function _LATCH_Initialize
 10943  0B55                     _LATCH_Initialize:
 10944  0B55                     l3550:	
 10945                           ;incstack = 0
 10946                           ; Regs used in _LATCH_Initialize: []
 10947                           
 10948                           
 10949                           ;main.c: 582:     TRISBbits.TRISB6 = 0;
 10950  0B55  0021               	movlb	1	; select bank1
 10951  0B56  130D               	bcf	13,6	;volatile
 10952                           
 10953                           ;main.c: 583:     TRISCbits.TRISC0 = 0;
 10954  0B57  100E               	bcf	14,0	;volatile
 10955                           
 10956                           ;main.c: 585:     TRISCbits.TRISC1 = 0;
 10957  0B58  108E               	bcf	14,1	;volatile
 10958                           
 10959                           ;main.c: 586:     TRISCbits.TRISC7 = 0;
 10960  0B59  138E               	bcf	14,7	;volatile
 10961                           
 10962                           ;main.c: 587:     LATBbits.LATB6 = 0;
 10963  0B5A  0022               	movlb	2	; select bank2
 10964  0B5B  130D               	bcf	13,6	;volatile
 10965                           
 10966                           ;main.c: 588:     LATCbits.LATC0 = 0;
 10967  0B5C  100E               	bcf	14,0	;volatile
 10968                           
 10969                           ;main.c: 590:     LATCbits.LATC1 = 1;
 10970  0B5D  148E               	bsf	14,1	;volatile
 10971                           
 10972                           ;main.c: 591:     LATCbits.LATC7 = 1;
 10973  0B5E  178E               	bsf	14,7	;volatile
 10974  0B5F                     l754:
 10975  0B5F  0008               	return
 10976  0B60                     __end_of_LATCH_Initialize:
 10977                           
 10978                           	psect	intentry
 10979  0004                     __pintentry:	
 10980 ;; *************** function _INTERRUPT_InterruptManager *****************
 10981 ;; Defined at:
 10982 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 10983 ;; Parameters:    Size  Location     Type
 10984 ;;		None
 10985 ;; Auto vars:     Size  Location     Type
 10986 ;;		None
 10987 ;; Return value:  Size  Location     Type
 10988 ;;                  1    wreg      void 
 10989 ;; Registers used:
 10990 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10991 ;; Tracked objects:
 10992 ;;		On entry : 0/0
 10993 ;;		On exit  : 0/0
 10994 ;;		Unchanged: 0/0
 10995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10996 ;;      Params:         0       0       0       0       0       0       0       0
 10997 ;;      Locals:         0       0       0       0       0       0       0       0
 10998 ;;      Temps:          0       0       0       0       0       0       0       0
 10999 ;;      Totals:         0       0       0       0       0       0       0       0
 11000 ;;Total ram usage:        0 bytes
 11001 ;; Hardware stack levels used: 1
 11002 ;; Hardware stack levels required when called: 3
 11003 ;; This function calls:
 11004 ;;		_INT_ISR
 11005 ;;		_PIN_MANAGER_IOC
 11006 ;;		_TMR0_ISR
 11007 ;;		_TMR1_ISR
 11008 ;;		_TMR4_ISR
 11009 ;; This function is called by:
 11010 ;;		Interrupt level 1
 11011 ;; This function uses a non-reentrant model
 11012 ;;
 11013                           
 11014  0004                     _INTERRUPT_InterruptManager:
 11015                           
 11016                           ;incstack = 0
 11017  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
 11018                           
 11019                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11020  0005  3180               	pagesel	$
 11021  0006                     i1l3552:
 11022                           
 11023                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 11024  0006  1E8B               	btfss	11,5	;volatile
 11025  0007  2809               	goto	u211_21
 11026  0008  280A               	goto	u211_20
 11027  0009                     u211_21:
 11028  0009  2812               	goto	i1l144
 11029  000A                     u211_20:
 11030  000A                     i1l3554:
 11031  000A  1D0B               	btfss	11,2	;volatile
 11032  000B  280D               	goto	u212_21
 11033  000C  280E               	goto	u212_20
 11034  000D                     u212_21:
 11035  000D  2812               	goto	i1l144
 11036  000E                     u212_20:
 11037  000E                     i1l3556:
 11038                           
 11039                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
 11040  000E  318B  2388  3180   	fcall	_TMR0_ISR
 11041                           
 11042                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 11043  0011  2849               	goto	i1l155
 11044  0012                     i1l144:	
 11045                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.INTE == 1 && INTCON
      +                          bits.INTF == 1)
 11046                           
 11047  0012  1E0B               	btfss	11,4	;volatile
 11048  0013  2815               	goto	u213_21
 11049  0014  2816               	goto	u213_20
 11050  0015                     u213_21:
 11051  0015  281E               	goto	i1l146
 11052  0016                     u213_20:
 11053  0016                     i1l3558:
 11054  0016  1C8B               	btfss	11,1	;volatile
 11055  0017  2819               	goto	u214_21
 11056  0018  281A               	goto	u214_20
 11057  0019                     u214_21:
 11058  0019  281E               	goto	i1l146
 11059  001A                     u214_20:
 11060  001A                     i1l3560:
 11061                           
 11062                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         INT_ISR();
 11063  001A  318A  22E0  3180   	fcall	_INT_ISR
 11064                           
 11065                           ;mcc_generated_files/interrupt_manager.c: 62:     }
 11066  001D  2849               	goto	i1l155
 11067  001E                     i1l146:	
 11068                           ;mcc_generated_files/interrupt_manager.c: 63:     else if(INTCONbits.IOCIE == 1 && INTCO
      +                          Nbits.IOCIF == 1)
 11069                           
 11070  001E  1D8B               	btfss	11,3	;volatile
 11071  001F  2821               	goto	u215_21
 11072  0020  2822               	goto	u215_20
 11073  0021                     u215_21:
 11074  0021  282A               	goto	i1l148
 11075  0022                     u215_20:
 11076  0022                     i1l3562:
 11077  0022  1C0B               	btfss	11,0	;volatile
 11078  0023  2825               	goto	u216_21
 11079  0024  2826               	goto	u216_20
 11080  0025                     u216_21:
 11081  0025  282A               	goto	i1l148
 11082  0026                     u216_20:
 11083  0026                     i1l3564:
 11084                           
 11085                           ;mcc_generated_files/interrupt_manager.c: 64:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 65:         PIN_MANAGER_IOC();
 11086  0026  318A  22D4  3180   	fcall	_PIN_MANAGER_IOC
 11087                           
 11088                           ;mcc_generated_files/interrupt_manager.c: 66:     }
 11089  0029  2849               	goto	i1l155
 11090  002A                     i1l148:	
 11091                           ;mcc_generated_files/interrupt_manager.c: 67:     else if(INTCONbits.PEIE == 1)
 11092                           
 11093  002A  1F0B               	btfss	11,6	;volatile
 11094  002B  282D               	goto	u217_21
 11095  002C  282E               	goto	u217_20
 11096  002D                     u217_21:
 11097  002D  2849               	goto	i1l147
 11098  002E                     u217_20:
 11099  002E                     i1l3566:
 11100                           
 11101                           ;mcc_generated_files/interrupt_manager.c: 68:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 69:         if(PIE2bits.TMR4IE == 1 && PIR2bits.TMR4IF == 1)
 11102  002E  0021               	movlb	1	; select bank1
 11103  002F  1C92               	btfss	18,1	;volatile
 11104  0030  2832               	goto	u218_21
 11105  0031  2833               	goto	u218_20
 11106  0032                     u218_21:
 11107  0032  283B               	goto	i1l152
 11108  0033                     u218_20:
 11109  0033                     i1l3568:
 11110  0033  0020               	movlb	0	; select bank0
 11111  0034  1C92               	btfss	18,1	;volatile
 11112  0035  2837               	goto	u219_21
 11113  0036  2838               	goto	u219_20
 11114  0037                     u219_21:
 11115  0037  283B               	goto	i1l152
 11116  0038                     u219_20:
 11117  0038                     i1l3570:
 11118                           
 11119                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             TMR4_ISR();
 11120  0038  318B  2379  3180   	fcall	_TMR4_ISR
 11121  003B                     i1l152:	
 11122                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 76:         }
 11123                           
 11124                           
 11125                           ;mcc_generated_files/interrupt_manager.c: 77:         if(PIE1bits.TMR1IE == 1 && PIR1bit
      +                          s.TMR1IF == 1) {
 11126  003B  0021               	movlb	1	; select bank1
 11127  003C  1C11               	btfss	17,0	;volatile
 11128  003D  283F               	goto	u220_21
 11129  003E  2840               	goto	u220_20
 11130  003F                     u220_21:
 11131  003F  2849               	goto	i1l147
 11132  0040                     u220_20:
 11133  0040                     i1l3572:
 11134  0040  0020               	movlb	0	; select bank0
 11135  0041  1C11               	btfss	17,0	;volatile
 11136  0042  2844               	goto	u221_21
 11137  0043  2845               	goto	u221_20
 11138  0044                     u221_21:
 11139  0044  2849               	goto	i1l147
 11140  0045                     u221_20:
 11141  0045                     i1l3574:
 11142                           
 11143                           ;mcc_generated_files/interrupt_manager.c: 78:             TMR1_ISR();
 11144  0045  318B  23E4  3180   	fcall	_TMR1_ISR
 11145  0048  2849               	goto	i1l155
 11146  0049                     i1l147:
 11147  0049                     i1l155:
 11148  0049  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 11149  004A  0009               	retfie
 11150  004B                     __end_of_INTERRUPT_InterruptManager:
 11151                           
 11152                           	psect	text51
 11153  0B79                     __ptext51:	
 11154 ;; *************** function _TMR4_ISR *****************
 11155 ;; Defined at:
 11156 ;;		line 120 in file "mcc_generated_files/tmr4.c"
 11157 ;; Parameters:    Size  Location     Type
 11158 ;;		None
 11159 ;; Auto vars:     Size  Location     Type
 11160 ;;		None
 11161 ;; Return value:  Size  Location     Type
 11162 ;;                  1    wreg      void 
 11163 ;; Registers used:
 11164 ;;		wreg, status,2, status,0, pclath, cstack
 11165 ;; Tracked objects:
 11166 ;;		On entry : 0/0
 11167 ;;		On exit  : 0/0
 11168 ;;		Unchanged: 0/0
 11169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11170 ;;      Params:         0       0       0       0       0       0       0       0
 11171 ;;      Locals:         0       0       0       0       0       0       0       0
 11172 ;;      Temps:          0       0       0       0       0       0       0       0
 11173 ;;      Totals:         0       0       0       0       0       0       0       0
 11174 ;;Total ram usage:        0 bytes
 11175 ;; Hardware stack levels used: 1
 11176 ;; Hardware stack levels required when called: 2
 11177 ;; This function calls:
 11178 ;;		Absolute function
 11179 ;;		_TMR4_DefaultInterruptHandler
 11180 ;; This function is called by:
 11181 ;;		_INTERRUPT_InterruptManager
 11182 ;; This function uses a non-reentrant model
 11183 ;;
 11184                           
 11185                           
 11186                           ;psect for function _TMR4_ISR
 11187  0B79                     _TMR4_ISR:
 11188  0B79                     i1l3228:	
 11189                           ;incstack = 0
 11190                           ; Regs used in _TMR4_ISR: [wreg+status,2+status,0+pclath+cstack]
 11191                           
 11192                           
 11193                           ;mcc_generated_files/tmr4.c: 124:     PIR2bits.TMR4IF = 0;
 11194  0B79  0020               	movlb	0	; select bank0
 11195  0B7A  1092               	bcf	18,1	;volatile
 11196  0B7B                     i1l3230:
 11197                           
 11198                           ;mcc_generated_files/tmr4.c: 126:     if(TMR4_InterruptHandler)
 11199  0B7B  0021               	movlb	1	; select bank1
 11200  0B7C  0858               	movf	_TMR4_InterruptHandler^(0+128),w
 11201  0B7D  0459               	iorwf	(_TMR4_InterruptHandler+1)^(0+128),w
 11202  0B7E  1903               	btfsc	3,2
 11203  0B7F  2B81               	goto	u176_21
 11204  0B80  2B82               	goto	u176_20
 11205  0B81                     u176_21:
 11206  0B81  2B87               	goto	i1l415
 11207  0B82                     u176_20:
 11208  0B82                     i1l3232:
 11209                           
 11210                           ;mcc_generated_files/tmr4.c: 127:     {;mcc_generated_files/tmr4.c: 128:         TMR4_In
      +                          terruptHandler();
 11211  0B82  0859               	movf	(_TMR4_InterruptHandler+1)^(0+128),w
 11212  0B83  008A               	movwf	10
 11213  0B84  0858               	movf	_TMR4_InterruptHandler^(0+128),w
 11214  0B85  000A               	callw
 11215  0B86  318B               	pagesel	$
 11216  0B87                     i1l415:
 11217  0B87  0008               	return
 11218  0B88                     __end_of_TMR4_ISR:
 11219                           
 11220                           	psect	text52
 11221  0F3A                     __ptext52:	
 11222 ;; *************** function _TMR4_DefaultInterruptHandler *****************
 11223 ;; Defined at:
 11224 ;;		line 147 in file "mcc_generated_files/tmr4.c"
 11225 ;; Parameters:    Size  Location     Type
 11226 ;;		None
 11227 ;; Auto vars:     Size  Location     Type
 11228 ;;		None
 11229 ;; Return value:  Size  Location     Type
 11230 ;;                  1    wreg      void 
 11231 ;; Registers used:
 11232 ;;		wreg, status,2, status,0, pclath, cstack
 11233 ;; Tracked objects:
 11234 ;;		On entry : 0/0
 11235 ;;		On exit  : 0/0
 11236 ;;		Unchanged: 0/0
 11237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11238 ;;      Params:         0       0       0       0       0       0       0       0
 11239 ;;      Locals:         0       0       0       0       0       0       0       0
 11240 ;;      Temps:          1       0       0       0       0       0       0       0
 11241 ;;      Totals:         1       0       0       0       0       0       0       0
 11242 ;;Total ram usage:        1 bytes
 11243 ;; Hardware stack levels used: 1
 11244 ;; Hardware stack levels required when called: 1
 11245 ;; This function calls:
 11246 ;;		_DAC_SetOutput
 11247 ;; This function is called by:
 11248 ;;		_TMR4_Initialize
 11249 ;;		_TMR4_ISR
 11250 ;; This function uses a non-reentrant model
 11251 ;;
 11252                           
 11253                           
 11254                           ;psect for function _TMR4_DefaultInterruptHandler
 11255  0F3A                     _TMR4_DefaultInterruptHandler:
 11256  0F3A                     i1l3030:	
 11257                           ;incstack = 0
 11258                           ; Regs used in _TMR4_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 11259                           
 11260                           
 11261                           ;mcc_generated_files/tmr4.c: 148:     currentIsOn = 0;
 11262  0F3A  0021               	movlb	1	; select bank1
 11263  0F3B  01BF               	clrf	_currentIsOn^(0+128)
 11264  0F3C                     i1l3032:
 11265                           
 11266                           ;mcc_generated_files/tmr4.c: 152:     if (dc_frequency_flag) {
 11267  0F3C  087A               	movf	_dc_frequency_flag,w
 11268  0F3D  1903               	btfsc	3,2
 11269  0F3E  2F40               	goto	u161_21
 11270  0F3F  2F41               	goto	u161_20
 11271  0F40                     u161_21:
 11272  0F40  2F46               	goto	i1l3036
 11273  0F41                     u161_20:
 11274  0F41                     i1l3034:
 11275                           
 11276                           ;mcc_generated_files/tmr4.c: 153:         DAC_SetOutput(255);
 11277  0F41  30FF               	movlw	255
 11278  0F42  318A  22E5  318F   	fcall	_DAC_SetOutput
 11279                           
 11280                           ;mcc_generated_files/tmr4.c: 154:     }else{
 11281  0F45  2F84               	goto	i1l436
 11282  0F46                     i1l3036:
 11283                           
 11284                           ;mcc_generated_files/tmr4.c: 156:   if (currentIsOn){
 11285  0F46  083F               	movf	_currentIsOn^(0+128),w
 11286  0F47  1903               	btfsc	3,2
 11287  0F48  2F4A               	goto	u162_21
 11288  0F49  2F4B               	goto	u162_20
 11289  0F4A                     u162_21:
 11290  0F4A  2F50               	goto	i1l3040
 11291  0F4B                     u162_20:
 11292  0F4B                     i1l3038:
 11293                           
 11294                           ;mcc_generated_files/tmr4.c: 158:     DAC_SetOutput(255);
 11295  0F4B  30FF               	movlw	255
 11296  0F4C  318A  22E5  318F   	fcall	_DAC_SetOutput
 11297                           
 11298                           ;mcc_generated_files/tmr4.c: 162:   } else {
 11299  0F4F  2F84               	goto	i1l436
 11300  0F50                     i1l3040:
 11301                           
 11302                           ;mcc_generated_files/tmr4.c: 163:        if (PR4 == 255) {
 11303  0F50  0028               	movlb	8	; select bank8
 11304  0F51  0A16               	incf	22,w	;volatile
 11305  0F52  1D03               	btfss	3,2
 11306  0F53  2F55               	goto	u163_21
 11307  0F54  2F56               	goto	u163_20
 11308  0F55                     u163_21:
 11309  0F55  2F68               	goto	i1l3050
 11310  0F56                     u163_20:
 11311  0F56                     i1l3042:
 11312                           
 11313                           ;mcc_generated_files/tmr4.c: 164:             if (oneHzCounter == 81) {
 11314  0F56  3051               	movlw	81
 11315  0F57  0021               	movlb	1	; select bank1
 11316  0F58  0632               	xorwf	_oneHzCounter^(0+128),w
 11317  0F59  1D03               	btfss	3,2
 11318  0F5A  2F5C               	goto	u164_21
 11319  0F5B  2F5D               	goto	u164_20
 11320  0F5C                     u164_21:
 11321  0F5C  2F63               	goto	i1l3048
 11322  0F5D                     u164_20:
 11323  0F5D                     i1l3044:
 11324                           
 11325                           ;mcc_generated_files/tmr4.c: 165:                 DAC_SetOutput(dac_value);
 11326  0F5D  082C               	movf	_dac_value^(0+128),w
 11327  0F5E  318A  22E5  318F   	fcall	_DAC_SetOutput
 11328  0F61                     i1l3046:
 11329                           
 11330                           ;mcc_generated_files/tmr4.c: 166:                 oneHzCounter = 0;
 11331  0F61  0021               	movlb	1	; select bank1
 11332  0F62  01B2               	clrf	_oneHzCounter^(0+128)
 11333  0F63                     i1l3048:
 11334                           
 11335                           ;mcc_generated_files/tmr4.c: 168:             oneHzCounter++;
 11336  0F63  3001               	movlw	1
 11337  0F64  00F1               	movwf	??_TMR4_DefaultInterruptHandler
 11338  0F65  0871               	movf	??_TMR4_DefaultInterruptHandler,w
 11339  0F66  07B2               	addwf	_oneHzCounter^(0+128),f
 11340                           
 11341                           ;mcc_generated_files/tmr4.c: 169:         } else {
 11342  0F67  2F7F               	goto	i1l433
 11343  0F68                     i1l3050:
 11344                           
 11345                           ;mcc_generated_files/tmr4.c: 172:     DAC_SetOutput(dac_value);
 11346  0F68  0021               	movlb	1	; select bank1
 11347  0F69  082C               	movf	_dac_value^(0+128),w
 11348  0F6A  318A  22E5  318F   	fcall	_DAC_SetOutput
 11349  0F6D                     i1l3052:
 11350                           
 11351                           ;mcc_generated_files/tmr4.c: 173:     if (latch) {
 11352  0F6D  0021               	movlb	1	; select bank1
 11353  0F6E  0831               	movf	_latch^(0+128),w
 11354  0F6F  1903               	btfsc	3,2
 11355  0F70  2F72               	goto	u165_21
 11356  0F71  2F73               	goto	u165_20
 11357  0F72                     u165_21:
 11358  0F72  2F79               	goto	i1l434
 11359  0F73                     u165_20:
 11360  0F73                     i1l3054:
 11361                           
 11362                           ;mcc_generated_files/tmr4.c: 174:         LATCbits.LATC7 = 0;
 11363  0F73  0022               	movlb	2	; select bank2
 11364  0F74  138E               	bcf	14,7	;volatile
 11365                           
 11366                           ;mcc_generated_files/tmr4.c: 175:         LATCbits.LATC1 = 1;
 11367  0F75  148E               	bsf	14,1	;volatile
 11368  0F76                     i1l3056:
 11369                           
 11370                           ;mcc_generated_files/tmr4.c: 176:         latch = 0;
 11371  0F76  0021               	movlb	1	; select bank1
 11372  0F77  01B1               	clrf	_latch^(0+128)
 11373                           
 11374                           ;mcc_generated_files/tmr4.c: 177:     } else {
 11375  0F78  2F7F               	goto	i1l433
 11376  0F79                     i1l434:
 11377                           
 11378                           ;mcc_generated_files/tmr4.c: 178:         LATCbits.LATC1 = 1;
 11379  0F79  0022               	movlb	2	; select bank2
 11380  0F7A  148E               	bsf	14,1	;volatile
 11381                           
 11382                           ;mcc_generated_files/tmr4.c: 179:         LATCbits.LATC7 = 0;
 11383  0F7B  138E               	bcf	14,7	;volatile
 11384                           
 11385                           ;mcc_generated_files/tmr4.c: 180:         latch = 1;
 11386  0F7C  0021               	movlb	1	; select bank1
 11387  0F7D  01B1               	clrf	_latch^(0+128)
 11388  0F7E  0AB1               	incf	_latch^(0+128),f
 11389  0F7F                     i1l433:	
 11390                           ;mcc_generated_files/tmr4.c: 182:   }
 11391                           
 11392                           
 11393                           ;mcc_generated_files/tmr4.c: 186:   TMR1 = 65518;
 11394  0F7F  30FF               	movlw	255
 11395  0F80  0020               	movlb	0	; select bank0
 11396  0F81  0097               	movwf	23	;volatile
 11397  0F82  30EE               	movlw	238
 11398  0F83  0096               	movwf	22	;volatile
 11399  0F84                     i1l436:
 11400  0F84  0008               	return
 11401  0F85                     __end_of_TMR4_DefaultInterruptHandler:
 11402                           
 11403                           	psect	text53
 11404  0BE4                     __ptext53:	
 11405 ;; *************** function _TMR1_ISR *****************
 11406 ;; Defined at:
 11407 ;;		line 111 in file "tmr1.c"
 11408 ;; Parameters:    Size  Location     Type
 11409 ;;		None
 11410 ;; Auto vars:     Size  Location     Type
 11411 ;;		None
 11412 ;; Return value:  Size  Location     Type
 11413 ;;                  1    wreg      void 
 11414 ;; Registers used:
 11415 ;;		wreg, status,2, status,0, pclath, cstack
 11416 ;; Tracked objects:
 11417 ;;		On entry : 0/0
 11418 ;;		On exit  : 0/0
 11419 ;;		Unchanged: 0/0
 11420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11421 ;;      Params:         0       0       0       0       0       0       0       0
 11422 ;;      Locals:         0       0       0       0       0       0       0       0
 11423 ;;      Temps:          0       0       0       0       0       0       0       0
 11424 ;;      Totals:         0       0       0       0       0       0       0       0
 11425 ;;Total ram usage:        0 bytes
 11426 ;; Hardware stack levels used: 1
 11427 ;; Hardware stack levels required when called: 2
 11428 ;; This function calls:
 11429 ;;		Absolute function
 11430 ;;		_TMR1_DefaultInterruptHandler
 11431 ;; This function is called by:
 11432 ;;		_INTERRUPT_InterruptManager
 11433 ;; This function uses a non-reentrant model
 11434 ;;
 11435                           
 11436                           
 11437                           ;psect for function _TMR1_ISR
 11438  0BE4                     _TMR1_ISR:
 11439  0BE4                     i1l3234:	
 11440                           ;incstack = 0
 11441                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 11442                           
 11443                           
 11444                           ;tmr1.c: 115:     PIR1bits.TMR1IF = 0;
 11445  0BE4  0020               	movlb	0	; select bank0
 11446  0BE5  1011               	bcf	17,0	;volatile
 11447  0BE6                     i1l3236:
 11448                           
 11449                           ;tmr1.c: 117:     TMR1 = timer1ReloadVal;
 11450  0BE6  0021               	movlb	1	; select bank1
 11451  0BE7  0857               	movf	(_timer1ReloadVal+1)^(0+128),w	;volatile
 11452  0BE8  0020               	movlb	0	; select bank0
 11453  0BE9  0097               	movwf	23	;volatile
 11454  0BEA  0021               	movlb	1	; select bank1
 11455  0BEB  0856               	movf	_timer1ReloadVal^(0+128),w	;volatile
 11456  0BEC  0020               	movlb	0	; select bank0
 11457  0BED  0096               	movwf	22	;volatile
 11458  0BEE                     i1l3238:
 11459                           
 11460                           ;tmr1.c: 119:     if(TMR1_InterruptHandler)
 11461  0BEE  0021               	movlb	1	; select bank1
 11462  0BEF  0854               	movf	_TMR1_InterruptHandler^(0+128),w
 11463  0BF0  0455               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
 11464  0BF1  1903               	btfsc	3,2
 11465  0BF2  2BF4               	goto	u177_21
 11466  0BF3  2BF5               	goto	u177_20
 11467  0BF4                     u177_21:
 11468  0BF4  2BFA               	goto	i1l512
 11469  0BF5                     u177_20:
 11470  0BF5                     i1l3240:
 11471                           
 11472                           ;tmr1.c: 120:     {;tmr1.c: 121:         TMR1_InterruptHandler();
 11473  0BF5  0855               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
 11474  0BF6  008A               	movwf	10
 11475  0BF7  0854               	movf	_TMR1_InterruptHandler^(0+128),w
 11476  0BF8  000A               	callw
 11477  0BF9  318B               	pagesel	$
 11478  0BFA                     i1l512:
 11479  0BFA  0008               	return
 11480  0BFB                     __end_of_TMR1_ISR:
 11481                           
 11482                           	psect	text54
 11483  0B41                     __ptext54:	
 11484 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 11485 ;; Defined at:
 11486 ;;		line 133 in file "tmr1.c"
 11487 ;; Parameters:    Size  Location     Type
 11488 ;;		None
 11489 ;; Auto vars:     Size  Location     Type
 11490 ;;		None
 11491 ;; Return value:  Size  Location     Type
 11492 ;;                  1    wreg      void 
 11493 ;; Registers used:
 11494 ;;		wreg, status,2, status,0, pclath, cstack
 11495 ;; Tracked objects:
 11496 ;;		On entry : 0/0
 11497 ;;		On exit  : 0/0
 11498 ;;		Unchanged: 0/0
 11499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11500 ;;      Params:         0       0       0       0       0       0       0       0
 11501 ;;      Locals:         0       0       0       0       0       0       0       0
 11502 ;;      Temps:          0       0       0       0       0       0       0       0
 11503 ;;      Totals:         0       0       0       0       0       0       0       0
 11504 ;;Total ram usage:        0 bytes
 11505 ;; Hardware stack levels used: 1
 11506 ;; Hardware stack levels required when called: 1
 11507 ;; This function calls:
 11508 ;;		_DAC_SetOutput
 11509 ;; This function is called by:
 11510 ;;		_TMR1_Initialize
 11511 ;;		_TMR1_ISR
 11512 ;; This function uses a non-reentrant model
 11513 ;;
 11514                           
 11515                           
 11516                           ;psect for function _TMR1_DefaultInterruptHandler
 11517  0B41                     _TMR1_DefaultInterruptHandler:
 11518  0B41                     i1l3058:	
 11519                           ;incstack = 0
 11520                           ; Regs used in _TMR1_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 11521                           
 11522                           
 11523                           ;tmr1.c: 136:     T1CONbits.TMR1ON = 0;
 11524  0B41  0020               	movlb	0	; select bank0
 11525  0B42  1018               	bcf	24,0	;volatile
 11526  0B43                     i1l3060:
 11527                           
 11528                           ;tmr1.c: 137:     DAC_SetOutput(255);
 11529  0B43  30FF               	movlw	255
 11530  0B44  318A  22E5  318B   	fcall	_DAC_SetOutput
 11531  0B47                     i1l3062:
 11532                           
 11533                           ;tmr1.c: 138:     LATCbits.LATC7 = 0;
 11534  0B47  0022               	movlb	2	; select bank2
 11535  0B48  138E               	bcf	14,7	;volatile
 11536  0B49                     i1l3064:
 11537                           
 11538                           ;tmr1.c: 139:     LATCbits.LATC1 = 0;
 11539  0B49  108E               	bcf	14,1	;volatile
 11540  0B4A                     i1l520:
 11541  0B4A  0008               	return
 11542  0B4B                     __end_of_TMR1_DefaultInterruptHandler:
 11543                           
 11544                           	psect	text55
 11545  0AE5                     __ptext55:	
 11546 ;; *************** function _DAC_SetOutput *****************
 11547 ;; Defined at:
 11548 ;;		line 66 in file "mcc_generated_files/dac.c"
 11549 ;; Parameters:    Size  Location     Type
 11550 ;;  inputData       1    wreg     unsigned char 
 11551 ;; Auto vars:     Size  Location     Type
 11552 ;;  inputData       1    0[COMMON] unsigned char 
 11553 ;; Return value:  Size  Location     Type
 11554 ;;                  1    wreg      void 
 11555 ;; Registers used:
 11556 ;;		wreg
 11557 ;; Tracked objects:
 11558 ;;		On entry : 0/0
 11559 ;;		On exit  : 0/0
 11560 ;;		Unchanged: 0/0
 11561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11562 ;;      Params:         0       0       0       0       0       0       0       0
 11563 ;;      Locals:         1       0       0       0       0       0       0       0
 11564 ;;      Temps:          0       0       0       0       0       0       0       0
 11565 ;;      Totals:         1       0       0       0       0       0       0       0
 11566 ;;Total ram usage:        1 bytes
 11567 ;; Hardware stack levels used: 1
 11568 ;; This function calls:
 11569 ;;		Nothing
 11570 ;; This function is called by:
 11571 ;;		_TMR4_DefaultInterruptHandler
 11572 ;;		_TMR1_DefaultInterruptHandler
 11573 ;; This function uses a non-reentrant model
 11574 ;;
 11575                           
 11576                           
 11577                           ;psect for function _DAC_SetOutput
 11578  0AE5                     _DAC_SetOutput:
 11579                           
 11580                           ;incstack = 0
 11581                           ; Regs used in _DAC_SetOutput: [wreg]
 11582                           ;DAC_SetOutput@inputData stored from wreg
 11583  0AE5  00F0               	movwf	DAC_SetOutput@inputData
 11584  0AE6                     i1l2680:
 11585                           
 11586                           ;mcc_generated_files/dac.c: 66: void DAC_SetOutput(uint8_t inputData);mcc_generated_file
      +                          s/dac.c: 67: {;mcc_generated_files/dac.c: 68:     DAC1CON1 = inputData;
 11587  0AE6  0870               	movf	DAC_SetOutput@inputData,w
 11588  0AE7  0022               	movlb	2	; select bank2
 11589  0AE8  0099               	movwf	25	;volatile
 11590  0AE9                     i1l10:
 11591  0AE9  0008               	return
 11592  0AEA                     __end_of_DAC_SetOutput:
 11593                           
 11594                           	psect	text56
 11595  0B88                     __ptext56:	
 11596 ;; *************** function _TMR0_ISR *****************
 11597 ;; Defined at:
 11598 ;;		line 109 in file "mcc_generated_files/tmr0.c"
 11599 ;; Parameters:    Size  Location     Type
 11600 ;;		None
 11601 ;; Auto vars:     Size  Location     Type
 11602 ;;		None
 11603 ;; Return value:  Size  Location     Type
 11604 ;;                  1    wreg      void 
 11605 ;; Registers used:
 11606 ;;		wreg, status,2, status,0, pclath, cstack
 11607 ;; Tracked objects:
 11608 ;;		On entry : 0/0
 11609 ;;		On exit  : 0/0
 11610 ;;		Unchanged: 0/0
 11611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11612 ;;      Params:         0       0       0       0       0       0       0       0
 11613 ;;      Locals:         0       0       0       0       0       0       0       0
 11614 ;;      Temps:          0       0       0       0       0       0       0       0
 11615 ;;      Totals:         0       0       0       0       0       0       0       0
 11616 ;;Total ram usage:        0 bytes
 11617 ;; Hardware stack levels used: 1
 11618 ;; Hardware stack levels required when called: 1
 11619 ;; This function calls:
 11620 ;;		Absolute function
 11621 ;;		_TMR0_DefaultInterruptHandler
 11622 ;; This function is called by:
 11623 ;;		_INTERRUPT_InterruptManager
 11624 ;; This function uses a non-reentrant model
 11625 ;;
 11626                           
 11627                           
 11628                           ;psect for function _TMR0_ISR
 11629  0B88                     _TMR0_ISR:
 11630  0B88                     i1l3216:	
 11631                           ;incstack = 0
 11632                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 11633                           
 11634                           
 11635                           ;mcc_generated_files/tmr0.c: 113:     INTCONbits.TMR0IF = 0;
 11636  0B88  110B               	bcf	11,2	;volatile
 11637  0B89                     i1l3218:
 11638                           
 11639                           ;mcc_generated_files/tmr0.c: 115:     TMR0 = timer0ReloadVal;
 11640  0B89  0879               	movf	_timer0ReloadVal,w	;volatile
 11641  0B8A  0020               	movlb	0	; select bank0
 11642  0B8B  0095               	movwf	21	;volatile
 11643  0B8C                     i1l3220:
 11644                           
 11645                           ;mcc_generated_files/tmr0.c: 117:     if(TMR0_InterruptHandler)
 11646  0B8C  0021               	movlb	1	; select bank1
 11647  0B8D  085A               	movf	_TMR0_InterruptHandler^(0+128),w
 11648  0B8E  045B               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 11649  0B8F  1903               	btfsc	3,2
 11650  0B90  2B92               	goto	u175_21
 11651  0B91  2B93               	goto	u175_20
 11652  0B92                     u175_21:
 11653  0B92  2B98               	goto	i1l359
 11654  0B93                     u175_20:
 11655  0B93                     i1l3222:
 11656                           
 11657                           ;mcc_generated_files/tmr0.c: 118:     {;mcc_generated_files/tmr0.c: 119:         TMR0_In
      +                          terruptHandler();
 11658  0B93  085B               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 11659  0B94  008A               	movwf	10
 11660  0B95  085A               	movf	_TMR0_InterruptHandler^(0+128),w
 11661  0B96  000A               	callw
 11662  0B97  318B               	pagesel	$
 11663  0B98                     i1l359:
 11664  0B98  0008               	return
 11665  0B99                     __end_of_TMR0_ISR:
 11666                           
 11667                           	psect	text57
 11668  0002                     __ptext57:	
 11669 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 11670 ;; Defined at:
 11671 ;;		line 130 in file "mcc_generated_files/tmr0.c"
 11672 ;; Parameters:    Size  Location     Type
 11673 ;;		None
 11674 ;; Auto vars:     Size  Location     Type
 11675 ;;		None
 11676 ;; Return value:  Size  Location     Type
 11677 ;;                  1    wreg      void 
 11678 ;; Registers used:
 11679 ;;		None
 11680 ;; Tracked objects:
 11681 ;;		On entry : 0/0
 11682 ;;		On exit  : 0/0
 11683 ;;		Unchanged: 0/0
 11684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11685 ;;      Params:         0       0       0       0       0       0       0       0
 11686 ;;      Locals:         0       0       0       0       0       0       0       0
 11687 ;;      Temps:          0       0       0       0       0       0       0       0
 11688 ;;      Totals:         0       0       0       0       0       0       0       0
 11689 ;;Total ram usage:        0 bytes
 11690 ;; Hardware stack levels used: 1
 11691 ;; This function calls:
 11692 ;;		Nothing
 11693 ;; This function is called by:
 11694 ;;		_TMR0_Initialize
 11695 ;;		_TMR0_ISR
 11696 ;; This function uses a non-reentrant model
 11697 ;;
 11698                           
 11699                           
 11700                           ;psect for function _TMR0_DefaultInterruptHandler
 11701  0002                     _TMR0_DefaultInterruptHandler:
 11702  0002                     i1l365:	
 11703                           ;incstack = 0
 11704                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 11705                           
 11706  0002  0008               	return
 11707  0003                     __end_of_TMR0_DefaultInterruptHandler:
 11708                           
 11709                           	psect	text58
 11710  0AD4                     __ptext58:	
 11711 ;; *************** function _PIN_MANAGER_IOC *****************
 11712 ;; Defined at:
 11713 ;;		line 121 in file "mcc_generated_files/pin_manager.c"
 11714 ;; Parameters:    Size  Location     Type
 11715 ;;		None
 11716 ;; Auto vars:     Size  Location     Type
 11717 ;;		None
 11718 ;; Return value:  Size  Location     Type
 11719 ;;                  1    wreg      void 
 11720 ;; Registers used:
 11721 ;;		None
 11722 ;; Tracked objects:
 11723 ;;		On entry : 0/0
 11724 ;;		On exit  : 0/0
 11725 ;;		Unchanged: 0/0
 11726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11727 ;;      Params:         0       0       0       0       0       0       0       0
 11728 ;;      Locals:         0       0       0       0       0       0       0       0
 11729 ;;      Temps:          0       0       0       0       0       0       0       0
 11730 ;;      Totals:         0       0       0       0       0       0       0       0
 11731 ;;Total ram usage:        0 bytes
 11732 ;; Hardware stack levels used: 1
 11733 ;; This function calls:
 11734 ;;		Nothing
 11735 ;; This function is called by:
 11736 ;;		_INTERRUPT_InterruptManager
 11737 ;; This function uses a non-reentrant model
 11738 ;;
 11739                           
 11740                           
 11741                           ;psect for function _PIN_MANAGER_IOC
 11742  0AD4                     _PIN_MANAGER_IOC:
 11743  0AD4                     i1l114:	
 11744                           ;incstack = 0
 11745                           ; Regs used in _PIN_MANAGER_IOC: []
 11746                           
 11747  0AD4  0008               	return
 11748  0AD5                     __end_of_PIN_MANAGER_IOC:
 11749                           
 11750                           	psect	text59
 11751  0AE0                     __ptext59:	
 11752 ;; *************** function _INT_ISR *****************
 11753 ;; Defined at:
 11754 ;;		line 54 in file "mcc_generated_files/ext_int.c"
 11755 ;; Parameters:    Size  Location     Type
 11756 ;;		None
 11757 ;; Auto vars:     Size  Location     Type
 11758 ;;		None
 11759 ;; Return value:  Size  Location     Type
 11760 ;;                  1    wreg      void 
 11761 ;; Registers used:
 11762 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11763 ;; Tracked objects:
 11764 ;;		On entry : 0/0
 11765 ;;		On exit  : 0/0
 11766 ;;		Unchanged: 0/0
 11767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11768 ;;      Params:         0       0       0       0       0       0       0       0
 11769 ;;      Locals:         0       0       0       0       0       0       0       0
 11770 ;;      Temps:          0       0       0       0       0       0       0       0
 11771 ;;      Totals:         0       0       0       0       0       0       0       0
 11772 ;;Total ram usage:        0 bytes
 11773 ;; Hardware stack levels used: 1
 11774 ;; Hardware stack levels required when called: 2
 11775 ;; This function calls:
 11776 ;;		_INT_CallBack
 11777 ;; This function is called by:
 11778 ;;		_INTERRUPT_InterruptManager
 11779 ;; This function uses a non-reentrant model
 11780 ;;
 11781                           
 11782                           
 11783                           ;psect for function _INT_ISR
 11784  0AE0                     _INT_ISR:
 11785  0AE0                     i1l3224:	
 11786                           ;incstack = 0
 11787                           ; Regs used in _INT_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11788                           
 11789                           
 11790                           ;mcc_generated_files/ext_int.c: 56:     (INTCONbits.INTF = 0);
 11791  0AE0  108B               	bcf	11,1	;volatile
 11792  0AE1                     i1l3226:
 11793                           
 11794                           ;mcc_generated_files/ext_int.c: 59:     INT_CallBack();
 11795  0AE1  318B  236C  318A   	fcall	_INT_CallBack
 11796  0AE4                     i1l264:
 11797  0AE4  0008               	return
 11798  0AE5                     __end_of_INT_ISR:
 11799                           
 11800                           	psect	text60
 11801  0B6C                     __ptext60:	
 11802 ;; *************** function _INT_CallBack *****************
 11803 ;; Defined at:
 11804 ;;		line 62 in file "mcc_generated_files/ext_int.c"
 11805 ;; Parameters:    Size  Location     Type
 11806 ;;		None
 11807 ;; Auto vars:     Size  Location     Type
 11808 ;;		None
 11809 ;; Return value:  Size  Location     Type
 11810 ;;                  1    wreg      void 
 11811 ;; Registers used:
 11812 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11813 ;; Tracked objects:
 11814 ;;		On entry : 0/0
 11815 ;;		On exit  : 0/0
 11816 ;;		Unchanged: 0/0
 11817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11818 ;;      Params:         0       0       0       0       0       0       0       0
 11819 ;;      Locals:         0       0       0       0       0       0       0       0
 11820 ;;      Temps:          0       0       0       0       0       0       0       0
 11821 ;;      Totals:         0       0       0       0       0       0       0       0
 11822 ;;Total ram usage:        0 bytes
 11823 ;; Hardware stack levels used: 1
 11824 ;; Hardware stack levels required when called: 1
 11825 ;; This function calls:
 11826 ;;		Absolute function
 11827 ;;		_INT_DefaultInterruptHandler
 11828 ;; This function is called by:
 11829 ;;		_INT_ISR
 11830 ;; This function uses a non-reentrant model
 11831 ;;
 11832                           
 11833                           
 11834                           ;psect for function _INT_CallBack
 11835  0B6C                     _INT_CallBack:
 11836  0B6C                     i1l3026:	
 11837                           ;incstack = 0
 11838                           ; Regs used in _INT_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11839                           
 11840                           
 11841                           ;mcc_generated_files/ext_int.c: 65:     if(INT_InterruptHandler)
 11842  0B6C  0021               	movlb	1	; select bank1
 11843  0B6D  085C               	movf	_INT_InterruptHandler^(0+128),w
 11844  0B6E  045D               	iorwf	(_INT_InterruptHandler+1)^(0+128),w
 11845  0B6F  1903               	btfsc	3,2
 11846  0B70  2B72               	goto	u160_21
 11847  0B71  2B73               	goto	u160_20
 11848  0B72                     u160_21:
 11849  0B72  2B78               	goto	i1l268
 11850  0B73                     u160_20:
 11851  0B73                     i1l3028:
 11852                           
 11853                           ;mcc_generated_files/ext_int.c: 66:     {;mcc_generated_files/ext_int.c: 67:         INT
      +                          _InterruptHandler();
 11854  0B73  085D               	movf	(_INT_InterruptHandler+1)^(0+128),w
 11855  0B74  008A               	movwf	10
 11856  0B75  085C               	movf	_INT_InterruptHandler^(0+128),w
 11857  0B76  000A               	callw
 11858  0B77  318B               	pagesel	$
 11859  0B78                     i1l268:
 11860  0B78  0008               	return
 11861  0B79                     __end_of_INT_CallBack:
 11862                           
 11863                           	psect	text61
 11864  0663                     __ptext61:	
 11865 ;; *************** function _INT_DefaultInterruptHandler *****************
 11866 ;; Defined at:
 11867 ;;		line 75 in file "mcc_generated_files/ext_int.c"
 11868 ;; Parameters:    Size  Location     Type
 11869 ;;		None
 11870 ;; Auto vars:     Size  Location     Type
 11871 ;;  time            1    2[COMMON] unsigned char 
 11872 ;; Return value:  Size  Location     Type
 11873 ;;                  1    wreg      void 
 11874 ;; Registers used:
 11875 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11876 ;; Tracked objects:
 11877 ;;		On entry : 0/0
 11878 ;;		On exit  : 0/0
 11879 ;;		Unchanged: 0/0
 11880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11881 ;;      Params:         0       0       0       0       0       0       0       0
 11882 ;;      Locals:         1       0       0       0       0       0       0       0
 11883 ;;      Temps:          2       0       0       0       0       0       0       0
 11884 ;;      Totals:         3       0       0       0       0       0       0       0
 11885 ;;Total ram usage:        3 bytes
 11886 ;; Hardware stack levels used: 1
 11887 ;; This function calls:
 11888 ;;		Nothing
 11889 ;; This function is called by:
 11890 ;;		_EXT_INT_Initialize
 11891 ;;		_INT_CallBack
 11892 ;; This function uses a non-reentrant model
 11893 ;;
 11894                           
 11895                           
 11896                           ;psect for function _INT_DefaultInterruptHandler
 11897  0663                     _INT_DefaultInterruptHandler:
 11898  0663                     i1l2690:	
 11899                           ;incstack = 0
 11900                           ; Regs used in _INT_DefaultInterruptHandler: [wreg-fsr0h+status,2+status,0]
 11901                           
 11902                           
 11903                           ;mcc_generated_files/ext_int.c: 77:   uint8_t time = TMR0;
 11904  0663  0020               	movlb	0	; select bank0
 11905  0664  0815               	movf	21,w	;volatile
 11906  0665  00F0               	movwf	??_INT_DefaultInterruptHandler
 11907  0666  0870               	movf	??_INT_DefaultInterruptHandler,w
 11908  0667  00F2               	movwf	INT_DefaultInterruptHandler@time
 11909  0668                     i1l2692:
 11910                           
 11911                           ;mcc_generated_files/ext_int.c: 78:   TMR0 = 0;
 11912  0668  0195               	clrf	21	;volatile
 11913  0669                     i1l2694:
 11914                           
 11915                           ;mcc_generated_files/ext_int.c: 81:   if (INTCONbits.TMR0IF){
 11916  0669  1D0B               	btfss	11,2	;volatile
 11917  066A  2E6C               	goto	u122_21
 11918  066B  2E6D               	goto	u122_20
 11919  066C                     u122_21:
 11920  066C  2E6E               	goto	i1l2698
 11921  066D                     u122_20:
 11922  066D                     i1l2696:
 11923                           
 11924                           ;mcc_generated_files/ext_int.c: 82:     time = 0;
 11925  066D  01F2               	clrf	INT_DefaultInterruptHandler@time
 11926  066E                     i1l2698:
 11927                           
 11928                           ;mcc_generated_files/ext_int.c: 84:   INTCONbits.TMR0IF = 0;
 11929  066E  110B               	bcf	11,2	;volatile
 11930                           
 11931                           ;mcc_generated_files/ext_int.c: 86:   switch(ir_code.state){
 11932  066F  2EB9               	goto	i1l2736
 11933  0670                     i1l2700:
 11934                           
 11935                           ;mcc_generated_files/ext_int.c: 89:     if (time >= 180 && time <= 243){
 11936  0670  30B4               	movlw	180
 11937  0671  0272               	subwf	INT_DefaultInterruptHandler@time,w
 11938  0672  1C03               	skipc
 11939  0673  2E75               	goto	u123_21
 11940  0674  2E76               	goto	u123_20
 11941  0675                     u123_21:
 11942  0675  2ECD               	goto	i1l278
 11943  0676                     u123_20:
 11944  0676                     i1l2702:
 11945  0676  30F4               	movlw	244
 11946  0677  0272               	subwf	INT_DefaultInterruptHandler@time,w
 11947  0678  1803               	skipnc
 11948  0679  2E7B               	goto	u124_21
 11949  067A  2E7C               	goto	u124_20
 11950  067B                     u124_21:
 11951  067B  2ECD               	goto	i1l278
 11952  067C                     u124_20:
 11953  067C                     i1l2704:
 11954                           
 11955                           ;mcc_generated_files/ext_int.c: 90:       ir_code.n_bits = 0;
 11956  067C  01B4               	clrf	_ir_code^(0+128)
 11957  067D                     i1l2706:
 11958                           
 11959                           ;mcc_generated_files/ext_int.c: 91:       ir_code.state = STATE_RECEIVING;
 11960  067D  01B5               	clrf	(_ir_code^(0+128)+1)
 11961  067E  0AB5               	incf	(_ir_code^(0+128)+1),f
 11962  067F  2ECD               	goto	i1l278
 11963  0680                     i1l2708:
 11964                           
 11965                           ;mcc_generated_files/ext_int.c: 99:     ir_code.code <<= 1;
 11966  0680  3001               	movlw	1
 11967  0681                     u125_25:
 11968  0681  35B6               	lslf	(_ir_code^(0+128)+2),f
 11969  0682  0DB7               	rlf	((_ir_code+1)^(0+128)+2),f
 11970  0683  0DB8               	rlf	((_ir_code+2)^(0+128)+2),f
 11971  0684  0DB9               	rlf	((_ir_code+3)^(0+128)+2),f
 11972  0685  0B89               	decfsz	9,f
 11973  0686  2E81               	goto	u125_25
 11974  0687                     i1l2710:
 11975                           
 11976                           ;mcc_generated_files/ext_int.c: 100:     if (time >= 29 && time <= 41){
 11977  0687  301D               	movlw	29
 11978  0688  0272               	subwf	INT_DefaultInterruptHandler@time,w
 11979  0689  1C03               	skipc
 11980  068A  2E8C               	goto	u126_21
 11981  068B  2E8D               	goto	u126_20
 11982  068C                     u126_21:
 11983  068C  2E99               	goto	i1l2718
 11984  068D                     u126_20:
 11985  068D                     i1l2712:
 11986  068D  302A               	movlw	42
 11987  068E  0272               	subwf	INT_DefaultInterruptHandler@time,w
 11988  068F  1803               	skipnc
 11989  0690  2E92               	goto	u127_21
 11990  0691  2E93               	goto	u127_20
 11991  0692                     u127_21:
 11992  0692  2E99               	goto	i1l2718
 11993  0693                     u127_20:
 11994  0693                     i1l2714:
 11995                           
 11996                           ;mcc_generated_files/ext_int.c: 104:       ir_code.code |= 1;
 11997  0693  1436               	bsf	(_ir_code^(0+128)+2),0
 11998  0694                     i1l2716:
 11999                           
 12000                           ;mcc_generated_files/ext_int.c: 105:       ir_code.n_bits++;
 12001  0694  3001               	movlw	1
 12002  0695  00F0               	movwf	??_INT_DefaultInterruptHandler
 12003  0696  0870               	movf	??_INT_DefaultInterruptHandler,w
 12004  0697  07B4               	addwf	_ir_code^(0+128),f
 12005                           
 12006                           ;mcc_generated_files/ext_int.c: 106:     } else if (time >= 14 && time <= 20){
 12007  0698  2EA8               	goto	i1l2726
 12008  0699                     i1l2718:
 12009  0699  300E               	movlw	14
 12010  069A  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12011  069B  1C03               	skipc
 12012  069C  2E9E               	goto	u128_21
 12013  069D  2E9F               	goto	u128_20
 12014  069E                     u128_21:
 12015  069E  2EA6               	goto	i1l2724
 12016  069F                     u128_20:
 12017  069F                     i1l2720:
 12018  069F  3015               	movlw	21
 12019  06A0  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12020  06A1  1803               	skipnc
 12021  06A2  2EA4               	goto	u129_21
 12022  06A3  2EA5               	goto	u129_20
 12023  06A4                     u129_21:
 12024  06A4  2EA6               	goto	i1l2724
 12025  06A5                     u129_20:
 12026  06A5  2E94               	goto	i1l2716
 12027  06A6                     i1l2724:
 12028                           
 12029                           ;mcc_generated_files/ext_int.c: 113:       ir_code.state = STATE_RESET;
 12030  06A6  01B5               	clrf	(_ir_code^(0+128)+1)
 12031                           
 12032                           ;mcc_generated_files/ext_int.c: 114:       break;
 12033  06A7  2ECD               	goto	i1l278
 12034  06A8                     i1l2726:
 12035                           
 12036                           ;mcc_generated_files/ext_int.c: 116:     if (32 == ir_code.n_bits){
 12037  06A8  3020               	movlw	32
 12038  06A9  0634               	xorwf	_ir_code^(0+128),w
 12039  06AA  1D03               	btfss	3,2
 12040  06AB  2EAD               	goto	u130_21
 12041  06AC  2EAE               	goto	u130_20
 12042  06AD                     u130_21:
 12043  06AD  2ECD               	goto	i1l278
 12044  06AE                     u130_20:
 12045  06AE                     i1l2728:
 12046                           
 12047                           ;mcc_generated_files/ext_int.c: 119:       if (ir_code.command == ((~ir_code.command_b) 
      +                          & 0xff)){
 12048  06AE  0936               	comf	(_ir_code^(0+128)+2),w
 12049  06AF  0637               	xorwf	(_ir_code^(0+128)+3),w
 12050  06B0  1D03               	skipz
 12051  06B1  2EB3               	goto	u131_21
 12052  06B2  2EB4               	goto	u131_20
 12053  06B3                     u131_21:
 12054  06B3  2EA6               	goto	i1l2724
 12055  06B4                     u131_20:
 12056  06B4                     i1l2730:
 12057                           
 12058                           ;mcc_generated_files/ext_int.c: 120:         ir_code.state = STATE_DONE;
 12059  06B4  3002               	movlw	2
 12060  06B5  00F0               	movwf	??_INT_DefaultInterruptHandler
 12061  06B6  0870               	movf	??_INT_DefaultInterruptHandler,w
 12062  06B7  00B5               	movwf	(_ir_code^(0+128)+1)
 12063                           
 12064                           ;mcc_generated_files/ext_int.c: 121:       } else {
 12065  06B8  2ECD               	goto	i1l278
 12066  06B9                     i1l2736:
 12067  06B9  0021               	movlb	1	; select bank1
 12068  06BA  0835               	movf	(_ir_code^(0+128)+1),w
 12069  06BB  00F0               	movwf	??_INT_DefaultInterruptHandler
 12070  06BC  01F1               	clrf	??_INT_DefaultInterruptHandler+1
 12071                           
 12072                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12073                           ; Switch size 1, requested type "simple"
 12074                           ; Number of cases is 1, Range of values is 0 to 0
 12075                           ; switch strategies available:
 12076                           ; Name         Instructions Cycles
 12077                           ; simple_byte            4     3 (average)
 12078                           ; direct_byte            8     6 (fixed)
 12079                           ; jumptable            260     6 (fixed)
 12080                           ;	Chosen strategy is simple_byte
 12081  06BD  0871               	movf	??_INT_DefaultInterruptHandler+1,w
 12082  06BE  3A00               	xorlw	0	; case 0
 12083  06BF  1903               	skipnz
 12084  06C0  2EC2               	goto	i1l4484
 12085  06C1  2EA6               	goto	i1l2724
 12086  06C2                     i1l4484:
 12087                           
 12088                           ; Switch size 1, requested type "simple"
 12089                           ; Number of cases is 3, Range of values is 0 to 2
 12090                           ; switch strategies available:
 12091                           ; Name         Instructions Cycles
 12092                           ; simple_byte           10     6 (average)
 12093                           ; direct_byte           12     6 (fixed)
 12094                           ; jumptable            260     6 (fixed)
 12095                           ;	Chosen strategy is simple_byte
 12096  06C2  0870               	movf	??_INT_DefaultInterruptHandler,w
 12097  06C3  3A00               	xorlw	0	; case 0
 12098  06C4  1903               	skipnz
 12099  06C5  2E70               	goto	i1l2700
 12100  06C6  3A01               	xorlw	1	; case 1
 12101  06C7  1903               	skipnz
 12102  06C8  2E80               	goto	i1l2708
 12103  06C9  3A03               	xorlw	3	; case 2
 12104  06CA  1903               	skipnz
 12105  06CB  2ECD               	goto	i1l278
 12106  06CC  2EA6               	goto	i1l2724
 12107  06CD                     i1l278:
 12108                           
 12109                           ;mcc_generated_files/ext_int.c: 135:   INTCONbits.INTF = 0;
 12110  06CD  108B               	bcf	11,1	;volatile
 12111  06CE                     i1l289:
 12112  06CE  0008               	return
 12113  06CF                     __end_of_INT_DefaultInterruptHandler:
 12114  007E                     btemp	set	126	;btemp
 12115  007E                     int$flags	set	126
 12116  007E                     wtemp0	set	126
 12117                           
 12118                           	psect	config
 12119                           
 12120                           ;Config register CONFIG1 @ 0x8007
 12121                           ;	Oscillator Selection Bits
 12122                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 12123                           ;	Watchdog Timer Enable
 12124                           ;	WDTE = 0x1, user specified literal
 12125                           ;	Power-up Timer Enable
 12126                           ;	PWRTE = OFF, PWRT disabled
 12127                           ;	MCLR Pin Function Select
 12128                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 12129                           ;	Flash Program Memory Code Protection
 12130                           ;	CP = OFF, Program memory code protection is disabled
 12131                           ;	Brown-out Reset Enable
 12132                           ;	BOREN = OFF, Brown-out Reset disabled
 12133                           ;	Clock Out Enable
 12134                           ;	CLKOUTEN = ON, CLKOUT function is enabled on the CLKOUT pin
 12135                           ;	Internal/External Switchover Mode
 12136                           ;	IESO = OFF, Internal/External Switchover Mode is disabled
 12137                           ;	Fail-Safe Clock Monitor Enable
 12138                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 12139  8007                     	org	32775
 12140  8007  21EC               	dw	8684
 12141                           
 12142                           ;Config register CONFIG2 @ 0x8008
 12143                           ;	Flash Memory Self-Write Protection
 12144                           ;	WRT = OFF, Write protection off
 12145                           ;	Peripheral Pin Select one-way control
 12146                           ;	PPS1WAY = ON, The PPSLOCK bit cannot be cleared once it is set by software
 12147                           ;	Zero-cross detect disable
 12148                           ;	ZCDDIS = ON, Zero-cross detect circuit is disabled at POR
 12149                           ;	Phase Lock Loop enable
 12150                           ;	PLLEN = OFF, 4x PLL is enabled when software sets the SPLLEN bit
 12151                           ;	Stack Overflow/Underflow Reset Enable
 12152                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 12153                           ;	Brown-out Reset Voltage Selection
 12154                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 12155                           ;	Low-Power Brown Out Reset
 12156                           ;	LPBOR = OFF, Low-Power BOR is disabled
 12157                           ;	Low-Voltage Programming Enable
 12158                           ;	LVP = ON, Low-voltage programming enabled
 12159  8008                     	org	32776
 12160  8008  3EFF               	dw	16127

Data Sizes:
    Strings     128
    Constant    4
    Data        47
    BSS         93
    Persistent  52
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     80      80
    BANK1            80      8      80
    BANK2            80      0      52
    BANK3            80      0      33
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    S1883_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_7(CODE[25]), STR_6(CODE[25]), STR_5(CODE[23]), STR_4(CODE[20]), 
		 -> STR_3(CODE[20]), STR_2(CODE[19]), STR_1(CODE[21]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 25
		 -> STR_7(CODE[25]), STR_6(CODE[25]), STR_5(CODE[23]), STR_4(CODE[20]), 
		 -> STR_3(CODE[20]), STR_2(CODE[19]), STR_1(CODE[21]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_7(CODE[25]), STR_6(CODE[25]), STR_5(CODE[23]), STR_4(CODE[20]), 
		 -> STR_3(CODE[20]), STR_2(CODE[19]), STR_1(CODE[21]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    process_remote_command@code	PTR struct . size(1) Largest target is 6
		 -> ir_code(BANK1[6]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 64
		 -> writePersistentState@buf(BANK0[64]), 

    TMR4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _startUp->_setLEDColor
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _setCurrent->___awdiv
    _selectSomething->_setLEDColor
    _vfpfcnvrt->_fputc
    _fputc->_putch
    _putch->_EUSART_Write
    ___aldiv->___awdiv
    _TMR4_Initialize->_TMR4_SetInterruptHandler
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR4_ISR->_TMR4_DefaultInterruptHandler
    _TMR4_DefaultInterruptHandler->_DAC_SetOutput
    _TMR1_DefaultInterruptHandler->_DAC_SetOutput
    _INT_CallBack->_INT_DefaultInterruptHandler

Critical Paths under _main in BANK0

    _process_remote_command->_writePersistentState
    _writePersistentState->_FLASH_WriteBlock
    _setFrequency->___aldiv
    _setCurrent->_battery_voltage
    _selectIncrease->_printf
    _selectFrequencyValue->_printf
    _selectFrequency->_printf
    _selectDecrease->_printf
    _selectCurrentValue->_printf
    _selectCurrent->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_fputc
    _battery_voltage->___aldiv
    ___aldiv->___lmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_process_remote_command

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   98481
                                              3 BANK1      5     5      0
                     _DAC_Initialize
                   _LATCH_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
                  _SYSTEM_Initialize
                    _battery_voltage
                            _initLED
             _process_remote_command
                _readPersistentState
                         _setCurrent
                       _setFrequency
                            _startUp
 ---------------------------------------------------------------------------------
 (1) _startUp                                              4     4      0    6142
                                              0 BANK0      4     4      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (1) _readPersistentState                                  2     2      0       0
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _process_remote_command                               3     3      0   80284
                                              0 BANK1      3     3      0
                    _battery_voltage
                      _selectCurrent
                 _selectCurrentValue
                     _selectDecrease
                    _selectFrequency
               _selectFrequencyValue
                     _selectIncrease
                    _selectSomething
                         _setCurrent
                       _setFrequency
                        _setLEDColor
               _writePersistentState
 ---------------------------------------------------------------------------------
 (2) _writePersistentState                                70    70      0    1464
                                             10 BANK0     70    70      0
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    10     7      3    1140
                                              0 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     3     1      2     215
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _setFrequency                                         5     3      2    3632
                                             23 BANK0      5     3      2
            _TMR4_LoadPeriodRegister
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) _TMR4_LoadPeriodRegister                              1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setCurrent                                          16    12      4    6046
                                             25 BANK0     16    12      4
                            ___aldiv
                            ___awdiv
                             ___lmul
                    _battery_voltage (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     612
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     683
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _selectSomething                                      2     2      0    6074
                                              0 BANK0      2     2      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectIncrease                                       2     2      0    9254
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectFrequencyValue                                 2     2      0    9254
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectFrequency                                      2     2      0    9254
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectDecrease                                       1     1      0    9254
                                             25 BANK0      1     1      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectCurrentValue                                   2     2      0    9254
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectCurrent                                        2     2      0    9254
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _setLEDColor                                          4     2      2    6074
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (3) _printf                                               6     4      2    3180
                                             21 BANK0      4     2      2
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             8     5      3    2272
                                             13 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           40    38      2    1759
                                              5 BANK0      8     6      2
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                8     5      3    1158
                                              5 COMMON     3     0      3
                                              0 BANK0      5     5      0
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0      62
                                              4 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (8) _EUSART_Write                                         1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _battery_voltage                                      2     0      2    1397
                                             23 BANK0      2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8    1397
                                              8 BANK0     15     7      8
                            ___awdiv (ARG)
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initLED                                              1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     875
                     _DAC_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0     125
           _TMR4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR4_SetInterruptHandler                             2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     125
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     125
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     125
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     375
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LATCH_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           0     0      0     178
                            _INT_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                           _TMR1_ISR
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR4_ISR                                            0     0      0      22
                   Absolute function *
       _TMR4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR4_DefaultInterruptHandler                        1     1      0      22
                                              1 COMMON     1     1      0
                      _DAC_SetOutput
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0      22
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR1_DefaultInterruptHandler                        0     0      0      22
                      _DAC_SetOutput
 ---------------------------------------------------------------------------------
 (12) _DAC_SetOutput                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT_ISR                                             0     0      0     134
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (11) _INT_CallBack                                        0     0      0     134
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (12) _INT_DefaultInterruptHandler                         3     3      0     134
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DAC_Initialize
   _LATCH_Initialize
   _OPA1_Initialize
   _OPA2_Initialize
   _SYSTEM_Initialize
     _DAC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OPA1_Initialize
     _OPA2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
     _TMR4_Initialize
       _TMR4_SetInterruptHandler
     _WDT_Initialize
   _battery_voltage
     ___aldiv
       ___awdiv (ARG)
       ___lmul (ARG)
   _initLED
   _process_remote_command
     _battery_voltage
     _selectCurrent
       _printf
         _vfprintf
           _vfpfcnvrt
             _fputc
               _putch
                 _EUSART_Write
       _setLEDColor
     _selectCurrentValue
       _printf
       _setLEDColor
     _selectDecrease
       _printf
       _setLEDColor
     _selectFrequency
       _printf
       _setLEDColor
     _selectFrequencyValue
       _printf
       _setLEDColor
     _selectIncrease
       _printf
       _setLEDColor
     _selectSomething
       _setLEDColor
     _setCurrent
       ___aldiv
       ___awdiv
       ___lmul
       _battery_voltage (ARG)
     _setFrequency
       _TMR4_LoadPeriodRegister
       ___aldiv
       ___lmul
     _setLEDColor
     _writePersistentState
       _FLASH_WriteBlock
         _FLASH_EraseBlock
   _readPersistentState
   _setCurrent
   _setFrequency
   _startUp
     _setLEDColor

 _INTERRUPT_InterruptManager (ROOT)
   _INT_ISR
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
   _TMR1_ISR
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
       _DAC_SetOutput
   _TMR4_ISR
     Absolute function(Fake) *
     _TMR4_DefaultInterruptHandler *
       _DAC_SetOutput

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     100       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     50      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      8      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      34      10       65.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      21      12       41.2%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     100      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Apr 26 16:39:08 2022

                                            l7 0AF4                                             l50 0CE8  
                                           l53 0B38                                             l56 0AD7  
                                 ___awdiv@sign 0021                        __end_of_OPA1_Initialize 0ADC  
                              _timer0ReloadVal 0079                        __size_of_selectIncrease 0025  
                                          l111 0E12                                            l222 0B4C  
                                          l119 0ADB                                            l231 0B24  
                                          l305 0B40                                            l225 0B54  
                                          l243 0B00                                            l411 0AEE  
                                          l246 0B06                                            l271 0B0C  
                                          l249 0AFA                                            l329 0ADF  
                                          l362 0B12                                            l346 0BAA  
                                          l418 0B1E                                            l515 0B18  
                                          l292 0B6B                                            l198 0CA1  
                                          l470 065A                                            l630 0C7F  
                                          l640 0E20                                            l641 0E27  
                                          l474 0C5F                                            l643 0E2B  
                                          l467 060D                                            l635 07F0  
                                          l396 0BCF                                            l644 0E45  
                                          l652 0C11                                            l468 0662  
                                          l660 0EB5                                            l638 0E1B  
                                          l647 0F39                                            l903 0477  
                                          l663 0FDF                                            l751 03BC  
                                          l672 0D0D                                            l913 04F3  
                                          l681 0D84                                            l754 0B5F  
                                          l666 0DAE                                            l499 0C29  
                                          l675 0CC3                                            l691 0463  
                                          l684 0D33                                            l852 0E79  
                                          l669 0D5B                                            l694 070F  
                                          l698 0734                                            l991 0794  
                                          _PR2 001B                                            _PR4 0416  
                        ?_selectFrequencyValue 0070                                _timer1ReloadVal 00D6  
               ?_EUSART_SetFramingErrorHandler 0073                                _TMR2_Initialize 0B39  
                                          wreg 0009                                    main@batt_mv 00EE  
               FLASH_WriteBlock@flashWordArray 0022                       __size_of_selectFrequency 002A  
                                         l1301 0BBC                                           l3000 0B6A  
                                         l3010 0BA2                                           l3002 0B99  
                                         l3020 0C91                                           l3012 0BA3  
                                         l3004 0B9E                                           l1340 0DDF  
                                         l3022 0C98                                           l3014 0C80  
                                         l3006 0BA0                                           l1334 05F6  
                                         l3024 0C9F                                           l3016 0C89  
                                         l3008 0BA1                                           l3200 0CD0  
                                         l1352 0EF5                                           l4000 0F92  
                                         l3018 0C8A                                           l3210 0CDF  
                                         l3202 0CD3                                           l4010 0D85  
                                         l4002 0F9F                                           l3212 0CE2  
                                         l3204 0CD6                                           l4020 0D36  
                                         l4012 0D8A                                           l4004 0FB2  
                                         l4100 0E8B                                           l3214 0CE5  
                                         l3206 0CD9                                           l4022 0D40  
                                         l4014 0D93                                           l4030 0CF6  
                                         l4006 0FBF                                           l4110 00A6  
                                         l4102 0E94                                           l3208 0CDC  
                                         l4024 0D4D                                           l4040 0CB5  
                                         l4016 0DA6                                           l4032 0CFF  
                                         l4008 0FD2                                           l4200 01B1  
                                         l4112 00AB                                           l4120 00CA  
                                         l4104 0089                                           l4026 0D53  
                                         l4018 0D34                                           l4050 0D7C  
                                         l4042 0CBB                                           l4034 0D05  
                                         l4210 01CE                                           l4202 01B5  
                                         l4130 00EE                                           l4122 00D0  
                                         l4114 00AF                                           l4106 0090  
                                         l3260 0EFD                                           l4044 0D5C  
                                         l4036 0CA2                                           l4052 0D0E  
                                         l4028 0CE9                                           l4060 03BD  
                                         l4300 0305                                           l4220 01F2  
                                         l4212 01D3                                           l4204 01BB  
                                         l4140 010D                                           l4132 00FC  
                                         l4124 00E2                                           l4116 00B2  
                                         l4108 0095                                           l3270 0F0A  
                                         l3262 0EFE                                           l4046 0D69  
                                         l4038 0CAC                                           l4054 0D18  
                                         l4070 045C                                           l4062 0443  
                                         l4310 0330                                           l4302 0310  
                                         l4230 021D                                           l4222 01FD  
                                         l4214 01E6                                           l4206 01C6  
                                         l4150 0120                                           l4142 0111  
                                         l4126 00E7                                           l4134 00FF  
                                         l4118 00C7                                           l3254 0C60  
                                         l2800 0B13                                           l3280 0F17  
                                         l3272 0F0B                                           l3264 0F00  
                                         l3256 0EF6                                           l4048 0D76  
                                         l4056 0D25                                           l4064 0450  
                                         l4080 0722                                           l4072 06CF  
                                         l4320 034C                                           l4304 0315  
                                         l4240 0239                                           l4224 0202  
                                         l4208 01CB                                           l4160 0145  
                                         l4152 0124                                           l4144 0116  
                                         l4136 0104                                           l4128 00EB  
                                         l4400 052E                                           l3194 0CC4  
                                         l3290 0F24                                           l3282 0F1A  
                                         l3274 0F10                                           l3266 0F06  
                                         l3258 0EF9                                           l4058 0D2B  
                                         l4066 0455                                           l4090 0733  
                                         l4082 0723                                           l4074 06FD  
                                         l4322 034F                                           l4314 0336  
                                         l4306 0318                                           l4250 025A  
                                         l4242 023C                                           l4234 0223  
                                         l4226 0205                                           l4218 01EC  
                                         l4170 0157                                           l4162 014A  
                                         l4154 0127                                           l4146 011A  
                                         l4138 0107                                           l4410 0552  
                                         l4402 0531                                           l3196 0CCA  
                                         l3292 0F26                                           l3284 0F1C  
                                         l3276 0F12                                           l3268 0F08  
                                         l4068 045A                                           l4084 0728  
                                         l4076 070A                                           l4324 0354  
                                         l4316 033C                                           l4308 031D  
                                         l4260 0278                                           l4252 0260  
                                         l4244 0241                                           l4236 0229  
                                         l4228 020A                                           l4172 0165  
                                         l4164 014E                                           l4156 013C  
                                         l4148 011E                                           l4332 036D  
                                         l4092 0E7A                                           l4420 0574  
                                         l4404 0534                                           l3550 0B55  
                                         l3198 0CCD                                           l3294 0F2B  
                                         l3286 0F1E                                           l3278 0F14  
                                         l3710 0B51                                           l4086 072F  
                                         l4078 071D                                           l4326 0367  
                                         l4318 0347                                           l4270 02A2  
                                         l4262 028B                                           l4254 026B  
                                         l4246 0254                                           l4238 0234  
                                         l4190 0190                                           l4182 0177  
                                         l4166 0150                                           l4174 0168  
                                         l4158 013F                                           l4334 03A3  
                                         l4414 0555                                           l4406 053F  
                                         l2920 0DE0                                           l2744 0B0D  
                                         l3296 0F30                                           l3288 0F1F  
                                         l3712 0B20                                           l3720 0EC5  
                                         l4088 0732                                           l3800 05FE  
                                         l4336 03A9                                           l4272 02A7  
                                         l4256 0270                                           l4192 0193  
                                         l4184 017B                                           l4176 016D  
                                         l4168 0154                                           l4416 0569  
                                         l4408 054C                                           l2682 0AFB  
                                         l2930 0DEE                                           l2922 0DE4  
                                         l2746 0B19                                           l3722 0ECF  
                                         l3714 0EB6                                           l3730 058C  
                                         l3810 0617                                           l3802 0602  
                                         l4338 03B6                                           l4290 02E1  
                                         l4282 02C8                                           l4274 02AA  
                                         l4266 0291                                           l4258 0273  
                                         l4194 0196                                           l4186 017F  
                                         l4178 0170                                           l4098 0E7E  
                                         l4418 0570                                           l2684 0B01  
                                         l2940 0DF5                                           l2932 0DF0  
                                         l2924 0DE7                                           l3900 04AC  
                                         l3708 0B4C                                           l3724 0EED  
                                         l3716 0EBB                                           l3740 05B7  
                                         l3732 0594                                           l3820 061B  
                                         l3812 0618                                           l4292 02E6  
                                         l4284 02CE                                           l4276 02AF  
                                         l4268 0297                                           l4196 019B  
                                         l4188 0185                                           l4380 04F7  
                                         l2918 0AEF                                           l2686 0AF5  
                                         l2950 0B31                                           l2942 0DF7  
                                         l2934 0DF1                                           l2926 0DE9  
                                         l3910 04D5                                           l3902 04B3  
                                         l3718 0EC0                                           l3742 05C2  
                                         l3734 0599                                           l3830 0641  
                                         l3822 061E                                           l3814 0619  
                                         l3806 060E                                           l4294 02F9  
                                         l4286 02D9                                           l4278 02C2  
                                         l4198 01AE                                           l4390 0506  
                                         l4382 04FA                                           l2688 0B07  
                                         l2960 0AD8                                           l2952 0B34  
                                         l2944 0DF9                                           l2936 0DF3  
                                         l2928 0DEB                                           l3904 04C5  
                                         l3912 04DB                                           l3736 059D  
                                         l3752 05D3                                           l3728 057B  
                                         l3920 0735                                           l3760 0C44  
                                         l3840 0650                                           l3832 0643  
                                         l3824 0622                                           l3808 0615  
                                         l4288 02DE                                           l4392 0509  
                                         l4384 04FD                                           l2954 0B35  
                                         l2946 0DFA                                           l2938 0DF4  
                                         l2970 0BC5                                           l2962 0BBD  
                                         l3914 04E0                                           l3906 04CD  
                                         l3754 05EC                                           l3738 05AF  
                                         l3746 05C8                                           l3850 0C01  
                                         l3930 0746                                           l3922 0737  
                                         l3770 0C4F                                           l3762 0C48  
                                         l3842 0654                                           l3834 0648  
                                         l3826 062C                                           l4482 037A  
                                         l4298 02FF                                           l4394 051E  
                                         l4386 0500                                           l4378 04F4  
                                         l2956 0B36                                           l2948 0E09  
                                         l2980 0C1C                                           l2972 0BCC  
                                         l2964 0BC0                                           l3916 04EB  
                                         l3908 04CE                                           l3748 05D0  
                                         l3860 0BAB                                           l3852 0C04  
                                         l3940 075A                                           l3932 074B  
                                         l3924 073B                                           l3780 0C58  
                                         l3772 0C50                                           l3764 0C49  
                                         l3844 065C                                           l3836 0649  
                                         l3828 063A                                           l4396 052C  
                                         l4388 0503                                           l2974 0ADC  
                                         l2982 0C1E                                           l2990 0B3C  
                                         l2966 0BC1                                           l2958 0AD5  
                                         l3790 0DCD                                           l3862 0BB0  
                                         l3854 0C09                                           l3950 077A  
                                         l3942 075F                                           l3934 074F  
                                         l3926 0740                                           l3870 0E53  
                                         l3782 0C5A                                           l3774 0C55  
                                         l3766 0C4C                                           l3838 064A  
                                         l4398 052D                                           l2984 0C20  
                                         l2976 0C12                                           l2992 0B3D  
                                         l2968 0BC3                                           l3880 0464  
                                         l3792 0DD7                                           l3784 0DB1  
                                         l3856 0C0C                                           l3848 0BFC  
                                         l3960 0790                                           l3952 077B  
                                         l3944 0763                                           l3936 0751  
                                         l3928 0742                                           l3872 0E5B  
                                         l3776 0C56                                           l3768 0C4E  
                                         l2986 0C22                                           l2978 0C17  
                                         l2994 0B3E                                           l3890 048A  
                                         l3882 0466                                           l3786 0DB5  
                                         l3858 0C0F                                           l3954 0780  
                                         l3946 0767                                           l3938 0757  
                                         l3874 0E62                                           l3866 0E46  
                                         l3778 0C57                                           l3970 0797  
                                         l2996 0B60                                           l2988 0B39  
                                         l3892 0492                                           l3884 046A  
                                         l3788 0DB9                                           l3948 0776  
                                         l3956 0786                                           l3876 0E71  
                                         l3868 0E4E                                           l3796 0AEB  
                                         l3980 07B4                                           l3972 0799  
                                         l3964 0795                                           l2998 0B63  
                                         l3894 049A                                           l3886 047B  
                                         l3958 078B                                           l3798 05F7  
                                         l3990 07E5                                           l3982 07B8  
                                         l3974 079D                                           l3896 049D  
                                         l3888 0486                                           l3992 0E13  
                                         l3984 07D0                                           l3976 07A3  
                                         l3898 04A8                                           l3994 0E2C  
                                         l3986 07D4                                           l3978 07A4  
                                         l3988 07E1                                           l3998 0F85  
                                         STR_1 0821                                           STR_2 085E  
                                         STR_3 084A                                           STR_4 0836  
                                         STR_5 080A                                           STR_6 07F1  
                                         STR_7 07F1                                           u3000 0354  
                                         u3001 0353                                           u2300 058C  
                                         u3020 054C                                           u2301 058B  
                                         u3021 054B                                           _LATA 010C  
                                         u2310 05AF                                           u3030 0570  
                                         _LATB 010D                                __end_of_INT_ISR 0AE5  
                                         u2311 05AE                                           u3031 056F  
                                         _LATC 010E                                           u2320 0DD7  
                                         u2400 0E71                                           u2321 0DD6  
                                         u2401 0E70                                           u3025 0548  
                                         u2410 046A                                           u2250 0B51  
                                         u2330 060C                                           u2411 0469  
                                         u2251 0B50                                           u3107 0FD8  
                                         u2331 060B                                           u2500 04E0  
                                         u2420 047B                                           u2260 0EBB  
                                         u2340 0641                                           u2501 04DF  
                                         u2421 047A                                           u2261 0EBA  
                                         u3117 0CFA                                           u2341 0640  
                                         u2430 049A                                           u2270 0EC0  
                                         u2510 073B                                           u2350 065A  
                                         u2431 0499                                           u2271 0EBF  
                                         u3127 0D1E                                           u2511 073A  
                                         u2351 0659                                           u2335 0608  
                                         u3047 0E8F                                           u2280 0ECF  
                                         u2360 0C01                                           u2600 078B  
                                         u2520 0746                                           u2281 0ECE  
                                         u2361 0C00                                           u3137 0D99  
                                         u2601 078A                                           u2521 0745  
                                         u3057 0E9E                                           u2450 04AC  
                                         u2290 0EED                                           u2530 0757  
                                         u2370 0E53                                           u2610 07A3  
                                         u2451 04AB                                           u2291 0EEC  
                                         u3147 0CB0                                           u2531 0756  
                                         u2371 0E52                                           u2611 07A2  
                                         u3067 03AF                                           u2620 0E20  
                                         u2700 0EB5                                           u2445 049E  
                                         u2621 0E1F                                           u3157 0D6F  
                                         u3077 0F98                                           u2701 0EB4  
                                         u2470 04C5                                           u2630 0E2B  
                                         u2550 0767                                           u2710 0095  
                                         u2471 04C4                                           u2631 0E2A  
                                         u2295 0EE9                                           u3167 0D46  
                                         u3087 0FAB                                           u2551 0766  
                                         u2711 0094                                           u2640 0429  
                                         u2800 014E                                           u2720 00A6  
                                         u2465 04AD                                           u3097 0FC5  
                                         u2545 075B                                           u2385 0E5C  
                                         u2801 014D                                           u2721 00A5  
                                         u2705 0EB1                                           u2490 04DB  
                                         u2570 0776                                           u2650 0450  
                                         u2810 016D                                           u2730 00D0  
                                         u2491 04DA                                           u2475 04C1  
                                         u2571 0775                                           u2395 0E63  
                                         u2651 044F                                           u2811 016C  
                                         u2731 00CF                                           u2660 045A  
                                         u2900 0241                                           u2820 0176  
                                         u2740 00E2                                           u2485 04CF  
                                         u2565 0768                                           u2661 0459  
                                         u2645 0425                                           u2901 0240  
                                         u2821 0175                                           u2741 00E1  
                                         u2725 00A2                                           u2590 0786  
                                         u2670 070A                                           u2910 0260  
                                         u2830 0185                                           u2750 0104  
                                         u2591 0785                                           u2575 0772  
                                         u2655 044C                                           u2671 0709  
                                         u2911 025F                                           u2831 0184  
                                         u2751 0103                                           u2680 071D  
                                         u2920 0278                                           u2840 019B  
                                         u2760 010D                                           u2585 077C  
                                         u2681 071C                                           u2921 0277  
                                         u2841 019A                                           u2761 010C  
                                         u2745 00DE                                           i1l10 0AE9  
                                         u2690 072F                                           u2930 0297  
                                         u2850 01BB                                           u2770 0116  
                                         u2691 072E                                           u2675 0706  
                                         u2931 0296                                           u2851 01BA  
                                         u2771 0115                                           u2940 02AF  
                                         u2860 01D3                                           u2780 011E  
                                         u2685 0719                                           u2941 02AE  
                                         u2861 01D2                                           u2781 011D  
                                         u2950 02CE                                           u2870 01F2  
                                         u2790 0145                                           u2951 02CD  
                                         u2871 01F1                                           u2791 0144  
                                         u2960 02E6                                           u2880 020A  
                                         u2961 02E5                                           u2881 0209  
                                         u2970 0305                                           u2890 0229  
                                         u2971 0304                                           u2891 0228  
                                         u2980 031D                                           u2981 031C  
                                         u2990 033C                                           u2991 033B  
                                         _TMR0 0015                                           _TMR1 0016  
                                         _TMR2 001A                                           _TMR4 0415  
                      __end_of_OPA2_Initialize 0AE0                                           _WPUA 020C  
                                         _WPUB 020D                                           _WPUC 020E  
                                         _dbuf 0120                                           _main 04F4  
                                         _prec 00A4                                           _nout 00A0  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E                              ?_FLASH_WriteBlock 0020  
          __end_of_INT_DefaultInterruptHandler 06CF                    _INT_DefaultInterruptHandler 0663  
                                         start 004B                __end_of_INT_SetInterruptHandler 0B0D  
                           ??_FLASH_WriteBlock 0023                     ??_TMR1_SetInterruptHandler 0075  
                   ??_TMR4_SetInterruptHandler 0075                        __end_of_TMR0_Initialize 0BAB  
               ??_TMR0_DefaultInterruptHandler 0070                                  ?_EUSART_Write 0070  
               __size_of_OSCILLATOR_Initialize 0008                  __end_of_OSCILLATOR_Initialize 0B39  
                              __end_of___aldiv 04F4                                          ?_main 0070  
                              __end_of___awdiv 0795                                          _ADRES 009B  
                              ___awdiv@divisor 0073                                          _T2CON 001C  
                                        _T4CON 0417                                          i1l114 0AD4  
                                        i1l152 003B                                          i1l144 0012  
                                        i1l146 001E                                          i1l147 0049  
                                        i1l155 0049                                          i1l148 002A  
                                        i1l415 0B87                                          i1l264 0AE4  
                                        i1l520 0B4A                                          i1l512 0BFA  
                                        i1l433 0F7F                                          i1l434 0F79  
                                        i1l268 0B78                                          i1l436 0F84  
                                        i1l365 0002                                          i1l278 06CD  
                                        i1l359 0B98                                          i1l289 06CE  
                                 ?_setLEDColor 0073                                ___awdiv@counter 0020  
                                 vfpfcnvrt@fmt 0025                       __size_of_selectSomething 005B  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          _RXPPS 0E24  
            __size_of_TMR0_SetInterruptHandler 0006                                _TMR4_Initialize 0BBD  
                          ___lmul@multiplicand 0024                      ?_TMR0_SetInterruptHandler 0073  
                             __end_of_TMR0_ISR 0B99                               __end_of_TMR1_ISR 0BFB  
                             __end_of_TMR4_ISR 0B88                                __end_of_initLED 0F3A  
                      __end_of_PIN_MANAGER_IOC 0AD5                                          _flags 00A6  
                               _WDT_Initialize 0AD5                                          _latch 00B1  
                                        _fputc 0EB6                            _readPersistentState 0C60  
                                        _width 00A2                                          _putch 0B1F  
                                        _stats 01A0                        __end_of_TMR1_Initialize 0C2A  
                                        pclath 000A                                __end_of_startUp 0EB6  
                                        status 0003                        ?_process_remote_command 0070  
                                        wtemp0 007E                               ??_DAC_Initialize 0073  
                              __initialization 004D                                   __end_of_main 0579  
                         ?_readPersistentState 0070                          __end_of_selectCurrent 0D5C  
                               ??_EUSART_Write 0073                        __end_of_TMR2_Initialize 0B41  
                  ?_INTERRUPT_InterruptManager 0070                               ?_OPA1_Initialize 0070  
                       ??_selectFrequencyValue 0039                                         ??_main 00EB  
                     __size_of_battery_voltage 0033                  __size_of_writePersistentState 005C  
                     ?_TMR4_LoadPeriodRegister 0070                         __end_of_WDT_Initialize 0AD8  
                                    ??_INT_ISR 0073              _EUSART_DefaultFramingErrorHandler 0000  
                                       _ADCON0 009D                                         _ADCON1 009E  
                   _EUSART_OverrunErrorHandler 00E0                      FLASH_WriteBlock@writeAddr 0020  
                                       ?_fputc 0075                                         _CCPR1L 0291  
                             ___awdiv@dividend 0075                                         _ANSELA 018C  
                                       ?_putch 0070                                         _ANSELB 018D  
                                       _ANSELC 018E                                         _BORCON 0116  
                                       _RC1REG 0199                                         _RA5PPS 0E95  
                                       _RC1STA 019D                                         _RC4PPS 0EA4  
                                       _RB7PPS 0E9F                                         _RC5PPS 0EA5  
                                       i1l3030 0F3A                                         i1l3040 0F50  
                                       i1l3032 0F3C                                         _ODCONA 028C  
                                       i1l3026 0B6C                                         i1l3042 0F56  
                                       i1l3050 0F68                                         i1l3034 0F41  
                                       _ODCONB 028D                                         _ODCONC 028E  
                                       i1l3028 0B73                                         i1l3220 0B8C  
                                       i1l3060 0B43                                         i1l3052 0F6D  
                                       i1l3044 0F5D                                         i1l3036 0F46  
                                       i1l3222 0B93                                         i1l3062 0B47  
                                       i1l3054 0F73                                         i1l3046 0F61  
                                       i1l3038 0F4B                                         i1l3230 0B7B  
                                       i1l3224 0AE0                                         i1l3216 0B88  
                                       i1l3064 0B49                                         i1l3240 0BF5  
                                       i1l3056 0F76                                         i1l3048 0F63  
                                       i1l3232 0B82                                         i1l3226 0AE1  
                                       i1l3218 0B89                                         i1l3058 0B41  
                                       i1l3234 0BE4                 __end_of_process_remote_command 03BD  
                                       i1l2700 0670                                         i1l3236 0BE6  
                                       i1l3228 0B79                                         i1l2710 0687  
                                       i1l2702 0676                                         i1l3238 0BEE  
                                       u130_20 06AE                                         i1l2720 069F  
                                       i1l2712 068D                                         i1l2704 067C  
                                       u122_20 066D                                         u130_21 06AD  
                                       u122_21 066C                                         i1l2730 06B4  
                                       i1l2714 0693                                         i1l2706 067D  
                                       i1l2724 06A6                                         i1l2716 0694  
                                       i1l2708 0680                                         i1l2726 06A8  
                                       i1l2718 0699                                         u131_20 06B4  
                                       i1l2728 06AE                                         u123_20 0676  
                                       i1l2736 06B9                                         i1l2680 0AE6  
                                       i1l3560 001A                                         u211_20 000A  
                                       i1l3552 0006                                         u131_21 06B3  
                                       u123_21 0675                                         u211_21 0009  
                                       i1l2690 0663                                         i1l3570 0038  
                                       i1l3562 0022                                         i1l3554 000A  
                                       i1l2692 0668                                         i1l3572 0040  
                                       i1l3564 0026                                         i1l3556 000E  
                                       i1l2694 0669                                         i1l3574 0045  
                                       i1l3566 002E                                         i1l3558 0016  
                                       u124_20 067C                                         i1l2696 066D  
                                       u220_20 0040                                         i1l3568 0033  
                                       u212_20 000E                                         u124_21 067B  
                                       u220_21 003F                                         u212_21 000D  
                                       i1l2698 066E                                         i1l4484 06C2  
                                       u221_20 0045                                         u213_20 0016  
                                       u221_21 0044                                         u213_21 0015  
                                       u125_25 0681                                         u126_20 068D  
                                       u214_20 001A                                         u126_21 068C  
                                       u214_21 0019                                         u127_20 0693  
                                       u215_20 0022                                         u127_21 0692  
                                       u215_21 0021                                         u128_20 069F  
                                       u160_20 0B73                                         u216_20 0026  
                                       u128_21 069E                                         u160_21 0B72  
                                       u216_21 0025                                         _INLVLA 038C  
                                       _INLVLB 038D                                         _INLVLC 038E  
                                       u129_20 06A5                                         u161_20 0F41  
                                       u217_20 002E                                         u129_21 06A4  
                                       u161_21 0F40                                         u217_21 002D  
                                       u162_20 0F4B                                         u218_20 0033  
                                       u162_21 0F4A                                         u218_21 0032  
                                       u163_20 0F56                                         u219_20 0038  
                                       _FVRCON 0117                                         u163_21 0F55  
                                       u219_21 0037                                         u164_20 0F5D  
                                       u164_21 0F5C                                         u165_20 0F73  
                                       u165_21 0F72                                         u175_20 0B93  
                                       u175_21 0B92                                         u176_20 0B82  
                                       u176_21 0B81                                         _INTPPS 0E10  
                                       _PMADRH 0192                                         u177_20 0BF5  
                                       _PMADRL 0191                                         u177_21 0BF4  
                             ?_OPA2_Initialize 0070                                         _PMDATH 0194  
                                       _PMDATL 0193                                         _PMCON2 0196  
                    __size_of_FLASH_EraseBlock 001C                                         _OSCCON 0099  
                                       _TX1REG 019A                                         _WDTCON 0097  
                                       _TX1STA 019E                               _LATCH_Initialize 0B55  
                            ??_selectFrequency 0039                                 _selectDecrease 0CA2  
                                       _Vdd_mv 00A8           __end_of_TMR1_DefaultInterruptHandler 0B4B  
        __size_of_TMR1_DefaultInterruptHandler 000A                   _TMR1_DefaultInterruptHandler 0B41  
                                 vfprintf@cfmt 0033                          ??_readPersistentState 0073  
                                       ___lmul 0E46                                      ??___aldiv 0030  
                                    ??___awdiv 0077                               ?_TMR0_Initialize 0070  
                      __end_of_TMR4_Initialize 0BD0                               ___awdiv@quotient 0022  
                               _selectIncrease 0CE9                                         _printf 0BAB  
                                       _toggle 00BE                                  ?_INT_CallBack 0070  
                                    ??_initLED 0073           __end_of_TMR4_DefaultInterruptHandler 0F85  
        __size_of_TMR4_DefaultInterruptHandler 004B                   _TMR4_DefaultInterruptHandler 0F3A  
                                       fputc@c 0075                                   __pdataCOMMON 007A  
                             setCurrent@Vdd_mv 003B                                ?_WDT_Initialize 0070  
                   __end_of_selectCurrentValue 0D85               __size_of_INT_SetInterruptHandler 0006  
                             __end_of_vfprintf 0DE0                                      ??_startUp 0020  
     TMR1_SetInterruptHandler@InterruptHandler 0073       TMR4_SetInterruptHandler@InterruptHandler 0073  
     TMR0_SetInterruptHandler@InterruptHandler 0073        INT_SetInterruptHandler@InterruptHandler 0073  
                             ?_PIN_MANAGER_IOC 0070                              ??_selectSomething 0020  
                             ?_TMR1_Initialize 0070                              _SYSTEM_Initialize 0CC4  
                      __end_of__initialization 0083                         __end_of_selectDecrease 0CC4  
                           ?_SYSTEM_Initialize 0070                         DAC_SetOutput@inputData 0070  
                            _dc_frequency_flag 007A                                 __pcstackCOMMON 0070  
                                 __pidataBANK1 0C2A                                   __pidataBANK2 0BD0  
                          ??_SYSTEM_Initialize 0075                                      ?_TMR0_ISR 0070  
                                    ?_TMR1_ISR 0070                  ?_TMR1_DefaultInterruptHandler 0070  
                                    ?_TMR4_ISR 0070                         __end_of_selectIncrease 0D0E  
                                __end_of_fputc 0EF6                                  __end_of_putch 0B25  
                             ?_TMR2_Initialize 0070                __end_of_TMR4_LoadPeriodRegister 0AEF  
                        main@low_reading_count 00EC                                 ??_INT_CallBack 0073  
                  __size_of_EXT_INT_Initialize 000C                                 _OPTION_REGbits 0095  
                ?_TMR4_DefaultInterruptHandler 0070                         __size_of_DAC_SetOutput 0005  
                         __size_of_setLEDColor 0017                    FLASH_WriteBlock@GIEBitValue 0028  
              ??_EUSART_SetOverrunErrorHandler 0075                              ??_battery_voltage 0078  
                                      ??_fputc 0020                      __end_of_SYSTEM_Initialize 0CE9  
                                      ??_putch 0074                                  ?_setFrequency 0037  
                                   __pbssBANK1 00A0                                     __pbssBANK2 0120  
                                   __pbssBANK3 01A0                           __end_of_EUSART_Write 0B55  
                              ?_selectDecrease 0070                          _TMR4_InterruptHandler 00D8  
                                   __pmaintext 04F4               __end_of_TMR0_SetInterruptHandler 0B13  
                                      ?___lmul 0020                                     ??_TMR0_ISR 0070  
                                   ??_TMR1_ISR 0071                                     ??_TMR4_ISR 0072  
                                   __pintentry 0004                                ?_selectIncrease 0070  
                               ___lmul@product 0073                               ?_TMR4_Initialize 0070  
                                      ?_printf 0035                      __size_of_FLASH_WriteBlock 006C  
                                      _OPA1CON 0511                                        _OPA2CON 0515  
                                      _LED_red 00B0                                        _SP1BRGH 019C  
                                      _SP1BRGL 019B                                        _INT_ISR 0AE0  
                           __size_of_vfpfcnvrt 007E                              _maxFrequencyIndex 00BA  
                                      _OSCSTAT 009A                                        _OSCTUNE 0098  
                                      _PWM3DCH 0618                                        _PWM4DCH 061B  
                                      _SLRCONA 030C                                        _SLRCONB 030D  
                                      _SLRCONC 030E                       ??_EUSART_SetErrorHandler 0075  
                               ??_setFrequency 0039                                _maxCurrentIndex 00BC  
                             _FLASH_EraseBlock 0C44                                  _DAC_SetOutput 0AE5  
                                      ___aldiv 0464                                        ___awdiv 0735  
                              __size_of___lmul 0034                                      ?_vfprintf 002D  
                                      __ptext1 0E7A                                        __ptext2 0C60  
                                      __ptext3 0087                                        __ptext4 0795  
                                      __ptext5 05F7                                        __ptext6 0C44  
                                      __ptext7 06CF                                        __ptext8 0AEA  
                                      __ptext9 03BD                                __size_of_printf 0012  
               ??_TMR1_DefaultInterruptHandler 0071                       __end_of_LATCH_Initialize 0B60  
                                      _initLED 0EF6                                      _T1CONbits 0018  
                                      _ir_code 00B4                          _OSCILLATOR_Initialize 0B31  
                                    _T2CONbits 001C              __size_of_TMR1_SetInterruptHandler 0006  
                             ___aldiv@dividend 002C                                      _T4CONbits 0417  
                     ??_PIN_MANAGER_Initialize 0073              __size_of_TMR4_SetInterruptHandler 0006  
                    ?_TMR1_SetInterruptHandler 0073                        _INT_SetInterruptHandler 0B07  
                    ?_TMR4_SetInterruptHandler 0073                                _selectFrequency 0D85  
                                      _startUp 0E7A                     __size_of_SYSTEM_Initialize 0025  
                                      clrloop0 0B26                           end_of_initialization 0083  
               ??_TMR4_DefaultInterruptHandler 0071                                     _setCurrent 03BD  
        __end_of_EUSART_SetOverrunErrorHandler 0B07         __size_of_EUSART_SetOverrunErrorHandler 0006  
                _EUSART_SetOverrunErrorHandler 0B01                   __end_of_writePersistentState 07F1  
                                    _LED_green 00AF                                        fputc@fp 0077  
                                      init_ram 0B2B                                        initloop 0B2C  
                         __end_of_INT_CallBack 0B79               __size_of_TMR4_LoadPeriodRegister 0005  
                            _EUSART_Initialize 0C80                                 _frequencyIndex 00E4  
                            setCurrent@Vdac_mv 0045                                 ?_DAC_SetOutput 0070  
                               _frequencyValue 0140                  __end_ofmain@BATTERY_THRESHOLD 0873  
                           ?_EUSART_Initialize 0070                              __end_of_vfpfcnvrt 05F7  
                             ___aldiv@quotient 0033                                     ??_vfprintf 0030  
                              setLEDColor@blue 0074                            ??_EUSART_Initialize 0075  
                             ??_WDT_Initialize 0073                       _TMR0_SetInterruptHandler 0B0D  
                              _selectSomething 0F85                        writePersistentState@buf 002E  
                      writePersistentState@idx 006F                  __size_of_selectFrequencyValue 0026  
                                    _TRISBbits 008D                                      _TRISCbits 008E  
                        __size_of_EUSART_Write 000A                       __size_of_OPA1_Initialize 0004  
              __size_of_EUSART_SetErrorHandler 0006                         __size_of_selectCurrent 0028  
                    __end_of_EUSART_Initialize 0CA2                                    _CCP1CONbits 0293  
                  __end_of_readPersistentState 0C80                             _selectCurrentValue 0D5C  
                            FLASH_WriteBlock@i 0029                       __size_of_OPA2_Initialize 0004  
                          ?_selectCurrentValue 0070                           __end_of_setFrequency 0735  
                               __end_of___lmul 0E7A                     _EUSART_DefaultErrorHandler 0000  
                                  vfpfcnvrt@ap 0026                                    vfpfcnvrt@fp 002C  
                              _battery_voltage 0E13                                  __pidataCOMMON 0003  
                                 _EUSART_Write 0B4B                              __size_of_TMR0_ISR 0011  
                            __size_of_TMR1_ISR 0017                              __size_of_TMR4_ISR 000F  
                             _FLASH_WriteBlock 05F7                         ?_OSCILLATOR_Initialize 0070  
                      __end_of_selectFrequency 0DAF                      ??_INT_SetInterruptHandler 0075  
                      __size_of_DAC_Initialize 0006                                 __end_of_printf 0BBD  
                 __p_HEF_persistent_state_text 0FE0                            start_initialization 004D  
                     __size_of_TMR0_Initialize 0012                __size_of_PIN_MANAGER_Initialize 0033  
                             ??_selectDecrease 0039                           ??_selectCurrentValue 0039  
                                  putch@txData 0074                                    ?_setCurrent 0039  
                              ??_DAC_SetOutput 0070                       __size_of_PIN_MANAGER_IOC 0001  
                 ?_INT_DefaultInterruptHandler 0070                               ??_selectIncrease 0039  
               ?_EUSART_SetOverrunErrorHandler 0073                       __size_of_TMR1_Initialize 0018  
                                  vfprintf@fmt 002D                     _EUSART_FramingErrorHandler 00E2  
                      __end_of_selectSomething 0FE0                                       ??___lmul 0073  
                       _EUSART_SetErrorHandler 0AF5                                    _CCPTMRSbits 029E  
                                _selectCurrent 0D34                                    __pdataBANK1 00BA  
                                  __pdataBANK2 0140                    FLASH_EraseBlock@GIEBitValue 0075  
                   __end_of_EXT_INT_Initialize 0B6C                       __end_of_FLASH_EraseBlock 0C60  
                                     ??_printf 0037                           _writePersistentState 0795  
                                ??_setLEDColor 0075                          writePersistentState@i 006E  
                                  __pbssCOMMON 0078                                      ___latbits 0001  
                     ??_process_remote_command 00E8                                       ?_INT_ISR 0070  
                                __pcstackBANK0 0020                                  __pcstackBANK1 00E8  
                     __size_of_TMR2_Initialize 0008                          __size_of_INT_CallBack 000D  
                                    _dac_value 00AC                        _TMR4_LoadPeriodRegister 0AEA  
                   __size_of_EUSART_Initialize 0022                                   _currentIndex 00E6  
                            ??_OPA1_Initialize 0073                                   _currentValue 00C0  
                        _TMR0_InterruptHandler 00DA                                      __pnvBANK1 00D4  
                                 _oneHzCounter 00B2                         _PIN_MANAGER_Initialize 0DE0  
                      __end_of_battery_voltage 0E46                  ??_INT_DefaultInterruptHandler 0070  
             __end_of_TMR1_SetInterruptHandler 0B19                                       ?___aldiv 0028  
             __end_of_TMR4_SetInterruptHandler 0B1F                                 ?_selectCurrent 0070  
                                     ?___awdiv 0073                                       _DAC1CON0 0118  
                                     _DAC1CON1 0119                   ??_INTERRUPT_InterruptManager 0073  
                          __size_of_setCurrent 00A7                          ?_writePersistentState 0070  
                            ??_OPA2_Initialize 0073                              __size_of_vfprintf 0031  
                             ?_selectFrequency 0070                                   _INT_CallBack 0B6C  
                                     _BAUD1CON 019F                                       ?_initLED 0070  
                            ?_LATCH_Initialize 0070                             ??_LATCH_Initialize 0073  
                     __size_of_TMR4_Initialize 0013                                       ?_startUp 0070  
                          __end_of_setLEDColor 0C12                                 __size_of_fputc 0040  
                                    _microamps 00AA                                 __size_of_putch 0006  
               FLASH_WriteBlock@blockStartAddr 0026           __end_ofmain@BATTERY_NUM_LOW_READINGS 0875  
                 main@BATTERY_NUM_LOW_READINGS 0873                                ___aldiv@divisor 0028  
                            ??_TMR0_Initialize 0075                                ___aldiv@counter 0031  
       EUSART_SetErrorHandler@interruptHandler 0073                                       _LATBbits 010D  
                                     _LATCbits 010E                                       _LED_blue 00AE  
                                    clear_ram0 0B25                                       _PIE1bits 0091  
                                     _PIE2bits 0092                              _eusartRxLastError 00B3  
                 _HEF_persistent_state_absaddr 0FE0                          __size_of_setFrequency 0066  
          __size_of_INTERRUPT_InterruptManager 0047                     ??_TMR0_SetInterruptHandler 0075  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 0075  
                                     _PIR2bits 0012                      FLASH_EraseBlock@startAddr 0073  
                             ?_selectSomething 0070                                 setLEDColor@red 0076  
                                     _TMR0_ISR 0B88              _EUSART_DefaultOverrunErrorHandler 0000  
                                     _TMR1_ISR 0BE4                                       _TMR4_ISR 0B79  
                            ??_PIN_MANAGER_IOC 0070                                      _vfpfcnvrt 0579  
                            ??_TMR1_Initialize 0075                                     _ADCON0bits 009D  
                               _DAC_Initialize 0AEF           __size_of_INT_DefaultInterruptHandler 006C  
              __size_of_process_remote_command 0336                               __size_of_INT_ISR 0005  
                    ??_TMR4_LoadPeriodRegister 0073                              ___lmul@multiplier 0020  
                                 _setFrequency 06CF                              ??_TMR2_Initialize 0073  
                 __end_of_HEF_persistent_state 1000                       __end_of_FLASH_WriteBlock 0663  
                 __end_of_selectFrequencyValue 0D34                                ??_selectCurrent 0039  
                             ?_battery_voltage 0037                                     vfprintf@ap 002F  
                                   vfprintf@fp 0032                          main@BATTERY_THRESHOLD 0871  
                      ??_OSCILLATOR_Initialize 0073                            _EUSART_ErrorHandler 00DE  
                             __size_of___aldiv 0090                               __size_of___awdiv 0060  
                       ??_writePersistentState 002A                         __end_of_DAC_Initialize 0AF5  
                                   ?_vfpfcnvrt 0025                            setFrequency@PR4_val 003A  
                     _TMR1_SetInterruptHandler 0B13                       _TMR4_SetInterruptHandler 0B19  
                        _TMR1_InterruptHandler 00D4                                    _currentIsOn 00BF  
                                  _setLEDColor 0BFB                             setCurrent@DACValue 0047  
                             __size_of_initLED 0044                                       __ptext10 0E46  
                                     __ptext11 0735                                       __ptext20 0BAB  
                                     __ptext12 0F85                                       __ptext21 0DAF  
                                     __ptext13 0CE9                                       __ptext30 0AD5  
                                     __ptext22 0579                                       __ptext14 0D0E  
                                     __ptext31 0BBD                                       __ptext23 0EB6  
                                     __ptext15 0D85                                       __ptext40 0ADC  
                                     __ptext32 0B19                                       __ptext24 0B1F  
                                     __ptext16 0CA2                                       __ptext41 0AD8  
                                     __ptext33 0B39                                       __ptext25 0B4B  
                                     __ptext17 0D5C                                       __ptext42 0B60  
                                     __ptext34 0C12                                       __ptext26 0E13  
                                     __ptext18 0D34                                       __ptext51 0B79  
                                     __ptext43 0B07                                       __ptext35 0B13  
                                     __ptext27 0464                                       __ptext19 0BFB  
                                     __ptext60 0B6C                                       __ptext52 0F3A  
                                     __ptext44 0C80                                       __ptext36 0B99  
                                     __ptext28 0EF6                                       __ptext61 0663  
                                     __ptext53 0BE4                                       __ptext45 0B01  
                                     __ptext37 0B0D                                       __ptext29 0CC4  
                                     __ptext54 0B41                                       __ptext46 0AFB  
                                     __ptext38 0DE0                                       __ptext55 0AE5  
                                     __ptext47 0AF5                                       __ptext39 0B31  
                                     __ptext56 0B88                                       __ptext48 0AEF  
                                     __ptext57 0002                                       __ptext49 0B55  
                                     __ptext58 0AD4                                       __ptext59 0AE0  
                             __size_of_startUp 003C                                   ??_setCurrent 003D  
                               _interfaceState 0078                              ??_TMR4_Initialize 0075  
                                __size_of_main 0085           __end_of_TMR0_DefaultInterruptHandler 0003  
        __size_of_TMR0_DefaultInterruptHandler 0001                   _TMR0_DefaultInterruptHandler 0002  
                      ?_EUSART_SetErrorHandler 0073                         _process_remote_command 0087  
                                   _RC1STAbits 019D  EUSART_SetOverrunErrorHandler@interruptHandler 0073  
                                     int$flags 007E                   __size_of_readPersistentState 0020  
                                     _vfprintf 0DAF             __end_of_INTERRUPT_InterruptManager 004B  
                   _INTERRUPT_InterruptManager 0004                                      printf@fmt 0035  
        __end_of_EUSART_SetFramingErrorHandler 0B01         __size_of_EUSART_SetFramingErrorHandler 0006  
                _EUSART_SetFramingErrorHandler 0AFB                                ?_DAC_Initialize 0070  
                            ?_FLASH_EraseBlock 0073                             __end_of_setCurrent 0464  
                           ??_FLASH_EraseBlock 0075                                     _INTCONbits 000B  
              INT_DefaultInterruptHandler@time 0072                                    _PWM3DCLbits 0617  
                              _OPA1_Initialize 0AD8                                    _PWM4DCLbits 061A  
                                   _FVRCONbits 0117                           _INT_InterruptHandler 00DC  
                                  _PWM3CONbits 0619                                    _PWM4CONbits 061C  
                           _EXT_INT_Initialize 0B60                        __size_of_WDT_Initialize 0003  
                  __size_of_selectCurrentValue 0029                                       intlevel1 0000  
                                   _PMCON1bits 0195                        ?_PIN_MANAGER_Initialize 0070  
                   process_remote_command@code 00EA                 __end_of_EUSART_SetErrorHandler 0AFB  
                          ?_EXT_INT_Initialize 0070                          __end_of_DAC_SetOutput 0AEA  
                              _OPA2_Initialize 0ADC                  ?_TMR0_DefaultInterruptHandler 0070  
                                     printf@ap 0038  EUSART_SetFramingErrorHandler@interruptHandler 0073  
                     ?_INT_SetInterruptHandler 0073                                    ??_vfpfcnvrt 0027  
                                     startUp@i 0022                                  __pstringtext1 0871  
                                __pstringtext2 0873                                  __pstringtext3 07F1  
                                __pstringtext4 080A                                  __pstringtext5 0821  
                                __pstringtext6 0836                                  __pstringtext7 084A  
                                __pstringtext8 085E                                  __pstringtext9 0000  
                         ??_EXT_INT_Initialize 0075                                     _OPTION_REG 0095  
                         _HEF_persistent_state 0FE0                               setLEDColor@green 0073  
                         _selectFrequencyValue 0D0E                                _TMR0_Initialize 0B99  
                          setCurrent@microamps 0039                                   ___aldiv@sign 0032  
                                   _TX1STAbits 019E                       setFrequency@frequency_hz 0037  
                           EUSART_Write@txData 0073                 __end_of_PIN_MANAGER_Initialize 0E13  
                              _PIN_MANAGER_IOC 0AD4                      __size_of_LATCH_Initialize 000B  
                              _TMR1_Initialize 0C12                        __size_of_selectDecrease 0022  
             TMR4_LoadPeriodRegister@periodVal 0073  
