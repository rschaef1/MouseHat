

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Dec 01 17:12:21 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16LF1708
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=2,noexec
     7                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     9                           	psect	_HEF_persistent_state_text,global,class=STRCODE,delta=2,noexec
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    15                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    16                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    17                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    20                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    21                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    22                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    23                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    24                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,noexec
    25                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    26                           	psect	inittext,global,class=CODE,delta=2
    27                           	psect	clrtext,global,class=CODE,delta=2
    28                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    29                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    30                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    31                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    32                           	psect	text1,local,class=CODE,merge=1,delta=2
    33                           	psect	text2,local,class=CODE,merge=1,delta=2
    34                           	psect	text3,local,class=CODE,merge=1,delta=2
    35                           	psect	text4,local,class=CODE,merge=1,delta=2
    36                           	psect	text5,local,class=CODE,merge=1,delta=2
    37                           	psect	text6,local,class=CODE,merge=1,delta=2
    38                           	psect	text7,local,class=CODE,merge=1,delta=2
    39                           	psect	text8,local,class=CODE,merge=1,delta=2
    40                           	psect	text9,local,class=CODE,merge=1,delta=2
    41                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text12,local,class=CODE,merge=1,delta=2
    44                           	psect	text13,local,class=CODE,merge=1,delta=2
    45                           	psect	text14,local,class=CODE,merge=1,delta=2
    46                           	psect	text15,local,class=CODE,merge=1,delta=2
    47                           	psect	text16,local,class=CODE,merge=1,delta=2
    48                           	psect	text17,local,class=CODE,merge=1,delta=2
    49                           	psect	text18,local,class=CODE,merge=1,delta=2
    50                           	psect	text19,local,class=CODE,merge=1,delta=2,group=3
    51                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text22,local,class=CODE,merge=1,delta=2,group=3
    54                           	psect	text23,local,class=CODE,merge=1,delta=2
    55                           	psect	text24,local,class=CODE,merge=1,delta=2
    56                           	psect	text25,local,class=CODE,merge=1,delta=2
    57                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text27,local,class=CODE,merge=1,delta=2
    59                           	psect	text28,local,class=CODE,merge=1,delta=2
    60                           	psect	text29,local,class=CODE,merge=1,delta=2
    61                           	psect	text30,local,class=CODE,merge=1,delta=2
    62                           	psect	text31,local,class=CODE,merge=1,delta=2
    63                           	psect	text32,local,class=CODE,merge=1,delta=2
    64                           	psect	text33,local,class=CODE,merge=1,delta=2
    65                           	psect	text34,local,class=CODE,merge=1,delta=2
    66                           	psect	text35,local,class=CODE,merge=1,delta=2
    67                           	psect	text36,local,class=CODE,merge=1,delta=2
    68                           	psect	text37,local,class=CODE,merge=1,delta=2
    69                           	psect	text38,local,class=CODE,merge=1,delta=2
    70                           	psect	text39,local,class=CODE,merge=1,delta=2
    71                           	psect	text40,local,class=CODE,merge=1,delta=2
    72                           	psect	text41,local,class=CODE,merge=1,delta=2
    73                           	psect	text42,local,class=CODE,merge=1,delta=2
    74                           	psect	text43,local,class=CODE,merge=1,delta=2
    75                           	psect	text44,local,class=CODE,merge=1,delta=2
    76                           	psect	text45,local,class=CODE,merge=1,delta=2
    77                           	psect	text46,local,class=CODE,merge=1,delta=2
    78                           	psect	text47,local,class=CODE,merge=1,delta=2
    79                           	psect	text48,local,class=CODE,merge=1,delta=2
    80                           	psect	text49,local,class=CODE,merge=1,delta=2
    81                           	psect	text50,local,class=CODE,merge=1,delta=2
    82                           	psect	intentry,global,class=CODE,delta=2
    83                           	psect	text52,local,class=CODE,merge=1,delta=2
    84                           	psect	text53,local,class=CODE,merge=1,delta=2
    85                           	psect	text54,local,class=CODE,merge=1,delta=2
    86                           	psect	text55,local,class=CODE,merge=1,delta=2
    87                           	psect	text56,local,class=CODE,merge=1,delta=2
    88                           	psect	text57,local,class=CODE,merge=1,delta=2
    89                           	psect	text58,local,class=CODE,merge=1,delta=2
    90                           	psect	text59,local,class=CODE,merge=1,delta=2
    91                           	psect	text60,local,class=CODE,merge=1,delta=2
    92                           	psect	text61,local,class=CODE,merge=1,delta=2
    93                           	psect	text62,local,class=CODE,merge=1,delta=2
    94                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    95                           	dabs	1,0x7E,2
    96  0000                     
    97                           ; Version 2.32
    98                           ; Generated 02/02/2021 GMT
    99                           ; 
   100                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   101                           ; All rights reserved.
   102                           ; 
   103                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   104                           ; 
   105                           ; Redistribution and use in source and binary forms, with or without modification, are
   106                           ; permitted provided that the following conditions are met:
   107                           ; 
   108                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   109                           ;        conditions and the following disclaimer.
   110                           ; 
   111                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   112                           ;        of conditions and the following disclaimer in the documentation and/or other
   113                           ;        materials provided with the distribution. Publication is not required when
   114                           ;        this file is used in an embedded application.
   115                           ; 
   116                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   117                           ;        software without specific prior written permission.
   118                           ; 
   119                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   120                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   121                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   122                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   123                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   124                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   125                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   126                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   127                           ; 
   128                           ; 
   129                           ; Code-generator required, PIC16LF1708 Definitions
   130                           ; 
   131                           ; SFR Addresses
   132  0000                     	;# 
   133  0001                     	;# 
   134  0002                     	;# 
   135  0003                     	;# 
   136  0004                     	;# 
   137  0005                     	;# 
   138  0006                     	;# 
   139  0007                     	;# 
   140  0008                     	;# 
   141  0009                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000D                     	;# 
   146  000E                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0013                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0016                     	;# 
   153  0017                     	;# 
   154  0018                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001B                     	;# 
   158  001C                     	;# 
   159  008C                     	;# 
   160  008D                     	;# 
   161  008E                     	;# 
   162  0091                     	;# 
   163  0092                     	;# 
   164  0093                     	;# 
   165  0095                     	;# 
   166  0096                     	;# 
   167  0097                     	;# 
   168  0098                     	;# 
   169  0099                     	;# 
   170  009A                     	;# 
   171  009B                     	;# 
   172  009B                     	;# 
   173  009C                     	;# 
   174  009D                     	;# 
   175  009E                     	;# 
   176  009F                     	;# 
   177  010C                     	;# 
   178  010D                     	;# 
   179  010E                     	;# 
   180  0111                     	;# 
   181  0112                     	;# 
   182  0113                     	;# 
   183  0114                     	;# 
   184  0115                     	;# 
   185  0116                     	;# 
   186  0117                     	;# 
   187  0118                     	;# 
   188  0119                     	;# 
   189  011C                     	;# 
   190  018C                     	;# 
   191  018D                     	;# 
   192  018E                     	;# 
   193  0191                     	;# 
   194  0191                     	;# 
   195  0192                     	;# 
   196  0193                     	;# 
   197  0193                     	;# 
   198  0194                     	;# 
   199  0195                     	;# 
   200  0196                     	;# 
   201  0199                     	;# 
   202  0199                     	;# 
   203  0199                     	;# 
   204  019A                     	;# 
   205  019A                     	;# 
   206  019A                     	;# 
   207  019B                     	;# 
   208  019B                     	;# 
   209  019B                     	;# 
   210  019B                     	;# 
   211  019B                     	;# 
   212  019C                     	;# 
   213  019C                     	;# 
   214  019C                     	;# 
   215  019D                     	;# 
   216  019D                     	;# 
   217  019D                     	;# 
   218  019E                     	;# 
   219  019E                     	;# 
   220  019E                     	;# 
   221  019F                     	;# 
   222  019F                     	;# 
   223  019F                     	;# 
   224  019F                     	;# 
   225  019F                     	;# 
   226  020C                     	;# 
   227  020D                     	;# 
   228  020E                     	;# 
   229  0211                     	;# 
   230  0211                     	;# 
   231  0212                     	;# 
   232  0212                     	;# 
   233  0213                     	;# 
   234  0213                     	;# 
   235  0214                     	;# 
   236  0214                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0216                     	;# 
   242  0216                     	;# 
   243  0217                     	;# 
   244  0217                     	;# 
   245  028C                     	;# 
   246  028D                     	;# 
   247  028E                     	;# 
   248  0291                     	;# 
   249  0291                     	;# 
   250  0292                     	;# 
   251  0293                     	;# 
   252  0293                     	;# 
   253  0298                     	;# 
   254  0298                     	;# 
   255  0299                     	;# 
   256  029A                     	;# 
   257  029A                     	;# 
   258  029E                     	;# 
   259  030C                     	;# 
   260  030D                     	;# 
   261  030E                     	;# 
   262  038C                     	;# 
   263  038D                     	;# 
   264  038E                     	;# 
   265  0391                     	;# 
   266  0392                     	;# 
   267  0393                     	;# 
   268  0394                     	;# 
   269  0395                     	;# 
   270  0396                     	;# 
   271  0397                     	;# 
   272  0398                     	;# 
   273  0399                     	;# 
   274  0415                     	;# 
   275  0416                     	;# 
   276  0417                     	;# 
   277  041C                     	;# 
   278  041D                     	;# 
   279  041E                     	;# 
   280  0511                     	;# 
   281  0515                     	;# 
   282  0617                     	;# 
   283  0618                     	;# 
   284  0619                     	;# 
   285  0619                     	;# 
   286  061A                     	;# 
   287  061B                     	;# 
   288  061C                     	;# 
   289  061C                     	;# 
   290  0691                     	;# 
   291  0692                     	;# 
   292  0693                     	;# 
   293  0694                     	;# 
   294  0695                     	;# 
   295  0696                     	;# 
   296  0697                     	;# 
   297  0698                     	;# 
   298  0699                     	;# 
   299  069A                     	;# 
   300  069B                     	;# 
   301  069C                     	;# 
   302  069D                     	;# 
   303  069E                     	;# 
   304  069F                     	;# 
   305  0E0F                     	;# 
   306  0E10                     	;# 
   307  0E11                     	;# 
   308  0E12                     	;# 
   309  0E13                     	;# 
   310  0E14                     	;# 
   311  0E15                     	;# 
   312  0E17                     	;# 
   313  0E20                     	;# 
   314  0E21                     	;# 
   315  0E22                     	;# 
   316  0E24                     	;# 
   317  0E25                     	;# 
   318  0E28                     	;# 
   319  0E29                     	;# 
   320  0E2A                     	;# 
   321  0E2B                     	;# 
   322  0E90                     	;# 
   323  0E91                     	;# 
   324  0E92                     	;# 
   325  0E94                     	;# 
   326  0E95                     	;# 
   327  0E9C                     	;# 
   328  0E9D                     	;# 
   329  0E9E                     	;# 
   330  0E9F                     	;# 
   331  0EA0                     	;# 
   332  0EA1                     	;# 
   333  0EA2                     	;# 
   334  0EA3                     	;# 
   335  0EA4                     	;# 
   336  0EA5                     	;# 
   337  0EA6                     	;# 
   338  0EA7                     	;# 
   339  0F0F                     	;# 
   340  0F10                     	;# 
   341  0F11                     	;# 
   342  0F12                     	;# 
   343  0F13                     	;# 
   344  0F14                     	;# 
   345  0F15                     	;# 
   346  0F16                     	;# 
   347  0F17                     	;# 
   348  0F18                     	;# 
   349  0F19                     	;# 
   350  0F1A                     	;# 
   351  0F1B                     	;# 
   352  0F1C                     	;# 
   353  0F1D                     	;# 
   354  0F1E                     	;# 
   355  0F1F                     	;# 
   356  0F20                     	;# 
   357  0F21                     	;# 
   358  0F22                     	;# 
   359  0F23                     	;# 
   360  0F24                     	;# 
   361  0F25                     	;# 
   362  0F26                     	;# 
   363  0F27                     	;# 
   364  0F28                     	;# 
   365  0F29                     	;# 
   366  0F2A                     	;# 
   367  0F2B                     	;# 
   368  0F2C                     	;# 
   369  0F2D                     	;# 
   370  0FE4                     	;# 
   371  0FE5                     	;# 
   372  0FE6                     	;# 
   373  0FE7                     	;# 
   374  0FE8                     	;# 
   375  0FE9                     	;# 
   376  0FEA                     	;# 
   377  0FEB                     	;# 
   378  0FED                     	;# 
   379  0FEE                     	;# 
   380  0FEF                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  0011                     	;# 
   397  0012                     	;# 
   398  0013                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0016                     	;# 
   402  0017                     	;# 
   403  0018                     	;# 
   404  0019                     	;# 
   405  001A                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  008C                     	;# 
   409  008D                     	;# 
   410  008E                     	;# 
   411  0091                     	;# 
   412  0092                     	;# 
   413  0093                     	;# 
   414  0095                     	;# 
   415  0096                     	;# 
   416  0097                     	;# 
   417  0098                     	;# 
   418  0099                     	;# 
   419  009A                     	;# 
   420  009B                     	;# 
   421  009B                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009E                     	;# 
   425  009F                     	;# 
   426  010C                     	;# 
   427  010D                     	;# 
   428  010E                     	;# 
   429  0111                     	;# 
   430  0112                     	;# 
   431  0113                     	;# 
   432  0114                     	;# 
   433  0115                     	;# 
   434  0116                     	;# 
   435  0117                     	;# 
   436  0118                     	;# 
   437  0119                     	;# 
   438  011C                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  018E                     	;# 
   442  0191                     	;# 
   443  0191                     	;# 
   444  0192                     	;# 
   445  0193                     	;# 
   446  0193                     	;# 
   447  0194                     	;# 
   448  0195                     	;# 
   449  0196                     	;# 
   450  0199                     	;# 
   451  0199                     	;# 
   452  0199                     	;# 
   453  019A                     	;# 
   454  019A                     	;# 
   455  019A                     	;# 
   456  019B                     	;# 
   457  019B                     	;# 
   458  019B                     	;# 
   459  019B                     	;# 
   460  019B                     	;# 
   461  019C                     	;# 
   462  019C                     	;# 
   463  019C                     	;# 
   464  019D                     	;# 
   465  019D                     	;# 
   466  019D                     	;# 
   467  019E                     	;# 
   468  019E                     	;# 
   469  019E                     	;# 
   470  019F                     	;# 
   471  019F                     	;# 
   472  019F                     	;# 
   473  019F                     	;# 
   474  019F                     	;# 
   475  020C                     	;# 
   476  020D                     	;# 
   477  020E                     	;# 
   478  0211                     	;# 
   479  0211                     	;# 
   480  0212                     	;# 
   481  0212                     	;# 
   482  0213                     	;# 
   483  0213                     	;# 
   484  0214                     	;# 
   485  0214                     	;# 
   486  0215                     	;# 
   487  0215                     	;# 
   488  0215                     	;# 
   489  0215                     	;# 
   490  0216                     	;# 
   491  0216                     	;# 
   492  0217                     	;# 
   493  0217                     	;# 
   494  028C                     	;# 
   495  028D                     	;# 
   496  028E                     	;# 
   497  0291                     	;# 
   498  0291                     	;# 
   499  0292                     	;# 
   500  0293                     	;# 
   501  0293                     	;# 
   502  0298                     	;# 
   503  0298                     	;# 
   504  0299                     	;# 
   505  029A                     	;# 
   506  029A                     	;# 
   507  029E                     	;# 
   508  030C                     	;# 
   509  030D                     	;# 
   510  030E                     	;# 
   511  038C                     	;# 
   512  038D                     	;# 
   513  038E                     	;# 
   514  0391                     	;# 
   515  0392                     	;# 
   516  0393                     	;# 
   517  0394                     	;# 
   518  0395                     	;# 
   519  0396                     	;# 
   520  0397                     	;# 
   521  0398                     	;# 
   522  0399                     	;# 
   523  0415                     	;# 
   524  0416                     	;# 
   525  0417                     	;# 
   526  041C                     	;# 
   527  041D                     	;# 
   528  041E                     	;# 
   529  0511                     	;# 
   530  0515                     	;# 
   531  0617                     	;# 
   532  0618                     	;# 
   533  0619                     	;# 
   534  0619                     	;# 
   535  061A                     	;# 
   536  061B                     	;# 
   537  061C                     	;# 
   538  061C                     	;# 
   539  0691                     	;# 
   540  0692                     	;# 
   541  0693                     	;# 
   542  0694                     	;# 
   543  0695                     	;# 
   544  0696                     	;# 
   545  0697                     	;# 
   546  0698                     	;# 
   547  0699                     	;# 
   548  069A                     	;# 
   549  069B                     	;# 
   550  069C                     	;# 
   551  069D                     	;# 
   552  069E                     	;# 
   553  069F                     	;# 
   554  0E0F                     	;# 
   555  0E10                     	;# 
   556  0E11                     	;# 
   557  0E12                     	;# 
   558  0E13                     	;# 
   559  0E14                     	;# 
   560  0E15                     	;# 
   561  0E17                     	;# 
   562  0E20                     	;# 
   563  0E21                     	;# 
   564  0E22                     	;# 
   565  0E24                     	;# 
   566  0E25                     	;# 
   567  0E28                     	;# 
   568  0E29                     	;# 
   569  0E2A                     	;# 
   570  0E2B                     	;# 
   571  0E90                     	;# 
   572  0E91                     	;# 
   573  0E92                     	;# 
   574  0E94                     	;# 
   575  0E95                     	;# 
   576  0E9C                     	;# 
   577  0E9D                     	;# 
   578  0E9E                     	;# 
   579  0E9F                     	;# 
   580  0EA0                     	;# 
   581  0EA1                     	;# 
   582  0EA2                     	;# 
   583  0EA3                     	;# 
   584  0EA4                     	;# 
   585  0EA5                     	;# 
   586  0EA6                     	;# 
   587  0EA7                     	;# 
   588  0F0F                     	;# 
   589  0F10                     	;# 
   590  0F11                     	;# 
   591  0F12                     	;# 
   592  0F13                     	;# 
   593  0F14                     	;# 
   594  0F15                     	;# 
   595  0F16                     	;# 
   596  0F17                     	;# 
   597  0F18                     	;# 
   598  0F19                     	;# 
   599  0F1A                     	;# 
   600  0F1B                     	;# 
   601  0F1C                     	;# 
   602  0F1D                     	;# 
   603  0F1E                     	;# 
   604  0F1F                     	;# 
   605  0F20                     	;# 
   606  0F21                     	;# 
   607  0F22                     	;# 
   608  0F23                     	;# 
   609  0F24                     	;# 
   610  0F25                     	;# 
   611  0F26                     	;# 
   612  0F27                     	;# 
   613  0F28                     	;# 
   614  0F29                     	;# 
   615  0F2A                     	;# 
   616  0F2B                     	;# 
   617  0F2C                     	;# 
   618  0F2D                     	;# 
   619  0FE4                     	;# 
   620  0FE5                     	;# 
   621  0FE6                     	;# 
   622  0FE7                     	;# 
   623  0FE8                     	;# 
   624  0FE9                     	;# 
   625  0FEA                     	;# 
   626  0FEB                     	;# 
   627  0FED                     	;# 
   628  0FEE                     	;# 
   629  0FEF                     	;# 
   630  0000                     	;# 
   631  0001                     	;# 
   632  0002                     	;# 
   633  0003                     	;# 
   634  0004                     	;# 
   635  0005                     	;# 
   636  0006                     	;# 
   637  0007                     	;# 
   638  0008                     	;# 
   639  0009                     	;# 
   640  000A                     	;# 
   641  000B                     	;# 
   642  000C                     	;# 
   643  000D                     	;# 
   644  000E                     	;# 
   645  0011                     	;# 
   646  0012                     	;# 
   647  0013                     	;# 
   648  0015                     	;# 
   649  0016                     	;# 
   650  0016                     	;# 
   651  0017                     	;# 
   652  0018                     	;# 
   653  0019                     	;# 
   654  001A                     	;# 
   655  001B                     	;# 
   656  001C                     	;# 
   657  008C                     	;# 
   658  008D                     	;# 
   659  008E                     	;# 
   660  0091                     	;# 
   661  0092                     	;# 
   662  0093                     	;# 
   663  0095                     	;# 
   664  0096                     	;# 
   665  0097                     	;# 
   666  0098                     	;# 
   667  0099                     	;# 
   668  009A                     	;# 
   669  009B                     	;# 
   670  009B                     	;# 
   671  009C                     	;# 
   672  009D                     	;# 
   673  009E                     	;# 
   674  009F                     	;# 
   675  010C                     	;# 
   676  010D                     	;# 
   677  010E                     	;# 
   678  0111                     	;# 
   679  0112                     	;# 
   680  0113                     	;# 
   681  0114                     	;# 
   682  0115                     	;# 
   683  0116                     	;# 
   684  0117                     	;# 
   685  0118                     	;# 
   686  0119                     	;# 
   687  011C                     	;# 
   688  018C                     	;# 
   689  018D                     	;# 
   690  018E                     	;# 
   691  0191                     	;# 
   692  0191                     	;# 
   693  0192                     	;# 
   694  0193                     	;# 
   695  0193                     	;# 
   696  0194                     	;# 
   697  0195                     	;# 
   698  0196                     	;# 
   699  0199                     	;# 
   700  0199                     	;# 
   701  0199                     	;# 
   702  019A                     	;# 
   703  019A                     	;# 
   704  019A                     	;# 
   705  019B                     	;# 
   706  019B                     	;# 
   707  019B                     	;# 
   708  019B                     	;# 
   709  019B                     	;# 
   710  019C                     	;# 
   711  019C                     	;# 
   712  019C                     	;# 
   713  019D                     	;# 
   714  019D                     	;# 
   715  019D                     	;# 
   716  019E                     	;# 
   717  019E                     	;# 
   718  019E                     	;# 
   719  019F                     	;# 
   720  019F                     	;# 
   721  019F                     	;# 
   722  019F                     	;# 
   723  019F                     	;# 
   724  020C                     	;# 
   725  020D                     	;# 
   726  020E                     	;# 
   727  0211                     	;# 
   728  0211                     	;# 
   729  0212                     	;# 
   730  0212                     	;# 
   731  0213                     	;# 
   732  0213                     	;# 
   733  0214                     	;# 
   734  0214                     	;# 
   735  0215                     	;# 
   736  0215                     	;# 
   737  0215                     	;# 
   738  0215                     	;# 
   739  0216                     	;# 
   740  0216                     	;# 
   741  0217                     	;# 
   742  0217                     	;# 
   743  028C                     	;# 
   744  028D                     	;# 
   745  028E                     	;# 
   746  0291                     	;# 
   747  0291                     	;# 
   748  0292                     	;# 
   749  0293                     	;# 
   750  0293                     	;# 
   751  0298                     	;# 
   752  0298                     	;# 
   753  0299                     	;# 
   754  029A                     	;# 
   755  029A                     	;# 
   756  029E                     	;# 
   757  030C                     	;# 
   758  030D                     	;# 
   759  030E                     	;# 
   760  038C                     	;# 
   761  038D                     	;# 
   762  038E                     	;# 
   763  0391                     	;# 
   764  0392                     	;# 
   765  0393                     	;# 
   766  0394                     	;# 
   767  0395                     	;# 
   768  0396                     	;# 
   769  0397                     	;# 
   770  0398                     	;# 
   771  0399                     	;# 
   772  0415                     	;# 
   773  0416                     	;# 
   774  0417                     	;# 
   775  041C                     	;# 
   776  041D                     	;# 
   777  041E                     	;# 
   778  0511                     	;# 
   779  0515                     	;# 
   780  0617                     	;# 
   781  0618                     	;# 
   782  0619                     	;# 
   783  0619                     	;# 
   784  061A                     	;# 
   785  061B                     	;# 
   786  061C                     	;# 
   787  061C                     	;# 
   788  0691                     	;# 
   789  0692                     	;# 
   790  0693                     	;# 
   791  0694                     	;# 
   792  0695                     	;# 
   793  0696                     	;# 
   794  0697                     	;# 
   795  0698                     	;# 
   796  0699                     	;# 
   797  069A                     	;# 
   798  069B                     	;# 
   799  069C                     	;# 
   800  069D                     	;# 
   801  069E                     	;# 
   802  069F                     	;# 
   803  0E0F                     	;# 
   804  0E10                     	;# 
   805  0E11                     	;# 
   806  0E12                     	;# 
   807  0E13                     	;# 
   808  0E14                     	;# 
   809  0E15                     	;# 
   810  0E17                     	;# 
   811  0E20                     	;# 
   812  0E21                     	;# 
   813  0E22                     	;# 
   814  0E24                     	;# 
   815  0E25                     	;# 
   816  0E28                     	;# 
   817  0E29                     	;# 
   818  0E2A                     	;# 
   819  0E2B                     	;# 
   820  0E90                     	;# 
   821  0E91                     	;# 
   822  0E92                     	;# 
   823  0E94                     	;# 
   824  0E95                     	;# 
   825  0E9C                     	;# 
   826  0E9D                     	;# 
   827  0E9E                     	;# 
   828  0E9F                     	;# 
   829  0EA0                     	;# 
   830  0EA1                     	;# 
   831  0EA2                     	;# 
   832  0EA3                     	;# 
   833  0EA4                     	;# 
   834  0EA5                     	;# 
   835  0EA6                     	;# 
   836  0EA7                     	;# 
   837  0F0F                     	;# 
   838  0F10                     	;# 
   839  0F11                     	;# 
   840  0F12                     	;# 
   841  0F13                     	;# 
   842  0F14                     	;# 
   843  0F15                     	;# 
   844  0F16                     	;# 
   845  0F17                     	;# 
   846  0F18                     	;# 
   847  0F19                     	;# 
   848  0F1A                     	;# 
   849  0F1B                     	;# 
   850  0F1C                     	;# 
   851  0F1D                     	;# 
   852  0F1E                     	;# 
   853  0F1F                     	;# 
   854  0F20                     	;# 
   855  0F21                     	;# 
   856  0F22                     	;# 
   857  0F23                     	;# 
   858  0F24                     	;# 
   859  0F25                     	;# 
   860  0F26                     	;# 
   861  0F27                     	;# 
   862  0F28                     	;# 
   863  0F29                     	;# 
   864  0F2A                     	;# 
   865  0F2B                     	;# 
   866  0F2C                     	;# 
   867  0F2D                     	;# 
   868  0FE4                     	;# 
   869  0FE5                     	;# 
   870  0FE6                     	;# 
   871  0FE7                     	;# 
   872  0FE8                     	;# 
   873  0FE9                     	;# 
   874  0FEA                     	;# 
   875  0FEB                     	;# 
   876  0FED                     	;# 
   877  0FEE                     	;# 
   878  0FEF                     	;# 
   879  0000                     	;# 
   880  0001                     	;# 
   881  0002                     	;# 
   882  0003                     	;# 
   883  0004                     	;# 
   884  0005                     	;# 
   885  0006                     	;# 
   886  0007                     	;# 
   887  0008                     	;# 
   888  0009                     	;# 
   889  000A                     	;# 
   890  000B                     	;# 
   891  000C                     	;# 
   892  000D                     	;# 
   893  000E                     	;# 
   894  0011                     	;# 
   895  0012                     	;# 
   896  0013                     	;# 
   897  0015                     	;# 
   898  0016                     	;# 
   899  0016                     	;# 
   900  0017                     	;# 
   901  0018                     	;# 
   902  0019                     	;# 
   903  001A                     	;# 
   904  001B                     	;# 
   905  001C                     	;# 
   906  008C                     	;# 
   907  008D                     	;# 
   908  008E                     	;# 
   909  0091                     	;# 
   910  0092                     	;# 
   911  0093                     	;# 
   912  0095                     	;# 
   913  0096                     	;# 
   914  0097                     	;# 
   915  0098                     	;# 
   916  0099                     	;# 
   917  009A                     	;# 
   918  009B                     	;# 
   919  009B                     	;# 
   920  009C                     	;# 
   921  009D                     	;# 
   922  009E                     	;# 
   923  009F                     	;# 
   924  010C                     	;# 
   925  010D                     	;# 
   926  010E                     	;# 
   927  0111                     	;# 
   928  0112                     	;# 
   929  0113                     	;# 
   930  0114                     	;# 
   931  0115                     	;# 
   932  0116                     	;# 
   933  0117                     	;# 
   934  0118                     	;# 
   935  0119                     	;# 
   936  011C                     	;# 
   937  018C                     	;# 
   938  018D                     	;# 
   939  018E                     	;# 
   940  0191                     	;# 
   941  0191                     	;# 
   942  0192                     	;# 
   943  0193                     	;# 
   944  0193                     	;# 
   945  0194                     	;# 
   946  0195                     	;# 
   947  0196                     	;# 
   948  0199                     	;# 
   949  0199                     	;# 
   950  0199                     	;# 
   951  019A                     	;# 
   952  019A                     	;# 
   953  019A                     	;# 
   954  019B                     	;# 
   955  019B                     	;# 
   956  019B                     	;# 
   957  019B                     	;# 
   958  019B                     	;# 
   959  019C                     	;# 
   960  019C                     	;# 
   961  019C                     	;# 
   962  019D                     	;# 
   963  019D                     	;# 
   964  019D                     	;# 
   965  019E                     	;# 
   966  019E                     	;# 
   967  019E                     	;# 
   968  019F                     	;# 
   969  019F                     	;# 
   970  019F                     	;# 
   971  019F                     	;# 
   972  019F                     	;# 
   973  020C                     	;# 
   974  020D                     	;# 
   975  020E                     	;# 
   976  0211                     	;# 
   977  0211                     	;# 
   978  0212                     	;# 
   979  0212                     	;# 
   980  0213                     	;# 
   981  0213                     	;# 
   982  0214                     	;# 
   983  0214                     	;# 
   984  0215                     	;# 
   985  0215                     	;# 
   986  0215                     	;# 
   987  0215                     	;# 
   988  0216                     	;# 
   989  0216                     	;# 
   990  0217                     	;# 
   991  0217                     	;# 
   992  028C                     	;# 
   993  028D                     	;# 
   994  028E                     	;# 
   995  0291                     	;# 
   996  0291                     	;# 
   997  0292                     	;# 
   998  0293                     	;# 
   999  0293                     	;# 
  1000  0298                     	;# 
  1001  0298                     	;# 
  1002  0299                     	;# 
  1003  029A                     	;# 
  1004  029A                     	;# 
  1005  029E                     	;# 
  1006  030C                     	;# 
  1007  030D                     	;# 
  1008  030E                     	;# 
  1009  038C                     	;# 
  1010  038D                     	;# 
  1011  038E                     	;# 
  1012  0391                     	;# 
  1013  0392                     	;# 
  1014  0393                     	;# 
  1015  0394                     	;# 
  1016  0395                     	;# 
  1017  0396                     	;# 
  1018  0397                     	;# 
  1019  0398                     	;# 
  1020  0399                     	;# 
  1021  0415                     	;# 
  1022  0416                     	;# 
  1023  0417                     	;# 
  1024  041C                     	;# 
  1025  041D                     	;# 
  1026  041E                     	;# 
  1027  0511                     	;# 
  1028  0515                     	;# 
  1029  0617                     	;# 
  1030  0618                     	;# 
  1031  0619                     	;# 
  1032  0619                     	;# 
  1033  061A                     	;# 
  1034  061B                     	;# 
  1035  061C                     	;# 
  1036  061C                     	;# 
  1037  0691                     	;# 
  1038  0692                     	;# 
  1039  0693                     	;# 
  1040  0694                     	;# 
  1041  0695                     	;# 
  1042  0696                     	;# 
  1043  0697                     	;# 
  1044  0698                     	;# 
  1045  0699                     	;# 
  1046  069A                     	;# 
  1047  069B                     	;# 
  1048  069C                     	;# 
  1049  069D                     	;# 
  1050  069E                     	;# 
  1051  069F                     	;# 
  1052  0E0F                     	;# 
  1053  0E10                     	;# 
  1054  0E11                     	;# 
  1055  0E12                     	;# 
  1056  0E13                     	;# 
  1057  0E14                     	;# 
  1058  0E15                     	;# 
  1059  0E17                     	;# 
  1060  0E20                     	;# 
  1061  0E21                     	;# 
  1062  0E22                     	;# 
  1063  0E24                     	;# 
  1064  0E25                     	;# 
  1065  0E28                     	;# 
  1066  0E29                     	;# 
  1067  0E2A                     	;# 
  1068  0E2B                     	;# 
  1069  0E90                     	;# 
  1070  0E91                     	;# 
  1071  0E92                     	;# 
  1072  0E94                     	;# 
  1073  0E95                     	;# 
  1074  0E9C                     	;# 
  1075  0E9D                     	;# 
  1076  0E9E                     	;# 
  1077  0E9F                     	;# 
  1078  0EA0                     	;# 
  1079  0EA1                     	;# 
  1080  0EA2                     	;# 
  1081  0EA3                     	;# 
  1082  0EA4                     	;# 
  1083  0EA5                     	;# 
  1084  0EA6                     	;# 
  1085  0EA7                     	;# 
  1086  0F0F                     	;# 
  1087  0F10                     	;# 
  1088  0F11                     	;# 
  1089  0F12                     	;# 
  1090  0F13                     	;# 
  1091  0F14                     	;# 
  1092  0F15                     	;# 
  1093  0F16                     	;# 
  1094  0F17                     	;# 
  1095  0F18                     	;# 
  1096  0F19                     	;# 
  1097  0F1A                     	;# 
  1098  0F1B                     	;# 
  1099  0F1C                     	;# 
  1100  0F1D                     	;# 
  1101  0F1E                     	;# 
  1102  0F1F                     	;# 
  1103  0F20                     	;# 
  1104  0F21                     	;# 
  1105  0F22                     	;# 
  1106  0F23                     	;# 
  1107  0F24                     	;# 
  1108  0F25                     	;# 
  1109  0F26                     	;# 
  1110  0F27                     	;# 
  1111  0F28                     	;# 
  1112  0F29                     	;# 
  1113  0F2A                     	;# 
  1114  0F2B                     	;# 
  1115  0F2C                     	;# 
  1116  0F2D                     	;# 
  1117  0FE4                     	;# 
  1118  0FE5                     	;# 
  1119  0FE6                     	;# 
  1120  0FE7                     	;# 
  1121  0FE8                     	;# 
  1122  0FE9                     	;# 
  1123  0FEA                     	;# 
  1124  0FEB                     	;# 
  1125  0FED                     	;# 
  1126  0FEE                     	;# 
  1127  0FEF                     	;# 
  1128  0000                     	;# 
  1129  0001                     	;# 
  1130  0002                     	;# 
  1131  0003                     	;# 
  1132  0004                     	;# 
  1133  0005                     	;# 
  1134  0006                     	;# 
  1135  0007                     	;# 
  1136  0008                     	;# 
  1137  0009                     	;# 
  1138  000A                     	;# 
  1139  000B                     	;# 
  1140  000C                     	;# 
  1141  000D                     	;# 
  1142  000E                     	;# 
  1143  0011                     	;# 
  1144  0012                     	;# 
  1145  0013                     	;# 
  1146  0015                     	;# 
  1147  0016                     	;# 
  1148  0016                     	;# 
  1149  0017                     	;# 
  1150  0018                     	;# 
  1151  0019                     	;# 
  1152  001A                     	;# 
  1153  001B                     	;# 
  1154  001C                     	;# 
  1155  008C                     	;# 
  1156  008D                     	;# 
  1157  008E                     	;# 
  1158  0091                     	;# 
  1159  0092                     	;# 
  1160  0093                     	;# 
  1161  0095                     	;# 
  1162  0096                     	;# 
  1163  0097                     	;# 
  1164  0098                     	;# 
  1165  0099                     	;# 
  1166  009A                     	;# 
  1167  009B                     	;# 
  1168  009B                     	;# 
  1169  009C                     	;# 
  1170  009D                     	;# 
  1171  009E                     	;# 
  1172  009F                     	;# 
  1173  010C                     	;# 
  1174  010D                     	;# 
  1175  010E                     	;# 
  1176  0111                     	;# 
  1177  0112                     	;# 
  1178  0113                     	;# 
  1179  0114                     	;# 
  1180  0115                     	;# 
  1181  0116                     	;# 
  1182  0117                     	;# 
  1183  0118                     	;# 
  1184  0119                     	;# 
  1185  011C                     	;# 
  1186  018C                     	;# 
  1187  018D                     	;# 
  1188  018E                     	;# 
  1189  0191                     	;# 
  1190  0191                     	;# 
  1191  0192                     	;# 
  1192  0193                     	;# 
  1193  0193                     	;# 
  1194  0194                     	;# 
  1195  0195                     	;# 
  1196  0196                     	;# 
  1197  0199                     	;# 
  1198  0199                     	;# 
  1199  0199                     	;# 
  1200  019A                     	;# 
  1201  019A                     	;# 
  1202  019A                     	;# 
  1203  019B                     	;# 
  1204  019B                     	;# 
  1205  019B                     	;# 
  1206  019B                     	;# 
  1207  019B                     	;# 
  1208  019C                     	;# 
  1209  019C                     	;# 
  1210  019C                     	;# 
  1211  019D                     	;# 
  1212  019D                     	;# 
  1213  019D                     	;# 
  1214  019E                     	;# 
  1215  019E                     	;# 
  1216  019E                     	;# 
  1217  019F                     	;# 
  1218  019F                     	;# 
  1219  019F                     	;# 
  1220  019F                     	;# 
  1221  019F                     	;# 
  1222  020C                     	;# 
  1223  020D                     	;# 
  1224  020E                     	;# 
  1225  0211                     	;# 
  1226  0211                     	;# 
  1227  0212                     	;# 
  1228  0212                     	;# 
  1229  0213                     	;# 
  1230  0213                     	;# 
  1231  0214                     	;# 
  1232  0214                     	;# 
  1233  0215                     	;# 
  1234  0215                     	;# 
  1235  0215                     	;# 
  1236  0215                     	;# 
  1237  0216                     	;# 
  1238  0216                     	;# 
  1239  0217                     	;# 
  1240  0217                     	;# 
  1241  028C                     	;# 
  1242  028D                     	;# 
  1243  028E                     	;# 
  1244  0291                     	;# 
  1245  0291                     	;# 
  1246  0292                     	;# 
  1247  0293                     	;# 
  1248  0293                     	;# 
  1249  0298                     	;# 
  1250  0298                     	;# 
  1251  0299                     	;# 
  1252  029A                     	;# 
  1253  029A                     	;# 
  1254  029E                     	;# 
  1255  030C                     	;# 
  1256  030D                     	;# 
  1257  030E                     	;# 
  1258  038C                     	;# 
  1259  038D                     	;# 
  1260  038E                     	;# 
  1261  0391                     	;# 
  1262  0392                     	;# 
  1263  0393                     	;# 
  1264  0394                     	;# 
  1265  0395                     	;# 
  1266  0396                     	;# 
  1267  0397                     	;# 
  1268  0398                     	;# 
  1269  0399                     	;# 
  1270  0415                     	;# 
  1271  0416                     	;# 
  1272  0417                     	;# 
  1273  041C                     	;# 
  1274  041D                     	;# 
  1275  041E                     	;# 
  1276  0511                     	;# 
  1277  0515                     	;# 
  1278  0617                     	;# 
  1279  0618                     	;# 
  1280  0619                     	;# 
  1281  0619                     	;# 
  1282  061A                     	;# 
  1283  061B                     	;# 
  1284  061C                     	;# 
  1285  061C                     	;# 
  1286  0691                     	;# 
  1287  0692                     	;# 
  1288  0693                     	;# 
  1289  0694                     	;# 
  1290  0695                     	;# 
  1291  0696                     	;# 
  1292  0697                     	;# 
  1293  0698                     	;# 
  1294  0699                     	;# 
  1295  069A                     	;# 
  1296  069B                     	;# 
  1297  069C                     	;# 
  1298  069D                     	;# 
  1299  069E                     	;# 
  1300  069F                     	;# 
  1301  0E0F                     	;# 
  1302  0E10                     	;# 
  1303  0E11                     	;# 
  1304  0E12                     	;# 
  1305  0E13                     	;# 
  1306  0E14                     	;# 
  1307  0E15                     	;# 
  1308  0E17                     	;# 
  1309  0E20                     	;# 
  1310  0E21                     	;# 
  1311  0E22                     	;# 
  1312  0E24                     	;# 
  1313  0E25                     	;# 
  1314  0E28                     	;# 
  1315  0E29                     	;# 
  1316  0E2A                     	;# 
  1317  0E2B                     	;# 
  1318  0E90                     	;# 
  1319  0E91                     	;# 
  1320  0E92                     	;# 
  1321  0E94                     	;# 
  1322  0E95                     	;# 
  1323  0E9C                     	;# 
  1324  0E9D                     	;# 
  1325  0E9E                     	;# 
  1326  0E9F                     	;# 
  1327  0EA0                     	;# 
  1328  0EA1                     	;# 
  1329  0EA2                     	;# 
  1330  0EA3                     	;# 
  1331  0EA4                     	;# 
  1332  0EA5                     	;# 
  1333  0EA6                     	;# 
  1334  0EA7                     	;# 
  1335  0F0F                     	;# 
  1336  0F10                     	;# 
  1337  0F11                     	;# 
  1338  0F12                     	;# 
  1339  0F13                     	;# 
  1340  0F14                     	;# 
  1341  0F15                     	;# 
  1342  0F16                     	;# 
  1343  0F17                     	;# 
  1344  0F18                     	;# 
  1345  0F19                     	;# 
  1346  0F1A                     	;# 
  1347  0F1B                     	;# 
  1348  0F1C                     	;# 
  1349  0F1D                     	;# 
  1350  0F1E                     	;# 
  1351  0F1F                     	;# 
  1352  0F20                     	;# 
  1353  0F21                     	;# 
  1354  0F22                     	;# 
  1355  0F23                     	;# 
  1356  0F24                     	;# 
  1357  0F25                     	;# 
  1358  0F26                     	;# 
  1359  0F27                     	;# 
  1360  0F28                     	;# 
  1361  0F29                     	;# 
  1362  0F2A                     	;# 
  1363  0F2B                     	;# 
  1364  0F2C                     	;# 
  1365  0F2D                     	;# 
  1366  0FE4                     	;# 
  1367  0FE5                     	;# 
  1368  0FE6                     	;# 
  1369  0FE7                     	;# 
  1370  0FE8                     	;# 
  1371  0FE9                     	;# 
  1372  0FEA                     	;# 
  1373  0FEB                     	;# 
  1374  0FED                     	;# 
  1375  0FEE                     	;# 
  1376  0FEF                     	;# 
  1377  0000                     	;# 
  1378  0001                     	;# 
  1379  0002                     	;# 
  1380  0003                     	;# 
  1381  0004                     	;# 
  1382  0005                     	;# 
  1383  0006                     	;# 
  1384  0007                     	;# 
  1385  0008                     	;# 
  1386  0009                     	;# 
  1387  000A                     	;# 
  1388  000B                     	;# 
  1389  000C                     	;# 
  1390  000D                     	;# 
  1391  000E                     	;# 
  1392  0011                     	;# 
  1393  0012                     	;# 
  1394  0013                     	;# 
  1395  0015                     	;# 
  1396  0016                     	;# 
  1397  0016                     	;# 
  1398  0017                     	;# 
  1399  0018                     	;# 
  1400  0019                     	;# 
  1401  001A                     	;# 
  1402  001B                     	;# 
  1403  001C                     	;# 
  1404  008C                     	;# 
  1405  008D                     	;# 
  1406  008E                     	;# 
  1407  0091                     	;# 
  1408  0092                     	;# 
  1409  0093                     	;# 
  1410  0095                     	;# 
  1411  0096                     	;# 
  1412  0097                     	;# 
  1413  0098                     	;# 
  1414  0099                     	;# 
  1415  009A                     	;# 
  1416  009B                     	;# 
  1417  009B                     	;# 
  1418  009C                     	;# 
  1419  009D                     	;# 
  1420  009E                     	;# 
  1421  009F                     	;# 
  1422  010C                     	;# 
  1423  010D                     	;# 
  1424  010E                     	;# 
  1425  0111                     	;# 
  1426  0112                     	;# 
  1427  0113                     	;# 
  1428  0114                     	;# 
  1429  0115                     	;# 
  1430  0116                     	;# 
  1431  0117                     	;# 
  1432  0118                     	;# 
  1433  0119                     	;# 
  1434  011C                     	;# 
  1435  018C                     	;# 
  1436  018D                     	;# 
  1437  018E                     	;# 
  1438  0191                     	;# 
  1439  0191                     	;# 
  1440  0192                     	;# 
  1441  0193                     	;# 
  1442  0193                     	;# 
  1443  0194                     	;# 
  1444  0195                     	;# 
  1445  0196                     	;# 
  1446  0199                     	;# 
  1447  0199                     	;# 
  1448  0199                     	;# 
  1449  019A                     	;# 
  1450  019A                     	;# 
  1451  019A                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019B                     	;# 
  1456  019B                     	;# 
  1457  019C                     	;# 
  1458  019C                     	;# 
  1459  019C                     	;# 
  1460  019D                     	;# 
  1461  019D                     	;# 
  1462  019D                     	;# 
  1463  019E                     	;# 
  1464  019E                     	;# 
  1465  019E                     	;# 
  1466  019F                     	;# 
  1467  019F                     	;# 
  1468  019F                     	;# 
  1469  019F                     	;# 
  1470  019F                     	;# 
  1471  020C                     	;# 
  1472  020D                     	;# 
  1473  020E                     	;# 
  1474  0211                     	;# 
  1475  0211                     	;# 
  1476  0212                     	;# 
  1477  0212                     	;# 
  1478  0213                     	;# 
  1479  0213                     	;# 
  1480  0214                     	;# 
  1481  0214                     	;# 
  1482  0215                     	;# 
  1483  0215                     	;# 
  1484  0215                     	;# 
  1485  0215                     	;# 
  1486  0216                     	;# 
  1487  0216                     	;# 
  1488  0217                     	;# 
  1489  0217                     	;# 
  1490  028C                     	;# 
  1491  028D                     	;# 
  1492  028E                     	;# 
  1493  0291                     	;# 
  1494  0291                     	;# 
  1495  0292                     	;# 
  1496  0293                     	;# 
  1497  0293                     	;# 
  1498  0298                     	;# 
  1499  0298                     	;# 
  1500  0299                     	;# 
  1501  029A                     	;# 
  1502  029A                     	;# 
  1503  029E                     	;# 
  1504  030C                     	;# 
  1505  030D                     	;# 
  1506  030E                     	;# 
  1507  038C                     	;# 
  1508  038D                     	;# 
  1509  038E                     	;# 
  1510  0391                     	;# 
  1511  0392                     	;# 
  1512  0393                     	;# 
  1513  0394                     	;# 
  1514  0395                     	;# 
  1515  0396                     	;# 
  1516  0397                     	;# 
  1517  0398                     	;# 
  1518  0399                     	;# 
  1519  0415                     	;# 
  1520  0416                     	;# 
  1521  0417                     	;# 
  1522  041C                     	;# 
  1523  041D                     	;# 
  1524  041E                     	;# 
  1525  0511                     	;# 
  1526  0515                     	;# 
  1527  0617                     	;# 
  1528  0618                     	;# 
  1529  0619                     	;# 
  1530  0619                     	;# 
  1531  061A                     	;# 
  1532  061B                     	;# 
  1533  061C                     	;# 
  1534  061C                     	;# 
  1535  0691                     	;# 
  1536  0692                     	;# 
  1537  0693                     	;# 
  1538  0694                     	;# 
  1539  0695                     	;# 
  1540  0696                     	;# 
  1541  0697                     	;# 
  1542  0698                     	;# 
  1543  0699                     	;# 
  1544  069A                     	;# 
  1545  069B                     	;# 
  1546  069C                     	;# 
  1547  069D                     	;# 
  1548  069E                     	;# 
  1549  069F                     	;# 
  1550  0E0F                     	;# 
  1551  0E10                     	;# 
  1552  0E11                     	;# 
  1553  0E12                     	;# 
  1554  0E13                     	;# 
  1555  0E14                     	;# 
  1556  0E15                     	;# 
  1557  0E17                     	;# 
  1558  0E20                     	;# 
  1559  0E21                     	;# 
  1560  0E22                     	;# 
  1561  0E24                     	;# 
  1562  0E25                     	;# 
  1563  0E28                     	;# 
  1564  0E29                     	;# 
  1565  0E2A                     	;# 
  1566  0E2B                     	;# 
  1567  0E90                     	;# 
  1568  0E91                     	;# 
  1569  0E92                     	;# 
  1570  0E94                     	;# 
  1571  0E95                     	;# 
  1572  0E9C                     	;# 
  1573  0E9D                     	;# 
  1574  0E9E                     	;# 
  1575  0E9F                     	;# 
  1576  0EA0                     	;# 
  1577  0EA1                     	;# 
  1578  0EA2                     	;# 
  1579  0EA3                     	;# 
  1580  0EA4                     	;# 
  1581  0EA5                     	;# 
  1582  0EA6                     	;# 
  1583  0EA7                     	;# 
  1584  0F0F                     	;# 
  1585  0F10                     	;# 
  1586  0F11                     	;# 
  1587  0F12                     	;# 
  1588  0F13                     	;# 
  1589  0F14                     	;# 
  1590  0F15                     	;# 
  1591  0F16                     	;# 
  1592  0F17                     	;# 
  1593  0F18                     	;# 
  1594  0F19                     	;# 
  1595  0F1A                     	;# 
  1596  0F1B                     	;# 
  1597  0F1C                     	;# 
  1598  0F1D                     	;# 
  1599  0F1E                     	;# 
  1600  0F1F                     	;# 
  1601  0F20                     	;# 
  1602  0F21                     	;# 
  1603  0F22                     	;# 
  1604  0F23                     	;# 
  1605  0F24                     	;# 
  1606  0F25                     	;# 
  1607  0F26                     	;# 
  1608  0F27                     	;# 
  1609  0F28                     	;# 
  1610  0F29                     	;# 
  1611  0F2A                     	;# 
  1612  0F2B                     	;# 
  1613  0F2C                     	;# 
  1614  0F2D                     	;# 
  1615  0FE4                     	;# 
  1616  0FE5                     	;# 
  1617  0FE6                     	;# 
  1618  0FE7                     	;# 
  1619  0FE8                     	;# 
  1620  0FE9                     	;# 
  1621  0FEA                     	;# 
  1622  0FEB                     	;# 
  1623  0FED                     	;# 
  1624  0FEE                     	;# 
  1625  0FEF                     	;# 
  1626  0000                     	;# 
  1627  0001                     	;# 
  1628  0002                     	;# 
  1629  0003                     	;# 
  1630  0004                     	;# 
  1631  0005                     	;# 
  1632  0006                     	;# 
  1633  0007                     	;# 
  1634  0008                     	;# 
  1635  0009                     	;# 
  1636  000A                     	;# 
  1637  000B                     	;# 
  1638  000C                     	;# 
  1639  000D                     	;# 
  1640  000E                     	;# 
  1641  0011                     	;# 
  1642  0012                     	;# 
  1643  0013                     	;# 
  1644  0015                     	;# 
  1645  0016                     	;# 
  1646  0016                     	;# 
  1647  0017                     	;# 
  1648  0018                     	;# 
  1649  0019                     	;# 
  1650  001A                     	;# 
  1651  001B                     	;# 
  1652  001C                     	;# 
  1653  008C                     	;# 
  1654  008D                     	;# 
  1655  008E                     	;# 
  1656  0091                     	;# 
  1657  0092                     	;# 
  1658  0093                     	;# 
  1659  0095                     	;# 
  1660  0096                     	;# 
  1661  0097                     	;# 
  1662  0098                     	;# 
  1663  0099                     	;# 
  1664  009A                     	;# 
  1665  009B                     	;# 
  1666  009B                     	;# 
  1667  009C                     	;# 
  1668  009D                     	;# 
  1669  009E                     	;# 
  1670  009F                     	;# 
  1671  010C                     	;# 
  1672  010D                     	;# 
  1673  010E                     	;# 
  1674  0111                     	;# 
  1675  0112                     	;# 
  1676  0113                     	;# 
  1677  0114                     	;# 
  1678  0115                     	;# 
  1679  0116                     	;# 
  1680  0117                     	;# 
  1681  0118                     	;# 
  1682  0119                     	;# 
  1683  011C                     	;# 
  1684  018C                     	;# 
  1685  018D                     	;# 
  1686  018E                     	;# 
  1687  0191                     	;# 
  1688  0191                     	;# 
  1689  0192                     	;# 
  1690  0193                     	;# 
  1691  0193                     	;# 
  1692  0194                     	;# 
  1693  0195                     	;# 
  1694  0196                     	;# 
  1695  0199                     	;# 
  1696  0199                     	;# 
  1697  0199                     	;# 
  1698  019A                     	;# 
  1699  019A                     	;# 
  1700  019A                     	;# 
  1701  019B                     	;# 
  1702  019B                     	;# 
  1703  019B                     	;# 
  1704  019B                     	;# 
  1705  019B                     	;# 
  1706  019C                     	;# 
  1707  019C                     	;# 
  1708  019C                     	;# 
  1709  019D                     	;# 
  1710  019D                     	;# 
  1711  019D                     	;# 
  1712  019E                     	;# 
  1713  019E                     	;# 
  1714  019E                     	;# 
  1715  019F                     	;# 
  1716  019F                     	;# 
  1717  019F                     	;# 
  1718  019F                     	;# 
  1719  019F                     	;# 
  1720  020C                     	;# 
  1721  020D                     	;# 
  1722  020E                     	;# 
  1723  0211                     	;# 
  1724  0211                     	;# 
  1725  0212                     	;# 
  1726  0212                     	;# 
  1727  0213                     	;# 
  1728  0213                     	;# 
  1729  0214                     	;# 
  1730  0214                     	;# 
  1731  0215                     	;# 
  1732  0215                     	;# 
  1733  0215                     	;# 
  1734  0215                     	;# 
  1735  0216                     	;# 
  1736  0216                     	;# 
  1737  0217                     	;# 
  1738  0217                     	;# 
  1739  028C                     	;# 
  1740  028D                     	;# 
  1741  028E                     	;# 
  1742  0291                     	;# 
  1743  0291                     	;# 
  1744  0292                     	;# 
  1745  0293                     	;# 
  1746  0293                     	;# 
  1747  0298                     	;# 
  1748  0298                     	;# 
  1749  0299                     	;# 
  1750  029A                     	;# 
  1751  029A                     	;# 
  1752  029E                     	;# 
  1753  030C                     	;# 
  1754  030D                     	;# 
  1755  030E                     	;# 
  1756  038C                     	;# 
  1757  038D                     	;# 
  1758  038E                     	;# 
  1759  0391                     	;# 
  1760  0392                     	;# 
  1761  0393                     	;# 
  1762  0394                     	;# 
  1763  0395                     	;# 
  1764  0396                     	;# 
  1765  0397                     	;# 
  1766  0398                     	;# 
  1767  0399                     	;# 
  1768  0415                     	;# 
  1769  0416                     	;# 
  1770  0417                     	;# 
  1771  041C                     	;# 
  1772  041D                     	;# 
  1773  041E                     	;# 
  1774  0511                     	;# 
  1775  0515                     	;# 
  1776  0617                     	;# 
  1777  0618                     	;# 
  1778  0619                     	;# 
  1779  0619                     	;# 
  1780  061A                     	;# 
  1781  061B                     	;# 
  1782  061C                     	;# 
  1783  061C                     	;# 
  1784  0691                     	;# 
  1785  0692                     	;# 
  1786  0693                     	;# 
  1787  0694                     	;# 
  1788  0695                     	;# 
  1789  0696                     	;# 
  1790  0697                     	;# 
  1791  0698                     	;# 
  1792  0699                     	;# 
  1793  069A                     	;# 
  1794  069B                     	;# 
  1795  069C                     	;# 
  1796  069D                     	;# 
  1797  069E                     	;# 
  1798  069F                     	;# 
  1799  0E0F                     	;# 
  1800  0E10                     	;# 
  1801  0E11                     	;# 
  1802  0E12                     	;# 
  1803  0E13                     	;# 
  1804  0E14                     	;# 
  1805  0E15                     	;# 
  1806  0E17                     	;# 
  1807  0E20                     	;# 
  1808  0E21                     	;# 
  1809  0E22                     	;# 
  1810  0E24                     	;# 
  1811  0E25                     	;# 
  1812  0E28                     	;# 
  1813  0E29                     	;# 
  1814  0E2A                     	;# 
  1815  0E2B                     	;# 
  1816  0E90                     	;# 
  1817  0E91                     	;# 
  1818  0E92                     	;# 
  1819  0E94                     	;# 
  1820  0E95                     	;# 
  1821  0E9C                     	;# 
  1822  0E9D                     	;# 
  1823  0E9E                     	;# 
  1824  0E9F                     	;# 
  1825  0EA0                     	;# 
  1826  0EA1                     	;# 
  1827  0EA2                     	;# 
  1828  0EA3                     	;# 
  1829  0EA4                     	;# 
  1830  0EA5                     	;# 
  1831  0EA6                     	;# 
  1832  0EA7                     	;# 
  1833  0F0F                     	;# 
  1834  0F10                     	;# 
  1835  0F11                     	;# 
  1836  0F12                     	;# 
  1837  0F13                     	;# 
  1838  0F14                     	;# 
  1839  0F15                     	;# 
  1840  0F16                     	;# 
  1841  0F17                     	;# 
  1842  0F18                     	;# 
  1843  0F19                     	;# 
  1844  0F1A                     	;# 
  1845  0F1B                     	;# 
  1846  0F1C                     	;# 
  1847  0F1D                     	;# 
  1848  0F1E                     	;# 
  1849  0F1F                     	;# 
  1850  0F20                     	;# 
  1851  0F21                     	;# 
  1852  0F22                     	;# 
  1853  0F23                     	;# 
  1854  0F24                     	;# 
  1855  0F25                     	;# 
  1856  0F26                     	;# 
  1857  0F27                     	;# 
  1858  0F28                     	;# 
  1859  0F29                     	;# 
  1860  0F2A                     	;# 
  1861  0F2B                     	;# 
  1862  0F2C                     	;# 
  1863  0F2D                     	;# 
  1864  0FE4                     	;# 
  1865  0FE5                     	;# 
  1866  0FE6                     	;# 
  1867  0FE7                     	;# 
  1868  0FE8                     	;# 
  1869  0FE9                     	;# 
  1870  0FEA                     	;# 
  1871  0FEB                     	;# 
  1872  0FED                     	;# 
  1873  0FEE                     	;# 
  1874  0FEF                     	;# 
  1875  0000                     	;# 
  1876  0001                     	;# 
  1877  0002                     	;# 
  1878  0003                     	;# 
  1879  0004                     	;# 
  1880  0005                     	;# 
  1881  0006                     	;# 
  1882  0007                     	;# 
  1883  0008                     	;# 
  1884  0009                     	;# 
  1885  000A                     	;# 
  1886  000B                     	;# 
  1887  000C                     	;# 
  1888  000D                     	;# 
  1889  000E                     	;# 
  1890  0011                     	;# 
  1891  0012                     	;# 
  1892  0013                     	;# 
  1893  0015                     	;# 
  1894  0016                     	;# 
  1895  0016                     	;# 
  1896  0017                     	;# 
  1897  0018                     	;# 
  1898  0019                     	;# 
  1899  001A                     	;# 
  1900  001B                     	;# 
  1901  001C                     	;# 
  1902  008C                     	;# 
  1903  008D                     	;# 
  1904  008E                     	;# 
  1905  0091                     	;# 
  1906  0092                     	;# 
  1907  0093                     	;# 
  1908  0095                     	;# 
  1909  0096                     	;# 
  1910  0097                     	;# 
  1911  0098                     	;# 
  1912  0099                     	;# 
  1913  009A                     	;# 
  1914  009B                     	;# 
  1915  009B                     	;# 
  1916  009C                     	;# 
  1917  009D                     	;# 
  1918  009E                     	;# 
  1919  009F                     	;# 
  1920  010C                     	;# 
  1921  010D                     	;# 
  1922  010E                     	;# 
  1923  0111                     	;# 
  1924  0112                     	;# 
  1925  0113                     	;# 
  1926  0114                     	;# 
  1927  0115                     	;# 
  1928  0116                     	;# 
  1929  0117                     	;# 
  1930  0118                     	;# 
  1931  0119                     	;# 
  1932  011C                     	;# 
  1933  018C                     	;# 
  1934  018D                     	;# 
  1935  018E                     	;# 
  1936  0191                     	;# 
  1937  0191                     	;# 
  1938  0192                     	;# 
  1939  0193                     	;# 
  1940  0193                     	;# 
  1941  0194                     	;# 
  1942  0195                     	;# 
  1943  0196                     	;# 
  1944  0199                     	;# 
  1945  0199                     	;# 
  1946  0199                     	;# 
  1947  019A                     	;# 
  1948  019A                     	;# 
  1949  019A                     	;# 
  1950  019B                     	;# 
  1951  019B                     	;# 
  1952  019B                     	;# 
  1953  019B                     	;# 
  1954  019B                     	;# 
  1955  019C                     	;# 
  1956  019C                     	;# 
  1957  019C                     	;# 
  1958  019D                     	;# 
  1959  019D                     	;# 
  1960  019D                     	;# 
  1961  019E                     	;# 
  1962  019E                     	;# 
  1963  019E                     	;# 
  1964  019F                     	;# 
  1965  019F                     	;# 
  1966  019F                     	;# 
  1967  019F                     	;# 
  1968  019F                     	;# 
  1969  020C                     	;# 
  1970  020D                     	;# 
  1971  020E                     	;# 
  1972  0211                     	;# 
  1973  0211                     	;# 
  1974  0212                     	;# 
  1975  0212                     	;# 
  1976  0213                     	;# 
  1977  0213                     	;# 
  1978  0214                     	;# 
  1979  0214                     	;# 
  1980  0215                     	;# 
  1981  0215                     	;# 
  1982  0215                     	;# 
  1983  0215                     	;# 
  1984  0216                     	;# 
  1985  0216                     	;# 
  1986  0217                     	;# 
  1987  0217                     	;# 
  1988  028C                     	;# 
  1989  028D                     	;# 
  1990  028E                     	;# 
  1991  0291                     	;# 
  1992  0291                     	;# 
  1993  0292                     	;# 
  1994  0293                     	;# 
  1995  0293                     	;# 
  1996  0298                     	;# 
  1997  0298                     	;# 
  1998  0299                     	;# 
  1999  029A                     	;# 
  2000  029A                     	;# 
  2001  029E                     	;# 
  2002  030C                     	;# 
  2003  030D                     	;# 
  2004  030E                     	;# 
  2005  038C                     	;# 
  2006  038D                     	;# 
  2007  038E                     	;# 
  2008  0391                     	;# 
  2009  0392                     	;# 
  2010  0393                     	;# 
  2011  0394                     	;# 
  2012  0395                     	;# 
  2013  0396                     	;# 
  2014  0397                     	;# 
  2015  0398                     	;# 
  2016  0399                     	;# 
  2017  0415                     	;# 
  2018  0416                     	;# 
  2019  0417                     	;# 
  2020  041C                     	;# 
  2021  041D                     	;# 
  2022  041E                     	;# 
  2023  0511                     	;# 
  2024  0515                     	;# 
  2025  0617                     	;# 
  2026  0618                     	;# 
  2027  0619                     	;# 
  2028  0619                     	;# 
  2029  061A                     	;# 
  2030  061B                     	;# 
  2031  061C                     	;# 
  2032  061C                     	;# 
  2033  0691                     	;# 
  2034  0692                     	;# 
  2035  0693                     	;# 
  2036  0694                     	;# 
  2037  0695                     	;# 
  2038  0696                     	;# 
  2039  0697                     	;# 
  2040  0698                     	;# 
  2041  0699                     	;# 
  2042  069A                     	;# 
  2043  069B                     	;# 
  2044  069C                     	;# 
  2045  069D                     	;# 
  2046  069E                     	;# 
  2047  069F                     	;# 
  2048  0E0F                     	;# 
  2049  0E10                     	;# 
  2050  0E11                     	;# 
  2051  0E12                     	;# 
  2052  0E13                     	;# 
  2053  0E14                     	;# 
  2054  0E15                     	;# 
  2055  0E17                     	;# 
  2056  0E20                     	;# 
  2057  0E21                     	;# 
  2058  0E22                     	;# 
  2059  0E24                     	;# 
  2060  0E25                     	;# 
  2061  0E28                     	;# 
  2062  0E29                     	;# 
  2063  0E2A                     	;# 
  2064  0E2B                     	;# 
  2065  0E90                     	;# 
  2066  0E91                     	;# 
  2067  0E92                     	;# 
  2068  0E94                     	;# 
  2069  0E95                     	;# 
  2070  0E9C                     	;# 
  2071  0E9D                     	;# 
  2072  0E9E                     	;# 
  2073  0E9F                     	;# 
  2074  0EA0                     	;# 
  2075  0EA1                     	;# 
  2076  0EA2                     	;# 
  2077  0EA3                     	;# 
  2078  0EA4                     	;# 
  2079  0EA5                     	;# 
  2080  0EA6                     	;# 
  2081  0EA7                     	;# 
  2082  0F0F                     	;# 
  2083  0F10                     	;# 
  2084  0F11                     	;# 
  2085  0F12                     	;# 
  2086  0F13                     	;# 
  2087  0F14                     	;# 
  2088  0F15                     	;# 
  2089  0F16                     	;# 
  2090  0F17                     	;# 
  2091  0F18                     	;# 
  2092  0F19                     	;# 
  2093  0F1A                     	;# 
  2094  0F1B                     	;# 
  2095  0F1C                     	;# 
  2096  0F1D                     	;# 
  2097  0F1E                     	;# 
  2098  0F1F                     	;# 
  2099  0F20                     	;# 
  2100  0F21                     	;# 
  2101  0F22                     	;# 
  2102  0F23                     	;# 
  2103  0F24                     	;# 
  2104  0F25                     	;# 
  2105  0F26                     	;# 
  2106  0F27                     	;# 
  2107  0F28                     	;# 
  2108  0F29                     	;# 
  2109  0F2A                     	;# 
  2110  0F2B                     	;# 
  2111  0F2C                     	;# 
  2112  0F2D                     	;# 
  2113  0FE4                     	;# 
  2114  0FE5                     	;# 
  2115  0FE6                     	;# 
  2116  0FE7                     	;# 
  2117  0FE8                     	;# 
  2118  0FE9                     	;# 
  2119  0FEA                     	;# 
  2120  0FEB                     	;# 
  2121  0FED                     	;# 
  2122  0FEE                     	;# 
  2123  0FEF                     	;# 
  2124  0000                     	;# 
  2125  0001                     	;# 
  2126  0002                     	;# 
  2127  0003                     	;# 
  2128  0004                     	;# 
  2129  0005                     	;# 
  2130  0006                     	;# 
  2131  0007                     	;# 
  2132  0008                     	;# 
  2133  0009                     	;# 
  2134  000A                     	;# 
  2135  000B                     	;# 
  2136  000C                     	;# 
  2137  000D                     	;# 
  2138  000E                     	;# 
  2139  0011                     	;# 
  2140  0012                     	;# 
  2141  0013                     	;# 
  2142  0015                     	;# 
  2143  0016                     	;# 
  2144  0016                     	;# 
  2145  0017                     	;# 
  2146  0018                     	;# 
  2147  0019                     	;# 
  2148  001A                     	;# 
  2149  001B                     	;# 
  2150  001C                     	;# 
  2151  008C                     	;# 
  2152  008D                     	;# 
  2153  008E                     	;# 
  2154  0091                     	;# 
  2155  0092                     	;# 
  2156  0093                     	;# 
  2157  0095                     	;# 
  2158  0096                     	;# 
  2159  0097                     	;# 
  2160  0098                     	;# 
  2161  0099                     	;# 
  2162  009A                     	;# 
  2163  009B                     	;# 
  2164  009B                     	;# 
  2165  009C                     	;# 
  2166  009D                     	;# 
  2167  009E                     	;# 
  2168  009F                     	;# 
  2169  010C                     	;# 
  2170  010D                     	;# 
  2171  010E                     	;# 
  2172  0111                     	;# 
  2173  0112                     	;# 
  2174  0113                     	;# 
  2175  0114                     	;# 
  2176  0115                     	;# 
  2177  0116                     	;# 
  2178  0117                     	;# 
  2179  0118                     	;# 
  2180  0119                     	;# 
  2181  011C                     	;# 
  2182  018C                     	;# 
  2183  018D                     	;# 
  2184  018E                     	;# 
  2185  0191                     	;# 
  2186  0191                     	;# 
  2187  0192                     	;# 
  2188  0193                     	;# 
  2189  0193                     	;# 
  2190  0194                     	;# 
  2191  0195                     	;# 
  2192  0196                     	;# 
  2193  0199                     	;# 
  2194  0199                     	;# 
  2195  0199                     	;# 
  2196  019A                     	;# 
  2197  019A                     	;# 
  2198  019A                     	;# 
  2199  019B                     	;# 
  2200  019B                     	;# 
  2201  019B                     	;# 
  2202  019B                     	;# 
  2203  019B                     	;# 
  2204  019C                     	;# 
  2205  019C                     	;# 
  2206  019C                     	;# 
  2207  019D                     	;# 
  2208  019D                     	;# 
  2209  019D                     	;# 
  2210  019E                     	;# 
  2211  019E                     	;# 
  2212  019E                     	;# 
  2213  019F                     	;# 
  2214  019F                     	;# 
  2215  019F                     	;# 
  2216  019F                     	;# 
  2217  019F                     	;# 
  2218  020C                     	;# 
  2219  020D                     	;# 
  2220  020E                     	;# 
  2221  0211                     	;# 
  2222  0211                     	;# 
  2223  0212                     	;# 
  2224  0212                     	;# 
  2225  0213                     	;# 
  2226  0213                     	;# 
  2227  0214                     	;# 
  2228  0214                     	;# 
  2229  0215                     	;# 
  2230  0215                     	;# 
  2231  0215                     	;# 
  2232  0215                     	;# 
  2233  0216                     	;# 
  2234  0216                     	;# 
  2235  0217                     	;# 
  2236  0217                     	;# 
  2237  028C                     	;# 
  2238  028D                     	;# 
  2239  028E                     	;# 
  2240  0291                     	;# 
  2241  0291                     	;# 
  2242  0292                     	;# 
  2243  0293                     	;# 
  2244  0293                     	;# 
  2245  0298                     	;# 
  2246  0298                     	;# 
  2247  0299                     	;# 
  2248  029A                     	;# 
  2249  029A                     	;# 
  2250  029E                     	;# 
  2251  030C                     	;# 
  2252  030D                     	;# 
  2253  030E                     	;# 
  2254  038C                     	;# 
  2255  038D                     	;# 
  2256  038E                     	;# 
  2257  0391                     	;# 
  2258  0392                     	;# 
  2259  0393                     	;# 
  2260  0394                     	;# 
  2261  0395                     	;# 
  2262  0396                     	;# 
  2263  0397                     	;# 
  2264  0398                     	;# 
  2265  0399                     	;# 
  2266  0415                     	;# 
  2267  0416                     	;# 
  2268  0417                     	;# 
  2269  041C                     	;# 
  2270  041D                     	;# 
  2271  041E                     	;# 
  2272  0511                     	;# 
  2273  0515                     	;# 
  2274  0617                     	;# 
  2275  0618                     	;# 
  2276  0619                     	;# 
  2277  0619                     	;# 
  2278  061A                     	;# 
  2279  061B                     	;# 
  2280  061C                     	;# 
  2281  061C                     	;# 
  2282  0691                     	;# 
  2283  0692                     	;# 
  2284  0693                     	;# 
  2285  0694                     	;# 
  2286  0695                     	;# 
  2287  0696                     	;# 
  2288  0697                     	;# 
  2289  0698                     	;# 
  2290  0699                     	;# 
  2291  069A                     	;# 
  2292  069B                     	;# 
  2293  069C                     	;# 
  2294  069D                     	;# 
  2295  069E                     	;# 
  2296  069F                     	;# 
  2297  0E0F                     	;# 
  2298  0E10                     	;# 
  2299  0E11                     	;# 
  2300  0E12                     	;# 
  2301  0E13                     	;# 
  2302  0E14                     	;# 
  2303  0E15                     	;# 
  2304  0E17                     	;# 
  2305  0E20                     	;# 
  2306  0E21                     	;# 
  2307  0E22                     	;# 
  2308  0E24                     	;# 
  2309  0E25                     	;# 
  2310  0E28                     	;# 
  2311  0E29                     	;# 
  2312  0E2A                     	;# 
  2313  0E2B                     	;# 
  2314  0E90                     	;# 
  2315  0E91                     	;# 
  2316  0E92                     	;# 
  2317  0E94                     	;# 
  2318  0E95                     	;# 
  2319  0E9C                     	;# 
  2320  0E9D                     	;# 
  2321  0E9E                     	;# 
  2322  0E9F                     	;# 
  2323  0EA0                     	;# 
  2324  0EA1                     	;# 
  2325  0EA2                     	;# 
  2326  0EA3                     	;# 
  2327  0EA4                     	;# 
  2328  0EA5                     	;# 
  2329  0EA6                     	;# 
  2330  0EA7                     	;# 
  2331  0F0F                     	;# 
  2332  0F10                     	;# 
  2333  0F11                     	;# 
  2334  0F12                     	;# 
  2335  0F13                     	;# 
  2336  0F14                     	;# 
  2337  0F15                     	;# 
  2338  0F16                     	;# 
  2339  0F17                     	;# 
  2340  0F18                     	;# 
  2341  0F19                     	;# 
  2342  0F1A                     	;# 
  2343  0F1B                     	;# 
  2344  0F1C                     	;# 
  2345  0F1D                     	;# 
  2346  0F1E                     	;# 
  2347  0F1F                     	;# 
  2348  0F20                     	;# 
  2349  0F21                     	;# 
  2350  0F22                     	;# 
  2351  0F23                     	;# 
  2352  0F24                     	;# 
  2353  0F25                     	;# 
  2354  0F26                     	;# 
  2355  0F27                     	;# 
  2356  0F28                     	;# 
  2357  0F29                     	;# 
  2358  0F2A                     	;# 
  2359  0F2B                     	;# 
  2360  0F2C                     	;# 
  2361  0F2D                     	;# 
  2362  0FE4                     	;# 
  2363  0FE5                     	;# 
  2364  0FE6                     	;# 
  2365  0FE7                     	;# 
  2366  0FE8                     	;# 
  2367  0FE9                     	;# 
  2368  0FEA                     	;# 
  2369  0FEB                     	;# 
  2370  0FED                     	;# 
  2371  0FEE                     	;# 
  2372  0FEF                     	;# 
  2373  0000                     	;# 
  2374  0001                     	;# 
  2375  0002                     	;# 
  2376  0003                     	;# 
  2377  0004                     	;# 
  2378  0005                     	;# 
  2379  0006                     	;# 
  2380  0007                     	;# 
  2381  0008                     	;# 
  2382  0009                     	;# 
  2383  000A                     	;# 
  2384  000B                     	;# 
  2385  000C                     	;# 
  2386  000D                     	;# 
  2387  000E                     	;# 
  2388  0011                     	;# 
  2389  0012                     	;# 
  2390  0013                     	;# 
  2391  0015                     	;# 
  2392  0016                     	;# 
  2393  0016                     	;# 
  2394  0017                     	;# 
  2395  0018                     	;# 
  2396  0019                     	;# 
  2397  001A                     	;# 
  2398  001B                     	;# 
  2399  001C                     	;# 
  2400  008C                     	;# 
  2401  008D                     	;# 
  2402  008E                     	;# 
  2403  0091                     	;# 
  2404  0092                     	;# 
  2405  0093                     	;# 
  2406  0095                     	;# 
  2407  0096                     	;# 
  2408  0097                     	;# 
  2409  0098                     	;# 
  2410  0099                     	;# 
  2411  009A                     	;# 
  2412  009B                     	;# 
  2413  009B                     	;# 
  2414  009C                     	;# 
  2415  009D                     	;# 
  2416  009E                     	;# 
  2417  009F                     	;# 
  2418  010C                     	;# 
  2419  010D                     	;# 
  2420  010E                     	;# 
  2421  0111                     	;# 
  2422  0112                     	;# 
  2423  0113                     	;# 
  2424  0114                     	;# 
  2425  0115                     	;# 
  2426  0116                     	;# 
  2427  0117                     	;# 
  2428  0118                     	;# 
  2429  0119                     	;# 
  2430  011C                     	;# 
  2431  018C                     	;# 
  2432  018D                     	;# 
  2433  018E                     	;# 
  2434  0191                     	;# 
  2435  0191                     	;# 
  2436  0192                     	;# 
  2437  0193                     	;# 
  2438  0193                     	;# 
  2439  0194                     	;# 
  2440  0195                     	;# 
  2441  0196                     	;# 
  2442  0199                     	;# 
  2443  0199                     	;# 
  2444  0199                     	;# 
  2445  019A                     	;# 
  2446  019A                     	;# 
  2447  019A                     	;# 
  2448  019B                     	;# 
  2449  019B                     	;# 
  2450  019B                     	;# 
  2451  019B                     	;# 
  2452  019B                     	;# 
  2453  019C                     	;# 
  2454  019C                     	;# 
  2455  019C                     	;# 
  2456  019D                     	;# 
  2457  019D                     	;# 
  2458  019D                     	;# 
  2459  019E                     	;# 
  2460  019E                     	;# 
  2461  019E                     	;# 
  2462  019F                     	;# 
  2463  019F                     	;# 
  2464  019F                     	;# 
  2465  019F                     	;# 
  2466  019F                     	;# 
  2467  020C                     	;# 
  2468  020D                     	;# 
  2469  020E                     	;# 
  2470  0211                     	;# 
  2471  0211                     	;# 
  2472  0212                     	;# 
  2473  0212                     	;# 
  2474  0213                     	;# 
  2475  0213                     	;# 
  2476  0214                     	;# 
  2477  0214                     	;# 
  2478  0215                     	;# 
  2479  0215                     	;# 
  2480  0215                     	;# 
  2481  0215                     	;# 
  2482  0216                     	;# 
  2483  0216                     	;# 
  2484  0217                     	;# 
  2485  0217                     	;# 
  2486  028C                     	;# 
  2487  028D                     	;# 
  2488  028E                     	;# 
  2489  0291                     	;# 
  2490  0291                     	;# 
  2491  0292                     	;# 
  2492  0293                     	;# 
  2493  0293                     	;# 
  2494  0298                     	;# 
  2495  0298                     	;# 
  2496  0299                     	;# 
  2497  029A                     	;# 
  2498  029A                     	;# 
  2499  029E                     	;# 
  2500  030C                     	;# 
  2501  030D                     	;# 
  2502  030E                     	;# 
  2503  038C                     	;# 
  2504  038D                     	;# 
  2505  038E                     	;# 
  2506  0391                     	;# 
  2507  0392                     	;# 
  2508  0393                     	;# 
  2509  0394                     	;# 
  2510  0395                     	;# 
  2511  0396                     	;# 
  2512  0397                     	;# 
  2513  0398                     	;# 
  2514  0399                     	;# 
  2515  0415                     	;# 
  2516  0416                     	;# 
  2517  0417                     	;# 
  2518  041C                     	;# 
  2519  041D                     	;# 
  2520  041E                     	;# 
  2521  0511                     	;# 
  2522  0515                     	;# 
  2523  0617                     	;# 
  2524  0618                     	;# 
  2525  0619                     	;# 
  2526  0619                     	;# 
  2527  061A                     	;# 
  2528  061B                     	;# 
  2529  061C                     	;# 
  2530  061C                     	;# 
  2531  0691                     	;# 
  2532  0692                     	;# 
  2533  0693                     	;# 
  2534  0694                     	;# 
  2535  0695                     	;# 
  2536  0696                     	;# 
  2537  0697                     	;# 
  2538  0698                     	;# 
  2539  0699                     	;# 
  2540  069A                     	;# 
  2541  069B                     	;# 
  2542  069C                     	;# 
  2543  069D                     	;# 
  2544  069E                     	;# 
  2545  069F                     	;# 
  2546  0E0F                     	;# 
  2547  0E10                     	;# 
  2548  0E11                     	;# 
  2549  0E12                     	;# 
  2550  0E13                     	;# 
  2551  0E14                     	;# 
  2552  0E15                     	;# 
  2553  0E17                     	;# 
  2554  0E20                     	;# 
  2555  0E21                     	;# 
  2556  0E22                     	;# 
  2557  0E24                     	;# 
  2558  0E25                     	;# 
  2559  0E28                     	;# 
  2560  0E29                     	;# 
  2561  0E2A                     	;# 
  2562  0E2B                     	;# 
  2563  0E90                     	;# 
  2564  0E91                     	;# 
  2565  0E92                     	;# 
  2566  0E94                     	;# 
  2567  0E95                     	;# 
  2568  0E9C                     	;# 
  2569  0E9D                     	;# 
  2570  0E9E                     	;# 
  2571  0E9F                     	;# 
  2572  0EA0                     	;# 
  2573  0EA1                     	;# 
  2574  0EA2                     	;# 
  2575  0EA3                     	;# 
  2576  0EA4                     	;# 
  2577  0EA5                     	;# 
  2578  0EA6                     	;# 
  2579  0EA7                     	;# 
  2580  0F0F                     	;# 
  2581  0F10                     	;# 
  2582  0F11                     	;# 
  2583  0F12                     	;# 
  2584  0F13                     	;# 
  2585  0F14                     	;# 
  2586  0F15                     	;# 
  2587  0F16                     	;# 
  2588  0F17                     	;# 
  2589  0F18                     	;# 
  2590  0F19                     	;# 
  2591  0F1A                     	;# 
  2592  0F1B                     	;# 
  2593  0F1C                     	;# 
  2594  0F1D                     	;# 
  2595  0F1E                     	;# 
  2596  0F1F                     	;# 
  2597  0F20                     	;# 
  2598  0F21                     	;# 
  2599  0F22                     	;# 
  2600  0F23                     	;# 
  2601  0F24                     	;# 
  2602  0F25                     	;# 
  2603  0F26                     	;# 
  2604  0F27                     	;# 
  2605  0F28                     	;# 
  2606  0F29                     	;# 
  2607  0F2A                     	;# 
  2608  0F2B                     	;# 
  2609  0F2C                     	;# 
  2610  0F2D                     	;# 
  2611  0FE4                     	;# 
  2612  0FE5                     	;# 
  2613  0FE6                     	;# 
  2614  0FE7                     	;# 
  2615  0FE8                     	;# 
  2616  0FE9                     	;# 
  2617  0FEA                     	;# 
  2618  0FEB                     	;# 
  2619  0FED                     	;# 
  2620  0FEE                     	;# 
  2621  0FEF                     	;# 
  2622  0000                     	;# 
  2623  0001                     	;# 
  2624  0002                     	;# 
  2625  0003                     	;# 
  2626  0004                     	;# 
  2627  0005                     	;# 
  2628  0006                     	;# 
  2629  0007                     	;# 
  2630  0008                     	;# 
  2631  0009                     	;# 
  2632  000A                     	;# 
  2633  000B                     	;# 
  2634  000C                     	;# 
  2635  000D                     	;# 
  2636  000E                     	;# 
  2637  0011                     	;# 
  2638  0012                     	;# 
  2639  0013                     	;# 
  2640  0015                     	;# 
  2641  0016                     	;# 
  2642  0016                     	;# 
  2643  0017                     	;# 
  2644  0018                     	;# 
  2645  0019                     	;# 
  2646  001A                     	;# 
  2647  001B                     	;# 
  2648  001C                     	;# 
  2649  008C                     	;# 
  2650  008D                     	;# 
  2651  008E                     	;# 
  2652  0091                     	;# 
  2653  0092                     	;# 
  2654  0093                     	;# 
  2655  0095                     	;# 
  2656  0096                     	;# 
  2657  0097                     	;# 
  2658  0098                     	;# 
  2659  0099                     	;# 
  2660  009A                     	;# 
  2661  009B                     	;# 
  2662  009B                     	;# 
  2663  009C                     	;# 
  2664  009D                     	;# 
  2665  009E                     	;# 
  2666  009F                     	;# 
  2667  010C                     	;# 
  2668  010D                     	;# 
  2669  010E                     	;# 
  2670  0111                     	;# 
  2671  0112                     	;# 
  2672  0113                     	;# 
  2673  0114                     	;# 
  2674  0115                     	;# 
  2675  0116                     	;# 
  2676  0117                     	;# 
  2677  0118                     	;# 
  2678  0119                     	;# 
  2679  011C                     	;# 
  2680  018C                     	;# 
  2681  018D                     	;# 
  2682  018E                     	;# 
  2683  0191                     	;# 
  2684  0191                     	;# 
  2685  0192                     	;# 
  2686  0193                     	;# 
  2687  0193                     	;# 
  2688  0194                     	;# 
  2689  0195                     	;# 
  2690  0196                     	;# 
  2691  0199                     	;# 
  2692  0199                     	;# 
  2693  0199                     	;# 
  2694  019A                     	;# 
  2695  019A                     	;# 
  2696  019A                     	;# 
  2697  019B                     	;# 
  2698  019B                     	;# 
  2699  019B                     	;# 
  2700  019B                     	;# 
  2701  019B                     	;# 
  2702  019C                     	;# 
  2703  019C                     	;# 
  2704  019C                     	;# 
  2705  019D                     	;# 
  2706  019D                     	;# 
  2707  019D                     	;# 
  2708  019E                     	;# 
  2709  019E                     	;# 
  2710  019E                     	;# 
  2711  019F                     	;# 
  2712  019F                     	;# 
  2713  019F                     	;# 
  2714  019F                     	;# 
  2715  019F                     	;# 
  2716  020C                     	;# 
  2717  020D                     	;# 
  2718  020E                     	;# 
  2719  0211                     	;# 
  2720  0211                     	;# 
  2721  0212                     	;# 
  2722  0212                     	;# 
  2723  0213                     	;# 
  2724  0213                     	;# 
  2725  0214                     	;# 
  2726  0214                     	;# 
  2727  0215                     	;# 
  2728  0215                     	;# 
  2729  0215                     	;# 
  2730  0215                     	;# 
  2731  0216                     	;# 
  2732  0216                     	;# 
  2733  0217                     	;# 
  2734  0217                     	;# 
  2735  028C                     	;# 
  2736  028D                     	;# 
  2737  028E                     	;# 
  2738  0291                     	;# 
  2739  0291                     	;# 
  2740  0292                     	;# 
  2741  0293                     	;# 
  2742  0293                     	;# 
  2743  0298                     	;# 
  2744  0298                     	;# 
  2745  0299                     	;# 
  2746  029A                     	;# 
  2747  029A                     	;# 
  2748  029E                     	;# 
  2749  030C                     	;# 
  2750  030D                     	;# 
  2751  030E                     	;# 
  2752  038C                     	;# 
  2753  038D                     	;# 
  2754  038E                     	;# 
  2755  0391                     	;# 
  2756  0392                     	;# 
  2757  0393                     	;# 
  2758  0394                     	;# 
  2759  0395                     	;# 
  2760  0396                     	;# 
  2761  0397                     	;# 
  2762  0398                     	;# 
  2763  0399                     	;# 
  2764  0415                     	;# 
  2765  0416                     	;# 
  2766  0417                     	;# 
  2767  041C                     	;# 
  2768  041D                     	;# 
  2769  041E                     	;# 
  2770  0511                     	;# 
  2771  0515                     	;# 
  2772  0617                     	;# 
  2773  0618                     	;# 
  2774  0619                     	;# 
  2775  0619                     	;# 
  2776  061A                     	;# 
  2777  061B                     	;# 
  2778  061C                     	;# 
  2779  061C                     	;# 
  2780  0691                     	;# 
  2781  0692                     	;# 
  2782  0693                     	;# 
  2783  0694                     	;# 
  2784  0695                     	;# 
  2785  0696                     	;# 
  2786  0697                     	;# 
  2787  0698                     	;# 
  2788  0699                     	;# 
  2789  069A                     	;# 
  2790  069B                     	;# 
  2791  069C                     	;# 
  2792  069D                     	;# 
  2793  069E                     	;# 
  2794  069F                     	;# 
  2795  0E0F                     	;# 
  2796  0E10                     	;# 
  2797  0E11                     	;# 
  2798  0E12                     	;# 
  2799  0E13                     	;# 
  2800  0E14                     	;# 
  2801  0E15                     	;# 
  2802  0E17                     	;# 
  2803  0E20                     	;# 
  2804  0E21                     	;# 
  2805  0E22                     	;# 
  2806  0E24                     	;# 
  2807  0E25                     	;# 
  2808  0E28                     	;# 
  2809  0E29                     	;# 
  2810  0E2A                     	;# 
  2811  0E2B                     	;# 
  2812  0E90                     	;# 
  2813  0E91                     	;# 
  2814  0E92                     	;# 
  2815  0E94                     	;# 
  2816  0E95                     	;# 
  2817  0E9C                     	;# 
  2818  0E9D                     	;# 
  2819  0E9E                     	;# 
  2820  0E9F                     	;# 
  2821  0EA0                     	;# 
  2822  0EA1                     	;# 
  2823  0EA2                     	;# 
  2824  0EA3                     	;# 
  2825  0EA4                     	;# 
  2826  0EA5                     	;# 
  2827  0EA6                     	;# 
  2828  0EA7                     	;# 
  2829  0F0F                     	;# 
  2830  0F10                     	;# 
  2831  0F11                     	;# 
  2832  0F12                     	;# 
  2833  0F13                     	;# 
  2834  0F14                     	;# 
  2835  0F15                     	;# 
  2836  0F16                     	;# 
  2837  0F17                     	;# 
  2838  0F18                     	;# 
  2839  0F19                     	;# 
  2840  0F1A                     	;# 
  2841  0F1B                     	;# 
  2842  0F1C                     	;# 
  2843  0F1D                     	;# 
  2844  0F1E                     	;# 
  2845  0F1F                     	;# 
  2846  0F20                     	;# 
  2847  0F21                     	;# 
  2848  0F22                     	;# 
  2849  0F23                     	;# 
  2850  0F24                     	;# 
  2851  0F25                     	;# 
  2852  0F26                     	;# 
  2853  0F27                     	;# 
  2854  0F28                     	;# 
  2855  0F29                     	;# 
  2856  0F2A                     	;# 
  2857  0F2B                     	;# 
  2858  0F2C                     	;# 
  2859  0F2D                     	;# 
  2860  0FE4                     	;# 
  2861  0FE5                     	;# 
  2862  0FE6                     	;# 
  2863  0FE7                     	;# 
  2864  0FE8                     	;# 
  2865  0FE9                     	;# 
  2866  0FEA                     	;# 
  2867  0FEB                     	;# 
  2868  0FED                     	;# 
  2869  0FEE                     	;# 
  2870  0FEF                     	;# 
  2871  0000                     	;# 
  2872  0001                     	;# 
  2873  0002                     	;# 
  2874  0003                     	;# 
  2875  0004                     	;# 
  2876  0005                     	;# 
  2877  0006                     	;# 
  2878  0007                     	;# 
  2879  0008                     	;# 
  2880  0009                     	;# 
  2881  000A                     	;# 
  2882  000B                     	;# 
  2883  000C                     	;# 
  2884  000D                     	;# 
  2885  000E                     	;# 
  2886  0011                     	;# 
  2887  0012                     	;# 
  2888  0013                     	;# 
  2889  0015                     	;# 
  2890  0016                     	;# 
  2891  0016                     	;# 
  2892  0017                     	;# 
  2893  0018                     	;# 
  2894  0019                     	;# 
  2895  001A                     	;# 
  2896  001B                     	;# 
  2897  001C                     	;# 
  2898  008C                     	;# 
  2899  008D                     	;# 
  2900  008E                     	;# 
  2901  0091                     	;# 
  2902  0092                     	;# 
  2903  0093                     	;# 
  2904  0095                     	;# 
  2905  0096                     	;# 
  2906  0097                     	;# 
  2907  0098                     	;# 
  2908  0099                     	;# 
  2909  009A                     	;# 
  2910  009B                     	;# 
  2911  009B                     	;# 
  2912  009C                     	;# 
  2913  009D                     	;# 
  2914  009E                     	;# 
  2915  009F                     	;# 
  2916  010C                     	;# 
  2917  010D                     	;# 
  2918  010E                     	;# 
  2919  0111                     	;# 
  2920  0112                     	;# 
  2921  0113                     	;# 
  2922  0114                     	;# 
  2923  0115                     	;# 
  2924  0116                     	;# 
  2925  0117                     	;# 
  2926  0118                     	;# 
  2927  0119                     	;# 
  2928  011C                     	;# 
  2929  018C                     	;# 
  2930  018D                     	;# 
  2931  018E                     	;# 
  2932  0191                     	;# 
  2933  0191                     	;# 
  2934  0192                     	;# 
  2935  0193                     	;# 
  2936  0193                     	;# 
  2937  0194                     	;# 
  2938  0195                     	;# 
  2939  0196                     	;# 
  2940  0199                     	;# 
  2941  0199                     	;# 
  2942  0199                     	;# 
  2943  019A                     	;# 
  2944  019A                     	;# 
  2945  019A                     	;# 
  2946  019B                     	;# 
  2947  019B                     	;# 
  2948  019B                     	;# 
  2949  019B                     	;# 
  2950  019B                     	;# 
  2951  019C                     	;# 
  2952  019C                     	;# 
  2953  019C                     	;# 
  2954  019D                     	;# 
  2955  019D                     	;# 
  2956  019D                     	;# 
  2957  019E                     	;# 
  2958  019E                     	;# 
  2959  019E                     	;# 
  2960  019F                     	;# 
  2961  019F                     	;# 
  2962  019F                     	;# 
  2963  019F                     	;# 
  2964  019F                     	;# 
  2965  020C                     	;# 
  2966  020D                     	;# 
  2967  020E                     	;# 
  2968  0211                     	;# 
  2969  0211                     	;# 
  2970  0212                     	;# 
  2971  0212                     	;# 
  2972  0213                     	;# 
  2973  0213                     	;# 
  2974  0214                     	;# 
  2975  0214                     	;# 
  2976  0215                     	;# 
  2977  0215                     	;# 
  2978  0215                     	;# 
  2979  0215                     	;# 
  2980  0216                     	;# 
  2981  0216                     	;# 
  2982  0217                     	;# 
  2983  0217                     	;# 
  2984  028C                     	;# 
  2985  028D                     	;# 
  2986  028E                     	;# 
  2987  0291                     	;# 
  2988  0291                     	;# 
  2989  0292                     	;# 
  2990  0293                     	;# 
  2991  0293                     	;# 
  2992  0298                     	;# 
  2993  0298                     	;# 
  2994  0299                     	;# 
  2995  029A                     	;# 
  2996  029A                     	;# 
  2997  029E                     	;# 
  2998  030C                     	;# 
  2999  030D                     	;# 
  3000  030E                     	;# 
  3001  038C                     	;# 
  3002  038D                     	;# 
  3003  038E                     	;# 
  3004  0391                     	;# 
  3005  0392                     	;# 
  3006  0393                     	;# 
  3007  0394                     	;# 
  3008  0395                     	;# 
  3009  0396                     	;# 
  3010  0397                     	;# 
  3011  0398                     	;# 
  3012  0399                     	;# 
  3013  0415                     	;# 
  3014  0416                     	;# 
  3015  0417                     	;# 
  3016  041C                     	;# 
  3017  041D                     	;# 
  3018  041E                     	;# 
  3019  0511                     	;# 
  3020  0515                     	;# 
  3021  0617                     	;# 
  3022  0618                     	;# 
  3023  0619                     	;# 
  3024  0619                     	;# 
  3025  061A                     	;# 
  3026  061B                     	;# 
  3027  061C                     	;# 
  3028  061C                     	;# 
  3029  0691                     	;# 
  3030  0692                     	;# 
  3031  0693                     	;# 
  3032  0694                     	;# 
  3033  0695                     	;# 
  3034  0696                     	;# 
  3035  0697                     	;# 
  3036  0698                     	;# 
  3037  0699                     	;# 
  3038  069A                     	;# 
  3039  069B                     	;# 
  3040  069C                     	;# 
  3041  069D                     	;# 
  3042  069E                     	;# 
  3043  069F                     	;# 
  3044  0E0F                     	;# 
  3045  0E10                     	;# 
  3046  0E11                     	;# 
  3047  0E12                     	;# 
  3048  0E13                     	;# 
  3049  0E14                     	;# 
  3050  0E15                     	;# 
  3051  0E17                     	;# 
  3052  0E20                     	;# 
  3053  0E21                     	;# 
  3054  0E22                     	;# 
  3055  0E24                     	;# 
  3056  0E25                     	;# 
  3057  0E28                     	;# 
  3058  0E29                     	;# 
  3059  0E2A                     	;# 
  3060  0E2B                     	;# 
  3061  0E90                     	;# 
  3062  0E91                     	;# 
  3063  0E92                     	;# 
  3064  0E94                     	;# 
  3065  0E95                     	;# 
  3066  0E9C                     	;# 
  3067  0E9D                     	;# 
  3068  0E9E                     	;# 
  3069  0E9F                     	;# 
  3070  0EA0                     	;# 
  3071  0EA1                     	;# 
  3072  0EA2                     	;# 
  3073  0EA3                     	;# 
  3074  0EA4                     	;# 
  3075  0EA5                     	;# 
  3076  0EA6                     	;# 
  3077  0EA7                     	;# 
  3078  0F0F                     	;# 
  3079  0F10                     	;# 
  3080  0F11                     	;# 
  3081  0F12                     	;# 
  3082  0F13                     	;# 
  3083  0F14                     	;# 
  3084  0F15                     	;# 
  3085  0F16                     	;# 
  3086  0F17                     	;# 
  3087  0F18                     	;# 
  3088  0F19                     	;# 
  3089  0F1A                     	;# 
  3090  0F1B                     	;# 
  3091  0F1C                     	;# 
  3092  0F1D                     	;# 
  3093  0F1E                     	;# 
  3094  0F1F                     	;# 
  3095  0F20                     	;# 
  3096  0F21                     	;# 
  3097  0F22                     	;# 
  3098  0F23                     	;# 
  3099  0F24                     	;# 
  3100  0F25                     	;# 
  3101  0F26                     	;# 
  3102  0F27                     	;# 
  3103  0F28                     	;# 
  3104  0F29                     	;# 
  3105  0F2A                     	;# 
  3106  0F2B                     	;# 
  3107  0F2C                     	;# 
  3108  0F2D                     	;# 
  3109  0FE4                     	;# 
  3110  0FE5                     	;# 
  3111  0FE6                     	;# 
  3112  0FE7                     	;# 
  3113  0FE8                     	;# 
  3114  0FE9                     	;# 
  3115  0FEA                     	;# 
  3116  0FEB                     	;# 
  3117  0FED                     	;# 
  3118  0FEE                     	;# 
  3119  0FEF                     	;# 
  3120  0000                     	;# 
  3121  0001                     	;# 
  3122  0002                     	;# 
  3123  0003                     	;# 
  3124  0004                     	;# 
  3125  0005                     	;# 
  3126  0006                     	;# 
  3127  0007                     	;# 
  3128  0008                     	;# 
  3129  0009                     	;# 
  3130  000A                     	;# 
  3131  000B                     	;# 
  3132  000C                     	;# 
  3133  000D                     	;# 
  3134  000E                     	;# 
  3135  0011                     	;# 
  3136  0012                     	;# 
  3137  0013                     	;# 
  3138  0015                     	;# 
  3139  0016                     	;# 
  3140  0016                     	;# 
  3141  0017                     	;# 
  3142  0018                     	;# 
  3143  0019                     	;# 
  3144  001A                     	;# 
  3145  001B                     	;# 
  3146  001C                     	;# 
  3147  008C                     	;# 
  3148  008D                     	;# 
  3149  008E                     	;# 
  3150  0091                     	;# 
  3151  0092                     	;# 
  3152  0093                     	;# 
  3153  0095                     	;# 
  3154  0096                     	;# 
  3155  0097                     	;# 
  3156  0098                     	;# 
  3157  0099                     	;# 
  3158  009A                     	;# 
  3159  009B                     	;# 
  3160  009B                     	;# 
  3161  009C                     	;# 
  3162  009D                     	;# 
  3163  009E                     	;# 
  3164  009F                     	;# 
  3165  010C                     	;# 
  3166  010D                     	;# 
  3167  010E                     	;# 
  3168  0111                     	;# 
  3169  0112                     	;# 
  3170  0113                     	;# 
  3171  0114                     	;# 
  3172  0115                     	;# 
  3173  0116                     	;# 
  3174  0117                     	;# 
  3175  0118                     	;# 
  3176  0119                     	;# 
  3177  011C                     	;# 
  3178  018C                     	;# 
  3179  018D                     	;# 
  3180  018E                     	;# 
  3181  0191                     	;# 
  3182  0191                     	;# 
  3183  0192                     	;# 
  3184  0193                     	;# 
  3185  0193                     	;# 
  3186  0194                     	;# 
  3187  0195                     	;# 
  3188  0196                     	;# 
  3189  0199                     	;# 
  3190  0199                     	;# 
  3191  0199                     	;# 
  3192  019A                     	;# 
  3193  019A                     	;# 
  3194  019A                     	;# 
  3195  019B                     	;# 
  3196  019B                     	;# 
  3197  019B                     	;# 
  3198  019B                     	;# 
  3199  019B                     	;# 
  3200  019C                     	;# 
  3201  019C                     	;# 
  3202  019C                     	;# 
  3203  019D                     	;# 
  3204  019D                     	;# 
  3205  019D                     	;# 
  3206  019E                     	;# 
  3207  019E                     	;# 
  3208  019E                     	;# 
  3209  019F                     	;# 
  3210  019F                     	;# 
  3211  019F                     	;# 
  3212  019F                     	;# 
  3213  019F                     	;# 
  3214  020C                     	;# 
  3215  020D                     	;# 
  3216  020E                     	;# 
  3217  0211                     	;# 
  3218  0211                     	;# 
  3219  0212                     	;# 
  3220  0212                     	;# 
  3221  0213                     	;# 
  3222  0213                     	;# 
  3223  0214                     	;# 
  3224  0214                     	;# 
  3225  0215                     	;# 
  3226  0215                     	;# 
  3227  0215                     	;# 
  3228  0215                     	;# 
  3229  0216                     	;# 
  3230  0216                     	;# 
  3231  0217                     	;# 
  3232  0217                     	;# 
  3233  028C                     	;# 
  3234  028D                     	;# 
  3235  028E                     	;# 
  3236  0291                     	;# 
  3237  0291                     	;# 
  3238  0292                     	;# 
  3239  0293                     	;# 
  3240  0293                     	;# 
  3241  0298                     	;# 
  3242  0298                     	;# 
  3243  0299                     	;# 
  3244  029A                     	;# 
  3245  029A                     	;# 
  3246  029E                     	;# 
  3247  030C                     	;# 
  3248  030D                     	;# 
  3249  030E                     	;# 
  3250  038C                     	;# 
  3251  038D                     	;# 
  3252  038E                     	;# 
  3253  0391                     	;# 
  3254  0392                     	;# 
  3255  0393                     	;# 
  3256  0394                     	;# 
  3257  0395                     	;# 
  3258  0396                     	;# 
  3259  0397                     	;# 
  3260  0398                     	;# 
  3261  0399                     	;# 
  3262  0415                     	;# 
  3263  0416                     	;# 
  3264  0417                     	;# 
  3265  041C                     	;# 
  3266  041D                     	;# 
  3267  041E                     	;# 
  3268  0511                     	;# 
  3269  0515                     	;# 
  3270  0617                     	;# 
  3271  0618                     	;# 
  3272  0619                     	;# 
  3273  0619                     	;# 
  3274  061A                     	;# 
  3275  061B                     	;# 
  3276  061C                     	;# 
  3277  061C                     	;# 
  3278  0691                     	;# 
  3279  0692                     	;# 
  3280  0693                     	;# 
  3281  0694                     	;# 
  3282  0695                     	;# 
  3283  0696                     	;# 
  3284  0697                     	;# 
  3285  0698                     	;# 
  3286  0699                     	;# 
  3287  069A                     	;# 
  3288  069B                     	;# 
  3289  069C                     	;# 
  3290  069D                     	;# 
  3291  069E                     	;# 
  3292  069F                     	;# 
  3293  0E0F                     	;# 
  3294  0E10                     	;# 
  3295  0E11                     	;# 
  3296  0E12                     	;# 
  3297  0E13                     	;# 
  3298  0E14                     	;# 
  3299  0E15                     	;# 
  3300  0E17                     	;# 
  3301  0E20                     	;# 
  3302  0E21                     	;# 
  3303  0E22                     	;# 
  3304  0E24                     	;# 
  3305  0E25                     	;# 
  3306  0E28                     	;# 
  3307  0E29                     	;# 
  3308  0E2A                     	;# 
  3309  0E2B                     	;# 
  3310  0E90                     	;# 
  3311  0E91                     	;# 
  3312  0E92                     	;# 
  3313  0E94                     	;# 
  3314  0E95                     	;# 
  3315  0E9C                     	;# 
  3316  0E9D                     	;# 
  3317  0E9E                     	;# 
  3318  0E9F                     	;# 
  3319  0EA0                     	;# 
  3320  0EA1                     	;# 
  3321  0EA2                     	;# 
  3322  0EA3                     	;# 
  3323  0EA4                     	;# 
  3324  0EA5                     	;# 
  3325  0EA6                     	;# 
  3326  0EA7                     	;# 
  3327  0F0F                     	;# 
  3328  0F10                     	;# 
  3329  0F11                     	;# 
  3330  0F12                     	;# 
  3331  0F13                     	;# 
  3332  0F14                     	;# 
  3333  0F15                     	;# 
  3334  0F16                     	;# 
  3335  0F17                     	;# 
  3336  0F18                     	;# 
  3337  0F19                     	;# 
  3338  0F1A                     	;# 
  3339  0F1B                     	;# 
  3340  0F1C                     	;# 
  3341  0F1D                     	;# 
  3342  0F1E                     	;# 
  3343  0F1F                     	;# 
  3344  0F20                     	;# 
  3345  0F21                     	;# 
  3346  0F22                     	;# 
  3347  0F23                     	;# 
  3348  0F24                     	;# 
  3349  0F25                     	;# 
  3350  0F26                     	;# 
  3351  0F27                     	;# 
  3352  0F28                     	;# 
  3353  0F29                     	;# 
  3354  0F2A                     	;# 
  3355  0F2B                     	;# 
  3356  0F2C                     	;# 
  3357  0F2D                     	;# 
  3358  0FE4                     	;# 
  3359  0FE5                     	;# 
  3360  0FE6                     	;# 
  3361  0FE7                     	;# 
  3362  0FE8                     	;# 
  3363  0FE9                     	;# 
  3364  0FEA                     	;# 
  3365  0FEB                     	;# 
  3366  0FED                     	;# 
  3367  0FEE                     	;# 
  3368  0FEF                     	;# 
  3369  0000                     	;# 
  3370  0001                     	;# 
  3371  0002                     	;# 
  3372  0003                     	;# 
  3373  0004                     	;# 
  3374  0005                     	;# 
  3375  0006                     	;# 
  3376  0007                     	;# 
  3377  0008                     	;# 
  3378  0009                     	;# 
  3379  000A                     	;# 
  3380  000B                     	;# 
  3381  000C                     	;# 
  3382  000D                     	;# 
  3383  000E                     	;# 
  3384  0011                     	;# 
  3385  0012                     	;# 
  3386  0013                     	;# 
  3387  0015                     	;# 
  3388  0016                     	;# 
  3389  0016                     	;# 
  3390  0017                     	;# 
  3391  0018                     	;# 
  3392  0019                     	;# 
  3393  001A                     	;# 
  3394  001B                     	;# 
  3395  001C                     	;# 
  3396  008C                     	;# 
  3397  008D                     	;# 
  3398  008E                     	;# 
  3399  0091                     	;# 
  3400  0092                     	;# 
  3401  0093                     	;# 
  3402  0095                     	;# 
  3403  0096                     	;# 
  3404  0097                     	;# 
  3405  0098                     	;# 
  3406  0099                     	;# 
  3407  009A                     	;# 
  3408  009B                     	;# 
  3409  009B                     	;# 
  3410  009C                     	;# 
  3411  009D                     	;# 
  3412  009E                     	;# 
  3413  009F                     	;# 
  3414  010C                     	;# 
  3415  010D                     	;# 
  3416  010E                     	;# 
  3417  0111                     	;# 
  3418  0112                     	;# 
  3419  0113                     	;# 
  3420  0114                     	;# 
  3421  0115                     	;# 
  3422  0116                     	;# 
  3423  0117                     	;# 
  3424  0118                     	;# 
  3425  0119                     	;# 
  3426  011C                     	;# 
  3427  018C                     	;# 
  3428  018D                     	;# 
  3429  018E                     	;# 
  3430  0191                     	;# 
  3431  0191                     	;# 
  3432  0192                     	;# 
  3433  0193                     	;# 
  3434  0193                     	;# 
  3435  0194                     	;# 
  3436  0195                     	;# 
  3437  0196                     	;# 
  3438  0199                     	;# 
  3439  0199                     	;# 
  3440  0199                     	;# 
  3441  019A                     	;# 
  3442  019A                     	;# 
  3443  019A                     	;# 
  3444  019B                     	;# 
  3445  019B                     	;# 
  3446  019B                     	;# 
  3447  019B                     	;# 
  3448  019B                     	;# 
  3449  019C                     	;# 
  3450  019C                     	;# 
  3451  019C                     	;# 
  3452  019D                     	;# 
  3453  019D                     	;# 
  3454  019D                     	;# 
  3455  019E                     	;# 
  3456  019E                     	;# 
  3457  019E                     	;# 
  3458  019F                     	;# 
  3459  019F                     	;# 
  3460  019F                     	;# 
  3461  019F                     	;# 
  3462  019F                     	;# 
  3463  020C                     	;# 
  3464  020D                     	;# 
  3465  020E                     	;# 
  3466  0211                     	;# 
  3467  0211                     	;# 
  3468  0212                     	;# 
  3469  0212                     	;# 
  3470  0213                     	;# 
  3471  0213                     	;# 
  3472  0214                     	;# 
  3473  0214                     	;# 
  3474  0215                     	;# 
  3475  0215                     	;# 
  3476  0215                     	;# 
  3477  0215                     	;# 
  3478  0216                     	;# 
  3479  0216                     	;# 
  3480  0217                     	;# 
  3481  0217                     	;# 
  3482  028C                     	;# 
  3483  028D                     	;# 
  3484  028E                     	;# 
  3485  0291                     	;# 
  3486  0291                     	;# 
  3487  0292                     	;# 
  3488  0293                     	;# 
  3489  0293                     	;# 
  3490  0298                     	;# 
  3491  0298                     	;# 
  3492  0299                     	;# 
  3493  029A                     	;# 
  3494  029A                     	;# 
  3495  029E                     	;# 
  3496  030C                     	;# 
  3497  030D                     	;# 
  3498  030E                     	;# 
  3499  038C                     	;# 
  3500  038D                     	;# 
  3501  038E                     	;# 
  3502  0391                     	;# 
  3503  0392                     	;# 
  3504  0393                     	;# 
  3505  0394                     	;# 
  3506  0395                     	;# 
  3507  0396                     	;# 
  3508  0397                     	;# 
  3509  0398                     	;# 
  3510  0399                     	;# 
  3511  0415                     	;# 
  3512  0416                     	;# 
  3513  0417                     	;# 
  3514  041C                     	;# 
  3515  041D                     	;# 
  3516  041E                     	;# 
  3517  0511                     	;# 
  3518  0515                     	;# 
  3519  0617                     	;# 
  3520  0618                     	;# 
  3521  0619                     	;# 
  3522  0619                     	;# 
  3523  061A                     	;# 
  3524  061B                     	;# 
  3525  061C                     	;# 
  3526  061C                     	;# 
  3527  0691                     	;# 
  3528  0692                     	;# 
  3529  0693                     	;# 
  3530  0694                     	;# 
  3531  0695                     	;# 
  3532  0696                     	;# 
  3533  0697                     	;# 
  3534  0698                     	;# 
  3535  0699                     	;# 
  3536  069A                     	;# 
  3537  069B                     	;# 
  3538  069C                     	;# 
  3539  069D                     	;# 
  3540  069E                     	;# 
  3541  069F                     	;# 
  3542  0E0F                     	;# 
  3543  0E10                     	;# 
  3544  0E11                     	;# 
  3545  0E12                     	;# 
  3546  0E13                     	;# 
  3547  0E14                     	;# 
  3548  0E15                     	;# 
  3549  0E17                     	;# 
  3550  0E20                     	;# 
  3551  0E21                     	;# 
  3552  0E22                     	;# 
  3553  0E24                     	;# 
  3554  0E25                     	;# 
  3555  0E28                     	;# 
  3556  0E29                     	;# 
  3557  0E2A                     	;# 
  3558  0E2B                     	;# 
  3559  0E90                     	;# 
  3560  0E91                     	;# 
  3561  0E92                     	;# 
  3562  0E94                     	;# 
  3563  0E95                     	;# 
  3564  0E9C                     	;# 
  3565  0E9D                     	;# 
  3566  0E9E                     	;# 
  3567  0E9F                     	;# 
  3568  0EA0                     	;# 
  3569  0EA1                     	;# 
  3570  0EA2                     	;# 
  3571  0EA3                     	;# 
  3572  0EA4                     	;# 
  3573  0EA5                     	;# 
  3574  0EA6                     	;# 
  3575  0EA7                     	;# 
  3576  0F0F                     	;# 
  3577  0F10                     	;# 
  3578  0F11                     	;# 
  3579  0F12                     	;# 
  3580  0F13                     	;# 
  3581  0F14                     	;# 
  3582  0F15                     	;# 
  3583  0F16                     	;# 
  3584  0F17                     	;# 
  3585  0F18                     	;# 
  3586  0F19                     	;# 
  3587  0F1A                     	;# 
  3588  0F1B                     	;# 
  3589  0F1C                     	;# 
  3590  0F1D                     	;# 
  3591  0F1E                     	;# 
  3592  0F1F                     	;# 
  3593  0F20                     	;# 
  3594  0F21                     	;# 
  3595  0F22                     	;# 
  3596  0F23                     	;# 
  3597  0F24                     	;# 
  3598  0F25                     	;# 
  3599  0F26                     	;# 
  3600  0F27                     	;# 
  3601  0F28                     	;# 
  3602  0F29                     	;# 
  3603  0F2A                     	;# 
  3604  0F2B                     	;# 
  3605  0F2C                     	;# 
  3606  0F2D                     	;# 
  3607  0FE4                     	;# 
  3608  0FE5                     	;# 
  3609  0FE6                     	;# 
  3610  0FE7                     	;# 
  3611  0FE8                     	;# 
  3612  0FE9                     	;# 
  3613  0FEA                     	;# 
  3614  0FEB                     	;# 
  3615  0FED                     	;# 
  3616  0FEE                     	;# 
  3617  0FEF                     	;# 
  3618                           
  3619 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  3620  0000                     
  3621 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  3622  0000                     
  3623 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  3624  0000                     
  3625                           	psect	idataCOMMON
  3626  0003                     __pidataCOMMON:
  3627                           
  3628                           ;initializer for _dc_frequency_flag
  3629  0003  3401               	retlw	1
  3630                           
  3631                           	psect	idataBANK1
  3632  0C05                     __pidataBANK1:
  3633                           
  3634                           ;initializer for _maxFrequencyIndex
  3635  0C05  340A               	retlw	10
  3636  0C06  3400               	retlw	0
  3637                           
  3638                           ;initializer for _maxCurrentIndex
  3639  0C07  340A               	retlw	10
  3640  0C08  3400               	retlw	0
  3641                           
  3642                           ;initializer for _toggle
  3643  0C09  3401               	retlw	1
  3644                           
  3645                           ;initializer for _currentIsOn
  3646  0C0A  3401               	retlw	1
  3647                           
  3648                           ;initializer for _currentValue
  3649  0C0B  3400               	retlw	0
  3650  0C0C  3400               	retlw	0
  3651  0C0D  341E               	retlw	30
  3652  0C0E  3400               	retlw	0
  3653  0C0F  3432               	retlw	50
  3654  0C10  3400               	retlw	0
  3655  0C11  3446               	retlw	70
  3656  0C12  3400               	retlw	0
  3657  0C13  345A               	retlw	90
  3658  0C14  3400               	retlw	0
  3659  0C15  346E               	retlw	110
  3660  0C16  3400               	retlw	0
  3661  0C17  3482               	retlw	130
  3662  0C18  3400               	retlw	0
  3663  0C19  34A0               	retlw	160
  3664  0C1A  3400               	retlw	0
  3665  0C1B  34DC               	retlw	220
  3666  0C1C  3400               	retlw	0
  3667  0C1D  34FA               	retlw	250
  3668  0C1E  3400               	retlw	0
  3669                           
  3670                           	psect	idataBANK2
  3671  0BAB                     __pidataBANK2:
  3672                           
  3673                           ;initializer for _frequencyValue
  3674  0BAB  3400               	retlw	0
  3675  0BAC  3400               	retlw	0
  3676  0BAD  3401               	retlw	1
  3677  0BAE  3400               	retlw	0
  3678  0BAF  3441               	retlw	65
  3679  0BB0  3400               	retlw	0
  3680  0BB1  3446               	retlw	70
  3681  0BB2  3400               	retlw	0
  3682  0BB3  344B               	retlw	75
  3683  0BB4  3400               	retlw	0
  3684  0BB5  3450               	retlw	80
  3685  0BB6  3400               	retlw	0
  3686  0BB7  3464               	retlw	100
  3687  0BB8  3400               	retlw	0
  3688  0BB9  3478               	retlw	120
  3689  0BBA  3400               	retlw	0
  3690  0BBB  3482               	retlw	130
  3691  0BBC  3400               	retlw	0
  3692  0BBD  348C               	retlw	140
  3693  0BBE  3400               	retlw	0
  3694                           
  3695                           	psect	stringtext1
  3696  086A                     __pstringtext1:
  3697  086A                     main@BATTERY_THRESHOLD:
  3698  086A  34D0               	retlw	208
  3699  086B  3407               	retlw	7
  3700  086C                     __end_ofmain@BATTERY_THRESHOLD:
  3701                           
  3702                           	psect	stringtext2
  3703  086C                     __pstringtext2:
  3704  086C                     main@BATTERY_NUM_LOW_READINGS:
  3705  086C  3410               	retlw	16
  3706  086D  3427               	retlw	39
  3707  086E                     __end_ofmain@BATTERY_NUM_LOW_READINGS:
  3708  0FE0                     _HEF_persistent_state_absaddr	set	4064
  3709  0FE0                     _HEF_persistent_state_absaddr	set	4064
  3710                           
  3711                           	psect	_HEF_persistent_state_text
  3712  0FE0                     __p_HEF_persistent_state_text:
  3713  0FE0                     _HEF_persistent_state:
  3714  0FE0  3405               	retlw	5
  3715  0FE1  3403               	retlw	3
  3716  0FE2  3400               	retlw	0
  3717  0FE3  3400               	retlw	0
  3718  0FE4  3400               	retlw	0
  3719  0FE5  3400               	retlw	0
  3720  0FE6  3400               	retlw	0
  3721  0FE7  3400               	retlw	0
  3722  0FE8  3400               	retlw	0
  3723  0FE9  3400               	retlw	0
  3724  0FEA  3400               	retlw	0
  3725  0FEB  3400               	retlw	0
  3726  0FEC  3400               	retlw	0
  3727  0FED  3400               	retlw	0
  3728  0FEE  3400               	retlw	0
  3729  0FEF  3400               	retlw	0
  3730  0FF0  3400               	retlw	0
  3731  0FF1  3400               	retlw	0
  3732  0FF2  3400               	retlw	0
  3733  0FF3  3400               	retlw	0
  3734  0FF4  3400               	retlw	0
  3735  0FF5  3400               	retlw	0
  3736  0FF6  3400               	retlw	0
  3737  0FF7  3400               	retlw	0
  3738  0FF8  3400               	retlw	0
  3739  0FF9  3400               	retlw	0
  3740  0FFA  3400               	retlw	0
  3741  0FFB  3400               	retlw	0
  3742  0FFC  3400               	retlw	0
  3743  0FFD  3400               	retlw	0
  3744  0FFE  3400               	retlw	0
  3745  0FFF  3400               	retlw	0
  3746  1000                     __end_of_HEF_persistent_state:
  3747                           
  3748                           	psect	nvBANK1
  3749  00D4                     __pnvBANK1:
  3750  00D4                     _TMR1_InterruptHandler:
  3751  00D4                     	ds	2
  3752  00D6                     _timer1ReloadVal:
  3753  00D6                     	ds	2
  3754  00D8                     _TMR4_InterruptHandler:
  3755  00D8                     	ds	2
  3756  00DA                     _TMR0_InterruptHandler:
  3757  00DA                     	ds	2
  3758  00DC                     _INT_InterruptHandler:
  3759  00DC                     	ds	2
  3760  00DE                     _EUSART_ErrorHandler:
  3761  00DE                     	ds	2
  3762  00E0                     _EUSART_OverrunErrorHandler:
  3763  00E0                     	ds	2
  3764  00E2                     _EUSART_FramingErrorHandler:
  3765  00E2                     	ds	2
  3766  00E4                     _frequencyIndex:
  3767  00E4                     	ds	2
  3768  00E6                     _currentIndex:
  3769  00E6                     	ds	2
  3770  0016                     _TMR1	set	22
  3771  0018                     _T1CONbits	set	24
  3772  001C                     _T2CONbits	set	28
  3773  001C                     _T2CON	set	28
  3774  001A                     _TMR2	set	26
  3775  001B                     _PR2	set	27
  3776  0015                     _TMR0	set	21
  3777  0011                     _PIR1bits	set	17
  3778  0012                     _PIR2bits	set	18
  3779  000B                     _INTCONbits	set	11
  3780  008E                     _TRISCbits	set	142
  3781  008D                     _TRISBbits	set	141
  3782  009D                     _ADCON0bits	set	157
  3783  009E                     _ADCON1	set	158
  3784  009D                     _ADCON0	set	157
  3785  0095                     _OPTION_REG	set	149
  3786  0091                     _PIE1bits	set	145
  3787  0092                     _PIE2bits	set	146
  3788  0095                     _OPTION_REGbits	set	149
  3789  008E                     _TRISC	set	142
  3790  008D                     _TRISB	set	141
  3791  008C                     _TRISA	set	140
  3792  0097                     _WDTCON	set	151
  3793  0098                     _OSCTUNE	set	152
  3794  009A                     _OSCSTAT	set	154
  3795  0099                     _OSCCON	set	153
  3796  009B                     _ADRES	set	155
  3797  0117                     _FVRCONbits	set	279
  3798  0117                     _FVRCON	set	279
  3799  010E                     _LATCbits	set	270
  3800  010D                     _LATBbits	set	269
  3801  010E                     _LATC	set	270
  3802  010D                     _LATB	set	269
  3803  010C                     _LATA	set	268
  3804  0116                     _BORCON	set	278
  3805  0119                     _DAC1CON1	set	281
  3806  0118                     _DAC1CON0	set	280
  3807  0196                     _PMCON2	set	406
  3808  0193                     _PMDATL	set	403
  3809  0194                     _PMDATH	set	404
  3810  0195                     _PMCON1bits	set	405
  3811  0192                     _PMADRH	set	402
  3812  0191                     _PMADRL	set	401
  3813  019A                     _TX1REG	set	410
  3814  0199                     _RC1REG	set	409
  3815  019D                     _RC1STAbits	set	413
  3816  019E                     _TX1STAbits	set	414
  3817  019C                     _SP1BRGH	set	412
  3818  019B                     _SP1BRGL	set	411
  3819  019E                     _TX1STA	set	414
  3820  019D                     _RC1STA	set	413
  3821  019F                     _BAUD1CON	set	415
  3822  018C                     _ANSELA	set	396
  3823  018D                     _ANSELB	set	397
  3824  018E                     _ANSELC	set	398
  3825  020E                     _WPUC	set	526
  3826  020C                     _WPUA	set	524
  3827  020D                     _WPUB	set	525
  3828  0291                     _CCPR1L	set	657
  3829  0293                     _CCP1CONbits	set	659
  3830  029E                     _CCPTMRSbits	set	670
  3831  028E                     _ODCONC	set	654
  3832  028D                     _ODCONB	set	653
  3833  028C                     _ODCONA	set	652
  3834  030E                     _SLRCONC	set	782
  3835  030D                     _SLRCONB	set	781
  3836  030C                     _SLRCONA	set	780
  3837  038E                     _INLVLC	set	910
  3838  038D                     _INLVLB	set	909
  3839  038C                     _INLVLA	set	908
  3840  0417                     _T4CONbits	set	1047
  3841  0417                     _T4CON	set	1047
  3842  0415                     _TMR4	set	1045
  3843  0416                     _PR4	set	1046
  3844  0515                     _OPA2CON	set	1301
  3845  0511                     _OPA1CON	set	1297
  3846  061C                     _PWM4CONbits	set	1564
  3847  061A                     _PWM4DCLbits	set	1562
  3848  061B                     _PWM4DCH	set	1563
  3849  0619                     _PWM3CONbits	set	1561
  3850  0617                     _PWM3DCLbits	set	1559
  3851  0618                     _PWM3DCH	set	1560
  3852  0E24                     _RXPPS	set	3620
  3853  0E10                     _INTPPS	set	3600
  3854  0EA5                     _RC5PPS	set	3749
  3855  0E95                     _RA5PPS	set	3733
  3856  0EA4                     _RC4PPS	set	3748
  3857  0E9F                     _RB7PPS	set	3743
  3858                           
  3859                           	psect	stringtext3
  3860  07EA                     __pstringtext3:
  3861  07EA                     STR_6:
  3862  07EA  340A               	retlw	10
  3863  07EB  3420               	retlw	32	;' '
  3864  07EC  3463               	retlw	99	;'c'
  3865  07ED  3475               	retlw	117	;'u'
  3866  07EE  3472               	retlw	114	;'r'
  3867  07EF  3472               	retlw	114	;'r'
  3868  07F0  3465               	retlw	101	;'e'
  3869  07F1  346E               	retlw	110	;'n'
  3870  07F2  3474               	retlw	116	;'t'
  3871  07F3  3420               	retlw	32	;' '
  3872  07F4  3476               	retlw	118	;'v'
  3873  07F5  3461               	retlw	97	;'a'
  3874  07F6  346C               	retlw	108	;'l'
  3875  07F7  3475               	retlw	117	;'u'
  3876  07F8  3465               	retlw	101	;'e'
  3877  07F9  3420               	retlw	32	;' '
  3878  07FA  3473               	retlw	115	;'s'
  3879  07FB  3465               	retlw	101	;'e'
  3880  07FC  346C               	retlw	108	;'l'
  3881  07FD  3465               	retlw	101	;'e'
  3882  07FE  3463               	retlw	99	;'c'
  3883  07FF  3474               	retlw	116	;'t'
  3884  0800  3465               	retlw	101	;'e'
  3885  0801  3464               	retlw	100	;'d'
  3886  0802  3400               	retlw	0
  3887                           
  3888                           	psect	stringtext4
  3889  0803                     __pstringtext4:
  3890  0803                     STR_5:
  3891  0803  340A               	retlw	10
  3892  0804  3420               	retlw	32	;' '
  3893  0805  3472               	retlw	114	;'r'
  3894  0806  3465               	retlw	101	;'e'
  3895  0807  3473               	retlw	115	;'s'
  3896  0808  3465               	retlw	101	;'e'
  3897  0809  3474               	retlw	116	;'t'
  3898  080A  3420               	retlw	32	;' '
  3899  080B  3476               	retlw	118	;'v'
  3900  080C  3461               	retlw	97	;'a'
  3901  080D  346C               	retlw	108	;'l'
  3902  080E  3475               	retlw	117	;'u'
  3903  080F  3465               	retlw	101	;'e'
  3904  0810  3420               	retlw	32	;' '
  3905  0811  3473               	retlw	115	;'s'
  3906  0812  3465               	retlw	101	;'e'
  3907  0813  346C               	retlw	108	;'l'
  3908  0814  3465               	retlw	101	;'e'
  3909  0815  3463               	retlw	99	;'c'
  3910  0816  3474               	retlw	116	;'t'
  3911  0817  3465               	retlw	101	;'e'
  3912  0818  3464               	retlw	100	;'d'
  3913  0819  3400               	retlw	0
  3914                           
  3915                           	psect	stringtext5
  3916  081A                     __pstringtext5:
  3917  081A                     STR_1:
  3918  081A  340A               	retlw	10
  3919  081B  3420               	retlw	32	;' '
  3920  081C  3446               	retlw	70	;'F'
  3921  081D  3472               	retlw	114	;'r'
  3922  081E  3465               	retlw	101	;'e'
  3923  081F  3471               	retlw	113	;'q'
  3924  0820  3475               	retlw	117	;'u'
  3925  0821  3465               	retlw	101	;'e'
  3926  0822  346E               	retlw	110	;'n'
  3927  0823  3463               	retlw	99	;'c'
  3928  0824  3479               	retlw	121	;'y'
  3929  0825  3420               	retlw	32	;' '
  3930  0826  3473               	retlw	115	;'s'
  3931  0827  3465               	retlw	101	;'e'
  3932  0828  346C               	retlw	108	;'l'
  3933  0829  3465               	retlw	101	;'e'
  3934  082A  3463               	retlw	99	;'c'
  3935  082B  3474               	retlw	116	;'t'
  3936  082C  3465               	retlw	101	;'e'
  3937  082D  3464               	retlw	100	;'d'
  3938  082E  3400               	retlw	0
  3939                           
  3940                           	psect	stringtext6
  3941  082F                     __pstringtext6:
  3942  082F                     STR_4:
  3943  082F  340A               	retlw	10
  3944  0830  3420               	retlw	32	;' '
  3945  0831  3464               	retlw	100	;'d'
  3946  0832  3465               	retlw	101	;'e'
  3947  0833  3463               	retlw	99	;'c'
  3948  0834  3472               	retlw	114	;'r'
  3949  0835  3465               	retlw	101	;'e'
  3950  0836  3461               	retlw	97	;'a'
  3951  0837  3473               	retlw	115	;'s'
  3952  0838  3465               	retlw	101	;'e'
  3953  0839  3420               	retlw	32	;' '
  3954  083A  3473               	retlw	115	;'s'
  3955  083B  3465               	retlw	101	;'e'
  3956  083C  346C               	retlw	108	;'l'
  3957  083D  3465               	retlw	101	;'e'
  3958  083E  3463               	retlw	99	;'c'
  3959  083F  3474               	retlw	116	;'t'
  3960  0840  3465               	retlw	101	;'e'
  3961  0841  3464               	retlw	100	;'d'
  3962  0842  3400               	retlw	0
  3963                           
  3964                           	psect	stringtext7
  3965  0843                     __pstringtext7:
  3966  0843                     STR_3:
  3967  0843  340A               	retlw	10
  3968  0844  3420               	retlw	32	;' '
  3969  0845  3469               	retlw	105	;'i'
  3970  0846  346E               	retlw	110	;'n'
  3971  0847  3463               	retlw	99	;'c'
  3972  0848  3472               	retlw	114	;'r'
  3973  0849  3465               	retlw	101	;'e'
  3974  084A  3461               	retlw	97	;'a'
  3975  084B  3473               	retlw	115	;'s'
  3976  084C  3465               	retlw	101	;'e'
  3977  084D  3420               	retlw	32	;' '
  3978  084E  3473               	retlw	115	;'s'
  3979  084F  3465               	retlw	101	;'e'
  3980  0850  346C               	retlw	108	;'l'
  3981  0851  3465               	retlw	101	;'e'
  3982  0852  3463               	retlw	99	;'c'
  3983  0853  3474               	retlw	116	;'t'
  3984  0854  3465               	retlw	101	;'e'
  3985  0855  3464               	retlw	100	;'d'
  3986  0856  3400               	retlw	0
  3987                           
  3988                           	psect	stringtext8
  3989  0857                     __pstringtext8:
  3990  0857                     STR_2:
  3991  0857  340A               	retlw	10
  3992  0858  3420               	retlw	32	;' '
  3993  0859  3463               	retlw	99	;'c'
  3994  085A  3475               	retlw	117	;'u'
  3995  085B  3472               	retlw	114	;'r'
  3996  085C  3472               	retlw	114	;'r'
  3997  085D  3465               	retlw	101	;'e'
  3998  085E  346E               	retlw	110	;'n'
  3999  085F  3474               	retlw	116	;'t'
  4000  0860  3420               	retlw	32	;' '
  4001  0861  3473               	retlw	115	;'s'
  4002  0862  3465               	retlw	101	;'e'
  4003  0863  346C               	retlw	108	;'l'
  4004  0864  3465               	retlw	101	;'e'
  4005  0865  3463               	retlw	99	;'c'
  4006  0866  3474               	retlw	116	;'t'
  4007  0867  3465               	retlw	101	;'e'
  4008  0868  3464               	retlw	100	;'d'
  4009  0869  3400               	retlw	0
  4010                           
  4011                           	psect	stringtext9
  4012  0000                     __pstringtext9:
  4013  07EA                     
  4014                           	psect	cinit
  4015  004D                     start_initialization:	
  4016                           ; #config settings
  4017                           
  4018  004D                     __initialization:
  4019                           
  4020                           ; Initialize objects allocated to COMMON
  4021  004D  3180  2003  3180   	fcall	__pidataCOMMON	;fetch initializer
  4022  0050  00FA               	movwf	__pdataCOMMON& (0+127)
  4023                           
  4024                           ; Initialize objects allocated to BANK1
  4025  0051  3005               	movlw	low __pidataBANK1
  4026  0052  0084               	movwf	4
  4027  0053  308C               	movlw	(high __pidataBANK1)| (0+128)
  4028  0054  0085               	movwf	5
  4029  0055  30BA               	movlw	low __pdataBANK1
  4030  0056  0086               	movwf	6
  4031  0057  3000               	movlw	high __pdataBANK1
  4032  0058  0087               	movwf	7
  4033  0059  301A               	movlw	26
  4034  005A  318B  2306  3180   	fcall	init_ram
  4035                           
  4036                           ; Initialize objects allocated to BANK2
  4037  005D  30AB               	movlw	low __pidataBANK2
  4038  005E  0084               	movwf	4
  4039  005F  308B               	movlw	(high __pidataBANK2)| (0+128)
  4040  0060  0085               	movwf	5
  4041  0061  3040               	movlw	low __pdataBANK2
  4042  0062  0086               	movwf	6
  4043  0063  3001               	movlw	high __pdataBANK2
  4044  0064  0087               	movwf	7
  4045  0065  3014               	movlw	20
  4046  0066  318B  2306  3180   	fcall	init_ram
  4047                           
  4048                           ; Clear objects allocated to COMMON
  4049  0069  01F8               	clrf	__pbssCOMMON& (0+127)
  4050  006A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  4051                           
  4052                           ; Clear objects allocated to BANK1
  4053  006B  30A0               	movlw	low __pbssBANK1
  4054  006C  0084               	movwf	4
  4055  006D  3000               	movlw	high __pbssBANK1
  4056  006E  0085               	movwf	5
  4057  006F  301A               	movlw	26
  4058  0070  318B  2300  3180   	fcall	clear_ram0
  4059                           
  4060                           ; Clear objects allocated to BANK2
  4061  0073  3020               	movlw	low __pbssBANK2
  4062  0074  0084               	movwf	4
  4063  0075  3001               	movlw	high __pbssBANK2
  4064  0076  0085               	movwf	5
  4065  0077  3020               	movlw	32
  4066  0078  318B  2300  3180   	fcall	clear_ram0
  4067                           
  4068                           ; Clear objects allocated to BANK3
  4069  007B  30A0               	movlw	low __pbssBANK3
  4070  007C  0084               	movwf	4
  4071  007D  3001               	movlw	high __pbssBANK3
  4072  007E  0085               	movwf	5
  4073  007F  3021               	movlw	33
  4074  0080  318B  2300  3180   	fcall	clear_ram0
  4075  0083                     end_of_initialization:	
  4076                           ;End of C runtime variable initialization code
  4077                           
  4078  0083                     __end_of__initialization:
  4079  0083  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4080  0084  0020               	movlb	0
  4081  0085  3184  2C64         	ljmp	_main	;jump to C main() function
  4082                           
  4083                           	psect	bssCOMMON
  4084  0078                     __pbssCOMMON:
  4085  0078                     _interfaceState:
  4086  0078                     	ds	1
  4087  0079                     _timer0ReloadVal:
  4088  0079                     	ds	1
  4089                           
  4090                           	psect	dataCOMMON
  4091  007A                     __pdataCOMMON:
  4092  007A                     _dc_frequency_flag:
  4093  007A                     	ds	1
  4094                           
  4095                           	psect	bssBANK1
  4096  00A0                     __pbssBANK1:
  4097  00A0                     _nout:
  4098  00A0                     	ds	2
  4099  00A2                     _width:
  4100  00A2                     	ds	2
  4101  00A4                     _prec:
  4102  00A4                     	ds	2
  4103  00A6                     _flags:
  4104  00A6                     	ds	2
  4105  00A8                     _dac_value:
  4106  00A8                     	ds	2
  4107  00AA                     _Vdd_mv:
  4108  00AA                     	ds	2
  4109  00AC                     _microamps:
  4110  00AC                     	ds	2
  4111  00AE                     _LED_blue:
  4112  00AE                     	ds	1
  4113  00AF                     _LED_green:
  4114  00AF                     	ds	1
  4115  00B0                     _LED_red:
  4116  00B0                     	ds	1
  4117  00B1                     _latchTester:
  4118  00B1                     	ds	1
  4119  00B2                     _oneHzCounter:
  4120  00B2                     	ds	1
  4121  00B3                     _eusartRxLastError:
  4122  00B3                     	ds	1
  4123  00B4                     _ir_code:
  4124  00B4                     	ds	6
  4125                           
  4126                           	psect	dataBANK1
  4127  00BA                     __pdataBANK1:
  4128  00BA                     _maxFrequencyIndex:
  4129  00BA                     	ds	2
  4130  00BC                     _maxCurrentIndex:
  4131  00BC                     	ds	2
  4132  00BE                     _toggle:
  4133  00BE                     	ds	1
  4134  00BF                     _currentIsOn:
  4135  00BF                     	ds	1
  4136  00C0                     _currentValue:
  4137  00C0                     	ds	20
  4138                           
  4139                           	psect	bssBANK2
  4140  0120                     __pbssBANK2:
  4141  0120                     _dbuf:
  4142  0120                     	ds	32
  4143                           
  4144                           	psect	dataBANK2
  4145  0140                     __pdataBANK2:
  4146  0140                     _frequencyValue:
  4147  0140                     	ds	20
  4148                           
  4149                           	psect	bssBANK3
  4150  01A0                     __pbssBANK3:
  4151  01A0                     _stats:
  4152  01A0                     	ds	33
  4153                           
  4154                           	psect	inittext
  4155  0B06                     init_ram:
  4156  0B06  00FE               	movwf	btemp
  4157  0B07                     initloop:
  4158  0B07  0012               	moviw fsr0++
  4159  0B08  001E               	movwi fsr1++
  4160  0B09  0BFE               	decfsz	btemp,f
  4161  0B0A  2B07               	goto	initloop
  4162  0B0B  3400               	retlw	0
  4163                           
  4164                           	psect	clrtext
  4165  0B00                     clear_ram0:	
  4166                           ;	Called with FSR0 containing the base address, and
  4167                           ;	WREG with the size to clear
  4168                           
  4169  0B00  0064               	clrwdt	;clear the watchdog before getting into this loop
  4170  0B01                     clrloop0:
  4171  0B01  0180               	clrf	0	;clear RAM location pointed to by FSR
  4172  0B02  3101               	addfsr 0,1
  4173  0B03  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4174  0B04  2B01               	goto	clrloop0	;have we reached the end yet?
  4175  0B05  3400               	retlw	0	;all done for this memory range, return
  4176                           
  4177                           	psect	cstackBANK1
  4178  00E8                     __pcstackBANK1:
  4179  00E8                     ??_process_remote_command:
  4180                           
  4181                           ; 1 bytes @ 0x0
  4182  00E8                     	ds	2
  4183  00EA                     process_remote_command@code:
  4184                           
  4185                           ; 1 bytes @ 0x2
  4186  00EA                     	ds	1
  4187  00EB                     ??_main:
  4188                           
  4189                           ; 1 bytes @ 0x3
  4190  00EB                     	ds	1
  4191  00EC                     main@low_reading_count:
  4192                           
  4193                           ; 2 bytes @ 0x4
  4194  00EC                     	ds	2
  4195  00EE                     main@batt_mv:
  4196                           
  4197                           ; 2 bytes @ 0x6
  4198  00EE                     	ds	2
  4199                           
  4200                           	psect	cstackCOMMON
  4201  0070                     __pcstackCOMMON:
  4202  0070                     ?_PIN_MANAGER_Initialize:
  4203  0070                     ?_OSCILLATOR_Initialize:	
  4204                           ; 1 bytes @ 0x0
  4205                           
  4206  0070                     ?_WDT_Initialize:	
  4207                           ; 1 bytes @ 0x0
  4208                           
  4209  0070                     ?_OPA1_Initialize:	
  4210                           ; 1 bytes @ 0x0
  4211                           
  4212  0070                     ?_TMR4_Initialize:	
  4213                           ; 1 bytes @ 0x0
  4214                           
  4215  0070                     ?_OPA2_Initialize:	
  4216                           ; 1 bytes @ 0x0
  4217                           
  4218  0070                     ?_TMR1_Initialize:	
  4219                           ; 1 bytes @ 0x0
  4220                           
  4221  0070                     ?_TMR2_Initialize:	
  4222                           ; 1 bytes @ 0x0
  4223                           
  4224  0070                     ?_EXT_INT_Initialize:	
  4225                           ; 1 bytes @ 0x0
  4226                           
  4227  0070                     ?_TMR0_Initialize:	
  4228                           ; 1 bytes @ 0x0
  4229                           
  4230  0070                     ?_EUSART_Initialize:	
  4231                           ; 1 bytes @ 0x0
  4232                           
  4233  0070                     ?_TMR0_ISR:	
  4234                           ; 1 bytes @ 0x0
  4235                           
  4236  0070                     ??_TMR0_ISR:	
  4237                           ; 1 bytes @ 0x0
  4238                           
  4239  0070                     ?_INT_ISR:	
  4240                           ; 1 bytes @ 0x0
  4241                           
  4242  0070                     ?_TMR4_ISR:	
  4243                           ; 1 bytes @ 0x0
  4244                           
  4245  0070                     ?_TMR1_ISR:	
  4246                           ; 1 bytes @ 0x0
  4247                           
  4248  0070                     ??_TMR1_ISR:	
  4249                           ; 1 bytes @ 0x0
  4250                           
  4251  0070                     ?_INT_CallBack:	
  4252                           ; 1 bytes @ 0x0
  4253                           
  4254  0070                     ?_TMR0_DefaultInterruptHandler:	
  4255                           ; 1 bytes @ 0x0
  4256                           
  4257  0070                     ??_TMR0_DefaultInterruptHandler:	
  4258                           ; 1 bytes @ 0x0
  4259                           
  4260  0070                     ?_TMR4_DefaultInterruptHandler:	
  4261                           ; 1 bytes @ 0x0
  4262                           
  4263  0070                     ?_TMR1_DefaultInterruptHandler:	
  4264                           ; 1 bytes @ 0x0
  4265                           
  4266  0070                     ??_TMR1_DefaultInterruptHandler:	
  4267                           ; 1 bytes @ 0x0
  4268                           
  4269  0070                     ?_DAC_Initialize:	
  4270                           ; 1 bytes @ 0x0
  4271                           
  4272  0070                     ?_DAC_SetOutput:	
  4273                           ; 1 bytes @ 0x0
  4274                           
  4275  0070                     ??_DAC_SetOutput:	
  4276                           ; 1 bytes @ 0x0
  4277                           
  4278  0070                     ?_SYSTEM_Initialize:	
  4279                           ; 1 bytes @ 0x0
  4280                           
  4281  0070                     ?_PIN_MANAGER_IOC:	
  4282                           ; 1 bytes @ 0x0
  4283                           
  4284  0070                     ??_PIN_MANAGER_IOC:	
  4285                           ; 1 bytes @ 0x0
  4286                           
  4287  0070                     ?_INTERRUPT_InterruptManager:	
  4288                           ; 1 bytes @ 0x0
  4289                           
  4290  0070                     ?_EUSART_Write:	
  4291                           ; 1 bytes @ 0x0
  4292                           
  4293  0070                     ?_putch:	
  4294                           ; 1 bytes @ 0x0
  4295                           
  4296  0070                     ?_INT_DefaultInterruptHandler:	
  4297                           ; 1 bytes @ 0x0
  4298                           
  4299  0070                     ??_INT_DefaultInterruptHandler:	
  4300                           ; 1 bytes @ 0x0
  4301                           
  4302  0070                     ?_TMR4_LoadPeriodRegister:	
  4303                           ; 1 bytes @ 0x0
  4304                           
  4305  0070                     ?_readPersistentState:	
  4306                           ; 1 bytes @ 0x0
  4307                           
  4308  0070                     ?_writePersistentState:	
  4309                           ; 1 bytes @ 0x0
  4310                           
  4311  0070                     ?_initLED:	
  4312                           ; 1 bytes @ 0x0
  4313                           
  4314  0070                     ?_lowBattery:	
  4315                           ; 1 bytes @ 0x0
  4316                           
  4317  0070                     ?_startUp:	
  4318                           ; 1 bytes @ 0x0
  4319                           
  4320  0070                     ?_selectSomething:	
  4321                           ; 1 bytes @ 0x0
  4322                           
  4323  0070                     ?_selectFrequency:	
  4324                           ; 1 bytes @ 0x0
  4325                           
  4326  0070                     ?_selectCurrent:	
  4327                           ; 1 bytes @ 0x0
  4328                           
  4329  0070                     ?_selectIncrease:	
  4330                           ; 1 bytes @ 0x0
  4331                           
  4332  0070                     ?_selectDecrease:	
  4333                           ; 1 bytes @ 0x0
  4334                           
  4335  0070                     ?_selectCurrentValue:	
  4336                           ; 1 bytes @ 0x0
  4337                           
  4338  0070                     ?_selectFrequencyValue:	
  4339                           ; 1 bytes @ 0x0
  4340                           
  4341  0070                     ?_process_remote_command:	
  4342                           ; 1 bytes @ 0x0
  4343                           
  4344  0070                     ?_LATCH_Initialize:	
  4345                           ; 1 bytes @ 0x0
  4346                           
  4347  0070                     ?_main:	
  4348                           ; 1 bytes @ 0x0
  4349                           
  4350  0070                     DAC_SetOutput@inputData:	
  4351                           ; 1 bytes @ 0x0
  4352                           
  4353                           
  4354                           ; 1 bytes @ 0x0
  4355  0070                     	ds	1
  4356  0071                     ??_TMR4_DefaultInterruptHandler:
  4357                           
  4358                           ; 1 bytes @ 0x1
  4359  0071                     	ds	1
  4360  0072                     ??_TMR4_ISR:
  4361  0072                     INT_DefaultInterruptHandler@time:	
  4362                           ; 1 bytes @ 0x2
  4363                           
  4364                           
  4365                           ; 1 bytes @ 0x2
  4366  0072                     	ds	1
  4367  0073                     ??_PIN_MANAGER_Initialize:
  4368  0073                     ??_OSCILLATOR_Initialize:	
  4369                           ; 1 bytes @ 0x3
  4370                           
  4371  0073                     ??_WDT_Initialize:	
  4372                           ; 1 bytes @ 0x3
  4373                           
  4374  0073                     ??_OPA1_Initialize:	
  4375                           ; 1 bytes @ 0x3
  4376                           
  4377  0073                     ??_OPA2_Initialize:	
  4378                           ; 1 bytes @ 0x3
  4379                           
  4380  0073                     ??_TMR2_Initialize:	
  4381                           ; 1 bytes @ 0x3
  4382                           
  4383  0073                     ??_INT_ISR:	
  4384                           ; 1 bytes @ 0x3
  4385                           
  4386  0073                     ?_EUSART_SetFramingErrorHandler:	
  4387                           ; 1 bytes @ 0x3
  4388                           
  4389  0073                     ?_EUSART_SetOverrunErrorHandler:	
  4390                           ; 1 bytes @ 0x3
  4391                           
  4392  0073                     ?_EUSART_SetErrorHandler:	
  4393                           ; 1 bytes @ 0x3
  4394                           
  4395  0073                     ??_INT_CallBack:	
  4396                           ; 1 bytes @ 0x3
  4397                           
  4398  0073                     ?_TMR0_SetInterruptHandler:	
  4399                           ; 1 bytes @ 0x3
  4400                           
  4401  0073                     ?_TMR4_SetInterruptHandler:	
  4402                           ; 1 bytes @ 0x3
  4403                           
  4404  0073                     ?_FLASH_EraseBlock:	
  4405                           ; 1 bytes @ 0x3
  4406                           
  4407  0073                     ?_TMR1_SetInterruptHandler:	
  4408                           ; 1 bytes @ 0x3
  4409                           
  4410  0073                     ??_DAC_Initialize:	
  4411                           ; 1 bytes @ 0x3
  4412                           
  4413  0073                     ??_INTERRUPT_InterruptManager:	
  4414                           ; 1 bytes @ 0x3
  4415                           
  4416  0073                     ??_EUSART_Write:	
  4417                           ; 1 bytes @ 0x3
  4418                           
  4419  0073                     ?_INT_SetInterruptHandler:	
  4420                           ; 1 bytes @ 0x3
  4421                           
  4422  0073                     ??_TMR4_LoadPeriodRegister:	
  4423                           ; 1 bytes @ 0x3
  4424                           
  4425  0073                     ??_readPersistentState:	
  4426                           ; 1 bytes @ 0x3
  4427                           
  4428  0073                     ??_initLED:	
  4429                           ; 1 bytes @ 0x3
  4430                           
  4431  0073                     ?_setLEDColor:	
  4432                           ; 1 bytes @ 0x3
  4433                           
  4434  0073                     ??_LATCH_Initialize:	
  4435                           ; 1 bytes @ 0x3
  4436                           
  4437  0073                     ??___lmul:	
  4438                           ; 1 bytes @ 0x3
  4439                           
  4440  0073                     ?___awdiv:	
  4441                           ; 1 bytes @ 0x3
  4442                           
  4443  0073                     EUSART_Write@txData:	
  4444                           ; 2 bytes @ 0x3
  4445                           
  4446  0073                     TMR4_LoadPeriodRegister@periodVal:	
  4447                           ; 1 bytes @ 0x3
  4448                           
  4449  0073                     setLEDColor@green:	
  4450                           ; 1 bytes @ 0x3
  4451                           
  4452  0073                     EUSART_SetFramingErrorHandler@interruptHandler:	
  4453                           ; 1 bytes @ 0x3
  4454                           
  4455  0073                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  4456                           ; 2 bytes @ 0x3
  4457                           
  4458  0073                     EUSART_SetErrorHandler@interruptHandler:	
  4459                           ; 2 bytes @ 0x3
  4460                           
  4461  0073                     INT_SetInterruptHandler@InterruptHandler:	
  4462                           ; 2 bytes @ 0x3
  4463                           
  4464  0073                     TMR0_SetInterruptHandler@InterruptHandler:	
  4465                           ; 2 bytes @ 0x3
  4466                           
  4467  0073                     TMR4_SetInterruptHandler@InterruptHandler:	
  4468                           ; 2 bytes @ 0x3
  4469                           
  4470  0073                     FLASH_EraseBlock@startAddr:	
  4471                           ; 2 bytes @ 0x3
  4472                           
  4473  0073                     TMR1_SetInterruptHandler@InterruptHandler:	
  4474                           ; 2 bytes @ 0x3
  4475                           
  4476  0073                     ___awdiv@divisor:	
  4477                           ; 2 bytes @ 0x3
  4478                           
  4479  0073                     ___lmul@product:	
  4480                           ; 2 bytes @ 0x3
  4481                           
  4482                           
  4483                           ; 4 bytes @ 0x3
  4484  0073                     	ds	1
  4485  0074                     ??_putch:
  4486  0074                     putch@txData:	
  4487                           ; 1 bytes @ 0x4
  4488                           
  4489  0074                     setLEDColor@blue:	
  4490                           ; 1 bytes @ 0x4
  4491                           
  4492                           
  4493                           ; 1 bytes @ 0x4
  4494  0074                     	ds	1
  4495  0075                     ??_TMR4_Initialize:
  4496  0075                     ??_TMR1_Initialize:	
  4497                           ; 1 bytes @ 0x5
  4498                           
  4499  0075                     ??_EXT_INT_Initialize:	
  4500                           ; 1 bytes @ 0x5
  4501                           
  4502  0075                     ??_TMR0_Initialize:	
  4503                           ; 1 bytes @ 0x5
  4504                           
  4505  0075                     ??_EUSART_Initialize:	
  4506                           ; 1 bytes @ 0x5
  4507                           
  4508  0075                     ??_EUSART_SetFramingErrorHandler:	
  4509                           ; 1 bytes @ 0x5
  4510                           
  4511  0075                     ??_EUSART_SetOverrunErrorHandler:	
  4512                           ; 1 bytes @ 0x5
  4513                           
  4514  0075                     ??_EUSART_SetErrorHandler:	
  4515                           ; 1 bytes @ 0x5
  4516                           
  4517  0075                     ??_TMR0_SetInterruptHandler:	
  4518                           ; 1 bytes @ 0x5
  4519                           
  4520  0075                     ??_TMR4_SetInterruptHandler:	
  4521                           ; 1 bytes @ 0x5
  4522                           
  4523  0075                     ??_FLASH_EraseBlock:	
  4524                           ; 1 bytes @ 0x5
  4525                           
  4526  0075                     ??_TMR1_SetInterruptHandler:	
  4527                           ; 1 bytes @ 0x5
  4528                           
  4529  0075                     ??_SYSTEM_Initialize:	
  4530                           ; 1 bytes @ 0x5
  4531                           
  4532  0075                     ??_INT_SetInterruptHandler:	
  4533                           ; 1 bytes @ 0x5
  4534                           
  4535  0075                     ??_setLEDColor:	
  4536                           ; 1 bytes @ 0x5
  4537                           
  4538  0075                     ?_fputc:	
  4539                           ; 1 bytes @ 0x5
  4540                           
  4541  0075                     FLASH_EraseBlock@GIEBitValue:	
  4542                           ; 2 bytes @ 0x5
  4543                           
  4544  0075                     ___awdiv@dividend:	
  4545                           ; 1 bytes @ 0x5
  4546                           
  4547  0075                     fputc@c:	
  4548                           ; 2 bytes @ 0x5
  4549                           
  4550                           
  4551                           ; 2 bytes @ 0x5
  4552  0075                     	ds	1
  4553  0076                     setLEDColor@red:
  4554                           
  4555                           ; 1 bytes @ 0x6
  4556  0076                     	ds	1
  4557  0077                     ??___awdiv:
  4558  0077                     fputc@fp:	
  4559                           ; 1 bytes @ 0x7
  4560                           
  4561                           
  4562                           ; 1 bytes @ 0x7
  4563  0077                     	ds	1
  4564  0078                     ??_battery_voltage:
  4565                           
  4566                           	psect	cstackBANK0
  4567  0020                     __pcstackBANK0:	
  4568                           ; 1 bytes @ 0x8
  4569                           
  4570  0020                     ?_FLASH_WriteBlock:
  4571  0020                     ??_fputc:	
  4572                           ; 1 bytes @ 0x0
  4573                           
  4574  0020                     ??_lowBattery:	
  4575                           ; 1 bytes @ 0x0
  4576                           
  4577  0020                     ??_startUp:	
  4578                           ; 1 bytes @ 0x0
  4579                           
  4580  0020                     ??_selectSomething:	
  4581                           ; 1 bytes @ 0x0
  4582                           
  4583  0020                     ?___lmul:	
  4584                           ; 1 bytes @ 0x0
  4585                           
  4586  0020                     ___awdiv@counter:	
  4587                           ; 4 bytes @ 0x0
  4588                           
  4589  0020                     FLASH_WriteBlock@writeAddr:	
  4590                           ; 1 bytes @ 0x0
  4591                           
  4592  0020                     ___lmul@multiplier:	
  4593                           ; 2 bytes @ 0x0
  4594                           
  4595                           
  4596                           ; 4 bytes @ 0x0
  4597  0020                     	ds	1
  4598  0021                     ___awdiv@sign:
  4599                           
  4600                           ; 1 bytes @ 0x1
  4601  0021                     	ds	1
  4602  0022                     FLASH_WriteBlock@flashWordArray:
  4603  0022                     startUp@i:	
  4604                           ; 1 bytes @ 0x2
  4605                           
  4606  0022                     ___awdiv@quotient:	
  4607                           ; 2 bytes @ 0x2
  4608                           
  4609                           
  4610                           ; 2 bytes @ 0x2
  4611  0022                     	ds	1
  4612  0023                     ??_FLASH_WriteBlock:
  4613                           
  4614                           ; 1 bytes @ 0x3
  4615  0023                     	ds	1
  4616  0024                     ___lmul@multiplicand:
  4617                           
  4618                           ; 4 bytes @ 0x4
  4619  0024                     	ds	1
  4620  0025                     ?_vfpfcnvrt:
  4621  0025                     vfpfcnvrt@fmt:	
  4622                           ; 2 bytes @ 0x5
  4623                           
  4624                           
  4625                           ; 1 bytes @ 0x5
  4626  0025                     	ds	1
  4627  0026                     vfpfcnvrt@ap:
  4628  0026                     FLASH_WriteBlock@blockStartAddr:	
  4629                           ; 1 bytes @ 0x6
  4630                           
  4631                           
  4632                           ; 2 bytes @ 0x6
  4633  0026                     	ds	1
  4634  0027                     ??_vfpfcnvrt:
  4635                           
  4636                           ; 1 bytes @ 0x7
  4637  0027                     	ds	1
  4638  0028                     ?___aldiv:
  4639  0028                     FLASH_WriteBlock@GIEBitValue:	
  4640                           ; 4 bytes @ 0x8
  4641                           
  4642  0028                     ___aldiv@divisor:	
  4643                           ; 1 bytes @ 0x8
  4644                           
  4645                           
  4646                           ; 4 bytes @ 0x8
  4647  0028                     	ds	1
  4648  0029                     FLASH_WriteBlock@i:
  4649                           
  4650                           ; 1 bytes @ 0x9
  4651  0029                     	ds	1
  4652  002A                     ??_writePersistentState:
  4653                           
  4654                           ; 1 bytes @ 0xA
  4655  002A                     	ds	2
  4656  002C                     vfpfcnvrt@fp:
  4657  002C                     ___aldiv@dividend:	
  4658                           ; 1 bytes @ 0xC
  4659                           
  4660                           
  4661                           ; 4 bytes @ 0xC
  4662  002C                     	ds	1
  4663  002D                     ?_vfprintf:
  4664  002D                     vfprintf@fmt:	
  4665                           ; 2 bytes @ 0xD
  4666                           
  4667                           
  4668                           ; 2 bytes @ 0xD
  4669  002D                     	ds	1
  4670  002E                     writePersistentState@buf:
  4671                           
  4672                           ; 64 bytes @ 0xE
  4673  002E                     	ds	1
  4674  002F                     vfprintf@ap:
  4675                           
  4676                           ; 1 bytes @ 0xF
  4677  002F                     	ds	1
  4678  0030                     ??_vfprintf:
  4679  0030                     ??___aldiv:	
  4680                           ; 1 bytes @ 0x10
  4681                           
  4682                           
  4683                           ; 1 bytes @ 0x10
  4684  0030                     	ds	1
  4685  0031                     ___aldiv@counter:
  4686                           
  4687                           ; 1 bytes @ 0x11
  4688  0031                     	ds	1
  4689  0032                     ___aldiv@sign:
  4690  0032                     vfprintf@fp:	
  4691                           ; 1 bytes @ 0x12
  4692                           
  4693                           
  4694                           ; 1 bytes @ 0x12
  4695  0032                     	ds	1
  4696  0033                     vfprintf@cfmt:
  4697  0033                     ___aldiv@quotient:	
  4698                           ; 2 bytes @ 0x13
  4699                           
  4700                           
  4701                           ; 4 bytes @ 0x13
  4702  0033                     	ds	2
  4703  0035                     ?_printf:
  4704  0035                     printf@fmt:	
  4705                           ; 2 bytes @ 0x15
  4706                           
  4707                           
  4708                           ; 2 bytes @ 0x15
  4709  0035                     	ds	2
  4710  0037                     ??_printf:
  4711  0037                     ?_setFrequency:	
  4712                           ; 1 bytes @ 0x17
  4713                           
  4714  0037                     ?_battery_voltage:	
  4715                           ; 1 bytes @ 0x17
  4716                           
  4717  0037                     setFrequency@frequency_hz:	
  4718                           ; 2 bytes @ 0x17
  4719                           
  4720                           
  4721                           ; 2 bytes @ 0x17
  4722  0037                     	ds	1
  4723  0038                     printf@ap:
  4724                           
  4725                           ; 1 bytes @ 0x18
  4726  0038                     	ds	1
  4727  0039                     ??_selectFrequency:
  4728  0039                     ??_selectCurrent:	
  4729                           ; 1 bytes @ 0x19
  4730                           
  4731  0039                     ??_selectIncrease:	
  4732                           ; 1 bytes @ 0x19
  4733                           
  4734  0039                     ??_selectDecrease:	
  4735                           ; 1 bytes @ 0x19
  4736                           
  4737  0039                     ??_selectCurrentValue:	
  4738                           ; 1 bytes @ 0x19
  4739                           
  4740  0039                     ??_selectFrequencyValue:	
  4741                           ; 1 bytes @ 0x19
  4742                           
  4743  0039                     ?_setCurrent:	
  4744                           ; 1 bytes @ 0x19
  4745                           
  4746  0039                     ??_setFrequency:	
  4747                           ; 1 bytes @ 0x19
  4748                           
  4749  0039                     setCurrent@microamps:	
  4750                           ; 1 bytes @ 0x19
  4751                           
  4752                           
  4753                           ; 2 bytes @ 0x19
  4754  0039                     	ds	1
  4755  003A                     setFrequency@PR4_val:
  4756                           
  4757                           ; 2 bytes @ 0x1A
  4758  003A                     	ds	1
  4759  003B                     setCurrent@Vdd_mv:
  4760                           
  4761                           ; 2 bytes @ 0x1B
  4762  003B                     	ds	2
  4763  003D                     ??_setCurrent:
  4764                           
  4765                           ; 1 bytes @ 0x1D
  4766  003D                     	ds	8
  4767  0045                     setCurrent@Vdac_mv:
  4768                           
  4769                           ; 2 bytes @ 0x25
  4770  0045                     	ds	2
  4771  0047                     setCurrent@DACValue:
  4772                           
  4773                           ; 2 bytes @ 0x27
  4774  0047                     	ds	39
  4775  006E                     writePersistentState@i:
  4776                           
  4777                           ; 1 bytes @ 0x4E
  4778  006E                     	ds	1
  4779  006F                     writePersistentState@idx:
  4780                           
  4781                           ; 1 bytes @ 0x4F
  4782  006F                     	ds	1
  4783                           
  4784                           	psect	maintext
  4785  0464                     __pmaintext:	
  4786 ;;
  4787 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4788 ;;
  4789 ;; *************** function _main *****************
  4790 ;; Defined at:
  4791 ;;		line 598 in file "main.c"
  4792 ;; Parameters:    Size  Location     Type
  4793 ;;		None
  4794 ;; Auto vars:     Size  Location     Type
  4795 ;;  batt_mv         2    6[BANK1 ] short 
  4796 ;;  low_reading_    2    4[BANK1 ] short 
  4797 ;; Return value:  Size  Location     Type
  4798 ;;                  1    wreg      void 
  4799 ;; Registers used:
  4800 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4801 ;; Tracked objects:
  4802 ;;		On entry : B1F/0
  4803 ;;		On exit  : 0/0
  4804 ;;		Unchanged: 0/0
  4805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4806 ;;      Params:         0       0       0       0       0       0       0       0
  4807 ;;      Locals:         0       0       4       0       0       0       0       0
  4808 ;;      Temps:          0       0       1       0       0       0       0       0
  4809 ;;      Totals:         0       0       5       0       0       0       0       0
  4810 ;;Total ram usage:        5 bytes
  4811 ;; Hardware stack levels required when called: 12
  4812 ;; This function calls:
  4813 ;;		_DAC_Initialize
  4814 ;;		_LATCH_Initialize
  4815 ;;		_OPA1_Initialize
  4816 ;;		_OPA2_Initialize
  4817 ;;		_SYSTEM_Initialize
  4818 ;;		_battery_voltage
  4819 ;;		_initLED
  4820 ;;		_lowBattery
  4821 ;;		_process_remote_command
  4822 ;;		_readPersistentState
  4823 ;;		_setCurrent
  4824 ;;		_setFrequency
  4825 ;;		_startUp
  4826 ;; This function is called by:
  4827 ;;		Startup code after reset
  4828 ;; This function uses a non-reentrant model
  4829 ;;
  4830                           
  4831                           
  4832                           ;psect for function _main
  4833  0464                     _main:
  4834  0464                     l4342:	
  4835                           ;incstack = 0
  4836                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4837                           
  4838                           
  4839                           ;main.c: 600:   SYSTEM_Initialize();
  4840  0464  318C  249F  3184   	fcall	_SYSTEM_Initialize
  4841  0467                     l4344:
  4842                           
  4843                           ;main.c: 601:   LATCH_Initialize();
  4844  0467  318B  2330  3184   	fcall	_LATCH_Initialize
  4845  046A                     l4346:
  4846                           
  4847                           ;main.c: 602:   DAC_Initialize();
  4848  046A  318A  22CA  3184   	fcall	_DAC_Initialize
  4849  046D                     l4348:
  4850                           
  4851                           ;main.c: 603:   OPA1_Initialize();
  4852  046D  318A  22B3  3184   	fcall	_OPA1_Initialize
  4853  0470                     l4350:
  4854                           
  4855                           ;main.c: 604:   OPA2_Initialize();
  4856  0470  318A  22B7  3184   	fcall	_OPA2_Initialize
  4857  0473                     l4352:
  4858                           
  4859                           ;main.c: 605:   initLED();
  4860  0473  3187  27A6  3184   	fcall	_initLED
  4861  0476                     l4354:
  4862                           
  4863                           ;main.c: 610:   readPersistentState();
  4864  0476  318C  243B  3184   	fcall	_readPersistentState
  4865  0479                     l4356:
  4866                           
  4867                           ;main.c: 611:   setCurrent(currentValue[currentIndex], battery_voltage());
  4868  0479  0021               	movlb	1	; select bank1
  4869  047A  3566               	lslf	_currentIndex^(0+128),w
  4870  047B  3EC0               	addlw	(low (_currentValue| 0))& (0+255)
  4871  047C  0086               	movwf	6
  4872  047D  0187               	clrf	7
  4873  047E  3F40               	moviw [0]fsr1
  4874  047F  0020               	movlb	0	; select bank0
  4875  0480  00B9               	movwf	setCurrent@microamps
  4876  0481  3F41               	moviw [1]fsr1
  4877  0482  00BA               	movwf	setCurrent@microamps+1
  4878  0483  318E  2646  3184   	fcall	_battery_voltage
  4879  0486  0020               	movlb	0	; select bank0
  4880  0487  0838               	movf	?_battery_voltage+1,w
  4881  0488  00BC               	movwf	setCurrent@Vdd_mv+1
  4882  0489  0837               	movf	?_battery_voltage,w
  4883  048A  00BB               	movwf	setCurrent@Vdd_mv
  4884  048B  3183  23BD  3184   	fcall	_setCurrent
  4885  048E                     l4358:
  4886                           
  4887                           ;main.c: 612:   setFrequency(frequencyValue[frequencyIndex]);
  4888  048E  0021               	movlb	1	; select bank1
  4889  048F  3564               	lslf	_frequencyIndex^(0+128),w
  4890  0490  3E40               	addlw	(low (_frequencyValue| (0+256)))& (0+255)
  4891  0491  0086               	movwf	6
  4892  0492  3001               	movlw	1	; select bank2/3
  4893  0493  0087               	movwf	7
  4894  0494  3F40               	moviw [0]fsr1
  4895  0495  0020               	movlb	0	; select bank0
  4896  0496  00B7               	movwf	setFrequency@frequency_hz
  4897  0497  3F41               	moviw [1]fsr1
  4898  0498  00B8               	movwf	setFrequency@frequency_hz+1
  4899  0499  3186  26E0  3184   	fcall	_setFrequency
  4900  049C                     l4360:
  4901                           
  4902                           ;main.c: 614:   (INTCONbits.GIE = 1);
  4903  049C  178B               	bsf	11,7	;volatile
  4904  049D                     l4362:
  4905                           
  4906                           ;main.c: 615:   (INTCONbits.PEIE = 1);
  4907  049D  170B               	bsf	11,6	;volatile
  4908  049E                     l4364:
  4909                           
  4910                           ;main.c: 616:   startUp();
  4911  049E  318E  26AD  3184   	fcall	_startUp
  4912  04A1                     l4366:
  4913                           
  4914                           ;main.c: 618:   const int16_t BATTERY_NUM_LOW_READINGS = 10000;;main.c: 619:   int16_t l
      +                          ow_reading_count = 0;
  4915  04A1  0021               	movlb	1	; select bank1
  4916  04A2  01EC               	clrf	main@low_reading_count^(0+128)
  4917  04A3  01ED               	clrf	(main@low_reading_count+1)^(0+128)
  4918  04A4                     l4368:
  4919                           
  4920                           ;main.c: 624:     int16_t batt_mv = battery_voltage();
  4921  04A4  318E  2646  3184   	fcall	_battery_voltage
  4922  04A7  0020               	movlb	0	; select bank0
  4923  04A8  0838               	movf	?_battery_voltage+1,w
  4924  04A9  0021               	movlb	1	; select bank1
  4925  04AA  00EF               	movwf	(main@batt_mv+1)^(0+128)
  4926  04AB  0020               	movlb	0	; select bank0
  4927  04AC  0837               	movf	?_battery_voltage,w
  4928  04AD  0021               	movlb	1	; select bank1
  4929  04AE  00EE               	movwf	main@batt_mv^(0+128)
  4930  04AF                     l4370:
  4931                           
  4932                           ;main.c: 625:     const int16_t BATTERY_THRESHOLD = 2000;;main.c: 627:     if (batt_mv <
      +                           BATTERY_THRESHOLD)
  4933  04AF  086F               	movf	(main@batt_mv+1)^(0+128),w
  4934  04B0  3A80               	xorlw	128
  4935  04B1  00EB               	movwf	??_main^(0+128)
  4936  04B2  3087               	movlw	135
  4937  04B3  026B               	subwf	??_main^(0+128),w
  4938  04B4  1D03               	skipz
  4939  04B5  2CB8               	goto	u3005
  4940  04B6  30D0               	movlw	208
  4941  04B7  026E               	subwf	main@batt_mv^(0+128),w
  4942  04B8                     u3005:
  4943  04B8  1803               	skipnc
  4944  04B9  2CBB               	goto	u3001
  4945  04BA  2CBC               	goto	u3000
  4946  04BB                     u3001:
  4947  04BB  2CC2               	goto	l4374
  4948  04BC                     u3000:
  4949  04BC                     l4372:
  4950                           
  4951                           ;main.c: 628:     {;main.c: 629:         low_reading_count++;
  4952  04BC  3001               	movlw	1
  4953  04BD  0021               	movlb	1	; select bank1
  4954  04BE  07EC               	addwf	main@low_reading_count^(0+128),f
  4955  04BF  3000               	movlw	0
  4956  04C0  3DED               	addwfc	(main@low_reading_count+1)^(0+128),f
  4957                           
  4958                           ;main.c: 632:     } else {
  4959  04C1  2CC5               	goto	l4376
  4960  04C2                     l4374:
  4961                           
  4962                           ;main.c: 633:         low_reading_count = 0;
  4963  04C2  0021               	movlb	1	; select bank1
  4964  04C3  01EC               	clrf	main@low_reading_count^(0+128)
  4965  04C4  01ED               	clrf	(main@low_reading_count+1)^(0+128)
  4966  04C5                     l4376:
  4967                           
  4968                           ;main.c: 636:     if (low_reading_count > BATTERY_NUM_LOW_READINGS)
  4969  04C5  086D               	movf	(main@low_reading_count+1)^(0+128),w
  4970  04C6  3A80               	xorlw	128
  4971  04C7  00EB               	movwf	??_main^(0+128)
  4972  04C8  30A7               	movlw	167
  4973  04C9  026B               	subwf	??_main^(0+128),w
  4974  04CA  1D03               	skipz
  4975  04CB  2CCE               	goto	u3015
  4976  04CC  3011               	movlw	17
  4977  04CD  026C               	subwf	main@low_reading_count^(0+128),w
  4978  04CE                     u3015:
  4979  04CE  1C03               	skipc
  4980  04CF  2CD1               	goto	u3011
  4981  04D0  2CD2               	goto	u3010
  4982  04D1                     u3011:
  4983  04D1  2CD5               	goto	l4380
  4984  04D2                     u3010:
  4985  04D2                     l4378:
  4986                           
  4987                           ;main.c: 637:     {;main.c: 638:         lowBattery();
  4988  04D2  318D  25B6  3184   	fcall	_lowBattery
  4989  04D5                     l4380:
  4990                           
  4991                           ;main.c: 643:     setCurrent(currentValue[currentIndex], batt_mv);
  4992  04D5  0021               	movlb	1	; select bank1
  4993  04D6  3566               	lslf	_currentIndex^(0+128),w
  4994  04D7  3EC0               	addlw	(low (_currentValue| 0))& (0+255)
  4995  04D8  0086               	movwf	6
  4996  04D9  0187               	clrf	7
  4997  04DA  3F40               	moviw [0]fsr1
  4998  04DB  0020               	movlb	0	; select bank0
  4999  04DC  00B9               	movwf	setCurrent@microamps
  5000  04DD  3F41               	moviw [1]fsr1
  5001  04DE  00BA               	movwf	setCurrent@microamps+1
  5002  04DF  0021               	movlb	1	; select bank1
  5003  04E0  086F               	movf	(main@batt_mv+1)^(0+128),w
  5004  04E1  0020               	movlb	0	; select bank0
  5005  04E2  00BC               	movwf	setCurrent@Vdd_mv+1
  5006  04E3  0021               	movlb	1	; select bank1
  5007  04E4  086E               	movf	main@batt_mv^(0+128),w
  5008  04E5  0020               	movlb	0	; select bank0
  5009  04E6  00BB               	movwf	setCurrent@Vdd_mv
  5010  04E7  3183  23BD  3184   	fcall	_setCurrent
  5011  04EA                     l4382:
  5012                           
  5013                           ;main.c: 650:     if (STATE_DONE == ir_code.state){
  5014  04EA  3002               	movlw	2
  5015  04EB  0021               	movlb	1	; select bank1
  5016  04EC  0635               	xorwf	(_ir_code^(0+128)+1),w
  5017  04ED  1D03               	btfss	3,2
  5018  04EE  2CF0               	goto	u3021
  5019  04EF  2CF1               	goto	u3020
  5020  04F0                     u3021:
  5021  04F0  2CA4               	goto	l4368
  5022  04F1                     u3020:
  5023  04F1                     l4384:
  5024                           
  5025                           ;main.c: 668:       process_remote_command(&ir_code);
  5026  04F1  30B4               	movlw	(low (_ir_code| 0))& (0+255)
  5027  04F2  3180  2087  3184   	fcall	_process_remote_command
  5028  04F5                     l4386:
  5029                           
  5030                           ;main.c: 671:       ir_code.state = STATE_RESET;
  5031  04F5  0021               	movlb	1	; select bank1
  5032  04F6  01B5               	clrf	(_ir_code^(0+128)+1)
  5033  04F7  2CA4               	goto	l4368
  5034  04F8  3180  284B         	ljmp	start
  5035  04FA                     __end_of_main:
  5036                           
  5037                           	psect	text1
  5038  0EAD                     __ptext1:	
  5039 ;; *************** function _startUp *****************
  5040 ;; Defined at:
  5041 ;;		line 253 in file "main.c"
  5042 ;; Parameters:    Size  Location     Type
  5043 ;;		None
  5044 ;; Auto vars:     Size  Location     Type
  5045 ;;  i               2    2[BANK0 ] int 
  5046 ;; Return value:  Size  Location     Type
  5047 ;;                  1    wreg      void 
  5048 ;; Registers used:
  5049 ;;		wreg, status,2, status,0, pclath, cstack
  5050 ;; Tracked objects:
  5051 ;;		On entry : 0/0
  5052 ;;		On exit  : 0/0
  5053 ;;		Unchanged: 0/0
  5054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5055 ;;      Params:         0       0       0       0       0       0       0       0
  5056 ;;      Locals:         0       2       0       0       0       0       0       0
  5057 ;;      Temps:          0       2       0       0       0       0       0       0
  5058 ;;      Totals:         0       4       0       0       0       0       0       0
  5059 ;;Total ram usage:        4 bytes
  5060 ;; Hardware stack levels used: 1
  5061 ;; Hardware stack levels required when called: 5
  5062 ;; This function calls:
  5063 ;;		_setLEDColor
  5064 ;; This function is called by:
  5065 ;;		_main
  5066 ;; This function uses a non-reentrant model
  5067 ;;
  5068                           
  5069                           
  5070                           ;psect for function _startUp
  5071  0EAD                     _startUp:
  5072  0EAD                     l4064:	
  5073                           ;incstack = 0
  5074                           ; Regs used in _startUp: [wreg+status,2+status,0+pclath+cstack]
  5075                           
  5076                           
  5077                           ;main.c: 254:   interfaceState = STATE_RUNNING;
  5078  0EAD  01F8               	clrf	_interfaceState
  5079                           
  5080                           ;main.c: 255:   for (int i = 0; i < 5; i++){
  5081  0EAE  0020               	movlb	0	; select bank0
  5082  0EAF  01A2               	clrf	startUp@i
  5083  0EB0  01A3               	clrf	startUp@i+1
  5084  0EB1                     l4070:
  5085                           
  5086                           ;main.c: 256:     setLEDColor(0, 180, 230);
  5087  0EB1  30B4               	movlw	180
  5088  0EB2  0020               	movlb	0	; select bank0
  5089  0EB3  00A0               	movwf	??_startUp
  5090  0EB4  0820               	movf	??_startUp,w
  5091  0EB5  00F3               	movwf	setLEDColor@green
  5092  0EB6  30E6               	movlw	230
  5093  0EB7  00A1               	movwf	??_startUp+1
  5094  0EB8  0821               	movf	??_startUp+1,w
  5095  0EB9  00F4               	movwf	setLEDColor@blue
  5096  0EBA  3000               	movlw	0
  5097  0EBB  318B  23D6  318E   	fcall	_setLEDColor
  5098  0EBE                     l4072:
  5099                           
  5100                           ;main.c: 257:     _delay((unsigned long)((100)*(4000000/4000.0)));
  5101  0EBE  3082               	movlw	130
  5102  0EBF  0020               	movlb	0	; select bank0
  5103  0EC0  00A0               	movwf	??_startUp
  5104  0EC1  30DD               	movlw	221
  5105  0EC2                     u3037:
  5106  0EC2  0B89               	decfsz	9,f
  5107  0EC3  2EC2               	goto	u3037
  5108  0EC4  0BA0               	decfsz	??_startUp,f
  5109  0EC5  2EC2               	goto	u3037
  5110  0EC6  3200               	nop2
  5111  0EC7                     l4074:
  5112                           
  5113                           ;main.c: 258:     setLEDColor(0, 0, 0);
  5114  0EC7  01F3               	clrf	setLEDColor@green
  5115  0EC8  01F4               	clrf	setLEDColor@blue
  5116  0EC9  3000               	movlw	0
  5117  0ECA  318B  23D6  318E   	fcall	_setLEDColor
  5118                           
  5119                           ;main.c: 259:     _delay((unsigned long)((100)*(4000000/4000.0)));
  5120  0ECD  3082               	movlw	130
  5121  0ECE  0020               	movlb	0	; select bank0
  5122  0ECF  00A0               	movwf	??_startUp
  5123  0ED0  30DD               	movlw	221
  5124  0ED1                     u3047:
  5125  0ED1  0B89               	decfsz	9,f
  5126  0ED2  2ED1               	goto	u3047
  5127  0ED3  0BA0               	decfsz	??_startUp,f
  5128  0ED4  2ED1               	goto	u3047
  5129  0ED5  3200               	nop2
  5130                           
  5131                           ;main.c: 260:   }
  5132  0ED6  3001               	movlw	1
  5133  0ED7  0020               	movlb	0	; select bank0
  5134  0ED8  07A2               	addwf	startUp@i,f
  5135  0ED9  3000               	movlw	0
  5136  0EDA  3DA3               	addwfc	startUp@i+1,f
  5137  0EDB  0823               	movf	startUp@i+1,w
  5138  0EDC  3A80               	xorlw	128
  5139  0EDD  00A0               	movwf	??_startUp
  5140  0EDE  3080               	movlw	128
  5141  0EDF  0220               	subwf	??_startUp,w
  5142  0EE0  1D03               	skipz
  5143  0EE1  2EE4               	goto	u2685
  5144  0EE2  3005               	movlw	5
  5145  0EE3  0222               	subwf	startUp@i,w
  5146  0EE4                     u2685:
  5147  0EE4  1C03               	skipc
  5148  0EE5  2EE7               	goto	u2681
  5149  0EE6  2EE8               	goto	u2680
  5150  0EE7                     u2681:
  5151  0EE7  2EB1               	goto	l4070
  5152  0EE8                     u2680:
  5153  0EE8                     l658:
  5154  0EE8  0008               	return
  5155  0EE9                     __end_of_startUp:
  5156                           
  5157                           	psect	text2
  5158  0C3B                     __ptext2:	
  5159 ;; *************** function _readPersistentState *****************
  5160 ;; Defined at:
  5161 ;;		line 115 in file "main.c"
  5162 ;; Parameters:    Size  Location     Type
  5163 ;;		None
  5164 ;; Auto vars:     Size  Location     Type
  5165 ;;		None
  5166 ;; Return value:  Size  Location     Type
  5167 ;;                  1    wreg      void 
  5168 ;; Registers used:
  5169 ;;		wreg, fsr0l, fsr0h, pclath
  5170 ;; Tracked objects:
  5171 ;;		On entry : 0/0
  5172 ;;		On exit  : 0/0
  5173 ;;		Unchanged: 0/0
  5174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5175 ;;      Params:         0       0       0       0       0       0       0       0
  5176 ;;      Locals:         0       0       0       0       0       0       0       0
  5177 ;;      Temps:          2       0       0       0       0       0       0       0
  5178 ;;      Totals:         2       0       0       0       0       0       0       0
  5179 ;;Total ram usage:        2 bytes
  5180 ;; Hardware stack levels used: 1
  5181 ;; Hardware stack levels required when called: 4
  5182 ;; This function calls:
  5183 ;;		Nothing
  5184 ;; This function is called by:
  5185 ;;		_main
  5186 ;; This function uses a non-reentrant model
  5187 ;;
  5188                           
  5189                           
  5190                           ;psect for function _readPersistentState
  5191  0C3B                     _readPersistentState:
  5192  0C3B                     l3216:	
  5193                           ;incstack = 0
  5194                           ; Regs used in _readPersistentState: [wreg-fsr0h+pclath]
  5195                           
  5196                           
  5197                           ;main.c: 117:   currentIndex = HEF_persistent_state.currentIndex;
  5198  0C3B  30E0               	movlw	224
  5199  0C3C  0084               	movwf	4
  5200  0C3D  308F               	movlw	143
  5201  0C3E  0085               	movwf	5
  5202  0C3F  0800               	movf	0,w	;code access
  5203  0C40  00F3               	movwf	??_readPersistentState
  5204  0C41  01F4               	clrf	??_readPersistentState+1
  5205  0C42  0873               	movf	??_readPersistentState,w
  5206  0C43  0021               	movlb	1	; select bank1
  5207  0C44  00E6               	movwf	_currentIndex^(0+128)
  5208  0C45  0874               	movf	??_readPersistentState+1,w
  5209  0C46  00E7               	movwf	(_currentIndex+1)^(0+128)
  5210                           
  5211                           ;main.c: 118:   frequencyIndex = HEF_persistent_state.frequencyIndex;
  5212  0C47  30E1               	movlw	225
  5213  0C48  0084               	movwf	4
  5214  0C49  308F               	movlw	143
  5215  0C4A  0085               	movwf	5
  5216  0C4B  0800               	movf	0,w	;code access
  5217  0C4C  00F3               	movwf	??_readPersistentState
  5218  0C4D  01F4               	clrf	??_readPersistentState+1
  5219  0C4E  0873               	movf	??_readPersistentState,w
  5220  0C4F  00E4               	movwf	_frequencyIndex^(0+128)
  5221  0C50  0874               	movf	??_readPersistentState+1,w
  5222  0C51  00E5               	movwf	(_frequencyIndex+1)^(0+128)
  5223                           
  5224                           ;main.c: 119:   dc_frequency_flag = HEF_persistent_state.dc_frequency_flag;
  5225  0C52  30E2               	movlw	226
  5226  0C53  0084               	movwf	4
  5227  0C54  308F               	movlw	143
  5228  0C55  0085               	movwf	5
  5229  0C56  0800               	movf	0,w	;code access
  5230  0C57  00F3               	movwf	??_readPersistentState
  5231  0C58  0873               	movf	??_readPersistentState,w
  5232  0C59  00FA               	movwf	_dc_frequency_flag
  5233  0C5A                     l628:
  5234  0C5A  0008               	return
  5235  0C5B                     __end_of_readPersistentState:
  5236                           
  5237                           	psect	text3
  5238  0087                     __ptext3:	
  5239 ;; *************** function _process_remote_command *****************
  5240 ;; Defined at:
  5241 ;;		line 383 in file "main.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;  code            1    wreg     PTR struct .
  5244 ;;		 -> ir_code(6), 
  5245 ;; Auto vars:     Size  Location     Type
  5246 ;;  code            1    2[BANK1 ] PTR struct .
  5247 ;;		 -> ir_code(6), 
  5248 ;; Return value:  Size  Location     Type
  5249 ;;                  1    wreg      void 
  5250 ;; Registers used:
  5251 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5252 ;; Tracked objects:
  5253 ;;		On entry : 0/0
  5254 ;;		On exit  : 0/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5257 ;;      Params:         0       0       0       0       0       0       0       0
  5258 ;;      Locals:         0       0       1       0       0       0       0       0
  5259 ;;      Temps:          0       0       2       0       0       0       0       0
  5260 ;;      Totals:         0       0       3       0       0       0       0       0
  5261 ;;Total ram usage:        3 bytes
  5262 ;; Hardware stack levels used: 1
  5263 ;; Hardware stack levels required when called: 11
  5264 ;; This function calls:
  5265 ;;		_battery_voltage
  5266 ;;		_selectCurrent
  5267 ;;		_selectCurrentValue
  5268 ;;		_selectDecrease
  5269 ;;		_selectFrequency
  5270 ;;		_selectFrequencyValue
  5271 ;;		_selectIncrease
  5272 ;;		_selectSomething
  5273 ;;		_setCurrent
  5274 ;;		_setFrequency
  5275 ;;		_setLEDColor
  5276 ;;		_writePersistentState
  5277 ;; This function is called by:
  5278 ;;		_main
  5279 ;; This function uses a non-reentrant model
  5280 ;;
  5281                           
  5282                           
  5283                           ;psect for function _process_remote_command
  5284  0087                     _process_remote_command:
  5285                           
  5286                           ;incstack = 0
  5287                           ; Regs used in _process_remote_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5288                           ;process_remote_command@code stored from wreg
  5289  0087  0021               	movlb	1	; select bank1
  5290  0088  00EA               	movwf	process_remote_command@code^(0+128)
  5291  0089                     l4076:
  5292                           
  5293                           ;main.c: 384:   setLEDColor(0, 0, 0);
  5294  0089  01F3               	clrf	setLEDColor@green
  5295  008A  01F4               	clrf	setLEDColor@blue
  5296  008B  3000               	movlw	0
  5297  008C  318B  23D6  3180   	fcall	_setLEDColor
  5298                           
  5299                           ;main.c: 386:   switch(code->command){
  5300  008F  2B6D               	goto	l4304
  5301  0090                     l4078:
  5302                           
  5303                           ;main.c: 388:     if(STATE_CURRENT == interfaceState){
  5304  0090  0378               	decf	_interfaceState,w
  5305  0091  1D03               	btfss	3,2
  5306  0092  2894               	goto	u2691
  5307  0093  2895               	goto	u2690
  5308  0094                     u2691:
  5309  0094  28CA               	goto	l4092
  5310  0095                     u2690:
  5311  0095                     l4080:
  5312                           
  5313                           ;main.c: 389:       currentIndex++;
  5314  0095  3001               	movlw	1
  5315  0096  07E6               	addwf	_currentIndex^(0+128),f
  5316  0097  3000               	movlw	0
  5317  0098  3DE7               	addwfc	(_currentIndex+1)^(0+128),f
  5318                           
  5319                           ;main.c: 390:       if (currentIndex > maxCurrentIndex - 1)
  5320  0099  0867               	movf	(_currentIndex+1)^(0+128),w
  5321  009A  3A80               	xorlw	128
  5322  009B  00E8               	movwf	??_process_remote_command^(0+128)
  5323  009C  3080               	movlw	128
  5324  009D  0268               	subwf	??_process_remote_command^(0+128),w
  5325  009E  1D03               	skipz
  5326  009F  28A2               	goto	u2705
  5327  00A0  300A               	movlw	10
  5328  00A1  0266               	subwf	_currentIndex^(0+128),w
  5329  00A2                     u2705:
  5330  00A2  1C03               	skipc
  5331  00A3  28A5               	goto	u2701
  5332  00A4  28A6               	goto	u2700
  5333  00A5                     u2701:
  5334  00A5  28AF               	goto	l4086
  5335  00A6                     u2700:
  5336  00A6                     l4082:
  5337                           
  5338                           ;main.c: 391:       {;main.c: 392:         currentIndex = maxCurrentIndex - 1;
  5339  00A6  3009               	movlw	9
  5340  00A7  0021               	movlb	1	; select bank1
  5341  00A8  00E6               	movwf	_currentIndex^(0+128)
  5342  00A9  3000               	movlw	0
  5343  00AA  00E7               	movwf	(_currentIndex^(0+128)+1)
  5344  00AB                     l4084:
  5345                           
  5346                           ;main.c: 393:         selectSomething();
  5347  00AB  318F  2729  3180   	fcall	_selectSomething
  5348                           
  5349                           ;main.c: 394:       } else {
  5350  00AE  28B2               	goto	l4088
  5351  00AF                     l4086:
  5352                           
  5353                           ;main.c: 395:         selectIncrease();
  5354  00AF  318C  24C4  3180   	fcall	_selectIncrease
  5355  00B2                     l4088:
  5356                           
  5357                           ;main.c: 397:       setCurrent(currentValue[currentIndex], battery_voltage());
  5358  00B2  0021               	movlb	1	; select bank1
  5359  00B3  3566               	lslf	_currentIndex^(0+128),w
  5360  00B4  3EC0               	addlw	(low (_currentValue| 0))& (0+255)
  5361  00B5  0086               	movwf	6
  5362  00B6  0187               	clrf	7
  5363  00B7  3F40               	moviw [0]fsr1
  5364  00B8  0020               	movlb	0	; select bank0
  5365  00B9  00B9               	movwf	setCurrent@microamps
  5366  00BA  3F41               	moviw [1]fsr1
  5367  00BB  00BA               	movwf	setCurrent@microamps+1
  5368  00BC  318E  2646  3180   	fcall	_battery_voltage
  5369  00BF  0020               	movlb	0	; select bank0
  5370  00C0  0838               	movf	?_battery_voltage+1,w
  5371  00C1  00BC               	movwf	setCurrent@Vdd_mv+1
  5372  00C2  0837               	movf	?_battery_voltage,w
  5373  00C3  00BB               	movwf	setCurrent@Vdd_mv
  5374  00C4  3183  23BD  3180   	fcall	_setCurrent
  5375  00C7                     l4090:
  5376                           
  5377                           ;main.c: 398:       writePersistentState();
  5378  00C7  318F  2784  3180   	fcall	_writePersistentState
  5379  00CA                     l4092:
  5380                           
  5381                           ;main.c: 400:     if(STATE_FREQUENCY == interfaceState){
  5382  00CA  3002               	movlw	2
  5383  00CB  0678               	xorwf	_interfaceState,w
  5384  00CC  1D03               	btfss	3,2
  5385  00CD  28CF               	goto	u2711
  5386  00CE  28D0               	goto	u2710
  5387  00CF                     u2711:
  5388  00CF  28FF               	goto	l4106
  5389  00D0                     u2710:
  5390  00D0                     l4094:
  5391                           
  5392                           ;main.c: 401:       frequencyIndex++;
  5393  00D0  3001               	movlw	1
  5394  00D1  0021               	movlb	1	; select bank1
  5395  00D2  07E4               	addwf	_frequencyIndex^(0+128),f
  5396  00D3  3000               	movlw	0
  5397  00D4  3DE5               	addwfc	(_frequencyIndex+1)^(0+128),f
  5398                           
  5399                           ;main.c: 402:       if (frequencyIndex > maxFrequencyIndex - 1)
  5400  00D5  0865               	movf	(_frequencyIndex+1)^(0+128),w
  5401  00D6  3A80               	xorlw	128
  5402  00D7  00E8               	movwf	??_process_remote_command^(0+128)
  5403  00D8  3080               	movlw	128
  5404  00D9  0268               	subwf	??_process_remote_command^(0+128),w
  5405  00DA  1D03               	skipz
  5406  00DB  28DE               	goto	u2725
  5407  00DC  300A               	movlw	10
  5408  00DD  0264               	subwf	_frequencyIndex^(0+128),w
  5409  00DE                     u2725:
  5410  00DE  1C03               	skipc
  5411  00DF  28E1               	goto	u2721
  5412  00E0  28E2               	goto	u2720
  5413  00E1                     u2721:
  5414  00E1  28EB               	goto	l4100
  5415  00E2                     u2720:
  5416  00E2                     l4096:
  5417                           
  5418                           ;main.c: 403:       {;main.c: 404:         frequencyIndex = maxFrequencyIndex - 1;
  5419  00E2  3009               	movlw	9
  5420  00E3  0021               	movlb	1	; select bank1
  5421  00E4  00E4               	movwf	_frequencyIndex^(0+128)
  5422  00E5  3000               	movlw	0
  5423  00E6  00E5               	movwf	(_frequencyIndex^(0+128)+1)
  5424  00E7                     l4098:
  5425                           
  5426                           ;main.c: 405:         selectSomething();
  5427  00E7  318F  2729  3180   	fcall	_selectSomething
  5428                           
  5429                           ;main.c: 406:       } else {
  5430  00EA  28EE               	goto	l4102
  5431  00EB                     l4100:
  5432                           
  5433                           ;main.c: 407:         selectIncrease();
  5434  00EB  318C  24C4  3180   	fcall	_selectIncrease
  5435  00EE                     l4102:
  5436                           
  5437                           ;main.c: 409:       setFrequency(frequencyValue[frequencyIndex]);
  5438  00EE  0021               	movlb	1	; select bank1
  5439  00EF  3564               	lslf	_frequencyIndex^(0+128),w
  5440  00F0  3E40               	addlw	(low (_frequencyValue| (0+256)))& (0+255)
  5441  00F1  0086               	movwf	6
  5442  00F2  3001               	movlw	1	; select bank2/3
  5443  00F3  0087               	movwf	7
  5444  00F4  3F40               	moviw [0]fsr1
  5445  00F5  0020               	movlb	0	; select bank0
  5446  00F6  00B7               	movwf	setFrequency@frequency_hz
  5447  00F7  3F41               	moviw [1]fsr1
  5448  00F8  00B8               	movwf	setFrequency@frequency_hz+1
  5449  00F9  3186  26E0  3180   	fcall	_setFrequency
  5450  00FC                     l4104:
  5451                           
  5452                           ;main.c: 410:       writePersistentState();
  5453  00FC  318F  2784  3180   	fcall	_writePersistentState
  5454  00FF                     l4106:
  5455                           
  5456                           ;main.c: 412:     if(STATE_RUNNING == interfaceState){
  5457  00FF  0878               	movf	_interfaceState,w
  5458  0100  1D03               	btfss	3,2
  5459  0101  2903               	goto	u2731
  5460  0102  2904               	goto	u2730
  5461  0103                     u2731:
  5462  0103  2907               	goto	l4110
  5463  0104                     u2730:
  5464  0104                     l4108:
  5465                           
  5466                           ;main.c: 413:       selectSomething();
  5467  0104  318F  2729  3180   	fcall	_selectSomething
  5468  0107                     l4110:
  5469                           
  5470                           ;main.c: 415:     if(STATE_LOWBATTERY == interfaceState){
  5471  0107  3003               	movlw	3
  5472  0108  0678               	xorwf	_interfaceState,w
  5473  0109  1D03               	btfss	3,2
  5474  010A  290C               	goto	u2741
  5475  010B  290D               	goto	u2740
  5476  010C                     u2741:
  5477  010C  2BA3               	goto	l4306
  5478  010D                     u2740:
  5479  010D                     l4112:
  5480                           
  5481                           ;main.c: 416:       selectSomething();
  5482  010D  318F  2729  3180   	fcall	_selectSomething
  5483  0110  2BA3               	goto	l4306
  5484  0111                     l4114:
  5485                           
  5486                           ;main.c: 420:     if(STATE_CURRENT == interfaceState){
  5487  0111  0378               	decf	_interfaceState,w
  5488  0112  1D03               	btfss	3,2
  5489  0113  2915               	goto	u2751
  5490  0114  2916               	goto	u2750
  5491  0115                     u2751:
  5492  0115  293F               	goto	l4130
  5493  0116                     u2750:
  5494  0116                     l4116:
  5495                           
  5496                           ;main.c: 421:       currentIndex--;
  5497  0116  30FF               	movlw	255
  5498  0117  07E6               	addwf	_currentIndex^(0+128),f
  5499  0118  30FF               	movlw	255
  5500  0119  3DE7               	addwfc	(_currentIndex+1)^(0+128),f
  5501  011A                     l4118:
  5502                           
  5503                           ;main.c: 422:       if (currentIndex < 0)
  5504  011A  1FE7               	btfss	(_currentIndex+1)^(0+128),7
  5505  011B  291D               	goto	u2761
  5506  011C  291E               	goto	u2760
  5507  011D                     u2761:
  5508  011D  2924               	goto	l4124
  5509  011E                     u2760:
  5510  011E                     l4120:
  5511                           
  5512                           ;main.c: 423:       {;main.c: 424:         currentIndex = 0;
  5513  011E  01E6               	clrf	_currentIndex^(0+128)
  5514  011F  01E7               	clrf	(_currentIndex+1)^(0+128)
  5515  0120                     l4122:
  5516                           
  5517                           ;main.c: 425:         selectSomething();
  5518  0120  318F  2729  3180   	fcall	_selectSomething
  5519                           
  5520                           ;main.c: 426:       } else {
  5521  0123  2927               	goto	l4126
  5522  0124                     l4124:
  5523                           
  5524                           ;main.c: 427:         selectDecrease();
  5525  0124  318C  247D  3180   	fcall	_selectDecrease
  5526  0127                     l4126:
  5527                           
  5528                           ;main.c: 429:       setCurrent(currentValue[currentIndex], battery_voltage());
  5529  0127  0021               	movlb	1	; select bank1
  5530  0128  3566               	lslf	_currentIndex^(0+128),w
  5531  0129  3EC0               	addlw	(low (_currentValue| 0))& (0+255)
  5532  012A  0086               	movwf	6
  5533  012B  0187               	clrf	7
  5534  012C  3F40               	moviw [0]fsr1
  5535  012D  0020               	movlb	0	; select bank0
  5536  012E  00B9               	movwf	setCurrent@microamps
  5537  012F  3F41               	moviw [1]fsr1
  5538  0130  00BA               	movwf	setCurrent@microamps+1
  5539  0131  318E  2646  3180   	fcall	_battery_voltage
  5540  0134  0020               	movlb	0	; select bank0
  5541  0135  0838               	movf	?_battery_voltage+1,w
  5542  0136  00BC               	movwf	setCurrent@Vdd_mv+1
  5543  0137  0837               	movf	?_battery_voltage,w
  5544  0138  00BB               	movwf	setCurrent@Vdd_mv
  5545  0139  3183  23BD  3180   	fcall	_setCurrent
  5546  013C                     l4128:
  5547                           
  5548                           ;main.c: 430:       writePersistentState();
  5549  013C  318F  2784  3180   	fcall	_writePersistentState
  5550  013F                     l4130:
  5551                           
  5552                           ;main.c: 432:     if(STATE_FREQUENCY == interfaceState){
  5553  013F  3002               	movlw	2
  5554  0140  0678               	xorwf	_interfaceState,w
  5555  0141  1D03               	btfss	3,2
  5556  0142  2944               	goto	u2771
  5557  0143  2945               	goto	u2770
  5558  0144                     u2771:
  5559  0144  2968               	goto	l4146
  5560  0145                     u2770:
  5561  0145                     l4132:
  5562                           
  5563                           ;main.c: 433:       frequencyIndex--;
  5564  0145  30FF               	movlw	255
  5565  0146  0021               	movlb	1	; select bank1
  5566  0147  07E4               	addwf	_frequencyIndex^(0+128),f
  5567  0148  30FF               	movlw	255
  5568  0149  3DE5               	addwfc	(_frequencyIndex+1)^(0+128),f
  5569  014A                     l4134:
  5570                           
  5571                           ;main.c: 434:       if (frequencyIndex < 0)
  5572  014A  1FE5               	btfss	(_frequencyIndex+1)^(0+128),7
  5573  014B  294D               	goto	u2781
  5574  014C  294E               	goto	u2780
  5575  014D                     u2781:
  5576  014D  2954               	goto	l4140
  5577  014E                     u2780:
  5578  014E                     l4136:
  5579                           
  5580                           ;main.c: 435:       {;main.c: 436:         frequencyIndex = 0;
  5581  014E  01E4               	clrf	_frequencyIndex^(0+128)
  5582  014F  01E5               	clrf	(_frequencyIndex+1)^(0+128)
  5583  0150                     l4138:
  5584                           
  5585                           ;main.c: 437:         selectSomething();
  5586  0150  318F  2729  3180   	fcall	_selectSomething
  5587                           
  5588                           ;main.c: 438:       } else {
  5589  0153  2957               	goto	l4142
  5590  0154                     l4140:
  5591                           
  5592                           ;main.c: 439:         selectDecrease();
  5593  0154  318C  247D  3180   	fcall	_selectDecrease
  5594  0157                     l4142:
  5595                           
  5596                           ;main.c: 441:       setFrequency(frequencyValue[frequencyIndex]);
  5597  0157  0021               	movlb	1	; select bank1
  5598  0158  3564               	lslf	_frequencyIndex^(0+128),w
  5599  0159  3E40               	addlw	(low (_frequencyValue| (0+256)))& (0+255)
  5600  015A  0086               	movwf	6
  5601  015B  3001               	movlw	1	; select bank2/3
  5602  015C  0087               	movwf	7
  5603  015D  3F40               	moviw [0]fsr1
  5604  015E  0020               	movlb	0	; select bank0
  5605  015F  00B7               	movwf	setFrequency@frequency_hz
  5606  0160  3F41               	moviw [1]fsr1
  5607  0161  00B8               	movwf	setFrequency@frequency_hz+1
  5608  0162  3186  26E0  3180   	fcall	_setFrequency
  5609  0165                     l4144:
  5610                           
  5611                           ;main.c: 442:       writePersistentState();
  5612  0165  318F  2784  3180   	fcall	_writePersistentState
  5613  0168                     l4146:
  5614                           
  5615                           ;main.c: 444:     if(STATE_RUNNING == interfaceState){
  5616  0168  0878               	movf	_interfaceState,w
  5617  0169  1D03               	btfss	3,2
  5618  016A  296C               	goto	u2791
  5619  016B  296D               	goto	u2790
  5620  016C                     u2791:
  5621  016C  2970               	goto	l4150
  5622  016D                     u2790:
  5623  016D                     l4148:
  5624                           
  5625                           ;main.c: 445:       selectSomething();
  5626  016D  318F  2729  3180   	fcall	_selectSomething
  5627  0170                     l4150:
  5628                           
  5629                           ;main.c: 447:     if(STATE_LOWBATTERY == interfaceState){
  5630  0170  3003               	movlw	3
  5631  0171  0678               	xorwf	_interfaceState,w
  5632  0172  1D03               	btfss	3,2
  5633  0173  2975               	goto	u2801
  5634  0174  2976               	goto	u2800
  5635  0175                     u2801:
  5636  0175  2BA3               	goto	l4306
  5637  0176                     u2800:
  5638  0176  290D               	goto	l4112
  5639  0177                     l4154:
  5640                           
  5641                           ;main.c: 452:     selectFrequency();
  5642  0177  318D  2560  3180   	fcall	_selectFrequency
  5643                           
  5644                           ;main.c: 453:     break;
  5645  017A  2BA3               	goto	l4306
  5646  017B                     l4156:
  5647                           
  5648                           ;main.c: 455:     selectCurrent();
  5649  017B  318D  250F  3180   	fcall	_selectCurrent
  5650                           
  5651                           ;main.c: 456:     break;
  5652  017E  2BA3               	goto	l4306
  5653  017F                     l4158:
  5654                           
  5655                           ;main.c: 458:        if (interfaceState == STATE_FREQUENCY){
  5656  017F  3002               	movlw	2
  5657  0180  0678               	xorwf	_interfaceState,w
  5658  0181  1D03               	btfss	3,2
  5659  0182  2984               	goto	u2811
  5660  0183  2985               	goto	u2810
  5661  0184                     u2811:
  5662  0184  2996               	goto	l4166
  5663  0185                     u2810:
  5664  0185                     l4160:
  5665                           
  5666                           ;main.c: 459:            setFrequency(frequencyValue[0]);
  5667  0185  0022               	movlb	2	; select bank2
  5668  0186  0841               	movf	(_frequencyValue+1)^(0+256),w
  5669  0187  0020               	movlb	0	; select bank0
  5670  0188  00B8               	movwf	setFrequency@frequency_hz+1
  5671  0189  0022               	movlb	2	; select bank2
  5672  018A  0840               	movf	_frequencyValue^(0+256),w
  5673  018B  0020               	movlb	0	; select bank0
  5674  018C  00B7               	movwf	setFrequency@frequency_hz
  5675  018D  3186  26E0  3180   	fcall	_setFrequency
  5676  0190                     l4162:
  5677                           
  5678                           ;main.c: 460:            frequencyIndex = 0;
  5679  0190  0021               	movlb	1	; select bank1
  5680  0191  01E4               	clrf	_frequencyIndex^(0+128)
  5681  0192  01E5               	clrf	(_frequencyIndex+1)^(0+128)
  5682  0193                     l4164:
  5683                           
  5684                           ;main.c: 461:            selectFrequencyValue();
  5685  0193  318C  24E9  3180   	fcall	_selectFrequencyValue
  5686  0196                     l4166:
  5687                           
  5688                           ;main.c: 463:        if (interfaceState == STATE_CURRENT){
  5689  0196  0378               	decf	_interfaceState,w
  5690  0197  1D03               	btfss	3,2
  5691  0198  299A               	goto	u2821
  5692  0199  299B               	goto	u2820
  5693  019A                     u2821:
  5694  019A  2BA3               	goto	l4306
  5695  019B                     u2820:
  5696  019B                     l4168:
  5697                           
  5698                           ;main.c: 464:            setCurrent(currentValue[0], battery_voltage());
  5699  019B  0021               	movlb	1	; select bank1
  5700  019C  0841               	movf	(_currentValue+1)^(0+128),w
  5701  019D  0020               	movlb	0	; select bank0
  5702  019E  00BA               	movwf	setCurrent@microamps+1
  5703  019F  0021               	movlb	1	; select bank1
  5704  01A0  0840               	movf	_currentValue^(0+128),w
  5705  01A1  0020               	movlb	0	; select bank0
  5706  01A2  00B9               	movwf	setCurrent@microamps
  5707  01A3  318E  2646  3180   	fcall	_battery_voltage
  5708  01A6  0020               	movlb	0	; select bank0
  5709  01A7  0838               	movf	?_battery_voltage+1,w
  5710  01A8  00BC               	movwf	setCurrent@Vdd_mv+1
  5711  01A9  0837               	movf	?_battery_voltage,w
  5712  01AA  00BB               	movwf	setCurrent@Vdd_mv
  5713  01AB  3183  23BD  3180   	fcall	_setCurrent
  5714  01AE                     l4170:
  5715                           
  5716                           ;main.c: 465:            currentIndex = 0;
  5717  01AE  0021               	movlb	1	; select bank1
  5718  01AF  01E6               	clrf	_currentIndex^(0+128)
  5719  01B0  01E7               	clrf	(_currentIndex+1)^(0+128)
  5720  01B1                     l4172:
  5721                           
  5722                           ;main.c: 466:            selectCurrentValue();
  5723  01B1  318D  2537  3180   	fcall	_selectCurrentValue
  5724  01B4  2BA3               	goto	l4306
  5725  01B5                     l4174:
  5726                           
  5727                           ;main.c: 473:      if (interfaceState == STATE_FREQUENCY) {
  5728  01B5  3002               	movlw	2
  5729  01B6  0678               	xorwf	_interfaceState,w
  5730  01B7  1D03               	btfss	3,2
  5731  01B8  29BA               	goto	u2831
  5732  01B9  29BB               	goto	u2830
  5733  01BA                     u2831:
  5734  01BA  29CE               	goto	l4182
  5735  01BB                     u2830:
  5736  01BB                     l4176:
  5737                           
  5738                           ;main.c: 474:          setFrequency(frequencyValue[1]);
  5739  01BB  0022               	movlb	2	; select bank2
  5740  01BC  0843               	movf	((_frequencyValue+1)^(0+256)+2),w
  5741  01BD  0020               	movlb	0	; select bank0
  5742  01BE  00B8               	movwf	setFrequency@frequency_hz+1
  5743  01BF  0022               	movlb	2	; select bank2
  5744  01C0  0842               	movf	(_frequencyValue^(0+256)+2),w
  5745  01C1  0020               	movlb	0	; select bank0
  5746  01C2  00B7               	movwf	setFrequency@frequency_hz
  5747  01C3  3186  26E0  3180   	fcall	_setFrequency
  5748  01C6                     l4178:
  5749                           
  5750                           ;main.c: 475:          frequencyIndex = 1;
  5751  01C6  3001               	movlw	1
  5752  01C7  0021               	movlb	1	; select bank1
  5753  01C8  00E4               	movwf	_frequencyIndex^(0+128)
  5754  01C9  3000               	movlw	0
  5755  01CA  00E5               	movwf	(_frequencyIndex^(0+128)+1)
  5756  01CB                     l4180:
  5757                           
  5758                           ;main.c: 476:          selectFrequencyValue();
  5759  01CB  318C  24E9  3180   	fcall	_selectFrequencyValue
  5760  01CE                     l4182:
  5761                           
  5762                           ;main.c: 478:      if (interfaceState == STATE_CURRENT) {
  5763  01CE  0378               	decf	_interfaceState,w
  5764  01CF  1D03               	btfss	3,2
  5765  01D0  29D2               	goto	u2841
  5766  01D1  29D3               	goto	u2840
  5767  01D2                     u2841:
  5768  01D2  2BA3               	goto	l4306
  5769  01D3                     u2840:
  5770  01D3                     l4184:
  5771                           
  5772                           ;main.c: 479:          setCurrent(currentValue[1], battery_voltage());
  5773  01D3  0021               	movlb	1	; select bank1
  5774  01D4  0843               	movf	((_currentValue+1)^(0+128)+2),w
  5775  01D5  0020               	movlb	0	; select bank0
  5776  01D6  00BA               	movwf	setCurrent@microamps+1
  5777  01D7  0021               	movlb	1	; select bank1
  5778  01D8  0842               	movf	(_currentValue^(0+128)+2),w
  5779  01D9  0020               	movlb	0	; select bank0
  5780  01DA  00B9               	movwf	setCurrent@microamps
  5781  01DB  318E  2646  3180   	fcall	_battery_voltage
  5782  01DE  0020               	movlb	0	; select bank0
  5783  01DF  0838               	movf	?_battery_voltage+1,w
  5784  01E0  00BC               	movwf	setCurrent@Vdd_mv+1
  5785  01E1  0837               	movf	?_battery_voltage,w
  5786  01E2  00BB               	movwf	setCurrent@Vdd_mv
  5787  01E3  3183  23BD  3180   	fcall	_setCurrent
  5788  01E6                     l4186:
  5789                           
  5790                           ;main.c: 480:          currentIndex = 1;
  5791  01E6  3001               	movlw	1
  5792  01E7  0021               	movlb	1	; select bank1
  5793  01E8  00E6               	movwf	_currentIndex^(0+128)
  5794  01E9  3000               	movlw	0
  5795  01EA  00E7               	movwf	(_currentIndex^(0+128)+1)
  5796  01EB  29B1               	goto	l4172
  5797  01EC                     l4190:
  5798                           
  5799                           ;main.c: 489:      if (interfaceState == STATE_FREQUENCY) {
  5800  01EC  3002               	movlw	2
  5801  01ED  0678               	xorwf	_interfaceState,w
  5802  01EE  1D03               	btfss	3,2
  5803  01EF  29F1               	goto	u2851
  5804  01F0  29F2               	goto	u2850
  5805  01F1                     u2851:
  5806  01F1  2A05               	goto	l4198
  5807  01F2                     u2850:
  5808  01F2                     l4192:
  5809                           
  5810                           ;main.c: 490:          setFrequency(frequencyValue[2]);
  5811  01F2  0022               	movlb	2	; select bank2
  5812  01F3  0845               	movf	((_frequencyValue+1)^(0+256)+4),w
  5813  01F4  0020               	movlb	0	; select bank0
  5814  01F5  00B8               	movwf	setFrequency@frequency_hz+1
  5815  01F6  0022               	movlb	2	; select bank2
  5816  01F7  0844               	movf	(_frequencyValue^(0+256)+4),w
  5817  01F8  0020               	movlb	0	; select bank0
  5818  01F9  00B7               	movwf	setFrequency@frequency_hz
  5819  01FA  3186  26E0  3180   	fcall	_setFrequency
  5820  01FD                     l4194:
  5821                           
  5822                           ;main.c: 491:          frequencyIndex = 2;
  5823  01FD  3002               	movlw	2
  5824  01FE  0021               	movlb	1	; select bank1
  5825  01FF  00E4               	movwf	_frequencyIndex^(0+128)
  5826  0200  3000               	movlw	0
  5827  0201  00E5               	movwf	(_frequencyIndex^(0+128)+1)
  5828  0202                     l4196:
  5829                           
  5830                           ;main.c: 492:          selectFrequencyValue();
  5831  0202  318C  24E9  3180   	fcall	_selectFrequencyValue
  5832  0205                     l4198:
  5833                           
  5834                           ;main.c: 494:      if (interfaceState == STATE_CURRENT) {
  5835  0205  0378               	decf	_interfaceState,w
  5836  0206  1D03               	btfss	3,2
  5837  0207  2A09               	goto	u2861
  5838  0208  2A0A               	goto	u2860
  5839  0209                     u2861:
  5840  0209  2BA3               	goto	l4306
  5841  020A                     u2860:
  5842  020A                     l4200:
  5843                           
  5844                           ;main.c: 495:          setCurrent(currentValue[2], battery_voltage());
  5845  020A  0021               	movlb	1	; select bank1
  5846  020B  0845               	movf	((_currentValue+1)^(0+128)+4),w
  5847  020C  0020               	movlb	0	; select bank0
  5848  020D  00BA               	movwf	setCurrent@microamps+1
  5849  020E  0021               	movlb	1	; select bank1
  5850  020F  0844               	movf	(_currentValue^(0+128)+4),w
  5851  0210  0020               	movlb	0	; select bank0
  5852  0211  00B9               	movwf	setCurrent@microamps
  5853  0212  318E  2646  3180   	fcall	_battery_voltage
  5854  0215  0020               	movlb	0	; select bank0
  5855  0216  0838               	movf	?_battery_voltage+1,w
  5856  0217  00BC               	movwf	setCurrent@Vdd_mv+1
  5857  0218  0837               	movf	?_battery_voltage,w
  5858  0219  00BB               	movwf	setCurrent@Vdd_mv
  5859  021A  3183  23BD  3180   	fcall	_setCurrent
  5860  021D                     l4202:
  5861                           
  5862                           ;main.c: 496:          currentIndex = 2;
  5863  021D  3002               	movlw	2
  5864  021E  0021               	movlb	1	; select bank1
  5865  021F  00E6               	movwf	_currentIndex^(0+128)
  5866  0220  3000               	movlw	0
  5867  0221  00E7               	movwf	(_currentIndex^(0+128)+1)
  5868  0222  29B1               	goto	l4172
  5869  0223                     l4206:
  5870                           
  5871                           ;main.c: 501:        if (interfaceState == STATE_FREQUENCY) {
  5872  0223  3002               	movlw	2
  5873  0224  0678               	xorwf	_interfaceState,w
  5874  0225  1D03               	btfss	3,2
  5875  0226  2A28               	goto	u2871
  5876  0227  2A29               	goto	u2870
  5877  0228                     u2871:
  5878  0228  2A3C               	goto	l4214
  5879  0229                     u2870:
  5880  0229                     l4208:
  5881                           
  5882                           ;main.c: 502:            setFrequency(frequencyValue[3]);
  5883  0229  0022               	movlb	2	; select bank2
  5884  022A  0847               	movf	((_frequencyValue+1)^(0+256)+6),w
  5885  022B  0020               	movlb	0	; select bank0
  5886  022C  00B8               	movwf	setFrequency@frequency_hz+1
  5887  022D  0022               	movlb	2	; select bank2
  5888  022E  0846               	movf	(_frequencyValue^(0+256)+6),w
  5889  022F  0020               	movlb	0	; select bank0
  5890  0230  00B7               	movwf	setFrequency@frequency_hz
  5891  0231  3186  26E0  3180   	fcall	_setFrequency
  5892  0234                     l4210:
  5893                           
  5894                           ;main.c: 503:            frequencyIndex = 3;
  5895  0234  3003               	movlw	3
  5896  0235  0021               	movlb	1	; select bank1
  5897  0236  00E4               	movwf	_frequencyIndex^(0+128)
  5898  0237  3000               	movlw	0
  5899  0238  00E5               	movwf	(_frequencyIndex^(0+128)+1)
  5900  0239                     l4212:
  5901                           
  5902                           ;main.c: 504:            selectFrequencyValue();
  5903  0239  318C  24E9  3180   	fcall	_selectFrequencyValue
  5904  023C                     l4214:
  5905                           
  5906                           ;main.c: 506:        if (interfaceState == STATE_CURRENT) {
  5907  023C  0378               	decf	_interfaceState,w
  5908  023D  1D03               	btfss	3,2
  5909  023E  2A40               	goto	u2881
  5910  023F  2A41               	goto	u2880
  5911  0240                     u2881:
  5912  0240  2BA3               	goto	l4306
  5913  0241                     u2880:
  5914  0241                     l4216:
  5915                           
  5916                           ;main.c: 507:            setCurrent(currentValue[3], battery_voltage());
  5917  0241  0021               	movlb	1	; select bank1
  5918  0242  0847               	movf	((_currentValue+1)^(0+128)+6),w
  5919  0243  0020               	movlb	0	; select bank0
  5920  0244  00BA               	movwf	setCurrent@microamps+1
  5921  0245  0021               	movlb	1	; select bank1
  5922  0246  0846               	movf	(_currentValue^(0+128)+6),w
  5923  0247  0020               	movlb	0	; select bank0
  5924  0248  00B9               	movwf	setCurrent@microamps
  5925  0249  318E  2646  3180   	fcall	_battery_voltage
  5926  024C  0020               	movlb	0	; select bank0
  5927  024D  0838               	movf	?_battery_voltage+1,w
  5928  024E  00BC               	movwf	setCurrent@Vdd_mv+1
  5929  024F  0837               	movf	?_battery_voltage,w
  5930  0250  00BB               	movwf	setCurrent@Vdd_mv
  5931  0251  3183  23BD  3180   	fcall	_setCurrent
  5932  0254                     l4218:
  5933                           
  5934                           ;main.c: 508:            currentIndex = 3;
  5935  0254  3003               	movlw	3
  5936  0255  0021               	movlb	1	; select bank1
  5937  0256  00E6               	movwf	_currentIndex^(0+128)
  5938  0257  3000               	movlw	0
  5939  0258  00E7               	movwf	(_currentIndex^(0+128)+1)
  5940  0259  29B1               	goto	l4172
  5941  025A                     l4222:
  5942                           
  5943                           ;main.c: 513:        if (interfaceState == STATE_FREQUENCY) {
  5944  025A  3002               	movlw	2
  5945  025B  0678               	xorwf	_interfaceState,w
  5946  025C  1D03               	btfss	3,2
  5947  025D  2A5F               	goto	u2891
  5948  025E  2A60               	goto	u2890
  5949  025F                     u2891:
  5950  025F  2A73               	goto	l4230
  5951  0260                     u2890:
  5952  0260                     l4224:
  5953                           
  5954                           ;main.c: 514:            setFrequency(frequencyValue[4]);
  5955  0260  0022               	movlb	2	; select bank2
  5956  0261  0849               	movf	((_frequencyValue+1)^(0+256)+8),w
  5957  0262  0020               	movlb	0	; select bank0
  5958  0263  00B8               	movwf	setFrequency@frequency_hz+1
  5959  0264  0022               	movlb	2	; select bank2
  5960  0265  0848               	movf	(_frequencyValue^(0+256)+8),w
  5961  0266  0020               	movlb	0	; select bank0
  5962  0267  00B7               	movwf	setFrequency@frequency_hz
  5963  0268  3186  26E0  3180   	fcall	_setFrequency
  5964  026B                     l4226:
  5965                           
  5966                           ;main.c: 515:            frequencyIndex = 4;
  5967  026B  3004               	movlw	4
  5968  026C  0021               	movlb	1	; select bank1
  5969  026D  00E4               	movwf	_frequencyIndex^(0+128)
  5970  026E  3000               	movlw	0
  5971  026F  00E5               	movwf	(_frequencyIndex^(0+128)+1)
  5972  0270                     l4228:
  5973                           
  5974                           ;main.c: 516:            selectFrequencyValue();
  5975  0270  318C  24E9  3180   	fcall	_selectFrequencyValue
  5976  0273                     l4230:
  5977                           
  5978                           ;main.c: 518:        if (interfaceState == STATE_CURRENT) {
  5979  0273  0378               	decf	_interfaceState,w
  5980  0274  1D03               	btfss	3,2
  5981  0275  2A77               	goto	u2901
  5982  0276  2A78               	goto	u2900
  5983  0277                     u2901:
  5984  0277  2BA3               	goto	l4306
  5985  0278                     u2900:
  5986  0278                     l4232:
  5987                           
  5988                           ;main.c: 519:            setCurrent(currentValue[4], battery_voltage());
  5989  0278  0021               	movlb	1	; select bank1
  5990  0279  0849               	movf	((_currentValue+1)^(0+128)+8),w
  5991  027A  0020               	movlb	0	; select bank0
  5992  027B  00BA               	movwf	setCurrent@microamps+1
  5993  027C  0021               	movlb	1	; select bank1
  5994  027D  0848               	movf	(_currentValue^(0+128)+8),w
  5995  027E  0020               	movlb	0	; select bank0
  5996  027F  00B9               	movwf	setCurrent@microamps
  5997  0280  318E  2646  3180   	fcall	_battery_voltage
  5998  0283  0020               	movlb	0	; select bank0
  5999  0284  0838               	movf	?_battery_voltage+1,w
  6000  0285  00BC               	movwf	setCurrent@Vdd_mv+1
  6001  0286  0837               	movf	?_battery_voltage,w
  6002  0287  00BB               	movwf	setCurrent@Vdd_mv
  6003  0288  3183  23BD  3180   	fcall	_setCurrent
  6004  028B                     l4234:
  6005                           
  6006                           ;main.c: 520:            currentIndex = 4;
  6007  028B  3004               	movlw	4
  6008  028C  0021               	movlb	1	; select bank1
  6009  028D  00E6               	movwf	_currentIndex^(0+128)
  6010  028E  3000               	movlw	0
  6011  028F  00E7               	movwf	(_currentIndex^(0+128)+1)
  6012  0290  29B1               	goto	l4172
  6013  0291                     l4238:
  6014                           
  6015                           ;main.c: 525:        if (interfaceState == STATE_FREQUENCY) {
  6016  0291  3002               	movlw	2
  6017  0292  0678               	xorwf	_interfaceState,w
  6018  0293  1D03               	btfss	3,2
  6019  0294  2A96               	goto	u2911
  6020  0295  2A97               	goto	u2910
  6021  0296                     u2911:
  6022  0296  2AAA               	goto	l4246
  6023  0297                     u2910:
  6024  0297                     l4240:
  6025                           
  6026                           ;main.c: 526:            setFrequency(frequencyValue[5]);
  6027  0297  0022               	movlb	2	; select bank2
  6028  0298  084B               	movf	((_frequencyValue+1)^(0+256)+10),w
  6029  0299  0020               	movlb	0	; select bank0
  6030  029A  00B8               	movwf	setFrequency@frequency_hz+1
  6031  029B  0022               	movlb	2	; select bank2
  6032  029C  084A               	movf	(_frequencyValue^(0+256)+10),w
  6033  029D  0020               	movlb	0	; select bank0
  6034  029E  00B7               	movwf	setFrequency@frequency_hz
  6035  029F  3186  26E0  3180   	fcall	_setFrequency
  6036  02A2                     l4242:
  6037                           
  6038                           ;main.c: 527:            frequencyIndex = 5;
  6039  02A2  3005               	movlw	5
  6040  02A3  0021               	movlb	1	; select bank1
  6041  02A4  00E4               	movwf	_frequencyIndex^(0+128)
  6042  02A5  3000               	movlw	0
  6043  02A6  00E5               	movwf	(_frequencyIndex^(0+128)+1)
  6044  02A7                     l4244:
  6045                           
  6046                           ;main.c: 528:            selectFrequencyValue();
  6047  02A7  318C  24E9  3180   	fcall	_selectFrequencyValue
  6048  02AA                     l4246:
  6049                           
  6050                           ;main.c: 530:        if (interfaceState == STATE_CURRENT) {
  6051  02AA  0378               	decf	_interfaceState,w
  6052  02AB  1D03               	btfss	3,2
  6053  02AC  2AAE               	goto	u2921
  6054  02AD  2AAF               	goto	u2920
  6055  02AE                     u2921:
  6056  02AE  2BA3               	goto	l4306
  6057  02AF                     u2920:
  6058  02AF                     l4248:
  6059                           
  6060                           ;main.c: 531:            setCurrent(currentValue[5], battery_voltage());
  6061  02AF  0021               	movlb	1	; select bank1
  6062  02B0  084B               	movf	((_currentValue+1)^(0+128)+10),w
  6063  02B1  0020               	movlb	0	; select bank0
  6064  02B2  00BA               	movwf	setCurrent@microamps+1
  6065  02B3  0021               	movlb	1	; select bank1
  6066  02B4  084A               	movf	(_currentValue^(0+128)+10),w
  6067  02B5  0020               	movlb	0	; select bank0
  6068  02B6  00B9               	movwf	setCurrent@microamps
  6069  02B7  318E  2646  3180   	fcall	_battery_voltage
  6070  02BA  0020               	movlb	0	; select bank0
  6071  02BB  0838               	movf	?_battery_voltage+1,w
  6072  02BC  00BC               	movwf	setCurrent@Vdd_mv+1
  6073  02BD  0837               	movf	?_battery_voltage,w
  6074  02BE  00BB               	movwf	setCurrent@Vdd_mv
  6075  02BF  3183  23BD  3180   	fcall	_setCurrent
  6076  02C2                     l4250:
  6077                           
  6078                           ;main.c: 532:            currentIndex = 5;
  6079  02C2  3005               	movlw	5
  6080  02C3  0021               	movlb	1	; select bank1
  6081  02C4  00E6               	movwf	_currentIndex^(0+128)
  6082  02C5  3000               	movlw	0
  6083  02C6  00E7               	movwf	(_currentIndex^(0+128)+1)
  6084  02C7  29B1               	goto	l4172
  6085  02C8                     l4254:
  6086                           
  6087                           ;main.c: 537:        if (interfaceState == STATE_FREQUENCY) {
  6088  02C8  3002               	movlw	2
  6089  02C9  0678               	xorwf	_interfaceState,w
  6090  02CA  1D03               	btfss	3,2
  6091  02CB  2ACD               	goto	u2931
  6092  02CC  2ACE               	goto	u2930
  6093  02CD                     u2931:
  6094  02CD  2AE1               	goto	l4262
  6095  02CE                     u2930:
  6096  02CE                     l4256:
  6097                           
  6098                           ;main.c: 538:            setFrequency(frequencyValue[6]);
  6099  02CE  0022               	movlb	2	; select bank2
  6100  02CF  084D               	movf	((_frequencyValue+1)^(0+256)+12),w
  6101  02D0  0020               	movlb	0	; select bank0
  6102  02D1  00B8               	movwf	setFrequency@frequency_hz+1
  6103  02D2  0022               	movlb	2	; select bank2
  6104  02D3  084C               	movf	(_frequencyValue^(0+256)+12),w
  6105  02D4  0020               	movlb	0	; select bank0
  6106  02D5  00B7               	movwf	setFrequency@frequency_hz
  6107  02D6  3186  26E0  3180   	fcall	_setFrequency
  6108  02D9                     l4258:
  6109                           
  6110                           ;main.c: 539:            frequencyIndex = 6;
  6111  02D9  3006               	movlw	6
  6112  02DA  0021               	movlb	1	; select bank1
  6113  02DB  00E4               	movwf	_frequencyIndex^(0+128)
  6114  02DC  3000               	movlw	0
  6115  02DD  00E5               	movwf	(_frequencyIndex^(0+128)+1)
  6116  02DE                     l4260:
  6117                           
  6118                           ;main.c: 540:            selectFrequencyValue();
  6119  02DE  318C  24E9  3180   	fcall	_selectFrequencyValue
  6120  02E1                     l4262:
  6121                           
  6122                           ;main.c: 542:        if (interfaceState == STATE_CURRENT) {
  6123  02E1  0378               	decf	_interfaceState,w
  6124  02E2  1D03               	btfss	3,2
  6125  02E3  2AE5               	goto	u2941
  6126  02E4  2AE6               	goto	u2940
  6127  02E5                     u2941:
  6128  02E5  2BA3               	goto	l4306
  6129  02E6                     u2940:
  6130  02E6                     l4264:
  6131                           
  6132                           ;main.c: 543:            setCurrent(currentValue[6], battery_voltage());
  6133  02E6  0021               	movlb	1	; select bank1
  6134  02E7  084D               	movf	((_currentValue+1)^(0+128)+12),w
  6135  02E8  0020               	movlb	0	; select bank0
  6136  02E9  00BA               	movwf	setCurrent@microamps+1
  6137  02EA  0021               	movlb	1	; select bank1
  6138  02EB  084C               	movf	(_currentValue^(0+128)+12),w
  6139  02EC  0020               	movlb	0	; select bank0
  6140  02ED  00B9               	movwf	setCurrent@microamps
  6141  02EE  318E  2646  3180   	fcall	_battery_voltage
  6142  02F1  0020               	movlb	0	; select bank0
  6143  02F2  0838               	movf	?_battery_voltage+1,w
  6144  02F3  00BC               	movwf	setCurrent@Vdd_mv+1
  6145  02F4  0837               	movf	?_battery_voltage,w
  6146  02F5  00BB               	movwf	setCurrent@Vdd_mv
  6147  02F6  3183  23BD  3180   	fcall	_setCurrent
  6148  02F9                     l4266:
  6149                           
  6150                           ;main.c: 544:            currentIndex = 6;
  6151  02F9  3006               	movlw	6
  6152  02FA  0021               	movlb	1	; select bank1
  6153  02FB  00E6               	movwf	_currentIndex^(0+128)
  6154  02FC  3000               	movlw	0
  6155  02FD  00E7               	movwf	(_currentIndex^(0+128)+1)
  6156  02FE  29B1               	goto	l4172
  6157  02FF                     l4270:
  6158                           
  6159                           ;main.c: 549:        if (interfaceState == STATE_FREQUENCY) {
  6160  02FF  3002               	movlw	2
  6161  0300  0678               	xorwf	_interfaceState,w
  6162  0301  1D03               	btfss	3,2
  6163  0302  2B04               	goto	u2951
  6164  0303  2B05               	goto	u2950
  6165  0304                     u2951:
  6166  0304  2B18               	goto	l4278
  6167  0305                     u2950:
  6168  0305                     l4272:
  6169                           
  6170                           ;main.c: 550:            setFrequency(frequencyValue[7]);
  6171  0305  0022               	movlb	2	; select bank2
  6172  0306  084F               	movf	((_frequencyValue+1)^(0+256)+14),w
  6173  0307  0020               	movlb	0	; select bank0
  6174  0308  00B8               	movwf	setFrequency@frequency_hz+1
  6175  0309  0022               	movlb	2	; select bank2
  6176  030A  084E               	movf	(_frequencyValue^(0+256)+14),w
  6177  030B  0020               	movlb	0	; select bank0
  6178  030C  00B7               	movwf	setFrequency@frequency_hz
  6179  030D  3186  26E0  3180   	fcall	_setFrequency
  6180  0310                     l4274:
  6181                           
  6182                           ;main.c: 551:            frequencyIndex = 7;
  6183  0310  3007               	movlw	7
  6184  0311  0021               	movlb	1	; select bank1
  6185  0312  00E4               	movwf	_frequencyIndex^(0+128)
  6186  0313  3000               	movlw	0
  6187  0314  00E5               	movwf	(_frequencyIndex^(0+128)+1)
  6188  0315                     l4276:
  6189                           
  6190                           ;main.c: 552:            selectFrequencyValue();
  6191  0315  318C  24E9  3180   	fcall	_selectFrequencyValue
  6192  0318                     l4278:
  6193                           
  6194                           ;main.c: 554:        if (interfaceState == STATE_CURRENT) {
  6195  0318  0378               	decf	_interfaceState,w
  6196  0319  1D03               	btfss	3,2
  6197  031A  2B1C               	goto	u2961
  6198  031B  2B1D               	goto	u2960
  6199  031C                     u2961:
  6200  031C  2BA3               	goto	l4306
  6201  031D                     u2960:
  6202  031D                     l4280:
  6203                           
  6204                           ;main.c: 555:            setCurrent(currentValue[7], battery_voltage());
  6205  031D  0021               	movlb	1	; select bank1
  6206  031E  084F               	movf	((_currentValue+1)^(0+128)+14),w
  6207  031F  0020               	movlb	0	; select bank0
  6208  0320  00BA               	movwf	setCurrent@microamps+1
  6209  0321  0021               	movlb	1	; select bank1
  6210  0322  084E               	movf	(_currentValue^(0+128)+14),w
  6211  0323  0020               	movlb	0	; select bank0
  6212  0324  00B9               	movwf	setCurrent@microamps
  6213  0325  318E  2646  3180   	fcall	_battery_voltage
  6214  0328  0020               	movlb	0	; select bank0
  6215  0329  0838               	movf	?_battery_voltage+1,w
  6216  032A  00BC               	movwf	setCurrent@Vdd_mv+1
  6217  032B  0837               	movf	?_battery_voltage,w
  6218  032C  00BB               	movwf	setCurrent@Vdd_mv
  6219  032D  3183  23BD  3180   	fcall	_setCurrent
  6220  0330                     l4282:
  6221                           
  6222                           ;main.c: 556:            currentIndex = 7;
  6223  0330  3007               	movlw	7
  6224  0331  0021               	movlb	1	; select bank1
  6225  0332  00E6               	movwf	_currentIndex^(0+128)
  6226  0333  3000               	movlw	0
  6227  0334  00E7               	movwf	(_currentIndex^(0+128)+1)
  6228  0335  29B1               	goto	l4172
  6229  0336                     l4286:
  6230                           
  6231                           ;main.c: 561:        if (interfaceState == STATE_FREQUENCY) {
  6232  0336  3002               	movlw	2
  6233  0337  0678               	xorwf	_interfaceState,w
  6234  0338  1D03               	btfss	3,2
  6235  0339  2B3B               	goto	u2971
  6236  033A  2B3C               	goto	u2970
  6237  033B                     u2971:
  6238  033B  2B4F               	goto	l4294
  6239  033C                     u2970:
  6240  033C                     l4288:
  6241                           
  6242                           ;main.c: 562:            setFrequency(frequencyValue[8]);
  6243  033C  0022               	movlb	2	; select bank2
  6244  033D  0851               	movf	((_frequencyValue+1)^(0+256)+16),w
  6245  033E  0020               	movlb	0	; select bank0
  6246  033F  00B8               	movwf	setFrequency@frequency_hz+1
  6247  0340  0022               	movlb	2	; select bank2
  6248  0341  0850               	movf	(_frequencyValue^(0+256)+16),w
  6249  0342  0020               	movlb	0	; select bank0
  6250  0343  00B7               	movwf	setFrequency@frequency_hz
  6251  0344  3186  26E0  3180   	fcall	_setFrequency
  6252  0347                     l4290:
  6253                           
  6254                           ;main.c: 563:            frequencyIndex = 8;
  6255  0347  3008               	movlw	8
  6256  0348  0021               	movlb	1	; select bank1
  6257  0349  00E4               	movwf	_frequencyIndex^(0+128)
  6258  034A  3000               	movlw	0
  6259  034B  00E5               	movwf	(_frequencyIndex^(0+128)+1)
  6260  034C                     l4292:
  6261                           
  6262                           ;main.c: 564:            selectFrequencyValue();
  6263  034C  318C  24E9  3180   	fcall	_selectFrequencyValue
  6264  034F                     l4294:
  6265                           
  6266                           ;main.c: 566:        if (interfaceState == STATE_CURRENT) {
  6267  034F  0378               	decf	_interfaceState,w
  6268  0350  1D03               	btfss	3,2
  6269  0351  2B53               	goto	u2981
  6270  0352  2B54               	goto	u2980
  6271  0353                     u2981:
  6272  0353  2BA3               	goto	l4306
  6273  0354                     u2980:
  6274  0354                     l4296:
  6275                           
  6276                           ;main.c: 567:            setCurrent(currentValue[8], battery_voltage());
  6277  0354  0021               	movlb	1	; select bank1
  6278  0355  0851               	movf	((_currentValue+1)^(0+128)+16),w
  6279  0356  0020               	movlb	0	; select bank0
  6280  0357  00BA               	movwf	setCurrent@microamps+1
  6281  0358  0021               	movlb	1	; select bank1
  6282  0359  0850               	movf	(_currentValue^(0+128)+16),w
  6283  035A  0020               	movlb	0	; select bank0
  6284  035B  00B9               	movwf	setCurrent@microamps
  6285  035C  318E  2646  3180   	fcall	_battery_voltage
  6286  035F  0020               	movlb	0	; select bank0
  6287  0360  0838               	movf	?_battery_voltage+1,w
  6288  0361  00BC               	movwf	setCurrent@Vdd_mv+1
  6289  0362  0837               	movf	?_battery_voltage,w
  6290  0363  00BB               	movwf	setCurrent@Vdd_mv
  6291  0364  3183  23BD  3180   	fcall	_setCurrent
  6292  0367                     l4298:
  6293                           
  6294                           ;main.c: 568:            currentIndex = 8;
  6295  0367  3008               	movlw	8
  6296  0368  0021               	movlb	1	; select bank1
  6297  0369  00E6               	movwf	_currentIndex^(0+128)
  6298  036A  3000               	movlw	0
  6299  036B  00E7               	movwf	(_currentIndex^(0+128)+1)
  6300  036C  29B1               	goto	l4172
  6301  036D                     l4304:
  6302  036D  0021               	movlb	1	; select bank1
  6303  036E  086A               	movf	process_remote_command@code^(0+128),w
  6304  036F  3E03               	addlw	3
  6305  0370  0086               	movwf	6
  6306  0371  0187               	clrf	7
  6307  0372  0801               	movf	1,w
  6308  0373  00E8               	movwf	??_process_remote_command^(0+128)
  6309  0374  01E9               	clrf	(??_process_remote_command^(0+128)+1)
  6310                           
  6311                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6312                           ; Switch size 1, requested type "simple"
  6313                           ; Number of cases is 1, Range of values is 0 to 0
  6314                           ; switch strategies available:
  6315                           ; Name         Instructions Cycles
  6316                           ; simple_byte            4     3 (average)
  6317                           ; direct_byte            8     6 (fixed)
  6318                           ; jumptable            260     6 (fixed)
  6319                           ;	Chosen strategy is simple_byte
  6320  0375  0869               	movf	(??_process_remote_command+1)^(0+128),w
  6321  0376  3A00               	xorlw	0	; case 0
  6322  0377  1903               	skipnz
  6323  0378  2B7A               	goto	l4448
  6324  0379  2BA3               	goto	l4306
  6325  037A                     l4448:
  6326                           
  6327                           ; Switch size 1, requested type "simple"
  6328                           ; Number of cases is 13, Range of values is 8 to 176
  6329                           ; switch strategies available:
  6330                           ; Name         Instructions Cycles
  6331                           ; simple_byte           40    21 (average)
  6332                           ; jumptable            263     9 (fixed)
  6333                           ;	Chosen strategy is simple_byte
  6334  037A  0868               	movf	??_process_remote_command^(0+128),w
  6335  037B  3A08               	xorlw	8	; case 8
  6336  037C  1903               	skipnz
  6337  037D  297F               	goto	l4158
  6338  037E  3A18               	xorlw	24	; case 16
  6339  037F  1903               	skipnz
  6340  0380  297B               	goto	l4156
  6341  0381  3A08               	xorlw	8	; case 24
  6342  0382  1903               	skipnz
  6343  0383  2AC8               	goto	l4254
  6344  0384  3A30               	xorlw	48	; case 40
  6345  0385  1903               	skipnz
  6346  0386  2A23               	goto	l4206
  6347  0387  3A60               	xorlw	96	; case 72
  6348  0388  1903               	skipnz
  6349  0389  29EC               	goto	l4190
  6350  038A  3A18               	xorlw	24	; case 80
  6351  038B  1903               	skipnz
  6352  038C  2977               	goto	l4154
  6353  038D  3A08               	xorlw	8	; case 88
  6354  038E  1903               	skipnz
  6355  038F  2B36               	goto	l4286
  6356  0390  3A30               	xorlw	48	; case 104
  6357  0391  1903               	skipnz
  6358  0392  2A91               	goto	l4238
  6359  0393  3AE0               	xorlw	224	; case 136
  6360  0394  1903               	skipnz
  6361  0395  29B5               	goto	l4174
  6362  0396  3A10               	xorlw	16	; case 152
  6363  0397  1903               	skipnz
  6364  0398  2AFF               	goto	l4270
  6365  0399  3A38               	xorlw	56	; case 160
  6366  039A  1903               	skipnz
  6367  039B  2890               	goto	l4078
  6368  039C  3A08               	xorlw	8	; case 168
  6369  039D  1903               	skipnz
  6370  039E  2A5A               	goto	l4222
  6371  039F  3A18               	xorlw	24	; case 176
  6372  03A0  1903               	skipnz
  6373  03A1  2911               	goto	l4114
  6374  03A2  2BA3               	goto	l4306
  6375  03A3                     l4306:
  6376                           
  6377                           ;main.c: 576:   setLEDColor(LED_red, LED_green, LED_blue);
  6378  03A3  01F3               	clrf	setLEDColor@green
  6379  03A4  01F4               	clrf	setLEDColor@blue
  6380  03A5  3000               	movlw	0
  6381  03A6  318B  23D6  3180   	fcall	_setLEDColor
  6382  03A9                     l4308:
  6383                           
  6384                           ;main.c: 577:   _delay((unsigned long)((1000)*(4000000/4000.0)));
  6385  03A9  3006               	movlw	6
  6386  03AA  0021               	movlb	1	; select bank1
  6387  03AB  00E9               	movwf	(??_process_remote_command^(0+128)+1)
  6388  03AC  3013               	movlw	19
  6389  03AD  00E8               	movwf	??_process_remote_command^(0+128)
  6390  03AE  30AD               	movlw	173
  6391  03AF                     u3057:
  6392  03AF  0B89               	decfsz	9,f
  6393  03B0  2BAF               	goto	u3057
  6394  03B1  0BE8               	decfsz	??_process_remote_command^(0+128),f
  6395  03B2  2BAF               	goto	u3057
  6396  03B3  0BE9               	decfsz	(??_process_remote_command^(0+128)+1),f
  6397  03B4  2BAF               	goto	u3057
  6398  03B5  3200               	nop2
  6399  03B6                     l4310:
  6400                           
  6401                           ;main.c: 578:   setLEDColor(0, 0, 0);
  6402  03B6  01F3               	clrf	setLEDColor@green
  6403  03B7  01F4               	clrf	setLEDColor@blue
  6404  03B8  3000               	movlw	0
  6405  03B9  318B  23D6  3180   	fcall	_setLEDColor
  6406  03BC                     l749:
  6407  03BC  0008               	return
  6408  03BD                     __end_of_process_remote_command:
  6409                           
  6410                           	psect	text4
  6411  0F84                     __ptext4:	
  6412 ;; *************** function _writePersistentState *****************
  6413 ;; Defined at:
  6414 ;;		line 127 in file "main.c"
  6415 ;; Parameters:    Size  Location     Type
  6416 ;;		None
  6417 ;; Auto vars:     Size  Location     Type
  6418 ;;  i               1   78[BANK0 ] unsigned char 
  6419 ;;  buf            64   14[BANK0 ] unsigned short [32]
  6420 ;;  idx             1   79[BANK0 ] unsigned char 
  6421 ;; Return value:  Size  Location     Type
  6422 ;;                  1    wreg      void 
  6423 ;; Registers used:
  6424 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6425 ;; Tracked objects:
  6426 ;;		On entry : 0/0
  6427 ;;		On exit  : 0/0
  6428 ;;		Unchanged: 0/0
  6429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6430 ;;      Params:         0       0       0       0       0       0       0       0
  6431 ;;      Locals:         0      66       0       0       0       0       0       0
  6432 ;;      Temps:          0       4       0       0       0       0       0       0
  6433 ;;      Totals:         0      70       0       0       0       0       0       0
  6434 ;;Total ram usage:       70 bytes
  6435 ;; Hardware stack levels used: 1
  6436 ;; Hardware stack levels required when called: 6
  6437 ;; This function calls:
  6438 ;;		_FLASH_WriteBlock
  6439 ;; This function is called by:
  6440 ;;		_process_remote_command
  6441 ;; This function uses a non-reentrant model
  6442 ;;
  6443                           
  6444                           
  6445                           ;psect for function _writePersistentState
  6446  0F84                     _writePersistentState:
  6447  0F84                     l3928:	
  6448                           ;incstack = 0
  6449                           ; Regs used in _writePersistentState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6450                           
  6451                           
  6452                           ;main.c: 130:   uint16_t buf[32];;main.c: 131:   for (uint8_t i=0; i<32; i++){
  6453  0F84  0020               	movlb	0	; select bank0
  6454  0F85  01EE               	clrf	writePersistentState@i
  6455  0F86                     l3934:
  6456                           
  6457                           ;main.c: 132:     buf[0] = 0;
  6458  0F86  01AE               	clrf	writePersistentState@buf
  6459  0F87  01AF               	clrf	writePersistentState@buf+1
  6460  0F88                     l3936:
  6461                           
  6462                           ;main.c: 133:   }
  6463  0F88  3001               	movlw	1
  6464  0F89  00AA               	movwf	??_writePersistentState
  6465  0F8A  082A               	movf	??_writePersistentState,w
  6466  0F8B  07EE               	addwf	writePersistentState@i,f
  6467  0F8C                     l3938:
  6468  0F8C  3020               	movlw	32
  6469  0F8D  026E               	subwf	writePersistentState@i,w
  6470  0F8E  1C03               	skipc
  6471  0F8F  2F91               	goto	u2591
  6472  0F90  2F92               	goto	u2590
  6473  0F91                     u2591:
  6474  0F91  2F86               	goto	l3934
  6475  0F92                     u2590:
  6476  0F92                     l3940:
  6477                           
  6478                           ;main.c: 136:   uint8_t idx = 0;
  6479  0F92  01EF               	clrf	writePersistentState@idx
  6480  0F93                     l3942:
  6481                           
  6482                           ;main.c: 137:   buf[idx++] = ((uint16_t)(0x3400 | (currentIndex & 0xff)));
  6483  0F93  30FF               	movlw	255
  6484  0F94  0021               	movlb	1	; select bank1
  6485  0F95  0566               	andwf	_currentIndex^(0+128),w
  6486  0F96  0020               	movlb	0	; select bank0
  6487  0F97  00AA               	movwf	??_writePersistentState
  6488  0F98  3000               	movlw	0
  6489  0F99  0021               	movlb	1	; select bank1
  6490  0F9A  0567               	andwf	(_currentIndex+1)^(0+128),w
  6491  0F9B  0020               	movlb	0	; select bank0
  6492  0F9C  00AB               	movwf	??_writePersistentState+1
  6493  0F9D  3000               	movlw	0
  6494  0F9E  042A               	iorwf	??_writePersistentState,w
  6495  0F9F  00AE               	movwf	writePersistentState@buf
  6496  0FA0  3034               	movlw	52
  6497  0FA1  042B               	iorwf	??_writePersistentState+1,w
  6498  0FA2  00AF               	movwf	writePersistentState@buf+1
  6499  0FA3                     l3944:
  6500  0FA3  3001               	movlw	1
  6501  0FA4  00AA               	movwf	??_writePersistentState
  6502  0FA5  082A               	movf	??_writePersistentState,w
  6503  0FA6  07EF               	addwf	writePersistentState@idx,f
  6504  0FA7                     l3946:
  6505                           
  6506                           ;main.c: 138:   buf[idx++] = ((uint16_t)(0x3400 | (frequencyIndex & 0xff)));
  6507  0FA7  30FF               	movlw	255
  6508  0FA8  0021               	movlb	1	; select bank1
  6509  0FA9  0564               	andwf	_frequencyIndex^(0+128),w
  6510  0FAA  0020               	movlb	0	; select bank0
  6511  0FAB  00AA               	movwf	??_writePersistentState
  6512  0FAC  3000               	movlw	0
  6513  0FAD  0021               	movlb	1	; select bank1
  6514  0FAE  0565               	andwf	(_frequencyIndex+1)^(0+128),w
  6515  0FAF  0020               	movlb	0	; select bank0
  6516  0FB0  00AB               	movwf	??_writePersistentState+1
  6517  0FB1  3000               	movlw	0
  6518  0FB2  042A               	iorwf	??_writePersistentState,w
  6519  0FB3  00AC               	movwf	??_writePersistentState+2
  6520  0FB4  3034               	movlw	52
  6521  0FB5  042B               	iorwf	??_writePersistentState+1,w
  6522  0FB6  00AD               	movwf	??_writePersistentState+3
  6523  0FB7  356F               	lslf	writePersistentState@idx,w
  6524  0FB8  3E2E               	addlw	(low (writePersistentState@buf| 0))& (0+255)
  6525  0FB9  0086               	movwf	6
  6526  0FBA  0187               	clrf	7
  6527  0FBB  082C               	movf	??_writePersistentState+2,w
  6528  0FBC  3FC0               	movwi [0]fsr1
  6529  0FBD  082D               	movf	??_writePersistentState+3,w
  6530  0FBE  3FC1               	movwi [1]fsr1
  6531  0FBF                     l3948:
  6532  0FBF  3001               	movlw	1
  6533  0FC0  00AA               	movwf	??_writePersistentState
  6534  0FC1  082A               	movf	??_writePersistentState,w
  6535  0FC2  07EF               	addwf	writePersistentState@idx,f
  6536  0FC3                     l3950:
  6537                           
  6538                           ;main.c: 139:   buf[idx++] = ((uint16_t)(0x3400 | (dc_frequency_flag & 0xff)));
  6539  0FC3  3000               	movlw	0
  6540  0FC4  047A               	iorwf	_dc_frequency_flag,w
  6541  0FC5  00AA               	movwf	??_writePersistentState
  6542  0FC6  3034               	movlw	52
  6543  0FC7  00AB               	movwf	??_writePersistentState+1
  6544  0FC8  356F               	lslf	writePersistentState@idx,w
  6545  0FC9  3E2E               	addlw	(low (writePersistentState@buf| 0))& (0+255)
  6546  0FCA  0086               	movwf	6
  6547  0FCB  0187               	clrf	7
  6548  0FCC  082A               	movf	??_writePersistentState,w
  6549  0FCD  3FC0               	movwi [0]fsr1
  6550  0FCE  082B               	movf	??_writePersistentState+1,w
  6551  0FCF  3FC1               	movwi [1]fsr1
  6552  0FD0                     l3952:
  6553  0FD0  3001               	movlw	1
  6554  0FD1  00AA               	movwf	??_writePersistentState
  6555  0FD2  082A               	movf	??_writePersistentState,w
  6556  0FD3  07EF               	addwf	writePersistentState@idx,f
  6557  0FD4                     l3954:
  6558                           
  6559                           ;main.c: 141:   FLASH_WriteBlock((uint16_t)&HEF_persistent_state, buf);
  6560  0FD4  30E0               	movlw	224
  6561  0FD5  00A0               	movwf	FLASH_WriteBlock@writeAddr
  6562  0FD6  300F               	movlw	15
  6563  0FD7  00A1               	movwf	FLASH_WriteBlock@writeAddr+1
  6564  0FD8  302E               	movlw	(low (writePersistentState@buf| 0))& (0+255)
  6565  0FD9  00AA               	movwf	??_writePersistentState
  6566  0FDA  082A               	movf	??_writePersistentState,w
  6567  0FDB  00A2               	movwf	FLASH_WriteBlock@flashWordArray
  6568  0FDC  3186  2608  318F   	fcall	_FLASH_WriteBlock
  6569  0FDF                     l633:
  6570  0FDF  0008               	return
  6571  0FE0                     __end_of_writePersistentState:
  6572                           
  6573                           	psect	text5
  6574  0608                     __ptext5:	
  6575 ;; *************** function _FLASH_WriteBlock *****************
  6576 ;; Defined at:
  6577 ;;		line 94 in file "mcc_generated_files/memory.c"
  6578 ;; Parameters:    Size  Location     Type
  6579 ;;  writeAddr       2    0[BANK0 ] unsigned short 
  6580 ;;  flashWordArr    1    2[BANK0 ] PTR unsigned short 
  6581 ;;		 -> writePersistentState@buf(64), 
  6582 ;; Auto vars:     Size  Location     Type
  6583 ;;  blockStartAd    2    6[BANK0 ] unsigned short 
  6584 ;;  i               1    9[BANK0 ] unsigned char 
  6585 ;;  GIEBitValue     1    8[BANK0 ] unsigned char 
  6586 ;; Return value:  Size  Location     Type
  6587 ;;                  1    wreg      char 
  6588 ;; Registers used:
  6589 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6590 ;; Tracked objects:
  6591 ;;		On entry : 0/0
  6592 ;;		On exit  : 0/0
  6593 ;;		Unchanged: 0/0
  6594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6595 ;;      Params:         0       3       0       0       0       0       0       0
  6596 ;;      Locals:         0       4       0       0       0       0       0       0
  6597 ;;      Temps:          0       3       0       0       0       0       0       0
  6598 ;;      Totals:         0      10       0       0       0       0       0       0
  6599 ;;Total ram usage:       10 bytes
  6600 ;; Hardware stack levels used: 1
  6601 ;; Hardware stack levels required when called: 5
  6602 ;; This function calls:
  6603 ;;		_FLASH_EraseBlock
  6604 ;; This function is called by:
  6605 ;;		_writePersistentState
  6606 ;;		_FLASH_WriteWord
  6607 ;; This function uses a non-reentrant model
  6608 ;;
  6609                           
  6610                           
  6611                           ;psect for function _FLASH_WriteBlock
  6612  0608                     _FLASH_WriteBlock:
  6613  0608                     l3762:	
  6614                           ;incstack = 0
  6615                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6616                           
  6617                           
  6618                           ;mcc_generated_files/memory.c: 94: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t 
      +                          *flashWordArray);mcc_generated_files/memory.c: 95: {;mcc_generated_files/memory.c: 96:  
      +                             uint16_t blockStartAddr = (uint16_t )(writeAddr & ((0x1000 -1) ^ (32 -1)));
  6619  0608  30E0               	movlw	224
  6620  0609  0020               	movlb	0	; select bank0
  6621  060A  0520               	andwf	FLASH_WriteBlock@writeAddr,w
  6622  060B  00A6               	movwf	FLASH_WriteBlock@blockStartAddr
  6623  060C  300F               	movlw	15
  6624  060D  0521               	andwf	FLASH_WriteBlock@writeAddr+1,w
  6625  060E  00A7               	movwf	FLASH_WriteBlock@blockStartAddr+1
  6626  060F                     l3764:
  6627                           
  6628                           ;mcc_generated_files/memory.c: 97:     uint8_t GIEBitValue = INTCONbits.GIE;
  6629  060F  3000               	movlw	0
  6630  0610  1B8B               	btfsc	11,7	;volatile
  6631  0611  3001               	movlw	1
  6632  0612  00A8               	movwf	FLASH_WriteBlock@GIEBitValue
  6633  0613                     l3766:
  6634                           
  6635                           ;mcc_generated_files/memory.c: 98:     uint8_t i;;mcc_generated_files/memory.c: 101:    
      +                           if( writeAddr != blockStartAddr )
  6636  0613  0827               	movf	FLASH_WriteBlock@blockStartAddr+1,w
  6637  0614  0621               	xorwf	FLASH_WriteBlock@writeAddr+1,w
  6638  0615  1D03               	skipz
  6639  0616  2E19               	goto	u2315
  6640  0617  0826               	movf	FLASH_WriteBlock@blockStartAddr,w
  6641  0618  0620               	xorwf	FLASH_WriteBlock@writeAddr,w
  6642  0619                     u2315:
  6643  0619  1903               	skipnz
  6644  061A  2E1C               	goto	u2311
  6645  061B  2E1D               	goto	u2310
  6646  061C                     u2311:
  6647  061C  2E1E               	goto	l465
  6648  061D                     u2310:
  6649  061D  2E73               	goto	l466
  6650  061E                     l465:	
  6651                           ;mcc_generated_files/memory.c: 104:     }
  6652                           
  6653                           
  6654                           ;mcc_generated_files/memory.c: 106:     INTCONbits.GIE = 0;
  6655  061E  138B               	bcf	11,7	;volatile
  6656  061F                     l3770:
  6657                           
  6658                           ;mcc_generated_files/memory.c: 109:     FLASH_EraseBlock(writeAddr);
  6659  061F  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
  6660  0620  00F4               	movwf	FLASH_EraseBlock@startAddr+1
  6661  0621  0820               	movf	FLASH_WriteBlock@writeAddr,w
  6662  0622  00F3               	movwf	FLASH_EraseBlock@startAddr
  6663  0623  318C  241F  3186   	fcall	_FLASH_EraseBlock
  6664  0626                     l3772:
  6665                           
  6666                           ;mcc_generated_files/memory.c: 112:     PMCON1bits.CFGS = 0;
  6667  0626  0023               	movlb	3	; select bank3
  6668  0627  1315               	bcf	21,6	;volatile
  6669  0628                     l3774:
  6670                           
  6671                           ;mcc_generated_files/memory.c: 113:     PMCON1bits.WREN = 1;
  6672  0628  1515               	bsf	21,2	;volatile
  6673  0629                     l3776:
  6674                           
  6675                           ;mcc_generated_files/memory.c: 114:     PMCON1bits.LWLO = 1;
  6676  0629  1695               	bsf	21,5	;volatile
  6677  062A                     l3778:
  6678                           
  6679                           ;mcc_generated_files/memory.c: 116:     for (i=0; i<32; i++)
  6680  062A  0020               	movlb	0	; select bank0
  6681  062B  01A9               	clrf	FLASH_WriteBlock@i
  6682  062C                     l3784:
  6683                           
  6684                           ;mcc_generated_files/memory.c: 117:     {;mcc_generated_files/memory.c: 119:         PMA
      +                          DRL = (writeAddr & 0xFF);
  6685  062C  0820               	movf	FLASH_WriteBlock@writeAddr,w
  6686  062D  0023               	movlb	3	; select bank3
  6687  062E  0091               	movwf	17	;volatile
  6688  062F                     l3786:
  6689                           
  6690                           ;mcc_generated_files/memory.c: 121:         PMADRH = ((writeAddr & 0xFF00) >> 8);
  6691  062F  0020               	movlb	0	; select bank0
  6692  0630  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
  6693  0631  0023               	movlb	3	; select bank3
  6694  0632  0092               	movwf	18	;volatile
  6695  0633                     l3788:
  6696                           
  6697                           ;mcc_generated_files/memory.c: 124:         PMDATL = flashWordArray[i];
  6698  0633  0020               	movlb	0	; select bank0
  6699  0634  3529               	lslf	FLASH_WriteBlock@i,w
  6700  0635  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
  6701  0636  00A3               	movwf	??_FLASH_WriteBlock
  6702  0637  0823               	movf	??_FLASH_WriteBlock,w
  6703  0638  0086               	movwf	6
  6704  0639  0187               	clrf	7
  6705  063A  0801               	movf	1,w
  6706  063B  0023               	movlb	3	; select bank3
  6707  063C  0093               	movwf	19	;volatile
  6708  063D                     l3790:
  6709                           
  6710                           ;mcc_generated_files/memory.c: 125:         PMDATH = ((flashWordArray[i] & 0xFF00) >> 8)
      +                          ;
  6711  063D  0020               	movlb	0	; select bank0
  6712  063E  3529               	lslf	FLASH_WriteBlock@i,w
  6713  063F  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
  6714  0640  00A3               	movwf	??_FLASH_WriteBlock
  6715  0641  0823               	movf	??_FLASH_WriteBlock,w
  6716  0642  0086               	movwf	6
  6717  0643  0187               	clrf	7
  6718  0644  3F40               	moviw [0]fsr1
  6719  0645  00A4               	movwf	??_FLASH_WriteBlock+1
  6720  0646  3F41               	moviw [1]fsr1
  6721  0647  00A5               	movwf	??_FLASH_WriteBlock+2
  6722  0648  0825               	movf	??_FLASH_WriteBlock+2,w
  6723  0649  0023               	movlb	3	; select bank3
  6724  064A  0094               	movwf	20	;volatile
  6725  064B                     l3792:
  6726                           
  6727                           ;mcc_generated_files/memory.c: 127:         if(i == (32 -1))
  6728  064B  301F               	movlw	31
  6729  064C  0020               	movlb	0	; select bank0
  6730  064D  0629               	xorwf	FLASH_WriteBlock@i,w
  6731  064E  1D03               	btfss	3,2
  6732  064F  2E51               	goto	u2321
  6733  0650  2E52               	goto	u2320
  6734  0651                     u2321:
  6735  0651  2E54               	goto	l3796
  6736  0652                     u2320:
  6737  0652                     l3794:
  6738                           
  6739                           ;mcc_generated_files/memory.c: 128:         {;mcc_generated_files/memory.c: 130:        
      +                               PMCON1bits.LWLO = 0;
  6740  0652  0023               	movlb	3	; select bank3
  6741  0653  1295               	bcf	21,5	;volatile
  6742  0654                     l3796:
  6743                           
  6744                           ;mcc_generated_files/memory.c: 133:         PMCON2 = 0x55;
  6745  0654  3055               	movlw	85
  6746  0655  0023               	movlb	3	; select bank3
  6747  0656  0096               	movwf	22	;volsfr
  6748                           
  6749                           ;mcc_generated_files/memory.c: 134:         PMCON2 = 0xAA;
  6750  0657  30AA               	movlw	170
  6751  0658  0096               	movwf	22	;volsfr
  6752  0659                     l3798:
  6753                           
  6754                           ;mcc_generated_files/memory.c: 135:         PMCON1bits.WR = 1;
  6755  0659  1495               	bsf	21,1	;volatile
  6756  065A                     l3800:
  6757                           
  6758                           ;mcc_generated_files/memory.c: 136:         __nop();
  6759  065A  0000               	nop
  6760  065B                     l3802:
  6761                           
  6762                           ;mcc_generated_files/memory.c: 137:         __nop();
  6763  065B  0000               	nop
  6764                           
  6765                           ;mcc_generated_files/memory.c: 139:  writeAddr++;
  6766  065C  3001               	movlw	1
  6767  065D  0020               	movlb	0	; select bank0
  6768  065E  07A0               	addwf	FLASH_WriteBlock@writeAddr,f
  6769  065F  3000               	movlw	0
  6770  0660  3DA1               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  6771  0661                     l3804:
  6772                           
  6773                           ;mcc_generated_files/memory.c: 140:     }
  6774  0661  3001               	movlw	1
  6775  0662  00A3               	movwf	??_FLASH_WriteBlock
  6776  0663  0823               	movf	??_FLASH_WriteBlock,w
  6777  0664  07A9               	addwf	FLASH_WriteBlock@i,f
  6778  0665                     l3806:
  6779  0665  3020               	movlw	32
  6780  0666  0229               	subwf	FLASH_WriteBlock@i,w
  6781  0667  1C03               	skipc
  6782  0668  2E6A               	goto	u2331
  6783  0669  2E6B               	goto	u2330
  6784  066A                     u2331:
  6785  066A  2E2C               	goto	l3784
  6786  066B                     u2330:
  6787  066B                     l468:
  6788                           
  6789                           ;mcc_generated_files/memory.c: 142:     PMCON1bits.WREN = 0;
  6790  066B  0023               	movlb	3	; select bank3
  6791  066C  1115               	bcf	21,2	;volatile
  6792  066D                     l3808:
  6793                           
  6794                           ;mcc_generated_files/memory.c: 143:     INTCONbits.GIE = GIEBitValue;
  6795  066D  0020               	movlb	0	; select bank0
  6796  066E  0C28               	rrf	FLASH_WriteBlock@GIEBitValue,w
  6797  066F  1C03               	skipc
  6798  0670  138B               	bcf	11,7	;volatile
  6799  0671  1803               	skipnc
  6800  0672  178B               	bsf	11,7	;volatile
  6801  0673                     l466:
  6802  0673  0008               	return
  6803  0674                     __end_of_FLASH_WriteBlock:
  6804                           
  6805                           	psect	text6
  6806  0C1F                     __ptext6:	
  6807 ;; *************** function _FLASH_EraseBlock *****************
  6808 ;; Defined at:
  6809 ;;		line 148 in file "mcc_generated_files/memory.c"
  6810 ;; Parameters:    Size  Location     Type
  6811 ;;  startAddr       2    3[COMMON] unsigned short 
  6812 ;; Auto vars:     Size  Location     Type
  6813 ;;  GIEBitValue     1    5[COMMON] unsigned char 
  6814 ;; Return value:  Size  Location     Type
  6815 ;;                  1    wreg      void 
  6816 ;; Registers used:
  6817 ;;		wreg, status,2, status,0
  6818 ;; Tracked objects:
  6819 ;;		On entry : 0/0
  6820 ;;		On exit  : 0/0
  6821 ;;		Unchanged: 0/0
  6822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6823 ;;      Params:         2       0       0       0       0       0       0       0
  6824 ;;      Locals:         1       0       0       0       0       0       0       0
  6825 ;;      Temps:          0       0       0       0       0       0       0       0
  6826 ;;      Totals:         3       0       0       0       0       0       0       0
  6827 ;;Total ram usage:        3 bytes
  6828 ;; Hardware stack levels used: 1
  6829 ;; Hardware stack levels required when called: 4
  6830 ;; This function calls:
  6831 ;;		Nothing
  6832 ;; This function is called by:
  6833 ;;		_FLASH_WriteBlock
  6834 ;; This function uses a non-reentrant model
  6835 ;;
  6836                           
  6837                           
  6838                           ;psect for function _FLASH_EraseBlock
  6839  0C1F                     _FLASH_EraseBlock:
  6840  0C1F                     l3724:	
  6841                           ;incstack = 0
  6842                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  6843                           
  6844                           
  6845                           ;mcc_generated_files/memory.c: 148: void FLASH_EraseBlock(uint16_t startAddr);mcc_genera
      +                          ted_files/memory.c: 149: {;mcc_generated_files/memory.c: 150:     uint8_t GIEBitValue = 
      +                          INTCONbits.GIE;
  6846  0C1F  3000               	movlw	0
  6847  0C20  1B8B               	btfsc	11,7	;volatile
  6848  0C21  3001               	movlw	1
  6849  0C22  00F5               	movwf	FLASH_EraseBlock@GIEBitValue
  6850  0C23                     l3726:
  6851                           
  6852                           ;mcc_generated_files/memory.c: 153:     INTCONbits.GIE = 0;
  6853  0C23  138B               	bcf	11,7	;volatile
  6854  0C24                     l3728:
  6855                           
  6856                           ;mcc_generated_files/memory.c: 155:     PMADRL = (startAddr & 0xFF);
  6857  0C24  0873               	movf	FLASH_EraseBlock@startAddr,w
  6858  0C25  0023               	movlb	3	; select bank3
  6859  0C26  0091               	movwf	17	;volatile
  6860  0C27                     l3730:
  6861                           
  6862                           ;mcc_generated_files/memory.c: 157:     PMADRH = ((startAddr & 0xFF00) >> 8);
  6863  0C27  0874               	movf	FLASH_EraseBlock@startAddr+1,w
  6864  0C28  0092               	movwf	18	;volatile
  6865  0C29                     l3732:
  6866                           
  6867                           ;mcc_generated_files/memory.c: 160:     PMCON1bits.CFGS = 0;
  6868  0C29  1315               	bcf	21,6	;volatile
  6869  0C2A                     l3734:
  6870                           
  6871                           ;mcc_generated_files/memory.c: 161:     PMCON1bits.FREE = 1;
  6872  0C2A  1615               	bsf	21,4	;volatile
  6873  0C2B                     l3736:
  6874                           
  6875                           ;mcc_generated_files/memory.c: 162:     PMCON1bits.WREN = 1;
  6876  0C2B  1515               	bsf	21,2	;volatile
  6877                           
  6878                           ;mcc_generated_files/memory.c: 165:     PMCON2 = 0x55;
  6879  0C2C  3055               	movlw	85
  6880  0C2D  0096               	movwf	22	;volsfr
  6881                           
  6882                           ;mcc_generated_files/memory.c: 166:     PMCON2 = 0xAA;
  6883  0C2E  30AA               	movlw	170
  6884  0C2F  0096               	movwf	22	;volsfr
  6885  0C30                     l3738:
  6886                           
  6887                           ;mcc_generated_files/memory.c: 167:     PMCON1bits.WR = 1;
  6888  0C30  1495               	bsf	21,1	;volatile
  6889  0C31                     l3740:
  6890                           
  6891                           ;mcc_generated_files/memory.c: 168:     __nop();
  6892  0C31  0000               	nop
  6893  0C32                     l3742:
  6894                           
  6895                           ;mcc_generated_files/memory.c: 169:     __nop();
  6896  0C32  0000               	nop
  6897  0C33                     l3744:
  6898                           
  6899                           ;mcc_generated_files/memory.c: 171:     PMCON1bits.WREN = 0;
  6900  0C33  0023               	movlb	3	; select bank3
  6901  0C34  1115               	bcf	21,2	;volatile
  6902  0C35                     l3746:
  6903                           
  6904                           ;mcc_generated_files/memory.c: 172:     INTCONbits.GIE = GIEBitValue;
  6905  0C35  0C75               	rrf	FLASH_EraseBlock@GIEBitValue,w
  6906  0C36  1C03               	skipc
  6907  0C37  138B               	bcf	11,7	;volatile
  6908  0C38  1803               	skipnc
  6909  0C39  178B               	bsf	11,7	;volatile
  6910  0C3A                     l472:
  6911  0C3A  0008               	return
  6912  0C3B                     __end_of_FLASH_EraseBlock:
  6913                           
  6914                           	psect	text7
  6915  06E0                     __ptext7:	
  6916 ;; *************** function _setFrequency *****************
  6917 ;; Defined at:
  6918 ;;		line 342 in file "main.c"
  6919 ;; Parameters:    Size  Location     Type
  6920 ;;  frequency_hz    2   23[BANK0 ] short 
  6921 ;; Auto vars:     Size  Location     Type
  6922 ;;  PR4_val         2   26[BANK0 ] short 
  6923 ;; Return value:  Size  Location     Type
  6924 ;;                  1    wreg      void 
  6925 ;; Registers used:
  6926 ;;		wreg, status,2, status,0, pclath, cstack
  6927 ;; Tracked objects:
  6928 ;;		On entry : 0/0
  6929 ;;		On exit  : 0/0
  6930 ;;		Unchanged: 0/0
  6931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6932 ;;      Params:         0       2       0       0       0       0       0       0
  6933 ;;      Locals:         0       2       0       0       0       0       0       0
  6934 ;;      Temps:          0       1       0       0       0       0       0       0
  6935 ;;      Totals:         0       5       0       0       0       0       0       0
  6936 ;;Total ram usage:        5 bytes
  6937 ;; Hardware stack levels used: 1
  6938 ;; Hardware stack levels required when called: 5
  6939 ;; This function calls:
  6940 ;;		_TMR4_LoadPeriodRegister
  6941 ;;		___aldiv
  6942 ;;		___lmul
  6943 ;; This function is called by:
  6944 ;;		_process_remote_command
  6945 ;;		_main
  6946 ;; This function uses a non-reentrant model
  6947 ;;
  6948                           
  6949                           
  6950                           ;psect for function _setFrequency
  6951  06E0                     _setFrequency:
  6952  06E0                     l4036:	
  6953                           ;incstack = 0
  6954                           ; Regs used in _setFrequency: [wreg+status,2+status,0+pclath+cstack]
  6955                           
  6956                           
  6957                           ;main.c: 342: void setFrequency(int16_t frequency_hz);main.c: 343: {;main.c: 358:   int1
      +                          6_t PR4_val = 1000000L / (96L * frequency_hz);
  6958  06E0  0020               	movlb	0	; select bank0
  6959  06E1  0837               	movf	setFrequency@frequency_hz,w
  6960  06E2  00A0               	movwf	___lmul@multiplier
  6961  06E3  0838               	movf	setFrequency@frequency_hz+1,w
  6962  06E4  00A1               	movwf	___lmul@multiplier+1
  6963  06E5  0D89               	rlf	9,f
  6964  06E6  3B89               	subwfb	9,f
  6965  06E7  0989               	comf	9,f
  6966  06E8  00A2               	movwf	___lmul@multiplier+2
  6967  06E9  00A3               	movwf	___lmul@multiplier+3
  6968  06EA  3000               	movlw	0
  6969  06EB  00A7               	movwf	___lmul@multiplicand+3
  6970  06EC  3000               	movlw	0
  6971  06ED  00A6               	movwf	___lmul@multiplicand+2
  6972  06EE  3000               	movlw	0
  6973  06EF  00A5               	movwf	___lmul@multiplicand+1
  6974  06F0  3060               	movlw	96
  6975  06F1  00A4               	movwf	___lmul@multiplicand
  6976  06F2  318E  2679  3186   	fcall	___lmul
  6977  06F5  0020               	movlb	0	; select bank0
  6978  06F6  0823               	movf	?___lmul+3,w
  6979  06F7  00AB               	movwf	___aldiv@divisor+3
  6980  06F8  0822               	movf	?___lmul+2,w
  6981  06F9  00AA               	movwf	___aldiv@divisor+2
  6982  06FA  0821               	movf	?___lmul+1,w
  6983  06FB  00A9               	movwf	___aldiv@divisor+1
  6984  06FC  0820               	movf	?___lmul,w
  6985  06FD  00A8               	movwf	___aldiv@divisor
  6986  06FE  3000               	movlw	0
  6987  06FF  00AF               	movwf	___aldiv@dividend+3
  6988  0700  300F               	movlw	15
  6989  0701  00AE               	movwf	___aldiv@dividend+2
  6990  0702  3042               	movlw	66
  6991  0703  00AD               	movwf	___aldiv@dividend+1
  6992  0704  3040               	movlw	64
  6993  0705  00AC               	movwf	___aldiv@dividend
  6994  0706  3184  24FA  3186   	fcall	___aldiv
  6995  0709  0020               	movlb	0	; select bank0
  6996  070A  0829               	movf	?___aldiv+1,w
  6997  070B  00BB               	movwf	setFrequency@PR4_val+1
  6998  070C  0828               	movf	?___aldiv,w
  6999  070D  00BA               	movwf	setFrequency@PR4_val
  7000  070E                     l4038:
  7001                           
  7002                           ;main.c: 359:   if (PR4_val > 255){
  7003  070E  083B               	movf	setFrequency@PR4_val+1,w
  7004  070F  3A80               	xorlw	128
  7005  0710  00B9               	movwf	??_setFrequency
  7006  0711  3081               	movlw	129
  7007  0712  0239               	subwf	??_setFrequency,w
  7008  0713  1D03               	skipz
  7009  0714  2F17               	goto	u2655
  7010  0715  3000               	movlw	0
  7011  0716  023A               	subwf	setFrequency@PR4_val,w
  7012  0717                     u2655:
  7013  0717  1C03               	skipc
  7014  0718  2F1A               	goto	u2651
  7015  0719  2F1B               	goto	u2650
  7016  071A                     u2651:
  7017  071A  2F20               	goto	l692
  7018  071B                     u2650:
  7019  071B                     l4040:
  7020                           
  7021                           ;main.c: 360:     PR4_val = 255;
  7022  071B  30FF               	movlw	255
  7023  071C  0020               	movlb	0	; select bank0
  7024  071D  00BA               	movwf	setFrequency@PR4_val
  7025  071E  3000               	movlw	0
  7026  071F  00BB               	movwf	setFrequency@PR4_val+1
  7027  0720                     l692:	
  7028                           ;main.c: 361:   }
  7029                           
  7030                           
  7031                           ;main.c: 362:   if (PR4_val < 68){
  7032  0720  0020               	movlb	0	; select bank0
  7033  0721  083B               	movf	setFrequency@PR4_val+1,w
  7034  0722  3A80               	xorlw	128
  7035  0723  00B9               	movwf	??_setFrequency
  7036  0724  3080               	movlw	128
  7037  0725  0239               	subwf	??_setFrequency,w
  7038  0726  1D03               	skipz
  7039  0727  2F2A               	goto	u2665
  7040  0728  3044               	movlw	68
  7041  0729  023A               	subwf	setFrequency@PR4_val,w
  7042  072A                     u2665:
  7043  072A  1803               	skipnc
  7044  072B  2F2D               	goto	u2661
  7045  072C  2F2E               	goto	u2660
  7046  072D                     u2661:
  7047  072D  2F33               	goto	l4044
  7048  072E                     u2660:
  7049  072E                     l4042:
  7050                           
  7051                           ;main.c: 363:     PR4_val = 68;
  7052  072E  3044               	movlw	68
  7053  072F  0020               	movlb	0	; select bank0
  7054  0730  00BA               	movwf	setFrequency@PR4_val
  7055  0731  3000               	movlw	0
  7056  0732  00BB               	movwf	setFrequency@PR4_val+1
  7057  0733                     l4044:
  7058                           
  7059                           ;main.c: 370:   (INTCONbits.GIE = 0);
  7060  0733  138B               	bcf	11,7	;volatile
  7061  0734                     l4046:
  7062                           
  7063                           ;main.c: 371:   TMR4_LoadPeriodRegister((uint16_t)PR4_val);
  7064  0734  0020               	movlb	0	; select bank0
  7065  0735  083A               	movf	setFrequency@PR4_val,w
  7066  0736  318A  22C5  3186   	fcall	_TMR4_LoadPeriodRegister
  7067  0739                     l4048:
  7068                           
  7069                           ;main.c: 372:   if (0 == frequency_hz){
  7070  0739  0020               	movlb	0	; select bank0
  7071  073A  0837               	movf	setFrequency@frequency_hz,w
  7072  073B  0438               	iorwf	setFrequency@frequency_hz+1,w
  7073  073C  1D03               	btfss	3,2
  7074  073D  2F3F               	goto	u2671
  7075  073E  2F40               	goto	u2670
  7076  073F                     u2671:
  7077  073F  2F43               	goto	l4052
  7078  0740                     u2670:
  7079  0740                     l4050:
  7080                           
  7081                           ;main.c: 373:     dc_frequency_flag = 1;
  7082  0740  01FA               	clrf	_dc_frequency_flag
  7083  0741  0AFA               	incf	_dc_frequency_flag,f
  7084                           
  7085                           ;main.c: 374:   } else {
  7086  0742  2F44               	goto	l4054
  7087  0743                     l4052:
  7088                           
  7089                           ;main.c: 375:     dc_frequency_flag = 0;
  7090  0743  01FA               	clrf	_dc_frequency_flag
  7091  0744                     l4054:
  7092                           
  7093                           ;main.c: 377:   (INTCONbits.GIE = 1);
  7094  0744  178B               	bsf	11,7	;volatile
  7095  0745                     l696:
  7096  0745  0008               	return
  7097  0746                     __end_of_setFrequency:
  7098                           
  7099                           	psect	text8
  7100  0AC5                     __ptext8:	
  7101 ;; *************** function _TMR4_LoadPeriodRegister *****************
  7102 ;; Defined at:
  7103 ;;		line 115 in file "mcc_generated_files/tmr4.c"
  7104 ;; Parameters:    Size  Location     Type
  7105 ;;  periodVal       1    wreg     unsigned char 
  7106 ;; Auto vars:     Size  Location     Type
  7107 ;;  periodVal       1    3[COMMON] unsigned char 
  7108 ;; Return value:  Size  Location     Type
  7109 ;;                  1    wreg      void 
  7110 ;; Registers used:
  7111 ;;		wreg
  7112 ;; Tracked objects:
  7113 ;;		On entry : 0/0
  7114 ;;		On exit  : 0/0
  7115 ;;		Unchanged: 0/0
  7116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7117 ;;      Params:         0       0       0       0       0       0       0       0
  7118 ;;      Locals:         1       0       0       0       0       0       0       0
  7119 ;;      Temps:          0       0       0       0       0       0       0       0
  7120 ;;      Totals:         1       0       0       0       0       0       0       0
  7121 ;;Total ram usage:        1 bytes
  7122 ;; Hardware stack levels used: 1
  7123 ;; Hardware stack levels required when called: 4
  7124 ;; This function calls:
  7125 ;;		Nothing
  7126 ;; This function is called by:
  7127 ;;		_setFrequency
  7128 ;; This function uses a non-reentrant model
  7129 ;;
  7130                           
  7131                           
  7132                           ;psect for function _TMR4_LoadPeriodRegister
  7133  0AC5                     _TMR4_LoadPeriodRegister:
  7134                           
  7135                           ;incstack = 0
  7136                           ; Regs used in _TMR4_LoadPeriodRegister: [wreg]
  7137                           ;TMR4_LoadPeriodRegister@periodVal stored from wreg
  7138  0AC5  00F3               	movwf	TMR4_LoadPeriodRegister@periodVal
  7139  0AC6                     l3760:
  7140                           
  7141                           ;mcc_generated_files/tmr4.c: 115: void TMR4_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr4.c: 116: {;mcc_generated_files/tmr4.c: 117:    PR4 = periodVal;
  7142  0AC6  0873               	movf	TMR4_LoadPeriodRegister@periodVal,w
  7143  0AC7  0028               	movlb	8	; select bank8
  7144  0AC8  0096               	movwf	22	;volatile
  7145  0AC9                     l413:
  7146  0AC9  0008               	return
  7147  0ACA                     __end_of_TMR4_LoadPeriodRegister:
  7148                           
  7149                           	psect	text9
  7150  03BD                     __ptext9:	
  7151 ;; *************** function _setCurrent *****************
  7152 ;; Defined at:
  7153 ;;		line 331 in file "main.c"
  7154 ;; Parameters:    Size  Location     Type
  7155 ;;  microamps       2   25[BANK0 ] int 
  7156 ;;  Vdd_mv          2   27[BANK0 ] int 
  7157 ;; Auto vars:     Size  Location     Type
  7158 ;;  DACValue        2   39[BANK0 ] int 
  7159 ;;  Vdac_mv         2   37[BANK0 ] int 
  7160 ;; Return value:  Size  Location     Type
  7161 ;;                  1    wreg      void 
  7162 ;; Registers used:
  7163 ;;		wreg, status,2, status,0, pclath, cstack
  7164 ;; Tracked objects:
  7165 ;;		On entry : 0/0
  7166 ;;		On exit  : 0/0
  7167 ;;		Unchanged: 0/0
  7168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7169 ;;      Params:         0       4       0       0       0       0       0       0
  7170 ;;      Locals:         0       4       0       0       0       0       0       0
  7171 ;;      Temps:          0       8       0       0       0       0       0       0
  7172 ;;      Totals:         0      16       0       0       0       0       0       0
  7173 ;;Total ram usage:       16 bytes
  7174 ;; Hardware stack levels used: 1
  7175 ;; Hardware stack levels required when called: 5
  7176 ;; This function calls:
  7177 ;;		___aldiv
  7178 ;;		___awdiv
  7179 ;;		___lmul
  7180 ;; This function is called by:
  7181 ;;		_process_remote_command
  7182 ;;		_main
  7183 ;; This function uses a non-reentrant model
  7184 ;;
  7185                           
  7186                           
  7187                           ;psect for function _setCurrent
  7188  03BD                     _setCurrent:
  7189  03BD                     l4024:	
  7190                           ;incstack = 0
  7191                           ; Regs used in _setCurrent: [wreg+status,2+status,0+pclath+cstack]
  7192                           
  7193                           
  7194                           ;main.c: 331: void setCurrent(int microamps, int Vdd_mv);main.c: 332: {;main.c: 333:   i
      +                          nt Vdac_mv = Vdd_mv - ((int32_t)(4700) * microamps + 500) / 1000;
  7195  03BD  3000               	movlw	0
  7196  03BE  0020               	movlb	0	; select bank0
  7197  03BF  00AB               	movwf	___aldiv@divisor+3
  7198  03C0  3000               	movlw	0
  7199  03C1  00AA               	movwf	___aldiv@divisor+2
  7200  03C2  3003               	movlw	3
  7201  03C3  00A9               	movwf	___aldiv@divisor+1
  7202  03C4  30E8               	movlw	232
  7203  03C5  00A8               	movwf	___aldiv@divisor
  7204  03C6  30F4               	movlw	244
  7205  03C7  00BD               	movwf	??_setCurrent
  7206  03C8  3001               	movlw	1
  7207  03C9  00BE               	movwf	??_setCurrent+1
  7208  03CA  3000               	movlw	0
  7209  03CB  00BF               	movwf	??_setCurrent+2
  7210  03CC  3000               	movlw	0
  7211  03CD  00C0               	movwf	??_setCurrent+3
  7212  03CE  0839               	movf	setCurrent@microamps,w
  7213  03CF  00A0               	movwf	___lmul@multiplier
  7214  03D0  083A               	movf	setCurrent@microamps+1,w
  7215  03D1  00A1               	movwf	___lmul@multiplier+1
  7216  03D2  0D89               	rlf	9,f
  7217  03D3  3B89               	subwfb	9,f
  7218  03D4  0989               	comf	9,f
  7219  03D5  00A2               	movwf	___lmul@multiplier+2
  7220  03D6  00A3               	movwf	___lmul@multiplier+3
  7221  03D7  3000               	movlw	0
  7222  03D8  00A7               	movwf	___lmul@multiplicand+3
  7223  03D9  3000               	movlw	0
  7224  03DA  00A6               	movwf	___lmul@multiplicand+2
  7225  03DB  3012               	movlw	18
  7226  03DC  00A5               	movwf	___lmul@multiplicand+1
  7227  03DD  305C               	movlw	92
  7228  03DE  00A4               	movwf	___lmul@multiplicand
  7229  03DF  318E  2679  3183   	fcall	___lmul
  7230  03E2  0020               	movlb	0	; select bank0
  7231  03E3  0820               	movf	?___lmul,w
  7232  03E4  07BD               	addwf	??_setCurrent,f
  7233  03E5  0821               	movf	?___lmul+1,w
  7234  03E6  3DBE               	addwfc	??_setCurrent+1,f
  7235  03E7  0822               	movf	?___lmul+2,w
  7236  03E8  3DBF               	addwfc	??_setCurrent+2,f
  7237  03E9  0823               	movf	?___lmul+3,w
  7238  03EA  3DC0               	addwfc	??_setCurrent+3,f
  7239  03EB  0840               	movf	??_setCurrent+3,w
  7240  03EC  00AF               	movwf	___aldiv@dividend+3
  7241  03ED  083F               	movf	??_setCurrent+2,w
  7242  03EE  00AE               	movwf	___aldiv@dividend+2
  7243  03EF  083E               	movf	??_setCurrent+1,w
  7244  03F0  00AD               	movwf	___aldiv@dividend+1
  7245  03F1  083D               	movf	??_setCurrent,w
  7246  03F2  00AC               	movwf	___aldiv@dividend
  7247  03F3  3184  24FA  3183   	fcall	___aldiv
  7248  03F6  0020               	movlb	0	; select bank0
  7249  03F7  0828               	movf	?___aldiv,w
  7250  03F8  023B               	subwf	setCurrent@Vdd_mv,w
  7251  03F9  00C5               	movwf	setCurrent@Vdac_mv
  7252  03FA  0829               	movf	?___aldiv+1,w
  7253  03FB  3B3C               	subwfb	setCurrent@Vdd_mv+1,w
  7254  03FC  00C6               	movwf	setCurrent@Vdac_mv+1
  7255                           
  7256                           ;main.c: 334:   int DACValue = (256L * Vdac_mv + Vdd_mv/2) / Vdd_mv;
  7257  03FD  083B               	movf	setCurrent@Vdd_mv,w
  7258  03FE  00A8               	movwf	___aldiv@divisor
  7259  03FF  083C               	movf	setCurrent@Vdd_mv+1,w
  7260  0400  00A9               	movwf	___aldiv@divisor+1
  7261  0401  0D89               	rlf	9,f
  7262  0402  3B89               	subwfb	9,f
  7263  0403  0989               	comf	9,f
  7264  0404  00AA               	movwf	___aldiv@divisor+2
  7265  0405  00AB               	movwf	___aldiv@divisor+3
  7266  0406  3002               	movlw	2
  7267  0407  00F3               	movwf	___awdiv@divisor
  7268  0408  3000               	movlw	0
  7269  0409  00F4               	movwf	___awdiv@divisor+1
  7270  040A  083C               	movf	setCurrent@Vdd_mv+1,w
  7271  040B  00F6               	movwf	___awdiv@dividend+1
  7272  040C  083B               	movf	setCurrent@Vdd_mv,w
  7273  040D  00F5               	movwf	___awdiv@dividend
  7274  040E  3187  2746  3183   	fcall	___awdiv
  7275  0411  0873               	movf	?___awdiv,w
  7276  0412  0020               	movlb	0	; select bank0
  7277  0413  00BD               	movwf	??_setCurrent
  7278  0414  0874               	movf	?___awdiv+1,w
  7279  0415  00BE               	movwf	??_setCurrent+1
  7280  0416  3000               	movlw	0
  7281  0417  1BBE               	btfsc	??_setCurrent+1,7
  7282  0418  30FF               	movlw	255
  7283  0419  00BF               	movwf	??_setCurrent+2
  7284  041A  00C0               	movwf	??_setCurrent+3
  7285  041B  0845               	movf	setCurrent@Vdac_mv,w
  7286  041C  00C1               	movwf	??_setCurrent+4
  7287  041D  0846               	movf	setCurrent@Vdac_mv+1,w
  7288  041E  00C2               	movwf	??_setCurrent+5
  7289  041F  3000               	movlw	0
  7290  0420  1BC2               	btfsc	??_setCurrent+5,7
  7291  0421  30FF               	movlw	255
  7292  0422  00C3               	movwf	??_setCurrent+6
  7293  0423  00C4               	movwf	??_setCurrent+7
  7294  0424  3008               	movlw	8
  7295  0425                     u2625:
  7296  0425  35C1               	lslf	??_setCurrent+4,f
  7297  0426  0DC2               	rlf	??_setCurrent+5,f
  7298  0427  0DC3               	rlf	??_setCurrent+6,f
  7299  0428  0DC4               	rlf	??_setCurrent+7,f
  7300  0429                     u2620:
  7301  0429  0B89               	decfsz	9,f
  7302  042A  2C25               	goto	u2625
  7303  042B  0841               	movf	??_setCurrent+4,w
  7304  042C  07BD               	addwf	??_setCurrent,f
  7305  042D  0842               	movf	??_setCurrent+5,w
  7306  042E  3DBE               	addwfc	??_setCurrent+1,f
  7307  042F  0843               	movf	??_setCurrent+6,w
  7308  0430  3DBF               	addwfc	??_setCurrent+2,f
  7309  0431  0844               	movf	??_setCurrent+7,w
  7310  0432  3DC0               	addwfc	??_setCurrent+3,f
  7311  0433  0840               	movf	??_setCurrent+3,w
  7312  0434  00AF               	movwf	___aldiv@dividend+3
  7313  0435  083F               	movf	??_setCurrent+2,w
  7314  0436  00AE               	movwf	___aldiv@dividend+2
  7315  0437  083E               	movf	??_setCurrent+1,w
  7316  0438  00AD               	movwf	___aldiv@dividend+1
  7317  0439  083D               	movf	??_setCurrent,w
  7318  043A  00AC               	movwf	___aldiv@dividend
  7319  043B  3184  24FA  3183   	fcall	___aldiv
  7320  043E  0020               	movlb	0	; select bank0
  7321  043F  0829               	movf	?___aldiv+1,w
  7322  0440  00C8               	movwf	setCurrent@DACValue+1
  7323  0441  0828               	movf	?___aldiv,w
  7324  0442  00C7               	movwf	setCurrent@DACValue
  7325  0443                     l4026:
  7326                           
  7327                           ;main.c: 335:   if(DACValue > 255){DACValue = 255;}
  7328  0443  0848               	movf	setCurrent@DACValue+1,w
  7329  0444  3A80               	xorlw	128
  7330  0445  00BD               	movwf	??_setCurrent
  7331  0446  3081               	movlw	129
  7332  0447  023D               	subwf	??_setCurrent,w
  7333  0448  1D03               	skipz
  7334  0449  2C4C               	goto	u2635
  7335  044A  3000               	movlw	0
  7336  044B  0247               	subwf	setCurrent@DACValue,w
  7337  044C                     u2635:
  7338  044C  1C03               	skipc
  7339  044D  2C4F               	goto	u2631
  7340  044E  2C50               	goto	u2630
  7341  044F                     u2631:
  7342  044F  2C55               	goto	l4030
  7343  0450                     u2630:
  7344  0450                     l4028:
  7345  0450  30FF               	movlw	255
  7346  0451  0020               	movlb	0	; select bank0
  7347  0452  00C7               	movwf	setCurrent@DACValue
  7348  0453  3000               	movlw	0
  7349  0454  00C8               	movwf	setCurrent@DACValue+1
  7350  0455                     l4030:
  7351                           
  7352                           ;main.c: 336:   if(DACValue < 0){DACValue = 0;}
  7353  0455  0020               	movlb	0	; select bank0
  7354  0456  1FC8               	btfss	setCurrent@DACValue+1,7
  7355  0457  2C59               	goto	u2641
  7356  0458  2C5A               	goto	u2640
  7357  0459                     u2641:
  7358  0459  2C5C               	goto	l4034
  7359  045A                     u2640:
  7360  045A                     l4032:
  7361  045A  01C7               	clrf	setCurrent@DACValue
  7362  045B  01C8               	clrf	setCurrent@DACValue+1
  7363  045C                     l4034:
  7364                           
  7365                           ;main.c: 337:   dac_value = (uint16_t)DACValue;
  7366  045C  0848               	movf	setCurrent@DACValue+1,w
  7367  045D  0021               	movlb	1	; select bank1
  7368  045E  00A9               	movwf	(_dac_value+1)^(0+128)
  7369  045F  0020               	movlb	0	; select bank0
  7370  0460  0847               	movf	setCurrent@DACValue,w
  7371  0461  0021               	movlb	1	; select bank1
  7372  0462  00A8               	movwf	_dac_value^(0+128)
  7373  0463                     l689:
  7374  0463  0008               	return
  7375  0464                     __end_of_setCurrent:
  7376                           
  7377                           	psect	text10
  7378  0E79                     __ptext10:	
  7379 ;; *************** function ___lmul *****************
  7380 ;; Defined at:
  7381 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul32.c"
  7382 ;; Parameters:    Size  Location     Type
  7383 ;;  multiplier      4    0[BANK0 ] unsigned long 
  7384 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  7385 ;; Auto vars:     Size  Location     Type
  7386 ;;  product         4    3[COMMON] unsigned long 
  7387 ;; Return value:  Size  Location     Type
  7388 ;;                  4    0[BANK0 ] unsigned long 
  7389 ;; Registers used:
  7390 ;;		wreg, status,2, status,0
  7391 ;; Tracked objects:
  7392 ;;		On entry : 0/0
  7393 ;;		On exit  : 0/0
  7394 ;;		Unchanged: 0/0
  7395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7396 ;;      Params:         0       8       0       0       0       0       0       0
  7397 ;;      Locals:         4       0       0       0       0       0       0       0
  7398 ;;      Temps:          0       0       0       0       0       0       0       0
  7399 ;;      Totals:         4       8       0       0       0       0       0       0
  7400 ;;Total ram usage:       12 bytes
  7401 ;; Hardware stack levels used: 1
  7402 ;; Hardware stack levels required when called: 4
  7403 ;; This function calls:
  7404 ;;		Nothing
  7405 ;; This function is called by:
  7406 ;;		_setCurrent
  7407 ;;		_setFrequency
  7408 ;; This function uses a non-reentrant model
  7409 ;;
  7410                           
  7411                           
  7412                           ;psect for function ___lmul
  7413  0E79                     ___lmul:
  7414  0E79                     l3830:	
  7415                           ;incstack = 0
  7416                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7417                           
  7418  0E79  3000               	movlw	0
  7419  0E7A  00F6               	movwf	___lmul@product+3
  7420  0E7B  3000               	movlw	0
  7421  0E7C  00F5               	movwf	___lmul@product+2
  7422  0E7D  3000               	movlw	0
  7423  0E7E  00F4               	movwf	___lmul@product+1
  7424  0E7F  3000               	movlw	0
  7425  0E80  00F3               	movwf	___lmul@product
  7426  0E81                     l3832:
  7427  0E81  0020               	movlb	0	; select bank0
  7428  0E82  1C20               	btfss	___lmul@multiplier,0
  7429  0E83  2E85               	goto	u2351
  7430  0E84  2E86               	goto	u2350
  7431  0E85                     u2351:
  7432  0E85  2E8E               	goto	l3836
  7433  0E86                     u2350:
  7434  0E86                     l3834:
  7435  0E86  0824               	movf	___lmul@multiplicand,w
  7436  0E87  07F3               	addwf	___lmul@product,f
  7437  0E88  0825               	movf	___lmul@multiplicand+1,w
  7438  0E89  3DF4               	addwfc	___lmul@product+1,f
  7439  0E8A  0826               	movf	___lmul@multiplicand+2,w
  7440  0E8B  3DF5               	addwfc	___lmul@product+2,f
  7441  0E8C  0827               	movf	___lmul@multiplicand+3,w
  7442  0E8D  3DF6               	addwfc	___lmul@product+3,f
  7443  0E8E                     l3836:
  7444  0E8E  3001               	movlw	1
  7445  0E8F                     u2365:
  7446  0E8F  35A4               	lslf	___lmul@multiplicand,f
  7447  0E90  0DA5               	rlf	___lmul@multiplicand+1,f
  7448  0E91  0DA6               	rlf	___lmul@multiplicand+2,f
  7449  0E92  0DA7               	rlf	___lmul@multiplicand+3,f
  7450  0E93  0B89               	decfsz	9,f
  7451  0E94  2E8F               	goto	u2365
  7452  0E95                     l3838:
  7453  0E95  3001               	movlw	1
  7454  0E96                     u2375:
  7455  0E96  36A3               	lsrf	___lmul@multiplier+3,f
  7456  0E97  0CA2               	rrf	___lmul@multiplier+2,f
  7457  0E98  0CA1               	rrf	___lmul@multiplier+1,f
  7458  0E99  0CA0               	rrf	___lmul@multiplier,f
  7459  0E9A  0B89               	decfsz	9,f
  7460  0E9B  2E96               	goto	u2375
  7461  0E9C  0823               	movf	___lmul@multiplier+3,w
  7462  0E9D  0422               	iorwf	___lmul@multiplier+2,w
  7463  0E9E  0421               	iorwf	___lmul@multiplier+1,w
  7464  0E9F  0420               	iorwf	___lmul@multiplier,w
  7465  0EA0  1D03               	skipz
  7466  0EA1  2EA3               	goto	u2381
  7467  0EA2  2EA4               	goto	u2380
  7468  0EA3                     u2381:
  7469  0EA3  2E81               	goto	l3832
  7470  0EA4                     u2380:
  7471  0EA4                     l3840:
  7472  0EA4  0876               	movf	___lmul@product+3,w
  7473  0EA5  00A3               	movwf	?___lmul+3
  7474  0EA6  0875               	movf	___lmul@product+2,w
  7475  0EA7  00A2               	movwf	?___lmul+2
  7476  0EA8  0874               	movf	___lmul@product+1,w
  7477  0EA9  00A1               	movwf	?___lmul+1
  7478  0EAA  0873               	movf	___lmul@product,w
  7479  0EAB  00A0               	movwf	?___lmul
  7480  0EAC                     l850:
  7481  0EAC  0008               	return
  7482  0EAD                     __end_of___lmul:
  7483                           
  7484                           	psect	text11
  7485  0746                     __ptext11:	
  7486 ;; *************** function ___awdiv *****************
  7487 ;; Defined at:
  7488 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;  divisor         2    3[COMMON] int 
  7491 ;;  dividend        2    5[COMMON] int 
  7492 ;; Auto vars:     Size  Location     Type
  7493 ;;  quotient        2    2[BANK0 ] int 
  7494 ;;  sign            1    1[BANK0 ] unsigned char 
  7495 ;;  counter         1    0[BANK0 ] unsigned char 
  7496 ;; Return value:  Size  Location     Type
  7497 ;;                  2    3[COMMON] int 
  7498 ;; Registers used:
  7499 ;;		wreg, status,2, status,0
  7500 ;; Tracked objects:
  7501 ;;		On entry : 0/0
  7502 ;;		On exit  : 0/0
  7503 ;;		Unchanged: 0/0
  7504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7505 ;;      Params:         4       0       0       0       0       0       0       0
  7506 ;;      Locals:         0       4       0       0       0       0       0       0
  7507 ;;      Temps:          1       0       0       0       0       0       0       0
  7508 ;;      Totals:         5       4       0       0       0       0       0       0
  7509 ;;Total ram usage:        9 bytes
  7510 ;; Hardware stack levels used: 1
  7511 ;; Hardware stack levels required when called: 4
  7512 ;; This function calls:
  7513 ;;		Nothing
  7514 ;; This function is called by:
  7515 ;;		_setCurrent
  7516 ;; This function uses a non-reentrant model
  7517 ;;
  7518                           
  7519                           
  7520                           ;psect for function ___awdiv
  7521  0746                     ___awdiv:
  7522  0746                     l3884:	
  7523                           ;incstack = 0
  7524                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7525                           
  7526  0746  0020               	movlb	0	; select bank0
  7527  0747  01A1               	clrf	___awdiv@sign
  7528  0748                     l3886:
  7529  0748  1FF4               	btfss	___awdiv@divisor+1,7
  7530  0749  2F4B               	goto	u2491
  7531  074A  2F4C               	goto	u2490
  7532  074B                     u2491:
  7533  074B  2F53               	goto	l3892
  7534  074C                     u2490:
  7535  074C                     l3888:
  7536  074C  09F3               	comf	___awdiv@divisor,f
  7537  074D  09F4               	comf	___awdiv@divisor+1,f
  7538  074E  0AF3               	incf	___awdiv@divisor,f
  7539  074F  1903               	skipnz
  7540  0750  0AF4               	incf	___awdiv@divisor+1,f
  7541  0751                     l3890:
  7542  0751  01A1               	clrf	___awdiv@sign
  7543  0752  0AA1               	incf	___awdiv@sign,f
  7544  0753                     l3892:
  7545  0753  1FF6               	btfss	___awdiv@dividend+1,7
  7546  0754  2F56               	goto	u2501
  7547  0755  2F57               	goto	u2500
  7548  0756                     u2501:
  7549  0756  2F60               	goto	l3898
  7550  0757                     u2500:
  7551  0757                     l3894:
  7552  0757  09F5               	comf	___awdiv@dividend,f
  7553  0758  09F6               	comf	___awdiv@dividend+1,f
  7554  0759  0AF5               	incf	___awdiv@dividend,f
  7555  075A  1903               	skipnz
  7556  075B  0AF6               	incf	___awdiv@dividend+1,f
  7557  075C                     l3896:
  7558  075C  3001               	movlw	1
  7559  075D  00F7               	movwf	??___awdiv
  7560  075E  0877               	movf	??___awdiv,w
  7561  075F  06A1               	xorwf	___awdiv@sign,f
  7562  0760                     l3898:
  7563  0760  01A2               	clrf	___awdiv@quotient
  7564  0761  01A3               	clrf	___awdiv@quotient+1
  7565  0762                     l3900:
  7566  0762  0873               	movf	___awdiv@divisor,w
  7567  0763  0474               	iorwf	___awdiv@divisor+1,w
  7568  0764  1903               	btfsc	3,2
  7569  0765  2F67               	goto	u2511
  7570  0766  2F68               	goto	u2510
  7571  0767                     u2511:
  7572  0767  2F97               	goto	l3920
  7573  0768                     u2510:
  7574  0768                     l3902:
  7575  0768  01A0               	clrf	___awdiv@counter
  7576  0769  0AA0               	incf	___awdiv@counter,f
  7577  076A  2F74               	goto	l3908
  7578  076B                     l3904:
  7579  076B  3001               	movlw	1
  7580  076C                     u2525:
  7581  076C  35F3               	lslf	___awdiv@divisor,f
  7582  076D  0DF4               	rlf	___awdiv@divisor+1,f
  7583  076E  0B89               	decfsz	9,f
  7584  076F  2F6C               	goto	u2525
  7585  0770                     l3906:
  7586  0770  3001               	movlw	1
  7587  0771  00F7               	movwf	??___awdiv
  7588  0772  0877               	movf	??___awdiv,w
  7589  0773  07A0               	addwf	___awdiv@counter,f
  7590  0774                     l3908:
  7591  0774  1FF4               	btfss	___awdiv@divisor+1,7
  7592  0775  2F77               	goto	u2531
  7593  0776  2F78               	goto	u2530
  7594  0777                     u2531:
  7595  0777  2F6B               	goto	l3904
  7596  0778                     u2530:
  7597  0778                     l3910:
  7598  0778  3001               	movlw	1
  7599  0779                     u2545:
  7600  0779  35A2               	lslf	___awdiv@quotient,f
  7601  077A  0DA3               	rlf	___awdiv@quotient+1,f
  7602  077B  0B89               	decfsz	9,f
  7603  077C  2F79               	goto	u2545
  7604  077D  0874               	movf	___awdiv@divisor+1,w
  7605  077E  0276               	subwf	___awdiv@dividend+1,w
  7606  077F  1D03               	skipz
  7607  0780  2F83               	goto	u2555
  7608  0781  0873               	movf	___awdiv@divisor,w
  7609  0782  0275               	subwf	___awdiv@dividend,w
  7610  0783                     u2555:
  7611  0783  1C03               	skipc
  7612  0784  2F86               	goto	u2551
  7613  0785  2F87               	goto	u2550
  7614  0786                     u2551:
  7615  0786  2F8C               	goto	l3916
  7616  0787                     u2550:
  7617  0787                     l3912:
  7618  0787  0873               	movf	___awdiv@divisor,w
  7619  0788  02F5               	subwf	___awdiv@dividend,f
  7620  0789  0874               	movf	___awdiv@divisor+1,w
  7621  078A  3BF6               	subwfb	___awdiv@dividend+1,f
  7622  078B                     l3914:
  7623  078B  1422               	bsf	___awdiv@quotient,0
  7624  078C                     l3916:
  7625  078C  3001               	movlw	1
  7626  078D                     u2565:
  7627  078D  36F4               	lsrf	___awdiv@divisor+1,f
  7628  078E  0CF3               	rrf	___awdiv@divisor,f
  7629  078F  0B89               	decfsz	9,f
  7630  0790  2F8D               	goto	u2565
  7631  0791                     l3918:
  7632  0791  3001               	movlw	1
  7633  0792  02A0               	subwf	___awdiv@counter,f
  7634  0793  1D03               	btfss	3,2
  7635  0794  2F96               	goto	u2571
  7636  0795  2F97               	goto	u2570
  7637  0796                     u2571:
  7638  0796  2F78               	goto	l3910
  7639  0797                     u2570:
  7640  0797                     l3920:
  7641  0797  0821               	movf	___awdiv@sign,w
  7642  0798  1903               	btfsc	3,2
  7643  0799  2F9B               	goto	u2581
  7644  079A  2F9C               	goto	u2580
  7645  079B                     u2581:
  7646  079B  2FA1               	goto	l3924
  7647  079C                     u2580:
  7648  079C                     l3922:
  7649  079C  09A2               	comf	___awdiv@quotient,f
  7650  079D  09A3               	comf	___awdiv@quotient+1,f
  7651  079E  0AA2               	incf	___awdiv@quotient,f
  7652  079F  1903               	skipnz
  7653  07A0  0AA3               	incf	___awdiv@quotient+1,f
  7654  07A1                     l3924:
  7655  07A1  0823               	movf	___awdiv@quotient+1,w
  7656  07A2  00F4               	movwf	?___awdiv+1
  7657  07A3  0822               	movf	___awdiv@quotient,w
  7658  07A4  00F3               	movwf	?___awdiv
  7659  07A5                     l989:
  7660  07A5  0008               	return
  7661  07A6                     __end_of___awdiv:
  7662                           
  7663                           	psect	text12
  7664  0F29                     __ptext12:	
  7665 ;; *************** function _selectSomething *****************
  7666 ;; Defined at:
  7667 ;;		line 263 in file "main.c"
  7668 ;; Parameters:    Size  Location     Type
  7669 ;;		None
  7670 ;; Auto vars:     Size  Location     Type
  7671 ;;		None
  7672 ;; Return value:  Size  Location     Type
  7673 ;;                  1    wreg      void 
  7674 ;; Registers used:
  7675 ;;		wreg, status,2, status,0, pclath, cstack
  7676 ;; Tracked objects:
  7677 ;;		On entry : 0/0
  7678 ;;		On exit  : 0/0
  7679 ;;		Unchanged: 0/0
  7680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7681 ;;      Params:         0       0       0       0       0       0       0       0
  7682 ;;      Locals:         0       0       0       0       0       0       0       0
  7683 ;;      Temps:          0       2       0       0       0       0       0       0
  7684 ;;      Totals:         0       2       0       0       0       0       0       0
  7685 ;;Total ram usage:        2 bytes
  7686 ;; Hardware stack levels used: 1
  7687 ;; Hardware stack levels required when called: 5
  7688 ;; This function calls:
  7689 ;;		_setLEDColor
  7690 ;; This function is called by:
  7691 ;;		_process_remote_command
  7692 ;; This function uses a non-reentrant model
  7693 ;;
  7694                           
  7695                           
  7696                           ;psect for function _selectSomething
  7697  0F29                     _selectSomething:
  7698  0F29                     l3962:	
  7699                           ;incstack = 0
  7700                           ; Regs used in _selectSomething: [wreg+status,2+status,0+pclath+cstack]
  7701                           
  7702                           
  7703                           ;main.c: 265:   setLEDColor(0, 180, 230);
  7704  0F29  30B4               	movlw	180
  7705  0F2A  0020               	movlb	0	; select bank0
  7706  0F2B  00A0               	movwf	??_selectSomething
  7707  0F2C  0820               	movf	??_selectSomething,w
  7708  0F2D  00F3               	movwf	setLEDColor@green
  7709  0F2E  30E6               	movlw	230
  7710  0F2F  00A1               	movwf	??_selectSomething+1
  7711  0F30  0821               	movf	??_selectSomething+1,w
  7712  0F31  00F4               	movwf	setLEDColor@blue
  7713  0F32  3000               	movlw	0
  7714  0F33  318B  23D6  318F   	fcall	_setLEDColor
  7715  0F36                     l3964:
  7716                           
  7717                           ;main.c: 266:   _delay((unsigned long)((500)*(4000000/4000.0)));
  7718  0F36  3003               	movlw	3
  7719  0F37  0020               	movlb	0	; select bank0
  7720  0F38  00A1               	movwf	??_selectSomething+1
  7721  0F39  308A               	movlw	138
  7722  0F3A  00A0               	movwf	??_selectSomething
  7723  0F3B  3055               	movlw	85
  7724  0F3C                     u3067:
  7725  0F3C  0B89               	decfsz	9,f
  7726  0F3D  2F3C               	goto	u3067
  7727  0F3E  0BA0               	decfsz	??_selectSomething,f
  7728  0F3F  2F3C               	goto	u3067
  7729  0F40  0BA1               	decfsz	??_selectSomething+1,f
  7730  0F41  2F3C               	goto	u3067
  7731  0F42  3200               	nop2
  7732  0F43                     l3966:
  7733                           
  7734                           ;main.c: 267:   setLEDColor(0, 0, 0);
  7735  0F43  01F3               	clrf	setLEDColor@green
  7736  0F44  01F4               	clrf	setLEDColor@blue
  7737  0F45  3000               	movlw	0
  7738  0F46  318B  23D6  318F   	fcall	_setLEDColor
  7739                           
  7740                           ;main.c: 268:   _delay((unsigned long)((500)*(4000000/4000.0)));
  7741  0F49  3003               	movlw	3
  7742  0F4A  0020               	movlb	0	; select bank0
  7743  0F4B  00A1               	movwf	??_selectSomething+1
  7744  0F4C  308A               	movlw	138
  7745  0F4D  00A0               	movwf	??_selectSomething
  7746  0F4E  3055               	movlw	85
  7747  0F4F                     u3077:
  7748  0F4F  0B89               	decfsz	9,f
  7749  0F50  2F4F               	goto	u3077
  7750  0F51  0BA0               	decfsz	??_selectSomething,f
  7751  0F52  2F4F               	goto	u3077
  7752  0F53  0BA1               	decfsz	??_selectSomething+1,f
  7753  0F54  2F4F               	goto	u3077
  7754  0F55  3200               	nop2
  7755  0F56                     l3968:
  7756                           
  7757                           ;main.c: 269:   setLEDColor(0, 180, 230);
  7758  0F56  30B4               	movlw	180
  7759  0F57  0020               	movlb	0	; select bank0
  7760  0F58  00A0               	movwf	??_selectSomething
  7761  0F59  0820               	movf	??_selectSomething,w
  7762  0F5A  00F3               	movwf	setLEDColor@green
  7763  0F5B  30E6               	movlw	230
  7764  0F5C  00A1               	movwf	??_selectSomething+1
  7765  0F5D  0821               	movf	??_selectSomething+1,w
  7766  0F5E  00F4               	movwf	setLEDColor@blue
  7767  0F5F  3000               	movlw	0
  7768  0F60  318B  23D6  318F   	fcall	_setLEDColor
  7769  0F63                     l3970:
  7770                           
  7771                           ;main.c: 270:   _delay((unsigned long)((500)*(4000000/4000.0)));
  7772  0F63  3003               	movlw	3
  7773  0F64  0020               	movlb	0	; select bank0
  7774  0F65  00A1               	movwf	??_selectSomething+1
  7775  0F66  308A               	movlw	138
  7776  0F67  00A0               	movwf	??_selectSomething
  7777  0F68  3055               	movlw	85
  7778  0F69                     u3087:
  7779  0F69  0B89               	decfsz	9,f
  7780  0F6A  2F69               	goto	u3087
  7781  0F6B  0BA0               	decfsz	??_selectSomething,f
  7782  0F6C  2F69               	goto	u3087
  7783  0F6D  0BA1               	decfsz	??_selectSomething+1,f
  7784  0F6E  2F69               	goto	u3087
  7785  0F6F  3200               	nop2
  7786                           
  7787                           ;main.c: 271:   setLEDColor(0, 0, 0);
  7788  0F70  01F3               	clrf	setLEDColor@green
  7789  0F71  01F4               	clrf	setLEDColor@blue
  7790  0F72  3000               	movlw	0
  7791  0F73  318B  23D6  318F   	fcall	_setLEDColor
  7792  0F76                     l3972:
  7793                           
  7794                           ;main.c: 272:   _delay((unsigned long)((500)*(4000000/4000.0)));
  7795  0F76  3003               	movlw	3
  7796  0F77  0020               	movlb	0	; select bank0
  7797  0F78  00A1               	movwf	??_selectSomething+1
  7798  0F79  308A               	movlw	138
  7799  0F7A  00A0               	movwf	??_selectSomething
  7800  0F7B  3055               	movlw	85
  7801  0F7C                     u3097:
  7802  0F7C  0B89               	decfsz	9,f
  7803  0F7D  2F7C               	goto	u3097
  7804  0F7E  0BA0               	decfsz	??_selectSomething,f
  7805  0F7F  2F7C               	goto	u3097
  7806  0F80  0BA1               	decfsz	??_selectSomething+1,f
  7807  0F81  2F7C               	goto	u3097
  7808  0F82  3200               	nop2
  7809  0F83                     l661:
  7810  0F83  0008               	return
  7811  0F84                     __end_of_selectSomething:
  7812                           
  7813                           	psect	text13
  7814  0CC4                     __ptext13:	
  7815 ;; *************** function _selectIncrease *****************
  7816 ;; Defined at:
  7817 ;;		line 291 in file "main.c"
  7818 ;; Parameters:    Size  Location     Type
  7819 ;;		None
  7820 ;; Auto vars:     Size  Location     Type
  7821 ;;		None
  7822 ;; Return value:  Size  Location     Type
  7823 ;;                  1    wreg      void 
  7824 ;; Registers used:
  7825 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7826 ;; Tracked objects:
  7827 ;;		On entry : 0/0
  7828 ;;		On exit  : 0/0
  7829 ;;		Unchanged: 0/0
  7830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7831 ;;      Params:         0       0       0       0       0       0       0       0
  7832 ;;      Locals:         0       0       0       0       0       0       0       0
  7833 ;;      Temps:          0       2       0       0       0       0       0       0
  7834 ;;      Totals:         0       2       0       0       0       0       0       0
  7835 ;;Total ram usage:        2 bytes
  7836 ;; Hardware stack levels used: 1
  7837 ;; Hardware stack levels required when called: 10
  7838 ;; This function calls:
  7839 ;;		_printf
  7840 ;;		_setLEDColor
  7841 ;; This function is called by:
  7842 ;;		_process_remote_command
  7843 ;; This function uses a non-reentrant model
  7844 ;;
  7845                           
  7846                           
  7847                           ;psect for function _selectIncrease
  7848  0CC4                     _selectIncrease:
  7849  0CC4                     l3992:	
  7850                           ;incstack = 0
  7851                           ; Regs used in _selectIncrease: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7852                           
  7853                           
  7854                           ;main.c: 292:   setLEDColor(0, 50, 255);
  7855  0CC4  3032               	movlw	50
  7856  0CC5  0020               	movlb	0	; select bank0
  7857  0CC6  00B9               	movwf	??_selectIncrease
  7858  0CC7  0839               	movf	??_selectIncrease,w
  7859  0CC8  00F3               	movwf	setLEDColor@green
  7860  0CC9  30FF               	movlw	255
  7861  0CCA  00BA               	movwf	??_selectIncrease+1
  7862  0CCB  083A               	movf	??_selectIncrease+1,w
  7863  0CCC  00F4               	movwf	setLEDColor@blue
  7864  0CCD  3000               	movlw	0
  7865  0CCE  318B  23D6  318C   	fcall	_setLEDColor
  7866  0CD1                     l3994:
  7867                           
  7868                           ;main.c: 293:   _delay((unsigned long)((100)*(4000000/4000.0)));
  7869  0CD1  3082               	movlw	130
  7870  0CD2  0020               	movlb	0	; select bank0
  7871  0CD3  00B9               	movwf	??_selectIncrease
  7872  0CD4  30DD               	movlw	221
  7873  0CD5                     u3107:
  7874  0CD5  0B89               	decfsz	9,f
  7875  0CD6  2CD5               	goto	u3107
  7876  0CD7  0BB9               	decfsz	??_selectIncrease,f
  7877  0CD8  2CD5               	goto	u3107
  7878  0CD9  3200               	nop2
  7879  0CDA                     l3996:
  7880                           
  7881                           ;main.c: 294:   setLEDColor(0, 0, 0);
  7882  0CDA  01F3               	clrf	setLEDColor@green
  7883  0CDB  01F4               	clrf	setLEDColor@blue
  7884  0CDC  3000               	movlw	0
  7885  0CDD  318B  23D6  318C   	fcall	_setLEDColor
  7886  0CE0                     l3998:
  7887                           
  7888                           ;main.c: 295:   printf("\n increase selected");
  7889  0CE0  3043               	movlw	low (STR_3| (0+32768))
  7890  0CE1  0020               	movlb	0	; select bank0
  7891  0CE2  00B5               	movwf	printf@fmt
  7892  0CE3  3088               	movlw	high (STR_3| (0+32768))
  7893  0CE4  00B6               	movwf	printf@fmt+1
  7894  0CE5  318B  2386  318C   	fcall	_printf
  7895  0CE8                     l670:
  7896  0CE8  0008               	return
  7897  0CE9                     __end_of_selectIncrease:
  7898                           
  7899                           	psect	text14
  7900  0CE9                     __ptext14:	
  7901 ;; *************** function _selectFrequencyValue *****************
  7902 ;; Defined at:
  7903 ;;		line 319 in file "main.c"
  7904 ;; Parameters:    Size  Location     Type
  7905 ;;		None
  7906 ;; Auto vars:     Size  Location     Type
  7907 ;;		None
  7908 ;; Return value:  Size  Location     Type
  7909 ;;                  1    wreg      void 
  7910 ;; Registers used:
  7911 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7912 ;; Tracked objects:
  7913 ;;		On entry : 0/0
  7914 ;;		On exit  : 0/0
  7915 ;;		Unchanged: 0/0
  7916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7917 ;;      Params:         0       0       0       0       0       0       0       0
  7918 ;;      Locals:         0       0       0       0       0       0       0       0
  7919 ;;      Temps:          0       2       0       0       0       0       0       0
  7920 ;;      Totals:         0       2       0       0       0       0       0       0
  7921 ;;Total ram usage:        2 bytes
  7922 ;; Hardware stack levels used: 1
  7923 ;; Hardware stack levels required when called: 10
  7924 ;; This function calls:
  7925 ;;		_printf
  7926 ;;		_setLEDColor
  7927 ;; This function is called by:
  7928 ;;		_process_remote_command
  7929 ;; This function uses a non-reentrant model
  7930 ;;
  7931                           
  7932                           
  7933                           ;psect for function _selectFrequencyValue
  7934  0CE9                     _selectFrequencyValue:
  7935  0CE9                     l4016:	
  7936                           ;incstack = 0
  7937                           ; Regs used in _selectFrequencyValue: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7938                           
  7939                           
  7940                           ;main.c: 320:     setLEDColor(100, 0, 255);
  7941  0CE9  01F3               	clrf	setLEDColor@green
  7942  0CEA  30FF               	movlw	255
  7943  0CEB  0020               	movlb	0	; select bank0
  7944  0CEC  00B9               	movwf	??_selectFrequencyValue
  7945  0CED  0839               	movf	??_selectFrequencyValue,w
  7946  0CEE  00F4               	movwf	setLEDColor@blue
  7947  0CEF  3064               	movlw	100
  7948  0CF0  318B  23D6  318C   	fcall	_setLEDColor
  7949  0CF3                     l4018:
  7950                           
  7951                           ;main.c: 321:     _delay((unsigned long)((500)*(4000000/4000.0)));
  7952  0CF3  3003               	movlw	3
  7953  0CF4  0020               	movlb	0	; select bank0
  7954  0CF5  00BA               	movwf	??_selectFrequencyValue+1
  7955  0CF6  308A               	movlw	138
  7956  0CF7  00B9               	movwf	??_selectFrequencyValue
  7957  0CF8  3055               	movlw	85
  7958  0CF9                     u3117:
  7959  0CF9  0B89               	decfsz	9,f
  7960  0CFA  2CF9               	goto	u3117
  7961  0CFB  0BB9               	decfsz	??_selectFrequencyValue,f
  7962  0CFC  2CF9               	goto	u3117
  7963  0CFD  0BBA               	decfsz	??_selectFrequencyValue+1,f
  7964  0CFE  2CF9               	goto	u3117
  7965  0CFF  3200               	nop2
  7966  0D00                     l4020:
  7967                           
  7968                           ;main.c: 322:     setLEDColor(0,0,0);
  7969  0D00  01F3               	clrf	setLEDColor@green
  7970  0D01  01F4               	clrf	setLEDColor@blue
  7971  0D02  3000               	movlw	0
  7972  0D03  318B  23D6  318C   	fcall	_setLEDColor
  7973  0D06                     l4022:
  7974                           
  7975                           ;main.c: 323:     printf("\n current value selected");
  7976  0D06  30EA               	movlw	low (STR_6| (0+32768))
  7977  0D07  0020               	movlb	0	; select bank0
  7978  0D08  00B5               	movwf	printf@fmt
  7979  0D09  3087               	movlw	high (STR_6| (0+32768))
  7980  0D0A  00B6               	movwf	printf@fmt+1
  7981  0D0B  318B  2386  318C   	fcall	_printf
  7982  0D0E                     l682:
  7983  0D0E  0008               	return
  7984  0D0F                     __end_of_selectFrequencyValue:
  7985                           
  7986                           	psect	text15
  7987  0D60                     __ptext15:	
  7988 ;; *************** function _selectFrequency *****************
  7989 ;; Defined at:
  7990 ;;		line 275 in file "main.c"
  7991 ;; Parameters:    Size  Location     Type
  7992 ;;		None
  7993 ;; Auto vars:     Size  Location     Type
  7994 ;;		None
  7995 ;; Return value:  Size  Location     Type
  7996 ;;                  1    wreg      void 
  7997 ;; Registers used:
  7998 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7999 ;; Tracked objects:
  8000 ;;		On entry : 0/0
  8001 ;;		On exit  : 0/0
  8002 ;;		Unchanged: 0/0
  8003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8004 ;;      Params:         0       0       0       0       0       0       0       0
  8005 ;;      Locals:         0       0       0       0       0       0       0       0
  8006 ;;      Temps:          0       2       0       0       0       0       0       0
  8007 ;;      Totals:         0       2       0       0       0       0       0       0
  8008 ;;Total ram usage:        2 bytes
  8009 ;; Hardware stack levels used: 1
  8010 ;; Hardware stack levels required when called: 10
  8011 ;; This function calls:
  8012 ;;		_printf
  8013 ;;		_setLEDColor
  8014 ;; This function is called by:
  8015 ;;		_process_remote_command
  8016 ;; This function uses a non-reentrant model
  8017 ;;
  8018                           
  8019                           
  8020                           ;psect for function _selectFrequency
  8021  0D60                     _selectFrequency:
  8022  0D60                     l3974:	
  8023                           ;incstack = 0
  8024                           ; Regs used in _selectFrequency: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8025                           
  8026                           
  8027                           ;main.c: 276:   interfaceState = STATE_FREQUENCY;
  8028  0D60  3002               	movlw	2
  8029  0D61  0020               	movlb	0	; select bank0
  8030  0D62  00B9               	movwf	??_selectFrequency
  8031  0D63  0839               	movf	??_selectFrequency,w
  8032  0D64  00F8               	movwf	_interfaceState
  8033  0D65                     l3976:
  8034                           
  8035                           ;main.c: 277:   setLEDColor(0, 150, 0);
  8036  0D65  3096               	movlw	150
  8037  0D66  00B9               	movwf	??_selectFrequency
  8038  0D67  0839               	movf	??_selectFrequency,w
  8039  0D68  00F3               	movwf	setLEDColor@green
  8040  0D69  01F4               	clrf	setLEDColor@blue
  8041  0D6A  3000               	movlw	0
  8042  0D6B  318B  23D6  318D   	fcall	_setLEDColor
  8043  0D6E                     l3978:
  8044                           
  8045                           ;main.c: 278:   _delay((unsigned long)((1000)*(4000000/4000.0)));
  8046  0D6E  3006               	movlw	6
  8047  0D6F  0020               	movlb	0	; select bank0
  8048  0D70  00BA               	movwf	??_selectFrequency+1
  8049  0D71  3013               	movlw	19
  8050  0D72  00B9               	movwf	??_selectFrequency
  8051  0D73  30AD               	movlw	173
  8052  0D74                     u3127:
  8053  0D74  0B89               	decfsz	9,f
  8054  0D75  2D74               	goto	u3127
  8055  0D76  0BB9               	decfsz	??_selectFrequency,f
  8056  0D77  2D74               	goto	u3127
  8057  0D78  0BBA               	decfsz	??_selectFrequency+1,f
  8058  0D79  2D74               	goto	u3127
  8059  0D7A  3200               	nop2
  8060                           
  8061                           ;main.c: 279:   setLEDColor(0, 0, 0);
  8062  0D7B  01F3               	clrf	setLEDColor@green
  8063  0D7C  01F4               	clrf	setLEDColor@blue
  8064  0D7D  3000               	movlw	0
  8065  0D7E  318B  23D6  318D   	fcall	_setLEDColor
  8066  0D81                     l3980:
  8067                           
  8068                           ;main.c: 280:   printf("\n Frequency selected");
  8069  0D81  301A               	movlw	low (STR_1| (0+32768))
  8070  0D82  0020               	movlb	0	; select bank0
  8071  0D83  00B5               	movwf	printf@fmt
  8072  0D84  3088               	movlw	high (STR_1| (0+32768))
  8073  0D85  00B6               	movwf	printf@fmt+1
  8074  0D86  318B  2386  318D   	fcall	_printf
  8075  0D89                     l664:
  8076  0D89  0008               	return
  8077  0D8A                     __end_of_selectFrequency:
  8078                           
  8079                           	psect	text16
  8080  0C7D                     __ptext16:	
  8081 ;; *************** function _selectDecrease *****************
  8082 ;; Defined at:
  8083 ;;		line 298 in file "main.c"
  8084 ;; Parameters:    Size  Location     Type
  8085 ;;		None
  8086 ;; Auto vars:     Size  Location     Type
  8087 ;;		None
  8088 ;; Return value:  Size  Location     Type
  8089 ;;                  1    wreg      void 
  8090 ;; Registers used:
  8091 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8092 ;; Tracked objects:
  8093 ;;		On entry : 0/0
  8094 ;;		On exit  : 0/0
  8095 ;;		Unchanged: 0/0
  8096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8097 ;;      Params:         0       0       0       0       0       0       0       0
  8098 ;;      Locals:         0       0       0       0       0       0       0       0
  8099 ;;      Temps:          0       1       0       0       0       0       0       0
  8100 ;;      Totals:         0       1       0       0       0       0       0       0
  8101 ;;Total ram usage:        1 bytes
  8102 ;; Hardware stack levels used: 1
  8103 ;; Hardware stack levels required when called: 10
  8104 ;; This function calls:
  8105 ;;		_printf
  8106 ;;		_setLEDColor
  8107 ;; This function is called by:
  8108 ;;		_process_remote_command
  8109 ;; This function uses a non-reentrant model
  8110 ;;
  8111                           
  8112                           
  8113                           ;psect for function _selectDecrease
  8114  0C7D                     _selectDecrease:
  8115  0C7D                     l4000:	
  8116                           ;incstack = 0
  8117                           ; Regs used in _selectDecrease: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8118                           
  8119                           
  8120                           ;main.c: 299:   setLEDColor(130, 160, 0);
  8121  0C7D  30A0               	movlw	160
  8122  0C7E  0020               	movlb	0	; select bank0
  8123  0C7F  00B9               	movwf	??_selectDecrease
  8124  0C80  0839               	movf	??_selectDecrease,w
  8125  0C81  00F3               	movwf	setLEDColor@green
  8126  0C82  01F4               	clrf	setLEDColor@blue
  8127  0C83  3082               	movlw	130
  8128  0C84  318B  23D6  318C   	fcall	_setLEDColor
  8129  0C87                     l4002:
  8130                           
  8131                           ;main.c: 300:   _delay((unsigned long)((100)*(4000000/4000.0)));
  8132  0C87  3082               	movlw	130
  8133  0C88  0020               	movlb	0	; select bank0
  8134  0C89  00B9               	movwf	??_selectDecrease
  8135  0C8A  30DD               	movlw	221
  8136  0C8B                     u3137:
  8137  0C8B  0B89               	decfsz	9,f
  8138  0C8C  2C8B               	goto	u3137
  8139  0C8D  0BB9               	decfsz	??_selectDecrease,f
  8140  0C8E  2C8B               	goto	u3137
  8141  0C8F  3200               	nop2
  8142  0C90                     l4004:
  8143                           
  8144                           ;main.c: 301:   setLEDColor(0, 0, 0);
  8145  0C90  01F3               	clrf	setLEDColor@green
  8146  0C91  01F4               	clrf	setLEDColor@blue
  8147  0C92  3000               	movlw	0
  8148  0C93  318B  23D6  318C   	fcall	_setLEDColor
  8149  0C96                     l4006:
  8150                           
  8151                           ;main.c: 302:   printf("\n decrease selected");
  8152  0C96  302F               	movlw	low (STR_4| (0+32768))
  8153  0C97  0020               	movlb	0	; select bank0
  8154  0C98  00B5               	movwf	printf@fmt
  8155  0C99  3088               	movlw	high (STR_4| (0+32768))
  8156  0C9A  00B6               	movwf	printf@fmt+1
  8157  0C9B  318B  2386  318C   	fcall	_printf
  8158  0C9E                     l673:
  8159  0C9E  0008               	return
  8160  0C9F                     __end_of_selectDecrease:
  8161                           
  8162                           	psect	text17
  8163  0D37                     __ptext17:	
  8164 ;; *************** function _selectCurrentValue *****************
  8165 ;; Defined at:
  8166 ;;		line 312 in file "main.c"
  8167 ;; Parameters:    Size  Location     Type
  8168 ;;		None
  8169 ;; Auto vars:     Size  Location     Type
  8170 ;;		None
  8171 ;; Return value:  Size  Location     Type
  8172 ;;                  1    wreg      void 
  8173 ;; Registers used:
  8174 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8175 ;; Tracked objects:
  8176 ;;		On entry : 0/0
  8177 ;;		On exit  : 0/0
  8178 ;;		Unchanged: 0/0
  8179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8180 ;;      Params:         0       0       0       0       0       0       0       0
  8181 ;;      Locals:         0       0       0       0       0       0       0       0
  8182 ;;      Temps:          0       2       0       0       0       0       0       0
  8183 ;;      Totals:         0       2       0       0       0       0       0       0
  8184 ;;Total ram usage:        2 bytes
  8185 ;; Hardware stack levels used: 1
  8186 ;; Hardware stack levels required when called: 10
  8187 ;; This function calls:
  8188 ;;		_printf
  8189 ;;		_setLEDColor
  8190 ;; This function is called by:
  8191 ;;		_process_remote_command
  8192 ;; This function uses a non-reentrant model
  8193 ;;
  8194                           
  8195                           
  8196                           ;psect for function _selectCurrentValue
  8197  0D37                     _selectCurrentValue:
  8198  0D37                     l4008:	
  8199                           ;incstack = 0
  8200                           ; Regs used in _selectCurrentValue: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8201                           
  8202                           
  8203                           ;main.c: 313:     setLEDColor(150, 70, 100);
  8204  0D37  3046               	movlw	70
  8205  0D38  0020               	movlb	0	; select bank0
  8206  0D39  00B9               	movwf	??_selectCurrentValue
  8207  0D3A  0839               	movf	??_selectCurrentValue,w
  8208  0D3B  00F3               	movwf	setLEDColor@green
  8209  0D3C  3064               	movlw	100
  8210  0D3D  00BA               	movwf	??_selectCurrentValue+1
  8211  0D3E  083A               	movf	??_selectCurrentValue+1,w
  8212  0D3F  00F4               	movwf	setLEDColor@blue
  8213  0D40  3096               	movlw	150
  8214  0D41  318B  23D6  318D   	fcall	_setLEDColor
  8215  0D44                     l4010:
  8216                           
  8217                           ;main.c: 314:     _delay((unsigned long)((500)*(4000000/4000.0)));
  8218  0D44  3003               	movlw	3
  8219  0D45  0020               	movlb	0	; select bank0
  8220  0D46  00BA               	movwf	??_selectCurrentValue+1
  8221  0D47  308A               	movlw	138
  8222  0D48  00B9               	movwf	??_selectCurrentValue
  8223  0D49  3055               	movlw	85
  8224  0D4A                     u3147:
  8225  0D4A  0B89               	decfsz	9,f
  8226  0D4B  2D4A               	goto	u3147
  8227  0D4C  0BB9               	decfsz	??_selectCurrentValue,f
  8228  0D4D  2D4A               	goto	u3147
  8229  0D4E  0BBA               	decfsz	??_selectCurrentValue+1,f
  8230  0D4F  2D4A               	goto	u3147
  8231  0D50  3200               	nop2
  8232  0D51                     l4012:
  8233                           
  8234                           ;main.c: 315:     setLEDColor(0,0,0);
  8235  0D51  01F3               	clrf	setLEDColor@green
  8236  0D52  01F4               	clrf	setLEDColor@blue
  8237  0D53  3000               	movlw	0
  8238  0D54  318B  23D6  318D   	fcall	_setLEDColor
  8239  0D57                     l4014:
  8240                           
  8241                           ;main.c: 316:     printf("\n current value selected");
  8242  0D57  30EA               	movlw	low (STR_6| (0+32768))
  8243  0D58  0020               	movlb	0	; select bank0
  8244  0D59  00B5               	movwf	printf@fmt
  8245  0D5A  3087               	movlw	high (STR_6| (0+32768))
  8246  0D5B  00B6               	movwf	printf@fmt+1
  8247  0D5C  318B  2386  318D   	fcall	_printf
  8248  0D5F                     l679:
  8249  0D5F  0008               	return
  8250  0D60                     __end_of_selectCurrentValue:
  8251                           
  8252                           	psect	text18
  8253  0D0F                     __ptext18:	
  8254 ;; *************** function _selectCurrent *****************
  8255 ;; Defined at:
  8256 ;;		line 283 in file "main.c"
  8257 ;; Parameters:    Size  Location     Type
  8258 ;;		None
  8259 ;; Auto vars:     Size  Location     Type
  8260 ;;		None
  8261 ;; Return value:  Size  Location     Type
  8262 ;;                  1    wreg      void 
  8263 ;; Registers used:
  8264 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8265 ;; Tracked objects:
  8266 ;;		On entry : 0/0
  8267 ;;		On exit  : 0/0
  8268 ;;		Unchanged: 0/0
  8269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8270 ;;      Params:         0       0       0       0       0       0       0       0
  8271 ;;      Locals:         0       0       0       0       0       0       0       0
  8272 ;;      Temps:          0       2       0       0       0       0       0       0
  8273 ;;      Totals:         0       2       0       0       0       0       0       0
  8274 ;;Total ram usage:        2 bytes
  8275 ;; Hardware stack levels used: 1
  8276 ;; Hardware stack levels required when called: 10
  8277 ;; This function calls:
  8278 ;;		_printf
  8279 ;;		_setLEDColor
  8280 ;; This function is called by:
  8281 ;;		_process_remote_command
  8282 ;; This function uses a non-reentrant model
  8283 ;;
  8284                           
  8285                           
  8286                           ;psect for function _selectCurrent
  8287  0D0F                     _selectCurrent:
  8288  0D0F                     l3982:	
  8289                           ;incstack = 0
  8290                           ; Regs used in _selectCurrent: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8291                           
  8292                           
  8293                           ;main.c: 284:   interfaceState = STATE_CURRENT;
  8294  0D0F  01F8               	clrf	_interfaceState
  8295  0D10  0AF8               	incf	_interfaceState,f
  8296  0D11                     l3984:
  8297                           
  8298                           ;main.c: 285:   setLEDColor(0, 0, 255);
  8299  0D11  01F3               	clrf	setLEDColor@green
  8300  0D12  30FF               	movlw	255
  8301  0D13  0020               	movlb	0	; select bank0
  8302  0D14  00B9               	movwf	??_selectCurrent
  8303  0D15  0839               	movf	??_selectCurrent,w
  8304  0D16  00F4               	movwf	setLEDColor@blue
  8305  0D17  3000               	movlw	0
  8306  0D18  318B  23D6  318D   	fcall	_setLEDColor
  8307  0D1B                     l3986:
  8308                           
  8309                           ;main.c: 286:   _delay((unsigned long)((1000)*(4000000/4000.0)));
  8310  0D1B  3006               	movlw	6
  8311  0D1C  0020               	movlb	0	; select bank0
  8312  0D1D  00BA               	movwf	??_selectCurrent+1
  8313  0D1E  3013               	movlw	19
  8314  0D1F  00B9               	movwf	??_selectCurrent
  8315  0D20  30AD               	movlw	173
  8316  0D21                     u3157:
  8317  0D21  0B89               	decfsz	9,f
  8318  0D22  2D21               	goto	u3157
  8319  0D23  0BB9               	decfsz	??_selectCurrent,f
  8320  0D24  2D21               	goto	u3157
  8321  0D25  0BBA               	decfsz	??_selectCurrent+1,f
  8322  0D26  2D21               	goto	u3157
  8323  0D27  3200               	nop2
  8324  0D28                     l3988:
  8325                           
  8326                           ;main.c: 287:   setLEDColor(0, 0, 0);
  8327  0D28  01F3               	clrf	setLEDColor@green
  8328  0D29  01F4               	clrf	setLEDColor@blue
  8329  0D2A  3000               	movlw	0
  8330  0D2B  318B  23D6  318D   	fcall	_setLEDColor
  8331  0D2E                     l3990:
  8332                           
  8333                           ;main.c: 288:   printf("\n current selected");
  8334  0D2E  3057               	movlw	low (STR_2| (0+32768))
  8335  0D2F  0020               	movlb	0	; select bank0
  8336  0D30  00B5               	movwf	printf@fmt
  8337  0D31  3088               	movlw	high (STR_2| (0+32768))
  8338  0D32  00B6               	movwf	printf@fmt+1
  8339  0D33  318B  2386  318D   	fcall	_printf
  8340  0D36                     l667:
  8341  0D36  0008               	return
  8342  0D37                     __end_of_selectCurrent:
  8343                           
  8344                           	psect	text19
  8345  0B86                     __ptext19:	
  8346 ;; *************** function _printf *****************
  8347 ;; Defined at:
  8348 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\printf.c"
  8349 ;; Parameters:    Size  Location     Type
  8350 ;;  fmt             2   21[BANK0 ] PTR const unsigned char 
  8351 ;;		 -> STR_7(25), STR_6(25), STR_5(23), STR_4(20), 
  8352 ;;		 -> STR_3(20), STR_2(19), STR_1(21), 
  8353 ;; Auto vars:     Size  Location     Type
  8354 ;;  ret             2    0        int 
  8355 ;;  ap              1   24[BANK0 ] PTR void [1]
  8356 ;;		 -> ?_printf(2), 
  8357 ;; Return value:  Size  Location     Type
  8358 ;;                  2   21[BANK0 ] int 
  8359 ;; Registers used:
  8360 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8361 ;; Tracked objects:
  8362 ;;		On entry : 0/0
  8363 ;;		On exit  : 0/0
  8364 ;;		Unchanged: 0/0
  8365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8366 ;;      Params:         0       2       0       0       0       0       0       0
  8367 ;;      Locals:         0       1       0       0       0       0       0       0
  8368 ;;      Temps:          0       1       0       0       0       0       0       0
  8369 ;;      Totals:         0       4       0       0       0       0       0       0
  8370 ;;Total ram usage:        4 bytes
  8371 ;; Hardware stack levels used: 1
  8372 ;; Hardware stack levels required when called: 9
  8373 ;; This function calls:
  8374 ;;		_vfprintf
  8375 ;; This function is called by:
  8376 ;;		_selectFrequency
  8377 ;;		_selectCurrent
  8378 ;;		_selectIncrease
  8379 ;;		_selectDecrease
  8380 ;;		_selectCurrentValue
  8381 ;;		_selectFrequencyValue
  8382 ;;		_selectResetValue
  8383 ;; This function uses a non-reentrant model
  8384 ;;
  8385                           
  8386                           
  8387                           ;psect for function _printf
  8388  0B86                     _printf:
  8389  0B86                     l3824:	
  8390                           ;incstack = 0
  8391                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8392                           
  8393  0B86  3037               	movlw	(low ((?_printf| 0+2)))& (0+255)
  8394  0B87  0020               	movlb	0	; select bank0
  8395  0B88  00B7               	movwf	??_printf
  8396  0B89  0837               	movf	??_printf,w
  8397  0B8A  00B8               	movwf	printf@ap
  8398  0B8B                     l3826:
  8399  0B8B  0836               	movf	printf@fmt+1,w
  8400  0B8C  00AE               	movwf	vfprintf@fmt+1
  8401  0B8D  0835               	movf	printf@fmt,w
  8402  0B8E  00AD               	movwf	vfprintf@fmt
  8403  0B8F  3038               	movlw	(low (printf@ap| 0))& (0+255)
  8404  0B90  00B7               	movwf	??_printf
  8405  0B91  0837               	movf	??_printf,w
  8406  0B92  00AF               	movwf	vfprintf@ap
  8407  0B93  3000               	movlw	0
  8408  0B94  318D  25E2  318B   	fcall	_vfprintf
  8409  0B97                     l1299:
  8410  0B97  0008               	return
  8411  0B98                     __end_of_printf:
  8412                           
  8413                           	psect	text20
  8414  0DE2                     __ptext20:	
  8415 ;; *************** function _vfprintf *****************
  8416 ;; Defined at:
  8417 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  8418 ;; Parameters:    Size  Location     Type
  8419 ;;  fp              1    wreg     PTR struct _IO_FILE
  8420 ;;		 -> NULL(0), 
  8421 ;;  fmt             2   13[BANK0 ] PTR const unsigned char 
  8422 ;;		 -> STR_7(25), STR_6(25), STR_5(23), STR_4(20), 
  8423 ;;		 -> STR_3(20), STR_2(19), STR_1(21), 
  8424 ;;  ap              1   15[BANK0 ] PTR PTR void 
  8425 ;;		 -> printf@ap(1), 
  8426 ;; Auto vars:     Size  Location     Type
  8427 ;;  fp              1   18[BANK0 ] PTR struct _IO_FILE
  8428 ;;		 -> NULL(0), 
  8429 ;;  cfmt            2   19[BANK0 ] PTR unsigned char 
  8430 ;;		 -> STR_7(25), STR_6(25), STR_5(23), STR_4(20), 
  8431 ;;		 -> STR_3(20), STR_2(19), STR_1(21), 
  8432 ;; Return value:  Size  Location     Type
  8433 ;;                  2   13[BANK0 ] int 
  8434 ;; Registers used:
  8435 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8436 ;; Tracked objects:
  8437 ;;		On entry : 0/0
  8438 ;;		On exit  : 0/0
  8439 ;;		Unchanged: 0/0
  8440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8441 ;;      Params:         0       3       0       0       0       0       0       0
  8442 ;;      Locals:         0       3       0       0       0       0       0       0
  8443 ;;      Temps:          0       2       0       0       0       0       0       0
  8444 ;;      Totals:         0       8       0       0       0       0       0       0
  8445 ;;Total ram usage:        8 bytes
  8446 ;; Hardware stack levels used: 1
  8447 ;; Hardware stack levels required when called: 8
  8448 ;; This function calls:
  8449 ;;		_vfpfcnvrt
  8450 ;; This function is called by:
  8451 ;;		_printf
  8452 ;; This function uses a non-reentrant model
  8453 ;;
  8454                           
  8455                           
  8456                           ;psect for function _vfprintf
  8457  0DE2                     _vfprintf:
  8458                           
  8459                           ;incstack = 0
  8460                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8461                           ;vfprintf@fp stored from wreg
  8462  0DE2  0020               	movlb	0	; select bank0
  8463  0DE3  00B2               	movwf	vfprintf@fp
  8464  0DE4                     l3748:
  8465                           
  8466                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
  8467  0DE4  082E               	movf	vfprintf@fmt+1,w
  8468  0DE5  00B4               	movwf	vfprintf@cfmt+1
  8469  0DE6  082D               	movf	vfprintf@fmt,w
  8470  0DE7  00B3               	movwf	vfprintf@cfmt
  8471  0DE8                     l3750:
  8472                           
  8473                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
  8474  0DE8  0021               	movlb	1	; select bank1
  8475  0DE9  01A0               	clrf	_nout^(0+128)
  8476  0DEA  01A1               	clrf	(_nout+1)^(0+128)
  8477                           
  8478                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  8479  0DEB  2E00               	goto	l3754
  8480  0DEC                     l3752:
  8481                           
  8482                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
  8483  0DEC  3033               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  8484  0DED  00B0               	movwf	??_vfprintf
  8485  0DEE  0830               	movf	??_vfprintf,w
  8486  0DEF  00A5               	movwf	vfpfcnvrt@fmt
  8487  0DF0  082F               	movf	vfprintf@ap,w
  8488  0DF1  00B1               	movwf	??_vfprintf+1
  8489  0DF2  0831               	movf	??_vfprintf+1,w
  8490  0DF3  00A6               	movwf	vfpfcnvrt@ap
  8491  0DF4  0832               	movf	vfprintf@fp,w
  8492  0DF5  3185  258A  318D   	fcall	_vfpfcnvrt
  8493  0DF8  0020               	movlb	0	; select bank0
  8494  0DF9  0825               	movf	?_vfpfcnvrt,w
  8495  0DFA  0021               	movlb	1	; select bank1
  8496  0DFB  07A0               	addwf	_nout^(0+128),f
  8497  0DFC  0020               	movlb	0	; select bank0
  8498  0DFD  0826               	movf	?_vfpfcnvrt+1,w
  8499  0DFE  0021               	movlb	1	; select bank1
  8500  0DFF  3DA1               	addwfc	(_nout+1)^(0+128),f
  8501  0E00                     l3754:
  8502                           
  8503                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  8504  0E00  0020               	movlb	0	; select bank0
  8505  0E01  0833               	movf	vfprintf@cfmt,w
  8506  0E02  0084               	movwf	4
  8507  0E03  0834               	movf	vfprintf@cfmt+1,w
  8508  0E04  0085               	movwf	5
  8509  0E05  0012               	moviw fsr0++
  8510  0E06  1D03               	btfss	3,2
  8511  0E07  2E09               	goto	u2301
  8512  0E08  2E0A               	goto	u2300
  8513  0E09                     u2301:
  8514  0E09  2DEC               	goto	l3752
  8515  0E0A                     u2300:
  8516  0E0A                     l3756:
  8517                           
  8518                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
  8519  0E0A  0021               	movlb	1	; select bank1
  8520  0E0B  0821               	movf	(_nout+1)^(0+128),w
  8521  0E0C  0020               	movlb	0	; select bank0
  8522  0E0D  00AE               	movwf	?_vfprintf+1
  8523  0E0E  0021               	movlb	1	; select bank1
  8524  0E0F  0820               	movf	_nout^(0+128),w
  8525  0E10  0020               	movlb	0	; select bank0
  8526  0E11  00AD               	movwf	?_vfprintf
  8527  0E12                     l1338:
  8528  0E12  0008               	return
  8529  0E13                     __end_of_vfprintf:
  8530                           
  8531                           	psect	text21
  8532  058A                     __ptext21:	
  8533 ;; *************** function _vfpfcnvrt *****************
  8534 ;; Defined at:
  8535 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  8536 ;; Parameters:    Size  Location     Type
  8537 ;;  fp              1    wreg     PTR struct _IO_FILE
  8538 ;;		 -> NULL(0), 
  8539 ;;  fmt             1    5[BANK0 ] PTR PTR unsigned char 
  8540 ;;		 -> vfprintf@cfmt(2), 
  8541 ;;  ap              1    6[BANK0 ] PTR PTR void 
  8542 ;;		 -> printf@ap(1), 
  8543 ;; Auto vars:     Size  Location     Type
  8544 ;;  fp              1   12[BANK0 ] PTR struct _IO_FILE
  8545 ;;		 -> NULL(0), 
  8546 ;;  llu             8    0        unsigned long long 
  8547 ;;  ll              8    0        long long 
  8548 ;;  f               4    0        long long 
  8549 ;;  ct              3    0        unsigned char [3]
  8550 ;;  vp              2    0        PTR void 
  8551 ;;  i               2    0        int 
  8552 ;;  done            2    0        int 
  8553 ;;  cp              2    0        PTR unsigned char 
  8554 ;;  c               1    0        unsigned char 
  8555 ;; Return value:  Size  Location     Type
  8556 ;;                  2    5[BANK0 ] int 
  8557 ;; Registers used:
  8558 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8559 ;; Tracked objects:
  8560 ;;		On entry : 0/0
  8561 ;;		On exit  : 0/0
  8562 ;;		Unchanged: 0/0
  8563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8564 ;;      Params:         0       2       0       0       0       0       0       0
  8565 ;;      Locals:         0       1       0       0       0       0       0       0
  8566 ;;      Temps:          0       5       0       0       0       0       0       0
  8567 ;;      Totals:         0       8       0       0       0       0       0       0
  8568 ;;Total ram usage:        8 bytes
  8569 ;; Hardware stack levels used: 1
  8570 ;; Hardware stack levels required when called: 7
  8571 ;; This function calls:
  8572 ;;		_fputc
  8573 ;; This function is called by:
  8574 ;;		_vfprintf
  8575 ;; This function uses a non-reentrant model
  8576 ;;
  8577                           
  8578                           
  8579                           ;psect for function _vfpfcnvrt
  8580  058A                     _vfpfcnvrt:
  8581                           
  8582                           ;incstack = 0
  8583                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8584                           ;vfpfcnvrt@fp stored from wreg
  8585  058A  0020               	movlb	0	; select bank0
  8586  058B  00AC               	movwf	vfpfcnvrt@fp
  8587  058C                     l3692:
  8588                           
  8589                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.32\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          2\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
  8590  058C  0825               	movf	vfpfcnvrt@fmt,w
  8591  058D  0086               	movwf	6
  8592  058E  0187               	clrf	7
  8593  058F  3F40               	moviw [0]fsr1
  8594  0590  00A7               	movwf	??_vfpfcnvrt
  8595  0591  3F41               	moviw [1]fsr1
  8596  0592  00A8               	movwf	??_vfpfcnvrt+1
  8597  0593  0827               	movf	??_vfpfcnvrt,w
  8598  0594  0084               	movwf	4
  8599  0595  0828               	movf	??_vfpfcnvrt+1,w
  8600  0596  0085               	movwf	5
  8601  0597  0012               	moviw fsr0++
  8602  0598  3A25               	xorlw	37
  8603  0599  1D03               	btfss	3,2
  8604  059A  2D9C               	goto	u2281
  8605  059B  2D9D               	goto	u2280
  8606  059C                     u2281:
  8607  059C  2DE4               	goto	l3716
  8608  059D                     u2280:
  8609  059D                     l3694:
  8610                           
  8611                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
  8612  059D  0825               	movf	vfpfcnvrt@fmt,w
  8613  059E  0086               	movwf	6
  8614  059F  0187               	clrf	7
  8615  05A0  3001               	movlw	1
  8616  05A1  0781               	addwf	1,f
  8617  05A2  3141               	addfsr 1,1
  8618  05A3  1803               	skipnc
  8619  05A4  0A81               	incf	1,f
  8620  05A5                     l3696:
  8621                           
  8622                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
  8623  05A5  0021               	movlb	1	; select bank1
  8624  05A6  01A2               	clrf	_width^(0+128)
  8625  05A7  01A3               	clrf	(_width+1)^(0+128)
  8626  05A8  01A6               	clrf	_flags^(0+128)
  8627  05A9  01A7               	clrf	(_flags+1)^(0+128)
  8628  05AA                     l3698:
  8629                           
  8630                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
  8631  05AA  30FF               	movlw	255
  8632  05AB  00A4               	movwf	_prec^(0+128)
  8633  05AC  30FF               	movlw	255
  8634  05AD  00A5               	movwf	(_prec^(0+128)+1)
  8635  05AE                     l3700:
  8636                           
  8637                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  8638  05AE  0020               	movlb	0	; select bank0
  8639  05AF  0825               	movf	vfpfcnvrt@fmt,w
  8640  05B0  0086               	movwf	6
  8641  05B1  0187               	clrf	7
  8642  05B2  3F40               	moviw [0]fsr1
  8643  05B3  00A7               	movwf	??_vfpfcnvrt
  8644  05B4  3F41               	moviw [1]fsr1
  8645  05B5  00A8               	movwf	??_vfpfcnvrt+1
  8646  05B6  0827               	movf	??_vfpfcnvrt,w
  8647  05B7  0084               	movwf	4
  8648  05B8  0828               	movf	??_vfpfcnvrt+1,w
  8649  05B9  0085               	movwf	5
  8650  05BA  0012               	moviw fsr0++
  8651  05BB  3A25               	xorlw	37
  8652  05BC  1D03               	btfss	3,2
  8653  05BD  2DBF               	goto	u2291
  8654  05BE  2DC0               	goto	u2290
  8655  05BF                     u2291:
  8656  05BF  2DD9               	goto	l3710
  8657  05C0                     u2290:
  8658  05C0                     l3702:
  8659                           
  8660                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  8661  05C0  0825               	movf	vfpfcnvrt@fmt,w
  8662  05C1  0086               	movwf	6
  8663  05C2  0187               	clrf	7
  8664  05C3  3001               	movlw	1
  8665  05C4  0781               	addwf	1,f
  8666  05C5  3141               	addfsr 1,1
  8667  05C6  1803               	skipnc
  8668  05C7  0A81               	incf	1,f
  8669  05C8                     l3704:
  8670                           
  8671                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  8672  05C8  3025               	movlw	37
  8673  05C9  00F5               	movwf	fputc@c
  8674  05CA  3000               	movlw	0
  8675  05CB  00F6               	movwf	fputc@c+1
  8676  05CC  082C               	movf	vfpfcnvrt@fp,w
  8677  05CD  00A7               	movwf	??_vfpfcnvrt
  8678  05CE  0827               	movf	??_vfpfcnvrt,w
  8679  05CF  00F7               	movwf	fputc@fp
  8680  05D0  318E  26E9  3185   	fcall	_fputc
  8681  05D3                     l3706:
  8682                           
  8683                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  8684  05D3  3001               	movlw	1
  8685  05D4  0020               	movlb	0	; select bank0
  8686  05D5  00A5               	movwf	?_vfpfcnvrt
  8687  05D6  3000               	movlw	0
  8688  05D7  00A6               	movwf	?_vfpfcnvrt+1
  8689  05D8  2E07               	goto	l1332
  8690  05D9                     l3710:
  8691                           
  8692                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  8693  05D9  0825               	movf	vfpfcnvrt@fmt,w
  8694  05DA  0086               	movwf	6
  8695  05DB  0187               	clrf	7
  8696  05DC  3001               	movlw	1
  8697  05DD  0781               	addwf	1,f
  8698  05DE  3141               	addfsr 1,1
  8699  05DF  1803               	skipnc
  8700  05E0  0A81               	incf	1,f
  8701  05E1                     l3712:
  8702                           
  8703                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  8704  05E1  01A5               	clrf	?_vfpfcnvrt
  8705  05E2  01A6               	clrf	?_vfpfcnvrt+1
  8706  05E3  2E07               	goto	l1332
  8707  05E4                     l3716:
  8708                           
  8709                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  8710  05E4  0825               	movf	vfpfcnvrt@fmt,w
  8711  05E5  0086               	movwf	6
  8712  05E6  0187               	clrf	7
  8713  05E7  3F40               	moviw [0]fsr1
  8714  05E8  00A7               	movwf	??_vfpfcnvrt
  8715  05E9  3F41               	moviw [1]fsr1
  8716  05EA  00A8               	movwf	??_vfpfcnvrt+1
  8717  05EB  0827               	movf	??_vfpfcnvrt,w
  8718  05EC  0084               	movwf	4
  8719  05ED  0828               	movf	??_vfpfcnvrt+1,w
  8720  05EE  0085               	movwf	5
  8721  05EF  0800               	movf	0,w	;code access
  8722  05F0  00A9               	movwf	??_vfpfcnvrt+2
  8723  05F1  01AA               	clrf	??_vfpfcnvrt+3
  8724  05F2  0829               	movf	??_vfpfcnvrt+2,w
  8725  05F3  00F5               	movwf	fputc@c
  8726  05F4  082A               	movf	??_vfpfcnvrt+3,w
  8727  05F5  00F6               	movwf	fputc@c+1
  8728  05F6  082C               	movf	vfpfcnvrt@fp,w
  8729  05F7  00AB               	movwf	??_vfpfcnvrt+4
  8730  05F8  082B               	movf	??_vfpfcnvrt+4,w
  8731  05F9  00F7               	movwf	fputc@fp
  8732  05FA  318E  26E9  3185   	fcall	_fputc
  8733  05FD                     l3718:
  8734                           
  8735                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  8736  05FD  0020               	movlb	0	; select bank0
  8737  05FE  0825               	movf	vfpfcnvrt@fmt,w
  8738  05FF  0086               	movwf	6
  8739  0600  0187               	clrf	7
  8740  0601  3001               	movlw	1
  8741  0602  0781               	addwf	1,f
  8742  0603  3141               	addfsr 1,1
  8743  0604  1803               	skipnc
  8744  0605  0A81               	incf	1,f
  8745  0606  2DD3               	goto	l3706
  8746  0607                     l1332:
  8747  0607  0008               	return
  8748  0608                     __end_of_vfpfcnvrt:
  8749                           
  8750                           	psect	text22
  8751  0EE9                     __ptext22:	
  8752 ;; *************** function _fputc *****************
  8753 ;; Defined at:
  8754 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputc.c"
  8755 ;; Parameters:    Size  Location     Type
  8756 ;;  c               2    5[COMMON] int 
  8757 ;;  fp              1    7[COMMON] PTR struct _IO_FILE
  8758 ;;		 -> NULL(0), 
  8759 ;; Auto vars:     Size  Location     Type
  8760 ;;		None
  8761 ;; Return value:  Size  Location     Type
  8762 ;;                  2    5[COMMON] int 
  8763 ;; Registers used:
  8764 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8765 ;; Tracked objects:
  8766 ;;		On entry : 0/0
  8767 ;;		On exit  : 0/0
  8768 ;;		Unchanged: 0/0
  8769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8770 ;;      Params:         3       0       0       0       0       0       0       0
  8771 ;;      Locals:         0       0       0       0       0       0       0       0
  8772 ;;      Temps:          0       5       0       0       0       0       0       0
  8773 ;;      Totals:         3       5       0       0       0       0       0       0
  8774 ;;Total ram usage:        8 bytes
  8775 ;; Hardware stack levels used: 1
  8776 ;; Hardware stack levels required when called: 6
  8777 ;; This function calls:
  8778 ;;		_putch
  8779 ;; This function is called by:
  8780 ;;		_vfpfcnvrt
  8781 ;; This function uses a non-reentrant model
  8782 ;;
  8783                           
  8784                           
  8785                           ;psect for function _fputc
  8786  0EE9                     _fputc:
  8787  0EE9                     l3678:	
  8788                           ;incstack = 0
  8789                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8790                           
  8791  0EE9  0877               	movf	fputc@fp,w
  8792  0EEA  1903               	btfsc	3,2
  8793  0EEB  2EED               	goto	u2241
  8794  0EEC  2EEE               	goto	u2240
  8795  0EED                     u2241:
  8796  0EED  2EF3               	goto	l3682
  8797  0EEE                     u2240:
  8798  0EEE                     l3680:
  8799  0EEE  0877               	movf	fputc@fp,w
  8800  0EEF  1D03               	btfss	3,2
  8801  0EF0  2EF2               	goto	u2251
  8802  0EF1  2EF3               	goto	u2250
  8803  0EF2                     u2251:
  8804  0EF2  2EF8               	goto	l3684
  8805  0EF3                     u2250:
  8806  0EF3                     l3682:
  8807  0EF3  0875               	movf	fputc@c,w
  8808  0EF4  318A  22FA  318E   	fcall	_putch
  8809  0EF7  2F28               	goto	l1350
  8810  0EF8                     l3684:
  8811  0EF8  0877               	movf	fputc@fp,w
  8812  0EF9  3E03               	addlw	3
  8813  0EFA  0086               	movwf	6
  8814  0EFB  0187               	clrf	7
  8815  0EFC  0016               	moviw fsr1++
  8816  0EFD  0401               	iorwf	1,w
  8817  0EFE  1903               	btfsc	3,2
  8818  0EFF  2F01               	goto	u2261
  8819  0F00  2F02               	goto	u2260
  8820  0F01                     u2261:
  8821  0F01  2F20               	goto	l3688
  8822  0F02                     u2260:
  8823  0F02                     l3686:
  8824  0F02  0877               	movf	fputc@fp,w
  8825  0F03  3E03               	addlw	3
  8826  0F04  0086               	movwf	6
  8827  0F05  0187               	clrf	7
  8828  0F06  3F40               	moviw [0]fsr1
  8829  0F07  0020               	movlb	0	; select bank0
  8830  0F08  00A0               	movwf	??_fputc
  8831  0F09  3F41               	moviw [1]fsr1
  8832  0F0A  00A1               	movwf	??_fputc+1
  8833  0F0B  0A77               	incf	fputc@fp,w
  8834  0F0C  0086               	movwf	6
  8835  0F0D  0187               	clrf	7
  8836  0F0E  3F40               	moviw [0]fsr1
  8837  0F0F  00A2               	movwf	??_fputc+2
  8838  0F10  3F41               	moviw [1]fsr1
  8839  0F11  00A3               	movwf	??_fputc+3
  8840  0F12  0823               	movf	??_fputc+3,w
  8841  0F13  3A80               	xorlw	128
  8842  0F14  00A4               	movwf	??_fputc+4
  8843  0F15  0821               	movf	??_fputc+1,w
  8844  0F16  3A80               	xorlw	128
  8845  0F17  0224               	subwf	??_fputc+4,w
  8846  0F18  1D03               	skipz
  8847  0F19  2F1C               	goto	u2275
  8848  0F1A  0820               	movf	??_fputc,w
  8849  0F1B  0222               	subwf	??_fputc+2,w
  8850  0F1C                     u2275:
  8851  0F1C  1803               	skipnc
  8852  0F1D  2F1F               	goto	u2271
  8853  0F1E  2F20               	goto	u2270
  8854  0F1F                     u2271:
  8855  0F1F  2F28               	goto	l1350
  8856  0F20                     u2270:
  8857  0F20                     l3688:
  8858  0F20  0A77               	incf	fputc@fp,w
  8859  0F21  0086               	movwf	6
  8860  0F22  0187               	clrf	7
  8861  0F23  3001               	movlw	1
  8862  0F24  0781               	addwf	1,f
  8863  0F25  3141               	addfsr 1,1
  8864  0F26  1803               	skipnc
  8865  0F27  0A81               	incf	1,f
  8866  0F28                     l1350:
  8867  0F28  0008               	return
  8868  0F29                     __end_of_fputc:
  8869                           
  8870                           	psect	text23
  8871  0AFA                     __ptext23:	
  8872 ;; *************** function _putch *****************
  8873 ;; Defined at:
  8874 ;;		line 146 in file "mcc_generated_files/eusart.c"
  8875 ;; Parameters:    Size  Location     Type
  8876 ;;  txData          1    wreg     unsigned char 
  8877 ;; Auto vars:     Size  Location     Type
  8878 ;;  txData          1    4[COMMON] unsigned char 
  8879 ;; Return value:  Size  Location     Type
  8880 ;;                  1    wreg      void 
  8881 ;; Registers used:
  8882 ;;		wreg, status,2, status,0, pclath, cstack
  8883 ;; Tracked objects:
  8884 ;;		On entry : 0/0
  8885 ;;		On exit  : 0/0
  8886 ;;		Unchanged: 0/0
  8887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8888 ;;      Params:         0       0       0       0       0       0       0       0
  8889 ;;      Locals:         1       0       0       0       0       0       0       0
  8890 ;;      Temps:          0       0       0       0       0       0       0       0
  8891 ;;      Totals:         1       0       0       0       0       0       0       0
  8892 ;;Total ram usage:        1 bytes
  8893 ;; Hardware stack levels used: 1
  8894 ;; Hardware stack levels required when called: 5
  8895 ;; This function calls:
  8896 ;;		_EUSART_Write
  8897 ;; This function is called by:
  8898 ;;		_fputc
  8899 ;; This function uses a non-reentrant model
  8900 ;;
  8901                           
  8902                           
  8903                           ;psect for function _putch
  8904  0AFA                     _putch:
  8905                           
  8906                           ;incstack = 0
  8907                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  8908                           ;putch@txData stored from wreg
  8909  0AFA  00F4               	movwf	putch@txData
  8910  0AFB                     l3676:
  8911                           
  8912                           ;mcc_generated_files/eusart.c: 146: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 147: {;mcc_generated_files/eusart.c: 148:     EUSART_Write(txData);
  8913  0AFB  0874               	movf	putch@txData,w
  8914  0AFC  318B  2326  318A   	fcall	_EUSART_Write
  8915  0AFF                     l231:
  8916  0AFF  0008               	return
  8917  0B00                     __end_of_putch:
  8918                           
  8919                           	psect	text24
  8920  0B26                     __ptext24:	
  8921 ;; *************** function _EUSART_Write *****************
  8922 ;; Defined at:
  8923 ;;		line 132 in file "mcc_generated_files/eusart.c"
  8924 ;; Parameters:    Size  Location     Type
  8925 ;;  txData          1    wreg     unsigned char 
  8926 ;; Auto vars:     Size  Location     Type
  8927 ;;  txData          1    3[COMMON] unsigned char 
  8928 ;; Return value:  Size  Location     Type
  8929 ;;                  1    wreg      void 
  8930 ;; Registers used:
  8931 ;;		wreg
  8932 ;; Tracked objects:
  8933 ;;		On entry : 0/0
  8934 ;;		On exit  : 0/0
  8935 ;;		Unchanged: 0/0
  8936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8937 ;;      Params:         0       0       0       0       0       0       0       0
  8938 ;;      Locals:         1       0       0       0       0       0       0       0
  8939 ;;      Temps:          0       0       0       0       0       0       0       0
  8940 ;;      Totals:         1       0       0       0       0       0       0       0
  8941 ;;Total ram usage:        1 bytes
  8942 ;; Hardware stack levels used: 1
  8943 ;; Hardware stack levels required when called: 4
  8944 ;; This function calls:
  8945 ;;		Nothing
  8946 ;; This function is called by:
  8947 ;;		_putch
  8948 ;; This function uses a non-reentrant model
  8949 ;;
  8950                           
  8951                           
  8952                           ;psect for function _EUSART_Write
  8953  0B26                     _EUSART_Write:
  8954                           
  8955                           ;incstack = 0
  8956                           ; Regs used in _EUSART_Write: [wreg]
  8957                           ;EUSART_Write@txData stored from wreg
  8958  0B26  00F3               	movwf	EUSART_Write@txData
  8959  0B27                     l3672:
  8960  0B27                     l222:	
  8961                           ;mcc_generated_files/eusart.c: 135:     {;mcc_generated_files/eusart.c: 136:     }
  8962                           
  8963                           
  8964                           ;mcc_generated_files/eusart.c: 134:     while(0 == PIR1bits.TXIF)
  8965  0B27  0020               	movlb	0	; select bank0
  8966  0B28  1E11               	btfss	17,4	;volatile
  8967  0B29  2B2B               	goto	u2231
  8968  0B2A  2B2C               	goto	u2230
  8969  0B2B                     u2231:
  8970  0B2B  2B27               	goto	l222
  8971  0B2C                     u2230:
  8972  0B2C                     l3674:
  8973                           
  8974                           ;mcc_generated_files/eusart.c: 138:     TX1REG = txData;
  8975  0B2C  0873               	movf	EUSART_Write@txData,w
  8976  0B2D  0023               	movlb	3	; select bank3
  8977  0B2E  009A               	movwf	26	;volatile
  8978  0B2F                     l225:
  8979  0B2F  0008               	return
  8980  0B30                     __end_of_EUSART_Write:
  8981                           
  8982                           	psect	text25
  8983  0E46                     __ptext25:	
  8984 ;; *************** function _battery_voltage *****************
  8985 ;; Defined at:
  8986 ;;		line 148 in file "main.c"
  8987 ;; Parameters:    Size  Location     Type
  8988 ;;		None
  8989 ;; Auto vars:     Size  Location     Type
  8990 ;;		None
  8991 ;; Return value:  Size  Location     Type
  8992 ;;                  2   23[BANK0 ] short 
  8993 ;; Registers used:
  8994 ;;		wreg, status,2, status,0, pclath, cstack
  8995 ;; Tracked objects:
  8996 ;;		On entry : 0/0
  8997 ;;		On exit  : 0/0
  8998 ;;		Unchanged: 0/0
  8999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9000 ;;      Params:         0       2       0       0       0       0       0       0
  9001 ;;      Locals:         0       0       0       0       0       0       0       0
  9002 ;;      Temps:          0       0       0       0       0       0       0       0
  9003 ;;      Totals:         0       2       0       0       0       0       0       0
  9004 ;;Total ram usage:        2 bytes
  9005 ;; Hardware stack levels used: 1
  9006 ;; Hardware stack levels required when called: 5
  9007 ;; This function calls:
  9008 ;;		___aldiv
  9009 ;; This function is called by:
  9010 ;;		_process_remote_command
  9011 ;;		_main
  9012 ;; This function uses a non-reentrant model
  9013 ;;
  9014                           
  9015                           
  9016                           ;psect for function _battery_voltage
  9017  0E46                     _battery_voltage:
  9018  0E46                     l3956:	
  9019                           ;incstack = 0
  9020                           ; Regs used in _battery_voltage: [wreg+status,2+status,0+pclath+cstack]
  9021                           
  9022                           
  9023                           ;main.c: 150:   FVRCON = 0b10000001;
  9024  0E46  3081               	movlw	129
  9025  0E47  0022               	movlb	2	; select bank2
  9026  0E48  0097               	movwf	23	;volatile
  9027                           
  9028                           ;main.c: 151:   ADCON0 = 0b01111101;
  9029  0E49  307D               	movlw	125
  9030  0E4A  0021               	movlb	1	; select bank1
  9031  0E4B  009D               	movwf	29	;volatile
  9032                           
  9033                           ;main.c: 152:   ADCON1 = 0b10010000;
  9034  0E4C  3090               	movlw	144
  9035  0E4D  009E               	movwf	30	;volatile
  9036  0E4E                     l636:	
  9037                           ;main.c: 153:   while(!FVRCONbits.FVRRDY){ }
  9038                           
  9039  0E4E  0022               	movlb	2	; select bank2
  9040  0E4F  1F17               	btfss	23,6	;volatile
  9041  0E50  2E52               	goto	u2601
  9042  0E51  2E53               	goto	u2600
  9043  0E52                     u2601:
  9044  0E52  2E4E               	goto	l636
  9045  0E53                     u2600:
  9046  0E53                     l638:
  9047                           
  9048                           ;main.c: 154:   __nop();
  9049  0E53  0000               	nop
  9050                           
  9051                           ;main.c: 155:   __nop();
  9052  0E54  0000               	nop
  9053                           
  9054                           ;main.c: 156:   __nop();
  9055  0E55  0000               	nop
  9056                           
  9057                           ;main.c: 157:   __nop();
  9058  0E56  0000               	nop
  9059                           
  9060                           ;main.c: 158:   __nop();
  9061  0E57  0000               	nop
  9062                           
  9063                           ;main.c: 159:   ADCON0bits.GO_nDONE = 1;
  9064  0E58  0021               	movlb	1	; select bank1
  9065  0E59  149D               	bsf	29,1	;volatile
  9066  0E5A                     l639:	
  9067                           ;main.c: 160:   while(ADCON0bits.GO_nDONE){ }
  9068                           
  9069  0E5A  189D               	btfsc	29,1	;volatile
  9070  0E5B  2E5D               	goto	u2611
  9071  0E5C  2E5E               	goto	u2610
  9072  0E5D                     u2611:
  9073  0E5D  2E5A               	goto	l639
  9074  0E5E                     u2610:
  9075  0E5E                     l641:
  9076                           
  9077                           ;main.c: 161:   ADCON0bits.ADON = 0;
  9078  0E5E  101D               	bcf	29,0	;volatile
  9079  0E5F                     l3958:
  9080                           
  9081                           ;main.c: 166:   return 1047552L / ADRES;
  9082  0E5F  081B               	movf	27,w	;volatile
  9083  0E60  0020               	movlb	0	; select bank0
  9084  0E61  00A8               	movwf	___aldiv@divisor
  9085  0E62  0021               	movlb	1	; select bank1
  9086  0E63  081C               	movf	28,w	;volatile
  9087  0E64  0020               	movlb	0	; select bank0
  9088  0E65  00A9               	movwf	___aldiv@divisor+1
  9089  0E66  01AA               	clrf	___aldiv@divisor+2
  9090  0E67  01AB               	clrf	___aldiv@divisor+3
  9091  0E68  3000               	movlw	0
  9092  0E69  00AF               	movwf	___aldiv@dividend+3
  9093  0E6A  300F               	movlw	15
  9094  0E6B  00AE               	movwf	___aldiv@dividend+2
  9095  0E6C  30FC               	movlw	252
  9096  0E6D  00AD               	movwf	___aldiv@dividend+1
  9097  0E6E  3000               	movlw	0
  9098  0E6F  00AC               	movwf	___aldiv@dividend
  9099  0E70  3184  24FA  318E   	fcall	___aldiv
  9100  0E73  0020               	movlb	0	; select bank0
  9101  0E74  0829               	movf	?___aldiv+1,w
  9102  0E75  00B8               	movwf	?_battery_voltage+1
  9103  0E76  0828               	movf	?___aldiv,w
  9104  0E77  00B7               	movwf	?_battery_voltage
  9105  0E78                     l642:
  9106  0E78  0008               	return
  9107  0E79                     __end_of_battery_voltage:
  9108                           
  9109                           	psect	text26
  9110  04FA                     __ptext26:	
  9111 ;; *************** function ___aldiv *****************
  9112 ;; Defined at:
  9113 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aldiv.c"
  9114 ;; Parameters:    Size  Location     Type
  9115 ;;  divisor         4    8[BANK0 ] long 
  9116 ;;  dividend        4   12[BANK0 ] long 
  9117 ;; Auto vars:     Size  Location     Type
  9118 ;;  quotient        4   19[BANK0 ] long 
  9119 ;;  sign            1   18[BANK0 ] unsigned char 
  9120 ;;  counter         1   17[BANK0 ] unsigned char 
  9121 ;; Return value:  Size  Location     Type
  9122 ;;                  4    8[BANK0 ] long 
  9123 ;; Registers used:
  9124 ;;		wreg, status,2, status,0
  9125 ;; Tracked objects:
  9126 ;;		On entry : 0/0
  9127 ;;		On exit  : 0/0
  9128 ;;		Unchanged: 0/0
  9129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9130 ;;      Params:         0       8       0       0       0       0       0       0
  9131 ;;      Locals:         0       6       0       0       0       0       0       0
  9132 ;;      Temps:          0       1       0       0       0       0       0       0
  9133 ;;      Totals:         0      15       0       0       0       0       0       0
  9134 ;;Total ram usage:       15 bytes
  9135 ;; Hardware stack levels used: 1
  9136 ;; Hardware stack levels required when called: 4
  9137 ;; This function calls:
  9138 ;;		Nothing
  9139 ;; This function is called by:
  9140 ;;		_battery_voltage
  9141 ;;		_setCurrent
  9142 ;;		_setFrequency
  9143 ;; This function uses a non-reentrant model
  9144 ;;
  9145                           
  9146                           
  9147                           ;psect for function ___aldiv
  9148  04FA                     ___aldiv:
  9149  04FA                     l3844:	
  9150                           ;incstack = 0
  9151                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9152                           
  9153  04FA  0020               	movlb	0	; select bank0
  9154  04FB  01B2               	clrf	___aldiv@sign
  9155  04FC                     l3846:
  9156  04FC  1FAB               	btfss	___aldiv@divisor+3,7
  9157  04FD  2CFF               	goto	u2391
  9158  04FE  2D00               	goto	u2390
  9159  04FF                     u2391:
  9160  04FF  2D0D               	goto	l901
  9161  0500                     u2390:
  9162  0500                     l3848:
  9163  0500  09A8               	comf	___aldiv@divisor,f
  9164  0501  09A9               	comf	___aldiv@divisor+1,f
  9165  0502  09AA               	comf	___aldiv@divisor+2,f
  9166  0503  09AB               	comf	___aldiv@divisor+3,f
  9167  0504  0AA8               	incf	___aldiv@divisor,f
  9168  0505  1903               	skipnz
  9169  0506  0AA9               	incf	___aldiv@divisor+1,f
  9170  0507  1903               	skipnz
  9171  0508  0AAA               	incf	___aldiv@divisor+2,f
  9172  0509  1903               	skipnz
  9173  050A  0AAB               	incf	___aldiv@divisor+3,f
  9174  050B  01B2               	clrf	___aldiv@sign
  9175  050C  0AB2               	incf	___aldiv@sign,f
  9176  050D                     l901:
  9177  050D  1FAF               	btfss	___aldiv@dividend+3,7
  9178  050E  2D10               	goto	u2401
  9179  050F  2D11               	goto	u2400
  9180  0510                     u2401:
  9181  0510  2D20               	goto	l3854
  9182  0511                     u2400:
  9183  0511                     l3850:
  9184  0511  09AC               	comf	___aldiv@dividend,f
  9185  0512  09AD               	comf	___aldiv@dividend+1,f
  9186  0513  09AE               	comf	___aldiv@dividend+2,f
  9187  0514  09AF               	comf	___aldiv@dividend+3,f
  9188  0515  0AAC               	incf	___aldiv@dividend,f
  9189  0516  1903               	skipnz
  9190  0517  0AAD               	incf	___aldiv@dividend+1,f
  9191  0518  1903               	skipnz
  9192  0519  0AAE               	incf	___aldiv@dividend+2,f
  9193  051A  1903               	skipnz
  9194  051B  0AAF               	incf	___aldiv@dividend+3,f
  9195  051C                     l3852:
  9196  051C  3001               	movlw	1
  9197  051D  00B0               	movwf	??___aldiv
  9198  051E  0830               	movf	??___aldiv,w
  9199  051F  06B2               	xorwf	___aldiv@sign,f
  9200  0520                     l3854:
  9201  0520  3000               	movlw	0
  9202  0521  00B6               	movwf	___aldiv@quotient+3
  9203  0522  3000               	movlw	0
  9204  0523  00B5               	movwf	___aldiv@quotient+2
  9205  0524  3000               	movlw	0
  9206  0525  00B4               	movwf	___aldiv@quotient+1
  9207  0526  3000               	movlw	0
  9208  0527  00B3               	movwf	___aldiv@quotient
  9209  0528                     l3856:
  9210  0528  082B               	movf	___aldiv@divisor+3,w
  9211  0529  042A               	iorwf	___aldiv@divisor+2,w
  9212  052A  0429               	iorwf	___aldiv@divisor+1,w
  9213  052B  0428               	iorwf	___aldiv@divisor,w
  9214  052C  1903               	skipnz
  9215  052D  2D2F               	goto	u2411
  9216  052E  2D30               	goto	u2410
  9217  052F                     u2411:
  9218  052F  2D71               	goto	l3876
  9219  0530                     u2410:
  9220  0530                     l3858:
  9221  0530  01B1               	clrf	___aldiv@counter
  9222  0531  0AB1               	incf	___aldiv@counter,f
  9223  0532  2D3E               	goto	l3862
  9224  0533                     l3860:
  9225  0533  3001               	movlw	1
  9226  0534                     u2425:
  9227  0534  35A8               	lslf	___aldiv@divisor,f
  9228  0535  0DA9               	rlf	___aldiv@divisor+1,f
  9229  0536  0DAA               	rlf	___aldiv@divisor+2,f
  9230  0537  0DAB               	rlf	___aldiv@divisor+3,f
  9231  0538  0B89               	decfsz	9,f
  9232  0539  2D34               	goto	u2425
  9233  053A  3001               	movlw	1
  9234  053B  00B0               	movwf	??___aldiv
  9235  053C  0830               	movf	??___aldiv,w
  9236  053D  07B1               	addwf	___aldiv@counter,f
  9237  053E                     l3862:
  9238  053E  1FAB               	btfss	___aldiv@divisor+3,7
  9239  053F  2D41               	goto	u2431
  9240  0540  2D42               	goto	u2430
  9241  0541                     u2431:
  9242  0541  2D33               	goto	l3860
  9243  0542                     u2430:
  9244  0542                     l3864:
  9245  0542  3001               	movlw	1
  9246  0543                     u2445:
  9247  0543  35B3               	lslf	___aldiv@quotient,f
  9248  0544  0DB4               	rlf	___aldiv@quotient+1,f
  9249  0545  0DB5               	rlf	___aldiv@quotient+2,f
  9250  0546  0DB6               	rlf	___aldiv@quotient+3,f
  9251  0547  0B89               	decfsz	9,f
  9252  0548  2D43               	goto	u2445
  9253  0549                     l3866:
  9254  0549  082B               	movf	___aldiv@divisor+3,w
  9255  054A  022F               	subwf	___aldiv@dividend+3,w
  9256  054B  1D03               	skipz
  9257  054C  2D57               	goto	u2455
  9258  054D  082A               	movf	___aldiv@divisor+2,w
  9259  054E  022E               	subwf	___aldiv@dividend+2,w
  9260  054F  1D03               	skipz
  9261  0550  2D57               	goto	u2455
  9262  0551  0829               	movf	___aldiv@divisor+1,w
  9263  0552  022D               	subwf	___aldiv@dividend+1,w
  9264  0553  1D03               	skipz
  9265  0554  2D57               	goto	u2455
  9266  0555  0828               	movf	___aldiv@divisor,w
  9267  0556  022C               	subwf	___aldiv@dividend,w
  9268  0557                     u2455:
  9269  0557  1C03               	skipc
  9270  0558  2D5A               	goto	u2451
  9271  0559  2D5B               	goto	u2450
  9272  055A                     u2451:
  9273  055A  2D64               	goto	l3872
  9274  055B                     u2450:
  9275  055B                     l3868:
  9276  055B  0828               	movf	___aldiv@divisor,w
  9277  055C  02AC               	subwf	___aldiv@dividend,f
  9278  055D  0829               	movf	___aldiv@divisor+1,w
  9279  055E  3BAD               	subwfb	___aldiv@dividend+1,f
  9280  055F  082A               	movf	___aldiv@divisor+2,w
  9281  0560  3BAE               	subwfb	___aldiv@dividend+2,f
  9282  0561  082B               	movf	___aldiv@divisor+3,w
  9283  0562  3BAF               	subwfb	___aldiv@dividend+3,f
  9284  0563                     l3870:
  9285  0563  1433               	bsf	___aldiv@quotient,0
  9286  0564                     l3872:
  9287  0564  3001               	movlw	1
  9288  0565                     u2465:
  9289  0565  36AB               	lsrf	___aldiv@divisor+3,f
  9290  0566  0CAA               	rrf	___aldiv@divisor+2,f
  9291  0567  0CA9               	rrf	___aldiv@divisor+1,f
  9292  0568  0CA8               	rrf	___aldiv@divisor,f
  9293  0569  0B89               	decfsz	9,f
  9294  056A  2D65               	goto	u2465
  9295  056B                     l3874:
  9296  056B  3001               	movlw	1
  9297  056C  02B1               	subwf	___aldiv@counter,f
  9298  056D  1D03               	btfss	3,2
  9299  056E  2D70               	goto	u2471
  9300  056F  2D71               	goto	u2470
  9301  0570                     u2471:
  9302  0570  2D42               	goto	l3864
  9303  0571                     u2470:
  9304  0571                     l3876:
  9305  0571  0832               	movf	___aldiv@sign,w
  9306  0572  1903               	btfsc	3,2
  9307  0573  2D75               	goto	u2481
  9308  0574  2D76               	goto	u2480
  9309  0575                     u2481:
  9310  0575  2D81               	goto	l3880
  9311  0576                     u2480:
  9312  0576                     l3878:
  9313  0576  09B3               	comf	___aldiv@quotient,f
  9314  0577  09B4               	comf	___aldiv@quotient+1,f
  9315  0578  09B5               	comf	___aldiv@quotient+2,f
  9316  0579  09B6               	comf	___aldiv@quotient+3,f
  9317  057A  0AB3               	incf	___aldiv@quotient,f
  9318  057B  1903               	skipnz
  9319  057C  0AB4               	incf	___aldiv@quotient+1,f
  9320  057D  1903               	skipnz
  9321  057E  0AB5               	incf	___aldiv@quotient+2,f
  9322  057F  1903               	skipnz
  9323  0580  0AB6               	incf	___aldiv@quotient+3,f
  9324  0581                     l3880:
  9325  0581  0836               	movf	___aldiv@quotient+3,w
  9326  0582  00AB               	movwf	?___aldiv+3
  9327  0583  0835               	movf	___aldiv@quotient+2,w
  9328  0584  00AA               	movwf	?___aldiv+2
  9329  0585  0834               	movf	___aldiv@quotient+1,w
  9330  0586  00A9               	movwf	?___aldiv+1
  9331  0587  0833               	movf	___aldiv@quotient,w
  9332  0588  00A8               	movwf	?___aldiv
  9333  0589                     l911:
  9334  0589  0008               	return
  9335  058A                     __end_of___aldiv:
  9336                           
  9337                           	psect	text27
  9338  0DB6                     __ptext27:	
  9339 ;; *************** function _lowBattery *****************
  9340 ;; Defined at:
  9341 ;;		line 235 in file "main.c"
  9342 ;; Parameters:    Size  Location     Type
  9343 ;;		None
  9344 ;; Auto vars:     Size  Location     Type
  9345 ;;		None
  9346 ;; Return value:  Size  Location     Type
  9347 ;;                  1    wreg      void 
  9348 ;; Registers used:
  9349 ;;		wreg, status,2, status,0, pclath, cstack
  9350 ;; Tracked objects:
  9351 ;;		On entry : 0/0
  9352 ;;		On exit  : 0/0
  9353 ;;		Unchanged: 0/0
  9354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9355 ;;      Params:         0       0       0       0       0       0       0       0
  9356 ;;      Locals:         0       0       0       0       0       0       0       0
  9357 ;;      Temps:          0       2       0       0       0       0       0       0
  9358 ;;      Totals:         0       2       0       0       0       0       0       0
  9359 ;;Total ram usage:        2 bytes
  9360 ;; Hardware stack levels used: 1
  9361 ;; Hardware stack levels required when called: 5
  9362 ;; This function calls:
  9363 ;;		_setLEDColor
  9364 ;; This function is called by:
  9365 ;;		_main
  9366 ;; This function uses a non-reentrant model
  9367 ;;
  9368                           
  9369                           
  9370                           ;psect for function _lowBattery
  9371  0DB6                     _lowBattery:
  9372  0DB6                     l4056:	
  9373                           ;incstack = 0
  9374                           ; Regs used in _lowBattery: [wreg+status,2+status,0+pclath+cstack]
  9375                           
  9376                           
  9377                           ;main.c: 236:   interfaceState = STATE_LOWBATTERY;
  9378  0DB6  3003               	movlw	3
  9379  0DB7  0020               	movlb	0	; select bank0
  9380  0DB8  00A0               	movwf	??_lowBattery
  9381  0DB9  0820               	movf	??_lowBattery,w
  9382  0DBA  00F8               	movwf	_interfaceState
  9383  0DBB                     l4058:
  9384                           
  9385                           ;main.c: 237:   setLEDColor(255, 0, 0);
  9386  0DBB  01F3               	clrf	setLEDColor@green
  9387  0DBC  01F4               	clrf	setLEDColor@blue
  9388  0DBD  30FF               	movlw	255
  9389  0DBE  318B  23D6  318D   	fcall	_setLEDColor
  9390  0DC1                     l4060:
  9391                           
  9392                           ;main.c: 238:   _delay((unsigned long)((250)*(4000000/4000.0)));
  9393  0DC1  3002               	movlw	2
  9394  0DC2  0020               	movlb	0	; select bank0
  9395  0DC3  00A1               	movwf	??_lowBattery+1
  9396  0DC4  3045               	movlw	69
  9397  0DC5  00A0               	movwf	??_lowBattery
  9398  0DC6  30A9               	movlw	169
  9399  0DC7                     u3167:
  9400  0DC7  0B89               	decfsz	9,f
  9401  0DC8  2DC7               	goto	u3167
  9402  0DC9  0BA0               	decfsz	??_lowBattery,f
  9403  0DCA  2DC7               	goto	u3167
  9404  0DCB  0BA1               	decfsz	??_lowBattery+1,f
  9405  0DCC  2DC7               	goto	u3167
  9406  0DCD  3200               	nop2
  9407                           
  9408                           ;main.c: 239:   setLEDColor(0, 0, 0);
  9409  0DCE  01F3               	clrf	setLEDColor@green
  9410  0DCF  01F4               	clrf	setLEDColor@blue
  9411  0DD0  3000               	movlw	0
  9412  0DD1  318B  23D6  318D   	fcall	_setLEDColor
  9413  0DD4                     l4062:
  9414                           
  9415                           ;main.c: 240:   _delay((unsigned long)((500)*(4000000/4000.0)));
  9416  0DD4  3003               	movlw	3
  9417  0DD5  0020               	movlb	0	; select bank0
  9418  0DD6  00A1               	movwf	??_lowBattery+1
  9419  0DD7  308A               	movlw	138
  9420  0DD8  00A0               	movwf	??_lowBattery
  9421  0DD9  3055               	movlw	85
  9422  0DDA                     u3177:
  9423  0DDA  0B89               	decfsz	9,f
  9424  0DDB  2DDA               	goto	u3177
  9425  0DDC  0BA0               	decfsz	??_lowBattery,f
  9426  0DDD  2DDA               	goto	u3177
  9427  0DDE  0BA1               	decfsz	??_lowBattery+1,f
  9428  0DDF  2DDA               	goto	u3177
  9429  0DE0  3200               	nop2
  9430  0DE1                     l653:
  9431  0DE1  0008               	return
  9432  0DE2                     __end_of_lowBattery:
  9433                           
  9434                           	psect	text28
  9435  0BD6                     __ptext28:	
  9436 ;; *************** function _setLEDColor *****************
  9437 ;; Defined at:
  9438 ;;		line 214 in file "main.c"
  9439 ;; Parameters:    Size  Location     Type
  9440 ;;  red             1    wreg     unsigned char 
  9441 ;;  green           1    3[COMMON] unsigned char 
  9442 ;;  blue            1    4[COMMON] unsigned char 
  9443 ;; Auto vars:     Size  Location     Type
  9444 ;;  red             1    6[COMMON] unsigned char 
  9445 ;; Return value:  Size  Location     Type
  9446 ;;                  1    wreg      void 
  9447 ;; Registers used:
  9448 ;;		wreg, status,2, status,0
  9449 ;; Tracked objects:
  9450 ;;		On entry : 0/0
  9451 ;;		On exit  : 0/0
  9452 ;;		Unchanged: 0/0
  9453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9454 ;;      Params:         2       0       0       0       0       0       0       0
  9455 ;;      Locals:         1       0       0       0       0       0       0       0
  9456 ;;      Temps:          1       0       0       0       0       0       0       0
  9457 ;;      Totals:         4       0       0       0       0       0       0       0
  9458 ;;Total ram usage:        4 bytes
  9459 ;; Hardware stack levels used: 1
  9460 ;; Hardware stack levels required when called: 4
  9461 ;; This function calls:
  9462 ;;		Nothing
  9463 ;; This function is called by:
  9464 ;;		_lowBattery
  9465 ;;		_startUp
  9466 ;;		_selectSomething
  9467 ;;		_selectFrequency
  9468 ;;		_selectCurrent
  9469 ;;		_selectIncrease
  9470 ;;		_selectDecrease
  9471 ;;		_selectCurrentValue
  9472 ;;		_selectFrequencyValue
  9473 ;;		_process_remote_command
  9474 ;;		_selectResetValue
  9475 ;; This function uses a non-reentrant model
  9476 ;;
  9477                           
  9478                           
  9479                           ;psect for function _setLEDColor
  9480  0BD6                     _setLEDColor:
  9481                           
  9482                           ;incstack = 0
  9483                           ; Regs used in _setLEDColor: [wreg+status,2+status,0]
  9484                           ;setLEDColor@red stored from wreg
  9485  0BD6  00F6               	movwf	setLEDColor@red
  9486  0BD7                     l3812:
  9487                           
  9488                           ;main.c: 214: void setLEDColor(uint8_t red, uint8_t green, uint8_t blue);main.c: 215: {;
      +                          main.c: 221:   if (0 == blue){
  9489  0BD7  0874               	movf	setLEDColor@blue,w
  9490  0BD8  1D03               	btfss	3,2
  9491  0BD9  2BDB               	goto	u2341
  9492  0BDA  2BDC               	goto	u2340
  9493  0BDB                     u2341:
  9494  0BDB  2BDF               	goto	l3816
  9495  0BDC                     u2340:
  9496  0BDC                     l3814:
  9497                           
  9498                           ;main.c: 222:     TRISC |= 0b00100000;
  9499  0BDC  0021               	movlb	1	; select bank1
  9500  0BDD  168E               	bsf	14,5	;volatile
  9501                           
  9502                           ;main.c: 223:   } else {
  9503  0BDE  2BE4               	goto	l3818
  9504  0BDF                     l3816:
  9505                           
  9506                           ;main.c: 224:     TRISC &= 0b11011111;
  9507  0BDF  30DF               	movlw	223
  9508  0BE0  00F5               	movwf	??_setLEDColor
  9509  0BE1  0875               	movf	??_setLEDColor,w
  9510  0BE2  0021               	movlb	1	; select bank1
  9511  0BE3  058E               	andwf	14,f	;volatile
  9512  0BE4                     l3818:
  9513                           
  9514                           ;main.c: 226:   CCPR1L = 255U - blue;
  9515  0BE4  0974               	comf	setLEDColor@blue,w
  9516  0BE5  0025               	movlb	5	; select bank5
  9517  0BE6  0091               	movwf	17	;volatile
  9518  0BE7                     l3820:
  9519                           
  9520                           ;main.c: 228:   PWM3DCH = red;
  9521  0BE7  0876               	movf	setLEDColor@red,w
  9522  0BE8  002C               	movlb	12	; select bank12
  9523  0BE9  0098               	movwf	24	;volatile
  9524  0BEA                     l3822:
  9525                           
  9526                           ;main.c: 230:   PWM4DCH = green;
  9527  0BEA  0873               	movf	setLEDColor@green,w
  9528  0BEB  009B               	movwf	27	;volatile
  9529  0BEC                     l650:
  9530  0BEC  0008               	return
  9531  0BED                     __end_of_setLEDColor:
  9532                           
  9533                           	psect	text29
  9534  07A6                     __ptext29:	
  9535 ;; *************** function _initLED *****************
  9536 ;; Defined at:
  9537 ;;		line 173 in file "main.c"
  9538 ;; Parameters:    Size  Location     Type
  9539 ;;		None
  9540 ;; Auto vars:     Size  Location     Type
  9541 ;;		None
  9542 ;; Return value:  Size  Location     Type
  9543 ;;                  1    wreg      void 
  9544 ;; Registers used:
  9545 ;;		wreg, status,2, status,0
  9546 ;; Tracked objects:
  9547 ;;		On entry : 0/0
  9548 ;;		On exit  : 0/0
  9549 ;;		Unchanged: 0/0
  9550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9551 ;;      Params:         0       0       0       0       0       0       0       0
  9552 ;;      Locals:         0       0       0       0       0       0       0       0
  9553 ;;      Temps:          1       0       0       0       0       0       0       0
  9554 ;;      Totals:         1       0       0       0       0       0       0       0
  9555 ;;Total ram usage:        1 bytes
  9556 ;; Hardware stack levels used: 1
  9557 ;; Hardware stack levels required when called: 4
  9558 ;; This function calls:
  9559 ;;		Nothing
  9560 ;; This function is called by:
  9561 ;;		_main
  9562 ;; This function uses a non-reentrant model
  9563 ;;
  9564                           
  9565                           
  9566                           ;psect for function _initLED
  9567  07A6                     _initLED:
  9568  07A6                     l3218:	
  9569                           ;incstack = 0
  9570                           ; Regs used in _initLED: [wreg+status,2+status,0]
  9571                           
  9572                           
  9573                           ;main.c: 176:   PR2 = 255;
  9574  07A6  30FF               	movlw	255
  9575  07A7  0020               	movlb	0	; select bank0
  9576  07A8  009B               	movwf	27	;volatile
  9577  07A9                     l3220:
  9578                           
  9579                           ;main.c: 177:   T2CONbits.T2CKPS = 0b10;
  9580  07A9  081C               	movf	28,w	;volatile
  9581  07AA  39FC               	andlw	-4
  9582  07AB  3802               	iorlw	2
  9583  07AC  009C               	movwf	28	;volatile
  9584  07AD                     l3222:
  9585                           
  9586                           ;main.c: 178:   T2CONbits.TMR2ON = 1;
  9587  07AD  151C               	bsf	28,2	;volatile
  9588  07AE                     l3224:
  9589                           
  9590                           ;main.c: 182:   TRISC |= 0b00010000;
  9591  07AE  0021               	movlb	1	; select bank1
  9592  07AF  160E               	bsf	14,4	;volatile
  9593  07B0                     l3226:
  9594                           
  9595                           ;main.c: 183:   RC4PPS = 0b01110;
  9596  07B0  300E               	movlw	14
  9597  07B1  003D               	movlb	29	; select bank29
  9598  07B2  00A4               	movwf	36	;volatile
  9599                           
  9600                           ;main.c: 184:   CCPTMRSbits.P3TSEL = 0b00;
  9601  07B3  30CF               	movlw	-49
  9602  07B4  0025               	movlb	5	; select bank5
  9603  07B5  059E               	andwf	30,f	;volatile
  9604  07B6                     l3228:
  9605                           
  9606                           ;main.c: 185:   PWM3DCH = 0;
  9607  07B6  002C               	movlb	12	; select bank12
  9608  07B7  0198               	clrf	24	;volatile
  9609  07B8                     l3230:
  9610                           
  9611                           ;main.c: 186:   PWM3DCLbits.PWM3DCL = 0;
  9612  07B8  303F               	movlw	-193
  9613  07B9  0597               	andwf	23,f	;volatile
  9614  07BA                     l3232:
  9615                           
  9616                           ;main.c: 187:   PWM3CONbits.PWM3POL = 1;
  9617  07BA  1619               	bsf	25,4	;volatile
  9618  07BB                     l3234:
  9619                           
  9620                           ;main.c: 188:   TRISC &= 0b11101111;
  9621  07BB  30EF               	movlw	239
  9622  07BC  00F3               	movwf	??_initLED
  9623  07BD  0873               	movf	??_initLED,w
  9624  07BE  0021               	movlb	1	; select bank1
  9625  07BF  058E               	andwf	14,f	;volatile
  9626  07C0                     l3236:
  9627                           
  9628                           ;main.c: 189:   PWM3CONbits.PWM3EN = 1;
  9629  07C0  002C               	movlb	12	; select bank12
  9630  07C1  1799               	bsf	25,7	;volatile
  9631  07C2                     l3238:
  9632                           
  9633                           ;main.c: 193:   TRISA |= 0b00100000;
  9634  07C2  0021               	movlb	1	; select bank1
  9635  07C3  168C               	bsf	12,5	;volatile
  9636  07C4                     l3240:
  9637                           
  9638                           ;main.c: 194:   RA5PPS = 0b01111;
  9639  07C4  300F               	movlw	15
  9640  07C5  003D               	movlb	29	; select bank29
  9641  07C6  0095               	movwf	21	;volatile
  9642  07C7                     l3242:
  9643                           
  9644                           ;main.c: 195:   CCPTMRSbits.P4TSEL = 0b00;
  9645  07C7  303F               	movlw	-193
  9646  07C8  0025               	movlb	5	; select bank5
  9647  07C9  059E               	andwf	30,f	;volatile
  9648  07CA                     l3244:
  9649                           
  9650                           ;main.c: 196:   PWM4DCH = 0;
  9651  07CA  002C               	movlb	12	; select bank12
  9652  07CB  019B               	clrf	27	;volatile
  9653  07CC                     l3246:
  9654                           
  9655                           ;main.c: 197:   PWM4DCLbits.PWM4DCL = 0;
  9656  07CC  303F               	movlw	-193
  9657  07CD  059A               	andwf	26,f	;volatile
  9658  07CE                     l3248:
  9659                           
  9660                           ;main.c: 198:   PWM4CONbits.PWM4POL = 1;
  9661  07CE  161C               	bsf	28,4	;volatile
  9662  07CF                     l3250:
  9663                           
  9664                           ;main.c: 199:   TRISA &= 0b11011111;
  9665  07CF  30DF               	movlw	223
  9666  07D0  00F3               	movwf	??_initLED
  9667  07D1  0873               	movf	??_initLED,w
  9668  07D2  0021               	movlb	1	; select bank1
  9669  07D3  058C               	andwf	12,f	;volatile
  9670  07D4                     l3252:
  9671                           
  9672                           ;main.c: 200:   PWM4CONbits.PWM4EN = 1;
  9673  07D4  002C               	movlb	12	; select bank12
  9674  07D5  179C               	bsf	28,7	;volatile
  9675  07D6                     l3254:
  9676                           
  9677                           ;main.c: 206:   TRISC |= 0b00100000;
  9678  07D6  0021               	movlb	1	; select bank1
  9679  07D7  168E               	bsf	14,5	;volatile
  9680                           
  9681                           ;main.c: 207:   RC5PPS = 0b01100;
  9682  07D8  300C               	movlw	12
  9683  07D9  003D               	movlb	29	; select bank29
  9684  07DA  00A5               	movwf	37	;volatile
  9685  07DB                     l3256:
  9686                           
  9687                           ;main.c: 208:   CCP1CONbits.CCP1M = 0b1100;
  9688  07DB  0025               	movlb	5	; select bank5
  9689  07DC  0813               	movf	19,w	;volatile
  9690  07DD  39F0               	andlw	-16
  9691  07DE  380C               	iorlw	12
  9692  07DF  0093               	movwf	19	;volatile
  9693  07E0                     l3258:
  9694                           
  9695                           ;main.c: 209:   CCPR1L = 255;
  9696  07E0  30FF               	movlw	255
  9697  07E1  0091               	movwf	17	;volatile
  9698                           
  9699                           ;main.c: 210:   CCP1CONbits.DC1B = 0x3;
  9700  07E2  3030               	movlw	48
  9701  07E3  0493               	iorwf	19,f	;volatile
  9702                           
  9703                           ;main.c: 211:   TRISC &= 0b11011111;
  9704  07E4  30DF               	movlw	223
  9705  07E5  00F3               	movwf	??_initLED
  9706  07E6  0873               	movf	??_initLED,w
  9707  07E7  0021               	movlb	1	; select bank1
  9708  07E8  058E               	andwf	14,f	;volatile
  9709  07E9                     l645:
  9710  07E9  0008               	return
  9711  07EA                     __end_of_initLED:
  9712                           
  9713                           	psect	text30
  9714  0C9F                     __ptext30:	
  9715 ;; *************** function _SYSTEM_Initialize *****************
  9716 ;; Defined at:
  9717 ;;		line 50 in file "mcc_generated_files/mcc.c"
  9718 ;; Parameters:    Size  Location     Type
  9719 ;;		None
  9720 ;; Auto vars:     Size  Location     Type
  9721 ;;		None
  9722 ;; Return value:  Size  Location     Type
  9723 ;;                  1    wreg      void 
  9724 ;; Registers used:
  9725 ;;		wreg, status,2, status,0, pclath, cstack
  9726 ;; Tracked objects:
  9727 ;;		On entry : 0/0
  9728 ;;		On exit  : 0/0
  9729 ;;		Unchanged: 0/0
  9730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9731 ;;      Params:         0       0       0       0       0       0       0       0
  9732 ;;      Locals:         0       0       0       0       0       0       0       0
  9733 ;;      Temps:          0       0       0       0       0       0       0       0
  9734 ;;      Totals:         0       0       0       0       0       0       0       0
  9735 ;;Total ram usage:        0 bytes
  9736 ;; Hardware stack levels used: 1
  9737 ;; Hardware stack levels required when called: 6
  9738 ;; This function calls:
  9739 ;;		_DAC_Initialize
  9740 ;;		_EUSART_Initialize
  9741 ;;		_EXT_INT_Initialize
  9742 ;;		_OPA1_Initialize
  9743 ;;		_OPA2_Initialize
  9744 ;;		_OSCILLATOR_Initialize
  9745 ;;		_PIN_MANAGER_Initialize
  9746 ;;		_TMR0_Initialize
  9747 ;;		_TMR1_Initialize
  9748 ;;		_TMR2_Initialize
  9749 ;;		_TMR4_Initialize
  9750 ;;		_WDT_Initialize
  9751 ;; This function is called by:
  9752 ;;		_main
  9753 ;; This function uses a non-reentrant model
  9754 ;;
  9755                           
  9756                           
  9757                           ;psect for function _SYSTEM_Initialize
  9758  0C9F                     _SYSTEM_Initialize:
  9759  0C9F                     l3156:	
  9760                           ;incstack = 0
  9761                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9762                           
  9763                           
  9764                           ;mcc_generated_files/mcc.c: 52:     PIN_MANAGER_Initialize();
  9765  0C9F  318E  2613  318C   	fcall	_PIN_MANAGER_Initialize
  9766                           
  9767                           ;mcc_generated_files/mcc.c: 53:     OSCILLATOR_Initialize();
  9768  0CA2  318B  230C  318C   	fcall	_OSCILLATOR_Initialize
  9769  0CA5                     l3158:
  9770                           
  9771                           ;mcc_generated_files/mcc.c: 54:     WDT_Initialize();
  9772  0CA5  318A  22B0  318C   	fcall	_WDT_Initialize
  9773  0CA8                     l3160:
  9774                           
  9775                           ;mcc_generated_files/mcc.c: 55:     DAC_Initialize();
  9776  0CA8  318A  22CA  318C   	fcall	_DAC_Initialize
  9777  0CAB                     l3162:
  9778                           
  9779                           ;mcc_generated_files/mcc.c: 56:     OPA1_Initialize();
  9780  0CAB  318A  22B3  318C   	fcall	_OPA1_Initialize
  9781  0CAE                     l3164:
  9782                           
  9783                           ;mcc_generated_files/mcc.c: 57:     TMR4_Initialize();
  9784  0CAE  318B  2398  318C   	fcall	_TMR4_Initialize
  9785  0CB1                     l3166:
  9786                           
  9787                           ;mcc_generated_files/mcc.c: 58:     OPA2_Initialize();
  9788  0CB1  318A  22B7  318C   	fcall	_OPA2_Initialize
  9789  0CB4                     l3168:
  9790                           
  9791                           ;mcc_generated_files/mcc.c: 59:     TMR1_Initialize();
  9792  0CB4  318B  23ED  318C   	fcall	_TMR1_Initialize
  9793  0CB7                     l3170:
  9794                           
  9795                           ;mcc_generated_files/mcc.c: 60:     TMR2_Initialize();
  9796  0CB7  318B  2314  318C   	fcall	_TMR2_Initialize
  9797  0CBA                     l3172:
  9798                           
  9799                           ;mcc_generated_files/mcc.c: 61:     EXT_INT_Initialize();
  9800  0CBA  318B  233B  318C   	fcall	_EXT_INT_Initialize
  9801  0CBD                     l3174:
  9802                           
  9803                           ;mcc_generated_files/mcc.c: 62:     TMR0_Initialize();
  9804  0CBD  318B  2374  318C   	fcall	_TMR0_Initialize
  9805  0CC0                     l3176:
  9806                           
  9807                           ;mcc_generated_files/mcc.c: 63:     EUSART_Initialize();
  9808  0CC0  318C  245B  318C   	fcall	_EUSART_Initialize
  9809  0CC3                     l50:
  9810  0CC3  0008               	return
  9811  0CC4                     __end_of_SYSTEM_Initialize:
  9812                           
  9813                           	psect	text31
  9814  0AB0                     __ptext31:	
  9815 ;; *************** function _WDT_Initialize *****************
  9816 ;; Defined at:
  9817 ;;		line 78 in file "mcc_generated_files/mcc.c"
  9818 ;; Parameters:    Size  Location     Type
  9819 ;;		None
  9820 ;; Auto vars:     Size  Location     Type
  9821 ;;		None
  9822 ;; Return value:  Size  Location     Type
  9823 ;;                  1    wreg      void 
  9824 ;; Registers used:
  9825 ;;		status,2
  9826 ;; Tracked objects:
  9827 ;;		On entry : 0/0
  9828 ;;		On exit  : 0/0
  9829 ;;		Unchanged: 0/0
  9830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9831 ;;      Params:         0       0       0       0       0       0       0       0
  9832 ;;      Locals:         0       0       0       0       0       0       0       0
  9833 ;;      Temps:          0       0       0       0       0       0       0       0
  9834 ;;      Totals:         0       0       0       0       0       0       0       0
  9835 ;;Total ram usage:        0 bytes
  9836 ;; Hardware stack levels used: 1
  9837 ;; Hardware stack levels required when called: 4
  9838 ;; This function calls:
  9839 ;;		Nothing
  9840 ;; This function is called by:
  9841 ;;		_SYSTEM_Initialize
  9842 ;; This function uses a non-reentrant model
  9843 ;;
  9844                           
  9845                           
  9846                           ;psect for function _WDT_Initialize
  9847  0AB0                     _WDT_Initialize:
  9848  0AB0                     l2940:	
  9849                           ;incstack = 0
  9850                           ; Regs used in _WDT_Initialize: [status,2]
  9851                           
  9852                           
  9853                           ;mcc_generated_files/mcc.c: 81:     WDTCON = 0b00000000;
  9854  0AB0  0021               	movlb	1	; select bank1
  9855  0AB1  0197               	clrf	23	;volatile
  9856  0AB2                     l56:
  9857  0AB2  0008               	return
  9858  0AB3                     __end_of_WDT_Initialize:
  9859                           
  9860                           	psect	text32
  9861  0B98                     __ptext32:	
  9862 ;; *************** function _TMR4_Initialize *****************
  9863 ;; Defined at:
  9864 ;;		line 65 in file "mcc_generated_files/tmr4.c"
  9865 ;; Parameters:    Size  Location     Type
  9866 ;;		None
  9867 ;; Auto vars:     Size  Location     Type
  9868 ;;		None
  9869 ;; Return value:  Size  Location     Type
  9870 ;;                  1    wreg      void 
  9871 ;; Registers used:
  9872 ;;		wreg, status,2, status,0, pclath, cstack
  9873 ;; Tracked objects:
  9874 ;;		On entry : 0/0
  9875 ;;		On exit  : 0/0
  9876 ;;		Unchanged: 0/0
  9877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9878 ;;      Params:         0       0       0       0       0       0       0       0
  9879 ;;      Locals:         0       0       0       0       0       0       0       0
  9880 ;;      Temps:          0       0       0       0       0       0       0       0
  9881 ;;      Totals:         0       0       0       0       0       0       0       0
  9882 ;;Total ram usage:        0 bytes
  9883 ;; Hardware stack levels used: 1
  9884 ;; Hardware stack levels required when called: 5
  9885 ;; This function calls:
  9886 ;;		_TMR4_SetInterruptHandler
  9887 ;; This function is called by:
  9888 ;;		_SYSTEM_Initialize
  9889 ;; This function uses a non-reentrant model
  9890 ;;
  9891                           
  9892                           
  9893                           ;psect for function _TMR4_Initialize
  9894  0B98                     _TMR4_Initialize:
  9895  0B98                     l2944:	
  9896                           ;incstack = 0
  9897                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9898                           
  9899                           
  9900                           ;mcc_generated_files/tmr4.c: 70:     PR4 = 0x04;
  9901  0B98  3004               	movlw	4
  9902  0B99  0028               	movlb	8	; select bank8
  9903  0B9A  0096               	movwf	22	;volatile
  9904  0B9B                     l2946:
  9905                           
  9906                           ;mcc_generated_files/tmr4.c: 73:     TMR4 = 0x00;
  9907  0B9B  0195               	clrf	21	;volatile
  9908  0B9C                     l2948:
  9909                           
  9910                           ;mcc_generated_files/tmr4.c: 76:     PIR2bits.TMR4IF = 0;
  9911  0B9C  0020               	movlb	0	; select bank0
  9912  0B9D  1092               	bcf	18,1	;volatile
  9913  0B9E                     l2950:
  9914                           
  9915                           ;mcc_generated_files/tmr4.c: 79:     PIE2bits.TMR4IE = 1;
  9916  0B9E  0021               	movlb	1	; select bank1
  9917  0B9F  1492               	bsf	18,1	;volatile
  9918  0BA0                     l2952:
  9919                           
  9920                           ;mcc_generated_files/tmr4.c: 82:     TMR4_SetInterruptHandler(TMR4_DefaultInterruptHandl
      +                          er);
  9921  0BA0  308A               	movlw	low _TMR4_DefaultInterruptHandler
  9922  0BA1  00F3               	movwf	TMR4_SetInterruptHandler@InterruptHandler
  9923  0BA2  300D               	movlw	high _TMR4_DefaultInterruptHandler
  9924  0BA3  00F4               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1
  9925  0BA4  318A  22F4  318B   	fcall	_TMR4_SetInterruptHandler
  9926  0BA7                     l2954:
  9927                           
  9928                           ;mcc_generated_files/tmr4.c: 85:     T4CON = 0x16;
  9929  0BA7  3016               	movlw	22
  9930  0BA8  0028               	movlb	8	; select bank8
  9931  0BA9  0097               	movwf	23	;volatile
  9932  0BAA                     l398:
  9933  0BAA  0008               	return
  9934  0BAB                     __end_of_TMR4_Initialize:
  9935                           
  9936                           	psect	text33
  9937  0AF4                     __ptext33:	
  9938 ;; *************** function _TMR4_SetInterruptHandler *****************
  9939 ;; Defined at:
  9940 ;;		line 133 in file "mcc_generated_files/tmr4.c"
  9941 ;; Parameters:    Size  Location     Type
  9942 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  9943 ;;		 -> TMR4_DefaultInterruptHandler(1), 
  9944 ;; Auto vars:     Size  Location     Type
  9945 ;;		None
  9946 ;; Return value:  Size  Location     Type
  9947 ;;                  1    wreg      void 
  9948 ;; Registers used:
  9949 ;;		wreg
  9950 ;; Tracked objects:
  9951 ;;		On entry : 0/0
  9952 ;;		On exit  : 0/0
  9953 ;;		Unchanged: 0/0
  9954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9955 ;;      Params:         2       0       0       0       0       0       0       0
  9956 ;;      Locals:         0       0       0       0       0       0       0       0
  9957 ;;      Temps:          0       0       0       0       0       0       0       0
  9958 ;;      Totals:         2       0       0       0       0       0       0       0
  9959 ;;Total ram usage:        2 bytes
  9960 ;; Hardware stack levels used: 1
  9961 ;; Hardware stack levels required when called: 4
  9962 ;; This function calls:
  9963 ;;		Nothing
  9964 ;; This function is called by:
  9965 ;;		_TMR4_Initialize
  9966 ;; This function uses a non-reentrant model
  9967 ;;
  9968                           
  9969                           
  9970                           ;psect for function _TMR4_SetInterruptHandler
  9971  0AF4                     _TMR4_SetInterruptHandler:
  9972  0AF4                     l2728:	
  9973                           ;incstack = 0
  9974                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
  9975                           
  9976                           
  9977                           ;mcc_generated_files/tmr4.c: 134:     TMR4_InterruptHandler = InterruptHandler;
  9978  0AF4  0874               	movf	TMR4_SetInterruptHandler@InterruptHandler+1,w
  9979  0AF5  0021               	movlb	1	; select bank1
  9980  0AF6  00D9               	movwf	(_TMR4_InterruptHandler+1)^(0+128)
  9981  0AF7  0873               	movf	TMR4_SetInterruptHandler@InterruptHandler,w
  9982  0AF8  00D8               	movwf	_TMR4_InterruptHandler^(0+128)
  9983  0AF9                     l420:
  9984  0AF9  0008               	return
  9985  0AFA                     __end_of_TMR4_SetInterruptHandler:
  9986                           
  9987                           	psect	text34
  9988  0B14                     __ptext34:	
  9989 ;; *************** function _TMR2_Initialize *****************
  9990 ;; Defined at:
  9991 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  9992 ;; Parameters:    Size  Location     Type
  9993 ;;		None
  9994 ;; Auto vars:     Size  Location     Type
  9995 ;;		None
  9996 ;; Return value:  Size  Location     Type
  9997 ;;                  1    wreg      void 
  9998 ;; Registers used:
  9999 ;;		wreg, status,2
 10000 ;; Tracked objects:
 10001 ;;		On entry : 0/0
 10002 ;;		On exit  : 0/0
 10003 ;;		Unchanged: 0/0
 10004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10005 ;;      Params:         0       0       0       0       0       0       0       0
 10006 ;;      Locals:         0       0       0       0       0       0       0       0
 10007 ;;      Temps:          0       0       0       0       0       0       0       0
 10008 ;;      Totals:         0       0       0       0       0       0       0       0
 10009 ;;Total ram usage:        0 bytes
 10010 ;; Hardware stack levels used: 1
 10011 ;; Hardware stack levels required when called: 4
 10012 ;; This function calls:
 10013 ;;		Nothing
 10014 ;; This function is called by:
 10015 ;;		_SYSTEM_Initialize
 10016 ;; This function uses a non-reentrant model
 10017 ;;
 10018                           
 10019                           
 10020                           ;psect for function _TMR2_Initialize
 10021  0B14                     _TMR2_Initialize:
 10022  0B14                     l2970:	
 10023                           ;incstack = 0
 10024                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 10025                           
 10026                           
 10027                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 255;
 10028  0B14  30FF               	movlw	255
 10029  0B15  0020               	movlb	0	; select bank0
 10030  0B16  009B               	movwf	27	;volatile
 10031  0B17                     l2972:
 10032                           
 10033                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
 10034  0B17  019A               	clrf	26	;volatile
 10035  0B18                     l2974:
 10036                           
 10037                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
 10038  0B18  1091               	bcf	17,1	;volatile
 10039  0B19                     l2976:
 10040                           
 10041                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x06;
 10042  0B19  3006               	movlw	6
 10043  0B1A  009C               	movwf	28	;volatile
 10044  0B1B                     l305:
 10045  0B1B  0008               	return
 10046  0B1C                     __end_of_TMR2_Initialize:
 10047                           
 10048                           	psect	text35
 10049  0BED                     __ptext35:	
 10050 ;; *************** function _TMR1_Initialize *****************
 10051 ;; Defined at:
 10052 ;;		line 65 in file "tmr1.c"
 10053 ;; Parameters:    Size  Location     Type
 10054 ;;		None
 10055 ;; Auto vars:     Size  Location     Type
 10056 ;;		None
 10057 ;; Return value:  Size  Location     Type
 10058 ;;                  1    wreg      void 
 10059 ;; Registers used:
 10060 ;;		wreg, status,2, status,0, pclath, cstack
 10061 ;; Tracked objects:
 10062 ;;		On entry : 0/0
 10063 ;;		On exit  : 0/0
 10064 ;;		Unchanged: 0/0
 10065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10066 ;;      Params:         0       0       0       0       0       0       0       0
 10067 ;;      Locals:         0       0       0       0       0       0       0       0
 10068 ;;      Temps:          0       0       0       0       0       0       0       0
 10069 ;;      Totals:         0       0       0       0       0       0       0       0
 10070 ;;Total ram usage:        0 bytes
 10071 ;; Hardware stack levels used: 1
 10072 ;; Hardware stack levels required when called: 5
 10073 ;; This function calls:
 10074 ;;		_TMR1_SetInterruptHandler
 10075 ;; This function is called by:
 10076 ;;		_SYSTEM_Initialize
 10077 ;; This function uses a non-reentrant model
 10078 ;;
 10079                           
 10080                           
 10081                           ;psect for function _TMR1_Initialize
 10082  0BED                     _TMR1_Initialize:
 10083  0BED                     l2958:	
 10084                           ;incstack = 0
 10085                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10086                           
 10087                           
 10088                           ;tmr1.c: 73:     TMR1 = 65528;
 10089  0BED  30FF               	movlw	255
 10090  0BEE  0020               	movlb	0	; select bank0
 10091  0BEF  0097               	movwf	23	;volatile
 10092  0BF0  30F8               	movlw	248
 10093  0BF1  0096               	movwf	22	;volatile
 10094  0BF2                     l2960:
 10095                           
 10096                           ;tmr1.c: 76:     timer1ReloadVal= 65528;
 10097  0BF2  30F8               	movlw	248
 10098  0BF3  0021               	movlb	1	; select bank1
 10099  0BF4  00D6               	movwf	_timer1ReloadVal^(0+128)	;volatile
 10100  0BF5  30FF               	movlw	255
 10101  0BF6  00D7               	movwf	(_timer1ReloadVal^(0+128)+1)	;volatile
 10102  0BF7                     l2962:
 10103                           
 10104                           ;tmr1.c: 79:     PIR1bits.TMR1IF = 0;
 10105  0BF7  0020               	movlb	0	; select bank0
 10106  0BF8  1011               	bcf	17,0	;volatile
 10107  0BF9                     l2964:
 10108                           
 10109                           ;tmr1.c: 82:     PIE1bits.TMR1IE = 1;
 10110  0BF9  0021               	movlb	1	; select bank1
 10111  0BFA  1411               	bsf	17,0	;volatile
 10112  0BFB                     l2966:
 10113                           
 10114                           ;tmr1.c: 84:     T1CONbits.TMR1ON = 0;
 10115  0BFB  0020               	movlb	0	; select bank0
 10116  0BFC  1018               	bcf	24,0	;volatile
 10117  0BFD                     l2968:
 10118                           
 10119                           ;tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
 10120  0BFD  301C               	movlw	low _TMR1_DefaultInterruptHandler
 10121  0BFE  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler
 10122  0BFF  300B               	movlw	high _TMR1_DefaultInterruptHandler
 10123  0C00  00F4               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
 10124  0C01  318A  22EE  318B   	fcall	_TMR1_SetInterruptHandler
 10125  0C04                     l497:
 10126  0C04  0008               	return
 10127  0C05                     __end_of_TMR1_Initialize:
 10128                           
 10129                           	psect	text36
 10130  0AEE                     __ptext36:	
 10131 ;; *************** function _TMR1_SetInterruptHandler *****************
 10132 ;; Defined at:
 10133 ;;		line 128 in file "tmr1.c"
 10134 ;; Parameters:    Size  Location     Type
 10135 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
 10136 ;;		 -> TMR1_DefaultInterruptHandler(1), 
 10137 ;; Auto vars:     Size  Location     Type
 10138 ;;		None
 10139 ;; Return value:  Size  Location     Type
 10140 ;;                  1    wreg      void 
 10141 ;; Registers used:
 10142 ;;		wreg
 10143 ;; Tracked objects:
 10144 ;;		On entry : 0/0
 10145 ;;		On exit  : 0/0
 10146 ;;		Unchanged: 0/0
 10147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10148 ;;      Params:         2       0       0       0       0       0       0       0
 10149 ;;      Locals:         0       0       0       0       0       0       0       0
 10150 ;;      Temps:          0       0       0       0       0       0       0       0
 10151 ;;      Totals:         2       0       0       0       0       0       0       0
 10152 ;;Total ram usage:        2 bytes
 10153 ;; Hardware stack levels used: 1
 10154 ;; Hardware stack levels required when called: 4
 10155 ;; This function calls:
 10156 ;;		Nothing
 10157 ;; This function is called by:
 10158 ;;		_TMR1_Initialize
 10159 ;; This function uses a non-reentrant model
 10160 ;;
 10161                           
 10162                           
 10163                           ;psect for function _TMR1_SetInterruptHandler
 10164  0AEE                     _TMR1_SetInterruptHandler:
 10165  0AEE                     l2782:	
 10166                           ;incstack = 0
 10167                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 10168                           
 10169                           
 10170                           ;tmr1.c: 129:     TMR1_InterruptHandler = InterruptHandler;
 10171  0AEE  0874               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 10172  0AEF  0021               	movlb	1	; select bank1
 10173  0AF0  00D5               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
 10174  0AF1  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 10175  0AF2  00D4               	movwf	_TMR1_InterruptHandler^(0+128)
 10176  0AF3                     l513:
 10177  0AF3  0008               	return
 10178  0AF4                     __end_of_TMR1_SetInterruptHandler:
 10179                           
 10180                           	psect	text37
 10181  0B74                     __ptext37:	
 10182 ;; *************** function _TMR0_Initialize *****************
 10183 ;; Defined at:
 10184 ;;		line 65 in file "mcc_generated_files/tmr0.c"
 10185 ;; Parameters:    Size  Location     Type
 10186 ;;		None
 10187 ;; Auto vars:     Size  Location     Type
 10188 ;;		None
 10189 ;; Return value:  Size  Location     Type
 10190 ;;                  1    wreg      void 
 10191 ;; Registers used:
 10192 ;;		wreg, status,2, status,0, pclath, cstack
 10193 ;; Tracked objects:
 10194 ;;		On entry : 0/0
 10195 ;;		On exit  : 0/0
 10196 ;;		Unchanged: 0/0
 10197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10198 ;;      Params:         0       0       0       0       0       0       0       0
 10199 ;;      Locals:         0       0       0       0       0       0       0       0
 10200 ;;      Temps:          0       0       0       0       0       0       0       0
 10201 ;;      Totals:         0       0       0       0       0       0       0       0
 10202 ;;Total ram usage:        0 bytes
 10203 ;; Hardware stack levels used: 1
 10204 ;; Hardware stack levels required when called: 5
 10205 ;; This function calls:
 10206 ;;		_TMR0_SetInterruptHandler
 10207 ;; This function is called by:
 10208 ;;		_SYSTEM_Initialize
 10209 ;; This function uses a non-reentrant model
 10210 ;;
 10211                           
 10212                           
 10213                           ;psect for function _TMR0_Initialize
 10214  0B74                     _TMR0_Initialize:
 10215  0B74                     l2984:	
 10216                           ;incstack = 0
 10217                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10218                           
 10219                           
 10220                           ;mcc_generated_files/tmr0.c: 70:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD5 
      +                          & 0x3F));
 10221  0B74  0021               	movlb	1	; select bank1
 10222  0B75  0815               	movf	21,w	;volatile
 10223  0B76  39C0               	andlw	192
 10224  0B77  3815               	iorlw	21
 10225  0B78  0095               	movwf	21	;volatile
 10226  0B79                     l2986:
 10227                           
 10228                           ;mcc_generated_files/tmr0.c: 73:     TMR0 = 0x00;
 10229  0B79  0020               	movlb	0	; select bank0
 10230  0B7A  0195               	clrf	21	;volatile
 10231  0B7B                     l2988:
 10232                           
 10233                           ;mcc_generated_files/tmr0.c: 76:     timer0ReloadVal= 0x00;
 10234  0B7B  01F9               	clrf	_timer0ReloadVal	;volatile
 10235  0B7C                     l2990:
 10236                           
 10237                           ;mcc_generated_files/tmr0.c: 79:     INTCONbits.TMR0IF = 0;
 10238  0B7C  110B               	bcf	11,2	;volatile
 10239  0B7D                     l2992:
 10240                           
 10241                           ;mcc_generated_files/tmr0.c: 82:     INTCONbits.TMR0IE = 0;
 10242  0B7D  128B               	bcf	11,5	;volatile
 10243  0B7E                     l2994:
 10244                           
 10245                           ;mcc_generated_files/tmr0.c: 85:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
 10246  0B7E  3002               	movlw	low _TMR0_DefaultInterruptHandler
 10247  0B7F  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 10248  0B80  3000               	movlw	high _TMR0_DefaultInterruptHandler
 10249  0B81  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 10250  0B82  318A  22E8  318B   	fcall	_TMR0_SetInterruptHandler
 10251  0B85                     l346:
 10252  0B85  0008               	return
 10253  0B86                     __end_of_TMR0_Initialize:
 10254                           
 10255                           	psect	text38
 10256  0AE8                     __ptext38:	
 10257 ;; *************** function _TMR0_SetInterruptHandler *****************
 10258 ;; Defined at:
 10259 ;;		line 126 in file "mcc_generated_files/tmr0.c"
 10260 ;; Parameters:    Size  Location     Type
 10261 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
 10262 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 10263 ;; Auto vars:     Size  Location     Type
 10264 ;;		None
 10265 ;; Return value:  Size  Location     Type
 10266 ;;                  1    wreg      void 
 10267 ;; Registers used:
 10268 ;;		wreg
 10269 ;; Tracked objects:
 10270 ;;		On entry : 0/0
 10271 ;;		On exit  : 0/0
 10272 ;;		Unchanged: 0/0
 10273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10274 ;;      Params:         2       0       0       0       0       0       0       0
 10275 ;;      Locals:         0       0       0       0       0       0       0       0
 10276 ;;      Temps:          0       0       0       0       0       0       0       0
 10277 ;;      Totals:         2       0       0       0       0       0       0       0
 10278 ;;Total ram usage:        2 bytes
 10279 ;; Hardware stack levels used: 1
 10280 ;; Hardware stack levels required when called: 4
 10281 ;; This function calls:
 10282 ;;		Nothing
 10283 ;; This function is called by:
 10284 ;;		_TMR0_Initialize
 10285 ;; This function uses a non-reentrant model
 10286 ;;
 10287                           
 10288                           
 10289                           ;psect for function _TMR0_SetInterruptHandler
 10290  0AE8                     _TMR0_SetInterruptHandler:
 10291  0AE8                     l2726:	
 10292                           ;incstack = 0
 10293                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 10294                           
 10295                           
 10296                           ;mcc_generated_files/tmr0.c: 127:     TMR0_InterruptHandler = InterruptHandler;
 10297  0AE8  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 10298  0AE9  0021               	movlb	1	; select bank1
 10299  0AEA  00DB               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
 10300  0AEB  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 10301  0AEC  00DA               	movwf	_TMR0_InterruptHandler^(0+128)
 10302  0AED                     l362:
 10303  0AED  0008               	return
 10304  0AEE                     __end_of_TMR0_SetInterruptHandler:
 10305                           
 10306                           	psect	text39
 10307  0E13                     __ptext39:	
 10308 ;; *************** function _PIN_MANAGER_Initialize *****************
 10309 ;; Defined at:
 10310 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 10311 ;; Parameters:    Size  Location     Type
 10312 ;;		None
 10313 ;; Auto vars:     Size  Location     Type
 10314 ;;		None
 10315 ;; Return value:  Size  Location     Type
 10316 ;;                  1    wreg      void 
 10317 ;; Registers used:
 10318 ;;		wreg, status,2
 10319 ;; Tracked objects:
 10320 ;;		On entry : 0/0
 10321 ;;		On exit  : 0/0
 10322 ;;		Unchanged: 0/0
 10323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10324 ;;      Params:         0       0       0       0       0       0       0       0
 10325 ;;      Locals:         0       0       0       0       0       0       0       0
 10326 ;;      Temps:          0       0       0       0       0       0       0       0
 10327 ;;      Totals:         0       0       0       0       0       0       0       0
 10328 ;;Total ram usage:        0 bytes
 10329 ;; Hardware stack levels used: 1
 10330 ;; Hardware stack levels required when called: 4
 10331 ;; This function calls:
 10332 ;;		Nothing
 10333 ;; This function is called by:
 10334 ;;		_SYSTEM_Initialize
 10335 ;; This function uses a non-reentrant model
 10336 ;;
 10337                           
 10338                           
 10339                           ;psect for function _PIN_MANAGER_Initialize
 10340  0E13                     _PIN_MANAGER_Initialize:
 10341  0E13                     l2902:	
 10342                           ;incstack = 0
 10343                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 10344                           
 10345                           
 10346                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
 10347  0E13  0022               	movlb	2	; select bank2
 10348  0E14  018C               	clrf	12	;volatile
 10349                           
 10350                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
 10351  0E15  018D               	clrf	13	;volatile
 10352                           
 10353                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 10354  0E16  018E               	clrf	14	;volatile
 10355  0E17                     l2904:
 10356                           
 10357                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x04;
 10358  0E17  3004               	movlw	4
 10359  0E18  0021               	movlb	1	; select bank1
 10360  0E19  008C               	movwf	12	;volatile
 10361  0E1A                     l2906:
 10362                           
 10363                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x30;
 10364  0E1A  3030               	movlw	48
 10365  0E1B  008D               	movwf	13	;volatile
 10366  0E1C                     l2908:
 10367                           
 10368                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x50;
 10369  0E1C  3050               	movlw	80
 10370  0E1D  008E               	movwf	14	;volatile
 10371  0E1E                     l2910:
 10372                           
 10373                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x40;
 10374  0E1E  3040               	movlw	64
 10375  0E1F  0023               	movlb	3	; select bank3
 10376  0E20  008E               	movwf	14	;volatile
 10377  0E21                     l2912:
 10378                           
 10379                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x10;
 10380  0E21  3010               	movlw	16
 10381  0E22  008D               	movwf	13	;volatile
 10382  0E23                     l2914:
 10383                           
 10384                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x00;
 10385  0E23  018C               	clrf	12	;volatile
 10386  0E24                     l2916:
 10387                           
 10388                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
 10389  0E24  0024               	movlb	4	; select bank4
 10390  0E25  018D               	clrf	13	;volatile
 10391  0E26                     l2918:
 10392                           
 10393                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
 10394  0E26  018C               	clrf	12	;volatile
 10395  0E27                     l2920:
 10396                           
 10397                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x00;
 10398  0E27  018E               	clrf	14	;volatile
 10399  0E28                     l2922:
 10400                           
 10401                           ;mcc_generated_files/pin_manager.c: 84:     OPTION_REGbits.nWPUEN = 0;
 10402  0E28  0021               	movlb	1	; select bank1
 10403  0E29  1395               	bcf	21,7	;volatile
 10404  0E2A                     l2924:
 10405                           
 10406                           ;mcc_generated_files/pin_manager.c: 89:     ODCONA = 0x00;
 10407  0E2A  0025               	movlb	5	; select bank5
 10408  0E2B  018C               	clrf	12	;volatile
 10409  0E2C                     l2926:
 10410                           
 10411                           ;mcc_generated_files/pin_manager.c: 90:     ODCONB = 0x00;
 10412  0E2C  018D               	clrf	13	;volatile
 10413  0E2D                     l2928:
 10414                           
 10415                           ;mcc_generated_files/pin_manager.c: 91:     ODCONC = 0x00;
 10416  0E2D  018E               	clrf	14	;volatile
 10417                           
 10418                           ;mcc_generated_files/pin_manager.c: 96:     SLRCONA = 0x37;
 10419  0E2E  3037               	movlw	55
 10420  0E2F  0026               	movlb	6	; select bank6
 10421  0E30  008C               	movwf	12	;volatile
 10422                           
 10423                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONB = 0xF0;
 10424  0E31  30F0               	movlw	240
 10425  0E32  008D               	movwf	13	;volatile
 10426                           
 10427                           ;mcc_generated_files/pin_manager.c: 98:     SLRCONC = 0xFF;
 10428  0E33  30FF               	movlw	255
 10429  0E34  008E               	movwf	14	;volatile
 10430                           
 10431                           ;mcc_generated_files/pin_manager.c: 103:     INLVLA = 0x3F;
 10432  0E35  303F               	movlw	63
 10433  0E36  0027               	movlb	7	; select bank7
 10434  0E37  008C               	movwf	12	;volatile
 10435                           
 10436                           ;mcc_generated_files/pin_manager.c: 104:     INLVLB = 0xF0;
 10437  0E38  30F0               	movlw	240
 10438  0E39  008D               	movwf	13	;volatile
 10439                           
 10440                           ;mcc_generated_files/pin_manager.c: 105:     INLVLC = 0xFF;
 10441  0E3A  30FF               	movlw	255
 10442  0E3B  008E               	movwf	14	;volatile
 10443  0E3C                     l2930:
 10444                           
 10445                           ;mcc_generated_files/pin_manager.c: 113:     INTCONbits.IOCIE = 1;
 10446  0E3C  158B               	bsf	11,3	;volatile
 10447                           
 10448                           ;mcc_generated_files/pin_manager.c: 116:     INTPPS = 0x02;
 10449  0E3D  3002               	movlw	2
 10450  0E3E  003C               	movlb	28	; select bank28
 10451  0E3F  0090               	movwf	16	;volatile
 10452                           
 10453                           ;mcc_generated_files/pin_manager.c: 117:     RXPPS = 0x0D;
 10454  0E40  300D               	movlw	13
 10455  0E41  00A4               	movwf	36	;volatile
 10456                           
 10457                           ;mcc_generated_files/pin_manager.c: 118:     RB7PPS = 0x14;
 10458  0E42  3014               	movlw	20
 10459  0E43  003D               	movlb	29	; select bank29
 10460  0E44  009F               	movwf	31	;volatile
 10461  0E45                     l111:
 10462  0E45  0008               	return
 10463  0E46                     __end_of_PIN_MANAGER_Initialize:
 10464                           
 10465                           	psect	text40
 10466  0B0C                     __ptext40:	
 10467 ;; *************** function _OSCILLATOR_Initialize *****************
 10468 ;; Defined at:
 10469 ;;		line 66 in file "mcc_generated_files/mcc.c"
 10470 ;; Parameters:    Size  Location     Type
 10471 ;;		None
 10472 ;; Auto vars:     Size  Location     Type
 10473 ;;		None
 10474 ;; Return value:  Size  Location     Type
 10475 ;;                  1    wreg      void 
 10476 ;; Registers used:
 10477 ;;		wreg, status,2
 10478 ;; Tracked objects:
 10479 ;;		On entry : 0/0
 10480 ;;		On exit  : 0/0
 10481 ;;		Unchanged: 0/0
 10482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10483 ;;      Params:         0       0       0       0       0       0       0       0
 10484 ;;      Locals:         0       0       0       0       0       0       0       0
 10485 ;;      Temps:          0       0       0       0       0       0       0       0
 10486 ;;      Totals:         0       0       0       0       0       0       0       0
 10487 ;;Total ram usage:        0 bytes
 10488 ;; Hardware stack levels used: 1
 10489 ;; Hardware stack levels required when called: 4
 10490 ;; This function calls:
 10491 ;;		Nothing
 10492 ;; This function is called by:
 10493 ;;		_SYSTEM_Initialize
 10494 ;; This function uses a non-reentrant model
 10495 ;;
 10496                           
 10497                           
 10498                           ;psect for function _OSCILLATOR_Initialize
 10499  0B0C                     _OSCILLATOR_Initialize:
 10500  0B0C                     l2932:	
 10501                           ;incstack = 0
 10502                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10503                           
 10504                           
 10505                           ;mcc_generated_files/mcc.c: 69:     OSCCON = 0x6A;
 10506  0B0C  306A               	movlw	106
 10507  0B0D  0021               	movlb	1	; select bank1
 10508  0B0E  0099               	movwf	25	;volatile
 10509  0B0F                     l2934:
 10510                           
 10511                           ;mcc_generated_files/mcc.c: 71:     OSCSTAT = 0x00;
 10512  0B0F  019A               	clrf	26	;volatile
 10513  0B10                     l2936:
 10514                           
 10515                           ;mcc_generated_files/mcc.c: 73:     OSCTUNE = 0x00;
 10516  0B10  0198               	clrf	24	;volatile
 10517  0B11                     l2938:
 10518                           
 10519                           ;mcc_generated_files/mcc.c: 75:     BORCON = 0x00;
 10520  0B11  0022               	movlb	2	; select bank2
 10521  0B12  0196               	clrf	22	;volatile
 10522  0B13                     l53:
 10523  0B13  0008               	return
 10524  0B14                     __end_of_OSCILLATOR_Initialize:
 10525                           
 10526                           	psect	text41
 10527  0AB7                     __ptext41:	
 10528 ;; *************** function _OPA2_Initialize *****************
 10529 ;; Defined at:
 10530 ;;		line 58 in file "mcc_generated_files/opa2.c"
 10531 ;; Parameters:    Size  Location     Type
 10532 ;;		None
 10533 ;; Auto vars:     Size  Location     Type
 10534 ;;		None
 10535 ;; Return value:  Size  Location     Type
 10536 ;;                  1    wreg      void 
 10537 ;; Registers used:
 10538 ;;		wreg
 10539 ;; Tracked objects:
 10540 ;;		On entry : 0/0
 10541 ;;		On exit  : 0/0
 10542 ;;		Unchanged: 0/0
 10543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10544 ;;      Params:         0       0       0       0       0       0       0       0
 10545 ;;      Locals:         0       0       0       0       0       0       0       0
 10546 ;;      Temps:          0       0       0       0       0       0       0       0
 10547 ;;      Totals:         0       0       0       0       0       0       0       0
 10548 ;;Total ram usage:        0 bytes
 10549 ;; Hardware stack levels used: 1
 10550 ;; Hardware stack levels required when called: 4
 10551 ;; This function calls:
 10552 ;;		Nothing
 10553 ;; This function is called by:
 10554 ;;		_SYSTEM_Initialize
 10555 ;;		_main
 10556 ;; This function uses a non-reentrant model
 10557 ;;
 10558                           
 10559                           
 10560                           ;psect for function _OPA2_Initialize
 10561  0AB7                     _OPA2_Initialize:
 10562  0AB7                     l2956:	
 10563                           ;incstack = 0
 10564                           ; Regs used in _OPA2_Initialize: [wreg]
 10565                           
 10566                           
 10567                           ;mcc_generated_files/opa2.c: 61:     OPA2CON = 0xC2;
 10568  0AB7  30C2               	movlw	194
 10569  0AB8  002A               	movlb	10	; select bank10
 10570  0AB9  0095               	movwf	21	;volatile
 10571  0ABA                     l329:
 10572  0ABA  0008               	return
 10573  0ABB                     __end_of_OPA2_Initialize:
 10574                           
 10575                           	psect	text42
 10576  0AB3                     __ptext42:	
 10577 ;; *************** function _OPA1_Initialize *****************
 10578 ;; Defined at:
 10579 ;;		line 58 in file "mcc_generated_files/opa1.c"
 10580 ;; Parameters:    Size  Location     Type
 10581 ;;		None
 10582 ;; Auto vars:     Size  Location     Type
 10583 ;;		None
 10584 ;; Return value:  Size  Location     Type
 10585 ;;                  1    wreg      void 
 10586 ;; Registers used:
 10587 ;;		wreg
 10588 ;; Tracked objects:
 10589 ;;		On entry : 0/0
 10590 ;;		On exit  : 0/0
 10591 ;;		Unchanged: 0/0
 10592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10593 ;;      Params:         0       0       0       0       0       0       0       0
 10594 ;;      Locals:         0       0       0       0       0       0       0       0
 10595 ;;      Temps:          0       0       0       0       0       0       0       0
 10596 ;;      Totals:         0       0       0       0       0       0       0       0
 10597 ;;Total ram usage:        0 bytes
 10598 ;; Hardware stack levels used: 1
 10599 ;; Hardware stack levels required when called: 4
 10600 ;; This function calls:
 10601 ;;		Nothing
 10602 ;; This function is called by:
 10603 ;;		_SYSTEM_Initialize
 10604 ;;		_main
 10605 ;; This function uses a non-reentrant model
 10606 ;;
 10607                           
 10608                           
 10609                           ;psect for function _OPA1_Initialize
 10610  0AB3                     _OPA1_Initialize:
 10611  0AB3                     l2942:	
 10612                           ;incstack = 0
 10613                           ; Regs used in _OPA1_Initialize: [wreg]
 10614                           
 10615                           
 10616                           ;mcc_generated_files/opa1.c: 61:     OPA1CON = 0xC2;
 10617  0AB3  30C2               	movlw	194
 10618  0AB4  002A               	movlb	10	; select bank10
 10619  0AB5  0091               	movwf	17	;volatile
 10620  0AB6                     l119:
 10621  0AB6  0008               	return
 10622  0AB7                     __end_of_OPA1_Initialize:
 10623                           
 10624                           	psect	text43
 10625  0B3B                     __ptext43:	
 10626 ;; *************** function _EXT_INT_Initialize *****************
 10627 ;; Defined at:
 10628 ;;		line 138 in file "mcc_generated_files/ext_int.c"
 10629 ;; Parameters:    Size  Location     Type
 10630 ;;		None
 10631 ;; Auto vars:     Size  Location     Type
 10632 ;;		None
 10633 ;; Return value:  Size  Location     Type
 10634 ;;                  1    wreg      void 
 10635 ;; Registers used:
 10636 ;;		wreg, status,2, status,0, pclath, cstack
 10637 ;; Tracked objects:
 10638 ;;		On entry : 0/0
 10639 ;;		On exit  : 0/0
 10640 ;;		Unchanged: 0/0
 10641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10642 ;;      Params:         0       0       0       0       0       0       0       0
 10643 ;;      Locals:         0       0       0       0       0       0       0       0
 10644 ;;      Temps:          0       0       0       0       0       0       0       0
 10645 ;;      Totals:         0       0       0       0       0       0       0       0
 10646 ;;Total ram usage:        0 bytes
 10647 ;; Hardware stack levels used: 1
 10648 ;; Hardware stack levels required when called: 5
 10649 ;; This function calls:
 10650 ;;		_INT_SetInterruptHandler
 10651 ;; This function is called by:
 10652 ;;		_SYSTEM_Initialize
 10653 ;; This function uses a non-reentrant model
 10654 ;;
 10655                           
 10656                           
 10657                           ;psect for function _EXT_INT_Initialize
 10658  0B3B                     _EXT_INT_Initialize:
 10659  0B3B                     l2978:	
 10660                           ;incstack = 0
 10661                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10662                           
 10663                           
 10664                           ;mcc_generated_files/ext_int.c: 143:     (INTCONbits.INTF = 0);
 10665  0B3B  108B               	bcf	11,1	;volatile
 10666                           
 10667                           ;mcc_generated_files/ext_int.c: 144:     (OPTION_REGbits.INTEDG = 0);
 10668  0B3C  0021               	movlb	1	; select bank1
 10669  0B3D  1315               	bcf	21,6	;volatile
 10670  0B3E                     l2980:
 10671                           
 10672                           ;mcc_generated_files/ext_int.c: 146:     INT_SetInterruptHandler(INT_DefaultInterruptHan
      +                          dler);
 10673  0B3E  3074               	movlw	low _INT_DefaultInterruptHandler
 10674  0B3F  00F3               	movwf	INT_SetInterruptHandler@InterruptHandler
 10675  0B40  3006               	movlw	high _INT_DefaultInterruptHandler
 10676  0B41  00F4               	movwf	INT_SetInterruptHandler@InterruptHandler+1
 10677  0B42  318A  22E2  318B   	fcall	_INT_SetInterruptHandler
 10678  0B45                     l2982:
 10679                           
 10680                           ;mcc_generated_files/ext_int.c: 147:     (INTCONbits.INTE = 1);
 10681  0B45  160B               	bsf	11,4	;volatile
 10682  0B46                     l292:
 10683  0B46  0008               	return
 10684  0B47                     __end_of_EXT_INT_Initialize:
 10685                           
 10686                           	psect	text44
 10687  0AE2                     __ptext44:	
 10688 ;; *************** function _INT_SetInterruptHandler *****************
 10689 ;; Defined at:
 10690 ;;		line 71 in file "mcc_generated_files/ext_int.c"
 10691 ;; Parameters:    Size  Location     Type
 10692 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
 10693 ;;		 -> INT_DefaultInterruptHandler(1), 
 10694 ;; Auto vars:     Size  Location     Type
 10695 ;;		None
 10696 ;; Return value:  Size  Location     Type
 10697 ;;                  1    wreg      void 
 10698 ;; Registers used:
 10699 ;;		wreg
 10700 ;; Tracked objects:
 10701 ;;		On entry : 0/0
 10702 ;;		On exit  : 0/0
 10703 ;;		Unchanged: 0/0
 10704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10705 ;;      Params:         2       0       0       0       0       0       0       0
 10706 ;;      Locals:         0       0       0       0       0       0       0       0
 10707 ;;      Temps:          0       0       0       0       0       0       0       0
 10708 ;;      Totals:         2       0       0       0       0       0       0       0
 10709 ;;Total ram usage:        2 bytes
 10710 ;; Hardware stack levels used: 1
 10711 ;; Hardware stack levels required when called: 4
 10712 ;; This function calls:
 10713 ;;		Nothing
 10714 ;; This function is called by:
 10715 ;;		_EXT_INT_Initialize
 10716 ;; This function uses a non-reentrant model
 10717 ;;
 10718                           
 10719                           
 10720                           ;psect for function _INT_SetInterruptHandler
 10721  0AE2                     _INT_SetInterruptHandler:
 10722  0AE2                     l2670:	
 10723                           ;incstack = 0
 10724                           ; Regs used in _INT_SetInterruptHandler: [wreg]
 10725                           
 10726                           
 10727                           ;mcc_generated_files/ext_int.c: 72:     INT_InterruptHandler = InterruptHandler;
 10728  0AE2  0874               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
 10729  0AE3  0021               	movlb	1	; select bank1
 10730  0AE4  00DD               	movwf	(_INT_InterruptHandler+1)^(0+128)
 10731  0AE5  0873               	movf	INT_SetInterruptHandler@InterruptHandler,w
 10732  0AE6  00DC               	movwf	_INT_InterruptHandler^(0+128)
 10733  0AE7                     l271:
 10734  0AE7  0008               	return
 10735  0AE8                     __end_of_INT_SetInterruptHandler:
 10736                           
 10737                           	psect	text45
 10738  0C5B                     __ptext45:	
 10739 ;; *************** function _EUSART_Initialize *****************
 10740 ;; Defined at:
 10741 ;;		line 66 in file "mcc_generated_files/eusart.c"
 10742 ;; Parameters:    Size  Location     Type
 10743 ;;		None
 10744 ;; Auto vars:     Size  Location     Type
 10745 ;;		None
 10746 ;; Return value:  Size  Location     Type
 10747 ;;                  1    wreg      void 
 10748 ;; Registers used:
 10749 ;;		wreg, status,2, status,0, pclath, cstack
 10750 ;; Tracked objects:
 10751 ;;		On entry : 0/0
 10752 ;;		On exit  : 0/0
 10753 ;;		Unchanged: 0/0
 10754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10755 ;;      Params:         0       0       0       0       0       0       0       0
 10756 ;;      Locals:         0       0       0       0       0       0       0       0
 10757 ;;      Temps:          0       0       0       0       0       0       0       0
 10758 ;;      Totals:         0       0       0       0       0       0       0       0
 10759 ;;Total ram usage:        0 bytes
 10760 ;; Hardware stack levels used: 1
 10761 ;; Hardware stack levels required when called: 5
 10762 ;; This function calls:
 10763 ;;		_EUSART_SetErrorHandler
 10764 ;;		_EUSART_SetFramingErrorHandler
 10765 ;;		_EUSART_SetOverrunErrorHandler
 10766 ;; This function is called by:
 10767 ;;		_SYSTEM_Initialize
 10768 ;; This function uses a non-reentrant model
 10769 ;;
 10770                           
 10771                           
 10772                           ;psect for function _EUSART_Initialize
 10773  0C5B                     _EUSART_Initialize:
 10774  0C5B                     l2996:	
 10775                           ;incstack = 0
 10776                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10777                           
 10778                           
 10779                           ;mcc_generated_files/eusart.c: 71:     BAUD1CON = 0x08;
 10780  0C5B  3008               	movlw	8
 10781  0C5C  0023               	movlb	3	; select bank3
 10782  0C5D  009F               	movwf	31	;volatile
 10783                           
 10784                           ;mcc_generated_files/eusart.c: 74:     RC1STA = 0x90;
 10785  0C5E  3090               	movlw	144
 10786  0C5F  009D               	movwf	29	;volatile
 10787                           
 10788                           ;mcc_generated_files/eusart.c: 77:     TX1STA = 0x24;
 10789  0C60  3024               	movlw	36
 10790  0C61  009E               	movwf	30	;volatile
 10791                           
 10792                           ;mcc_generated_files/eusart.c: 80:     SP1BRGL = 0x08;
 10793  0C62  3008               	movlw	8
 10794  0C63  009B               	movwf	27	;volatile
 10795  0C64                     l2998:
 10796                           
 10797                           ;mcc_generated_files/eusart.c: 83:     SP1BRGH = 0x00;
 10798  0C64  019C               	clrf	28	;volatile
 10799  0C65                     l3000:
 10800                           
 10801                           ;mcc_generated_files/eusart.c: 86:     EUSART_SetFramingErrorHandler(EUSART_DefaultFrami
      +                          ngErrorHandler);
 10802  0C65  3000               	movlw	0
 10803  0C66  00F3               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
 10804  0C67  3000               	movlw	0
 10805  0C68  00F4               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
 10806  0C69  318A  22D6  318C   	fcall	_EUSART_SetFramingErrorHandler
 10807  0C6C                     l3002:
 10808                           
 10809                           ;mcc_generated_files/eusart.c: 87:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOverr
      +                          unErrorHandler);
 10810  0C6C  3000               	movlw	0
 10811  0C6D  00F3               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
 10812  0C6E  3000               	movlw	0
 10813  0C6F  00F4               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
 10814  0C70  318A  22DC  318C   	fcall	_EUSART_SetOverrunErrorHandler
 10815  0C73                     l3004:
 10816                           
 10817                           ;mcc_generated_files/eusart.c: 88:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandler
      +                          );
 10818  0C73  3000               	movlw	0
 10819  0C74  00F3               	movwf	EUSART_SetErrorHandler@interruptHandler
 10820  0C75  3000               	movlw	0
 10821  0C76  00F4               	movwf	EUSART_SetErrorHandler@interruptHandler+1
 10822  0C77  318A  22D0  318C   	fcall	_EUSART_SetErrorHandler
 10823  0C7A                     l3006:
 10824                           
 10825                           ;mcc_generated_files/eusart.c: 90:     eusartRxLastError.status = 0;
 10826  0C7A  0021               	movlb	1	; select bank1
 10827  0C7B  01B3               	clrf	_eusartRxLastError^(0+128)	;volatile
 10828  0C7C                     l198:
 10829  0C7C  0008               	return
 10830  0C7D                     __end_of_EUSART_Initialize:
 10831                           
 10832                           	psect	text46
 10833  0ADC                     __ptext46:	
 10834 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
 10835 ;; Defined at:
 10836 ;;		line 170 in file "mcc_generated_files/eusart.c"
 10837 ;; Parameters:    Size  Location     Type
 10838 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
 10839 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
 10840 ;; Auto vars:     Size  Location     Type
 10841 ;;		None
 10842 ;; Return value:  Size  Location     Type
 10843 ;;                  1    wreg      void 
 10844 ;; Registers used:
 10845 ;;		wreg
 10846 ;; Tracked objects:
 10847 ;;		On entry : 0/0
 10848 ;;		On exit  : 0/0
 10849 ;;		Unchanged: 0/0
 10850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10851 ;;      Params:         2       0       0       0       0       0       0       0
 10852 ;;      Locals:         0       0       0       0       0       0       0       0
 10853 ;;      Temps:          0       0       0       0       0       0       0       0
 10854 ;;      Totals:         2       0       0       0       0       0       0       0
 10855 ;;Total ram usage:        2 bytes
 10856 ;; Hardware stack levels used: 1
 10857 ;; Hardware stack levels required when called: 4
 10858 ;; This function calls:
 10859 ;;		Nothing
 10860 ;; This function is called by:
 10861 ;;		_EUSART_Initialize
 10862 ;; This function uses a non-reentrant model
 10863 ;;
 10864                           
 10865                           
 10866                           ;psect for function _EUSART_SetOverrunErrorHandler
 10867  0ADC                     _EUSART_SetOverrunErrorHandler:
 10868  0ADC                     l2666:	
 10869                           ;incstack = 0
 10870                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
 10871                           
 10872                           
 10873                           ;mcc_generated_files/eusart.c: 171:     EUSART_OverrunErrorHandler = interruptHandler;
 10874  0ADC  0874               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
 10875  0ADD  0021               	movlb	1	; select bank1
 10876  0ADE  00E1               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
 10877  0ADF  0873               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
 10878  0AE0  00E0               	movwf	_EUSART_OverrunErrorHandler^(0+128)
 10879  0AE1                     l246:
 10880  0AE1  0008               	return
 10881  0AE2                     __end_of_EUSART_SetOverrunErrorHandler:
 10882                           
 10883                           	psect	text47
 10884  0AD6                     __ptext47:	
 10885 ;; *************** function _EUSART_SetFramingErrorHandler *****************
 10886 ;; Defined at:
 10887 ;;		line 166 in file "mcc_generated_files/eusart.c"
 10888 ;; Parameters:    Size  Location     Type
 10889 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
 10890 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
 10891 ;; Auto vars:     Size  Location     Type
 10892 ;;		None
 10893 ;; Return value:  Size  Location     Type
 10894 ;;                  1    wreg      void 
 10895 ;; Registers used:
 10896 ;;		wreg
 10897 ;; Tracked objects:
 10898 ;;		On entry : 0/0
 10899 ;;		On exit  : 0/0
 10900 ;;		Unchanged: 0/0
 10901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10902 ;;      Params:         2       0       0       0       0       0       0       0
 10903 ;;      Locals:         0       0       0       0       0       0       0       0
 10904 ;;      Temps:          0       0       0       0       0       0       0       0
 10905 ;;      Totals:         2       0       0       0       0       0       0       0
 10906 ;;Total ram usage:        2 bytes
 10907 ;; Hardware stack levels used: 1
 10908 ;; Hardware stack levels required when called: 4
 10909 ;; This function calls:
 10910 ;;		Nothing
 10911 ;; This function is called by:
 10912 ;;		_EUSART_Initialize
 10913 ;; This function uses a non-reentrant model
 10914 ;;
 10915                           
 10916                           
 10917                           ;psect for function _EUSART_SetFramingErrorHandler
 10918  0AD6                     _EUSART_SetFramingErrorHandler:
 10919  0AD6                     l2664:	
 10920                           ;incstack = 0
 10921                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
 10922                           
 10923                           
 10924                           ;mcc_generated_files/eusart.c: 167:     EUSART_FramingErrorHandler = interruptHandler;
 10925  0AD6  0874               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
 10926  0AD7  0021               	movlb	1	; select bank1
 10927  0AD8  00E3               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
 10928  0AD9  0873               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
 10929  0ADA  00E2               	movwf	_EUSART_FramingErrorHandler^(0+128)
 10930  0ADB                     l243:
 10931  0ADB  0008               	return
 10932  0ADC                     __end_of_EUSART_SetFramingErrorHandler:
 10933                           
 10934                           	psect	text48
 10935  0AD0                     __ptext48:	
 10936 ;; *************** function _EUSART_SetErrorHandler *****************
 10937 ;; Defined at:
 10938 ;;		line 174 in file "mcc_generated_files/eusart.c"
 10939 ;; Parameters:    Size  Location     Type
 10940 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
 10941 ;;		 -> EUSART_DefaultErrorHandler(1), 
 10942 ;; Auto vars:     Size  Location     Type
 10943 ;;		None
 10944 ;; Return value:  Size  Location     Type
 10945 ;;                  1    wreg      void 
 10946 ;; Registers used:
 10947 ;;		wreg
 10948 ;; Tracked objects:
 10949 ;;		On entry : 0/0
 10950 ;;		On exit  : 0/0
 10951 ;;		Unchanged: 0/0
 10952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10953 ;;      Params:         2       0       0       0       0       0       0       0
 10954 ;;      Locals:         0       0       0       0       0       0       0       0
 10955 ;;      Temps:          0       0       0       0       0       0       0       0
 10956 ;;      Totals:         2       0       0       0       0       0       0       0
 10957 ;;Total ram usage:        2 bytes
 10958 ;; Hardware stack levels used: 1
 10959 ;; Hardware stack levels required when called: 4
 10960 ;; This function calls:
 10961 ;;		Nothing
 10962 ;; This function is called by:
 10963 ;;		_EUSART_Initialize
 10964 ;; This function uses a non-reentrant model
 10965 ;;
 10966                           
 10967                           
 10968                           ;psect for function _EUSART_SetErrorHandler
 10969  0AD0                     _EUSART_SetErrorHandler:
 10970  0AD0                     l2668:	
 10971                           ;incstack = 0
 10972                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
 10973                           
 10974                           
 10975                           ;mcc_generated_files/eusart.c: 175:     EUSART_ErrorHandler = interruptHandler;
 10976  0AD0  0874               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
 10977  0AD1  0021               	movlb	1	; select bank1
 10978  0AD2  00DF               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
 10979  0AD3  0873               	movf	EUSART_SetErrorHandler@interruptHandler,w
 10980  0AD4  00DE               	movwf	_EUSART_ErrorHandler^(0+128)
 10981  0AD5                     l249:
 10982  0AD5  0008               	return
 10983  0AD6                     __end_of_EUSART_SetErrorHandler:
 10984                           
 10985                           	psect	text49
 10986  0ACA                     __ptext49:	
 10987 ;; *************** function _DAC_Initialize *****************
 10988 ;; Defined at:
 10989 ;;		line 58 in file "mcc_generated_files/dac.c"
 10990 ;; Parameters:    Size  Location     Type
 10991 ;;		None
 10992 ;; Auto vars:     Size  Location     Type
 10993 ;;		None
 10994 ;; Return value:  Size  Location     Type
 10995 ;;                  1    wreg      void 
 10996 ;; Registers used:
 10997 ;;		wreg
 10998 ;; Tracked objects:
 10999 ;;		On entry : 0/0
 11000 ;;		On exit  : 0/0
 11001 ;;		Unchanged: 0/0
 11002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11003 ;;      Params:         0       0       0       0       0       0       0       0
 11004 ;;      Locals:         0       0       0       0       0       0       0       0
 11005 ;;      Temps:          0       0       0       0       0       0       0       0
 11006 ;;      Totals:         0       0       0       0       0       0       0       0
 11007 ;;Total ram usage:        0 bytes
 11008 ;; Hardware stack levels used: 1
 11009 ;; Hardware stack levels required when called: 4
 11010 ;; This function calls:
 11011 ;;		Nothing
 11012 ;; This function is called by:
 11013 ;;		_SYSTEM_Initialize
 11014 ;;		_main
 11015 ;; This function uses a non-reentrant model
 11016 ;;
 11017                           
 11018                           
 11019                           ;psect for function _DAC_Initialize
 11020  0ACA                     _DAC_Initialize:
 11021  0ACA                     l2900:	
 11022                           ;incstack = 0
 11023                           ; Regs used in _DAC_Initialize: [wreg]
 11024                           
 11025                           
 11026                           ;mcc_generated_files/dac.c: 61:     DAC1CON0 = 0x80;
 11027  0ACA  3080               	movlw	128
 11028  0ACB  0022               	movlb	2	; select bank2
 11029  0ACC  0098               	movwf	24	;volatile
 11030                           
 11031                           ;mcc_generated_files/dac.c: 63:     DAC1CON1 = 0xFF;
 11032  0ACD  30FF               	movlw	255
 11033  0ACE  0099               	movwf	25	;volatile
 11034  0ACF                     l7:
 11035  0ACF  0008               	return
 11036  0AD0                     __end_of_DAC_Initialize:
 11037                           
 11038                           	psect	text50
 11039  0B30                     __ptext50:	
 11040 ;; *************** function _LATCH_Initialize *****************
 11041 ;; Defined at:
 11042 ;;		line 581 in file "main.c"
 11043 ;; Parameters:    Size  Location     Type
 11044 ;;		None
 11045 ;; Auto vars:     Size  Location     Type
 11046 ;;		None
 11047 ;; Return value:  Size  Location     Type
 11048 ;;                  1    wreg      void 
 11049 ;; Registers used:
 11050 ;;		None
 11051 ;; Tracked objects:
 11052 ;;		On entry : 0/0
 11053 ;;		On exit  : 0/0
 11054 ;;		Unchanged: 0/0
 11055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11056 ;;      Params:         0       0       0       0       0       0       0       0
 11057 ;;      Locals:         0       0       0       0       0       0       0       0
 11058 ;;      Temps:          0       0       0       0       0       0       0       0
 11059 ;;      Totals:         0       0       0       0       0       0       0       0
 11060 ;;Total ram usage:        0 bytes
 11061 ;; Hardware stack levels used: 1
 11062 ;; Hardware stack levels required when called: 4
 11063 ;; This function calls:
 11064 ;;		Nothing
 11065 ;; This function is called by:
 11066 ;;		_main
 11067 ;; This function uses a non-reentrant model
 11068 ;;
 11069                           
 11070                           
 11071                           ;psect for function _LATCH_Initialize
 11072  0B30                     _LATCH_Initialize:
 11073  0B30                     l3520:	
 11074                           ;incstack = 0
 11075                           ; Regs used in _LATCH_Initialize: []
 11076                           
 11077                           
 11078                           ;main.c: 582:     TRISBbits.TRISB6 = 0;
 11079  0B30  0021               	movlb	1	; select bank1
 11080  0B31  130D               	bcf	13,6	;volatile
 11081                           
 11082                           ;main.c: 583:     TRISCbits.TRISC0 = 0;
 11083  0B32  100E               	bcf	14,0	;volatile
 11084                           
 11085                           ;main.c: 585:     TRISCbits.TRISC1 = 0;
 11086  0B33  108E               	bcf	14,1	;volatile
 11087                           
 11088                           ;main.c: 586:     TRISCbits.TRISC7 = 0;
 11089  0B34  138E               	bcf	14,7	;volatile
 11090                           
 11091                           ;main.c: 587:     LATBbits.LATB6 = 0;
 11092  0B35  0022               	movlb	2	; select bank2
 11093  0B36  130D               	bcf	13,6	;volatile
 11094                           
 11095                           ;main.c: 588:     LATCbits.LATC0 = 0;
 11096  0B37  100E               	bcf	14,0	;volatile
 11097                           
 11098                           ;main.c: 590:     LATCbits.LATC1 = 1;
 11099  0B38  148E               	bsf	14,1	;volatile
 11100                           
 11101                           ;main.c: 591:     LATCbits.LATC7 = 1;
 11102  0B39  178E               	bsf	14,7	;volatile
 11103  0B3A                     l752:
 11104  0B3A  0008               	return
 11105  0B3B                     __end_of_LATCH_Initialize:
 11106                           
 11107                           	psect	intentry
 11108  0004                     __pintentry:	
 11109 ;; *************** function _INTERRUPT_InterruptManager *****************
 11110 ;; Defined at:
 11111 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 11112 ;; Parameters:    Size  Location     Type
 11113 ;;		None
 11114 ;; Auto vars:     Size  Location     Type
 11115 ;;		None
 11116 ;; Return value:  Size  Location     Type
 11117 ;;                  1    wreg      void 
 11118 ;; Registers used:
 11119 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11120 ;; Tracked objects:
 11121 ;;		On entry : 0/0
 11122 ;;		On exit  : 0/0
 11123 ;;		Unchanged: 0/0
 11124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11125 ;;      Params:         0       0       0       0       0       0       0       0
 11126 ;;      Locals:         0       0       0       0       0       0       0       0
 11127 ;;      Temps:          0       0       0       0       0       0       0       0
 11128 ;;      Totals:         0       0       0       0       0       0       0       0
 11129 ;;Total ram usage:        0 bytes
 11130 ;; Hardware stack levels used: 1
 11131 ;; Hardware stack levels required when called: 3
 11132 ;; This function calls:
 11133 ;;		_INT_ISR
 11134 ;;		_PIN_MANAGER_IOC
 11135 ;;		_TMR0_ISR
 11136 ;;		_TMR1_ISR
 11137 ;;		_TMR4_ISR
 11138 ;; This function is called by:
 11139 ;;		Interrupt level 1
 11140 ;; This function uses a non-reentrant model
 11141 ;;
 11142                           
 11143  0004                     _INTERRUPT_InterruptManager:
 11144                           
 11145                           ;incstack = 0
 11146  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
 11147                           
 11148                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11149  0005  3180               	pagesel	$
 11150  0006                     i1l3522:
 11151                           
 11152                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 11153  0006  1E8B               	btfss	11,5	;volatile
 11154  0007  2809               	goto	u208_21
 11155  0008  280A               	goto	u208_20
 11156  0009                     u208_21:
 11157  0009  2812               	goto	i1l144
 11158  000A                     u208_20:
 11159  000A                     i1l3524:
 11160  000A  1D0B               	btfss	11,2	;volatile
 11161  000B  280D               	goto	u209_21
 11162  000C  280E               	goto	u209_20
 11163  000D                     u209_21:
 11164  000D  2812               	goto	i1l144
 11165  000E                     u209_20:
 11166  000E                     i1l3526:
 11167                           
 11168                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
 11169  000E  318B  2363  3180   	fcall	_TMR0_ISR
 11170                           
 11171                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 11172  0011  2849               	goto	i1l155
 11173  0012                     i1l144:	
 11174                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.INTE == 1 && INTCON
      +                          bits.INTF == 1)
 11175                           
 11176  0012  1E0B               	btfss	11,4	;volatile
 11177  0013  2815               	goto	u210_21
 11178  0014  2816               	goto	u210_20
 11179  0015                     u210_21:
 11180  0015  281E               	goto	i1l146
 11181  0016                     u210_20:
 11182  0016                     i1l3528:
 11183  0016  1C8B               	btfss	11,1	;volatile
 11184  0017  2819               	goto	u211_21
 11185  0018  281A               	goto	u211_20
 11186  0019                     u211_21:
 11187  0019  281E               	goto	i1l146
 11188  001A                     u211_20:
 11189  001A                     i1l3530:
 11190                           
 11191                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         INT_ISR();
 11192  001A  318A  22BB  3180   	fcall	_INT_ISR
 11193                           
 11194                           ;mcc_generated_files/interrupt_manager.c: 62:     }
 11195  001D  2849               	goto	i1l155
 11196  001E                     i1l146:	
 11197                           ;mcc_generated_files/interrupt_manager.c: 63:     else if(INTCONbits.IOCIE == 1 && INTCO
      +                          Nbits.IOCIF == 1)
 11198                           
 11199  001E  1D8B               	btfss	11,3	;volatile
 11200  001F  2821               	goto	u212_21
 11201  0020  2822               	goto	u212_20
 11202  0021                     u212_21:
 11203  0021  282A               	goto	i1l148
 11204  0022                     u212_20:
 11205  0022                     i1l3532:
 11206  0022  1C0B               	btfss	11,0	;volatile
 11207  0023  2825               	goto	u213_21
 11208  0024  2826               	goto	u213_20
 11209  0025                     u213_21:
 11210  0025  282A               	goto	i1l148
 11211  0026                     u213_20:
 11212  0026                     i1l3534:
 11213                           
 11214                           ;mcc_generated_files/interrupt_manager.c: 64:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 65:         PIN_MANAGER_IOC();
 11215  0026  318A  22AF  3180   	fcall	_PIN_MANAGER_IOC
 11216                           
 11217                           ;mcc_generated_files/interrupt_manager.c: 66:     }
 11218  0029  2849               	goto	i1l155
 11219  002A                     i1l148:	
 11220                           ;mcc_generated_files/interrupt_manager.c: 67:     else if(INTCONbits.PEIE == 1)
 11221                           
 11222  002A  1F0B               	btfss	11,6	;volatile
 11223  002B  282D               	goto	u214_21
 11224  002C  282E               	goto	u214_20
 11225  002D                     u214_21:
 11226  002D  2849               	goto	i1l147
 11227  002E                     u214_20:
 11228  002E                     i1l3536:
 11229                           
 11230                           ;mcc_generated_files/interrupt_manager.c: 68:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 69:         if(PIE2bits.TMR4IE == 1 && PIR2bits.TMR4IF == 1)
 11231  002E  0021               	movlb	1	; select bank1
 11232  002F  1C92               	btfss	18,1	;volatile
 11233  0030  2832               	goto	u215_21
 11234  0031  2833               	goto	u215_20
 11235  0032                     u215_21:
 11236  0032  283B               	goto	i1l152
 11237  0033                     u215_20:
 11238  0033                     i1l3538:
 11239  0033  0020               	movlb	0	; select bank0
 11240  0034  1C92               	btfss	18,1	;volatile
 11241  0035  2837               	goto	u216_21
 11242  0036  2838               	goto	u216_20
 11243  0037                     u216_21:
 11244  0037  283B               	goto	i1l152
 11245  0038                     u216_20:
 11246  0038                     i1l3540:
 11247                           
 11248                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             TMR4_ISR();
 11249  0038  318B  2354  3180   	fcall	_TMR4_ISR
 11250  003B                     i1l152:	
 11251                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 76:         }
 11252                           
 11253                           
 11254                           ;mcc_generated_files/interrupt_manager.c: 77:         if(PIE1bits.TMR1IE == 1 && PIR1bit
      +                          s.TMR1IF == 1) {
 11255  003B  0021               	movlb	1	; select bank1
 11256  003C  1C11               	btfss	17,0	;volatile
 11257  003D  283F               	goto	u217_21
 11258  003E  2840               	goto	u217_20
 11259  003F                     u217_21:
 11260  003F  2849               	goto	i1l147
 11261  0040                     u217_20:
 11262  0040                     i1l3542:
 11263  0040  0020               	movlb	0	; select bank0
 11264  0041  1C11               	btfss	17,0	;volatile
 11265  0042  2844               	goto	u218_21
 11266  0043  2845               	goto	u218_20
 11267  0044                     u218_21:
 11268  0044  2849               	goto	i1l147
 11269  0045                     u218_20:
 11270  0045                     i1l3544:
 11271                           
 11272                           ;mcc_generated_files/interrupt_manager.c: 78:             TMR1_ISR();
 11273  0045  318B  23BF  3180   	fcall	_TMR1_ISR
 11274  0048  2849               	goto	i1l155
 11275  0049                     i1l147:
 11276  0049                     i1l155:
 11277  0049  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 11278  004A  0009               	retfie
 11279  004B                     __end_of_INTERRUPT_InterruptManager:
 11280                           
 11281                           	psect	text52
 11282  0B54                     __ptext52:	
 11283 ;; *************** function _TMR4_ISR *****************
 11284 ;; Defined at:
 11285 ;;		line 120 in file "mcc_generated_files/tmr4.c"
 11286 ;; Parameters:    Size  Location     Type
 11287 ;;		None
 11288 ;; Auto vars:     Size  Location     Type
 11289 ;;		None
 11290 ;; Return value:  Size  Location     Type
 11291 ;;                  1    wreg      void 
 11292 ;; Registers used:
 11293 ;;		wreg, status,2, status,0, pclath, cstack
 11294 ;; Tracked objects:
 11295 ;;		On entry : 0/0
 11296 ;;		On exit  : 0/0
 11297 ;;		Unchanged: 0/0
 11298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11299 ;;      Params:         0       0       0       0       0       0       0       0
 11300 ;;      Locals:         0       0       0       0       0       0       0       0
 11301 ;;      Temps:          0       0       0       0       0       0       0       0
 11302 ;;      Totals:         0       0       0       0       0       0       0       0
 11303 ;;Total ram usage:        0 bytes
 11304 ;; Hardware stack levels used: 1
 11305 ;; Hardware stack levels required when called: 2
 11306 ;; This function calls:
 11307 ;;		Absolute function
 11308 ;;		_TMR4_DefaultInterruptHandler
 11309 ;; This function is called by:
 11310 ;;		_INTERRUPT_InterruptManager
 11311 ;; This function uses a non-reentrant model
 11312 ;;
 11313                           
 11314                           
 11315                           ;psect for function _TMR4_ISR
 11316  0B54                     _TMR4_ISR:
 11317  0B54                     i1l3190:	
 11318                           ;incstack = 0
 11319                           ; Regs used in _TMR4_ISR: [wreg+status,2+status,0+pclath+cstack]
 11320                           
 11321                           
 11322                           ;mcc_generated_files/tmr4.c: 124:     PIR2bits.TMR4IF = 0;
 11323  0B54  0020               	movlb	0	; select bank0
 11324  0B55  1092               	bcf	18,1	;volatile
 11325  0B56                     i1l3192:
 11326                           
 11327                           ;mcc_generated_files/tmr4.c: 126:     if(TMR4_InterruptHandler)
 11328  0B56  0021               	movlb	1	; select bank1
 11329  0B57  0858               	movf	_TMR4_InterruptHandler^(0+128),w
 11330  0B58  0459               	iorwf	(_TMR4_InterruptHandler+1)^(0+128),w
 11331  0B59  1903               	btfsc	3,2
 11332  0B5A  2B5C               	goto	u173_21
 11333  0B5B  2B5D               	goto	u173_20
 11334  0B5C                     u173_21:
 11335  0B5C  2B62               	goto	i1l417
 11336  0B5D                     u173_20:
 11337  0B5D                     i1l3194:
 11338                           
 11339                           ;mcc_generated_files/tmr4.c: 127:     {;mcc_generated_files/tmr4.c: 128:         TMR4_In
      +                          terruptHandler();
 11340  0B5D  0859               	movf	(_TMR4_InterruptHandler+1)^(0+128),w
 11341  0B5E  008A               	movwf	10
 11342  0B5F  0858               	movf	_TMR4_InterruptHandler^(0+128),w
 11343  0B60  000A               	callw
 11344  0B61  318B               	pagesel	$
 11345  0B62                     i1l417:
 11346  0B62  0008               	return
 11347  0B63                     __end_of_TMR4_ISR:
 11348                           
 11349                           	psect	text53
 11350  0D8A                     __ptext53:	
 11351 ;; *************** function _TMR4_DefaultInterruptHandler *****************
 11352 ;; Defined at:
 11353 ;;		line 147 in file "mcc_generated_files/tmr4.c"
 11354 ;; Parameters:    Size  Location     Type
 11355 ;;		None
 11356 ;; Auto vars:     Size  Location     Type
 11357 ;;		None
 11358 ;; Return value:  Size  Location     Type
 11359 ;;                  1    wreg      void 
 11360 ;; Registers used:
 11361 ;;		wreg, status,2, status,0, pclath, cstack
 11362 ;; Tracked objects:
 11363 ;;		On entry : 0/0
 11364 ;;		On exit  : 0/0
 11365 ;;		Unchanged: 0/0
 11366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11367 ;;      Params:         0       0       0       0       0       0       0       0
 11368 ;;      Locals:         0       0       0       0       0       0       0       0
 11369 ;;      Temps:          1       0       0       0       0       0       0       0
 11370 ;;      Totals:         1       0       0       0       0       0       0       0
 11371 ;;Total ram usage:        1 bytes
 11372 ;; Hardware stack levels used: 1
 11373 ;; Hardware stack levels required when called: 1
 11374 ;; This function calls:
 11375 ;;		_DAC_SetOutput
 11376 ;; This function is called by:
 11377 ;;		_TMR4_Initialize
 11378 ;;		_TMR4_ISR
 11379 ;; This function uses a non-reentrant model
 11380 ;;
 11381                           
 11382                           
 11383                           ;psect for function _TMR4_DefaultInterruptHandler
 11384  0D8A                     _TMR4_DefaultInterruptHandler:
 11385  0D8A                     i1l3012:	
 11386                           ;incstack = 0
 11387                           ; Regs used in _TMR4_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 11388                           
 11389                           
 11390                           ;mcc_generated_files/tmr4.c: 151:     if (dc_frequency_flag) {
 11391  0D8A  087A               	movf	_dc_frequency_flag,w
 11392  0D8B  1903               	btfsc	3,2
 11393  0D8C  2D8E               	goto	u160_21
 11394  0D8D  2D8F               	goto	u160_20
 11395  0D8E                     u160_21:
 11396  0D8E  2D94               	goto	i1l3016
 11397  0D8F                     u160_20:
 11398  0D8F                     i1l3014:
 11399                           
 11400                           ;mcc_generated_files/tmr4.c: 152:         DAC_SetOutput(255);
 11401  0D8F  30FF               	movlw	255
 11402  0D90  318A  22C0  318D   	fcall	_DAC_SetOutput
 11403                           
 11404                           ;mcc_generated_files/tmr4.c: 153:     }else{
 11405  0D93  2DAA               	goto	i1l430
 11406  0D94                     i1l3016:
 11407                           
 11408                           ;mcc_generated_files/tmr4.c: 155:        if (PR4 == 255) {
 11409  0D94  0028               	movlb	8	; select bank8
 11410  0D95  0A16               	incf	22,w	;volatile
 11411  0D96  1D03               	btfss	3,2
 11412  0D97  2D99               	goto	u161_21
 11413  0D98  2D9A               	goto	u161_20
 11414  0D99                     u161_21:
 11415  0D99  2DA7               	goto	i1l431
 11416  0D9A                     u161_20:
 11417  0D9A                     i1l3018:
 11418                           
 11419                           ;mcc_generated_files/tmr4.c: 156:             if (oneHzCounter == 81) {
 11420  0D9A  3051               	movlw	81
 11421  0D9B  0021               	movlb	1	; select bank1
 11422  0D9C  0632               	xorwf	_oneHzCounter^(0+128),w
 11423  0D9D  1D03               	btfss	3,2
 11424  0D9E  2DA0               	goto	u162_21
 11425  0D9F  2DA1               	goto	u162_20
 11426  0DA0                     u162_21:
 11427  0DA0  2DA2               	goto	i1l3022
 11428  0DA1                     u162_20:
 11429  0DA1                     i1l3020:
 11430                           
 11431                           ;mcc_generated_files/tmr4.c: 158:                 oneHzCounter = 0;
 11432  0DA1  01B2               	clrf	_oneHzCounter^(0+128)
 11433  0DA2                     i1l3022:
 11434                           
 11435                           ;mcc_generated_files/tmr4.c: 160:             oneHzCounter++;
 11436  0DA2  3001               	movlw	1
 11437  0DA3  00F1               	movwf	??_TMR4_DefaultInterruptHandler
 11438  0DA4  0871               	movf	??_TMR4_DefaultInterruptHandler,w
 11439  0DA5  07B2               	addwf	_oneHzCounter^(0+128),f
 11440                           
 11441                           ;mcc_generated_files/tmr4.c: 161:         } else {
 11442  0DA6  2DAA               	goto	i1l430
 11443  0DA7                     i1l431:
 11444                           
 11445                           ;mcc_generated_files/tmr4.c: 162:     currentIsOn = 1;
 11446  0DA7  0021               	movlb	1	; select bank1
 11447  0DA8  01BF               	clrf	_currentIsOn^(0+128)
 11448  0DA9  0ABF               	incf	_currentIsOn^(0+128),f
 11449  0DAA                     i1l430:	
 11450                           ;mcc_generated_files/tmr4.c: 165:   }
 11451                           
 11452                           
 11453                           ;mcc_generated_files/tmr4.c: 166:   TMR1 = 65528;
 11454  0DAA  30FF               	movlw	255
 11455  0DAB  0020               	movlb	0	; select bank0
 11456  0DAC  0097               	movwf	23	;volatile
 11457  0DAD  30F8               	movlw	248
 11458  0DAE  0096               	movwf	22	;volatile
 11459                           
 11460                           ;mcc_generated_files/tmr4.c: 168:   T1CONbits.TMR1ON = 1;
 11461  0DAF  1418               	bsf	24,0	;volatile
 11462                           
 11463                           ;mcc_generated_files/tmr4.c: 169:   LATBbits.LATB6 = 0;
 11464  0DB0  0022               	movlb	2	; select bank2
 11465  0DB1  130D               	bcf	13,6	;volatile
 11466                           
 11467                           ;mcc_generated_files/tmr4.c: 170:   LATCbits.LATC0 = 0;
 11468  0DB2  100E               	bcf	14,0	;volatile
 11469                           
 11470                           ;mcc_generated_files/tmr4.c: 171:   LATCbits.LATC1 = 1;
 11471  0DB3  148E               	bsf	14,1	;volatile
 11472                           
 11473                           ;mcc_generated_files/tmr4.c: 172:   LATCbits.LATC7 = 1;
 11474  0DB4  178E               	bsf	14,7	;volatile
 11475  0DB5                     i1l434:
 11476  0DB5  0008               	return
 11477  0DB6                     __end_of_TMR4_DefaultInterruptHandler:
 11478                           
 11479                           	psect	text54
 11480  0AC0                     __ptext54:	
 11481 ;; *************** function _DAC_SetOutput *****************
 11482 ;; Defined at:
 11483 ;;		line 66 in file "mcc_generated_files/dac.c"
 11484 ;; Parameters:    Size  Location     Type
 11485 ;;  inputData       1    wreg     unsigned char 
 11486 ;; Auto vars:     Size  Location     Type
 11487 ;;  inputData       1    0[COMMON] unsigned char 
 11488 ;; Return value:  Size  Location     Type
 11489 ;;                  1    wreg      void 
 11490 ;; Registers used:
 11491 ;;		wreg
 11492 ;; Tracked objects:
 11493 ;;		On entry : 0/0
 11494 ;;		On exit  : 0/0
 11495 ;;		Unchanged: 0/0
 11496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11497 ;;      Params:         0       0       0       0       0       0       0       0
 11498 ;;      Locals:         1       0       0       0       0       0       0       0
 11499 ;;      Temps:          0       0       0       0       0       0       0       0
 11500 ;;      Totals:         1       0       0       0       0       0       0       0
 11501 ;;Total ram usage:        1 bytes
 11502 ;; Hardware stack levels used: 1
 11503 ;; This function calls:
 11504 ;;		Nothing
 11505 ;; This function is called by:
 11506 ;;		_TMR4_DefaultInterruptHandler
 11507 ;; This function uses a non-reentrant model
 11508 ;;
 11509                           
 11510                           
 11511                           ;psect for function _DAC_SetOutput
 11512  0AC0                     _DAC_SetOutput:
 11513                           
 11514                           ;incstack = 0
 11515                           ; Regs used in _DAC_SetOutput: [wreg]
 11516                           ;DAC_SetOutput@inputData stored from wreg
 11517  0AC0  00F0               	movwf	DAC_SetOutput@inputData
 11518  0AC1                     i1l2662:
 11519                           
 11520                           ;mcc_generated_files/dac.c: 66: void DAC_SetOutput(uint8_t inputData);mcc_generated_file
      +                          s/dac.c: 67: {;mcc_generated_files/dac.c: 68:     DAC1CON1 = inputData;
 11521  0AC1  0870               	movf	DAC_SetOutput@inputData,w
 11522  0AC2  0022               	movlb	2	; select bank2
 11523  0AC3  0099               	movwf	25	;volatile
 11524  0AC4                     i1l10:
 11525  0AC4  0008               	return
 11526  0AC5                     __end_of_DAC_SetOutput:
 11527                           
 11528                           	psect	text55
 11529  0BBF                     __ptext55:	
 11530 ;; *************** function _TMR1_ISR *****************
 11531 ;; Defined at:
 11532 ;;		line 111 in file "tmr1.c"
 11533 ;; Parameters:    Size  Location     Type
 11534 ;;		None
 11535 ;; Auto vars:     Size  Location     Type
 11536 ;;		None
 11537 ;; Return value:  Size  Location     Type
 11538 ;;                  1    wreg      void 
 11539 ;; Registers used:
 11540 ;;		wreg, status,2, status,0, pclath, cstack
 11541 ;; Tracked objects:
 11542 ;;		On entry : 0/0
 11543 ;;		On exit  : 0/0
 11544 ;;		Unchanged: 0/0
 11545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11546 ;;      Params:         0       0       0       0       0       0       0       0
 11547 ;;      Locals:         0       0       0       0       0       0       0       0
 11548 ;;      Temps:          0       0       0       0       0       0       0       0
 11549 ;;      Totals:         0       0       0       0       0       0       0       0
 11550 ;;Total ram usage:        0 bytes
 11551 ;; Hardware stack levels used: 1
 11552 ;; Hardware stack levels required when called: 1
 11553 ;; This function calls:
 11554 ;;		Absolute function
 11555 ;;		_TMR1_DefaultInterruptHandler
 11556 ;; This function is called by:
 11557 ;;		_INTERRUPT_InterruptManager
 11558 ;; This function uses a non-reentrant model
 11559 ;;
 11560                           
 11561                           
 11562                           ;psect for function _TMR1_ISR
 11563  0BBF                     _TMR1_ISR:
 11564  0BBF                     i1l3196:	
 11565                           ;incstack = 0
 11566                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 11567                           
 11568                           
 11569                           ;tmr1.c: 115:     PIR1bits.TMR1IF = 0;
 11570  0BBF  0020               	movlb	0	; select bank0
 11571  0BC0  1011               	bcf	17,0	;volatile
 11572  0BC1                     i1l3198:
 11573                           
 11574                           ;tmr1.c: 117:     TMR1 = timer1ReloadVal;
 11575  0BC1  0021               	movlb	1	; select bank1
 11576  0BC2  0857               	movf	(_timer1ReloadVal+1)^(0+128),w	;volatile
 11577  0BC3  0020               	movlb	0	; select bank0
 11578  0BC4  0097               	movwf	23	;volatile
 11579  0BC5  0021               	movlb	1	; select bank1
 11580  0BC6  0856               	movf	_timer1ReloadVal^(0+128),w	;volatile
 11581  0BC7  0020               	movlb	0	; select bank0
 11582  0BC8  0096               	movwf	22	;volatile
 11583  0BC9                     i1l3200:
 11584                           
 11585                           ;tmr1.c: 119:     if(TMR1_InterruptHandler)
 11586  0BC9  0021               	movlb	1	; select bank1
 11587  0BCA  0854               	movf	_TMR1_InterruptHandler^(0+128),w
 11588  0BCB  0455               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
 11589  0BCC  1903               	btfsc	3,2
 11590  0BCD  2BCF               	goto	u174_21
 11591  0BCE  2BD0               	goto	u174_20
 11592  0BCF                     u174_21:
 11593  0BCF  2BD5               	goto	i1l510
 11594  0BD0                     u174_20:
 11595  0BD0                     i1l3202:
 11596                           
 11597                           ;tmr1.c: 120:     {;tmr1.c: 121:         TMR1_InterruptHandler();
 11598  0BD0  0855               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
 11599  0BD1  008A               	movwf	10
 11600  0BD2  0854               	movf	_TMR1_InterruptHandler^(0+128),w
 11601  0BD3  000A               	callw
 11602  0BD4  318B               	pagesel	$
 11603  0BD5                     i1l510:
 11604  0BD5  0008               	return
 11605  0BD6                     __end_of_TMR1_ISR:
 11606                           
 11607                           	psect	text56
 11608  0B1C                     __ptext56:	
 11609 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 11610 ;; Defined at:
 11611 ;;		line 133 in file "tmr1.c"
 11612 ;; Parameters:    Size  Location     Type
 11613 ;;		None
 11614 ;; Auto vars:     Size  Location     Type
 11615 ;;		None
 11616 ;; Return value:  Size  Location     Type
 11617 ;;                  1    wreg      void 
 11618 ;; Registers used:
 11619 ;;		status,2
 11620 ;; Tracked objects:
 11621 ;;		On entry : 0/0
 11622 ;;		On exit  : 0/0
 11623 ;;		Unchanged: 0/0
 11624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11625 ;;      Params:         0       0       0       0       0       0       0       0
 11626 ;;      Locals:         0       0       0       0       0       0       0       0
 11627 ;;      Temps:          0       0       0       0       0       0       0       0
 11628 ;;      Totals:         0       0       0       0       0       0       0       0
 11629 ;;Total ram usage:        0 bytes
 11630 ;; Hardware stack levels used: 1
 11631 ;; This function calls:
 11632 ;;		Nothing
 11633 ;; This function is called by:
 11634 ;;		_TMR1_Initialize
 11635 ;;		_TMR1_ISR
 11636 ;; This function uses a non-reentrant model
 11637 ;;
 11638                           
 11639                           
 11640                           ;psect for function _TMR1_DefaultInterruptHandler
 11641  0B1C                     _TMR1_DefaultInterruptHandler:
 11642  0B1C                     i1l3024:	
 11643                           ;incstack = 0
 11644                           ; Regs used in _TMR1_DefaultInterruptHandler: [status,2]
 11645                           
 11646                           
 11647                           ;tmr1.c: 139:     T1CONbits.TMR1ON = 0;
 11648  0B1C  0020               	movlb	0	; select bank0
 11649  0B1D  1018               	bcf	24,0	;volatile
 11650                           
 11651                           ;tmr1.c: 141:     LATBbits.LATB6 = 1;
 11652  0B1E  0022               	movlb	2	; select bank2
 11653  0B1F  170D               	bsf	13,6	;volatile
 11654                           
 11655                           ;tmr1.c: 142:     LATCbits.LATC0 = 1;
 11656  0B20  140E               	bsf	14,0	;volatile
 11657                           
 11658                           ;tmr1.c: 143:     LATCbits.LATC1 = 0;
 11659  0B21  108E               	bcf	14,1	;volatile
 11660                           
 11661                           ;tmr1.c: 144:     LATCbits.LATC7 = 0;
 11662  0B22  138E               	bcf	14,7	;volatile
 11663  0B23                     i1l3026:
 11664                           
 11665                           ;tmr1.c: 145:     toggle = 0;
 11666  0B23  0021               	movlb	1	; select bank1
 11667  0B24  01BE               	clrf	_toggle^(0+128)
 11668  0B25                     i1l518:
 11669  0B25  0008               	return
 11670  0B26                     __end_of_TMR1_DefaultInterruptHandler:
 11671                           
 11672                           	psect	text57
 11673  0B63                     __ptext57:	
 11674 ;; *************** function _TMR0_ISR *****************
 11675 ;; Defined at:
 11676 ;;		line 109 in file "mcc_generated_files/tmr0.c"
 11677 ;; Parameters:    Size  Location     Type
 11678 ;;		None
 11679 ;; Auto vars:     Size  Location     Type
 11680 ;;		None
 11681 ;; Return value:  Size  Location     Type
 11682 ;;                  1    wreg      void 
 11683 ;; Registers used:
 11684 ;;		wreg, status,2, status,0, pclath, cstack
 11685 ;; Tracked objects:
 11686 ;;		On entry : 0/0
 11687 ;;		On exit  : 0/0
 11688 ;;		Unchanged: 0/0
 11689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11690 ;;      Params:         0       0       0       0       0       0       0       0
 11691 ;;      Locals:         0       0       0       0       0       0       0       0
 11692 ;;      Temps:          0       0       0       0       0       0       0       0
 11693 ;;      Totals:         0       0       0       0       0       0       0       0
 11694 ;;Total ram usage:        0 bytes
 11695 ;; Hardware stack levels used: 1
 11696 ;; Hardware stack levels required when called: 1
 11697 ;; This function calls:
 11698 ;;		Absolute function
 11699 ;;		_TMR0_DefaultInterruptHandler
 11700 ;; This function is called by:
 11701 ;;		_INTERRUPT_InterruptManager
 11702 ;; This function uses a non-reentrant model
 11703 ;;
 11704                           
 11705                           
 11706                           ;psect for function _TMR0_ISR
 11707  0B63                     _TMR0_ISR:
 11708  0B63                     i1l3178:	
 11709                           ;incstack = 0
 11710                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 11711                           
 11712                           
 11713                           ;mcc_generated_files/tmr0.c: 113:     INTCONbits.TMR0IF = 0;
 11714  0B63  110B               	bcf	11,2	;volatile
 11715  0B64                     i1l3180:
 11716                           
 11717                           ;mcc_generated_files/tmr0.c: 115:     TMR0 = timer0ReloadVal;
 11718  0B64  0879               	movf	_timer0ReloadVal,w	;volatile
 11719  0B65  0020               	movlb	0	; select bank0
 11720  0B66  0095               	movwf	21	;volatile
 11721  0B67                     i1l3182:
 11722                           
 11723                           ;mcc_generated_files/tmr0.c: 117:     if(TMR0_InterruptHandler)
 11724  0B67  0021               	movlb	1	; select bank1
 11725  0B68  085A               	movf	_TMR0_InterruptHandler^(0+128),w
 11726  0B69  045B               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 11727  0B6A  1903               	btfsc	3,2
 11728  0B6B  2B6D               	goto	u172_21
 11729  0B6C  2B6E               	goto	u172_20
 11730  0B6D                     u172_21:
 11731  0B6D  2B73               	goto	i1l359
 11732  0B6E                     u172_20:
 11733  0B6E                     i1l3184:
 11734                           
 11735                           ;mcc_generated_files/tmr0.c: 118:     {;mcc_generated_files/tmr0.c: 119:         TMR0_In
      +                          terruptHandler();
 11736  0B6E  085B               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 11737  0B6F  008A               	movwf	10
 11738  0B70  085A               	movf	_TMR0_InterruptHandler^(0+128),w
 11739  0B71  000A               	callw
 11740  0B72  318B               	pagesel	$
 11741  0B73                     i1l359:
 11742  0B73  0008               	return
 11743  0B74                     __end_of_TMR0_ISR:
 11744                           
 11745                           	psect	text58
 11746  0002                     __ptext58:	
 11747 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 11748 ;; Defined at:
 11749 ;;		line 130 in file "mcc_generated_files/tmr0.c"
 11750 ;; Parameters:    Size  Location     Type
 11751 ;;		None
 11752 ;; Auto vars:     Size  Location     Type
 11753 ;;		None
 11754 ;; Return value:  Size  Location     Type
 11755 ;;                  1    wreg      void 
 11756 ;; Registers used:
 11757 ;;		None
 11758 ;; Tracked objects:
 11759 ;;		On entry : 0/0
 11760 ;;		On exit  : 0/0
 11761 ;;		Unchanged: 0/0
 11762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11763 ;;      Params:         0       0       0       0       0       0       0       0
 11764 ;;      Locals:         0       0       0       0       0       0       0       0
 11765 ;;      Temps:          0       0       0       0       0       0       0       0
 11766 ;;      Totals:         0       0       0       0       0       0       0       0
 11767 ;;Total ram usage:        0 bytes
 11768 ;; Hardware stack levels used: 1
 11769 ;; This function calls:
 11770 ;;		Nothing
 11771 ;; This function is called by:
 11772 ;;		_TMR0_Initialize
 11773 ;;		_TMR0_ISR
 11774 ;; This function uses a non-reentrant model
 11775 ;;
 11776                           
 11777                           
 11778                           ;psect for function _TMR0_DefaultInterruptHandler
 11779  0002                     _TMR0_DefaultInterruptHandler:
 11780  0002                     i1l365:	
 11781                           ;incstack = 0
 11782                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 11783                           
 11784  0002  0008               	return
 11785  0003                     __end_of_TMR0_DefaultInterruptHandler:
 11786                           
 11787                           	psect	text59
 11788  0AAF                     __ptext59:	
 11789 ;; *************** function _PIN_MANAGER_IOC *****************
 11790 ;; Defined at:
 11791 ;;		line 121 in file "mcc_generated_files/pin_manager.c"
 11792 ;; Parameters:    Size  Location     Type
 11793 ;;		None
 11794 ;; Auto vars:     Size  Location     Type
 11795 ;;		None
 11796 ;; Return value:  Size  Location     Type
 11797 ;;                  1    wreg      void 
 11798 ;; Registers used:
 11799 ;;		None
 11800 ;; Tracked objects:
 11801 ;;		On entry : 0/0
 11802 ;;		On exit  : 0/0
 11803 ;;		Unchanged: 0/0
 11804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11805 ;;      Params:         0       0       0       0       0       0       0       0
 11806 ;;      Locals:         0       0       0       0       0       0       0       0
 11807 ;;      Temps:          0       0       0       0       0       0       0       0
 11808 ;;      Totals:         0       0       0       0       0       0       0       0
 11809 ;;Total ram usage:        0 bytes
 11810 ;; Hardware stack levels used: 1
 11811 ;; This function calls:
 11812 ;;		Nothing
 11813 ;; This function is called by:
 11814 ;;		_INTERRUPT_InterruptManager
 11815 ;; This function uses a non-reentrant model
 11816 ;;
 11817                           
 11818                           
 11819                           ;psect for function _PIN_MANAGER_IOC
 11820  0AAF                     _PIN_MANAGER_IOC:
 11821  0AAF                     i1l114:	
 11822                           ;incstack = 0
 11823                           ; Regs used in _PIN_MANAGER_IOC: []
 11824                           
 11825  0AAF  0008               	return
 11826  0AB0                     __end_of_PIN_MANAGER_IOC:
 11827                           
 11828                           	psect	text60
 11829  0ABB                     __ptext60:	
 11830 ;; *************** function _INT_ISR *****************
 11831 ;; Defined at:
 11832 ;;		line 54 in file "mcc_generated_files/ext_int.c"
 11833 ;; Parameters:    Size  Location     Type
 11834 ;;		None
 11835 ;; Auto vars:     Size  Location     Type
 11836 ;;		None
 11837 ;; Return value:  Size  Location     Type
 11838 ;;                  1    wreg      void 
 11839 ;; Registers used:
 11840 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11841 ;; Tracked objects:
 11842 ;;		On entry : 0/0
 11843 ;;		On exit  : 0/0
 11844 ;;		Unchanged: 0/0
 11845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11846 ;;      Params:         0       0       0       0       0       0       0       0
 11847 ;;      Locals:         0       0       0       0       0       0       0       0
 11848 ;;      Temps:          0       0       0       0       0       0       0       0
 11849 ;;      Totals:         0       0       0       0       0       0       0       0
 11850 ;;Total ram usage:        0 bytes
 11851 ;; Hardware stack levels used: 1
 11852 ;; Hardware stack levels required when called: 2
 11853 ;; This function calls:
 11854 ;;		_INT_CallBack
 11855 ;; This function is called by:
 11856 ;;		_INTERRUPT_InterruptManager
 11857 ;; This function uses a non-reentrant model
 11858 ;;
 11859                           
 11860                           
 11861                           ;psect for function _INT_ISR
 11862  0ABB                     _INT_ISR:
 11863  0ABB                     i1l3186:	
 11864                           ;incstack = 0
 11865                           ; Regs used in _INT_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11866                           
 11867                           
 11868                           ;mcc_generated_files/ext_int.c: 56:     (INTCONbits.INTF = 0);
 11869  0ABB  108B               	bcf	11,1	;volatile
 11870  0ABC                     i1l3188:
 11871                           
 11872                           ;mcc_generated_files/ext_int.c: 59:     INT_CallBack();
 11873  0ABC  318B  2347  318A   	fcall	_INT_CallBack
 11874  0ABF                     i1l264:
 11875  0ABF  0008               	return
 11876  0AC0                     __end_of_INT_ISR:
 11877                           
 11878                           	psect	text61
 11879  0B47                     __ptext61:	
 11880 ;; *************** function _INT_CallBack *****************
 11881 ;; Defined at:
 11882 ;;		line 62 in file "mcc_generated_files/ext_int.c"
 11883 ;; Parameters:    Size  Location     Type
 11884 ;;		None
 11885 ;; Auto vars:     Size  Location     Type
 11886 ;;		None
 11887 ;; Return value:  Size  Location     Type
 11888 ;;                  1    wreg      void 
 11889 ;; Registers used:
 11890 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11891 ;; Tracked objects:
 11892 ;;		On entry : 0/0
 11893 ;;		On exit  : 0/0
 11894 ;;		Unchanged: 0/0
 11895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11896 ;;      Params:         0       0       0       0       0       0       0       0
 11897 ;;      Locals:         0       0       0       0       0       0       0       0
 11898 ;;      Temps:          0       0       0       0       0       0       0       0
 11899 ;;      Totals:         0       0       0       0       0       0       0       0
 11900 ;;Total ram usage:        0 bytes
 11901 ;; Hardware stack levels used: 1
 11902 ;; Hardware stack levels required when called: 1
 11903 ;; This function calls:
 11904 ;;		Absolute function
 11905 ;;		_INT_DefaultInterruptHandler
 11906 ;; This function is called by:
 11907 ;;		_INT_ISR
 11908 ;; This function uses a non-reentrant model
 11909 ;;
 11910                           
 11911                           
 11912                           ;psect for function _INT_CallBack
 11913  0B47                     _INT_CallBack:
 11914  0B47                     i1l3008:	
 11915                           ;incstack = 0
 11916                           ; Regs used in _INT_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11917                           
 11918                           
 11919                           ;mcc_generated_files/ext_int.c: 65:     if(INT_InterruptHandler)
 11920  0B47  0021               	movlb	1	; select bank1
 11921  0B48  085C               	movf	_INT_InterruptHandler^(0+128),w
 11922  0B49  045D               	iorwf	(_INT_InterruptHandler+1)^(0+128),w
 11923  0B4A  1903               	btfsc	3,2
 11924  0B4B  2B4D               	goto	u159_21
 11925  0B4C  2B4E               	goto	u159_20
 11926  0B4D                     u159_21:
 11927  0B4D  2B53               	goto	i1l268
 11928  0B4E                     u159_20:
 11929  0B4E                     i1l3010:
 11930                           
 11931                           ;mcc_generated_files/ext_int.c: 66:     {;mcc_generated_files/ext_int.c: 67:         INT
      +                          _InterruptHandler();
 11932  0B4E  085D               	movf	(_INT_InterruptHandler+1)^(0+128),w
 11933  0B4F  008A               	movwf	10
 11934  0B50  085C               	movf	_INT_InterruptHandler^(0+128),w
 11935  0B51  000A               	callw
 11936  0B52  318B               	pagesel	$
 11937  0B53                     i1l268:
 11938  0B53  0008               	return
 11939  0B54                     __end_of_INT_CallBack:
 11940                           
 11941                           	psect	text62
 11942  0674                     __ptext62:	
 11943 ;; *************** function _INT_DefaultInterruptHandler *****************
 11944 ;; Defined at:
 11945 ;;		line 75 in file "mcc_generated_files/ext_int.c"
 11946 ;; Parameters:    Size  Location     Type
 11947 ;;		None
 11948 ;; Auto vars:     Size  Location     Type
 11949 ;;  time            1    2[COMMON] unsigned char 
 11950 ;; Return value:  Size  Location     Type
 11951 ;;                  1    wreg      void 
 11952 ;; Registers used:
 11953 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11954 ;; Tracked objects:
 11955 ;;		On entry : 0/0
 11956 ;;		On exit  : 0/0
 11957 ;;		Unchanged: 0/0
 11958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11959 ;;      Params:         0       0       0       0       0       0       0       0
 11960 ;;      Locals:         1       0       0       0       0       0       0       0
 11961 ;;      Temps:          2       0       0       0       0       0       0       0
 11962 ;;      Totals:         3       0       0       0       0       0       0       0
 11963 ;;Total ram usage:        3 bytes
 11964 ;; Hardware stack levels used: 1
 11965 ;; This function calls:
 11966 ;;		Nothing
 11967 ;; This function is called by:
 11968 ;;		_EXT_INT_Initialize
 11969 ;;		_INT_CallBack
 11970 ;; This function uses a non-reentrant model
 11971 ;;
 11972                           
 11973                           
 11974                           ;psect for function _INT_DefaultInterruptHandler
 11975  0674                     _INT_DefaultInterruptHandler:
 11976  0674                     i1l2672:	
 11977                           ;incstack = 0
 11978                           ; Regs used in _INT_DefaultInterruptHandler: [wreg-fsr0h+status,2+status,0]
 11979                           
 11980                           
 11981                           ;mcc_generated_files/ext_int.c: 77:   uint8_t time = TMR0;
 11982  0674  0020               	movlb	0	; select bank0
 11983  0675  0815               	movf	21,w	;volatile
 11984  0676  00F0               	movwf	??_INT_DefaultInterruptHandler
 11985  0677  0870               	movf	??_INT_DefaultInterruptHandler,w
 11986  0678  00F2               	movwf	INT_DefaultInterruptHandler@time
 11987  0679                     i1l2674:
 11988                           
 11989                           ;mcc_generated_files/ext_int.c: 78:   TMR0 = 0;
 11990  0679  0195               	clrf	21	;volatile
 11991  067A                     i1l2676:
 11992                           
 11993                           ;mcc_generated_files/ext_int.c: 81:   if (INTCONbits.TMR0IF){
 11994  067A  1D0B               	btfss	11,2	;volatile
 11995  067B  2E7D               	goto	u121_21
 11996  067C  2E7E               	goto	u121_20
 11997  067D                     u121_21:
 11998  067D  2E7F               	goto	i1l2680
 11999  067E                     u121_20:
 12000  067E                     i1l2678:
 12001                           
 12002                           ;mcc_generated_files/ext_int.c: 82:     time = 0;
 12003  067E  01F2               	clrf	INT_DefaultInterruptHandler@time
 12004  067F                     i1l2680:
 12005                           
 12006                           ;mcc_generated_files/ext_int.c: 84:   INTCONbits.TMR0IF = 0;
 12007  067F  110B               	bcf	11,2	;volatile
 12008                           
 12009                           ;mcc_generated_files/ext_int.c: 86:   switch(ir_code.state){
 12010  0680  2ECA               	goto	i1l2718
 12011  0681                     i1l2682:
 12012                           
 12013                           ;mcc_generated_files/ext_int.c: 89:     if (time >= 180 && time <= 243){
 12014  0681  30B4               	movlw	180
 12015  0682  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12016  0683  1C03               	skipc
 12017  0684  2E86               	goto	u122_21
 12018  0685  2E87               	goto	u122_20
 12019  0686                     u122_21:
 12020  0686  2EDE               	goto	i1l278
 12021  0687                     u122_20:
 12022  0687                     i1l2684:
 12023  0687  30F4               	movlw	244
 12024  0688  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12025  0689  1803               	skipnc
 12026  068A  2E8C               	goto	u123_21
 12027  068B  2E8D               	goto	u123_20
 12028  068C                     u123_21:
 12029  068C  2EDE               	goto	i1l278
 12030  068D                     u123_20:
 12031  068D                     i1l2686:
 12032                           
 12033                           ;mcc_generated_files/ext_int.c: 90:       ir_code.n_bits = 0;
 12034  068D  01B4               	clrf	_ir_code^(0+128)
 12035  068E                     i1l2688:
 12036                           
 12037                           ;mcc_generated_files/ext_int.c: 91:       ir_code.state = STATE_RECEIVING;
 12038  068E  01B5               	clrf	(_ir_code^(0+128)+1)
 12039  068F  0AB5               	incf	(_ir_code^(0+128)+1),f
 12040  0690  2EDE               	goto	i1l278
 12041  0691                     i1l2690:
 12042                           
 12043                           ;mcc_generated_files/ext_int.c: 99:     ir_code.code <<= 1;
 12044  0691  3001               	movlw	1
 12045  0692                     u124_25:
 12046  0692  35B6               	lslf	(_ir_code^(0+128)+2),f
 12047  0693  0DB7               	rlf	((_ir_code+1)^(0+128)+2),f
 12048  0694  0DB8               	rlf	((_ir_code+2)^(0+128)+2),f
 12049  0695  0DB9               	rlf	((_ir_code+3)^(0+128)+2),f
 12050  0696  0B89               	decfsz	9,f
 12051  0697  2E92               	goto	u124_25
 12052  0698                     i1l2692:
 12053                           
 12054                           ;mcc_generated_files/ext_int.c: 100:     if (time >= 29 && time <= 41){
 12055  0698  301D               	movlw	29
 12056  0699  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12057  069A  1C03               	skipc
 12058  069B  2E9D               	goto	u125_21
 12059  069C  2E9E               	goto	u125_20
 12060  069D                     u125_21:
 12061  069D  2EAA               	goto	i1l2700
 12062  069E                     u125_20:
 12063  069E                     i1l2694:
 12064  069E  302A               	movlw	42
 12065  069F  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12066  06A0  1803               	skipnc
 12067  06A1  2EA3               	goto	u126_21
 12068  06A2  2EA4               	goto	u126_20
 12069  06A3                     u126_21:
 12070  06A3  2EAA               	goto	i1l2700
 12071  06A4                     u126_20:
 12072  06A4                     i1l2696:
 12073                           
 12074                           ;mcc_generated_files/ext_int.c: 104:       ir_code.code |= 1;
 12075  06A4  1436               	bsf	(_ir_code^(0+128)+2),0
 12076  06A5                     i1l2698:
 12077                           
 12078                           ;mcc_generated_files/ext_int.c: 105:       ir_code.n_bits++;
 12079  06A5  3001               	movlw	1
 12080  06A6  00F0               	movwf	??_INT_DefaultInterruptHandler
 12081  06A7  0870               	movf	??_INT_DefaultInterruptHandler,w
 12082  06A8  07B4               	addwf	_ir_code^(0+128),f
 12083                           
 12084                           ;mcc_generated_files/ext_int.c: 106:     } else if (time >= 14 && time <= 20){
 12085  06A9  2EB9               	goto	i1l2708
 12086  06AA                     i1l2700:
 12087  06AA  300E               	movlw	14
 12088  06AB  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12089  06AC  1C03               	skipc
 12090  06AD  2EAF               	goto	u127_21
 12091  06AE  2EB0               	goto	u127_20
 12092  06AF                     u127_21:
 12093  06AF  2EB7               	goto	i1l2706
 12094  06B0                     u127_20:
 12095  06B0                     i1l2702:
 12096  06B0  3015               	movlw	21
 12097  06B1  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12098  06B2  1803               	skipnc
 12099  06B3  2EB5               	goto	u128_21
 12100  06B4  2EB6               	goto	u128_20
 12101  06B5                     u128_21:
 12102  06B5  2EB7               	goto	i1l2706
 12103  06B6                     u128_20:
 12104  06B6  2EA5               	goto	i1l2698
 12105  06B7                     i1l2706:
 12106                           
 12107                           ;mcc_generated_files/ext_int.c: 113:       ir_code.state = STATE_RESET;
 12108  06B7  01B5               	clrf	(_ir_code^(0+128)+1)
 12109                           
 12110                           ;mcc_generated_files/ext_int.c: 114:       break;
 12111  06B8  2EDE               	goto	i1l278
 12112  06B9                     i1l2708:
 12113                           
 12114                           ;mcc_generated_files/ext_int.c: 116:     if (32 == ir_code.n_bits){
 12115  06B9  3020               	movlw	32
 12116  06BA  0634               	xorwf	_ir_code^(0+128),w
 12117  06BB  1D03               	btfss	3,2
 12118  06BC  2EBE               	goto	u129_21
 12119  06BD  2EBF               	goto	u129_20
 12120  06BE                     u129_21:
 12121  06BE  2EDE               	goto	i1l278
 12122  06BF                     u129_20:
 12123  06BF                     i1l2710:
 12124                           
 12125                           ;mcc_generated_files/ext_int.c: 119:       if (ir_code.command == ((~ir_code.command_b) 
      +                          & 0xff)){
 12126  06BF  0936               	comf	(_ir_code^(0+128)+2),w
 12127  06C0  0637               	xorwf	(_ir_code^(0+128)+3),w
 12128  06C1  1D03               	skipz
 12129  06C2  2EC4               	goto	u130_21
 12130  06C3  2EC5               	goto	u130_20
 12131  06C4                     u130_21:
 12132  06C4  2EB7               	goto	i1l2706
 12133  06C5                     u130_20:
 12134  06C5                     i1l2712:
 12135                           
 12136                           ;mcc_generated_files/ext_int.c: 120:         ir_code.state = STATE_DONE;
 12137  06C5  3002               	movlw	2
 12138  06C6  00F0               	movwf	??_INT_DefaultInterruptHandler
 12139  06C7  0870               	movf	??_INT_DefaultInterruptHandler,w
 12140  06C8  00B5               	movwf	(_ir_code^(0+128)+1)
 12141                           
 12142                           ;mcc_generated_files/ext_int.c: 121:       } else {
 12143  06C9  2EDE               	goto	i1l278
 12144  06CA                     i1l2718:
 12145  06CA  0021               	movlb	1	; select bank1
 12146  06CB  0835               	movf	(_ir_code^(0+128)+1),w
 12147  06CC  00F0               	movwf	??_INT_DefaultInterruptHandler
 12148  06CD  01F1               	clrf	??_INT_DefaultInterruptHandler+1
 12149                           
 12150                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12151                           ; Switch size 1, requested type "simple"
 12152                           ; Number of cases is 1, Range of values is 0 to 0
 12153                           ; switch strategies available:
 12154                           ; Name         Instructions Cycles
 12155                           ; simple_byte            4     3 (average)
 12156                           ; direct_byte            8     6 (fixed)
 12157                           ; jumptable            260     6 (fixed)
 12158                           ;	Chosen strategy is simple_byte
 12159  06CE  0871               	movf	??_INT_DefaultInterruptHandler+1,w
 12160  06CF  3A00               	xorlw	0	; case 0
 12161  06D0  1903               	skipnz
 12162  06D1  2ED3               	goto	i1l4450
 12163  06D2  2EB7               	goto	i1l2706
 12164  06D3                     i1l4450:
 12165                           
 12166                           ; Switch size 1, requested type "simple"
 12167                           ; Number of cases is 3, Range of values is 0 to 2
 12168                           ; switch strategies available:
 12169                           ; Name         Instructions Cycles
 12170                           ; simple_byte           10     6 (average)
 12171                           ; direct_byte           12     6 (fixed)
 12172                           ; jumptable            260     6 (fixed)
 12173                           ;	Chosen strategy is simple_byte
 12174  06D3  0870               	movf	??_INT_DefaultInterruptHandler,w
 12175  06D4  3A00               	xorlw	0	; case 0
 12176  06D5  1903               	skipnz
 12177  06D6  2E81               	goto	i1l2682
 12178  06D7  3A01               	xorlw	1	; case 1
 12179  06D8  1903               	skipnz
 12180  06D9  2E91               	goto	i1l2690
 12181  06DA  3A03               	xorlw	3	; case 2
 12182  06DB  1903               	skipnz
 12183  06DC  2EDE               	goto	i1l278
 12184  06DD  2EB7               	goto	i1l2706
 12185  06DE                     i1l278:
 12186                           
 12187                           ;mcc_generated_files/ext_int.c: 135:   INTCONbits.INTF = 0;
 12188  06DE  108B               	bcf	11,1	;volatile
 12189  06DF                     i1l289:
 12190  06DF  0008               	return
 12191  06E0                     __end_of_INT_DefaultInterruptHandler:
 12192  007E                     btemp	set	126	;btemp
 12193  007E                     int$flags	set	126
 12194  007E                     wtemp0	set	126
 12195                           
 12196                           	psect	config
 12197                           
 12198                           ;Config register CONFIG1 @ 0x8007
 12199                           ;	Oscillator Selection Bits
 12200                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 12201                           ;	Watchdog Timer Enable
 12202                           ;	WDTE = 0x1, user specified literal
 12203                           ;	Power-up Timer Enable
 12204                           ;	PWRTE = OFF, PWRT disabled
 12205                           ;	MCLR Pin Function Select
 12206                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 12207                           ;	Flash Program Memory Code Protection
 12208                           ;	CP = OFF, Program memory code protection is disabled
 12209                           ;	Brown-out Reset Enable
 12210                           ;	BOREN = OFF, Brown-out Reset disabled
 12211                           ;	Clock Out Enable
 12212                           ;	CLKOUTEN = ON, CLKOUT function is enabled on the CLKOUT pin
 12213                           ;	Internal/External Switchover Mode
 12214                           ;	IESO = OFF, Internal/External Switchover Mode is disabled
 12215                           ;	Fail-Safe Clock Monitor Enable
 12216                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 12217  8007                     	org	32775
 12218  8007  21EC               	dw	8684
 12219                           
 12220                           ;Config register CONFIG2 @ 0x8008
 12221                           ;	Flash Memory Self-Write Protection
 12222                           ;	WRT = OFF, Write protection off
 12223                           ;	Peripheral Pin Select one-way control
 12224                           ;	PPS1WAY = ON, The PPSLOCK bit cannot be cleared once it is set by software
 12225                           ;	Zero-cross detect disable
 12226                           ;	ZCDDIS = ON, Zero-cross detect circuit is disabled at POR
 12227                           ;	Phase Lock Loop enable
 12228                           ;	PLLEN = OFF, 4x PLL is enabled when software sets the SPLLEN bit
 12229                           ;	Stack Overflow/Underflow Reset Enable
 12230                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 12231                           ;	Brown-out Reset Voltage Selection
 12232                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 12233                           ;	Low-Power Brown Out Reset
 12234                           ;	LPBOR = OFF, Low-Power BOR is disabled
 12235                           ;	Low-Voltage Programming Enable
 12236                           ;	LVP = ON, Low-voltage programming enabled
 12237  8008                     	org	32776
 12238  8008  3EFF               	dw	16127

Data Sizes:
    Strings     128
    Constant    4
    Data        47
    BSS         93
    Persistent  52
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     80      80
    BANK1            80      8      80
    BANK2            80      0      52
    BANK3            80      0      33
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    S1917_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_7(CODE[25]), STR_6(CODE[25]), STR_5(CODE[23]), STR_4(CODE[20]), 
		 -> STR_3(CODE[20]), STR_2(CODE[19]), STR_1(CODE[21]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 25
		 -> STR_7(CODE[25]), STR_6(CODE[25]), STR_5(CODE[23]), STR_4(CODE[20]), 
		 -> STR_3(CODE[20]), STR_2(CODE[19]), STR_1(CODE[21]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_7(CODE[25]), STR_6(CODE[25]), STR_5(CODE[23]), STR_4(CODE[20]), 
		 -> STR_3(CODE[20]), STR_2(CODE[19]), STR_1(CODE[21]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    process_remote_command@code	PTR struct . size(1) Largest target is 6
		 -> ir_code(BANK1[6]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 64
		 -> writePersistentState@buf(BANK0[64]), 

    TMR4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _startUp->_setLEDColor
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _setCurrent->___awdiv
    _selectSomething->_setLEDColor
    _vfpfcnvrt->_fputc
    _fputc->_putch
    _putch->_EUSART_Write
    ___aldiv->___awdiv
    _lowBattery->_setLEDColor
    _TMR4_Initialize->_TMR4_SetInterruptHandler
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR4_ISR->_TMR4_DefaultInterruptHandler
    _TMR4_DefaultInterruptHandler->_DAC_SetOutput
    _INT_CallBack->_INT_DefaultInterruptHandler

Critical Paths under _main in BANK0

    _process_remote_command->_writePersistentState
    _writePersistentState->_FLASH_WriteBlock
    _setFrequency->___aldiv
    _setCurrent->_battery_voltage
    _selectIncrease->_printf
    _selectFrequencyValue->_printf
    _selectFrequency->_printf
    _selectDecrease->_printf
    _selectCurrentValue->_printf
    _selectCurrent->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_fputc
    _battery_voltage->___aldiv
    ___aldiv->___lmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_process_remote_command

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  104555
                                              3 BANK1      5     5      0
                     _DAC_Initialize
                   _LATCH_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
                  _SYSTEM_Initialize
                    _battery_voltage
                            _initLED
                         _lowBattery
             _process_remote_command
                _readPersistentState
                         _setCurrent
                       _setFrequency
                            _startUp
 ---------------------------------------------------------------------------------
 (1) _startUp                                              4     4      0    6142
                                              0 BANK0      4     4      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (1) _readPersistentState                                  2     2      0       0
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _process_remote_command                               3     3      0   80284
                                              0 BANK1      3     3      0
                    _battery_voltage
                      _selectCurrent
                 _selectCurrentValue
                     _selectDecrease
                    _selectFrequency
               _selectFrequencyValue
                     _selectIncrease
                    _selectSomething
                         _setCurrent
                       _setFrequency
                        _setLEDColor
               _writePersistentState
 ---------------------------------------------------------------------------------
 (2) _writePersistentState                                70    70      0    1464
                                             10 BANK0     70    70      0
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    10     7      3    1140
                                              0 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     3     1      2     215
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _setFrequency                                         5     3      2    3632
                                             23 BANK0      5     3      2
            _TMR4_LoadPeriodRegister
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) _TMR4_LoadPeriodRegister                              1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setCurrent                                          16    12      4    6046
                                             25 BANK0     16    12      4
                            ___aldiv
                            ___awdiv
                             ___lmul
                    _battery_voltage (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     612
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     683
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _selectSomething                                      2     2      0    6074
                                              0 BANK0      2     2      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectIncrease                                       2     2      0    9254
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectFrequencyValue                                 2     2      0    9254
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectFrequency                                      2     2      0    9254
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectDecrease                                       1     1      0    9254
                                             25 BANK0      1     1      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectCurrentValue                                   2     2      0    9254
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectCurrent                                        2     2      0    9254
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (3) _printf                                               6     4      2    3180
                                             21 BANK0      4     2      2
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             8     5      3    2272
                                             13 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           40    38      2    1759
                                              5 BANK0      8     6      2
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                8     5      3    1158
                                              5 COMMON     3     0      3
                                              0 BANK0      5     5      0
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0      62
                                              4 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (8) _EUSART_Write                                         1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _battery_voltage                                      2     0      2    1397
                                             23 BANK0      2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8    1397
                                              8 BANK0     15     7      8
                            ___awdiv (ARG)
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _lowBattery                                           2     2      0    6074
                                              0 BANK0      2     2      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _setLEDColor                                          4     2      2    6074
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLED                                              1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     875
                     _DAC_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0     125
           _TMR4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR4_SetInterruptHandler                             2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     125
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     125
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     125
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     375
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LATCH_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           0     0      0     156
                            _INT_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                           _TMR1_ISR
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR4_ISR                                            0     0      0      22
                   Absolute function *
       _TMR4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR4_DefaultInterruptHandler                        1     1      0      22
                                              1 COMMON     1     1      0
                      _DAC_SetOutput
 ---------------------------------------------------------------------------------
 (12) _DAC_SetOutput                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT_ISR                                             0     0      0     134
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (11) _INT_CallBack                                        0     0      0     134
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (12) _INT_DefaultInterruptHandler                         3     3      0     134
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DAC_Initialize
   _LATCH_Initialize
   _OPA1_Initialize
   _OPA2_Initialize
   _SYSTEM_Initialize
     _DAC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OPA1_Initialize
     _OPA2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
     _TMR4_Initialize
       _TMR4_SetInterruptHandler
     _WDT_Initialize
   _battery_voltage
     ___aldiv
       ___awdiv (ARG)
       ___lmul (ARG)
   _initLED
   _lowBattery
     _setLEDColor
   _process_remote_command
     _battery_voltage
     _selectCurrent
       _printf
         _vfprintf
           _vfpfcnvrt
             _fputc
               _putch
                 _EUSART_Write
       _setLEDColor
     _selectCurrentValue
       _printf
       _setLEDColor
     _selectDecrease
       _printf
       _setLEDColor
     _selectFrequency
       _printf
       _setLEDColor
     _selectFrequencyValue
       _printf
       _setLEDColor
     _selectIncrease
       _printf
       _setLEDColor
     _selectSomething
       _setLEDColor
     _setCurrent
       ___aldiv
       ___awdiv
       ___lmul
       _battery_voltage (ARG)
     _setFrequency
       _TMR4_LoadPeriodRegister
       ___aldiv
       ___lmul
     _setLEDColor
     _writePersistentState
       _FLASH_WriteBlock
         _FLASH_EraseBlock
   _readPersistentState
   _setCurrent
   _setFrequency
   _startUp
     _setLEDColor

 _INTERRUPT_InterruptManager (ROOT)
   _INT_ISR
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
   _TMR1_ISR
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
   _TMR4_ISR
     Absolute function(Fake) *
     _TMR4_DefaultInterruptHandler *
       _DAC_SetOutput

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     100       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     50      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      8      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      34      10       65.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      21      12       41.2%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     100      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Dec 01 17:12:21 2021

                                            l7 0ACF                                             l50 0CC3  
                                           l53 0B13                                             l56 0AB2  
                                 ___awdiv@sign 0021                        __end_of_OPA1_Initialize 0AB7  
                              _timer0ReloadVal 0079                        __size_of_selectIncrease 0025  
                                          l111 0E45                                            l222 0B27  
                                          l119 0AB6                                            l231 0AFF  
                                          l305 0B1B                                            l225 0B2F  
                                          l243 0ADB                                            l420 0AF9  
                                          l413 0AC9                                            l246 0AE1  
                                          l271 0AE7                                            l249 0AD5  
                                          l329 0ABA                                            l513 0AF3  
                                          l362 0AED                                            l346 0B85  
                                          l292 0B46                                            l198 0C7C  
                                          l472 0C3A                                            l641 0E5E  
                                          l465 061E                                            l633 0FDF  
                                          l650 0BEC                                            l642 0E78  
                                          l466 0673                                            l636 0E4E  
                                          l468 066B                                            l628 0C5A  
                                          l645 07E9                                            l653 0DE1  
                                          l901 050D                                            l661 0F83  
                                          l398 0BAA                                            l638 0E53  
                                          l670 0CE8                                            l911 0589  
                                          l639 0E5A                                            l752 0B3A  
                                          l664 0D89                                            l497 0C04  
                                          l673 0C9E                                            l682 0D0E  
                                          l850 0EAC                                            l658 0EE8  
                                          l667 0D36                                            l692 0720  
                                          l749 03BC                                            l679 0D5F  
                                          l696 0745                                            l689 0463  
                                          l989 07A5                                            _PR2 001B  
                                          _PR4 0416                          ?_selectFrequencyValue 0070  
                              _timer1ReloadVal 00D6                 ?_EUSART_SetFramingErrorHandler 0073  
                              _TMR2_Initialize 0B14                                            wreg 0009  
                                  main@batt_mv 00EE                 FLASH_WriteBlock@flashWordArray 0022  
                     __size_of_selectFrequency 002A                                           l3000 0C65  
                                         l3002 0C6C                                           l3004 0C73  
                                         l1332 0607                                           l3006 0C7A  
                                         l1350 0F28                                           l4000 0C7D  
                                         l1338 0E12                                           l4010 0D44  
                                         l4002 0C87                                           l3220 07A9  
                                         l4012 0D51                                           l4004 0C90  
                                         l4020 0D00                                           l4100 00EB  
                                         l3230 07B8                                           l3222 07AD  
                                         l4014 0D57                                           l4006 0C96  
                                         l4022 0D06                                           l4030 0455  
                                         l4110 0107                                           l4102 00EE  
                                         l3160 0CA8                                           l3240 07C4  
                                         l3232 07BA                                           l3224 07AE  
                                         l4008 0D37                                           l4016 0CE9  
                                         l4032 045A                                           l4024 03BD  
                                         l4040 071B                                           l4200 020A  
                                         l4120 011E                                           l4112 010D  
                                         l4104 00FC                                           l3216 0C3B  
                                         l3170 0CB7                                           l3162 0CAB  
                                         l3250 07CF                                           l3242 07C7  
                                         l3234 07BB                                           l3226 07B0  
                                         l3218 07A6                                           l4018 0CF3  
                                         l4034 045C                                           l4026 0443  
                                         l4050 0740                                           l4042 072E  
                                         l4210 0234                                           l4202 021D  
                                         l4122 0120                                           l4130 013F  
                                         l4114 0111                                           l4106 00FF  
                                         l1299 0B97                                           l3172 0CBA  
                                         l3164 0CAE                                           l3156 0C9F  
                                         l3252 07D4                                           l3244 07CA  
                                         l3236 07C0                                           l3228 07B6  
                                         l4060 0DC1                                           l4028 0450  
                                         l4052 0743                                           l4044 0733  
                                         l4036 06E0                                           l4212 0239  
                                         l4140 0154                                           l4132 0145  
                                         l4124 0124                                           l4116 0116  
                                         l4108 0104                                           l3174 0CBD  
                                         l3166 0CB1                                           l3158 0CA5  
                                         l3254 07D6                                           l3246 07CC  
                                         l3238 07C2                                           l4062 0DD4  
                                         l4054 0744                                           l4046 0734  
                                         l4038 070E                                           l4310 03B6  
                                         l4230 0273                                           l4222 025A  
                                         l4214 023C                                           l4206 0223  
                                         l4150 0170                                           l4142 0157  
                                         l4134 014A                                           l4126 0127  
                                         l4118 011A                                           l4070 0EB1  
                                         l3520 0B30                                           l3176 0CC0  
                                         l3168 0CB4                                           l3256 07DB  
                                         l3248 07CE                                           l4056 0DB6  
                                         l4048 0739                                           l4240 0297  
                                         l4232 0278                                           l4224 0260  
                                         l4216 0241                                           l4208 0229  
                                         l4160 0185                                           l4144 0165  
                                         l4136 014E                                           l4128 013C  
                                         l4080 0095                                           l4304 036D  
                                         l4072 0EBE                                           l4064 0EAD  
                                         l3258 07E0                                           l4058 0DBB  
                                         l4250 02C2                                           l4242 02A2  
                                         l4234 028B                                           l4226 026B  
                                         l4218 0254                                           l4170 01AE  
                                         l4162 0190                                           l4154 0177  
                                         l4138 0150                                           l4146 0168  
                                         l4306 03A3                                           l4090 00C7  
                                         l4082 00A6                                           l4074 0EC7  
                                         l2900 0ACA                                           l3700 05AE  
                                         l4308 03A9                                           l4260 02DE  
                                         l4244 02A7                                           l4228 0270  
                                         l4180 01CB                                           l4172 01B1  
                                         l4164 0193                                           l4156 017B  
                                         l4148 016D                                           l4084 00AB  
                                         l4092 00CA                                           l4076 0089  
                                         l2670 0AE2                                           l2910 0E1E  
                                         l2902 0E13                                           l2726 0AE8  
                                         l3702 05C0                                           l3710 05D9  
                                         l4270 02FF                                           l4262 02E1  
                                         l4254 02C8                                           l4246 02AA  
                                         l4238 0291                                           l4190 01EC  
                                         l4182 01CE                                           l4174 01B5  
                                         l4166 0196                                           l4158 017F  
                                         l4094 00D0                                           l4086 00AF  
                                         l4078 0090                                           l4350 0470  
                                         l4342 0464                                           l2664 0AD6  
                                         l2920 0E27                                           l2912 0E21  
                                         l2904 0E17                                           l2728 0AF4  
                                         l3712 05E1                                           l3704 05C8  
                                         l3800 065A                                           l4280 031D  
                                         l4272 0305                                           l4264 02E6  
                                         l4256 02CE                                           l4248 02AF  
                                         l4192 01F2                                           l4184 01D3  
                                         l4176 01BB                                           l4168 019B  
                                         l4096 00E2                                           l4088 00B2  
                                         l4360 049C                                           l4352 0473  
                                         l4344 0467                                           l2666 0ADC  
                                         l2930 0E3C                                           l2922 0E28  
                                         l2914 0E23                                           l2906 0E1A  
                                         l3706 05D3                                           l3730 0C27  
                                         l3802 065B                                           l4290 0347  
                                         l4282 0330                                           l4274 0310  
                                         l4266 02F9                                           l4258 02D9  
                                         l4194 01FD                                           l4186 01E6  
                                         l4178 01C6                                           l4098 00E7  
                                         l4370 04AF                                           l4362 049D  
                                         l4354 0476                                           l4346 046A  
                                         l2668 0AD0                                           l2932 0B0C  
                                         l2924 0E2A                                           l2916 0E24  
                                         l2908 0E1C                                           l2940 0AB0  
                                         l3820 0BE7                                           l3812 0BD7  
                                         l3716 05E4                                           l3900 0762  
                                         l3740 0C31                                           l3732 0C29  
                                         l3724 0C1F                                           l3804 0661  
                                         l4292 034C                                           l4276 0315  
                                         l4196 0202                                           l4380 04D5  
                                         l4372 04BC                                           l4364 049E  
                                         l4356 0479                                           l4348 046D  
                                         l2942 0AB3                                           l2934 0B0F  
                                         l2926 0E2C                                           l2918 0E26  
                                         l2782 0AEE                                           l2950 0B9E  
                                         l3822 0BEA                                           l3814 0BDC  
                                         l3718 05FD                                           l3750 0DE8  
                                         l3910 0778                                           l3902 0768  
                                         l3830 0E79                                           l3742 0C32  
                                         l3734 0C2A                                           l3726 0C23  
                                         l3806 0665                                           l4294 034F  
                                         l4286 0336                                           l4278 0318  
                                         l4198 0205                                           l4382 04EA  
                                         l4374 04C2                                           l4366 04A1  
                                         l4358 048E                                           l2936 0B10  
                                         l2928 0E2D                                           l2960 0BF2  
                                         l2952 0BA0                                           l2944 0B98  
                                         l3816 0BDF                                           l3672 0B27  
                                         l3680 0EEE                                           l3752 0DEC  
                                         l3824 0B86                                           l3912 0787  
                                         l3904 076B                                           l3920 0797  
                                         l3840 0EA4                                           l3832 0E81  
                                         l3760 0AC6                                           l3744 0C33  
                                         l3736 0C2B                                           l3728 0C24  
                                         l3808 066D                                           l4448 037A  
                                         l4296 0354                                           l4288 033C  
                                         l4384 04F1                                           l4376 04C5  
                                         l4368 04A4                                           l2938 0B11  
                                         l2962 0BF7                                           l2970 0B14  
                                         l2954 0BA7                                           l2946 0B9B  
                                         l3818 0BE4                                           l3850 0511  
                                         l3674 0B2C                                           l3682 0EF3  
                                         l3754 0E00                                           l3826 0B8B  
                                         l3922 079C                                           l3914 078B  
                                         l3906 0770                                           l3834 0E86  
                                         l3746 0C35                                           l3738 0C30  
                                         l3770 061F                                           l3762 0608  
                                         l4298 0367                                           l4386 04F5  
                                         l4378 04D2                                           l2980 0B3E  
                                         l2956 0AB7                                           l2964 0BF9  
                                         l2972 0B17                                           l2948 0B9C  
                                         l3860 0533                                           l3852 051C  
                                         l3844 04FA                                           l3676 0AFB  
                                         l3684 0EF8                                           l3692 058C  
                                         l3756 0E0A                                           l3748 0DE4  
                                         l3924 07A1                                           l3916 078C  
                                         l3908 0774                                           l3836 0E8E  
                                         l3772 0626                                           l3764 060F  
                                         l3940 0F92                                           l2982 0B45  
                                         l2990 0B7C                                           l2966 0BFB  
                                         l2958 0BED                                           l2974 0B18  
                                         l3870 0563                                           l3862 053E  
                                         l3854 0520                                           l3846 04FC  
                                         l3686 0F02                                           l3678 0EE9  
                                         l3694 059D                                           l3918 0791  
                                         l3838 0E95                                           l3790 063D  
                                         l3774 0628                                           l3766 0613  
                                         l3950 0FC3                                           l3942 0F93  
                                         l3934 0F86                                           l2992 0B7D  
                                         l2984 0B74                                           l2968 0BFD  
                                         l2976 0B19                                           l3880 0581  
                                         l3872 0564                                           l3864 0542  
                                         l3856 0528                                           l3848 0500  
                                         l3688 0F20                                           l3696 05A5  
                                         l3792 064B                                           l3784 062C  
                                         l3776 0629                                           l3952 0FD0  
                                         l3944 0FA3                                           l3936 0F88  
                                         l3928 0F84                                           l2978 0B3B  
                                         l2994 0B7E                                           l2986 0B79  
                                         l3874 056B                                           l3866 0549  
                                         l3858 0530                                           l3698 05AA  
                                         l3970 0F63                                           l3962 0F29  
                                         l3890 0751                                           l3794 0652  
                                         l3786 062F                                           l3778 062A  
                                         l3954 0FD4                                           l3946 0FA7  
                                         l3938 0F8C                                           l2996 0C5B  
                                         l2988 0B7B                                           l3868 055B  
                                         l3876 0571                                           l3956 0E46  
                                         l3980 0D81                                           l3972 0F76  
                                         l3964 0F36                                           l3892 0753  
                                         l3884 0746                                           l3796 0654  
                                         l3788 0633                                           l3948 0FBF  
                                         l2998 0C64                                           l3878 0576  
                                         l3958 0E5F                                           l3990 0D2E  
                                         l3982 0D0F                                           l3974 0D60  
                                         l3966 0F43                                           l3894 0757  
                                         l3886 0748                                           l3798 0659  
                                         l3984 0D11                                           l3976 0D65  
                                         l3992 0CC4                                           l3968 0F56  
                                         l3896 075C                                           l3888 074C  
                                         l3986 0D1B                                           l3978 0D6E  
                                         l3994 0CD1                                           l3898 0760  
                                         l3988 0D28                                           l3996 0CDA  
                                         l3998 0CE0                                           STR_1 081A  
                                         STR_2 0857                                           STR_3 0843  
                                         STR_4 082F                                           STR_5 0803  
                                         STR_6 07EA                                           STR_7 07EA  
                                         u3000 04BC                                           u3001 04BB  
                                         u3010 04D2                                           u3011 04D1  
                                         u2300 0E0A                                           u3020 04F1  
                                         u2301 0E09                                           u3021 04F0  
                                         u3005 04B8                                           _LATA 010C  
                                         u2230 0B2C                                           u2310 061D  
                                         _LATB 010D                                __end_of_INT_ISR 0AC0  
                                         u2231 0B2B                                           u2311 061C  
                                         u3015 04CE                                           _LATC 010E  
                                         u2400 0511                                           u2240 0EEE  
                                         u2320 0652                                           u2401 0510  
                                         u2241 0EED                                           u2321 0651  
                                         u2410 0530                                           u2250 0EF3  
                                         u2330 066B                                           u2411 052F  
                                         u2251 0EF2                                           u3107 0CD5  
                                         u2331 066A                                           u2315 0619  
                                         u2340 0BDC                                           u2260 0F02  
                                         u2500 0757                                           u2341 0BDB  
                                         u2261 0F01                                           u3117 0CF9  
                                         u2501 0756                                           u3037 0EC2  
                                         u2430 0542                                           u2270 0F20  
                                         u2510 0768                                           u2350 0E86  
                                         u2431 0541                                           u2271 0F1F  
                                         u3127 0D74                                           u2511 0767  
                                         u2351 0E85                                           u3047 0ED1  
                                         u2600 0E53                                           u2280 059D  
                                         u2425 0534                                           u2601 0E52  
                                         u2281 059C                                           u3137 0C8B  
                                         u3057 03AF                                           u2450 055B  
                                         u2610 0E5E                                           u2290 05C0  
                                         u2530 0778                                           u2451 055A  
                                         u2611 0E5D                                           u2275 0F1C  
                                         u2291 05BF                                           u3147 0D4A  
                                         u3067 0F3C                                           u2531 0777  
                                         u2380 0EA4                                           u2620 0429  
                                         u2700 00A6                                           u2445 0543  
                                         u3157 0D21                                           u3077 0F4F  
                                         u2525 076C                                           u2381 0EA3  
                                         u2365 0E8F                                           u2701 00A5  
                                         u2470 0571                                           u2390 0500  
                                         u2550 0787                                           u2630 0450  
                                         u2710 00D0                                           u3167 0DC7  
                                         u2471 0570                                           u2455 0557  
                                         u2391 04FF                                           u3087 0F69  
                                         u2551 0786                                           u2375 0E96  
                                         u2631 044F                                           u2711 00CF  
                                         u2480 0576                                           u2640 045A  
                                         u2800 0176                                           u2720 00E2  
                                         u3177 0DDA                                           u2481 0575  
                                         u2465 0565                                           u3097 0F7C  
                                         u2545 0779                                           u2641 0459  
                                         u2625 0425                                           u2801 0175  
                                         u2721 00E1                                           u2705 00A2  
                                         u2570 0797                                           u2490 074C  
                                         u2650 071B                                           u2810 0185  
                                         u2730 0104                                           u2571 0796  
                                         u2555 0783                                           u2491 074B  
                                         u2635 044C                                           u2651 071A  
                                         u2811 0184                                           u2731 0103  
                                         u2580 079C                                           u2660 072E  
                                         u2900 0278                                           u2820 019B  
                                         u2740 010D                                           u2581 079B  
                                         u2565 078D                                           u2661 072D  
                                         u2901 0277                                           u2821 019A  
                                         u2741 010C                                           u2725 00DE  
                                         u2670 0740                                           u2590 0F92  
                                         u2910 0297                                           u2830 01BB  
                                         u2750 0116                                           u2671 073F  
                                         u2655 0717                                           u2591 0F91  
                                         u2911 0296                                           u2831 01BA  
                                         u2751 0115                                           u2920 02AF  
                                         u2840 01D3                                           u2760 011E  
                                         u2680 0EE8                                           u2665 072A  
                                         u2921 02AE                                           u2841 01D2  
                                         u2761 011D                                           u2681 0EE7  
                                         i1l10 0AC4                                           u2930 02CE  
                                         u2850 01F2                                           u2770 0145  
                                         u2690 0095                                           u2931 02CD  
                                         u2851 01F1                                           u2771 0144  
                                         u2691 0094                                           u2940 02E6  
                                         u2860 020A                                           u2780 014E  
                                         u2941 02E5                                           u2861 0209  
                                         u2781 014D                                           u2685 0EE4  
                                         u2950 0305                                           u2870 0229  
                                         u2790 016D                                           u2951 0304  
                                         u2871 0228                                           u2791 016C  
                                         u2960 031D                                           u2880 0241  
                                         u2961 031C                                           u2881 0240  
                                         u2970 033C                                           u2890 0260  
                                         u2971 033B                                           u2891 025F  
                                         u2980 0354                                           u2981 0353  
                                         _TMR0 0015                                           _TMR1 0016  
                                         _TMR2 001A                                           _TMR4 0415  
                      __end_of_OPA2_Initialize 0ABB                                           _WPUA 020C  
                                         _WPUB 020D                                           _WPUC 020E  
                                         _dbuf 0120                                           _main 0464  
                                         _prec 00A4                                           _nout 00A0  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E                              ?_FLASH_WriteBlock 0020  
          __end_of_INT_DefaultInterruptHandler 06E0                    _INT_DefaultInterruptHandler 0674  
                                         start 004B                __end_of_INT_SetInterruptHandler 0AE8  
                           ??_FLASH_WriteBlock 0023                     ??_TMR1_SetInterruptHandler 0075  
                   ??_TMR4_SetInterruptHandler 0075                        __end_of_TMR0_Initialize 0B86  
               ??_TMR0_DefaultInterruptHandler 0070                                  ?_EUSART_Write 0070  
               __size_of_OSCILLATOR_Initialize 0008                  __end_of_OSCILLATOR_Initialize 0B14  
                              __end_of___aldiv 058A                                          ?_main 0070  
                              __end_of___awdiv 07A6                                          _ADRES 009B  
                              ___awdiv@divisor 0073                                          _T2CON 001C  
                                        _T4CON 0417                                          i1l114 0AAF  
                                        i1l152 003B                                          i1l144 0012  
                                        i1l146 001E                                          i1l147 0049  
                                        i1l155 0049                                          i1l148 002A  
                                        i1l510 0BD5                                          i1l430 0DAA  
                                        i1l431 0DA7                                          i1l264 0ABF  
                                        i1l417 0B62                                          i1l434 0DB5  
                                        i1l268 0B53                                          i1l365 0002  
                                        i1l278 06DE                                          i1l518 0B25  
                                        i1l359 0B73                                          i1l289 06DF  
                                 ?_setLEDColor 0073                                ___awdiv@counter 0020  
                                 vfpfcnvrt@fmt 0025                       __size_of_selectSomething 005B  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          _RXPPS 0E24  
            __size_of_TMR0_SetInterruptHandler 0006                                _TMR4_Initialize 0B98  
                          ___lmul@multiplicand 0024                      ?_TMR0_SetInterruptHandler 0073  
                             __end_of_TMR0_ISR 0B74                               __end_of_TMR1_ISR 0BD6  
                             __end_of_TMR4_ISR 0B63                                __end_of_initLED 07EA  
                      __end_of_PIN_MANAGER_IOC 0AB0                                          _flags 00A6  
                               _WDT_Initialize 0AB0                                          _fputc 0EE9  
                          _readPersistentState 0C3B                                          _width 00A2  
                                        _putch 0AFA                                          _stats 01A0  
                      __end_of_TMR1_Initialize 0C05                                          pclath 000A  
                              __end_of_startUp 0EE9                                          status 0003  
                      ?_process_remote_command 0070                                          wtemp0 007E  
                             ??_DAC_Initialize 0073                                __initialization 004D  
                                 __end_of_main 04FA                           ?_readPersistentState 0070  
                        __end_of_selectCurrent 0D37                                 ??_EUSART_Write 0073  
                      __end_of_TMR2_Initialize 0B1C                    ?_INTERRUPT_InterruptManager 0070  
                             ?_OPA1_Initialize 0070                         ??_selectFrequencyValue 0039  
                                       ??_main 00EB                       __size_of_battery_voltage 0033  
                __size_of_writePersistentState 005C                       ?_TMR4_LoadPeriodRegister 0070  
                       __end_of_WDT_Initialize 0AB3                                      ??_INT_ISR 0073  
            _EUSART_DefaultFramingErrorHandler 0000                                         _ADCON0 009D  
                                       _ADCON1 009E                     _EUSART_OverrunErrorHandler 00E0  
                    FLASH_WriteBlock@writeAddr 0020                                         ?_fputc 0075  
                                       _CCPR1L 0291                               ___awdiv@dividend 0075  
                                       _ANSELA 018C                                         ?_putch 0070  
                                       _ANSELB 018D                                         _ANSELC 018E  
                                       _BORCON 0116                                         _RC1REG 0199  
                                       _RA5PPS 0E95                                         _RC1STA 019D  
                                       _RC4PPS 0EA4                                         i1l3010 0B4E  
                                       _RB7PPS 0E9F                                         _RC5PPS 0EA5  
                                       i1l3020 0DA1                                         i1l3012 0D8A  
                                       i1l3022 0DA2                                         i1l3014 0D8F  
                                       i1l3008 0B47                                         i1l3024 0B1C  
                                       i1l3200 0BC9                                         i1l3016 0D94  
                                       _ODCONA 028C                                         i1l3026 0B23  
                                       i1l3202 0BD0                                         i1l3018 0D9A  
                                       _ODCONB 028D                                         _ODCONC 028E  
                                       u121_20 067E                                         u121_21 067D  
               __end_of_process_remote_command 03BD                                         i1l2700 06AA  
                                       i1l3180 0B64                                         i1l2710 06BF  
                                       i1l2702 06B0                                         i1l3182 0B67  
                                       i1l3190 0B54                                         i1l2712 06C5  
                                       u130_20 06C5                                         u122_20 0687  
                                       i1l3184 0B6E                                         i1l3192 0B56  
                                       u210_20 0016                                         u130_21 06C4  
                                       u122_21 0686                                         u210_21 0015  
                                       i1l2706 06B7                                         i1l3186 0ABB  
                                       i1l3178 0B63                                         i1l3194 0B5D  
                                       i1l3530 001A                                         i1l3522 0006  
                                       i1l2708 06B9                                         i1l3188 0ABC  
                                       i1l3196 0BBF                                         i1l3540 0038  
                                       i1l3532 0022                                         i1l3524 000A  
                                       i1l2718 06CA                                         i1l3198 0BC1  
                                       i1l2662 0AC1                                         i1l3542 0040  
                                       i1l3534 0026                                         i1l3526 000E  
                                       u123_20 068D                                         i1l2680 067F  
                                       i1l2672 0674                                         i1l3544 0045  
                                       i1l3536 002E                                         u211_20 001A  
                                       i1l3528 0016                                         u123_21 068C  
                                       u211_21 0019                                         i1l4450 06D3  
                                       i1l2690 0691                                         i1l2682 0681  
                                       i1l2674 0679                                         i1l3538 0033  
                                       i1l2692 0698                                         i1l2684 0687  
                                       i1l2676 067A                                         i1l2694 069E  
                                       i1l2686 068D                                         i1l2678 067E  
                                       i1l2696 06A4                                         i1l2688 068E  
                                       u212_20 0022                                         u212_21 0021  
                                       i1l2698 06A5                                         u124_25 0692  
                                       u125_20 069E                                         u213_20 0026  
                                       u125_21 069D                                         u213_21 0025  
                                       u126_20 06A4                                         u214_20 002E  
                                       u126_21 06A3                                         u214_21 002D  
                                       u127_20 06B0                                         u215_20 0033  
                                       u127_21 06AF                                         u215_21 0032  
                                       u128_20 06B6                                         u160_20 0D8F  
                                       u216_20 0038                                         u208_20 000A  
                                       u128_21 06B5                                         u160_21 0D8E  
                                       u216_21 0037                                         u208_21 0009  
                                       _INLVLA 038C                                         _INLVLB 038D  
                                       _INLVLC 038E                                         u129_20 06BF  
                                       u161_20 0D9A                                         u217_20 0040  
                                       u209_20 000E                                         u129_21 06BE  
                                       u161_21 0D99                                         u217_21 003F  
                                       u209_21 000D                                         u162_20 0DA1  
                                       u218_20 0045                                         u162_21 0DA0  
                                       u218_21 0044                                         _FVRCON 0117  
                                       u172_20 0B6E                                         u172_21 0B6D  
                                       u173_20 0B5D                                         u173_21 0B5C  
                                       u174_20 0BD0                                         u174_21 0BCF  
                                       u159_20 0B4E                                         u159_21 0B4D  
                                       _INTPPS 0E10                                         _PMADRH 0192  
                                       _PMADRL 0191                               ?_OPA2_Initialize 0070  
                                       _PMDATH 0194                                         _PMDATL 0193  
                                       _PMCON2 0196                      __size_of_FLASH_EraseBlock 001C  
                                       _OSCCON 0099                                         _TX1REG 019A  
                                       _WDTCON 0097                                         _TX1STA 019E  
                             _LATCH_Initialize 0B30                              ??_selectFrequency 0039  
                               _selectDecrease 0C7D                                         _Vdd_mv 00AA  
         __end_of_TMR1_DefaultInterruptHandler 0B26          __size_of_TMR1_DefaultInterruptHandler 000A  
                 _TMR1_DefaultInterruptHandler 0B1C                                   vfprintf@cfmt 0033  
                        ??_readPersistentState 0073                                         ___lmul 0E79  
                                    ??___aldiv 0030                                      ??___awdiv 0077  
                             ?_TMR0_Initialize 0070                        __end_of_TMR4_Initialize 0BAB  
                             ___awdiv@quotient 0022                                 _selectIncrease 0CC4  
                                       _printf 0B86                                         _toggle 00BE  
                                ?_INT_CallBack 0070                                      ??_initLED 0073  
         __end_of_TMR4_DefaultInterruptHandler 0DB6          __size_of_TMR4_DefaultInterruptHandler 002C  
                 _TMR4_DefaultInterruptHandler 0D8A                                         fputc@c 0075  
                                 __pdataCOMMON 007A                               setCurrent@Vdd_mv 003B  
                              ?_WDT_Initialize 0070                     __end_of_selectCurrentValue 0D60  
             __size_of_INT_SetInterruptHandler 0006                               __end_of_vfprintf 0E13  
                                    ??_startUp 0020       TMR1_SetInterruptHandler@InterruptHandler 0073  
     TMR4_SetInterruptHandler@InterruptHandler 0073       TMR0_SetInterruptHandler@InterruptHandler 0073  
      INT_SetInterruptHandler@InterruptHandler 0073                               ?_PIN_MANAGER_IOC 0070  
                            ??_selectSomething 0020                               ?_TMR1_Initialize 0070  
                            _SYSTEM_Initialize 0C9F                        __end_of__initialization 0083  
                       __end_of_selectDecrease 0C9F                             ?_SYSTEM_Initialize 0070  
                       DAC_SetOutput@inputData 0070                              _dc_frequency_flag 007A  
                               __pcstackCOMMON 0070                                   __pidataBANK1 0C05  
                                 __pidataBANK2 0BAB                            ??_SYSTEM_Initialize 0075  
                                    ?_TMR0_ISR 0070                                      ?_TMR1_ISR 0070  
                ?_TMR1_DefaultInterruptHandler 0070                                      ?_TMR4_ISR 0070  
                       __end_of_selectIncrease 0CE9                                  __end_of_fputc 0F29  
                                __end_of_putch 0B00                               ?_TMR2_Initialize 0070  
              __end_of_TMR4_LoadPeriodRegister 0ACA                          main@low_reading_count 00EC  
                               ??_INT_CallBack 0073                    __size_of_EXT_INT_Initialize 000C  
                               _OPTION_REGbits 0095                  ?_TMR4_DefaultInterruptHandler 0070  
                       __size_of_DAC_SetOutput 0005                           __size_of_setLEDColor 0017  
                  FLASH_WriteBlock@GIEBitValue 0028                ??_EUSART_SetOverrunErrorHandler 0075  
                            ??_battery_voltage 0078                                        ??_fputc 0020  
                    __end_of_SYSTEM_Initialize 0CC4                                        ??_putch 0074  
                                ?_setFrequency 0037                                     __pbssBANK1 00A0  
                                   __pbssBANK2 0120                                     __pbssBANK3 01A0  
                         __end_of_EUSART_Write 0B30                                ?_selectDecrease 0070  
                        _TMR4_InterruptHandler 00D8                                     __pmaintext 0464  
             __end_of_TMR0_SetInterruptHandler 0AEE                                        ?___lmul 0020  
                                   ??_TMR0_ISR 0070                                     ??_TMR1_ISR 0070  
                                   ??_TMR4_ISR 0072                                     __pintentry 0004  
                              ?_selectIncrease 0070                                 ___lmul@product 0073  
                             ?_TMR4_Initialize 0070                                        ?_printf 0035  
                    __size_of_FLASH_WriteBlock 006C                                        _OPA1CON 0511  
                                      _OPA2CON 0515                                        _LED_red 00B0  
                                      _SP1BRGH 019C                                        _SP1BRGL 019B  
                                      _INT_ISR 0ABB                             __size_of_vfpfcnvrt 007E  
                            _maxFrequencyIndex 00BA                                        _OSCSTAT 009A  
                                      _OSCTUNE 0098                                        _PWM3DCH 0618  
                                      _PWM4DCH 061B                                        _SLRCONA 030C  
                                      _SLRCONB 030D                                        _SLRCONC 030E  
                     ??_EUSART_SetErrorHandler 0075                                 ??_setFrequency 0039  
                              _maxCurrentIndex 00BC                               _FLASH_EraseBlock 0C1F  
                                _DAC_SetOutput 0AC0                                        ___aldiv 04FA  
                                      ___awdiv 0746                                __size_of___lmul 0034  
                                    ?_vfprintf 002D                                        __ptext1 0EAD  
                                      __ptext2 0C3B                                        __ptext3 0087  
                                      __ptext4 0F84                                        __ptext5 0608  
                                      __ptext6 0C1F                                        __ptext7 06E0  
                                      __ptext8 0AC5                                        __ptext9 03BD  
                              __size_of_printf 0012                 ??_TMR1_DefaultInterruptHandler 0070  
                     __end_of_LATCH_Initialize 0B3B                                        _initLED 07A6  
                                    _T1CONbits 0018                                        _ir_code 00B4  
                                   _lowBattery 0DB6                          _OSCILLATOR_Initialize 0B0C  
                                    _T2CONbits 001C              __size_of_TMR1_SetInterruptHandler 0006  
                             ___aldiv@dividend 002C                                      _T4CONbits 0417  
                     ??_PIN_MANAGER_Initialize 0073              __size_of_TMR4_SetInterruptHandler 0006  
                    ?_TMR1_SetInterruptHandler 0073                        _INT_SetInterruptHandler 0AE2  
                    ?_TMR4_SetInterruptHandler 0073                                _selectFrequency 0D60  
                                      _startUp 0EAD                     __size_of_SYSTEM_Initialize 0025  
                                      clrloop0 0B01                           end_of_initialization 0083  
               ??_TMR4_DefaultInterruptHandler 0071                                     _setCurrent 03BD  
        __end_of_EUSART_SetOverrunErrorHandler 0AE2         __size_of_EUSART_SetOverrunErrorHandler 0006  
                _EUSART_SetOverrunErrorHandler 0ADC                   __end_of_writePersistentState 0FE0  
                                    _LED_green 00AF                                        fputc@fp 0077  
                                      init_ram 0B06                                        initloop 0B07  
                         __end_of_INT_CallBack 0B54               __size_of_TMR4_LoadPeriodRegister 0005  
                            _EUSART_Initialize 0C5B                                 _frequencyIndex 00E4  
                            setCurrent@Vdac_mv 0045                                 ?_DAC_SetOutput 0070  
                               _frequencyValue 0140                  __end_ofmain@BATTERY_THRESHOLD 086C  
                           ?_EUSART_Initialize 0070                              __end_of_vfpfcnvrt 0608  
                             ___aldiv@quotient 0033                                     ??_vfprintf 0030  
                              setLEDColor@blue 0074                            ??_EUSART_Initialize 0075  
                             ??_WDT_Initialize 0073                       _TMR0_SetInterruptHandler 0AE8  
                              _selectSomething 0F29                        writePersistentState@buf 002E  
                      writePersistentState@idx 006F                  __size_of_selectFrequencyValue 0026  
                                    _TRISBbits 008D                                      _TRISCbits 008E  
                        __size_of_EUSART_Write 000A                       __size_of_OPA1_Initialize 0004  
              __size_of_EUSART_SetErrorHandler 0006                         __size_of_selectCurrent 0028  
                    __end_of_EUSART_Initialize 0C7D                                    _CCP1CONbits 0293  
                  __end_of_readPersistentState 0C5B                             _selectCurrentValue 0D37  
                            FLASH_WriteBlock@i 0029                       __size_of_OPA2_Initialize 0004  
                          ?_selectCurrentValue 0070                           __end_of_setFrequency 0746  
                               __end_of___lmul 0EAD                     _EUSART_DefaultErrorHandler 0000  
                                  vfpfcnvrt@ap 0026                                    vfpfcnvrt@fp 002C  
                              _battery_voltage 0E46                                  __pidataCOMMON 0003  
                                 _EUSART_Write 0B26                              __size_of_TMR0_ISR 0011  
                            __size_of_TMR1_ISR 0017                              __size_of_TMR4_ISR 000F  
                             _FLASH_WriteBlock 0608                         ?_OSCILLATOR_Initialize 0070  
                      __end_of_selectFrequency 0D8A                      ??_INT_SetInterruptHandler 0075  
                      __size_of_DAC_Initialize 0006                                    ?_lowBattery 0070  
                               __end_of_printf 0B98                   __p_HEF_persistent_state_text 0FE0  
                          start_initialization 004D                       __size_of_TMR0_Initialize 0012  
              __size_of_PIN_MANAGER_Initialize 0033                               ??_selectDecrease 0039  
                         ??_selectCurrentValue 0039                                    putch@txData 0074  
                                  ?_setCurrent 0039                                ??_DAC_SetOutput 0070  
                     __size_of_PIN_MANAGER_IOC 0001                   ?_INT_DefaultInterruptHandler 0070  
                             ??_selectIncrease 0039                 ?_EUSART_SetOverrunErrorHandler 0073  
                     __size_of_TMR1_Initialize 0018                                    vfprintf@fmt 002D  
                   _EUSART_FramingErrorHandler 00E2                        __end_of_selectSomething 0F84  
                                     ??___lmul 0073                         _EUSART_SetErrorHandler 0AD0  
                                  _CCPTMRSbits 029E                                  _selectCurrent 0D0F  
                                  __pdataBANK1 00BA                                    __pdataBANK2 0140  
                  FLASH_EraseBlock@GIEBitValue 0075                     __end_of_EXT_INT_Initialize 0B47  
                     __end_of_FLASH_EraseBlock 0C3B                                       ??_printf 0037  
                         _writePersistentState 0F84                                  ??_setLEDColor 0075  
                        writePersistentState@i 006E                                    __pbssCOMMON 0078  
                                    ___latbits 0001                       ??_process_remote_command 00E8  
                                     ?_INT_ISR 0070                                  __pcstackBANK0 0020  
                                __pcstackBANK1 00E8                       __size_of_TMR2_Initialize 0008  
                        __size_of_INT_CallBack 000D                                      _dac_value 00A8  
                      _TMR4_LoadPeriodRegister 0AC5                     __size_of_EUSART_Initialize 0022  
                                 _currentIndex 00E6                              ??_OPA1_Initialize 0073  
                                 _currentValue 00C0                          _TMR0_InterruptHandler 00DA  
                                    __pnvBANK1 00D4                                   _oneHzCounter 00B2  
                          __size_of_lowBattery 002C                         _PIN_MANAGER_Initialize 0E13  
                      __end_of_battery_voltage 0E79                  ??_INT_DefaultInterruptHandler 0070  
             __end_of_TMR1_SetInterruptHandler 0AF4                                       ?___aldiv 0028  
             __end_of_TMR4_SetInterruptHandler 0AFA                                 ?_selectCurrent 0070  
                                     ?___awdiv 0073                                       _DAC1CON0 0118  
                                     _DAC1CON1 0119                   ??_INTERRUPT_InterruptManager 0073  
                          __size_of_setCurrent 00A7                          ?_writePersistentState 0070  
                            ??_OPA2_Initialize 0073                              __size_of_vfprintf 0031  
                             ?_selectFrequency 0070                                   _INT_CallBack 0B47  
                                     _BAUD1CON 019F                                       ?_initLED 0070  
                            ?_LATCH_Initialize 0070                             ??_LATCH_Initialize 0073  
                     __size_of_TMR4_Initialize 0013                                       ?_startUp 0070  
                          __end_of_setLEDColor 0BED                                 __size_of_fputc 0040  
                                    _microamps 00AC                                 __size_of_putch 0006  
               FLASH_WriteBlock@blockStartAddr 0026           __end_ofmain@BATTERY_NUM_LOW_READINGS 086E  
                 main@BATTERY_NUM_LOW_READINGS 086C                                ___aldiv@divisor 0028  
                            ??_TMR0_Initialize 0075                                ___aldiv@counter 0031  
       EUSART_SetErrorHandler@interruptHandler 0073                                       _LATBbits 010D  
                                     _LATCbits 010E                                       _LED_blue 00AE  
                                    clear_ram0 0B00                                       _PIE1bits 0091  
                                     _PIE2bits 0092                              _eusartRxLastError 00B3  
                 _HEF_persistent_state_absaddr 0FE0                          __size_of_setFrequency 0066  
          __size_of_INTERRUPT_InterruptManager 0047                     ??_TMR0_SetInterruptHandler 0075  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 0075  
                                     _PIR2bits 0012                      FLASH_EraseBlock@startAddr 0073  
                             ?_selectSomething 0070                                 setLEDColor@red 0076  
                                     _TMR0_ISR 0B63              _EUSART_DefaultOverrunErrorHandler 0000  
                                     _TMR1_ISR 0BBF                                       _TMR4_ISR 0B54  
                            ??_PIN_MANAGER_IOC 0070                                      _vfpfcnvrt 058A  
                            ??_TMR1_Initialize 0075                                     _ADCON0bits 009D  
                               _DAC_Initialize 0ACA           __size_of_INT_DefaultInterruptHandler 006C  
              __size_of_process_remote_command 0336                               __size_of_INT_ISR 0005  
                    ??_TMR4_LoadPeriodRegister 0073                              ___lmul@multiplier 0020  
                                  _latchTester 00B1                                   _setFrequency 06E0  
                            ??_TMR2_Initialize 0073                   __end_of_HEF_persistent_state 1000  
                     __end_of_FLASH_WriteBlock 0674                   __end_of_selectFrequencyValue 0D0F  
                              ??_selectCurrent 0039                               ?_battery_voltage 0037  
                                   vfprintf@ap 002F                                     vfprintf@fp 0032  
                        main@BATTERY_THRESHOLD 086A                        ??_OSCILLATOR_Initialize 0073  
                          _EUSART_ErrorHandler 00DE                               __size_of___aldiv 0090  
                             __size_of___awdiv 0060                         ??_writePersistentState 002A  
                       __end_of_DAC_Initialize 0AD0                                     ?_vfpfcnvrt 0025  
                          setFrequency@PR4_val 003A                       _TMR1_SetInterruptHandler 0AEE  
                     _TMR4_SetInterruptHandler 0AF4                                   ??_lowBattery 0020  
                        _TMR1_InterruptHandler 00D4                                    _currentIsOn 00BF  
                                  _setLEDColor 0BD6                             setCurrent@DACValue 0047  
                             __size_of_initLED 0044                                       __ptext10 0E79  
                                     __ptext11 0746                                       __ptext20 0DE2  
                                     __ptext12 0F29                                       __ptext21 058A  
                                     __ptext13 0CC4                                       __ptext30 0C9F  
                                     __ptext22 0EE9                                       __ptext14 0CE9  
                                     __ptext31 0AB0                                       __ptext23 0AFA  
                                     __ptext15 0D60                                       __ptext40 0B0C  
                                     __ptext32 0B98                                       __ptext24 0B26  
                                     __ptext16 0C7D                                       __ptext41 0AB7  
                                     __ptext33 0AF4                                       __ptext25 0E46  
                                     __ptext17 0D37                                       __ptext50 0B30  
                                     __ptext42 0AB3                                       __ptext34 0B14  
                                     __ptext26 04FA                                       __ptext18 0D0F  
                                     __ptext43 0B3B                                       __ptext35 0BED  
                                     __ptext27 0DB6                                       __ptext19 0B86  
                                     __ptext60 0ABB                                       __ptext52 0B54  
                                     __ptext44 0AE2                                       __ptext36 0AEE  
                                     __ptext28 0BD6                                       __ptext61 0B47  
                                     __ptext53 0D8A                                       __ptext45 0C5B  
                                     __ptext37 0B74                                       __ptext29 07A6  
                                     __ptext62 0674                                       __ptext54 0AC0  
                                     __ptext46 0ADC                                       __ptext38 0AE8  
                                     __ptext55 0BBF                                       __ptext47 0AD6  
                                     __ptext39 0E13                                       __ptext56 0B1C  
                                     __ptext48 0AD0                                       __ptext57 0B63  
                                     __ptext49 0ACA                                       __ptext58 0002  
                                     __ptext59 0AAF                               __size_of_startUp 003C  
                                 ??_setCurrent 003D                                 _interfaceState 0078  
                            ??_TMR4_Initialize 0075                                  __size_of_main 0096  
         __end_of_TMR0_DefaultInterruptHandler 0003          __size_of_TMR0_DefaultInterruptHandler 0001  
                 _TMR0_DefaultInterruptHandler 0002                        ?_EUSART_SetErrorHandler 0073  
                       _process_remote_command 0087                                     _RC1STAbits 019D  
                           __end_of_lowBattery 0DE2  EUSART_SetOverrunErrorHandler@interruptHandler 0073  
                                     int$flags 007E                   __size_of_readPersistentState 0020  
                                     _vfprintf 0DE2             __end_of_INTERRUPT_InterruptManager 004B  
                   _INTERRUPT_InterruptManager 0004                                      printf@fmt 0035  
        __end_of_EUSART_SetFramingErrorHandler 0ADC         __size_of_EUSART_SetFramingErrorHandler 0006  
                _EUSART_SetFramingErrorHandler 0AD6                                ?_DAC_Initialize 0070  
                            ?_FLASH_EraseBlock 0073                             __end_of_setCurrent 0464  
                           ??_FLASH_EraseBlock 0075                                     _INTCONbits 000B  
              INT_DefaultInterruptHandler@time 0072                                    _PWM3DCLbits 0617  
                              _OPA1_Initialize 0AB3                                    _PWM4DCLbits 061A  
                                   _FVRCONbits 0117                           _INT_InterruptHandler 00DC  
                                  _PWM3CONbits 0619                                    _PWM4CONbits 061C  
                           _EXT_INT_Initialize 0B3B                        __size_of_WDT_Initialize 0003  
                  __size_of_selectCurrentValue 0029                                       intlevel1 0000  
                                   _PMCON1bits 0195                        ?_PIN_MANAGER_Initialize 0070  
                   process_remote_command@code 00EA                 __end_of_EUSART_SetErrorHandler 0AD6  
                          ?_EXT_INT_Initialize 0070                          __end_of_DAC_SetOutput 0AC5  
                              _OPA2_Initialize 0AB7                  ?_TMR0_DefaultInterruptHandler 0070  
                                     printf@ap 0038  EUSART_SetFramingErrorHandler@interruptHandler 0073  
                     ?_INT_SetInterruptHandler 0073                                    ??_vfpfcnvrt 0027  
                                     startUp@i 0022                                  __pstringtext1 086A  
                                __pstringtext2 086C                                  __pstringtext3 07EA  
                                __pstringtext4 0803                                  __pstringtext5 081A  
                                __pstringtext6 082F                                  __pstringtext7 0843  
                                __pstringtext8 0857                                  __pstringtext9 0000  
                         ??_EXT_INT_Initialize 0075                                     _OPTION_REG 0095  
                         _HEF_persistent_state 0FE0                               setLEDColor@green 0073  
                         _selectFrequencyValue 0CE9                                _TMR0_Initialize 0B74  
                          setCurrent@microamps 0039                                   ___aldiv@sign 0032  
                                   _TX1STAbits 019E                       setFrequency@frequency_hz 0037  
                           EUSART_Write@txData 0073                 __end_of_PIN_MANAGER_Initialize 0E46  
                              _PIN_MANAGER_IOC 0AAF                      __size_of_LATCH_Initialize 000B  
                              _TMR1_Initialize 0BED                        __size_of_selectDecrease 0022  
             TMR4_LoadPeriodRegister@periodVal 0073  
