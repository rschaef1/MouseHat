

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Fri Apr 22 16:26:36 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16LF1708
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=2,noexec
     7                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     9                           	psect	_HEF_persistent_state_text,global,class=STRCODE,delta=2,noexec
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    15                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    16                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    17                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    20                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    21                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    22                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    23                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    24                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,noexec
    25                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    26                           	psect	inittext,global,class=CODE,delta=2
    27                           	psect	clrtext,global,class=CODE,delta=2
    28                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    29                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    30                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    31                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    32                           	psect	text1,local,class=CODE,merge=1,delta=2
    33                           	psect	text2,local,class=CODE,merge=1,delta=2
    34                           	psect	text3,local,class=CODE,merge=1,delta=2
    35                           	psect	text4,local,class=CODE,merge=1,delta=2
    36                           	psect	text5,local,class=CODE,merge=1,delta=2
    37                           	psect	text6,local,class=CODE,merge=1,delta=2
    38                           	psect	text7,local,class=CODE,merge=1,delta=2
    39                           	psect	text8,local,class=CODE,merge=1,delta=2
    40                           	psect	text9,local,class=CODE,merge=1,delta=2
    41                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text12,local,class=CODE,merge=1,delta=2
    44                           	psect	text13,local,class=CODE,merge=1,delta=2
    45                           	psect	text14,local,class=CODE,merge=1,delta=2
    46                           	psect	text15,local,class=CODE,merge=1,delta=2
    47                           	psect	text16,local,class=CODE,merge=1,delta=2
    48                           	psect	text17,local,class=CODE,merge=1,delta=2
    49                           	psect	text18,local,class=CODE,merge=1,delta=2
    50                           	psect	text19,local,class=CODE,merge=1,delta=2,group=3
    51                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text22,local,class=CODE,merge=1,delta=2,group=3
    54                           	psect	text23,local,class=CODE,merge=1,delta=2
    55                           	psect	text24,local,class=CODE,merge=1,delta=2
    56                           	psect	text25,local,class=CODE,merge=1,delta=2
    57                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text27,local,class=CODE,merge=1,delta=2
    59                           	psect	text28,local,class=CODE,merge=1,delta=2
    60                           	psect	text29,local,class=CODE,merge=1,delta=2
    61                           	psect	text30,local,class=CODE,merge=1,delta=2
    62                           	psect	text31,local,class=CODE,merge=1,delta=2
    63                           	psect	text32,local,class=CODE,merge=1,delta=2
    64                           	psect	text33,local,class=CODE,merge=1,delta=2
    65                           	psect	text34,local,class=CODE,merge=1,delta=2
    66                           	psect	text35,local,class=CODE,merge=1,delta=2
    67                           	psect	text36,local,class=CODE,merge=1,delta=2
    68                           	psect	text37,local,class=CODE,merge=1,delta=2
    69                           	psect	text38,local,class=CODE,merge=1,delta=2
    70                           	psect	text39,local,class=CODE,merge=1,delta=2
    71                           	psect	text40,local,class=CODE,merge=1,delta=2
    72                           	psect	text41,local,class=CODE,merge=1,delta=2
    73                           	psect	text42,local,class=CODE,merge=1,delta=2
    74                           	psect	text43,local,class=CODE,merge=1,delta=2
    75                           	psect	text44,local,class=CODE,merge=1,delta=2
    76                           	psect	text45,local,class=CODE,merge=1,delta=2
    77                           	psect	text46,local,class=CODE,merge=1,delta=2
    78                           	psect	text47,local,class=CODE,merge=1,delta=2
    79                           	psect	text48,local,class=CODE,merge=1,delta=2
    80                           	psect	text49,local,class=CODE,merge=1,delta=2
    81                           	psect	text50,local,class=CODE,merge=1,delta=2
    82                           	psect	intentry,global,class=CODE,delta=2
    83                           	psect	text52,local,class=CODE,merge=1,delta=2
    84                           	psect	text53,local,class=CODE,merge=1,delta=2
    85                           	psect	text54,local,class=CODE,merge=1,delta=2
    86                           	psect	text55,local,class=CODE,merge=1,delta=2
    87                           	psect	text56,local,class=CODE,merge=1,delta=2
    88                           	psect	text57,local,class=CODE,merge=1,delta=2
    89                           	psect	text58,local,class=CODE,merge=1,delta=2
    90                           	psect	text59,local,class=CODE,merge=1,delta=2
    91                           	psect	text60,local,class=CODE,merge=1,delta=2
    92                           	psect	text61,local,class=CODE,merge=1,delta=2
    93                           	psect	text62,local,class=CODE,merge=1,delta=2
    94                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    95                           	dabs	1,0x7E,2
    96  0000                     
    97                           ; Version 2.32
    98                           ; Generated 02/02/2021 GMT
    99                           ; 
   100                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   101                           ; All rights reserved.
   102                           ; 
   103                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   104                           ; 
   105                           ; Redistribution and use in source and binary forms, with or without modification, are
   106                           ; permitted provided that the following conditions are met:
   107                           ; 
   108                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   109                           ;        conditions and the following disclaimer.
   110                           ; 
   111                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   112                           ;        of conditions and the following disclaimer in the documentation and/or other
   113                           ;        materials provided with the distribution. Publication is not required when
   114                           ;        this file is used in an embedded application.
   115                           ; 
   116                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   117                           ;        software without specific prior written permission.
   118                           ; 
   119                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   120                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   121                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   122                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   123                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   124                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   125                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   126                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   127                           ; 
   128                           ; 
   129                           ; Code-generator required, PIC16LF1708 Definitions
   130                           ; 
   131                           ; SFR Addresses
   132  0000                     	;# 
   133  0001                     	;# 
   134  0002                     	;# 
   135  0003                     	;# 
   136  0004                     	;# 
   137  0005                     	;# 
   138  0006                     	;# 
   139  0007                     	;# 
   140  0008                     	;# 
   141  0009                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000D                     	;# 
   146  000E                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0013                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0016                     	;# 
   153  0017                     	;# 
   154  0018                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001B                     	;# 
   158  001C                     	;# 
   159  008C                     	;# 
   160  008D                     	;# 
   161  008E                     	;# 
   162  0091                     	;# 
   163  0092                     	;# 
   164  0093                     	;# 
   165  0095                     	;# 
   166  0096                     	;# 
   167  0097                     	;# 
   168  0098                     	;# 
   169  0099                     	;# 
   170  009A                     	;# 
   171  009B                     	;# 
   172  009B                     	;# 
   173  009C                     	;# 
   174  009D                     	;# 
   175  009E                     	;# 
   176  009F                     	;# 
   177  010C                     	;# 
   178  010D                     	;# 
   179  010E                     	;# 
   180  0111                     	;# 
   181  0112                     	;# 
   182  0113                     	;# 
   183  0114                     	;# 
   184  0115                     	;# 
   185  0116                     	;# 
   186  0117                     	;# 
   187  0118                     	;# 
   188  0119                     	;# 
   189  011C                     	;# 
   190  018C                     	;# 
   191  018D                     	;# 
   192  018E                     	;# 
   193  0191                     	;# 
   194  0191                     	;# 
   195  0192                     	;# 
   196  0193                     	;# 
   197  0193                     	;# 
   198  0194                     	;# 
   199  0195                     	;# 
   200  0196                     	;# 
   201  0199                     	;# 
   202  0199                     	;# 
   203  0199                     	;# 
   204  019A                     	;# 
   205  019A                     	;# 
   206  019A                     	;# 
   207  019B                     	;# 
   208  019B                     	;# 
   209  019B                     	;# 
   210  019B                     	;# 
   211  019B                     	;# 
   212  019C                     	;# 
   213  019C                     	;# 
   214  019C                     	;# 
   215  019D                     	;# 
   216  019D                     	;# 
   217  019D                     	;# 
   218  019E                     	;# 
   219  019E                     	;# 
   220  019E                     	;# 
   221  019F                     	;# 
   222  019F                     	;# 
   223  019F                     	;# 
   224  019F                     	;# 
   225  019F                     	;# 
   226  020C                     	;# 
   227  020D                     	;# 
   228  020E                     	;# 
   229  0211                     	;# 
   230  0211                     	;# 
   231  0212                     	;# 
   232  0212                     	;# 
   233  0213                     	;# 
   234  0213                     	;# 
   235  0214                     	;# 
   236  0214                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0216                     	;# 
   242  0216                     	;# 
   243  0217                     	;# 
   244  0217                     	;# 
   245  028C                     	;# 
   246  028D                     	;# 
   247  028E                     	;# 
   248  0291                     	;# 
   249  0291                     	;# 
   250  0292                     	;# 
   251  0293                     	;# 
   252  0293                     	;# 
   253  0298                     	;# 
   254  0298                     	;# 
   255  0299                     	;# 
   256  029A                     	;# 
   257  029A                     	;# 
   258  029E                     	;# 
   259  030C                     	;# 
   260  030D                     	;# 
   261  030E                     	;# 
   262  038C                     	;# 
   263  038D                     	;# 
   264  038E                     	;# 
   265  0391                     	;# 
   266  0392                     	;# 
   267  0393                     	;# 
   268  0394                     	;# 
   269  0395                     	;# 
   270  0396                     	;# 
   271  0397                     	;# 
   272  0398                     	;# 
   273  0399                     	;# 
   274  0415                     	;# 
   275  0416                     	;# 
   276  0417                     	;# 
   277  041C                     	;# 
   278  041D                     	;# 
   279  041E                     	;# 
   280  0511                     	;# 
   281  0515                     	;# 
   282  0617                     	;# 
   283  0618                     	;# 
   284  0619                     	;# 
   285  0619                     	;# 
   286  061A                     	;# 
   287  061B                     	;# 
   288  061C                     	;# 
   289  061C                     	;# 
   290  0691                     	;# 
   291  0692                     	;# 
   292  0693                     	;# 
   293  0694                     	;# 
   294  0695                     	;# 
   295  0696                     	;# 
   296  0697                     	;# 
   297  0698                     	;# 
   298  0699                     	;# 
   299  069A                     	;# 
   300  069B                     	;# 
   301  069C                     	;# 
   302  069D                     	;# 
   303  069E                     	;# 
   304  069F                     	;# 
   305  0E0F                     	;# 
   306  0E10                     	;# 
   307  0E11                     	;# 
   308  0E12                     	;# 
   309  0E13                     	;# 
   310  0E14                     	;# 
   311  0E15                     	;# 
   312  0E17                     	;# 
   313  0E20                     	;# 
   314  0E21                     	;# 
   315  0E22                     	;# 
   316  0E24                     	;# 
   317  0E25                     	;# 
   318  0E28                     	;# 
   319  0E29                     	;# 
   320  0E2A                     	;# 
   321  0E2B                     	;# 
   322  0E90                     	;# 
   323  0E91                     	;# 
   324  0E92                     	;# 
   325  0E94                     	;# 
   326  0E95                     	;# 
   327  0E9C                     	;# 
   328  0E9D                     	;# 
   329  0E9E                     	;# 
   330  0E9F                     	;# 
   331  0EA0                     	;# 
   332  0EA1                     	;# 
   333  0EA2                     	;# 
   334  0EA3                     	;# 
   335  0EA4                     	;# 
   336  0EA5                     	;# 
   337  0EA6                     	;# 
   338  0EA7                     	;# 
   339  0F0F                     	;# 
   340  0F10                     	;# 
   341  0F11                     	;# 
   342  0F12                     	;# 
   343  0F13                     	;# 
   344  0F14                     	;# 
   345  0F15                     	;# 
   346  0F16                     	;# 
   347  0F17                     	;# 
   348  0F18                     	;# 
   349  0F19                     	;# 
   350  0F1A                     	;# 
   351  0F1B                     	;# 
   352  0F1C                     	;# 
   353  0F1D                     	;# 
   354  0F1E                     	;# 
   355  0F1F                     	;# 
   356  0F20                     	;# 
   357  0F21                     	;# 
   358  0F22                     	;# 
   359  0F23                     	;# 
   360  0F24                     	;# 
   361  0F25                     	;# 
   362  0F26                     	;# 
   363  0F27                     	;# 
   364  0F28                     	;# 
   365  0F29                     	;# 
   366  0F2A                     	;# 
   367  0F2B                     	;# 
   368  0F2C                     	;# 
   369  0F2D                     	;# 
   370  0FE4                     	;# 
   371  0FE5                     	;# 
   372  0FE6                     	;# 
   373  0FE7                     	;# 
   374  0FE8                     	;# 
   375  0FE9                     	;# 
   376  0FEA                     	;# 
   377  0FEB                     	;# 
   378  0FED                     	;# 
   379  0FEE                     	;# 
   380  0FEF                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  0011                     	;# 
   397  0012                     	;# 
   398  0013                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0016                     	;# 
   402  0017                     	;# 
   403  0018                     	;# 
   404  0019                     	;# 
   405  001A                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  008C                     	;# 
   409  008D                     	;# 
   410  008E                     	;# 
   411  0091                     	;# 
   412  0092                     	;# 
   413  0093                     	;# 
   414  0095                     	;# 
   415  0096                     	;# 
   416  0097                     	;# 
   417  0098                     	;# 
   418  0099                     	;# 
   419  009A                     	;# 
   420  009B                     	;# 
   421  009B                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009E                     	;# 
   425  009F                     	;# 
   426  010C                     	;# 
   427  010D                     	;# 
   428  010E                     	;# 
   429  0111                     	;# 
   430  0112                     	;# 
   431  0113                     	;# 
   432  0114                     	;# 
   433  0115                     	;# 
   434  0116                     	;# 
   435  0117                     	;# 
   436  0118                     	;# 
   437  0119                     	;# 
   438  011C                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  018E                     	;# 
   442  0191                     	;# 
   443  0191                     	;# 
   444  0192                     	;# 
   445  0193                     	;# 
   446  0193                     	;# 
   447  0194                     	;# 
   448  0195                     	;# 
   449  0196                     	;# 
   450  0199                     	;# 
   451  0199                     	;# 
   452  0199                     	;# 
   453  019A                     	;# 
   454  019A                     	;# 
   455  019A                     	;# 
   456  019B                     	;# 
   457  019B                     	;# 
   458  019B                     	;# 
   459  019B                     	;# 
   460  019B                     	;# 
   461  019C                     	;# 
   462  019C                     	;# 
   463  019C                     	;# 
   464  019D                     	;# 
   465  019D                     	;# 
   466  019D                     	;# 
   467  019E                     	;# 
   468  019E                     	;# 
   469  019E                     	;# 
   470  019F                     	;# 
   471  019F                     	;# 
   472  019F                     	;# 
   473  019F                     	;# 
   474  019F                     	;# 
   475  020C                     	;# 
   476  020D                     	;# 
   477  020E                     	;# 
   478  0211                     	;# 
   479  0211                     	;# 
   480  0212                     	;# 
   481  0212                     	;# 
   482  0213                     	;# 
   483  0213                     	;# 
   484  0214                     	;# 
   485  0214                     	;# 
   486  0215                     	;# 
   487  0215                     	;# 
   488  0215                     	;# 
   489  0215                     	;# 
   490  0216                     	;# 
   491  0216                     	;# 
   492  0217                     	;# 
   493  0217                     	;# 
   494  028C                     	;# 
   495  028D                     	;# 
   496  028E                     	;# 
   497  0291                     	;# 
   498  0291                     	;# 
   499  0292                     	;# 
   500  0293                     	;# 
   501  0293                     	;# 
   502  0298                     	;# 
   503  0298                     	;# 
   504  0299                     	;# 
   505  029A                     	;# 
   506  029A                     	;# 
   507  029E                     	;# 
   508  030C                     	;# 
   509  030D                     	;# 
   510  030E                     	;# 
   511  038C                     	;# 
   512  038D                     	;# 
   513  038E                     	;# 
   514  0391                     	;# 
   515  0392                     	;# 
   516  0393                     	;# 
   517  0394                     	;# 
   518  0395                     	;# 
   519  0396                     	;# 
   520  0397                     	;# 
   521  0398                     	;# 
   522  0399                     	;# 
   523  0415                     	;# 
   524  0416                     	;# 
   525  0417                     	;# 
   526  041C                     	;# 
   527  041D                     	;# 
   528  041E                     	;# 
   529  0511                     	;# 
   530  0515                     	;# 
   531  0617                     	;# 
   532  0618                     	;# 
   533  0619                     	;# 
   534  0619                     	;# 
   535  061A                     	;# 
   536  061B                     	;# 
   537  061C                     	;# 
   538  061C                     	;# 
   539  0691                     	;# 
   540  0692                     	;# 
   541  0693                     	;# 
   542  0694                     	;# 
   543  0695                     	;# 
   544  0696                     	;# 
   545  0697                     	;# 
   546  0698                     	;# 
   547  0699                     	;# 
   548  069A                     	;# 
   549  069B                     	;# 
   550  069C                     	;# 
   551  069D                     	;# 
   552  069E                     	;# 
   553  069F                     	;# 
   554  0E0F                     	;# 
   555  0E10                     	;# 
   556  0E11                     	;# 
   557  0E12                     	;# 
   558  0E13                     	;# 
   559  0E14                     	;# 
   560  0E15                     	;# 
   561  0E17                     	;# 
   562  0E20                     	;# 
   563  0E21                     	;# 
   564  0E22                     	;# 
   565  0E24                     	;# 
   566  0E25                     	;# 
   567  0E28                     	;# 
   568  0E29                     	;# 
   569  0E2A                     	;# 
   570  0E2B                     	;# 
   571  0E90                     	;# 
   572  0E91                     	;# 
   573  0E92                     	;# 
   574  0E94                     	;# 
   575  0E95                     	;# 
   576  0E9C                     	;# 
   577  0E9D                     	;# 
   578  0E9E                     	;# 
   579  0E9F                     	;# 
   580  0EA0                     	;# 
   581  0EA1                     	;# 
   582  0EA2                     	;# 
   583  0EA3                     	;# 
   584  0EA4                     	;# 
   585  0EA5                     	;# 
   586  0EA6                     	;# 
   587  0EA7                     	;# 
   588  0F0F                     	;# 
   589  0F10                     	;# 
   590  0F11                     	;# 
   591  0F12                     	;# 
   592  0F13                     	;# 
   593  0F14                     	;# 
   594  0F15                     	;# 
   595  0F16                     	;# 
   596  0F17                     	;# 
   597  0F18                     	;# 
   598  0F19                     	;# 
   599  0F1A                     	;# 
   600  0F1B                     	;# 
   601  0F1C                     	;# 
   602  0F1D                     	;# 
   603  0F1E                     	;# 
   604  0F1F                     	;# 
   605  0F20                     	;# 
   606  0F21                     	;# 
   607  0F22                     	;# 
   608  0F23                     	;# 
   609  0F24                     	;# 
   610  0F25                     	;# 
   611  0F26                     	;# 
   612  0F27                     	;# 
   613  0F28                     	;# 
   614  0F29                     	;# 
   615  0F2A                     	;# 
   616  0F2B                     	;# 
   617  0F2C                     	;# 
   618  0F2D                     	;# 
   619  0FE4                     	;# 
   620  0FE5                     	;# 
   621  0FE6                     	;# 
   622  0FE7                     	;# 
   623  0FE8                     	;# 
   624  0FE9                     	;# 
   625  0FEA                     	;# 
   626  0FEB                     	;# 
   627  0FED                     	;# 
   628  0FEE                     	;# 
   629  0FEF                     	;# 
   630  0000                     	;# 
   631  0001                     	;# 
   632  0002                     	;# 
   633  0003                     	;# 
   634  0004                     	;# 
   635  0005                     	;# 
   636  0006                     	;# 
   637  0007                     	;# 
   638  0008                     	;# 
   639  0009                     	;# 
   640  000A                     	;# 
   641  000B                     	;# 
   642  000C                     	;# 
   643  000D                     	;# 
   644  000E                     	;# 
   645  0011                     	;# 
   646  0012                     	;# 
   647  0013                     	;# 
   648  0015                     	;# 
   649  0016                     	;# 
   650  0016                     	;# 
   651  0017                     	;# 
   652  0018                     	;# 
   653  0019                     	;# 
   654  001A                     	;# 
   655  001B                     	;# 
   656  001C                     	;# 
   657  008C                     	;# 
   658  008D                     	;# 
   659  008E                     	;# 
   660  0091                     	;# 
   661  0092                     	;# 
   662  0093                     	;# 
   663  0095                     	;# 
   664  0096                     	;# 
   665  0097                     	;# 
   666  0098                     	;# 
   667  0099                     	;# 
   668  009A                     	;# 
   669  009B                     	;# 
   670  009B                     	;# 
   671  009C                     	;# 
   672  009D                     	;# 
   673  009E                     	;# 
   674  009F                     	;# 
   675  010C                     	;# 
   676  010D                     	;# 
   677  010E                     	;# 
   678  0111                     	;# 
   679  0112                     	;# 
   680  0113                     	;# 
   681  0114                     	;# 
   682  0115                     	;# 
   683  0116                     	;# 
   684  0117                     	;# 
   685  0118                     	;# 
   686  0119                     	;# 
   687  011C                     	;# 
   688  018C                     	;# 
   689  018D                     	;# 
   690  018E                     	;# 
   691  0191                     	;# 
   692  0191                     	;# 
   693  0192                     	;# 
   694  0193                     	;# 
   695  0193                     	;# 
   696  0194                     	;# 
   697  0195                     	;# 
   698  0196                     	;# 
   699  0199                     	;# 
   700  0199                     	;# 
   701  0199                     	;# 
   702  019A                     	;# 
   703  019A                     	;# 
   704  019A                     	;# 
   705  019B                     	;# 
   706  019B                     	;# 
   707  019B                     	;# 
   708  019B                     	;# 
   709  019B                     	;# 
   710  019C                     	;# 
   711  019C                     	;# 
   712  019C                     	;# 
   713  019D                     	;# 
   714  019D                     	;# 
   715  019D                     	;# 
   716  019E                     	;# 
   717  019E                     	;# 
   718  019E                     	;# 
   719  019F                     	;# 
   720  019F                     	;# 
   721  019F                     	;# 
   722  019F                     	;# 
   723  019F                     	;# 
   724  020C                     	;# 
   725  020D                     	;# 
   726  020E                     	;# 
   727  0211                     	;# 
   728  0211                     	;# 
   729  0212                     	;# 
   730  0212                     	;# 
   731  0213                     	;# 
   732  0213                     	;# 
   733  0214                     	;# 
   734  0214                     	;# 
   735  0215                     	;# 
   736  0215                     	;# 
   737  0215                     	;# 
   738  0215                     	;# 
   739  0216                     	;# 
   740  0216                     	;# 
   741  0217                     	;# 
   742  0217                     	;# 
   743  028C                     	;# 
   744  028D                     	;# 
   745  028E                     	;# 
   746  0291                     	;# 
   747  0291                     	;# 
   748  0292                     	;# 
   749  0293                     	;# 
   750  0293                     	;# 
   751  0298                     	;# 
   752  0298                     	;# 
   753  0299                     	;# 
   754  029A                     	;# 
   755  029A                     	;# 
   756  029E                     	;# 
   757  030C                     	;# 
   758  030D                     	;# 
   759  030E                     	;# 
   760  038C                     	;# 
   761  038D                     	;# 
   762  038E                     	;# 
   763  0391                     	;# 
   764  0392                     	;# 
   765  0393                     	;# 
   766  0394                     	;# 
   767  0395                     	;# 
   768  0396                     	;# 
   769  0397                     	;# 
   770  0398                     	;# 
   771  0399                     	;# 
   772  0415                     	;# 
   773  0416                     	;# 
   774  0417                     	;# 
   775  041C                     	;# 
   776  041D                     	;# 
   777  041E                     	;# 
   778  0511                     	;# 
   779  0515                     	;# 
   780  0617                     	;# 
   781  0618                     	;# 
   782  0619                     	;# 
   783  0619                     	;# 
   784  061A                     	;# 
   785  061B                     	;# 
   786  061C                     	;# 
   787  061C                     	;# 
   788  0691                     	;# 
   789  0692                     	;# 
   790  0693                     	;# 
   791  0694                     	;# 
   792  0695                     	;# 
   793  0696                     	;# 
   794  0697                     	;# 
   795  0698                     	;# 
   796  0699                     	;# 
   797  069A                     	;# 
   798  069B                     	;# 
   799  069C                     	;# 
   800  069D                     	;# 
   801  069E                     	;# 
   802  069F                     	;# 
   803  0E0F                     	;# 
   804  0E10                     	;# 
   805  0E11                     	;# 
   806  0E12                     	;# 
   807  0E13                     	;# 
   808  0E14                     	;# 
   809  0E15                     	;# 
   810  0E17                     	;# 
   811  0E20                     	;# 
   812  0E21                     	;# 
   813  0E22                     	;# 
   814  0E24                     	;# 
   815  0E25                     	;# 
   816  0E28                     	;# 
   817  0E29                     	;# 
   818  0E2A                     	;# 
   819  0E2B                     	;# 
   820  0E90                     	;# 
   821  0E91                     	;# 
   822  0E92                     	;# 
   823  0E94                     	;# 
   824  0E95                     	;# 
   825  0E9C                     	;# 
   826  0E9D                     	;# 
   827  0E9E                     	;# 
   828  0E9F                     	;# 
   829  0EA0                     	;# 
   830  0EA1                     	;# 
   831  0EA2                     	;# 
   832  0EA3                     	;# 
   833  0EA4                     	;# 
   834  0EA5                     	;# 
   835  0EA6                     	;# 
   836  0EA7                     	;# 
   837  0F0F                     	;# 
   838  0F10                     	;# 
   839  0F11                     	;# 
   840  0F12                     	;# 
   841  0F13                     	;# 
   842  0F14                     	;# 
   843  0F15                     	;# 
   844  0F16                     	;# 
   845  0F17                     	;# 
   846  0F18                     	;# 
   847  0F19                     	;# 
   848  0F1A                     	;# 
   849  0F1B                     	;# 
   850  0F1C                     	;# 
   851  0F1D                     	;# 
   852  0F1E                     	;# 
   853  0F1F                     	;# 
   854  0F20                     	;# 
   855  0F21                     	;# 
   856  0F22                     	;# 
   857  0F23                     	;# 
   858  0F24                     	;# 
   859  0F25                     	;# 
   860  0F26                     	;# 
   861  0F27                     	;# 
   862  0F28                     	;# 
   863  0F29                     	;# 
   864  0F2A                     	;# 
   865  0F2B                     	;# 
   866  0F2C                     	;# 
   867  0F2D                     	;# 
   868  0FE4                     	;# 
   869  0FE5                     	;# 
   870  0FE6                     	;# 
   871  0FE7                     	;# 
   872  0FE8                     	;# 
   873  0FE9                     	;# 
   874  0FEA                     	;# 
   875  0FEB                     	;# 
   876  0FED                     	;# 
   877  0FEE                     	;# 
   878  0FEF                     	;# 
   879  0000                     	;# 
   880  0001                     	;# 
   881  0002                     	;# 
   882  0003                     	;# 
   883  0004                     	;# 
   884  0005                     	;# 
   885  0006                     	;# 
   886  0007                     	;# 
   887  0008                     	;# 
   888  0009                     	;# 
   889  000A                     	;# 
   890  000B                     	;# 
   891  000C                     	;# 
   892  000D                     	;# 
   893  000E                     	;# 
   894  0011                     	;# 
   895  0012                     	;# 
   896  0013                     	;# 
   897  0015                     	;# 
   898  0016                     	;# 
   899  0016                     	;# 
   900  0017                     	;# 
   901  0018                     	;# 
   902  0019                     	;# 
   903  001A                     	;# 
   904  001B                     	;# 
   905  001C                     	;# 
   906  008C                     	;# 
   907  008D                     	;# 
   908  008E                     	;# 
   909  0091                     	;# 
   910  0092                     	;# 
   911  0093                     	;# 
   912  0095                     	;# 
   913  0096                     	;# 
   914  0097                     	;# 
   915  0098                     	;# 
   916  0099                     	;# 
   917  009A                     	;# 
   918  009B                     	;# 
   919  009B                     	;# 
   920  009C                     	;# 
   921  009D                     	;# 
   922  009E                     	;# 
   923  009F                     	;# 
   924  010C                     	;# 
   925  010D                     	;# 
   926  010E                     	;# 
   927  0111                     	;# 
   928  0112                     	;# 
   929  0113                     	;# 
   930  0114                     	;# 
   931  0115                     	;# 
   932  0116                     	;# 
   933  0117                     	;# 
   934  0118                     	;# 
   935  0119                     	;# 
   936  011C                     	;# 
   937  018C                     	;# 
   938  018D                     	;# 
   939  018E                     	;# 
   940  0191                     	;# 
   941  0191                     	;# 
   942  0192                     	;# 
   943  0193                     	;# 
   944  0193                     	;# 
   945  0194                     	;# 
   946  0195                     	;# 
   947  0196                     	;# 
   948  0199                     	;# 
   949  0199                     	;# 
   950  0199                     	;# 
   951  019A                     	;# 
   952  019A                     	;# 
   953  019A                     	;# 
   954  019B                     	;# 
   955  019B                     	;# 
   956  019B                     	;# 
   957  019B                     	;# 
   958  019B                     	;# 
   959  019C                     	;# 
   960  019C                     	;# 
   961  019C                     	;# 
   962  019D                     	;# 
   963  019D                     	;# 
   964  019D                     	;# 
   965  019E                     	;# 
   966  019E                     	;# 
   967  019E                     	;# 
   968  019F                     	;# 
   969  019F                     	;# 
   970  019F                     	;# 
   971  019F                     	;# 
   972  019F                     	;# 
   973  020C                     	;# 
   974  020D                     	;# 
   975  020E                     	;# 
   976  0211                     	;# 
   977  0211                     	;# 
   978  0212                     	;# 
   979  0212                     	;# 
   980  0213                     	;# 
   981  0213                     	;# 
   982  0214                     	;# 
   983  0214                     	;# 
   984  0215                     	;# 
   985  0215                     	;# 
   986  0215                     	;# 
   987  0215                     	;# 
   988  0216                     	;# 
   989  0216                     	;# 
   990  0217                     	;# 
   991  0217                     	;# 
   992  028C                     	;# 
   993  028D                     	;# 
   994  028E                     	;# 
   995  0291                     	;# 
   996  0291                     	;# 
   997  0292                     	;# 
   998  0293                     	;# 
   999  0293                     	;# 
  1000  0298                     	;# 
  1001  0298                     	;# 
  1002  0299                     	;# 
  1003  029A                     	;# 
  1004  029A                     	;# 
  1005  029E                     	;# 
  1006  030C                     	;# 
  1007  030D                     	;# 
  1008  030E                     	;# 
  1009  038C                     	;# 
  1010  038D                     	;# 
  1011  038E                     	;# 
  1012  0391                     	;# 
  1013  0392                     	;# 
  1014  0393                     	;# 
  1015  0394                     	;# 
  1016  0395                     	;# 
  1017  0396                     	;# 
  1018  0397                     	;# 
  1019  0398                     	;# 
  1020  0399                     	;# 
  1021  0415                     	;# 
  1022  0416                     	;# 
  1023  0417                     	;# 
  1024  041C                     	;# 
  1025  041D                     	;# 
  1026  041E                     	;# 
  1027  0511                     	;# 
  1028  0515                     	;# 
  1029  0617                     	;# 
  1030  0618                     	;# 
  1031  0619                     	;# 
  1032  0619                     	;# 
  1033  061A                     	;# 
  1034  061B                     	;# 
  1035  061C                     	;# 
  1036  061C                     	;# 
  1037  0691                     	;# 
  1038  0692                     	;# 
  1039  0693                     	;# 
  1040  0694                     	;# 
  1041  0695                     	;# 
  1042  0696                     	;# 
  1043  0697                     	;# 
  1044  0698                     	;# 
  1045  0699                     	;# 
  1046  069A                     	;# 
  1047  069B                     	;# 
  1048  069C                     	;# 
  1049  069D                     	;# 
  1050  069E                     	;# 
  1051  069F                     	;# 
  1052  0E0F                     	;# 
  1053  0E10                     	;# 
  1054  0E11                     	;# 
  1055  0E12                     	;# 
  1056  0E13                     	;# 
  1057  0E14                     	;# 
  1058  0E15                     	;# 
  1059  0E17                     	;# 
  1060  0E20                     	;# 
  1061  0E21                     	;# 
  1062  0E22                     	;# 
  1063  0E24                     	;# 
  1064  0E25                     	;# 
  1065  0E28                     	;# 
  1066  0E29                     	;# 
  1067  0E2A                     	;# 
  1068  0E2B                     	;# 
  1069  0E90                     	;# 
  1070  0E91                     	;# 
  1071  0E92                     	;# 
  1072  0E94                     	;# 
  1073  0E95                     	;# 
  1074  0E9C                     	;# 
  1075  0E9D                     	;# 
  1076  0E9E                     	;# 
  1077  0E9F                     	;# 
  1078  0EA0                     	;# 
  1079  0EA1                     	;# 
  1080  0EA2                     	;# 
  1081  0EA3                     	;# 
  1082  0EA4                     	;# 
  1083  0EA5                     	;# 
  1084  0EA6                     	;# 
  1085  0EA7                     	;# 
  1086  0F0F                     	;# 
  1087  0F10                     	;# 
  1088  0F11                     	;# 
  1089  0F12                     	;# 
  1090  0F13                     	;# 
  1091  0F14                     	;# 
  1092  0F15                     	;# 
  1093  0F16                     	;# 
  1094  0F17                     	;# 
  1095  0F18                     	;# 
  1096  0F19                     	;# 
  1097  0F1A                     	;# 
  1098  0F1B                     	;# 
  1099  0F1C                     	;# 
  1100  0F1D                     	;# 
  1101  0F1E                     	;# 
  1102  0F1F                     	;# 
  1103  0F20                     	;# 
  1104  0F21                     	;# 
  1105  0F22                     	;# 
  1106  0F23                     	;# 
  1107  0F24                     	;# 
  1108  0F25                     	;# 
  1109  0F26                     	;# 
  1110  0F27                     	;# 
  1111  0F28                     	;# 
  1112  0F29                     	;# 
  1113  0F2A                     	;# 
  1114  0F2B                     	;# 
  1115  0F2C                     	;# 
  1116  0F2D                     	;# 
  1117  0FE4                     	;# 
  1118  0FE5                     	;# 
  1119  0FE6                     	;# 
  1120  0FE7                     	;# 
  1121  0FE8                     	;# 
  1122  0FE9                     	;# 
  1123  0FEA                     	;# 
  1124  0FEB                     	;# 
  1125  0FED                     	;# 
  1126  0FEE                     	;# 
  1127  0FEF                     	;# 
  1128  0000                     	;# 
  1129  0001                     	;# 
  1130  0002                     	;# 
  1131  0003                     	;# 
  1132  0004                     	;# 
  1133  0005                     	;# 
  1134  0006                     	;# 
  1135  0007                     	;# 
  1136  0008                     	;# 
  1137  0009                     	;# 
  1138  000A                     	;# 
  1139  000B                     	;# 
  1140  000C                     	;# 
  1141  000D                     	;# 
  1142  000E                     	;# 
  1143  0011                     	;# 
  1144  0012                     	;# 
  1145  0013                     	;# 
  1146  0015                     	;# 
  1147  0016                     	;# 
  1148  0016                     	;# 
  1149  0017                     	;# 
  1150  0018                     	;# 
  1151  0019                     	;# 
  1152  001A                     	;# 
  1153  001B                     	;# 
  1154  001C                     	;# 
  1155  008C                     	;# 
  1156  008D                     	;# 
  1157  008E                     	;# 
  1158  0091                     	;# 
  1159  0092                     	;# 
  1160  0093                     	;# 
  1161  0095                     	;# 
  1162  0096                     	;# 
  1163  0097                     	;# 
  1164  0098                     	;# 
  1165  0099                     	;# 
  1166  009A                     	;# 
  1167  009B                     	;# 
  1168  009B                     	;# 
  1169  009C                     	;# 
  1170  009D                     	;# 
  1171  009E                     	;# 
  1172  009F                     	;# 
  1173  010C                     	;# 
  1174  010D                     	;# 
  1175  010E                     	;# 
  1176  0111                     	;# 
  1177  0112                     	;# 
  1178  0113                     	;# 
  1179  0114                     	;# 
  1180  0115                     	;# 
  1181  0116                     	;# 
  1182  0117                     	;# 
  1183  0118                     	;# 
  1184  0119                     	;# 
  1185  011C                     	;# 
  1186  018C                     	;# 
  1187  018D                     	;# 
  1188  018E                     	;# 
  1189  0191                     	;# 
  1190  0191                     	;# 
  1191  0192                     	;# 
  1192  0193                     	;# 
  1193  0193                     	;# 
  1194  0194                     	;# 
  1195  0195                     	;# 
  1196  0196                     	;# 
  1197  0199                     	;# 
  1198  0199                     	;# 
  1199  0199                     	;# 
  1200  019A                     	;# 
  1201  019A                     	;# 
  1202  019A                     	;# 
  1203  019B                     	;# 
  1204  019B                     	;# 
  1205  019B                     	;# 
  1206  019B                     	;# 
  1207  019B                     	;# 
  1208  019C                     	;# 
  1209  019C                     	;# 
  1210  019C                     	;# 
  1211  019D                     	;# 
  1212  019D                     	;# 
  1213  019D                     	;# 
  1214  019E                     	;# 
  1215  019E                     	;# 
  1216  019E                     	;# 
  1217  019F                     	;# 
  1218  019F                     	;# 
  1219  019F                     	;# 
  1220  019F                     	;# 
  1221  019F                     	;# 
  1222  020C                     	;# 
  1223  020D                     	;# 
  1224  020E                     	;# 
  1225  0211                     	;# 
  1226  0211                     	;# 
  1227  0212                     	;# 
  1228  0212                     	;# 
  1229  0213                     	;# 
  1230  0213                     	;# 
  1231  0214                     	;# 
  1232  0214                     	;# 
  1233  0215                     	;# 
  1234  0215                     	;# 
  1235  0215                     	;# 
  1236  0215                     	;# 
  1237  0216                     	;# 
  1238  0216                     	;# 
  1239  0217                     	;# 
  1240  0217                     	;# 
  1241  028C                     	;# 
  1242  028D                     	;# 
  1243  028E                     	;# 
  1244  0291                     	;# 
  1245  0291                     	;# 
  1246  0292                     	;# 
  1247  0293                     	;# 
  1248  0293                     	;# 
  1249  0298                     	;# 
  1250  0298                     	;# 
  1251  0299                     	;# 
  1252  029A                     	;# 
  1253  029A                     	;# 
  1254  029E                     	;# 
  1255  030C                     	;# 
  1256  030D                     	;# 
  1257  030E                     	;# 
  1258  038C                     	;# 
  1259  038D                     	;# 
  1260  038E                     	;# 
  1261  0391                     	;# 
  1262  0392                     	;# 
  1263  0393                     	;# 
  1264  0394                     	;# 
  1265  0395                     	;# 
  1266  0396                     	;# 
  1267  0397                     	;# 
  1268  0398                     	;# 
  1269  0399                     	;# 
  1270  0415                     	;# 
  1271  0416                     	;# 
  1272  0417                     	;# 
  1273  041C                     	;# 
  1274  041D                     	;# 
  1275  041E                     	;# 
  1276  0511                     	;# 
  1277  0515                     	;# 
  1278  0617                     	;# 
  1279  0618                     	;# 
  1280  0619                     	;# 
  1281  0619                     	;# 
  1282  061A                     	;# 
  1283  061B                     	;# 
  1284  061C                     	;# 
  1285  061C                     	;# 
  1286  0691                     	;# 
  1287  0692                     	;# 
  1288  0693                     	;# 
  1289  0694                     	;# 
  1290  0695                     	;# 
  1291  0696                     	;# 
  1292  0697                     	;# 
  1293  0698                     	;# 
  1294  0699                     	;# 
  1295  069A                     	;# 
  1296  069B                     	;# 
  1297  069C                     	;# 
  1298  069D                     	;# 
  1299  069E                     	;# 
  1300  069F                     	;# 
  1301  0E0F                     	;# 
  1302  0E10                     	;# 
  1303  0E11                     	;# 
  1304  0E12                     	;# 
  1305  0E13                     	;# 
  1306  0E14                     	;# 
  1307  0E15                     	;# 
  1308  0E17                     	;# 
  1309  0E20                     	;# 
  1310  0E21                     	;# 
  1311  0E22                     	;# 
  1312  0E24                     	;# 
  1313  0E25                     	;# 
  1314  0E28                     	;# 
  1315  0E29                     	;# 
  1316  0E2A                     	;# 
  1317  0E2B                     	;# 
  1318  0E90                     	;# 
  1319  0E91                     	;# 
  1320  0E92                     	;# 
  1321  0E94                     	;# 
  1322  0E95                     	;# 
  1323  0E9C                     	;# 
  1324  0E9D                     	;# 
  1325  0E9E                     	;# 
  1326  0E9F                     	;# 
  1327  0EA0                     	;# 
  1328  0EA1                     	;# 
  1329  0EA2                     	;# 
  1330  0EA3                     	;# 
  1331  0EA4                     	;# 
  1332  0EA5                     	;# 
  1333  0EA6                     	;# 
  1334  0EA7                     	;# 
  1335  0F0F                     	;# 
  1336  0F10                     	;# 
  1337  0F11                     	;# 
  1338  0F12                     	;# 
  1339  0F13                     	;# 
  1340  0F14                     	;# 
  1341  0F15                     	;# 
  1342  0F16                     	;# 
  1343  0F17                     	;# 
  1344  0F18                     	;# 
  1345  0F19                     	;# 
  1346  0F1A                     	;# 
  1347  0F1B                     	;# 
  1348  0F1C                     	;# 
  1349  0F1D                     	;# 
  1350  0F1E                     	;# 
  1351  0F1F                     	;# 
  1352  0F20                     	;# 
  1353  0F21                     	;# 
  1354  0F22                     	;# 
  1355  0F23                     	;# 
  1356  0F24                     	;# 
  1357  0F25                     	;# 
  1358  0F26                     	;# 
  1359  0F27                     	;# 
  1360  0F28                     	;# 
  1361  0F29                     	;# 
  1362  0F2A                     	;# 
  1363  0F2B                     	;# 
  1364  0F2C                     	;# 
  1365  0F2D                     	;# 
  1366  0FE4                     	;# 
  1367  0FE5                     	;# 
  1368  0FE6                     	;# 
  1369  0FE7                     	;# 
  1370  0FE8                     	;# 
  1371  0FE9                     	;# 
  1372  0FEA                     	;# 
  1373  0FEB                     	;# 
  1374  0FED                     	;# 
  1375  0FEE                     	;# 
  1376  0FEF                     	;# 
  1377  0000                     	;# 
  1378  0001                     	;# 
  1379  0002                     	;# 
  1380  0003                     	;# 
  1381  0004                     	;# 
  1382  0005                     	;# 
  1383  0006                     	;# 
  1384  0007                     	;# 
  1385  0008                     	;# 
  1386  0009                     	;# 
  1387  000A                     	;# 
  1388  000B                     	;# 
  1389  000C                     	;# 
  1390  000D                     	;# 
  1391  000E                     	;# 
  1392  0011                     	;# 
  1393  0012                     	;# 
  1394  0013                     	;# 
  1395  0015                     	;# 
  1396  0016                     	;# 
  1397  0016                     	;# 
  1398  0017                     	;# 
  1399  0018                     	;# 
  1400  0019                     	;# 
  1401  001A                     	;# 
  1402  001B                     	;# 
  1403  001C                     	;# 
  1404  008C                     	;# 
  1405  008D                     	;# 
  1406  008E                     	;# 
  1407  0091                     	;# 
  1408  0092                     	;# 
  1409  0093                     	;# 
  1410  0095                     	;# 
  1411  0096                     	;# 
  1412  0097                     	;# 
  1413  0098                     	;# 
  1414  0099                     	;# 
  1415  009A                     	;# 
  1416  009B                     	;# 
  1417  009B                     	;# 
  1418  009C                     	;# 
  1419  009D                     	;# 
  1420  009E                     	;# 
  1421  009F                     	;# 
  1422  010C                     	;# 
  1423  010D                     	;# 
  1424  010E                     	;# 
  1425  0111                     	;# 
  1426  0112                     	;# 
  1427  0113                     	;# 
  1428  0114                     	;# 
  1429  0115                     	;# 
  1430  0116                     	;# 
  1431  0117                     	;# 
  1432  0118                     	;# 
  1433  0119                     	;# 
  1434  011C                     	;# 
  1435  018C                     	;# 
  1436  018D                     	;# 
  1437  018E                     	;# 
  1438  0191                     	;# 
  1439  0191                     	;# 
  1440  0192                     	;# 
  1441  0193                     	;# 
  1442  0193                     	;# 
  1443  0194                     	;# 
  1444  0195                     	;# 
  1445  0196                     	;# 
  1446  0199                     	;# 
  1447  0199                     	;# 
  1448  0199                     	;# 
  1449  019A                     	;# 
  1450  019A                     	;# 
  1451  019A                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019B                     	;# 
  1456  019B                     	;# 
  1457  019C                     	;# 
  1458  019C                     	;# 
  1459  019C                     	;# 
  1460  019D                     	;# 
  1461  019D                     	;# 
  1462  019D                     	;# 
  1463  019E                     	;# 
  1464  019E                     	;# 
  1465  019E                     	;# 
  1466  019F                     	;# 
  1467  019F                     	;# 
  1468  019F                     	;# 
  1469  019F                     	;# 
  1470  019F                     	;# 
  1471  020C                     	;# 
  1472  020D                     	;# 
  1473  020E                     	;# 
  1474  0211                     	;# 
  1475  0211                     	;# 
  1476  0212                     	;# 
  1477  0212                     	;# 
  1478  0213                     	;# 
  1479  0213                     	;# 
  1480  0214                     	;# 
  1481  0214                     	;# 
  1482  0215                     	;# 
  1483  0215                     	;# 
  1484  0215                     	;# 
  1485  0215                     	;# 
  1486  0216                     	;# 
  1487  0216                     	;# 
  1488  0217                     	;# 
  1489  0217                     	;# 
  1490  028C                     	;# 
  1491  028D                     	;# 
  1492  028E                     	;# 
  1493  0291                     	;# 
  1494  0291                     	;# 
  1495  0292                     	;# 
  1496  0293                     	;# 
  1497  0293                     	;# 
  1498  0298                     	;# 
  1499  0298                     	;# 
  1500  0299                     	;# 
  1501  029A                     	;# 
  1502  029A                     	;# 
  1503  029E                     	;# 
  1504  030C                     	;# 
  1505  030D                     	;# 
  1506  030E                     	;# 
  1507  038C                     	;# 
  1508  038D                     	;# 
  1509  038E                     	;# 
  1510  0391                     	;# 
  1511  0392                     	;# 
  1512  0393                     	;# 
  1513  0394                     	;# 
  1514  0395                     	;# 
  1515  0396                     	;# 
  1516  0397                     	;# 
  1517  0398                     	;# 
  1518  0399                     	;# 
  1519  0415                     	;# 
  1520  0416                     	;# 
  1521  0417                     	;# 
  1522  041C                     	;# 
  1523  041D                     	;# 
  1524  041E                     	;# 
  1525  0511                     	;# 
  1526  0515                     	;# 
  1527  0617                     	;# 
  1528  0618                     	;# 
  1529  0619                     	;# 
  1530  0619                     	;# 
  1531  061A                     	;# 
  1532  061B                     	;# 
  1533  061C                     	;# 
  1534  061C                     	;# 
  1535  0691                     	;# 
  1536  0692                     	;# 
  1537  0693                     	;# 
  1538  0694                     	;# 
  1539  0695                     	;# 
  1540  0696                     	;# 
  1541  0697                     	;# 
  1542  0698                     	;# 
  1543  0699                     	;# 
  1544  069A                     	;# 
  1545  069B                     	;# 
  1546  069C                     	;# 
  1547  069D                     	;# 
  1548  069E                     	;# 
  1549  069F                     	;# 
  1550  0E0F                     	;# 
  1551  0E10                     	;# 
  1552  0E11                     	;# 
  1553  0E12                     	;# 
  1554  0E13                     	;# 
  1555  0E14                     	;# 
  1556  0E15                     	;# 
  1557  0E17                     	;# 
  1558  0E20                     	;# 
  1559  0E21                     	;# 
  1560  0E22                     	;# 
  1561  0E24                     	;# 
  1562  0E25                     	;# 
  1563  0E28                     	;# 
  1564  0E29                     	;# 
  1565  0E2A                     	;# 
  1566  0E2B                     	;# 
  1567  0E90                     	;# 
  1568  0E91                     	;# 
  1569  0E92                     	;# 
  1570  0E94                     	;# 
  1571  0E95                     	;# 
  1572  0E9C                     	;# 
  1573  0E9D                     	;# 
  1574  0E9E                     	;# 
  1575  0E9F                     	;# 
  1576  0EA0                     	;# 
  1577  0EA1                     	;# 
  1578  0EA2                     	;# 
  1579  0EA3                     	;# 
  1580  0EA4                     	;# 
  1581  0EA5                     	;# 
  1582  0EA6                     	;# 
  1583  0EA7                     	;# 
  1584  0F0F                     	;# 
  1585  0F10                     	;# 
  1586  0F11                     	;# 
  1587  0F12                     	;# 
  1588  0F13                     	;# 
  1589  0F14                     	;# 
  1590  0F15                     	;# 
  1591  0F16                     	;# 
  1592  0F17                     	;# 
  1593  0F18                     	;# 
  1594  0F19                     	;# 
  1595  0F1A                     	;# 
  1596  0F1B                     	;# 
  1597  0F1C                     	;# 
  1598  0F1D                     	;# 
  1599  0F1E                     	;# 
  1600  0F1F                     	;# 
  1601  0F20                     	;# 
  1602  0F21                     	;# 
  1603  0F22                     	;# 
  1604  0F23                     	;# 
  1605  0F24                     	;# 
  1606  0F25                     	;# 
  1607  0F26                     	;# 
  1608  0F27                     	;# 
  1609  0F28                     	;# 
  1610  0F29                     	;# 
  1611  0F2A                     	;# 
  1612  0F2B                     	;# 
  1613  0F2C                     	;# 
  1614  0F2D                     	;# 
  1615  0FE4                     	;# 
  1616  0FE5                     	;# 
  1617  0FE6                     	;# 
  1618  0FE7                     	;# 
  1619  0FE8                     	;# 
  1620  0FE9                     	;# 
  1621  0FEA                     	;# 
  1622  0FEB                     	;# 
  1623  0FED                     	;# 
  1624  0FEE                     	;# 
  1625  0FEF                     	;# 
  1626  0000                     	;# 
  1627  0001                     	;# 
  1628  0002                     	;# 
  1629  0003                     	;# 
  1630  0004                     	;# 
  1631  0005                     	;# 
  1632  0006                     	;# 
  1633  0007                     	;# 
  1634  0008                     	;# 
  1635  0009                     	;# 
  1636  000A                     	;# 
  1637  000B                     	;# 
  1638  000C                     	;# 
  1639  000D                     	;# 
  1640  000E                     	;# 
  1641  0011                     	;# 
  1642  0012                     	;# 
  1643  0013                     	;# 
  1644  0015                     	;# 
  1645  0016                     	;# 
  1646  0016                     	;# 
  1647  0017                     	;# 
  1648  0018                     	;# 
  1649  0019                     	;# 
  1650  001A                     	;# 
  1651  001B                     	;# 
  1652  001C                     	;# 
  1653  008C                     	;# 
  1654  008D                     	;# 
  1655  008E                     	;# 
  1656  0091                     	;# 
  1657  0092                     	;# 
  1658  0093                     	;# 
  1659  0095                     	;# 
  1660  0096                     	;# 
  1661  0097                     	;# 
  1662  0098                     	;# 
  1663  0099                     	;# 
  1664  009A                     	;# 
  1665  009B                     	;# 
  1666  009B                     	;# 
  1667  009C                     	;# 
  1668  009D                     	;# 
  1669  009E                     	;# 
  1670  009F                     	;# 
  1671  010C                     	;# 
  1672  010D                     	;# 
  1673  010E                     	;# 
  1674  0111                     	;# 
  1675  0112                     	;# 
  1676  0113                     	;# 
  1677  0114                     	;# 
  1678  0115                     	;# 
  1679  0116                     	;# 
  1680  0117                     	;# 
  1681  0118                     	;# 
  1682  0119                     	;# 
  1683  011C                     	;# 
  1684  018C                     	;# 
  1685  018D                     	;# 
  1686  018E                     	;# 
  1687  0191                     	;# 
  1688  0191                     	;# 
  1689  0192                     	;# 
  1690  0193                     	;# 
  1691  0193                     	;# 
  1692  0194                     	;# 
  1693  0195                     	;# 
  1694  0196                     	;# 
  1695  0199                     	;# 
  1696  0199                     	;# 
  1697  0199                     	;# 
  1698  019A                     	;# 
  1699  019A                     	;# 
  1700  019A                     	;# 
  1701  019B                     	;# 
  1702  019B                     	;# 
  1703  019B                     	;# 
  1704  019B                     	;# 
  1705  019B                     	;# 
  1706  019C                     	;# 
  1707  019C                     	;# 
  1708  019C                     	;# 
  1709  019D                     	;# 
  1710  019D                     	;# 
  1711  019D                     	;# 
  1712  019E                     	;# 
  1713  019E                     	;# 
  1714  019E                     	;# 
  1715  019F                     	;# 
  1716  019F                     	;# 
  1717  019F                     	;# 
  1718  019F                     	;# 
  1719  019F                     	;# 
  1720  020C                     	;# 
  1721  020D                     	;# 
  1722  020E                     	;# 
  1723  0211                     	;# 
  1724  0211                     	;# 
  1725  0212                     	;# 
  1726  0212                     	;# 
  1727  0213                     	;# 
  1728  0213                     	;# 
  1729  0214                     	;# 
  1730  0214                     	;# 
  1731  0215                     	;# 
  1732  0215                     	;# 
  1733  0215                     	;# 
  1734  0215                     	;# 
  1735  0216                     	;# 
  1736  0216                     	;# 
  1737  0217                     	;# 
  1738  0217                     	;# 
  1739  028C                     	;# 
  1740  028D                     	;# 
  1741  028E                     	;# 
  1742  0291                     	;# 
  1743  0291                     	;# 
  1744  0292                     	;# 
  1745  0293                     	;# 
  1746  0293                     	;# 
  1747  0298                     	;# 
  1748  0298                     	;# 
  1749  0299                     	;# 
  1750  029A                     	;# 
  1751  029A                     	;# 
  1752  029E                     	;# 
  1753  030C                     	;# 
  1754  030D                     	;# 
  1755  030E                     	;# 
  1756  038C                     	;# 
  1757  038D                     	;# 
  1758  038E                     	;# 
  1759  0391                     	;# 
  1760  0392                     	;# 
  1761  0393                     	;# 
  1762  0394                     	;# 
  1763  0395                     	;# 
  1764  0396                     	;# 
  1765  0397                     	;# 
  1766  0398                     	;# 
  1767  0399                     	;# 
  1768  0415                     	;# 
  1769  0416                     	;# 
  1770  0417                     	;# 
  1771  041C                     	;# 
  1772  041D                     	;# 
  1773  041E                     	;# 
  1774  0511                     	;# 
  1775  0515                     	;# 
  1776  0617                     	;# 
  1777  0618                     	;# 
  1778  0619                     	;# 
  1779  0619                     	;# 
  1780  061A                     	;# 
  1781  061B                     	;# 
  1782  061C                     	;# 
  1783  061C                     	;# 
  1784  0691                     	;# 
  1785  0692                     	;# 
  1786  0693                     	;# 
  1787  0694                     	;# 
  1788  0695                     	;# 
  1789  0696                     	;# 
  1790  0697                     	;# 
  1791  0698                     	;# 
  1792  0699                     	;# 
  1793  069A                     	;# 
  1794  069B                     	;# 
  1795  069C                     	;# 
  1796  069D                     	;# 
  1797  069E                     	;# 
  1798  069F                     	;# 
  1799  0E0F                     	;# 
  1800  0E10                     	;# 
  1801  0E11                     	;# 
  1802  0E12                     	;# 
  1803  0E13                     	;# 
  1804  0E14                     	;# 
  1805  0E15                     	;# 
  1806  0E17                     	;# 
  1807  0E20                     	;# 
  1808  0E21                     	;# 
  1809  0E22                     	;# 
  1810  0E24                     	;# 
  1811  0E25                     	;# 
  1812  0E28                     	;# 
  1813  0E29                     	;# 
  1814  0E2A                     	;# 
  1815  0E2B                     	;# 
  1816  0E90                     	;# 
  1817  0E91                     	;# 
  1818  0E92                     	;# 
  1819  0E94                     	;# 
  1820  0E95                     	;# 
  1821  0E9C                     	;# 
  1822  0E9D                     	;# 
  1823  0E9E                     	;# 
  1824  0E9F                     	;# 
  1825  0EA0                     	;# 
  1826  0EA1                     	;# 
  1827  0EA2                     	;# 
  1828  0EA3                     	;# 
  1829  0EA4                     	;# 
  1830  0EA5                     	;# 
  1831  0EA6                     	;# 
  1832  0EA7                     	;# 
  1833  0F0F                     	;# 
  1834  0F10                     	;# 
  1835  0F11                     	;# 
  1836  0F12                     	;# 
  1837  0F13                     	;# 
  1838  0F14                     	;# 
  1839  0F15                     	;# 
  1840  0F16                     	;# 
  1841  0F17                     	;# 
  1842  0F18                     	;# 
  1843  0F19                     	;# 
  1844  0F1A                     	;# 
  1845  0F1B                     	;# 
  1846  0F1C                     	;# 
  1847  0F1D                     	;# 
  1848  0F1E                     	;# 
  1849  0F1F                     	;# 
  1850  0F20                     	;# 
  1851  0F21                     	;# 
  1852  0F22                     	;# 
  1853  0F23                     	;# 
  1854  0F24                     	;# 
  1855  0F25                     	;# 
  1856  0F26                     	;# 
  1857  0F27                     	;# 
  1858  0F28                     	;# 
  1859  0F29                     	;# 
  1860  0F2A                     	;# 
  1861  0F2B                     	;# 
  1862  0F2C                     	;# 
  1863  0F2D                     	;# 
  1864  0FE4                     	;# 
  1865  0FE5                     	;# 
  1866  0FE6                     	;# 
  1867  0FE7                     	;# 
  1868  0FE8                     	;# 
  1869  0FE9                     	;# 
  1870  0FEA                     	;# 
  1871  0FEB                     	;# 
  1872  0FED                     	;# 
  1873  0FEE                     	;# 
  1874  0FEF                     	;# 
  1875  0000                     	;# 
  1876  0001                     	;# 
  1877  0002                     	;# 
  1878  0003                     	;# 
  1879  0004                     	;# 
  1880  0005                     	;# 
  1881  0006                     	;# 
  1882  0007                     	;# 
  1883  0008                     	;# 
  1884  0009                     	;# 
  1885  000A                     	;# 
  1886  000B                     	;# 
  1887  000C                     	;# 
  1888  000D                     	;# 
  1889  000E                     	;# 
  1890  0011                     	;# 
  1891  0012                     	;# 
  1892  0013                     	;# 
  1893  0015                     	;# 
  1894  0016                     	;# 
  1895  0016                     	;# 
  1896  0017                     	;# 
  1897  0018                     	;# 
  1898  0019                     	;# 
  1899  001A                     	;# 
  1900  001B                     	;# 
  1901  001C                     	;# 
  1902  008C                     	;# 
  1903  008D                     	;# 
  1904  008E                     	;# 
  1905  0091                     	;# 
  1906  0092                     	;# 
  1907  0093                     	;# 
  1908  0095                     	;# 
  1909  0096                     	;# 
  1910  0097                     	;# 
  1911  0098                     	;# 
  1912  0099                     	;# 
  1913  009A                     	;# 
  1914  009B                     	;# 
  1915  009B                     	;# 
  1916  009C                     	;# 
  1917  009D                     	;# 
  1918  009E                     	;# 
  1919  009F                     	;# 
  1920  010C                     	;# 
  1921  010D                     	;# 
  1922  010E                     	;# 
  1923  0111                     	;# 
  1924  0112                     	;# 
  1925  0113                     	;# 
  1926  0114                     	;# 
  1927  0115                     	;# 
  1928  0116                     	;# 
  1929  0117                     	;# 
  1930  0118                     	;# 
  1931  0119                     	;# 
  1932  011C                     	;# 
  1933  018C                     	;# 
  1934  018D                     	;# 
  1935  018E                     	;# 
  1936  0191                     	;# 
  1937  0191                     	;# 
  1938  0192                     	;# 
  1939  0193                     	;# 
  1940  0193                     	;# 
  1941  0194                     	;# 
  1942  0195                     	;# 
  1943  0196                     	;# 
  1944  0199                     	;# 
  1945  0199                     	;# 
  1946  0199                     	;# 
  1947  019A                     	;# 
  1948  019A                     	;# 
  1949  019A                     	;# 
  1950  019B                     	;# 
  1951  019B                     	;# 
  1952  019B                     	;# 
  1953  019B                     	;# 
  1954  019B                     	;# 
  1955  019C                     	;# 
  1956  019C                     	;# 
  1957  019C                     	;# 
  1958  019D                     	;# 
  1959  019D                     	;# 
  1960  019D                     	;# 
  1961  019E                     	;# 
  1962  019E                     	;# 
  1963  019E                     	;# 
  1964  019F                     	;# 
  1965  019F                     	;# 
  1966  019F                     	;# 
  1967  019F                     	;# 
  1968  019F                     	;# 
  1969  020C                     	;# 
  1970  020D                     	;# 
  1971  020E                     	;# 
  1972  0211                     	;# 
  1973  0211                     	;# 
  1974  0212                     	;# 
  1975  0212                     	;# 
  1976  0213                     	;# 
  1977  0213                     	;# 
  1978  0214                     	;# 
  1979  0214                     	;# 
  1980  0215                     	;# 
  1981  0215                     	;# 
  1982  0215                     	;# 
  1983  0215                     	;# 
  1984  0216                     	;# 
  1985  0216                     	;# 
  1986  0217                     	;# 
  1987  0217                     	;# 
  1988  028C                     	;# 
  1989  028D                     	;# 
  1990  028E                     	;# 
  1991  0291                     	;# 
  1992  0291                     	;# 
  1993  0292                     	;# 
  1994  0293                     	;# 
  1995  0293                     	;# 
  1996  0298                     	;# 
  1997  0298                     	;# 
  1998  0299                     	;# 
  1999  029A                     	;# 
  2000  029A                     	;# 
  2001  029E                     	;# 
  2002  030C                     	;# 
  2003  030D                     	;# 
  2004  030E                     	;# 
  2005  038C                     	;# 
  2006  038D                     	;# 
  2007  038E                     	;# 
  2008  0391                     	;# 
  2009  0392                     	;# 
  2010  0393                     	;# 
  2011  0394                     	;# 
  2012  0395                     	;# 
  2013  0396                     	;# 
  2014  0397                     	;# 
  2015  0398                     	;# 
  2016  0399                     	;# 
  2017  0415                     	;# 
  2018  0416                     	;# 
  2019  0417                     	;# 
  2020  041C                     	;# 
  2021  041D                     	;# 
  2022  041E                     	;# 
  2023  0511                     	;# 
  2024  0515                     	;# 
  2025  0617                     	;# 
  2026  0618                     	;# 
  2027  0619                     	;# 
  2028  0619                     	;# 
  2029  061A                     	;# 
  2030  061B                     	;# 
  2031  061C                     	;# 
  2032  061C                     	;# 
  2033  0691                     	;# 
  2034  0692                     	;# 
  2035  0693                     	;# 
  2036  0694                     	;# 
  2037  0695                     	;# 
  2038  0696                     	;# 
  2039  0697                     	;# 
  2040  0698                     	;# 
  2041  0699                     	;# 
  2042  069A                     	;# 
  2043  069B                     	;# 
  2044  069C                     	;# 
  2045  069D                     	;# 
  2046  069E                     	;# 
  2047  069F                     	;# 
  2048  0E0F                     	;# 
  2049  0E10                     	;# 
  2050  0E11                     	;# 
  2051  0E12                     	;# 
  2052  0E13                     	;# 
  2053  0E14                     	;# 
  2054  0E15                     	;# 
  2055  0E17                     	;# 
  2056  0E20                     	;# 
  2057  0E21                     	;# 
  2058  0E22                     	;# 
  2059  0E24                     	;# 
  2060  0E25                     	;# 
  2061  0E28                     	;# 
  2062  0E29                     	;# 
  2063  0E2A                     	;# 
  2064  0E2B                     	;# 
  2065  0E90                     	;# 
  2066  0E91                     	;# 
  2067  0E92                     	;# 
  2068  0E94                     	;# 
  2069  0E95                     	;# 
  2070  0E9C                     	;# 
  2071  0E9D                     	;# 
  2072  0E9E                     	;# 
  2073  0E9F                     	;# 
  2074  0EA0                     	;# 
  2075  0EA1                     	;# 
  2076  0EA2                     	;# 
  2077  0EA3                     	;# 
  2078  0EA4                     	;# 
  2079  0EA5                     	;# 
  2080  0EA6                     	;# 
  2081  0EA7                     	;# 
  2082  0F0F                     	;# 
  2083  0F10                     	;# 
  2084  0F11                     	;# 
  2085  0F12                     	;# 
  2086  0F13                     	;# 
  2087  0F14                     	;# 
  2088  0F15                     	;# 
  2089  0F16                     	;# 
  2090  0F17                     	;# 
  2091  0F18                     	;# 
  2092  0F19                     	;# 
  2093  0F1A                     	;# 
  2094  0F1B                     	;# 
  2095  0F1C                     	;# 
  2096  0F1D                     	;# 
  2097  0F1E                     	;# 
  2098  0F1F                     	;# 
  2099  0F20                     	;# 
  2100  0F21                     	;# 
  2101  0F22                     	;# 
  2102  0F23                     	;# 
  2103  0F24                     	;# 
  2104  0F25                     	;# 
  2105  0F26                     	;# 
  2106  0F27                     	;# 
  2107  0F28                     	;# 
  2108  0F29                     	;# 
  2109  0F2A                     	;# 
  2110  0F2B                     	;# 
  2111  0F2C                     	;# 
  2112  0F2D                     	;# 
  2113  0FE4                     	;# 
  2114  0FE5                     	;# 
  2115  0FE6                     	;# 
  2116  0FE7                     	;# 
  2117  0FE8                     	;# 
  2118  0FE9                     	;# 
  2119  0FEA                     	;# 
  2120  0FEB                     	;# 
  2121  0FED                     	;# 
  2122  0FEE                     	;# 
  2123  0FEF                     	;# 
  2124  0000                     	;# 
  2125  0001                     	;# 
  2126  0002                     	;# 
  2127  0003                     	;# 
  2128  0004                     	;# 
  2129  0005                     	;# 
  2130  0006                     	;# 
  2131  0007                     	;# 
  2132  0008                     	;# 
  2133  0009                     	;# 
  2134  000A                     	;# 
  2135  000B                     	;# 
  2136  000C                     	;# 
  2137  000D                     	;# 
  2138  000E                     	;# 
  2139  0011                     	;# 
  2140  0012                     	;# 
  2141  0013                     	;# 
  2142  0015                     	;# 
  2143  0016                     	;# 
  2144  0016                     	;# 
  2145  0017                     	;# 
  2146  0018                     	;# 
  2147  0019                     	;# 
  2148  001A                     	;# 
  2149  001B                     	;# 
  2150  001C                     	;# 
  2151  008C                     	;# 
  2152  008D                     	;# 
  2153  008E                     	;# 
  2154  0091                     	;# 
  2155  0092                     	;# 
  2156  0093                     	;# 
  2157  0095                     	;# 
  2158  0096                     	;# 
  2159  0097                     	;# 
  2160  0098                     	;# 
  2161  0099                     	;# 
  2162  009A                     	;# 
  2163  009B                     	;# 
  2164  009B                     	;# 
  2165  009C                     	;# 
  2166  009D                     	;# 
  2167  009E                     	;# 
  2168  009F                     	;# 
  2169  010C                     	;# 
  2170  010D                     	;# 
  2171  010E                     	;# 
  2172  0111                     	;# 
  2173  0112                     	;# 
  2174  0113                     	;# 
  2175  0114                     	;# 
  2176  0115                     	;# 
  2177  0116                     	;# 
  2178  0117                     	;# 
  2179  0118                     	;# 
  2180  0119                     	;# 
  2181  011C                     	;# 
  2182  018C                     	;# 
  2183  018D                     	;# 
  2184  018E                     	;# 
  2185  0191                     	;# 
  2186  0191                     	;# 
  2187  0192                     	;# 
  2188  0193                     	;# 
  2189  0193                     	;# 
  2190  0194                     	;# 
  2191  0195                     	;# 
  2192  0196                     	;# 
  2193  0199                     	;# 
  2194  0199                     	;# 
  2195  0199                     	;# 
  2196  019A                     	;# 
  2197  019A                     	;# 
  2198  019A                     	;# 
  2199  019B                     	;# 
  2200  019B                     	;# 
  2201  019B                     	;# 
  2202  019B                     	;# 
  2203  019B                     	;# 
  2204  019C                     	;# 
  2205  019C                     	;# 
  2206  019C                     	;# 
  2207  019D                     	;# 
  2208  019D                     	;# 
  2209  019D                     	;# 
  2210  019E                     	;# 
  2211  019E                     	;# 
  2212  019E                     	;# 
  2213  019F                     	;# 
  2214  019F                     	;# 
  2215  019F                     	;# 
  2216  019F                     	;# 
  2217  019F                     	;# 
  2218  020C                     	;# 
  2219  020D                     	;# 
  2220  020E                     	;# 
  2221  0211                     	;# 
  2222  0211                     	;# 
  2223  0212                     	;# 
  2224  0212                     	;# 
  2225  0213                     	;# 
  2226  0213                     	;# 
  2227  0214                     	;# 
  2228  0214                     	;# 
  2229  0215                     	;# 
  2230  0215                     	;# 
  2231  0215                     	;# 
  2232  0215                     	;# 
  2233  0216                     	;# 
  2234  0216                     	;# 
  2235  0217                     	;# 
  2236  0217                     	;# 
  2237  028C                     	;# 
  2238  028D                     	;# 
  2239  028E                     	;# 
  2240  0291                     	;# 
  2241  0291                     	;# 
  2242  0292                     	;# 
  2243  0293                     	;# 
  2244  0293                     	;# 
  2245  0298                     	;# 
  2246  0298                     	;# 
  2247  0299                     	;# 
  2248  029A                     	;# 
  2249  029A                     	;# 
  2250  029E                     	;# 
  2251  030C                     	;# 
  2252  030D                     	;# 
  2253  030E                     	;# 
  2254  038C                     	;# 
  2255  038D                     	;# 
  2256  038E                     	;# 
  2257  0391                     	;# 
  2258  0392                     	;# 
  2259  0393                     	;# 
  2260  0394                     	;# 
  2261  0395                     	;# 
  2262  0396                     	;# 
  2263  0397                     	;# 
  2264  0398                     	;# 
  2265  0399                     	;# 
  2266  0415                     	;# 
  2267  0416                     	;# 
  2268  0417                     	;# 
  2269  041C                     	;# 
  2270  041D                     	;# 
  2271  041E                     	;# 
  2272  0511                     	;# 
  2273  0515                     	;# 
  2274  0617                     	;# 
  2275  0618                     	;# 
  2276  0619                     	;# 
  2277  0619                     	;# 
  2278  061A                     	;# 
  2279  061B                     	;# 
  2280  061C                     	;# 
  2281  061C                     	;# 
  2282  0691                     	;# 
  2283  0692                     	;# 
  2284  0693                     	;# 
  2285  0694                     	;# 
  2286  0695                     	;# 
  2287  0696                     	;# 
  2288  0697                     	;# 
  2289  0698                     	;# 
  2290  0699                     	;# 
  2291  069A                     	;# 
  2292  069B                     	;# 
  2293  069C                     	;# 
  2294  069D                     	;# 
  2295  069E                     	;# 
  2296  069F                     	;# 
  2297  0E0F                     	;# 
  2298  0E10                     	;# 
  2299  0E11                     	;# 
  2300  0E12                     	;# 
  2301  0E13                     	;# 
  2302  0E14                     	;# 
  2303  0E15                     	;# 
  2304  0E17                     	;# 
  2305  0E20                     	;# 
  2306  0E21                     	;# 
  2307  0E22                     	;# 
  2308  0E24                     	;# 
  2309  0E25                     	;# 
  2310  0E28                     	;# 
  2311  0E29                     	;# 
  2312  0E2A                     	;# 
  2313  0E2B                     	;# 
  2314  0E90                     	;# 
  2315  0E91                     	;# 
  2316  0E92                     	;# 
  2317  0E94                     	;# 
  2318  0E95                     	;# 
  2319  0E9C                     	;# 
  2320  0E9D                     	;# 
  2321  0E9E                     	;# 
  2322  0E9F                     	;# 
  2323  0EA0                     	;# 
  2324  0EA1                     	;# 
  2325  0EA2                     	;# 
  2326  0EA3                     	;# 
  2327  0EA4                     	;# 
  2328  0EA5                     	;# 
  2329  0EA6                     	;# 
  2330  0EA7                     	;# 
  2331  0F0F                     	;# 
  2332  0F10                     	;# 
  2333  0F11                     	;# 
  2334  0F12                     	;# 
  2335  0F13                     	;# 
  2336  0F14                     	;# 
  2337  0F15                     	;# 
  2338  0F16                     	;# 
  2339  0F17                     	;# 
  2340  0F18                     	;# 
  2341  0F19                     	;# 
  2342  0F1A                     	;# 
  2343  0F1B                     	;# 
  2344  0F1C                     	;# 
  2345  0F1D                     	;# 
  2346  0F1E                     	;# 
  2347  0F1F                     	;# 
  2348  0F20                     	;# 
  2349  0F21                     	;# 
  2350  0F22                     	;# 
  2351  0F23                     	;# 
  2352  0F24                     	;# 
  2353  0F25                     	;# 
  2354  0F26                     	;# 
  2355  0F27                     	;# 
  2356  0F28                     	;# 
  2357  0F29                     	;# 
  2358  0F2A                     	;# 
  2359  0F2B                     	;# 
  2360  0F2C                     	;# 
  2361  0F2D                     	;# 
  2362  0FE4                     	;# 
  2363  0FE5                     	;# 
  2364  0FE6                     	;# 
  2365  0FE7                     	;# 
  2366  0FE8                     	;# 
  2367  0FE9                     	;# 
  2368  0FEA                     	;# 
  2369  0FEB                     	;# 
  2370  0FED                     	;# 
  2371  0FEE                     	;# 
  2372  0FEF                     	;# 
  2373  0000                     	;# 
  2374  0001                     	;# 
  2375  0002                     	;# 
  2376  0003                     	;# 
  2377  0004                     	;# 
  2378  0005                     	;# 
  2379  0006                     	;# 
  2380  0007                     	;# 
  2381  0008                     	;# 
  2382  0009                     	;# 
  2383  000A                     	;# 
  2384  000B                     	;# 
  2385  000C                     	;# 
  2386  000D                     	;# 
  2387  000E                     	;# 
  2388  0011                     	;# 
  2389  0012                     	;# 
  2390  0013                     	;# 
  2391  0015                     	;# 
  2392  0016                     	;# 
  2393  0016                     	;# 
  2394  0017                     	;# 
  2395  0018                     	;# 
  2396  0019                     	;# 
  2397  001A                     	;# 
  2398  001B                     	;# 
  2399  001C                     	;# 
  2400  008C                     	;# 
  2401  008D                     	;# 
  2402  008E                     	;# 
  2403  0091                     	;# 
  2404  0092                     	;# 
  2405  0093                     	;# 
  2406  0095                     	;# 
  2407  0096                     	;# 
  2408  0097                     	;# 
  2409  0098                     	;# 
  2410  0099                     	;# 
  2411  009A                     	;# 
  2412  009B                     	;# 
  2413  009B                     	;# 
  2414  009C                     	;# 
  2415  009D                     	;# 
  2416  009E                     	;# 
  2417  009F                     	;# 
  2418  010C                     	;# 
  2419  010D                     	;# 
  2420  010E                     	;# 
  2421  0111                     	;# 
  2422  0112                     	;# 
  2423  0113                     	;# 
  2424  0114                     	;# 
  2425  0115                     	;# 
  2426  0116                     	;# 
  2427  0117                     	;# 
  2428  0118                     	;# 
  2429  0119                     	;# 
  2430  011C                     	;# 
  2431  018C                     	;# 
  2432  018D                     	;# 
  2433  018E                     	;# 
  2434  0191                     	;# 
  2435  0191                     	;# 
  2436  0192                     	;# 
  2437  0193                     	;# 
  2438  0193                     	;# 
  2439  0194                     	;# 
  2440  0195                     	;# 
  2441  0196                     	;# 
  2442  0199                     	;# 
  2443  0199                     	;# 
  2444  0199                     	;# 
  2445  019A                     	;# 
  2446  019A                     	;# 
  2447  019A                     	;# 
  2448  019B                     	;# 
  2449  019B                     	;# 
  2450  019B                     	;# 
  2451  019B                     	;# 
  2452  019B                     	;# 
  2453  019C                     	;# 
  2454  019C                     	;# 
  2455  019C                     	;# 
  2456  019D                     	;# 
  2457  019D                     	;# 
  2458  019D                     	;# 
  2459  019E                     	;# 
  2460  019E                     	;# 
  2461  019E                     	;# 
  2462  019F                     	;# 
  2463  019F                     	;# 
  2464  019F                     	;# 
  2465  019F                     	;# 
  2466  019F                     	;# 
  2467  020C                     	;# 
  2468  020D                     	;# 
  2469  020E                     	;# 
  2470  0211                     	;# 
  2471  0211                     	;# 
  2472  0212                     	;# 
  2473  0212                     	;# 
  2474  0213                     	;# 
  2475  0213                     	;# 
  2476  0214                     	;# 
  2477  0214                     	;# 
  2478  0215                     	;# 
  2479  0215                     	;# 
  2480  0215                     	;# 
  2481  0215                     	;# 
  2482  0216                     	;# 
  2483  0216                     	;# 
  2484  0217                     	;# 
  2485  0217                     	;# 
  2486  028C                     	;# 
  2487  028D                     	;# 
  2488  028E                     	;# 
  2489  0291                     	;# 
  2490  0291                     	;# 
  2491  0292                     	;# 
  2492  0293                     	;# 
  2493  0293                     	;# 
  2494  0298                     	;# 
  2495  0298                     	;# 
  2496  0299                     	;# 
  2497  029A                     	;# 
  2498  029A                     	;# 
  2499  029E                     	;# 
  2500  030C                     	;# 
  2501  030D                     	;# 
  2502  030E                     	;# 
  2503  038C                     	;# 
  2504  038D                     	;# 
  2505  038E                     	;# 
  2506  0391                     	;# 
  2507  0392                     	;# 
  2508  0393                     	;# 
  2509  0394                     	;# 
  2510  0395                     	;# 
  2511  0396                     	;# 
  2512  0397                     	;# 
  2513  0398                     	;# 
  2514  0399                     	;# 
  2515  0415                     	;# 
  2516  0416                     	;# 
  2517  0417                     	;# 
  2518  041C                     	;# 
  2519  041D                     	;# 
  2520  041E                     	;# 
  2521  0511                     	;# 
  2522  0515                     	;# 
  2523  0617                     	;# 
  2524  0618                     	;# 
  2525  0619                     	;# 
  2526  0619                     	;# 
  2527  061A                     	;# 
  2528  061B                     	;# 
  2529  061C                     	;# 
  2530  061C                     	;# 
  2531  0691                     	;# 
  2532  0692                     	;# 
  2533  0693                     	;# 
  2534  0694                     	;# 
  2535  0695                     	;# 
  2536  0696                     	;# 
  2537  0697                     	;# 
  2538  0698                     	;# 
  2539  0699                     	;# 
  2540  069A                     	;# 
  2541  069B                     	;# 
  2542  069C                     	;# 
  2543  069D                     	;# 
  2544  069E                     	;# 
  2545  069F                     	;# 
  2546  0E0F                     	;# 
  2547  0E10                     	;# 
  2548  0E11                     	;# 
  2549  0E12                     	;# 
  2550  0E13                     	;# 
  2551  0E14                     	;# 
  2552  0E15                     	;# 
  2553  0E17                     	;# 
  2554  0E20                     	;# 
  2555  0E21                     	;# 
  2556  0E22                     	;# 
  2557  0E24                     	;# 
  2558  0E25                     	;# 
  2559  0E28                     	;# 
  2560  0E29                     	;# 
  2561  0E2A                     	;# 
  2562  0E2B                     	;# 
  2563  0E90                     	;# 
  2564  0E91                     	;# 
  2565  0E92                     	;# 
  2566  0E94                     	;# 
  2567  0E95                     	;# 
  2568  0E9C                     	;# 
  2569  0E9D                     	;# 
  2570  0E9E                     	;# 
  2571  0E9F                     	;# 
  2572  0EA0                     	;# 
  2573  0EA1                     	;# 
  2574  0EA2                     	;# 
  2575  0EA3                     	;# 
  2576  0EA4                     	;# 
  2577  0EA5                     	;# 
  2578  0EA6                     	;# 
  2579  0EA7                     	;# 
  2580  0F0F                     	;# 
  2581  0F10                     	;# 
  2582  0F11                     	;# 
  2583  0F12                     	;# 
  2584  0F13                     	;# 
  2585  0F14                     	;# 
  2586  0F15                     	;# 
  2587  0F16                     	;# 
  2588  0F17                     	;# 
  2589  0F18                     	;# 
  2590  0F19                     	;# 
  2591  0F1A                     	;# 
  2592  0F1B                     	;# 
  2593  0F1C                     	;# 
  2594  0F1D                     	;# 
  2595  0F1E                     	;# 
  2596  0F1F                     	;# 
  2597  0F20                     	;# 
  2598  0F21                     	;# 
  2599  0F22                     	;# 
  2600  0F23                     	;# 
  2601  0F24                     	;# 
  2602  0F25                     	;# 
  2603  0F26                     	;# 
  2604  0F27                     	;# 
  2605  0F28                     	;# 
  2606  0F29                     	;# 
  2607  0F2A                     	;# 
  2608  0F2B                     	;# 
  2609  0F2C                     	;# 
  2610  0F2D                     	;# 
  2611  0FE4                     	;# 
  2612  0FE5                     	;# 
  2613  0FE6                     	;# 
  2614  0FE7                     	;# 
  2615  0FE8                     	;# 
  2616  0FE9                     	;# 
  2617  0FEA                     	;# 
  2618  0FEB                     	;# 
  2619  0FED                     	;# 
  2620  0FEE                     	;# 
  2621  0FEF                     	;# 
  2622  0000                     	;# 
  2623  0001                     	;# 
  2624  0002                     	;# 
  2625  0003                     	;# 
  2626  0004                     	;# 
  2627  0005                     	;# 
  2628  0006                     	;# 
  2629  0007                     	;# 
  2630  0008                     	;# 
  2631  0009                     	;# 
  2632  000A                     	;# 
  2633  000B                     	;# 
  2634  000C                     	;# 
  2635  000D                     	;# 
  2636  000E                     	;# 
  2637  0011                     	;# 
  2638  0012                     	;# 
  2639  0013                     	;# 
  2640  0015                     	;# 
  2641  0016                     	;# 
  2642  0016                     	;# 
  2643  0017                     	;# 
  2644  0018                     	;# 
  2645  0019                     	;# 
  2646  001A                     	;# 
  2647  001B                     	;# 
  2648  001C                     	;# 
  2649  008C                     	;# 
  2650  008D                     	;# 
  2651  008E                     	;# 
  2652  0091                     	;# 
  2653  0092                     	;# 
  2654  0093                     	;# 
  2655  0095                     	;# 
  2656  0096                     	;# 
  2657  0097                     	;# 
  2658  0098                     	;# 
  2659  0099                     	;# 
  2660  009A                     	;# 
  2661  009B                     	;# 
  2662  009B                     	;# 
  2663  009C                     	;# 
  2664  009D                     	;# 
  2665  009E                     	;# 
  2666  009F                     	;# 
  2667  010C                     	;# 
  2668  010D                     	;# 
  2669  010E                     	;# 
  2670  0111                     	;# 
  2671  0112                     	;# 
  2672  0113                     	;# 
  2673  0114                     	;# 
  2674  0115                     	;# 
  2675  0116                     	;# 
  2676  0117                     	;# 
  2677  0118                     	;# 
  2678  0119                     	;# 
  2679  011C                     	;# 
  2680  018C                     	;# 
  2681  018D                     	;# 
  2682  018E                     	;# 
  2683  0191                     	;# 
  2684  0191                     	;# 
  2685  0192                     	;# 
  2686  0193                     	;# 
  2687  0193                     	;# 
  2688  0194                     	;# 
  2689  0195                     	;# 
  2690  0196                     	;# 
  2691  0199                     	;# 
  2692  0199                     	;# 
  2693  0199                     	;# 
  2694  019A                     	;# 
  2695  019A                     	;# 
  2696  019A                     	;# 
  2697  019B                     	;# 
  2698  019B                     	;# 
  2699  019B                     	;# 
  2700  019B                     	;# 
  2701  019B                     	;# 
  2702  019C                     	;# 
  2703  019C                     	;# 
  2704  019C                     	;# 
  2705  019D                     	;# 
  2706  019D                     	;# 
  2707  019D                     	;# 
  2708  019E                     	;# 
  2709  019E                     	;# 
  2710  019E                     	;# 
  2711  019F                     	;# 
  2712  019F                     	;# 
  2713  019F                     	;# 
  2714  019F                     	;# 
  2715  019F                     	;# 
  2716  020C                     	;# 
  2717  020D                     	;# 
  2718  020E                     	;# 
  2719  0211                     	;# 
  2720  0211                     	;# 
  2721  0212                     	;# 
  2722  0212                     	;# 
  2723  0213                     	;# 
  2724  0213                     	;# 
  2725  0214                     	;# 
  2726  0214                     	;# 
  2727  0215                     	;# 
  2728  0215                     	;# 
  2729  0215                     	;# 
  2730  0215                     	;# 
  2731  0216                     	;# 
  2732  0216                     	;# 
  2733  0217                     	;# 
  2734  0217                     	;# 
  2735  028C                     	;# 
  2736  028D                     	;# 
  2737  028E                     	;# 
  2738  0291                     	;# 
  2739  0291                     	;# 
  2740  0292                     	;# 
  2741  0293                     	;# 
  2742  0293                     	;# 
  2743  0298                     	;# 
  2744  0298                     	;# 
  2745  0299                     	;# 
  2746  029A                     	;# 
  2747  029A                     	;# 
  2748  029E                     	;# 
  2749  030C                     	;# 
  2750  030D                     	;# 
  2751  030E                     	;# 
  2752  038C                     	;# 
  2753  038D                     	;# 
  2754  038E                     	;# 
  2755  0391                     	;# 
  2756  0392                     	;# 
  2757  0393                     	;# 
  2758  0394                     	;# 
  2759  0395                     	;# 
  2760  0396                     	;# 
  2761  0397                     	;# 
  2762  0398                     	;# 
  2763  0399                     	;# 
  2764  0415                     	;# 
  2765  0416                     	;# 
  2766  0417                     	;# 
  2767  041C                     	;# 
  2768  041D                     	;# 
  2769  041E                     	;# 
  2770  0511                     	;# 
  2771  0515                     	;# 
  2772  0617                     	;# 
  2773  0618                     	;# 
  2774  0619                     	;# 
  2775  0619                     	;# 
  2776  061A                     	;# 
  2777  061B                     	;# 
  2778  061C                     	;# 
  2779  061C                     	;# 
  2780  0691                     	;# 
  2781  0692                     	;# 
  2782  0693                     	;# 
  2783  0694                     	;# 
  2784  0695                     	;# 
  2785  0696                     	;# 
  2786  0697                     	;# 
  2787  0698                     	;# 
  2788  0699                     	;# 
  2789  069A                     	;# 
  2790  069B                     	;# 
  2791  069C                     	;# 
  2792  069D                     	;# 
  2793  069E                     	;# 
  2794  069F                     	;# 
  2795  0E0F                     	;# 
  2796  0E10                     	;# 
  2797  0E11                     	;# 
  2798  0E12                     	;# 
  2799  0E13                     	;# 
  2800  0E14                     	;# 
  2801  0E15                     	;# 
  2802  0E17                     	;# 
  2803  0E20                     	;# 
  2804  0E21                     	;# 
  2805  0E22                     	;# 
  2806  0E24                     	;# 
  2807  0E25                     	;# 
  2808  0E28                     	;# 
  2809  0E29                     	;# 
  2810  0E2A                     	;# 
  2811  0E2B                     	;# 
  2812  0E90                     	;# 
  2813  0E91                     	;# 
  2814  0E92                     	;# 
  2815  0E94                     	;# 
  2816  0E95                     	;# 
  2817  0E9C                     	;# 
  2818  0E9D                     	;# 
  2819  0E9E                     	;# 
  2820  0E9F                     	;# 
  2821  0EA0                     	;# 
  2822  0EA1                     	;# 
  2823  0EA2                     	;# 
  2824  0EA3                     	;# 
  2825  0EA4                     	;# 
  2826  0EA5                     	;# 
  2827  0EA6                     	;# 
  2828  0EA7                     	;# 
  2829  0F0F                     	;# 
  2830  0F10                     	;# 
  2831  0F11                     	;# 
  2832  0F12                     	;# 
  2833  0F13                     	;# 
  2834  0F14                     	;# 
  2835  0F15                     	;# 
  2836  0F16                     	;# 
  2837  0F17                     	;# 
  2838  0F18                     	;# 
  2839  0F19                     	;# 
  2840  0F1A                     	;# 
  2841  0F1B                     	;# 
  2842  0F1C                     	;# 
  2843  0F1D                     	;# 
  2844  0F1E                     	;# 
  2845  0F1F                     	;# 
  2846  0F20                     	;# 
  2847  0F21                     	;# 
  2848  0F22                     	;# 
  2849  0F23                     	;# 
  2850  0F24                     	;# 
  2851  0F25                     	;# 
  2852  0F26                     	;# 
  2853  0F27                     	;# 
  2854  0F28                     	;# 
  2855  0F29                     	;# 
  2856  0F2A                     	;# 
  2857  0F2B                     	;# 
  2858  0F2C                     	;# 
  2859  0F2D                     	;# 
  2860  0FE4                     	;# 
  2861  0FE5                     	;# 
  2862  0FE6                     	;# 
  2863  0FE7                     	;# 
  2864  0FE8                     	;# 
  2865  0FE9                     	;# 
  2866  0FEA                     	;# 
  2867  0FEB                     	;# 
  2868  0FED                     	;# 
  2869  0FEE                     	;# 
  2870  0FEF                     	;# 
  2871  0000                     	;# 
  2872  0001                     	;# 
  2873  0002                     	;# 
  2874  0003                     	;# 
  2875  0004                     	;# 
  2876  0005                     	;# 
  2877  0006                     	;# 
  2878  0007                     	;# 
  2879  0008                     	;# 
  2880  0009                     	;# 
  2881  000A                     	;# 
  2882  000B                     	;# 
  2883  000C                     	;# 
  2884  000D                     	;# 
  2885  000E                     	;# 
  2886  0011                     	;# 
  2887  0012                     	;# 
  2888  0013                     	;# 
  2889  0015                     	;# 
  2890  0016                     	;# 
  2891  0016                     	;# 
  2892  0017                     	;# 
  2893  0018                     	;# 
  2894  0019                     	;# 
  2895  001A                     	;# 
  2896  001B                     	;# 
  2897  001C                     	;# 
  2898  008C                     	;# 
  2899  008D                     	;# 
  2900  008E                     	;# 
  2901  0091                     	;# 
  2902  0092                     	;# 
  2903  0093                     	;# 
  2904  0095                     	;# 
  2905  0096                     	;# 
  2906  0097                     	;# 
  2907  0098                     	;# 
  2908  0099                     	;# 
  2909  009A                     	;# 
  2910  009B                     	;# 
  2911  009B                     	;# 
  2912  009C                     	;# 
  2913  009D                     	;# 
  2914  009E                     	;# 
  2915  009F                     	;# 
  2916  010C                     	;# 
  2917  010D                     	;# 
  2918  010E                     	;# 
  2919  0111                     	;# 
  2920  0112                     	;# 
  2921  0113                     	;# 
  2922  0114                     	;# 
  2923  0115                     	;# 
  2924  0116                     	;# 
  2925  0117                     	;# 
  2926  0118                     	;# 
  2927  0119                     	;# 
  2928  011C                     	;# 
  2929  018C                     	;# 
  2930  018D                     	;# 
  2931  018E                     	;# 
  2932  0191                     	;# 
  2933  0191                     	;# 
  2934  0192                     	;# 
  2935  0193                     	;# 
  2936  0193                     	;# 
  2937  0194                     	;# 
  2938  0195                     	;# 
  2939  0196                     	;# 
  2940  0199                     	;# 
  2941  0199                     	;# 
  2942  0199                     	;# 
  2943  019A                     	;# 
  2944  019A                     	;# 
  2945  019A                     	;# 
  2946  019B                     	;# 
  2947  019B                     	;# 
  2948  019B                     	;# 
  2949  019B                     	;# 
  2950  019B                     	;# 
  2951  019C                     	;# 
  2952  019C                     	;# 
  2953  019C                     	;# 
  2954  019D                     	;# 
  2955  019D                     	;# 
  2956  019D                     	;# 
  2957  019E                     	;# 
  2958  019E                     	;# 
  2959  019E                     	;# 
  2960  019F                     	;# 
  2961  019F                     	;# 
  2962  019F                     	;# 
  2963  019F                     	;# 
  2964  019F                     	;# 
  2965  020C                     	;# 
  2966  020D                     	;# 
  2967  020E                     	;# 
  2968  0211                     	;# 
  2969  0211                     	;# 
  2970  0212                     	;# 
  2971  0212                     	;# 
  2972  0213                     	;# 
  2973  0213                     	;# 
  2974  0214                     	;# 
  2975  0214                     	;# 
  2976  0215                     	;# 
  2977  0215                     	;# 
  2978  0215                     	;# 
  2979  0215                     	;# 
  2980  0216                     	;# 
  2981  0216                     	;# 
  2982  0217                     	;# 
  2983  0217                     	;# 
  2984  028C                     	;# 
  2985  028D                     	;# 
  2986  028E                     	;# 
  2987  0291                     	;# 
  2988  0291                     	;# 
  2989  0292                     	;# 
  2990  0293                     	;# 
  2991  0293                     	;# 
  2992  0298                     	;# 
  2993  0298                     	;# 
  2994  0299                     	;# 
  2995  029A                     	;# 
  2996  029A                     	;# 
  2997  029E                     	;# 
  2998  030C                     	;# 
  2999  030D                     	;# 
  3000  030E                     	;# 
  3001  038C                     	;# 
  3002  038D                     	;# 
  3003  038E                     	;# 
  3004  0391                     	;# 
  3005  0392                     	;# 
  3006  0393                     	;# 
  3007  0394                     	;# 
  3008  0395                     	;# 
  3009  0396                     	;# 
  3010  0397                     	;# 
  3011  0398                     	;# 
  3012  0399                     	;# 
  3013  0415                     	;# 
  3014  0416                     	;# 
  3015  0417                     	;# 
  3016  041C                     	;# 
  3017  041D                     	;# 
  3018  041E                     	;# 
  3019  0511                     	;# 
  3020  0515                     	;# 
  3021  0617                     	;# 
  3022  0618                     	;# 
  3023  0619                     	;# 
  3024  0619                     	;# 
  3025  061A                     	;# 
  3026  061B                     	;# 
  3027  061C                     	;# 
  3028  061C                     	;# 
  3029  0691                     	;# 
  3030  0692                     	;# 
  3031  0693                     	;# 
  3032  0694                     	;# 
  3033  0695                     	;# 
  3034  0696                     	;# 
  3035  0697                     	;# 
  3036  0698                     	;# 
  3037  0699                     	;# 
  3038  069A                     	;# 
  3039  069B                     	;# 
  3040  069C                     	;# 
  3041  069D                     	;# 
  3042  069E                     	;# 
  3043  069F                     	;# 
  3044  0E0F                     	;# 
  3045  0E10                     	;# 
  3046  0E11                     	;# 
  3047  0E12                     	;# 
  3048  0E13                     	;# 
  3049  0E14                     	;# 
  3050  0E15                     	;# 
  3051  0E17                     	;# 
  3052  0E20                     	;# 
  3053  0E21                     	;# 
  3054  0E22                     	;# 
  3055  0E24                     	;# 
  3056  0E25                     	;# 
  3057  0E28                     	;# 
  3058  0E29                     	;# 
  3059  0E2A                     	;# 
  3060  0E2B                     	;# 
  3061  0E90                     	;# 
  3062  0E91                     	;# 
  3063  0E92                     	;# 
  3064  0E94                     	;# 
  3065  0E95                     	;# 
  3066  0E9C                     	;# 
  3067  0E9D                     	;# 
  3068  0E9E                     	;# 
  3069  0E9F                     	;# 
  3070  0EA0                     	;# 
  3071  0EA1                     	;# 
  3072  0EA2                     	;# 
  3073  0EA3                     	;# 
  3074  0EA4                     	;# 
  3075  0EA5                     	;# 
  3076  0EA6                     	;# 
  3077  0EA7                     	;# 
  3078  0F0F                     	;# 
  3079  0F10                     	;# 
  3080  0F11                     	;# 
  3081  0F12                     	;# 
  3082  0F13                     	;# 
  3083  0F14                     	;# 
  3084  0F15                     	;# 
  3085  0F16                     	;# 
  3086  0F17                     	;# 
  3087  0F18                     	;# 
  3088  0F19                     	;# 
  3089  0F1A                     	;# 
  3090  0F1B                     	;# 
  3091  0F1C                     	;# 
  3092  0F1D                     	;# 
  3093  0F1E                     	;# 
  3094  0F1F                     	;# 
  3095  0F20                     	;# 
  3096  0F21                     	;# 
  3097  0F22                     	;# 
  3098  0F23                     	;# 
  3099  0F24                     	;# 
  3100  0F25                     	;# 
  3101  0F26                     	;# 
  3102  0F27                     	;# 
  3103  0F28                     	;# 
  3104  0F29                     	;# 
  3105  0F2A                     	;# 
  3106  0F2B                     	;# 
  3107  0F2C                     	;# 
  3108  0F2D                     	;# 
  3109  0FE4                     	;# 
  3110  0FE5                     	;# 
  3111  0FE6                     	;# 
  3112  0FE7                     	;# 
  3113  0FE8                     	;# 
  3114  0FE9                     	;# 
  3115  0FEA                     	;# 
  3116  0FEB                     	;# 
  3117  0FED                     	;# 
  3118  0FEE                     	;# 
  3119  0FEF                     	;# 
  3120  0000                     	;# 
  3121  0001                     	;# 
  3122  0002                     	;# 
  3123  0003                     	;# 
  3124  0004                     	;# 
  3125  0005                     	;# 
  3126  0006                     	;# 
  3127  0007                     	;# 
  3128  0008                     	;# 
  3129  0009                     	;# 
  3130  000A                     	;# 
  3131  000B                     	;# 
  3132  000C                     	;# 
  3133  000D                     	;# 
  3134  000E                     	;# 
  3135  0011                     	;# 
  3136  0012                     	;# 
  3137  0013                     	;# 
  3138  0015                     	;# 
  3139  0016                     	;# 
  3140  0016                     	;# 
  3141  0017                     	;# 
  3142  0018                     	;# 
  3143  0019                     	;# 
  3144  001A                     	;# 
  3145  001B                     	;# 
  3146  001C                     	;# 
  3147  008C                     	;# 
  3148  008D                     	;# 
  3149  008E                     	;# 
  3150  0091                     	;# 
  3151  0092                     	;# 
  3152  0093                     	;# 
  3153  0095                     	;# 
  3154  0096                     	;# 
  3155  0097                     	;# 
  3156  0098                     	;# 
  3157  0099                     	;# 
  3158  009A                     	;# 
  3159  009B                     	;# 
  3160  009B                     	;# 
  3161  009C                     	;# 
  3162  009D                     	;# 
  3163  009E                     	;# 
  3164  009F                     	;# 
  3165  010C                     	;# 
  3166  010D                     	;# 
  3167  010E                     	;# 
  3168  0111                     	;# 
  3169  0112                     	;# 
  3170  0113                     	;# 
  3171  0114                     	;# 
  3172  0115                     	;# 
  3173  0116                     	;# 
  3174  0117                     	;# 
  3175  0118                     	;# 
  3176  0119                     	;# 
  3177  011C                     	;# 
  3178  018C                     	;# 
  3179  018D                     	;# 
  3180  018E                     	;# 
  3181  0191                     	;# 
  3182  0191                     	;# 
  3183  0192                     	;# 
  3184  0193                     	;# 
  3185  0193                     	;# 
  3186  0194                     	;# 
  3187  0195                     	;# 
  3188  0196                     	;# 
  3189  0199                     	;# 
  3190  0199                     	;# 
  3191  0199                     	;# 
  3192  019A                     	;# 
  3193  019A                     	;# 
  3194  019A                     	;# 
  3195  019B                     	;# 
  3196  019B                     	;# 
  3197  019B                     	;# 
  3198  019B                     	;# 
  3199  019B                     	;# 
  3200  019C                     	;# 
  3201  019C                     	;# 
  3202  019C                     	;# 
  3203  019D                     	;# 
  3204  019D                     	;# 
  3205  019D                     	;# 
  3206  019E                     	;# 
  3207  019E                     	;# 
  3208  019E                     	;# 
  3209  019F                     	;# 
  3210  019F                     	;# 
  3211  019F                     	;# 
  3212  019F                     	;# 
  3213  019F                     	;# 
  3214  020C                     	;# 
  3215  020D                     	;# 
  3216  020E                     	;# 
  3217  0211                     	;# 
  3218  0211                     	;# 
  3219  0212                     	;# 
  3220  0212                     	;# 
  3221  0213                     	;# 
  3222  0213                     	;# 
  3223  0214                     	;# 
  3224  0214                     	;# 
  3225  0215                     	;# 
  3226  0215                     	;# 
  3227  0215                     	;# 
  3228  0215                     	;# 
  3229  0216                     	;# 
  3230  0216                     	;# 
  3231  0217                     	;# 
  3232  0217                     	;# 
  3233  028C                     	;# 
  3234  028D                     	;# 
  3235  028E                     	;# 
  3236  0291                     	;# 
  3237  0291                     	;# 
  3238  0292                     	;# 
  3239  0293                     	;# 
  3240  0293                     	;# 
  3241  0298                     	;# 
  3242  0298                     	;# 
  3243  0299                     	;# 
  3244  029A                     	;# 
  3245  029A                     	;# 
  3246  029E                     	;# 
  3247  030C                     	;# 
  3248  030D                     	;# 
  3249  030E                     	;# 
  3250  038C                     	;# 
  3251  038D                     	;# 
  3252  038E                     	;# 
  3253  0391                     	;# 
  3254  0392                     	;# 
  3255  0393                     	;# 
  3256  0394                     	;# 
  3257  0395                     	;# 
  3258  0396                     	;# 
  3259  0397                     	;# 
  3260  0398                     	;# 
  3261  0399                     	;# 
  3262  0415                     	;# 
  3263  0416                     	;# 
  3264  0417                     	;# 
  3265  041C                     	;# 
  3266  041D                     	;# 
  3267  041E                     	;# 
  3268  0511                     	;# 
  3269  0515                     	;# 
  3270  0617                     	;# 
  3271  0618                     	;# 
  3272  0619                     	;# 
  3273  0619                     	;# 
  3274  061A                     	;# 
  3275  061B                     	;# 
  3276  061C                     	;# 
  3277  061C                     	;# 
  3278  0691                     	;# 
  3279  0692                     	;# 
  3280  0693                     	;# 
  3281  0694                     	;# 
  3282  0695                     	;# 
  3283  0696                     	;# 
  3284  0697                     	;# 
  3285  0698                     	;# 
  3286  0699                     	;# 
  3287  069A                     	;# 
  3288  069B                     	;# 
  3289  069C                     	;# 
  3290  069D                     	;# 
  3291  069E                     	;# 
  3292  069F                     	;# 
  3293  0E0F                     	;# 
  3294  0E10                     	;# 
  3295  0E11                     	;# 
  3296  0E12                     	;# 
  3297  0E13                     	;# 
  3298  0E14                     	;# 
  3299  0E15                     	;# 
  3300  0E17                     	;# 
  3301  0E20                     	;# 
  3302  0E21                     	;# 
  3303  0E22                     	;# 
  3304  0E24                     	;# 
  3305  0E25                     	;# 
  3306  0E28                     	;# 
  3307  0E29                     	;# 
  3308  0E2A                     	;# 
  3309  0E2B                     	;# 
  3310  0E90                     	;# 
  3311  0E91                     	;# 
  3312  0E92                     	;# 
  3313  0E94                     	;# 
  3314  0E95                     	;# 
  3315  0E9C                     	;# 
  3316  0E9D                     	;# 
  3317  0E9E                     	;# 
  3318  0E9F                     	;# 
  3319  0EA0                     	;# 
  3320  0EA1                     	;# 
  3321  0EA2                     	;# 
  3322  0EA3                     	;# 
  3323  0EA4                     	;# 
  3324  0EA5                     	;# 
  3325  0EA6                     	;# 
  3326  0EA7                     	;# 
  3327  0F0F                     	;# 
  3328  0F10                     	;# 
  3329  0F11                     	;# 
  3330  0F12                     	;# 
  3331  0F13                     	;# 
  3332  0F14                     	;# 
  3333  0F15                     	;# 
  3334  0F16                     	;# 
  3335  0F17                     	;# 
  3336  0F18                     	;# 
  3337  0F19                     	;# 
  3338  0F1A                     	;# 
  3339  0F1B                     	;# 
  3340  0F1C                     	;# 
  3341  0F1D                     	;# 
  3342  0F1E                     	;# 
  3343  0F1F                     	;# 
  3344  0F20                     	;# 
  3345  0F21                     	;# 
  3346  0F22                     	;# 
  3347  0F23                     	;# 
  3348  0F24                     	;# 
  3349  0F25                     	;# 
  3350  0F26                     	;# 
  3351  0F27                     	;# 
  3352  0F28                     	;# 
  3353  0F29                     	;# 
  3354  0F2A                     	;# 
  3355  0F2B                     	;# 
  3356  0F2C                     	;# 
  3357  0F2D                     	;# 
  3358  0FE4                     	;# 
  3359  0FE5                     	;# 
  3360  0FE6                     	;# 
  3361  0FE7                     	;# 
  3362  0FE8                     	;# 
  3363  0FE9                     	;# 
  3364  0FEA                     	;# 
  3365  0FEB                     	;# 
  3366  0FED                     	;# 
  3367  0FEE                     	;# 
  3368  0FEF                     	;# 
  3369  0000                     	;# 
  3370  0001                     	;# 
  3371  0002                     	;# 
  3372  0003                     	;# 
  3373  0004                     	;# 
  3374  0005                     	;# 
  3375  0006                     	;# 
  3376  0007                     	;# 
  3377  0008                     	;# 
  3378  0009                     	;# 
  3379  000A                     	;# 
  3380  000B                     	;# 
  3381  000C                     	;# 
  3382  000D                     	;# 
  3383  000E                     	;# 
  3384  0011                     	;# 
  3385  0012                     	;# 
  3386  0013                     	;# 
  3387  0015                     	;# 
  3388  0016                     	;# 
  3389  0016                     	;# 
  3390  0017                     	;# 
  3391  0018                     	;# 
  3392  0019                     	;# 
  3393  001A                     	;# 
  3394  001B                     	;# 
  3395  001C                     	;# 
  3396  008C                     	;# 
  3397  008D                     	;# 
  3398  008E                     	;# 
  3399  0091                     	;# 
  3400  0092                     	;# 
  3401  0093                     	;# 
  3402  0095                     	;# 
  3403  0096                     	;# 
  3404  0097                     	;# 
  3405  0098                     	;# 
  3406  0099                     	;# 
  3407  009A                     	;# 
  3408  009B                     	;# 
  3409  009B                     	;# 
  3410  009C                     	;# 
  3411  009D                     	;# 
  3412  009E                     	;# 
  3413  009F                     	;# 
  3414  010C                     	;# 
  3415  010D                     	;# 
  3416  010E                     	;# 
  3417  0111                     	;# 
  3418  0112                     	;# 
  3419  0113                     	;# 
  3420  0114                     	;# 
  3421  0115                     	;# 
  3422  0116                     	;# 
  3423  0117                     	;# 
  3424  0118                     	;# 
  3425  0119                     	;# 
  3426  011C                     	;# 
  3427  018C                     	;# 
  3428  018D                     	;# 
  3429  018E                     	;# 
  3430  0191                     	;# 
  3431  0191                     	;# 
  3432  0192                     	;# 
  3433  0193                     	;# 
  3434  0193                     	;# 
  3435  0194                     	;# 
  3436  0195                     	;# 
  3437  0196                     	;# 
  3438  0199                     	;# 
  3439  0199                     	;# 
  3440  0199                     	;# 
  3441  019A                     	;# 
  3442  019A                     	;# 
  3443  019A                     	;# 
  3444  019B                     	;# 
  3445  019B                     	;# 
  3446  019B                     	;# 
  3447  019B                     	;# 
  3448  019B                     	;# 
  3449  019C                     	;# 
  3450  019C                     	;# 
  3451  019C                     	;# 
  3452  019D                     	;# 
  3453  019D                     	;# 
  3454  019D                     	;# 
  3455  019E                     	;# 
  3456  019E                     	;# 
  3457  019E                     	;# 
  3458  019F                     	;# 
  3459  019F                     	;# 
  3460  019F                     	;# 
  3461  019F                     	;# 
  3462  019F                     	;# 
  3463  020C                     	;# 
  3464  020D                     	;# 
  3465  020E                     	;# 
  3466  0211                     	;# 
  3467  0211                     	;# 
  3468  0212                     	;# 
  3469  0212                     	;# 
  3470  0213                     	;# 
  3471  0213                     	;# 
  3472  0214                     	;# 
  3473  0214                     	;# 
  3474  0215                     	;# 
  3475  0215                     	;# 
  3476  0215                     	;# 
  3477  0215                     	;# 
  3478  0216                     	;# 
  3479  0216                     	;# 
  3480  0217                     	;# 
  3481  0217                     	;# 
  3482  028C                     	;# 
  3483  028D                     	;# 
  3484  028E                     	;# 
  3485  0291                     	;# 
  3486  0291                     	;# 
  3487  0292                     	;# 
  3488  0293                     	;# 
  3489  0293                     	;# 
  3490  0298                     	;# 
  3491  0298                     	;# 
  3492  0299                     	;# 
  3493  029A                     	;# 
  3494  029A                     	;# 
  3495  029E                     	;# 
  3496  030C                     	;# 
  3497  030D                     	;# 
  3498  030E                     	;# 
  3499  038C                     	;# 
  3500  038D                     	;# 
  3501  038E                     	;# 
  3502  0391                     	;# 
  3503  0392                     	;# 
  3504  0393                     	;# 
  3505  0394                     	;# 
  3506  0395                     	;# 
  3507  0396                     	;# 
  3508  0397                     	;# 
  3509  0398                     	;# 
  3510  0399                     	;# 
  3511  0415                     	;# 
  3512  0416                     	;# 
  3513  0417                     	;# 
  3514  041C                     	;# 
  3515  041D                     	;# 
  3516  041E                     	;# 
  3517  0511                     	;# 
  3518  0515                     	;# 
  3519  0617                     	;# 
  3520  0618                     	;# 
  3521  0619                     	;# 
  3522  0619                     	;# 
  3523  061A                     	;# 
  3524  061B                     	;# 
  3525  061C                     	;# 
  3526  061C                     	;# 
  3527  0691                     	;# 
  3528  0692                     	;# 
  3529  0693                     	;# 
  3530  0694                     	;# 
  3531  0695                     	;# 
  3532  0696                     	;# 
  3533  0697                     	;# 
  3534  0698                     	;# 
  3535  0699                     	;# 
  3536  069A                     	;# 
  3537  069B                     	;# 
  3538  069C                     	;# 
  3539  069D                     	;# 
  3540  069E                     	;# 
  3541  069F                     	;# 
  3542  0E0F                     	;# 
  3543  0E10                     	;# 
  3544  0E11                     	;# 
  3545  0E12                     	;# 
  3546  0E13                     	;# 
  3547  0E14                     	;# 
  3548  0E15                     	;# 
  3549  0E17                     	;# 
  3550  0E20                     	;# 
  3551  0E21                     	;# 
  3552  0E22                     	;# 
  3553  0E24                     	;# 
  3554  0E25                     	;# 
  3555  0E28                     	;# 
  3556  0E29                     	;# 
  3557  0E2A                     	;# 
  3558  0E2B                     	;# 
  3559  0E90                     	;# 
  3560  0E91                     	;# 
  3561  0E92                     	;# 
  3562  0E94                     	;# 
  3563  0E95                     	;# 
  3564  0E9C                     	;# 
  3565  0E9D                     	;# 
  3566  0E9E                     	;# 
  3567  0E9F                     	;# 
  3568  0EA0                     	;# 
  3569  0EA1                     	;# 
  3570  0EA2                     	;# 
  3571  0EA3                     	;# 
  3572  0EA4                     	;# 
  3573  0EA5                     	;# 
  3574  0EA6                     	;# 
  3575  0EA7                     	;# 
  3576  0F0F                     	;# 
  3577  0F10                     	;# 
  3578  0F11                     	;# 
  3579  0F12                     	;# 
  3580  0F13                     	;# 
  3581  0F14                     	;# 
  3582  0F15                     	;# 
  3583  0F16                     	;# 
  3584  0F17                     	;# 
  3585  0F18                     	;# 
  3586  0F19                     	;# 
  3587  0F1A                     	;# 
  3588  0F1B                     	;# 
  3589  0F1C                     	;# 
  3590  0F1D                     	;# 
  3591  0F1E                     	;# 
  3592  0F1F                     	;# 
  3593  0F20                     	;# 
  3594  0F21                     	;# 
  3595  0F22                     	;# 
  3596  0F23                     	;# 
  3597  0F24                     	;# 
  3598  0F25                     	;# 
  3599  0F26                     	;# 
  3600  0F27                     	;# 
  3601  0F28                     	;# 
  3602  0F29                     	;# 
  3603  0F2A                     	;# 
  3604  0F2B                     	;# 
  3605  0F2C                     	;# 
  3606  0F2D                     	;# 
  3607  0FE4                     	;# 
  3608  0FE5                     	;# 
  3609  0FE6                     	;# 
  3610  0FE7                     	;# 
  3611  0FE8                     	;# 
  3612  0FE9                     	;# 
  3613  0FEA                     	;# 
  3614  0FEB                     	;# 
  3615  0FED                     	;# 
  3616  0FEE                     	;# 
  3617  0FEF                     	;# 
  3618                           
  3619 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  3620  0000                     
  3621 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  3622  0000                     
  3623 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  3624  0000                     
  3625                           	psect	idataCOMMON
  3626  0003                     __pidataCOMMON:
  3627                           
  3628                           ;initializer for _dc_frequency_flag
  3629  0003  3401               	retlw	1
  3630                           
  3631                           	psect	idataBANK1
  3632  0BF1                     __pidataBANK1:
  3633                           
  3634                           ;initializer for _maxFrequencyIndex
  3635  0BF1  340A               	retlw	10
  3636  0BF2  3400               	retlw	0
  3637                           
  3638                           ;initializer for _maxCurrentIndex
  3639  0BF3  340A               	retlw	10
  3640  0BF4  3400               	retlw	0
  3641                           
  3642                           ;initializer for _currentIsOn
  3643  0BF5  3401               	retlw	1
  3644                           
  3645                           ;initializer for _currentValue
  3646  0BF6  3400               	retlw	0
  3647  0BF7  3400               	retlw	0
  3648  0BF8  341E               	retlw	30
  3649  0BF9  3400               	retlw	0
  3650  0BFA  3432               	retlw	50
  3651  0BFB  3400               	retlw	0
  3652  0BFC  3446               	retlw	70
  3653  0BFD  3400               	retlw	0
  3654  0BFE  345A               	retlw	90
  3655  0BFF  3400               	retlw	0
  3656  0C00  346E               	retlw	110
  3657  0C01  3400               	retlw	0
  3658  0C02  3482               	retlw	130
  3659  0C03  3400               	retlw	0
  3660  0C04  34A0               	retlw	160
  3661  0C05  3400               	retlw	0
  3662  0C06  34DC               	retlw	220
  3663  0C07  3400               	retlw	0
  3664  0C08  34FA               	retlw	250
  3665  0C09  3400               	retlw	0
  3666                           
  3667                           	psect	idataBANK2
  3668  0B97                     __pidataBANK2:
  3669                           
  3670                           ;initializer for _frequencyValue
  3671  0B97  3400               	retlw	0
  3672  0B98  3400               	retlw	0
  3673  0B99  3401               	retlw	1
  3674  0B9A  3400               	retlw	0
  3675  0B9B  3441               	retlw	65
  3676  0B9C  3400               	retlw	0
  3677  0B9D  3446               	retlw	70
  3678  0B9E  3400               	retlw	0
  3679  0B9F  344B               	retlw	75
  3680  0BA0  3400               	retlw	0
  3681  0BA1  3450               	retlw	80
  3682  0BA2  3400               	retlw	0
  3683  0BA3  3464               	retlw	100
  3684  0BA4  3400               	retlw	0
  3685  0BA5  3478               	retlw	120
  3686  0BA6  3400               	retlw	0
  3687  0BA7  3482               	retlw	130
  3688  0BA8  3400               	retlw	0
  3689  0BA9  348C               	retlw	140
  3690  0BAA  3400               	retlw	0
  3691                           
  3692                           	psect	stringtext1
  3693  0880                     __pstringtext1:
  3694  0880                     main@BATTERY_THRESHOLD:
  3695  0880  34D0               	retlw	208
  3696  0881  3407               	retlw	7
  3697  0882                     __end_ofmain@BATTERY_THRESHOLD:
  3698                           
  3699                           	psect	stringtext2
  3700  0882                     __pstringtext2:
  3701  0882                     main@BATTERY_NUM_LOW_READINGS:
  3702  0882  3410               	retlw	16
  3703  0883  3427               	retlw	39
  3704  0884                     __end_ofmain@BATTERY_NUM_LOW_READINGS:
  3705  0FE0                     _HEF_persistent_state_absaddr	set	4064
  3706  0FE0                     _HEF_persistent_state_absaddr	set	4064
  3707                           
  3708                           	psect	_HEF_persistent_state_text
  3709  0FE0                     __p_HEF_persistent_state_text:
  3710  0FE0                     _HEF_persistent_state:
  3711  0FE0  3405               	retlw	5
  3712  0FE1  3403               	retlw	3
  3713  0FE2  3400               	retlw	0
  3714  0FE3  3400               	retlw	0
  3715  0FE4  3400               	retlw	0
  3716  0FE5  3400               	retlw	0
  3717  0FE6  3400               	retlw	0
  3718  0FE7  3400               	retlw	0
  3719  0FE8  3400               	retlw	0
  3720  0FE9  3400               	retlw	0
  3721  0FEA  3400               	retlw	0
  3722  0FEB  3400               	retlw	0
  3723  0FEC  3400               	retlw	0
  3724  0FED  3400               	retlw	0
  3725  0FEE  3400               	retlw	0
  3726  0FEF  3400               	retlw	0
  3727  0FF0  3400               	retlw	0
  3728  0FF1  3400               	retlw	0
  3729  0FF2  3400               	retlw	0
  3730  0FF3  3400               	retlw	0
  3731  0FF4  3400               	retlw	0
  3732  0FF5  3400               	retlw	0
  3733  0FF6  3400               	retlw	0
  3734  0FF7  3400               	retlw	0
  3735  0FF8  3400               	retlw	0
  3736  0FF9  3400               	retlw	0
  3737  0FFA  3400               	retlw	0
  3738  0FFB  3400               	retlw	0
  3739  0FFC  3400               	retlw	0
  3740  0FFD  3400               	retlw	0
  3741  0FFE  3400               	retlw	0
  3742  0FFF  3400               	retlw	0
  3743  1000                     __end_of_HEF_persistent_state:
  3744                           
  3745                           	psect	nvBANK1
  3746  00D3                     __pnvBANK1:
  3747  00D3                     _TMR1_InterruptHandler:
  3748  00D3                     	ds	2
  3749  00D5                     _timer1ReloadVal:
  3750  00D5                     	ds	2
  3751  00D7                     _TMR4_InterruptHandler:
  3752  00D7                     	ds	2
  3753  00D9                     _TMR0_InterruptHandler:
  3754  00D9                     	ds	2
  3755  00DB                     _INT_InterruptHandler:
  3756  00DB                     	ds	2
  3757  00DD                     _EUSART_ErrorHandler:
  3758  00DD                     	ds	2
  3759  00DF                     _EUSART_OverrunErrorHandler:
  3760  00DF                     	ds	2
  3761  00E1                     _EUSART_FramingErrorHandler:
  3762  00E1                     	ds	2
  3763  00E3                     _frequencyIndex:
  3764  00E3                     	ds	2
  3765  00E5                     _currentIndex:
  3766  00E5                     	ds	2
  3767  0016                     _TMR1	set	22
  3768  0018                     _T1CONbits	set	24
  3769  001C                     _T2CONbits	set	28
  3770  001C                     _T2CON	set	28
  3771  001A                     _TMR2	set	26
  3772  001B                     _PR2	set	27
  3773  0015                     _TMR0	set	21
  3774  0011                     _PIR1bits	set	17
  3775  0012                     _PIR2bits	set	18
  3776  000B                     _INTCONbits	set	11
  3777  009D                     _ADCON0bits	set	157
  3778  009E                     _ADCON1	set	158
  3779  009D                     _ADCON0	set	157
  3780  0095                     _OPTION_REG	set	149
  3781  0091                     _PIE1bits	set	145
  3782  0092                     _PIE2bits	set	146
  3783  0095                     _OPTION_REGbits	set	149
  3784  008E                     _TRISC	set	142
  3785  008D                     _TRISB	set	141
  3786  008C                     _TRISA	set	140
  3787  0097                     _WDTCON	set	151
  3788  0098                     _OSCTUNE	set	152
  3789  009A                     _OSCSTAT	set	154
  3790  0099                     _OSCCON	set	153
  3791  009B                     _ADRES	set	155
  3792  0117                     _FVRCONbits	set	279
  3793  0117                     _FVRCON	set	279
  3794  010E                     _LATC	set	270
  3795  010D                     _LATB	set	269
  3796  010C                     _LATA	set	268
  3797  0116                     _BORCON	set	278
  3798  0119                     _DAC1CON1	set	281
  3799  0118                     _DAC1CON0	set	280
  3800  0196                     _PMCON2	set	406
  3801  0193                     _PMDATL	set	403
  3802  0194                     _PMDATH	set	404
  3803  0195                     _PMCON1bits	set	405
  3804  0192                     _PMADRH	set	402
  3805  0191                     _PMADRL	set	401
  3806  019A                     _TX1REG	set	410
  3807  0199                     _RC1REG	set	409
  3808  019D                     _RC1STAbits	set	413
  3809  019E                     _TX1STAbits	set	414
  3810  019C                     _SP1BRGH	set	412
  3811  019B                     _SP1BRGL	set	411
  3812  019E                     _TX1STA	set	414
  3813  019D                     _RC1STA	set	413
  3814  019F                     _BAUD1CON	set	415
  3815  018C                     _ANSELA	set	396
  3816  018D                     _ANSELB	set	397
  3817  018E                     _ANSELC	set	398
  3818  020E                     _WPUC	set	526
  3819  020C                     _WPUA	set	524
  3820  020D                     _WPUB	set	525
  3821  0291                     _CCPR1L	set	657
  3822  0293                     _CCP1CONbits	set	659
  3823  029E                     _CCPTMRSbits	set	670
  3824  028E                     _ODCONC	set	654
  3825  028D                     _ODCONB	set	653
  3826  028C                     _ODCONA	set	652
  3827  030E                     _SLRCONC	set	782
  3828  030D                     _SLRCONB	set	781
  3829  030C                     _SLRCONA	set	780
  3830  038E                     _INLVLC	set	910
  3831  038D                     _INLVLB	set	909
  3832  038C                     _INLVLA	set	908
  3833  0417                     _T4CONbits	set	1047
  3834  0417                     _T4CON	set	1047
  3835  0415                     _TMR4	set	1045
  3836  0416                     _PR4	set	1046
  3837  0515                     _OPA2CON	set	1301
  3838  0511                     _OPA1CON	set	1297
  3839  061C                     _PWM4CONbits	set	1564
  3840  061A                     _PWM4DCLbits	set	1562
  3841  061B                     _PWM4DCH	set	1563
  3842  0619                     _PWM3CONbits	set	1561
  3843  0617                     _PWM3DCLbits	set	1559
  3844  0618                     _PWM3DCH	set	1560
  3845  0E24                     _RXPPS	set	3620
  3846  0E10                     _INTPPS	set	3600
  3847  0EA5                     _RC5PPS	set	3749
  3848  0E95                     _RA5PPS	set	3733
  3849  0EA4                     _RC4PPS	set	3748
  3850  0E9F                     _RB7PPS	set	3743
  3851                           
  3852                           	psect	stringtext3
  3853  0800                     __pstringtext3:
  3854  0800                     STR_6:
  3855  0800  340A               	retlw	10
  3856  0801  3420               	retlw	32	;' '
  3857  0802  3463               	retlw	99	;'c'
  3858  0803  3475               	retlw	117	;'u'
  3859  0804  3472               	retlw	114	;'r'
  3860  0805  3472               	retlw	114	;'r'
  3861  0806  3465               	retlw	101	;'e'
  3862  0807  346E               	retlw	110	;'n'
  3863  0808  3474               	retlw	116	;'t'
  3864  0809  3420               	retlw	32	;' '
  3865  080A  3476               	retlw	118	;'v'
  3866  080B  3461               	retlw	97	;'a'
  3867  080C  346C               	retlw	108	;'l'
  3868  080D  3475               	retlw	117	;'u'
  3869  080E  3465               	retlw	101	;'e'
  3870  080F  3420               	retlw	32	;' '
  3871  0810  3473               	retlw	115	;'s'
  3872  0811  3465               	retlw	101	;'e'
  3873  0812  346C               	retlw	108	;'l'
  3874  0813  3465               	retlw	101	;'e'
  3875  0814  3463               	retlw	99	;'c'
  3876  0815  3474               	retlw	116	;'t'
  3877  0816  3465               	retlw	101	;'e'
  3878  0817  3464               	retlw	100	;'d'
  3879  0818  3400               	retlw	0
  3880                           
  3881                           	psect	stringtext4
  3882  0819                     __pstringtext4:
  3883  0819                     STR_5:
  3884  0819  340A               	retlw	10
  3885  081A  3420               	retlw	32	;' '
  3886  081B  3472               	retlw	114	;'r'
  3887  081C  3465               	retlw	101	;'e'
  3888  081D  3473               	retlw	115	;'s'
  3889  081E  3465               	retlw	101	;'e'
  3890  081F  3474               	retlw	116	;'t'
  3891  0820  3420               	retlw	32	;' '
  3892  0821  3476               	retlw	118	;'v'
  3893  0822  3461               	retlw	97	;'a'
  3894  0823  346C               	retlw	108	;'l'
  3895  0824  3475               	retlw	117	;'u'
  3896  0825  3465               	retlw	101	;'e'
  3897  0826  3420               	retlw	32	;' '
  3898  0827  3473               	retlw	115	;'s'
  3899  0828  3465               	retlw	101	;'e'
  3900  0829  346C               	retlw	108	;'l'
  3901  082A  3465               	retlw	101	;'e'
  3902  082B  3463               	retlw	99	;'c'
  3903  082C  3474               	retlw	116	;'t'
  3904  082D  3465               	retlw	101	;'e'
  3905  082E  3464               	retlw	100	;'d'
  3906  082F  3400               	retlw	0
  3907                           
  3908                           	psect	stringtext5
  3909  0830                     __pstringtext5:
  3910  0830                     STR_1:
  3911  0830  340A               	retlw	10
  3912  0831  3420               	retlw	32	;' '
  3913  0832  3446               	retlw	70	;'F'
  3914  0833  3472               	retlw	114	;'r'
  3915  0834  3465               	retlw	101	;'e'
  3916  0835  3471               	retlw	113	;'q'
  3917  0836  3475               	retlw	117	;'u'
  3918  0837  3465               	retlw	101	;'e'
  3919  0838  346E               	retlw	110	;'n'
  3920  0839  3463               	retlw	99	;'c'
  3921  083A  3479               	retlw	121	;'y'
  3922  083B  3420               	retlw	32	;' '
  3923  083C  3473               	retlw	115	;'s'
  3924  083D  3465               	retlw	101	;'e'
  3925  083E  346C               	retlw	108	;'l'
  3926  083F  3465               	retlw	101	;'e'
  3927  0840  3463               	retlw	99	;'c'
  3928  0841  3474               	retlw	116	;'t'
  3929  0842  3465               	retlw	101	;'e'
  3930  0843  3464               	retlw	100	;'d'
  3931  0844  3400               	retlw	0
  3932                           
  3933                           	psect	stringtext6
  3934  0845                     __pstringtext6:
  3935  0845                     STR_4:
  3936  0845  340A               	retlw	10
  3937  0846  3420               	retlw	32	;' '
  3938  0847  3464               	retlw	100	;'d'
  3939  0848  3465               	retlw	101	;'e'
  3940  0849  3463               	retlw	99	;'c'
  3941  084A  3472               	retlw	114	;'r'
  3942  084B  3465               	retlw	101	;'e'
  3943  084C  3461               	retlw	97	;'a'
  3944  084D  3473               	retlw	115	;'s'
  3945  084E  3465               	retlw	101	;'e'
  3946  084F  3420               	retlw	32	;' '
  3947  0850  3473               	retlw	115	;'s'
  3948  0851  3465               	retlw	101	;'e'
  3949  0852  346C               	retlw	108	;'l'
  3950  0853  3465               	retlw	101	;'e'
  3951  0854  3463               	retlw	99	;'c'
  3952  0855  3474               	retlw	116	;'t'
  3953  0856  3465               	retlw	101	;'e'
  3954  0857  3464               	retlw	100	;'d'
  3955  0858  3400               	retlw	0
  3956                           
  3957                           	psect	stringtext7
  3958  0859                     __pstringtext7:
  3959  0859                     STR_3:
  3960  0859  340A               	retlw	10
  3961  085A  3420               	retlw	32	;' '
  3962  085B  3469               	retlw	105	;'i'
  3963  085C  346E               	retlw	110	;'n'
  3964  085D  3463               	retlw	99	;'c'
  3965  085E  3472               	retlw	114	;'r'
  3966  085F  3465               	retlw	101	;'e'
  3967  0860  3461               	retlw	97	;'a'
  3968  0861  3473               	retlw	115	;'s'
  3969  0862  3465               	retlw	101	;'e'
  3970  0863  3420               	retlw	32	;' '
  3971  0864  3473               	retlw	115	;'s'
  3972  0865  3465               	retlw	101	;'e'
  3973  0866  346C               	retlw	108	;'l'
  3974  0867  3465               	retlw	101	;'e'
  3975  0868  3463               	retlw	99	;'c'
  3976  0869  3474               	retlw	116	;'t'
  3977  086A  3465               	retlw	101	;'e'
  3978  086B  3464               	retlw	100	;'d'
  3979  086C  3400               	retlw	0
  3980                           
  3981                           	psect	stringtext8
  3982  086D                     __pstringtext8:
  3983  086D                     STR_2:
  3984  086D  340A               	retlw	10
  3985  086E  3420               	retlw	32	;' '
  3986  086F  3463               	retlw	99	;'c'
  3987  0870  3475               	retlw	117	;'u'
  3988  0871  3472               	retlw	114	;'r'
  3989  0872  3472               	retlw	114	;'r'
  3990  0873  3465               	retlw	101	;'e'
  3991  0874  346E               	retlw	110	;'n'
  3992  0875  3474               	retlw	116	;'t'
  3993  0876  3420               	retlw	32	;' '
  3994  0877  3473               	retlw	115	;'s'
  3995  0878  3465               	retlw	101	;'e'
  3996  0879  346C               	retlw	108	;'l'
  3997  087A  3465               	retlw	101	;'e'
  3998  087B  3463               	retlw	99	;'c'
  3999  087C  3474               	retlw	116	;'t'
  4000  087D  3465               	retlw	101	;'e'
  4001  087E  3464               	retlw	100	;'d'
  4002  087F  3400               	retlw	0
  4003                           
  4004                           	psect	stringtext9
  4005  0000                     __pstringtext9:
  4006  0800                     
  4007                           	psect	cinit
  4008  004D                     start_initialization:	
  4009                           ; #config settings
  4010                           
  4011  004D                     __initialization:
  4012                           
  4013                           ; Initialize objects allocated to COMMON
  4014  004D  3180  2003  3180   	fcall	__pidataCOMMON	;fetch initializer
  4015  0050  00FA               	movwf	__pdataCOMMON& (0+127)
  4016                           
  4017                           ; Initialize objects allocated to BANK1
  4018  0051  30F1               	movlw	low __pidataBANK1
  4019  0052  0084               	movwf	4
  4020  0053  308B               	movlw	(high __pidataBANK1)| (0+128)
  4021  0054  0085               	movwf	5
  4022  0055  30BA               	movlw	low __pdataBANK1
  4023  0056  0086               	movwf	6
  4024  0057  3000               	movlw	high __pdataBANK1
  4025  0058  0087               	movwf	7
  4026  0059  3019               	movlw	25
  4027  005A  318B  2307  3180   	fcall	init_ram
  4028                           
  4029                           ; Initialize objects allocated to BANK2
  4030  005D  3097               	movlw	low __pidataBANK2
  4031  005E  0084               	movwf	4
  4032  005F  308B               	movlw	(high __pidataBANK2)| (0+128)
  4033  0060  0085               	movwf	5
  4034  0061  3040               	movlw	low __pdataBANK2
  4035  0062  0086               	movwf	6
  4036  0063  3001               	movlw	high __pdataBANK2
  4037  0064  0087               	movwf	7
  4038  0065  3014               	movlw	20
  4039  0066  318B  2307  3180   	fcall	init_ram
  4040                           
  4041                           ; Clear objects allocated to COMMON
  4042  0069  01F8               	clrf	__pbssCOMMON& (0+127)
  4043  006A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  4044                           
  4045                           ; Clear objects allocated to BANK1
  4046  006B  30A0               	movlw	low __pbssBANK1
  4047  006C  0084               	movwf	4
  4048  006D  3000               	movlw	high __pbssBANK1
  4049  006E  0085               	movwf	5
  4050  006F  301A               	movlw	26
  4051  0070  318B  2301  3180   	fcall	clear_ram0
  4052                           
  4053                           ; Clear objects allocated to BANK2
  4054  0073  3020               	movlw	low __pbssBANK2
  4055  0074  0084               	movwf	4
  4056  0075  3001               	movlw	high __pbssBANK2
  4057  0076  0085               	movwf	5
  4058  0077  3020               	movlw	32
  4059  0078  318B  2301  3180   	fcall	clear_ram0
  4060                           
  4061                           ; Clear objects allocated to BANK3
  4062  007B  30A0               	movlw	low __pbssBANK3
  4063  007C  0084               	movwf	4
  4064  007D  3001               	movlw	high __pbssBANK3
  4065  007E  0085               	movwf	5
  4066  007F  3021               	movlw	33
  4067  0080  318B  2301  3180   	fcall	clear_ram0
  4068  0083                     end_of_initialization:	
  4069                           ;End of C runtime variable initialization code
  4070                           
  4071  0083                     __end_of__initialization:
  4072  0083  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4073  0084  0020               	movlb	0
  4074  0085  3184  2C62         	ljmp	_main	;jump to C main() function
  4075                           
  4076                           	psect	bssCOMMON
  4077  0078                     __pbssCOMMON:
  4078  0078                     _interfaceState:
  4079  0078                     	ds	1
  4080  0079                     _timer0ReloadVal:
  4081  0079                     	ds	1
  4082                           
  4083                           	psect	dataCOMMON
  4084  007A                     __pdataCOMMON:
  4085  007A                     _dc_frequency_flag:
  4086  007A                     	ds	1
  4087                           
  4088                           	psect	bssBANK1
  4089  00A0                     __pbssBANK1:
  4090  00A0                     _nout:
  4091  00A0                     	ds	2
  4092  00A2                     _width:
  4093  00A2                     	ds	2
  4094  00A4                     _prec:
  4095  00A4                     	ds	2
  4096  00A6                     _flags:
  4097  00A6                     	ds	2
  4098  00A8                     _Vdd_mv:
  4099  00A8                     	ds	2
  4100  00AA                     _microamps:
  4101  00AA                     	ds	2
  4102  00AC                     _LED_blue:
  4103  00AC                     	ds	1
  4104  00AD                     _LED_green:
  4105  00AD                     	ds	1
  4106  00AE                     _LED_red:
  4107  00AE                     	ds	1
  4108  00AF                     _toggle:
  4109  00AF                     	ds	1
  4110  00B0                     _latchTester:
  4111  00B0                     	ds	1
  4112  00B1                     _oneHzCounter:
  4113  00B1                     	ds	1
  4114  00B2                     _dac_value:
  4115  00B2                     	ds	1
  4116  00B3                     _eusartRxLastError:
  4117  00B3                     	ds	1
  4118  00B4                     _ir_code:
  4119  00B4                     	ds	6
  4120                           
  4121                           	psect	dataBANK1
  4122  00BA                     __pdataBANK1:
  4123  00BA                     _maxFrequencyIndex:
  4124  00BA                     	ds	2
  4125  00BC                     _maxCurrentIndex:
  4126  00BC                     	ds	2
  4127  00BE                     _currentIsOn:
  4128  00BE                     	ds	1
  4129  00BF                     _currentValue:
  4130  00BF                     	ds	20
  4131                           
  4132                           	psect	bssBANK2
  4133  0120                     __pbssBANK2:
  4134  0120                     _dbuf:
  4135  0120                     	ds	32
  4136                           
  4137                           	psect	dataBANK2
  4138  0140                     __pdataBANK2:
  4139  0140                     _frequencyValue:
  4140  0140                     	ds	20
  4141                           
  4142                           	psect	bssBANK3
  4143  01A0                     __pbssBANK3:
  4144  01A0                     _stats:
  4145  01A0                     	ds	33
  4146                           
  4147                           	psect	inittext
  4148  0B07                     init_ram:
  4149  0B07  00FE               	movwf	btemp
  4150  0B08                     initloop:
  4151  0B08  0012               	moviw fsr0++
  4152  0B09  001E               	movwi fsr1++
  4153  0B0A  0BFE               	decfsz	btemp,f
  4154  0B0B  2B08               	goto	initloop
  4155  0B0C  3400               	retlw	0
  4156                           
  4157                           	psect	clrtext
  4158  0B01                     clear_ram0:	
  4159                           ;	Called with FSR0 containing the base address, and
  4160                           ;	WREG with the size to clear
  4161                           
  4162  0B01  0064               	clrwdt	;clear the watchdog before getting into this loop
  4163  0B02                     clrloop0:
  4164  0B02  0180               	clrf	0	;clear RAM location pointed to by FSR
  4165  0B03  3101               	addfsr 0,1
  4166  0B04  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4167  0B05  2B02               	goto	clrloop0	;have we reached the end yet?
  4168  0B06  3400               	retlw	0	;all done for this memory range, return
  4169                           
  4170                           	psect	cstackBANK1
  4171  00E7                     __pcstackBANK1:
  4172  00E7                     ??_process_remote_command:
  4173                           
  4174                           ; 1 bytes @ 0x0
  4175  00E7                     	ds	2
  4176  00E9                     process_remote_command@code:
  4177                           
  4178                           ; 1 bytes @ 0x2
  4179  00E9                     	ds	1
  4180  00EA                     ??_main:
  4181                           
  4182                           ; 1 bytes @ 0x3
  4183  00EA                     	ds	1
  4184  00EB                     main@low_reading_count:
  4185                           
  4186                           ; 2 bytes @ 0x4
  4187  00EB                     	ds	2
  4188  00ED                     main@batt_mv:
  4189                           
  4190                           ; 2 bytes @ 0x6
  4191  00ED                     	ds	2
  4192                           
  4193                           	psect	cstackCOMMON
  4194  0070                     __pcstackCOMMON:
  4195  0070                     ?_PIN_MANAGER_Initialize:
  4196  0070                     ?_OSCILLATOR_Initialize:	
  4197                           ; 1 bytes @ 0x0
  4198                           
  4199  0070                     ?_WDT_Initialize:	
  4200                           ; 1 bytes @ 0x0
  4201                           
  4202  0070                     ?_OPA1_Initialize:	
  4203                           ; 1 bytes @ 0x0
  4204                           
  4205  0070                     ?_TMR4_Initialize:	
  4206                           ; 1 bytes @ 0x0
  4207                           
  4208  0070                     ?_OPA2_Initialize:	
  4209                           ; 1 bytes @ 0x0
  4210                           
  4211  0070                     ?_TMR1_Initialize:	
  4212                           ; 1 bytes @ 0x0
  4213                           
  4214  0070                     ?_TMR2_Initialize:	
  4215                           ; 1 bytes @ 0x0
  4216                           
  4217  0070                     ?_EXT_INT_Initialize:	
  4218                           ; 1 bytes @ 0x0
  4219                           
  4220  0070                     ?_TMR0_Initialize:	
  4221                           ; 1 bytes @ 0x0
  4222                           
  4223  0070                     ?_EUSART_Initialize:	
  4224                           ; 1 bytes @ 0x0
  4225                           
  4226  0070                     ?_TMR0_ISR:	
  4227                           ; 1 bytes @ 0x0
  4228                           
  4229  0070                     ??_TMR0_ISR:	
  4230                           ; 1 bytes @ 0x0
  4231                           
  4232  0070                     ?_INT_ISR:	
  4233                           ; 1 bytes @ 0x0
  4234                           
  4235  0070                     ?_TMR4_ISR:	
  4236                           ; 1 bytes @ 0x0
  4237                           
  4238  0070                     ?_TMR1_ISR:	
  4239                           ; 1 bytes @ 0x0
  4240                           
  4241  0070                     ?_INT_CallBack:	
  4242                           ; 1 bytes @ 0x0
  4243                           
  4244  0070                     ?_TMR0_DefaultInterruptHandler:	
  4245                           ; 1 bytes @ 0x0
  4246                           
  4247  0070                     ??_TMR0_DefaultInterruptHandler:	
  4248                           ; 1 bytes @ 0x0
  4249                           
  4250  0070                     ?_TMR4_DefaultInterruptHandler:	
  4251                           ; 1 bytes @ 0x0
  4252                           
  4253  0070                     ?_TMR1_DefaultInterruptHandler:	
  4254                           ; 1 bytes @ 0x0
  4255                           
  4256  0070                     ?_DAC_Initialize:	
  4257                           ; 1 bytes @ 0x0
  4258                           
  4259  0070                     ?_DAC_SetOutput:	
  4260                           ; 1 bytes @ 0x0
  4261                           
  4262  0070                     ??_DAC_SetOutput:	
  4263                           ; 1 bytes @ 0x0
  4264                           
  4265  0070                     ?_SYSTEM_Initialize:	
  4266                           ; 1 bytes @ 0x0
  4267                           
  4268  0070                     ?_PIN_MANAGER_IOC:	
  4269                           ; 1 bytes @ 0x0
  4270                           
  4271  0070                     ??_PIN_MANAGER_IOC:	
  4272                           ; 1 bytes @ 0x0
  4273                           
  4274  0070                     ?_INTERRUPT_InterruptManager:	
  4275                           ; 1 bytes @ 0x0
  4276                           
  4277  0070                     ?_EUSART_Write:	
  4278                           ; 1 bytes @ 0x0
  4279                           
  4280  0070                     ?_putch:	
  4281                           ; 1 bytes @ 0x0
  4282                           
  4283  0070                     ?_INT_DefaultInterruptHandler:	
  4284                           ; 1 bytes @ 0x0
  4285                           
  4286  0070                     ??_INT_DefaultInterruptHandler:	
  4287                           ; 1 bytes @ 0x0
  4288                           
  4289  0070                     ?_TMR4_LoadPeriodRegister:	
  4290                           ; 1 bytes @ 0x0
  4291                           
  4292  0070                     ?_readPersistentState:	
  4293                           ; 1 bytes @ 0x0
  4294                           
  4295  0070                     ?_writePersistentState:	
  4296                           ; 1 bytes @ 0x0
  4297                           
  4298  0070                     ?_initLED:	
  4299                           ; 1 bytes @ 0x0
  4300                           
  4301  0070                     ?_lowBattery:	
  4302                           ; 1 bytes @ 0x0
  4303                           
  4304  0070                     ?_startUp:	
  4305                           ; 1 bytes @ 0x0
  4306                           
  4307  0070                     ?_selectSomething:	
  4308                           ; 1 bytes @ 0x0
  4309                           
  4310  0070                     ?_selectFrequency:	
  4311                           ; 1 bytes @ 0x0
  4312                           
  4313  0070                     ?_selectCurrent:	
  4314                           ; 1 bytes @ 0x0
  4315                           
  4316  0070                     ?_selectIncrease:	
  4317                           ; 1 bytes @ 0x0
  4318                           
  4319  0070                     ?_selectDecrease:	
  4320                           ; 1 bytes @ 0x0
  4321                           
  4322  0070                     ?_selectCurrentValue:	
  4323                           ; 1 bytes @ 0x0
  4324                           
  4325  0070                     ?_selectFrequencyValue:	
  4326                           ; 1 bytes @ 0x0
  4327                           
  4328  0070                     ?_process_remote_command:	
  4329                           ; 1 bytes @ 0x0
  4330                           
  4331  0070                     ?_LATCH_Initialize:	
  4332                           ; 1 bytes @ 0x0
  4333                           
  4334  0070                     ?_main:	
  4335                           ; 1 bytes @ 0x0
  4336                           
  4337  0070                     DAC_SetOutput@inputData:	
  4338                           ; 1 bytes @ 0x0
  4339                           
  4340                           
  4341                           ; 1 bytes @ 0x0
  4342  0070                     	ds	1
  4343  0071                     ??_TMR1_ISR:
  4344  0071                     ??_TMR4_DefaultInterruptHandler:	
  4345                           ; 1 bytes @ 0x1
  4346                           
  4347  0071                     ??_TMR1_DefaultInterruptHandler:	
  4348                           ; 1 bytes @ 0x1
  4349                           
  4350                           
  4351                           ; 1 bytes @ 0x1
  4352  0071                     	ds	1
  4353  0072                     ??_TMR4_ISR:
  4354  0072                     INT_DefaultInterruptHandler@time:	
  4355                           ; 1 bytes @ 0x2
  4356                           
  4357                           
  4358                           ; 1 bytes @ 0x2
  4359  0072                     	ds	1
  4360  0073                     ??_PIN_MANAGER_Initialize:
  4361  0073                     ??_OSCILLATOR_Initialize:	
  4362                           ; 1 bytes @ 0x3
  4363                           
  4364  0073                     ??_WDT_Initialize:	
  4365                           ; 1 bytes @ 0x3
  4366                           
  4367  0073                     ??_OPA1_Initialize:	
  4368                           ; 1 bytes @ 0x3
  4369                           
  4370  0073                     ??_OPA2_Initialize:	
  4371                           ; 1 bytes @ 0x3
  4372                           
  4373  0073                     ??_TMR2_Initialize:	
  4374                           ; 1 bytes @ 0x3
  4375                           
  4376  0073                     ??_INT_ISR:	
  4377                           ; 1 bytes @ 0x3
  4378                           
  4379  0073                     ?_EUSART_SetFramingErrorHandler:	
  4380                           ; 1 bytes @ 0x3
  4381                           
  4382  0073                     ?_EUSART_SetOverrunErrorHandler:	
  4383                           ; 1 bytes @ 0x3
  4384                           
  4385  0073                     ?_EUSART_SetErrorHandler:	
  4386                           ; 1 bytes @ 0x3
  4387                           
  4388  0073                     ??_INT_CallBack:	
  4389                           ; 1 bytes @ 0x3
  4390                           
  4391  0073                     ?_TMR0_SetInterruptHandler:	
  4392                           ; 1 bytes @ 0x3
  4393                           
  4394  0073                     ?_TMR4_SetInterruptHandler:	
  4395                           ; 1 bytes @ 0x3
  4396                           
  4397  0073                     ?_FLASH_EraseBlock:	
  4398                           ; 1 bytes @ 0x3
  4399                           
  4400  0073                     ?_TMR1_SetInterruptHandler:	
  4401                           ; 1 bytes @ 0x3
  4402                           
  4403  0073                     ??_DAC_Initialize:	
  4404                           ; 1 bytes @ 0x3
  4405                           
  4406  0073                     ??_INTERRUPT_InterruptManager:	
  4407                           ; 1 bytes @ 0x3
  4408                           
  4409  0073                     ??_EUSART_Write:	
  4410                           ; 1 bytes @ 0x3
  4411                           
  4412  0073                     ?_INT_SetInterruptHandler:	
  4413                           ; 1 bytes @ 0x3
  4414                           
  4415  0073                     ??_TMR4_LoadPeriodRegister:	
  4416                           ; 1 bytes @ 0x3
  4417                           
  4418  0073                     ??_readPersistentState:	
  4419                           ; 1 bytes @ 0x3
  4420                           
  4421  0073                     ??_initLED:	
  4422                           ; 1 bytes @ 0x3
  4423                           
  4424  0073                     ?_setLEDColor:	
  4425                           ; 1 bytes @ 0x3
  4426                           
  4427  0073                     ??_LATCH_Initialize:	
  4428                           ; 1 bytes @ 0x3
  4429                           
  4430  0073                     ??___lmul:	
  4431                           ; 1 bytes @ 0x3
  4432                           
  4433  0073                     ?___awdiv:	
  4434                           ; 1 bytes @ 0x3
  4435                           
  4436  0073                     EUSART_Write@txData:	
  4437                           ; 2 bytes @ 0x3
  4438                           
  4439  0073                     TMR4_LoadPeriodRegister@periodVal:	
  4440                           ; 1 bytes @ 0x3
  4441                           
  4442  0073                     setLEDColor@green:	
  4443                           ; 1 bytes @ 0x3
  4444                           
  4445  0073                     EUSART_SetFramingErrorHandler@interruptHandler:	
  4446                           ; 1 bytes @ 0x3
  4447                           
  4448  0073                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  4449                           ; 2 bytes @ 0x3
  4450                           
  4451  0073                     EUSART_SetErrorHandler@interruptHandler:	
  4452                           ; 2 bytes @ 0x3
  4453                           
  4454  0073                     INT_SetInterruptHandler@InterruptHandler:	
  4455                           ; 2 bytes @ 0x3
  4456                           
  4457  0073                     TMR0_SetInterruptHandler@InterruptHandler:	
  4458                           ; 2 bytes @ 0x3
  4459                           
  4460  0073                     TMR4_SetInterruptHandler@InterruptHandler:	
  4461                           ; 2 bytes @ 0x3
  4462                           
  4463  0073                     FLASH_EraseBlock@startAddr:	
  4464                           ; 2 bytes @ 0x3
  4465                           
  4466  0073                     TMR1_SetInterruptHandler@InterruptHandler:	
  4467                           ; 2 bytes @ 0x3
  4468                           
  4469  0073                     ___awdiv@divisor:	
  4470                           ; 2 bytes @ 0x3
  4471                           
  4472  0073                     ___lmul@product:	
  4473                           ; 2 bytes @ 0x3
  4474                           
  4475                           
  4476                           ; 4 bytes @ 0x3
  4477  0073                     	ds	1
  4478  0074                     ??_putch:
  4479  0074                     putch@txData:	
  4480                           ; 1 bytes @ 0x4
  4481                           
  4482  0074                     setLEDColor@blue:	
  4483                           ; 1 bytes @ 0x4
  4484                           
  4485                           
  4486                           ; 1 bytes @ 0x4
  4487  0074                     	ds	1
  4488  0075                     ??_TMR4_Initialize:
  4489  0075                     ??_TMR1_Initialize:	
  4490                           ; 1 bytes @ 0x5
  4491                           
  4492  0075                     ??_EXT_INT_Initialize:	
  4493                           ; 1 bytes @ 0x5
  4494                           
  4495  0075                     ??_TMR0_Initialize:	
  4496                           ; 1 bytes @ 0x5
  4497                           
  4498  0075                     ??_EUSART_Initialize:	
  4499                           ; 1 bytes @ 0x5
  4500                           
  4501  0075                     ??_EUSART_SetFramingErrorHandler:	
  4502                           ; 1 bytes @ 0x5
  4503                           
  4504  0075                     ??_EUSART_SetOverrunErrorHandler:	
  4505                           ; 1 bytes @ 0x5
  4506                           
  4507  0075                     ??_EUSART_SetErrorHandler:	
  4508                           ; 1 bytes @ 0x5
  4509                           
  4510  0075                     ??_TMR0_SetInterruptHandler:	
  4511                           ; 1 bytes @ 0x5
  4512                           
  4513  0075                     ??_TMR4_SetInterruptHandler:	
  4514                           ; 1 bytes @ 0x5
  4515                           
  4516  0075                     ??_FLASH_EraseBlock:	
  4517                           ; 1 bytes @ 0x5
  4518                           
  4519  0075                     ??_TMR1_SetInterruptHandler:	
  4520                           ; 1 bytes @ 0x5
  4521                           
  4522  0075                     ??_SYSTEM_Initialize:	
  4523                           ; 1 bytes @ 0x5
  4524                           
  4525  0075                     ??_INT_SetInterruptHandler:	
  4526                           ; 1 bytes @ 0x5
  4527                           
  4528  0075                     ??_setLEDColor:	
  4529                           ; 1 bytes @ 0x5
  4530                           
  4531  0075                     ?_fputc:	
  4532                           ; 1 bytes @ 0x5
  4533                           
  4534  0075                     FLASH_EraseBlock@GIEBitValue:	
  4535                           ; 2 bytes @ 0x5
  4536                           
  4537  0075                     ___awdiv@dividend:	
  4538                           ; 1 bytes @ 0x5
  4539                           
  4540  0075                     fputc@c:	
  4541                           ; 2 bytes @ 0x5
  4542                           
  4543                           
  4544                           ; 2 bytes @ 0x5
  4545  0075                     	ds	1
  4546  0076                     setLEDColor@red:
  4547                           
  4548                           ; 1 bytes @ 0x6
  4549  0076                     	ds	1
  4550  0077                     ??___awdiv:
  4551  0077                     fputc@fp:	
  4552                           ; 1 bytes @ 0x7
  4553                           
  4554                           
  4555                           ; 1 bytes @ 0x7
  4556  0077                     	ds	1
  4557  0078                     ??_battery_voltage:
  4558                           
  4559                           	psect	cstackBANK0
  4560  0020                     __pcstackBANK0:	
  4561                           ; 1 bytes @ 0x8
  4562                           
  4563  0020                     ?_FLASH_WriteBlock:
  4564  0020                     ??_fputc:	
  4565                           ; 1 bytes @ 0x0
  4566                           
  4567  0020                     ??_lowBattery:	
  4568                           ; 1 bytes @ 0x0
  4569                           
  4570  0020                     ??_startUp:	
  4571                           ; 1 bytes @ 0x0
  4572                           
  4573  0020                     ??_selectSomething:	
  4574                           ; 1 bytes @ 0x0
  4575                           
  4576  0020                     ?___lmul:	
  4577                           ; 1 bytes @ 0x0
  4578                           
  4579  0020                     ___awdiv@counter:	
  4580                           ; 4 bytes @ 0x0
  4581                           
  4582  0020                     FLASH_WriteBlock@writeAddr:	
  4583                           ; 1 bytes @ 0x0
  4584                           
  4585  0020                     ___lmul@multiplier:	
  4586                           ; 2 bytes @ 0x0
  4587                           
  4588                           
  4589                           ; 4 bytes @ 0x0
  4590  0020                     	ds	1
  4591  0021                     ___awdiv@sign:
  4592                           
  4593                           ; 1 bytes @ 0x1
  4594  0021                     	ds	1
  4595  0022                     FLASH_WriteBlock@flashWordArray:
  4596  0022                     startUp@i:	
  4597                           ; 1 bytes @ 0x2
  4598                           
  4599  0022                     ___awdiv@quotient:	
  4600                           ; 2 bytes @ 0x2
  4601                           
  4602                           
  4603                           ; 2 bytes @ 0x2
  4604  0022                     	ds	1
  4605  0023                     ??_FLASH_WriteBlock:
  4606                           
  4607                           ; 1 bytes @ 0x3
  4608  0023                     	ds	1
  4609  0024                     ___lmul@multiplicand:
  4610                           
  4611                           ; 4 bytes @ 0x4
  4612  0024                     	ds	1
  4613  0025                     ?_vfpfcnvrt:
  4614  0025                     vfpfcnvrt@fmt:	
  4615                           ; 2 bytes @ 0x5
  4616                           
  4617                           
  4618                           ; 1 bytes @ 0x5
  4619  0025                     	ds	1
  4620  0026                     vfpfcnvrt@ap:
  4621  0026                     FLASH_WriteBlock@blockStartAddr:	
  4622                           ; 1 bytes @ 0x6
  4623                           
  4624                           
  4625                           ; 2 bytes @ 0x6
  4626  0026                     	ds	1
  4627  0027                     ??_vfpfcnvrt:
  4628                           
  4629                           ; 1 bytes @ 0x7
  4630  0027                     	ds	1
  4631  0028                     ?___aldiv:
  4632  0028                     FLASH_WriteBlock@GIEBitValue:	
  4633                           ; 4 bytes @ 0x8
  4634                           
  4635  0028                     ___aldiv@divisor:	
  4636                           ; 1 bytes @ 0x8
  4637                           
  4638                           
  4639                           ; 4 bytes @ 0x8
  4640  0028                     	ds	1
  4641  0029                     FLASH_WriteBlock@i:
  4642                           
  4643                           ; 1 bytes @ 0x9
  4644  0029                     	ds	1
  4645  002A                     ??_writePersistentState:
  4646                           
  4647                           ; 1 bytes @ 0xA
  4648  002A                     	ds	2
  4649  002C                     vfpfcnvrt@fp:
  4650  002C                     ___aldiv@dividend:	
  4651                           ; 1 bytes @ 0xC
  4652                           
  4653                           
  4654                           ; 4 bytes @ 0xC
  4655  002C                     	ds	1
  4656  002D                     ?_vfprintf:
  4657  002D                     vfprintf@fmt:	
  4658                           ; 2 bytes @ 0xD
  4659                           
  4660                           
  4661                           ; 2 bytes @ 0xD
  4662  002D                     	ds	1
  4663  002E                     writePersistentState@buf:
  4664                           
  4665                           ; 64 bytes @ 0xE
  4666  002E                     	ds	1
  4667  002F                     vfprintf@ap:
  4668                           
  4669                           ; 1 bytes @ 0xF
  4670  002F                     	ds	1
  4671  0030                     ??_vfprintf:
  4672  0030                     ??___aldiv:	
  4673                           ; 1 bytes @ 0x10
  4674                           
  4675                           
  4676                           ; 1 bytes @ 0x10
  4677  0030                     	ds	1
  4678  0031                     ___aldiv@counter:
  4679                           
  4680                           ; 1 bytes @ 0x11
  4681  0031                     	ds	1
  4682  0032                     ___aldiv@sign:
  4683  0032                     vfprintf@fp:	
  4684                           ; 1 bytes @ 0x12
  4685                           
  4686                           
  4687                           ; 1 bytes @ 0x12
  4688  0032                     	ds	1
  4689  0033                     vfprintf@cfmt:
  4690  0033                     ___aldiv@quotient:	
  4691                           ; 2 bytes @ 0x13
  4692                           
  4693                           
  4694                           ; 4 bytes @ 0x13
  4695  0033                     	ds	2
  4696  0035                     ?_printf:
  4697  0035                     printf@fmt:	
  4698                           ; 2 bytes @ 0x15
  4699                           
  4700                           
  4701                           ; 2 bytes @ 0x15
  4702  0035                     	ds	2
  4703  0037                     ??_printf:
  4704  0037                     ?_setFrequency:	
  4705                           ; 1 bytes @ 0x17
  4706                           
  4707  0037                     ?_battery_voltage:	
  4708                           ; 1 bytes @ 0x17
  4709                           
  4710  0037                     setFrequency@frequency_hz:	
  4711                           ; 2 bytes @ 0x17
  4712                           
  4713                           
  4714                           ; 2 bytes @ 0x17
  4715  0037                     	ds	1
  4716  0038                     printf@ap:
  4717                           
  4718                           ; 1 bytes @ 0x18
  4719  0038                     	ds	1
  4720  0039                     ??_selectFrequency:
  4721  0039                     ??_selectCurrent:	
  4722                           ; 1 bytes @ 0x19
  4723                           
  4724  0039                     ??_selectIncrease:	
  4725                           ; 1 bytes @ 0x19
  4726                           
  4727  0039                     ??_selectDecrease:	
  4728                           ; 1 bytes @ 0x19
  4729                           
  4730  0039                     ??_selectCurrentValue:	
  4731                           ; 1 bytes @ 0x19
  4732                           
  4733  0039                     ??_selectFrequencyValue:	
  4734                           ; 1 bytes @ 0x19
  4735                           
  4736  0039                     ?_setCurrent:	
  4737                           ; 1 bytes @ 0x19
  4738                           
  4739  0039                     ??_setFrequency:	
  4740                           ; 1 bytes @ 0x19
  4741                           
  4742  0039                     setCurrent@microamps:	
  4743                           ; 1 bytes @ 0x19
  4744                           
  4745                           
  4746                           ; 2 bytes @ 0x19
  4747  0039                     	ds	1
  4748  003A                     setFrequency@PR4_val:
  4749                           
  4750                           ; 2 bytes @ 0x1A
  4751  003A                     	ds	1
  4752  003B                     setCurrent@Vdd_mv:
  4753                           
  4754                           ; 2 bytes @ 0x1B
  4755  003B                     	ds	2
  4756  003D                     ??_setCurrent:
  4757                           
  4758                           ; 1 bytes @ 0x1D
  4759  003D                     	ds	8
  4760  0045                     setCurrent@Vdac_mv:
  4761                           
  4762                           ; 2 bytes @ 0x25
  4763  0045                     	ds	2
  4764  0047                     setCurrent@DACValue:
  4765                           
  4766                           ; 2 bytes @ 0x27
  4767  0047                     	ds	39
  4768  006E                     writePersistentState@i:
  4769                           
  4770                           ; 1 bytes @ 0x4E
  4771  006E                     	ds	1
  4772  006F                     writePersistentState@idx:
  4773                           
  4774                           ; 1 bytes @ 0x4F
  4775  006F                     	ds	1
  4776                           
  4777                           	psect	maintext
  4778  0462                     __pmaintext:	
  4779 ;;
  4780 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4781 ;;
  4782 ;; *************** function _main *****************
  4783 ;; Defined at:
  4784 ;;		line 596 in file "main.c"
  4785 ;; Parameters:    Size  Location     Type
  4786 ;;		None
  4787 ;; Auto vars:     Size  Location     Type
  4788 ;;  batt_mv         2    6[BANK1 ] short 
  4789 ;;  low_reading_    2    4[BANK1 ] short 
  4790 ;; Return value:  Size  Location     Type
  4791 ;;                  1    wreg      void 
  4792 ;; Registers used:
  4793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4794 ;; Tracked objects:
  4795 ;;		On entry : B1F/0
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4799 ;;      Params:         0       0       0       0       0       0       0       0
  4800 ;;      Locals:         0       0       4       0       0       0       0       0
  4801 ;;      Temps:          0       0       1       0       0       0       0       0
  4802 ;;      Totals:         0       0       5       0       0       0       0       0
  4803 ;;Total ram usage:        5 bytes
  4804 ;; Hardware stack levels required when called: 12
  4805 ;; This function calls:
  4806 ;;		_DAC_Initialize
  4807 ;;		_LATCH_Initialize
  4808 ;;		_OPA1_Initialize
  4809 ;;		_OPA2_Initialize
  4810 ;;		_SYSTEM_Initialize
  4811 ;;		_battery_voltage
  4812 ;;		_initLED
  4813 ;;		_lowBattery
  4814 ;;		_process_remote_command
  4815 ;;		_readPersistentState
  4816 ;;		_setCurrent
  4817 ;;		_setFrequency
  4818 ;;		_startUp
  4819 ;; This function is called by:
  4820 ;;		Startup code after reset
  4821 ;; This function uses a non-reentrant model
  4822 ;;
  4823                           
  4824                           
  4825                           ;psect for function _main
  4826  0462                     _main:
  4827  0462                     l4377:	
  4828                           ;incstack = 0
  4829                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4830                           
  4831                           
  4832                           ;main.c: 598:   SYSTEM_Initialize();
  4833  0462  318C  24A7  3184   	fcall	_SYSTEM_Initialize
  4834  0465                     l4379:
  4835                           
  4836                           ;main.c: 599:   LATCH_Initialize();
  4837  0465  3180  2002  3184   	fcall	_LATCH_Initialize
  4838  0468                     l4381:
  4839                           
  4840                           ;main.c: 600:   DAC_Initialize();
  4841  0468  318A  22CB  3184   	fcall	_DAC_Initialize
  4842  046B                     l4383:
  4843                           
  4844                           ;main.c: 601:   OPA1_Initialize();
  4845  046B  318A  22B4  3184   	fcall	_OPA1_Initialize
  4846  046E                     l4385:
  4847                           
  4848                           ;main.c: 602:   OPA2_Initialize();
  4849  046E  318A  22B8  3184   	fcall	_OPA2_Initialize
  4850  0471                     l4387:
  4851                           
  4852                           ;main.c: 603:   initLED();
  4853  0471  318F  2741  3184   	fcall	_initLED
  4854  0474                     l4389:
  4855                           
  4856                           ;main.c: 608:   readPersistentState();
  4857  0474  318C  2443  3184   	fcall	_readPersistentState
  4858  0477                     l4391:
  4859                           
  4860                           ;main.c: 609:   setCurrent(currentValue[currentIndex], battery_voltage());
  4861  0477  0021               	movlb	1	; select bank1
  4862  0478  3565               	lslf	_currentIndex^(0+128),w
  4863  0479  3EBF               	addlw	(low (_currentValue| 0))& (0+255)
  4864  047A  0086               	movwf	6
  4865  047B  0187               	clrf	7
  4866  047C  3F40               	moviw [0]fsr1
  4867  047D  0020               	movlb	0	; select bank0
  4868  047E  00B9               	movwf	setCurrent@microamps
  4869  047F  3F41               	moviw [1]fsr1
  4870  0480  00BA               	movwf	setCurrent@microamps+1
  4871  0481  318E  2622  3184   	fcall	_battery_voltage
  4872  0484  0020               	movlb	0	; select bank0
  4873  0485  0838               	movf	?_battery_voltage+1,w
  4874  0486  00BC               	movwf	setCurrent@Vdd_mv+1
  4875  0487  0837               	movf	?_battery_voltage,w
  4876  0488  00BB               	movwf	setCurrent@Vdd_mv
  4877  0489  3183  23BD  3184   	fcall	_setCurrent
  4878  048C                     l4393:
  4879                           
  4880                           ;main.c: 610:   setFrequency(frequencyValue[frequencyIndex]);
  4881  048C  0021               	movlb	1	; select bank1
  4882  048D  3563               	lslf	_frequencyIndex^(0+128),w
  4883  048E  3E40               	addlw	(low (_frequencyValue| (0+256)))& (0+255)
  4884  048F  0086               	movwf	6
  4885  0490  3001               	movlw	1	; select bank2/3
  4886  0491  0087               	movwf	7
  4887  0492  3F40               	moviw [0]fsr1
  4888  0493  0020               	movlb	0	; select bank0
  4889  0494  00B7               	movwf	setFrequency@frequency_hz
  4890  0495  3F41               	moviw [1]fsr1
  4891  0496  00B8               	movwf	setFrequency@frequency_hz+1
  4892  0497  3186  26DE  3184   	fcall	_setFrequency
  4893  049A                     l4395:
  4894                           
  4895                           ;main.c: 612:   (INTCONbits.GIE = 1);
  4896  049A  178B               	bsf	11,7	;volatile
  4897  049B                     l4397:
  4898                           
  4899                           ;main.c: 613:   (INTCONbits.PEIE = 1);
  4900  049B  170B               	bsf	11,6	;volatile
  4901  049C                     l4399:
  4902                           
  4903                           ;main.c: 614:   startUp();
  4904  049C  318E  26C5  3184   	fcall	_startUp
  4905  049F                     l4401:
  4906                           
  4907                           ;main.c: 616:   const int16_t BATTERY_NUM_LOW_READINGS = 10000;;main.c: 617:   int16_t l
      +                          ow_reading_count = 0;
  4908  049F  0021               	movlb	1	; select bank1
  4909  04A0  01EB               	clrf	main@low_reading_count^(0+128)
  4910  04A1  01EC               	clrf	(main@low_reading_count+1)^(0+128)
  4911  04A2                     l4403:
  4912                           
  4913                           ;main.c: 622:     int16_t batt_mv = battery_voltage();
  4914  04A2  318E  2622  3184   	fcall	_battery_voltage
  4915  04A5  0020               	movlb	0	; select bank0
  4916  04A6  0838               	movf	?_battery_voltage+1,w
  4917  04A7  0021               	movlb	1	; select bank1
  4918  04A8  00EE               	movwf	(main@batt_mv+1)^(0+128)
  4919  04A9  0020               	movlb	0	; select bank0
  4920  04AA  0837               	movf	?_battery_voltage,w
  4921  04AB  0021               	movlb	1	; select bank1
  4922  04AC  00ED               	movwf	main@batt_mv^(0+128)
  4923  04AD                     l4405:
  4924                           
  4925                           ;main.c: 623:     const int16_t BATTERY_THRESHOLD = 2000;;main.c: 625:     if (batt_mv <
      +                           BATTERY_THRESHOLD)
  4926  04AD  086E               	movf	(main@batt_mv+1)^(0+128),w
  4927  04AE  3A80               	xorlw	128
  4928  04AF  00EA               	movwf	??_main^(0+128)
  4929  04B0  3087               	movlw	135
  4930  04B1  026A               	subwf	??_main^(0+128),w
  4931  04B2  1D03               	skipz
  4932  04B3  2CB6               	goto	u3065
  4933  04B4  30D0               	movlw	208
  4934  04B5  026D               	subwf	main@batt_mv^(0+128),w
  4935  04B6                     u3065:
  4936  04B6  1803               	skipnc
  4937  04B7  2CB9               	goto	u3061
  4938  04B8  2CBA               	goto	u3060
  4939  04B9                     u3061:
  4940  04B9  2CC0               	goto	l4409
  4941  04BA                     u3060:
  4942  04BA                     l4407:
  4943                           
  4944                           ;main.c: 626:     {;main.c: 627:         low_reading_count++;
  4945  04BA  3001               	movlw	1
  4946  04BB  0021               	movlb	1	; select bank1
  4947  04BC  07EB               	addwf	main@low_reading_count^(0+128),f
  4948  04BD  3000               	movlw	0
  4949  04BE  3DEC               	addwfc	(main@low_reading_count+1)^(0+128),f
  4950                           
  4951                           ;main.c: 630:     } else {
  4952  04BF  2CC3               	goto	l4411
  4953  04C0                     l4409:
  4954                           
  4955                           ;main.c: 631:         low_reading_count = 0;
  4956  04C0  0021               	movlb	1	; select bank1
  4957  04C1  01EB               	clrf	main@low_reading_count^(0+128)
  4958  04C2  01EC               	clrf	(main@low_reading_count+1)^(0+128)
  4959  04C3                     l4411:
  4960                           
  4961                           ;main.c: 634:     if (low_reading_count > BATTERY_NUM_LOW_READINGS)
  4962  04C3  086C               	movf	(main@low_reading_count+1)^(0+128),w
  4963  04C4  3A80               	xorlw	128
  4964  04C5  00EA               	movwf	??_main^(0+128)
  4965  04C6  30A7               	movlw	167
  4966  04C7  026A               	subwf	??_main^(0+128),w
  4967  04C8  1D03               	skipz
  4968  04C9  2CCC               	goto	u3075
  4969  04CA  3011               	movlw	17
  4970  04CB  026B               	subwf	main@low_reading_count^(0+128),w
  4971  04CC                     u3075:
  4972  04CC  1C03               	skipc
  4973  04CD  2CCF               	goto	u3071
  4974  04CE  2CD0               	goto	u3070
  4975  04CF                     u3071:
  4976  04CF  2CD3               	goto	l4415
  4977  04D0                     u3070:
  4978  04D0                     l4413:
  4979                           
  4980                           ;main.c: 635:     {;main.c: 636:         lowBattery();
  4981  04D0  318D  2592  3184   	fcall	_lowBattery
  4982  04D3                     l4415:
  4983                           
  4984                           ;main.c: 641:     setCurrent(currentValue[currentIndex], batt_mv);
  4985  04D3  0021               	movlb	1	; select bank1
  4986  04D4  3565               	lslf	_currentIndex^(0+128),w
  4987  04D5  3EBF               	addlw	(low (_currentValue| 0))& (0+255)
  4988  04D6  0086               	movwf	6
  4989  04D7  0187               	clrf	7
  4990  04D8  3F40               	moviw [0]fsr1
  4991  04D9  0020               	movlb	0	; select bank0
  4992  04DA  00B9               	movwf	setCurrent@microamps
  4993  04DB  3F41               	moviw [1]fsr1
  4994  04DC  00BA               	movwf	setCurrent@microamps+1
  4995  04DD  0021               	movlb	1	; select bank1
  4996  04DE  086E               	movf	(main@batt_mv+1)^(0+128),w
  4997  04DF  0020               	movlb	0	; select bank0
  4998  04E0  00BC               	movwf	setCurrent@Vdd_mv+1
  4999  04E1  0021               	movlb	1	; select bank1
  5000  04E2  086D               	movf	main@batt_mv^(0+128),w
  5001  04E3  0020               	movlb	0	; select bank0
  5002  04E4  00BB               	movwf	setCurrent@Vdd_mv
  5003  04E5  3183  23BD  3184   	fcall	_setCurrent
  5004  04E8                     l4417:
  5005                           
  5006                           ;main.c: 648:     if (STATE_DONE == ir_code.state){
  5007  04E8  3002               	movlw	2
  5008  04E9  0021               	movlb	1	; select bank1
  5009  04EA  0635               	xorwf	(_ir_code^(0+128)+1),w
  5010  04EB  1D03               	btfss	3,2
  5011  04EC  2CEE               	goto	u3081
  5012  04ED  2CEF               	goto	u3080
  5013  04EE                     u3081:
  5014  04EE  2CA2               	goto	l4403
  5015  04EF                     u3080:
  5016  04EF                     l4419:
  5017                           
  5018                           ;main.c: 666:       process_remote_command(&ir_code);
  5019  04EF  30B4               	movlw	(low (_ir_code| 0))& (0+255)
  5020  04F0  3180  2087  3184   	fcall	_process_remote_command
  5021  04F3                     l4421:
  5022                           
  5023                           ;main.c: 669:       ir_code.state = STATE_RESET;
  5024  04F3  0021               	movlb	1	; select bank1
  5025  04F4  01B5               	clrf	(_ir_code^(0+128)+1)
  5026  04F5  2CA2               	goto	l4403
  5027  04F6  3180  284B         	ljmp	start
  5028  04F8                     __end_of_main:
  5029                           
  5030                           	psect	text1
  5031  0EC5                     __ptext1:	
  5032 ;; *************** function _startUp *****************
  5033 ;; Defined at:
  5034 ;;		line 253 in file "main.c"
  5035 ;; Parameters:    Size  Location     Type
  5036 ;;		None
  5037 ;; Auto vars:     Size  Location     Type
  5038 ;;  i               2    2[BANK0 ] int 
  5039 ;; Return value:  Size  Location     Type
  5040 ;;                  1    wreg      void 
  5041 ;; Registers used:
  5042 ;;		wreg, status,2, status,0, pclath, cstack
  5043 ;; Tracked objects:
  5044 ;;		On entry : 0/0
  5045 ;;		On exit  : 0/0
  5046 ;;		Unchanged: 0/0
  5047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5048 ;;      Params:         0       0       0       0       0       0       0       0
  5049 ;;      Locals:         0       2       0       0       0       0       0       0
  5050 ;;      Temps:          0       2       0       0       0       0       0       0
  5051 ;;      Totals:         0       4       0       0       0       0       0       0
  5052 ;;Total ram usage:        4 bytes
  5053 ;; Hardware stack levels used: 1
  5054 ;; Hardware stack levels required when called: 5
  5055 ;; This function calls:
  5056 ;;		_setLEDColor
  5057 ;; This function is called by:
  5058 ;;		_main
  5059 ;; This function uses a non-reentrant model
  5060 ;;
  5061                           
  5062                           
  5063                           ;psect for function _startUp
  5064  0EC5                     _startUp:
  5065  0EC5                     l4099:	
  5066                           ;incstack = 0
  5067                           ; Regs used in _startUp: [wreg+status,2+status,0+pclath+cstack]
  5068                           
  5069                           
  5070                           ;main.c: 254:   interfaceState = STATE_RUNNING;
  5071  0EC5  01F8               	clrf	_interfaceState
  5072                           
  5073                           ;main.c: 255:   for (int i = 0; i < 5; i++){
  5074  0EC6  0020               	movlb	0	; select bank0
  5075  0EC7  01A2               	clrf	startUp@i
  5076  0EC8  01A3               	clrf	startUp@i+1
  5077  0EC9                     l4105:
  5078                           
  5079                           ;main.c: 256:     setLEDColor(0, 180, 230);
  5080  0EC9  30B4               	movlw	180
  5081  0ECA  0020               	movlb	0	; select bank0
  5082  0ECB  00A0               	movwf	??_startUp
  5083  0ECC  0820               	movf	??_startUp,w
  5084  0ECD  00F3               	movwf	setLEDColor@green
  5085  0ECE  30E6               	movlw	230
  5086  0ECF  00A1               	movwf	??_startUp+1
  5087  0ED0  0821               	movf	??_startUp+1,w
  5088  0ED1  00F4               	movwf	setLEDColor@blue
  5089  0ED2  3000               	movlw	0
  5090  0ED3  318B  23C2  318E   	fcall	_setLEDColor
  5091  0ED6                     l4107:
  5092                           
  5093                           ;main.c: 257:     _delay((unsigned long)((100)*(4000000/4000.0)));
  5094  0ED6  3082               	movlw	130
  5095  0ED7  0020               	movlb	0	; select bank0
  5096  0ED8  00A0               	movwf	??_startUp
  5097  0ED9  30DD               	movlw	221
  5098  0EDA                     u3097:
  5099  0EDA  0B89               	decfsz	9,f
  5100  0EDB  2EDA               	goto	u3097
  5101  0EDC  0BA0               	decfsz	??_startUp,f
  5102  0EDD  2EDA               	goto	u3097
  5103  0EDE  3200               	nop2
  5104  0EDF                     l4109:
  5105                           
  5106                           ;main.c: 258:     setLEDColor(0, 0, 0);
  5107  0EDF  01F3               	clrf	setLEDColor@green
  5108  0EE0  01F4               	clrf	setLEDColor@blue
  5109  0EE1  3000               	movlw	0
  5110  0EE2  318B  23C2  318E   	fcall	_setLEDColor
  5111                           
  5112                           ;main.c: 259:     _delay((unsigned long)((100)*(4000000/4000.0)));
  5113  0EE5  3082               	movlw	130
  5114  0EE6  0020               	movlb	0	; select bank0
  5115  0EE7  00A0               	movwf	??_startUp
  5116  0EE8  30DD               	movlw	221
  5117  0EE9                     u3107:
  5118  0EE9  0B89               	decfsz	9,f
  5119  0EEA  2EE9               	goto	u3107
  5120  0EEB  0BA0               	decfsz	??_startUp,f
  5121  0EEC  2EE9               	goto	u3107
  5122  0EED  3200               	nop2
  5123                           
  5124                           ;main.c: 260:   }
  5125  0EEE  3001               	movlw	1
  5126  0EEF  0020               	movlb	0	; select bank0
  5127  0EF0  07A2               	addwf	startUp@i,f
  5128  0EF1  3000               	movlw	0
  5129  0EF2  3DA3               	addwfc	startUp@i+1,f
  5130  0EF3  0823               	movf	startUp@i+1,w
  5131  0EF4  3A80               	xorlw	128
  5132  0EF5  00A0               	movwf	??_startUp
  5133  0EF6  3080               	movlw	128
  5134  0EF7  0220               	subwf	??_startUp,w
  5135  0EF8  1D03               	skipz
  5136  0EF9  2EFC               	goto	u2745
  5137  0EFA  3005               	movlw	5
  5138  0EFB  0222               	subwf	startUp@i,w
  5139  0EFC                     u2745:
  5140  0EFC  1C03               	skipc
  5141  0EFD  2EFF               	goto	u2741
  5142  0EFE  2F00               	goto	u2740
  5143  0EFF                     u2741:
  5144  0EFF  2EC9               	goto	l4105
  5145  0F00                     u2740:
  5146  0F00                     l651:
  5147  0F00  0008               	return
  5148  0F01                     __end_of_startUp:
  5149                           
  5150                           	psect	text2
  5151  0C43                     __ptext2:	
  5152 ;; *************** function _readPersistentState *****************
  5153 ;; Defined at:
  5154 ;;		line 115 in file "main.c"
  5155 ;; Parameters:    Size  Location     Type
  5156 ;;		None
  5157 ;; Auto vars:     Size  Location     Type
  5158 ;;		None
  5159 ;; Return value:  Size  Location     Type
  5160 ;;                  1    wreg      void 
  5161 ;; Registers used:
  5162 ;;		wreg, fsr0l, fsr0h, pclath
  5163 ;; Tracked objects:
  5164 ;;		On entry : 0/0
  5165 ;;		On exit  : 0/0
  5166 ;;		Unchanged: 0/0
  5167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5168 ;;      Params:         0       0       0       0       0       0       0       0
  5169 ;;      Locals:         0       0       0       0       0       0       0       0
  5170 ;;      Temps:          2       0       0       0       0       0       0       0
  5171 ;;      Totals:         2       0       0       0       0       0       0       0
  5172 ;;Total ram usage:        2 bytes
  5173 ;; Hardware stack levels used: 1
  5174 ;; Hardware stack levels required when called: 4
  5175 ;; This function calls:
  5176 ;;		Nothing
  5177 ;; This function is called by:
  5178 ;;		_main
  5179 ;; This function uses a non-reentrant model
  5180 ;;
  5181                           
  5182                           
  5183                           ;psect for function _readPersistentState
  5184  0C43                     _readPersistentState:
  5185  0C43                     l3253:	
  5186                           ;incstack = 0
  5187                           ; Regs used in _readPersistentState: [wreg-fsr0h+pclath]
  5188                           
  5189                           
  5190                           ;main.c: 117:   currentIndex = HEF_persistent_state.currentIndex;
  5191  0C43  30E0               	movlw	224
  5192  0C44  0084               	movwf	4
  5193  0C45  308F               	movlw	143
  5194  0C46  0085               	movwf	5
  5195  0C47  0800               	movf	0,w	;code access
  5196  0C48  00F3               	movwf	??_readPersistentState
  5197  0C49  01F4               	clrf	??_readPersistentState+1
  5198  0C4A  0873               	movf	??_readPersistentState,w
  5199  0C4B  0021               	movlb	1	; select bank1
  5200  0C4C  00E5               	movwf	_currentIndex^(0+128)
  5201  0C4D  0874               	movf	??_readPersistentState+1,w
  5202  0C4E  00E6               	movwf	(_currentIndex+1)^(0+128)
  5203                           
  5204                           ;main.c: 118:   frequencyIndex = HEF_persistent_state.frequencyIndex;
  5205  0C4F  30E1               	movlw	225
  5206  0C50  0084               	movwf	4
  5207  0C51  308F               	movlw	143
  5208  0C52  0085               	movwf	5
  5209  0C53  0800               	movf	0,w	;code access
  5210  0C54  00F3               	movwf	??_readPersistentState
  5211  0C55  01F4               	clrf	??_readPersistentState+1
  5212  0C56  0873               	movf	??_readPersistentState,w
  5213  0C57  00E3               	movwf	_frequencyIndex^(0+128)
  5214  0C58  0874               	movf	??_readPersistentState+1,w
  5215  0C59  00E4               	movwf	(_frequencyIndex+1)^(0+128)
  5216                           
  5217                           ;main.c: 119:   dc_frequency_flag = HEF_persistent_state.dc_frequency_flag;
  5218  0C5A  30E2               	movlw	226
  5219  0C5B  0084               	movwf	4
  5220  0C5C  308F               	movlw	143
  5221  0C5D  0085               	movwf	5
  5222  0C5E  0800               	movf	0,w	;code access
  5223  0C5F  00F3               	movwf	??_readPersistentState
  5224  0C60  0873               	movf	??_readPersistentState,w
  5225  0C61  00FA               	movwf	_dc_frequency_flag
  5226  0C62                     l621:
  5227  0C62  0008               	return
  5228  0C63                     __end_of_readPersistentState:
  5229                           
  5230                           	psect	text3
  5231  0087                     __ptext3:	
  5232 ;; *************** function _process_remote_command *****************
  5233 ;; Defined at:
  5234 ;;		line 383 in file "main.c"
  5235 ;; Parameters:    Size  Location     Type
  5236 ;;  code            1    wreg     PTR struct .
  5237 ;;		 -> ir_code(6), 
  5238 ;; Auto vars:     Size  Location     Type
  5239 ;;  code            1    2[BANK1 ] PTR struct .
  5240 ;;		 -> ir_code(6), 
  5241 ;; Return value:  Size  Location     Type
  5242 ;;                  1    wreg      void 
  5243 ;; Registers used:
  5244 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5245 ;; Tracked objects:
  5246 ;;		On entry : 0/0
  5247 ;;		On exit  : 0/0
  5248 ;;		Unchanged: 0/0
  5249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5250 ;;      Params:         0       0       0       0       0       0       0       0
  5251 ;;      Locals:         0       0       1       0       0       0       0       0
  5252 ;;      Temps:          0       0       2       0       0       0       0       0
  5253 ;;      Totals:         0       0       3       0       0       0       0       0
  5254 ;;Total ram usage:        3 bytes
  5255 ;; Hardware stack levels used: 1
  5256 ;; Hardware stack levels required when called: 11
  5257 ;; This function calls:
  5258 ;;		_battery_voltage
  5259 ;;		_selectCurrent
  5260 ;;		_selectCurrentValue
  5261 ;;		_selectDecrease
  5262 ;;		_selectFrequency
  5263 ;;		_selectFrequencyValue
  5264 ;;		_selectIncrease
  5265 ;;		_selectSomething
  5266 ;;		_setCurrent
  5267 ;;		_setFrequency
  5268 ;;		_setLEDColor
  5269 ;;		_writePersistentState
  5270 ;; This function is called by:
  5271 ;;		_main
  5272 ;; This function uses a non-reentrant model
  5273 ;;
  5274                           
  5275                           
  5276                           ;psect for function _process_remote_command
  5277  0087                     _process_remote_command:
  5278                           
  5279                           ;incstack = 0
  5280                           ; Regs used in _process_remote_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5281                           ;process_remote_command@code stored from wreg
  5282  0087  0021               	movlb	1	; select bank1
  5283  0088  00E9               	movwf	process_remote_command@code^(0+128)
  5284  0089                     l4111:
  5285                           
  5286                           ;main.c: 384:   setLEDColor(0, 0, 0);
  5287  0089  01F3               	clrf	setLEDColor@green
  5288  008A  01F4               	clrf	setLEDColor@blue
  5289  008B  3000               	movlw	0
  5290  008C  318B  23C2  3180   	fcall	_setLEDColor
  5291                           
  5292                           ;main.c: 386:   switch(code->command){
  5293  008F  2B6D               	goto	l4339
  5294  0090                     l4113:
  5295                           
  5296                           ;main.c: 388:     if(STATE_CURRENT == interfaceState){
  5297  0090  0378               	decf	_interfaceState,w
  5298  0091  1D03               	btfss	3,2
  5299  0092  2894               	goto	u2751
  5300  0093  2895               	goto	u2750
  5301  0094                     u2751:
  5302  0094  28CA               	goto	l4127
  5303  0095                     u2750:
  5304  0095                     l4115:
  5305                           
  5306                           ;main.c: 389:       currentIndex++;
  5307  0095  3001               	movlw	1
  5308  0096  07E5               	addwf	_currentIndex^(0+128),f
  5309  0097  3000               	movlw	0
  5310  0098  3DE6               	addwfc	(_currentIndex+1)^(0+128),f
  5311                           
  5312                           ;main.c: 390:       if (currentIndex > maxCurrentIndex - 1)
  5313  0099  0866               	movf	(_currentIndex+1)^(0+128),w
  5314  009A  3A80               	xorlw	128
  5315  009B  00E7               	movwf	??_process_remote_command^(0+128)
  5316  009C  3080               	movlw	128
  5317  009D  0267               	subwf	??_process_remote_command^(0+128),w
  5318  009E  1D03               	skipz
  5319  009F  28A2               	goto	u2765
  5320  00A0  300A               	movlw	10
  5321  00A1  0265               	subwf	_currentIndex^(0+128),w
  5322  00A2                     u2765:
  5323  00A2  1C03               	skipc
  5324  00A3  28A5               	goto	u2761
  5325  00A4  28A6               	goto	u2760
  5326  00A5                     u2761:
  5327  00A5  28AF               	goto	l4121
  5328  00A6                     u2760:
  5329  00A6                     l4117:
  5330                           
  5331                           ;main.c: 391:       {;main.c: 392:         currentIndex = maxCurrentIndex - 1;
  5332  00A6  3009               	movlw	9
  5333  00A7  0021               	movlb	1	; select bank1
  5334  00A8  00E5               	movwf	_currentIndex^(0+128)
  5335  00A9  3000               	movlw	0
  5336  00AA  00E6               	movwf	(_currentIndex^(0+128)+1)
  5337  00AB                     l4119:
  5338                           
  5339                           ;main.c: 393:         selectSomething();
  5340  00AB  318F  2785  3180   	fcall	_selectSomething
  5341                           
  5342                           ;main.c: 394:       } else {
  5343  00AE  28B2               	goto	l4123
  5344  00AF                     l4121:
  5345                           
  5346                           ;main.c: 395:         selectIncrease();
  5347  00AF  318C  24CC  3180   	fcall	_selectIncrease
  5348  00B2                     l4123:
  5349                           
  5350                           ;main.c: 397:       setCurrent(currentValue[currentIndex], battery_voltage());
  5351  00B2  0021               	movlb	1	; select bank1
  5352  00B3  3565               	lslf	_currentIndex^(0+128),w
  5353  00B4  3EBF               	addlw	(low (_currentValue| 0))& (0+255)
  5354  00B5  0086               	movwf	6
  5355  00B6  0187               	clrf	7
  5356  00B7  3F40               	moviw [0]fsr1
  5357  00B8  0020               	movlb	0	; select bank0
  5358  00B9  00B9               	movwf	setCurrent@microamps
  5359  00BA  3F41               	moviw [1]fsr1
  5360  00BB  00BA               	movwf	setCurrent@microamps+1
  5361  00BC  318E  2622  3180   	fcall	_battery_voltage
  5362  00BF  0020               	movlb	0	; select bank0
  5363  00C0  0838               	movf	?_battery_voltage+1,w
  5364  00C1  00BC               	movwf	setCurrent@Vdd_mv+1
  5365  00C2  0837               	movf	?_battery_voltage,w
  5366  00C3  00BB               	movwf	setCurrent@Vdd_mv
  5367  00C4  3183  23BD  3180   	fcall	_setCurrent
  5368  00C7                     l4125:
  5369                           
  5370                           ;main.c: 398:       writePersistentState();
  5371  00C7  3187  27A4  3180   	fcall	_writePersistentState
  5372  00CA                     l4127:
  5373                           
  5374                           ;main.c: 400:     if(STATE_FREQUENCY == interfaceState){
  5375  00CA  3002               	movlw	2
  5376  00CB  0678               	xorwf	_interfaceState,w
  5377  00CC  1D03               	btfss	3,2
  5378  00CD  28CF               	goto	u2771
  5379  00CE  28D0               	goto	u2770
  5380  00CF                     u2771:
  5381  00CF  28FF               	goto	l4141
  5382  00D0                     u2770:
  5383  00D0                     l4129:
  5384                           
  5385                           ;main.c: 401:       frequencyIndex++;
  5386  00D0  3001               	movlw	1
  5387  00D1  0021               	movlb	1	; select bank1
  5388  00D2  07E3               	addwf	_frequencyIndex^(0+128),f
  5389  00D3  3000               	movlw	0
  5390  00D4  3DE4               	addwfc	(_frequencyIndex+1)^(0+128),f
  5391                           
  5392                           ;main.c: 402:       if (frequencyIndex > maxFrequencyIndex - 1)
  5393  00D5  0864               	movf	(_frequencyIndex+1)^(0+128),w
  5394  00D6  3A80               	xorlw	128
  5395  00D7  00E7               	movwf	??_process_remote_command^(0+128)
  5396  00D8  3080               	movlw	128
  5397  00D9  0267               	subwf	??_process_remote_command^(0+128),w
  5398  00DA  1D03               	skipz
  5399  00DB  28DE               	goto	u2785
  5400  00DC  300A               	movlw	10
  5401  00DD  0263               	subwf	_frequencyIndex^(0+128),w
  5402  00DE                     u2785:
  5403  00DE  1C03               	skipc
  5404  00DF  28E1               	goto	u2781
  5405  00E0  28E2               	goto	u2780
  5406  00E1                     u2781:
  5407  00E1  28EB               	goto	l4135
  5408  00E2                     u2780:
  5409  00E2                     l4131:
  5410                           
  5411                           ;main.c: 403:       {;main.c: 404:         frequencyIndex = maxFrequencyIndex - 1;
  5412  00E2  3009               	movlw	9
  5413  00E3  0021               	movlb	1	; select bank1
  5414  00E4  00E3               	movwf	_frequencyIndex^(0+128)
  5415  00E5  3000               	movlw	0
  5416  00E6  00E4               	movwf	(_frequencyIndex^(0+128)+1)
  5417  00E7                     l4133:
  5418                           
  5419                           ;main.c: 405:         selectSomething();
  5420  00E7  318F  2785  3180   	fcall	_selectSomething
  5421                           
  5422                           ;main.c: 406:       } else {
  5423  00EA  28EE               	goto	l4137
  5424  00EB                     l4135:
  5425                           
  5426                           ;main.c: 407:         selectIncrease();
  5427  00EB  318C  24CC  3180   	fcall	_selectIncrease
  5428  00EE                     l4137:
  5429                           
  5430                           ;main.c: 409:       setFrequency(frequencyValue[frequencyIndex]);
  5431  00EE  0021               	movlb	1	; select bank1
  5432  00EF  3563               	lslf	_frequencyIndex^(0+128),w
  5433  00F0  3E40               	addlw	(low (_frequencyValue| (0+256)))& (0+255)
  5434  00F1  0086               	movwf	6
  5435  00F2  3001               	movlw	1	; select bank2/3
  5436  00F3  0087               	movwf	7
  5437  00F4  3F40               	moviw [0]fsr1
  5438  00F5  0020               	movlb	0	; select bank0
  5439  00F6  00B7               	movwf	setFrequency@frequency_hz
  5440  00F7  3F41               	moviw [1]fsr1
  5441  00F8  00B8               	movwf	setFrequency@frequency_hz+1
  5442  00F9  3186  26DE  3180   	fcall	_setFrequency
  5443  00FC                     l4139:
  5444                           
  5445                           ;main.c: 410:       writePersistentState();
  5446  00FC  3187  27A4  3180   	fcall	_writePersistentState
  5447  00FF                     l4141:
  5448                           
  5449                           ;main.c: 412:     if(STATE_RUNNING == interfaceState){
  5450  00FF  0878               	movf	_interfaceState,w
  5451  0100  1D03               	btfss	3,2
  5452  0101  2903               	goto	u2791
  5453  0102  2904               	goto	u2790
  5454  0103                     u2791:
  5455  0103  2907               	goto	l4145
  5456  0104                     u2790:
  5457  0104                     l4143:
  5458                           
  5459                           ;main.c: 413:       selectSomething();
  5460  0104  318F  2785  3180   	fcall	_selectSomething
  5461  0107                     l4145:
  5462                           
  5463                           ;main.c: 415:     if(STATE_LOWBATTERY == interfaceState){
  5464  0107  3003               	movlw	3
  5465  0108  0678               	xorwf	_interfaceState,w
  5466  0109  1D03               	btfss	3,2
  5467  010A  290C               	goto	u2801
  5468  010B  290D               	goto	u2800
  5469  010C                     u2801:
  5470  010C  2BA3               	goto	l4341
  5471  010D                     u2800:
  5472  010D                     l4147:
  5473                           
  5474                           ;main.c: 416:       selectSomething();
  5475  010D  318F  2785  3180   	fcall	_selectSomething
  5476  0110  2BA3               	goto	l4341
  5477  0111                     l4149:
  5478                           
  5479                           ;main.c: 420:     if(STATE_CURRENT == interfaceState){
  5480  0111  0378               	decf	_interfaceState,w
  5481  0112  1D03               	btfss	3,2
  5482  0113  2915               	goto	u2811
  5483  0114  2916               	goto	u2810
  5484  0115                     u2811:
  5485  0115  293F               	goto	l4165
  5486  0116                     u2810:
  5487  0116                     l4151:
  5488                           
  5489                           ;main.c: 421:       currentIndex--;
  5490  0116  30FF               	movlw	255
  5491  0117  07E5               	addwf	_currentIndex^(0+128),f
  5492  0118  30FF               	movlw	255
  5493  0119  3DE6               	addwfc	(_currentIndex+1)^(0+128),f
  5494  011A                     l4153:
  5495                           
  5496                           ;main.c: 422:       if (currentIndex < 0)
  5497  011A  1FE6               	btfss	(_currentIndex+1)^(0+128),7
  5498  011B  291D               	goto	u2821
  5499  011C  291E               	goto	u2820
  5500  011D                     u2821:
  5501  011D  2924               	goto	l4159
  5502  011E                     u2820:
  5503  011E                     l4155:
  5504                           
  5505                           ;main.c: 423:       {;main.c: 424:         currentIndex = 0;
  5506  011E  01E5               	clrf	_currentIndex^(0+128)
  5507  011F  01E6               	clrf	(_currentIndex+1)^(0+128)
  5508  0120                     l4157:
  5509                           
  5510                           ;main.c: 425:         selectSomething();
  5511  0120  318F  2785  3180   	fcall	_selectSomething
  5512                           
  5513                           ;main.c: 426:       } else {
  5514  0123  2927               	goto	l4161
  5515  0124                     l4159:
  5516                           
  5517                           ;main.c: 427:         selectDecrease();
  5518  0124  318C  2485  3180   	fcall	_selectDecrease
  5519  0127                     l4161:
  5520                           
  5521                           ;main.c: 429:       setCurrent(currentValue[currentIndex], battery_voltage());
  5522  0127  0021               	movlb	1	; select bank1
  5523  0128  3565               	lslf	_currentIndex^(0+128),w
  5524  0129  3EBF               	addlw	(low (_currentValue| 0))& (0+255)
  5525  012A  0086               	movwf	6
  5526  012B  0187               	clrf	7
  5527  012C  3F40               	moviw [0]fsr1
  5528  012D  0020               	movlb	0	; select bank0
  5529  012E  00B9               	movwf	setCurrent@microamps
  5530  012F  3F41               	moviw [1]fsr1
  5531  0130  00BA               	movwf	setCurrent@microamps+1
  5532  0131  318E  2622  3180   	fcall	_battery_voltage
  5533  0134  0020               	movlb	0	; select bank0
  5534  0135  0838               	movf	?_battery_voltage+1,w
  5535  0136  00BC               	movwf	setCurrent@Vdd_mv+1
  5536  0137  0837               	movf	?_battery_voltage,w
  5537  0138  00BB               	movwf	setCurrent@Vdd_mv
  5538  0139  3183  23BD  3180   	fcall	_setCurrent
  5539  013C                     l4163:
  5540                           
  5541                           ;main.c: 430:       writePersistentState();
  5542  013C  3187  27A4  3180   	fcall	_writePersistentState
  5543  013F                     l4165:
  5544                           
  5545                           ;main.c: 432:     if(STATE_FREQUENCY == interfaceState){
  5546  013F  3002               	movlw	2
  5547  0140  0678               	xorwf	_interfaceState,w
  5548  0141  1D03               	btfss	3,2
  5549  0142  2944               	goto	u2831
  5550  0143  2945               	goto	u2830
  5551  0144                     u2831:
  5552  0144  2968               	goto	l4181
  5553  0145                     u2830:
  5554  0145                     l4167:
  5555                           
  5556                           ;main.c: 433:       frequencyIndex--;
  5557  0145  30FF               	movlw	255
  5558  0146  0021               	movlb	1	; select bank1
  5559  0147  07E3               	addwf	_frequencyIndex^(0+128),f
  5560  0148  30FF               	movlw	255
  5561  0149  3DE4               	addwfc	(_frequencyIndex+1)^(0+128),f
  5562  014A                     l4169:
  5563                           
  5564                           ;main.c: 434:       if (frequencyIndex < 0)
  5565  014A  1FE4               	btfss	(_frequencyIndex+1)^(0+128),7
  5566  014B  294D               	goto	u2841
  5567  014C  294E               	goto	u2840
  5568  014D                     u2841:
  5569  014D  2954               	goto	l4175
  5570  014E                     u2840:
  5571  014E                     l4171:
  5572                           
  5573                           ;main.c: 435:       {;main.c: 436:         frequencyIndex = 0;
  5574  014E  01E3               	clrf	_frequencyIndex^(0+128)
  5575  014F  01E4               	clrf	(_frequencyIndex+1)^(0+128)
  5576  0150                     l4173:
  5577                           
  5578                           ;main.c: 437:         selectSomething();
  5579  0150  318F  2785  3180   	fcall	_selectSomething
  5580                           
  5581                           ;main.c: 438:       } else {
  5582  0153  2957               	goto	l4177
  5583  0154                     l4175:
  5584                           
  5585                           ;main.c: 439:         selectDecrease();
  5586  0154  318C  2485  3180   	fcall	_selectDecrease
  5587  0157                     l4177:
  5588                           
  5589                           ;main.c: 441:       setFrequency(frequencyValue[frequencyIndex]);
  5590  0157  0021               	movlb	1	; select bank1
  5591  0158  3563               	lslf	_frequencyIndex^(0+128),w
  5592  0159  3E40               	addlw	(low (_frequencyValue| (0+256)))& (0+255)
  5593  015A  0086               	movwf	6
  5594  015B  3001               	movlw	1	; select bank2/3
  5595  015C  0087               	movwf	7
  5596  015D  3F40               	moviw [0]fsr1
  5597  015E  0020               	movlb	0	; select bank0
  5598  015F  00B7               	movwf	setFrequency@frequency_hz
  5599  0160  3F41               	moviw [1]fsr1
  5600  0161  00B8               	movwf	setFrequency@frequency_hz+1
  5601  0162  3186  26DE  3180   	fcall	_setFrequency
  5602  0165                     l4179:
  5603                           
  5604                           ;main.c: 442:       writePersistentState();
  5605  0165  3187  27A4  3180   	fcall	_writePersistentState
  5606  0168                     l4181:
  5607                           
  5608                           ;main.c: 444:     if(STATE_RUNNING == interfaceState){
  5609  0168  0878               	movf	_interfaceState,w
  5610  0169  1D03               	btfss	3,2
  5611  016A  296C               	goto	u2851
  5612  016B  296D               	goto	u2850
  5613  016C                     u2851:
  5614  016C  2970               	goto	l4185
  5615  016D                     u2850:
  5616  016D                     l4183:
  5617                           
  5618                           ;main.c: 445:       selectSomething();
  5619  016D  318F  2785  3180   	fcall	_selectSomething
  5620  0170                     l4185:
  5621                           
  5622                           ;main.c: 447:     if(STATE_LOWBATTERY == interfaceState){
  5623  0170  3003               	movlw	3
  5624  0171  0678               	xorwf	_interfaceState,w
  5625  0172  1D03               	btfss	3,2
  5626  0173  2975               	goto	u2861
  5627  0174  2976               	goto	u2860
  5628  0175                     u2861:
  5629  0175  2BA3               	goto	l4341
  5630  0176                     u2860:
  5631  0176  290D               	goto	l4147
  5632  0177                     l4189:
  5633                           
  5634                           ;main.c: 452:     selectFrequency();
  5635  0177  318D  2568  3180   	fcall	_selectFrequency
  5636                           
  5637                           ;main.c: 453:     break;
  5638  017A  2BA3               	goto	l4341
  5639  017B                     l4191:
  5640                           
  5641                           ;main.c: 455:     selectCurrent();
  5642  017B  318D  2517  3180   	fcall	_selectCurrent
  5643                           
  5644                           ;main.c: 456:     break;
  5645  017E  2BA3               	goto	l4341
  5646  017F                     l4193:
  5647                           
  5648                           ;main.c: 458:        if (interfaceState == STATE_FREQUENCY){
  5649  017F  3002               	movlw	2
  5650  0180  0678               	xorwf	_interfaceState,w
  5651  0181  1D03               	btfss	3,2
  5652  0182  2984               	goto	u2871
  5653  0183  2985               	goto	u2870
  5654  0184                     u2871:
  5655  0184  2996               	goto	l4201
  5656  0185                     u2870:
  5657  0185                     l4195:
  5658                           
  5659                           ;main.c: 459:            setFrequency(frequencyValue[0]);
  5660  0185  0022               	movlb	2	; select bank2
  5661  0186  0841               	movf	(_frequencyValue+1)^(0+256),w
  5662  0187  0020               	movlb	0	; select bank0
  5663  0188  00B8               	movwf	setFrequency@frequency_hz+1
  5664  0189  0022               	movlb	2	; select bank2
  5665  018A  0840               	movf	_frequencyValue^(0+256),w
  5666  018B  0020               	movlb	0	; select bank0
  5667  018C  00B7               	movwf	setFrequency@frequency_hz
  5668  018D  3186  26DE  3180   	fcall	_setFrequency
  5669  0190                     l4197:
  5670                           
  5671                           ;main.c: 460:            frequencyIndex = 0;
  5672  0190  0021               	movlb	1	; select bank1
  5673  0191  01E3               	clrf	_frequencyIndex^(0+128)
  5674  0192  01E4               	clrf	(_frequencyIndex+1)^(0+128)
  5675  0193                     l4199:
  5676                           
  5677                           ;main.c: 461:            selectFrequencyValue();
  5678  0193  318C  24F1  3180   	fcall	_selectFrequencyValue
  5679  0196                     l4201:
  5680                           
  5681                           ;main.c: 463:        if (interfaceState == STATE_CURRENT){
  5682  0196  0378               	decf	_interfaceState,w
  5683  0197  1D03               	btfss	3,2
  5684  0198  299A               	goto	u2881
  5685  0199  299B               	goto	u2880
  5686  019A                     u2881:
  5687  019A  2BA3               	goto	l4341
  5688  019B                     u2880:
  5689  019B                     l4203:
  5690                           
  5691                           ;main.c: 464:            setCurrent(currentValue[0], battery_voltage());
  5692  019B  0021               	movlb	1	; select bank1
  5693  019C  0840               	movf	(_currentValue+1)^(0+128),w
  5694  019D  0020               	movlb	0	; select bank0
  5695  019E  00BA               	movwf	setCurrent@microamps+1
  5696  019F  0021               	movlb	1	; select bank1
  5697  01A0  083F               	movf	_currentValue^(0+128),w
  5698  01A1  0020               	movlb	0	; select bank0
  5699  01A2  00B9               	movwf	setCurrent@microamps
  5700  01A3  318E  2622  3180   	fcall	_battery_voltage
  5701  01A6  0020               	movlb	0	; select bank0
  5702  01A7  0838               	movf	?_battery_voltage+1,w
  5703  01A8  00BC               	movwf	setCurrent@Vdd_mv+1
  5704  01A9  0837               	movf	?_battery_voltage,w
  5705  01AA  00BB               	movwf	setCurrent@Vdd_mv
  5706  01AB  3183  23BD  3180   	fcall	_setCurrent
  5707  01AE                     l4205:
  5708                           
  5709                           ;main.c: 465:            currentIndex = 0;
  5710  01AE  0021               	movlb	1	; select bank1
  5711  01AF  01E5               	clrf	_currentIndex^(0+128)
  5712  01B0  01E6               	clrf	(_currentIndex+1)^(0+128)
  5713  01B1                     l4207:
  5714                           
  5715                           ;main.c: 466:            selectCurrentValue();
  5716  01B1  318D  253F  3180   	fcall	_selectCurrentValue
  5717  01B4  2BA3               	goto	l4341
  5718  01B5                     l4209:
  5719                           
  5720                           ;main.c: 473:      if (interfaceState == STATE_FREQUENCY) {
  5721  01B5  3002               	movlw	2
  5722  01B6  0678               	xorwf	_interfaceState,w
  5723  01B7  1D03               	btfss	3,2
  5724  01B8  29BA               	goto	u2891
  5725  01B9  29BB               	goto	u2890
  5726  01BA                     u2891:
  5727  01BA  29CE               	goto	l4217
  5728  01BB                     u2890:
  5729  01BB                     l4211:
  5730                           
  5731                           ;main.c: 474:          setFrequency(frequencyValue[1]);
  5732  01BB  0022               	movlb	2	; select bank2
  5733  01BC  0843               	movf	((_frequencyValue+1)^(0+256)+2),w
  5734  01BD  0020               	movlb	0	; select bank0
  5735  01BE  00B8               	movwf	setFrequency@frequency_hz+1
  5736  01BF  0022               	movlb	2	; select bank2
  5737  01C0  0842               	movf	(_frequencyValue^(0+256)+2),w
  5738  01C1  0020               	movlb	0	; select bank0
  5739  01C2  00B7               	movwf	setFrequency@frequency_hz
  5740  01C3  3186  26DE  3180   	fcall	_setFrequency
  5741  01C6                     l4213:
  5742                           
  5743                           ;main.c: 475:          frequencyIndex = 1;
  5744  01C6  3001               	movlw	1
  5745  01C7  0021               	movlb	1	; select bank1
  5746  01C8  00E3               	movwf	_frequencyIndex^(0+128)
  5747  01C9  3000               	movlw	0
  5748  01CA  00E4               	movwf	(_frequencyIndex^(0+128)+1)
  5749  01CB                     l4215:
  5750                           
  5751                           ;main.c: 476:          selectFrequencyValue();
  5752  01CB  318C  24F1  3180   	fcall	_selectFrequencyValue
  5753  01CE                     l4217:
  5754                           
  5755                           ;main.c: 478:      if (interfaceState == STATE_CURRENT) {
  5756  01CE  0378               	decf	_interfaceState,w
  5757  01CF  1D03               	btfss	3,2
  5758  01D0  29D2               	goto	u2901
  5759  01D1  29D3               	goto	u2900
  5760  01D2                     u2901:
  5761  01D2  2BA3               	goto	l4341
  5762  01D3                     u2900:
  5763  01D3                     l4219:
  5764                           
  5765                           ;main.c: 479:          setCurrent(currentValue[1], battery_voltage());
  5766  01D3  0021               	movlb	1	; select bank1
  5767  01D4  0842               	movf	((_currentValue+1)^(0+128)+2),w
  5768  01D5  0020               	movlb	0	; select bank0
  5769  01D6  00BA               	movwf	setCurrent@microamps+1
  5770  01D7  0021               	movlb	1	; select bank1
  5771  01D8  0841               	movf	(_currentValue^(0+128)+2),w
  5772  01D9  0020               	movlb	0	; select bank0
  5773  01DA  00B9               	movwf	setCurrent@microamps
  5774  01DB  318E  2622  3180   	fcall	_battery_voltage
  5775  01DE  0020               	movlb	0	; select bank0
  5776  01DF  0838               	movf	?_battery_voltage+1,w
  5777  01E0  00BC               	movwf	setCurrent@Vdd_mv+1
  5778  01E1  0837               	movf	?_battery_voltage,w
  5779  01E2  00BB               	movwf	setCurrent@Vdd_mv
  5780  01E3  3183  23BD  3180   	fcall	_setCurrent
  5781  01E6                     l4221:
  5782                           
  5783                           ;main.c: 480:          currentIndex = 1;
  5784  01E6  3001               	movlw	1
  5785  01E7  0021               	movlb	1	; select bank1
  5786  01E8  00E5               	movwf	_currentIndex^(0+128)
  5787  01E9  3000               	movlw	0
  5788  01EA  00E6               	movwf	(_currentIndex^(0+128)+1)
  5789  01EB  29B1               	goto	l4207
  5790  01EC                     l4225:
  5791                           
  5792                           ;main.c: 489:      if (interfaceState == STATE_FREQUENCY) {
  5793  01EC  3002               	movlw	2
  5794  01ED  0678               	xorwf	_interfaceState,w
  5795  01EE  1D03               	btfss	3,2
  5796  01EF  29F1               	goto	u2911
  5797  01F0  29F2               	goto	u2910
  5798  01F1                     u2911:
  5799  01F1  2A05               	goto	l4233
  5800  01F2                     u2910:
  5801  01F2                     l4227:
  5802                           
  5803                           ;main.c: 490:          setFrequency(frequencyValue[2]);
  5804  01F2  0022               	movlb	2	; select bank2
  5805  01F3  0845               	movf	((_frequencyValue+1)^(0+256)+4),w
  5806  01F4  0020               	movlb	0	; select bank0
  5807  01F5  00B8               	movwf	setFrequency@frequency_hz+1
  5808  01F6  0022               	movlb	2	; select bank2
  5809  01F7  0844               	movf	(_frequencyValue^(0+256)+4),w
  5810  01F8  0020               	movlb	0	; select bank0
  5811  01F9  00B7               	movwf	setFrequency@frequency_hz
  5812  01FA  3186  26DE  3180   	fcall	_setFrequency
  5813  01FD                     l4229:
  5814                           
  5815                           ;main.c: 491:          frequencyIndex = 2;
  5816  01FD  3002               	movlw	2
  5817  01FE  0021               	movlb	1	; select bank1
  5818  01FF  00E3               	movwf	_frequencyIndex^(0+128)
  5819  0200  3000               	movlw	0
  5820  0201  00E4               	movwf	(_frequencyIndex^(0+128)+1)
  5821  0202                     l4231:
  5822                           
  5823                           ;main.c: 492:          selectFrequencyValue();
  5824  0202  318C  24F1  3180   	fcall	_selectFrequencyValue
  5825  0205                     l4233:
  5826                           
  5827                           ;main.c: 494:      if (interfaceState == STATE_CURRENT) {
  5828  0205  0378               	decf	_interfaceState,w
  5829  0206  1D03               	btfss	3,2
  5830  0207  2A09               	goto	u2921
  5831  0208  2A0A               	goto	u2920
  5832  0209                     u2921:
  5833  0209  2BA3               	goto	l4341
  5834  020A                     u2920:
  5835  020A                     l4235:
  5836                           
  5837                           ;main.c: 495:          setCurrent(currentValue[2], battery_voltage());
  5838  020A  0021               	movlb	1	; select bank1
  5839  020B  0844               	movf	((_currentValue+1)^(0+128)+4),w
  5840  020C  0020               	movlb	0	; select bank0
  5841  020D  00BA               	movwf	setCurrent@microamps+1
  5842  020E  0021               	movlb	1	; select bank1
  5843  020F  0843               	movf	(_currentValue^(0+128)+4),w
  5844  0210  0020               	movlb	0	; select bank0
  5845  0211  00B9               	movwf	setCurrent@microamps
  5846  0212  318E  2622  3180   	fcall	_battery_voltage
  5847  0215  0020               	movlb	0	; select bank0
  5848  0216  0838               	movf	?_battery_voltage+1,w
  5849  0217  00BC               	movwf	setCurrent@Vdd_mv+1
  5850  0218  0837               	movf	?_battery_voltage,w
  5851  0219  00BB               	movwf	setCurrent@Vdd_mv
  5852  021A  3183  23BD  3180   	fcall	_setCurrent
  5853  021D                     l4237:
  5854                           
  5855                           ;main.c: 496:          currentIndex = 2;
  5856  021D  3002               	movlw	2
  5857  021E  0021               	movlb	1	; select bank1
  5858  021F  00E5               	movwf	_currentIndex^(0+128)
  5859  0220  3000               	movlw	0
  5860  0221  00E6               	movwf	(_currentIndex^(0+128)+1)
  5861  0222  29B1               	goto	l4207
  5862  0223                     l4241:
  5863                           
  5864                           ;main.c: 501:        if (interfaceState == STATE_FREQUENCY) {
  5865  0223  3002               	movlw	2
  5866  0224  0678               	xorwf	_interfaceState,w
  5867  0225  1D03               	btfss	3,2
  5868  0226  2A28               	goto	u2931
  5869  0227  2A29               	goto	u2930
  5870  0228                     u2931:
  5871  0228  2A3C               	goto	l4249
  5872  0229                     u2930:
  5873  0229                     l4243:
  5874                           
  5875                           ;main.c: 502:            setFrequency(frequencyValue[3]);
  5876  0229  0022               	movlb	2	; select bank2
  5877  022A  0847               	movf	((_frequencyValue+1)^(0+256)+6),w
  5878  022B  0020               	movlb	0	; select bank0
  5879  022C  00B8               	movwf	setFrequency@frequency_hz+1
  5880  022D  0022               	movlb	2	; select bank2
  5881  022E  0846               	movf	(_frequencyValue^(0+256)+6),w
  5882  022F  0020               	movlb	0	; select bank0
  5883  0230  00B7               	movwf	setFrequency@frequency_hz
  5884  0231  3186  26DE  3180   	fcall	_setFrequency
  5885  0234                     l4245:
  5886                           
  5887                           ;main.c: 503:            frequencyIndex = 3;
  5888  0234  3003               	movlw	3
  5889  0235  0021               	movlb	1	; select bank1
  5890  0236  00E3               	movwf	_frequencyIndex^(0+128)
  5891  0237  3000               	movlw	0
  5892  0238  00E4               	movwf	(_frequencyIndex^(0+128)+1)
  5893  0239                     l4247:
  5894                           
  5895                           ;main.c: 504:            selectFrequencyValue();
  5896  0239  318C  24F1  3180   	fcall	_selectFrequencyValue
  5897  023C                     l4249:
  5898                           
  5899                           ;main.c: 506:        if (interfaceState == STATE_CURRENT) {
  5900  023C  0378               	decf	_interfaceState,w
  5901  023D  1D03               	btfss	3,2
  5902  023E  2A40               	goto	u2941
  5903  023F  2A41               	goto	u2940
  5904  0240                     u2941:
  5905  0240  2BA3               	goto	l4341
  5906  0241                     u2940:
  5907  0241                     l4251:
  5908                           
  5909                           ;main.c: 507:            setCurrent(currentValue[3], battery_voltage());
  5910  0241  0021               	movlb	1	; select bank1
  5911  0242  0846               	movf	((_currentValue+1)^(0+128)+6),w
  5912  0243  0020               	movlb	0	; select bank0
  5913  0244  00BA               	movwf	setCurrent@microamps+1
  5914  0245  0021               	movlb	1	; select bank1
  5915  0246  0845               	movf	(_currentValue^(0+128)+6),w
  5916  0247  0020               	movlb	0	; select bank0
  5917  0248  00B9               	movwf	setCurrent@microamps
  5918  0249  318E  2622  3180   	fcall	_battery_voltage
  5919  024C  0020               	movlb	0	; select bank0
  5920  024D  0838               	movf	?_battery_voltage+1,w
  5921  024E  00BC               	movwf	setCurrent@Vdd_mv+1
  5922  024F  0837               	movf	?_battery_voltage,w
  5923  0250  00BB               	movwf	setCurrent@Vdd_mv
  5924  0251  3183  23BD  3180   	fcall	_setCurrent
  5925  0254                     l4253:
  5926                           
  5927                           ;main.c: 508:            currentIndex = 3;
  5928  0254  3003               	movlw	3
  5929  0255  0021               	movlb	1	; select bank1
  5930  0256  00E5               	movwf	_currentIndex^(0+128)
  5931  0257  3000               	movlw	0
  5932  0258  00E6               	movwf	(_currentIndex^(0+128)+1)
  5933  0259  29B1               	goto	l4207
  5934  025A                     l4257:
  5935                           
  5936                           ;main.c: 513:        if (interfaceState == STATE_FREQUENCY) {
  5937  025A  3002               	movlw	2
  5938  025B  0678               	xorwf	_interfaceState,w
  5939  025C  1D03               	btfss	3,2
  5940  025D  2A5F               	goto	u2951
  5941  025E  2A60               	goto	u2950
  5942  025F                     u2951:
  5943  025F  2A73               	goto	l4265
  5944  0260                     u2950:
  5945  0260                     l4259:
  5946                           
  5947                           ;main.c: 514:            setFrequency(frequencyValue[4]);
  5948  0260  0022               	movlb	2	; select bank2
  5949  0261  0849               	movf	((_frequencyValue+1)^(0+256)+8),w
  5950  0262  0020               	movlb	0	; select bank0
  5951  0263  00B8               	movwf	setFrequency@frequency_hz+1
  5952  0264  0022               	movlb	2	; select bank2
  5953  0265  0848               	movf	(_frequencyValue^(0+256)+8),w
  5954  0266  0020               	movlb	0	; select bank0
  5955  0267  00B7               	movwf	setFrequency@frequency_hz
  5956  0268  3186  26DE  3180   	fcall	_setFrequency
  5957  026B                     l4261:
  5958                           
  5959                           ;main.c: 515:            frequencyIndex = 4;
  5960  026B  3004               	movlw	4
  5961  026C  0021               	movlb	1	; select bank1
  5962  026D  00E3               	movwf	_frequencyIndex^(0+128)
  5963  026E  3000               	movlw	0
  5964  026F  00E4               	movwf	(_frequencyIndex^(0+128)+1)
  5965  0270                     l4263:
  5966                           
  5967                           ;main.c: 516:            selectFrequencyValue();
  5968  0270  318C  24F1  3180   	fcall	_selectFrequencyValue
  5969  0273                     l4265:
  5970                           
  5971                           ;main.c: 518:        if (interfaceState == STATE_CURRENT) {
  5972  0273  0378               	decf	_interfaceState,w
  5973  0274  1D03               	btfss	3,2
  5974  0275  2A77               	goto	u2961
  5975  0276  2A78               	goto	u2960
  5976  0277                     u2961:
  5977  0277  2BA3               	goto	l4341
  5978  0278                     u2960:
  5979  0278                     l4267:
  5980                           
  5981                           ;main.c: 519:            setCurrent(currentValue[4], battery_voltage());
  5982  0278  0021               	movlb	1	; select bank1
  5983  0279  0848               	movf	((_currentValue+1)^(0+128)+8),w
  5984  027A  0020               	movlb	0	; select bank0
  5985  027B  00BA               	movwf	setCurrent@microamps+1
  5986  027C  0021               	movlb	1	; select bank1
  5987  027D  0847               	movf	(_currentValue^(0+128)+8),w
  5988  027E  0020               	movlb	0	; select bank0
  5989  027F  00B9               	movwf	setCurrent@microamps
  5990  0280  318E  2622  3180   	fcall	_battery_voltage
  5991  0283  0020               	movlb	0	; select bank0
  5992  0284  0838               	movf	?_battery_voltage+1,w
  5993  0285  00BC               	movwf	setCurrent@Vdd_mv+1
  5994  0286  0837               	movf	?_battery_voltage,w
  5995  0287  00BB               	movwf	setCurrent@Vdd_mv
  5996  0288  3183  23BD  3180   	fcall	_setCurrent
  5997  028B                     l4269:
  5998                           
  5999                           ;main.c: 520:            currentIndex = 4;
  6000  028B  3004               	movlw	4
  6001  028C  0021               	movlb	1	; select bank1
  6002  028D  00E5               	movwf	_currentIndex^(0+128)
  6003  028E  3000               	movlw	0
  6004  028F  00E6               	movwf	(_currentIndex^(0+128)+1)
  6005  0290  29B1               	goto	l4207
  6006  0291                     l4273:
  6007                           
  6008                           ;main.c: 525:        if (interfaceState == STATE_FREQUENCY) {
  6009  0291  3002               	movlw	2
  6010  0292  0678               	xorwf	_interfaceState,w
  6011  0293  1D03               	btfss	3,2
  6012  0294  2A96               	goto	u2971
  6013  0295  2A97               	goto	u2970
  6014  0296                     u2971:
  6015  0296  2AAA               	goto	l4281
  6016  0297                     u2970:
  6017  0297                     l4275:
  6018                           
  6019                           ;main.c: 526:            setFrequency(frequencyValue[5]);
  6020  0297  0022               	movlb	2	; select bank2
  6021  0298  084B               	movf	((_frequencyValue+1)^(0+256)+10),w
  6022  0299  0020               	movlb	0	; select bank0
  6023  029A  00B8               	movwf	setFrequency@frequency_hz+1
  6024  029B  0022               	movlb	2	; select bank2
  6025  029C  084A               	movf	(_frequencyValue^(0+256)+10),w
  6026  029D  0020               	movlb	0	; select bank0
  6027  029E  00B7               	movwf	setFrequency@frequency_hz
  6028  029F  3186  26DE  3180   	fcall	_setFrequency
  6029  02A2                     l4277:
  6030                           
  6031                           ;main.c: 527:            frequencyIndex = 5;
  6032  02A2  3005               	movlw	5
  6033  02A3  0021               	movlb	1	; select bank1
  6034  02A4  00E3               	movwf	_frequencyIndex^(0+128)
  6035  02A5  3000               	movlw	0
  6036  02A6  00E4               	movwf	(_frequencyIndex^(0+128)+1)
  6037  02A7                     l4279:
  6038                           
  6039                           ;main.c: 528:            selectFrequencyValue();
  6040  02A7  318C  24F1  3180   	fcall	_selectFrequencyValue
  6041  02AA                     l4281:
  6042                           
  6043                           ;main.c: 530:        if (interfaceState == STATE_CURRENT) {
  6044  02AA  0378               	decf	_interfaceState,w
  6045  02AB  1D03               	btfss	3,2
  6046  02AC  2AAE               	goto	u2981
  6047  02AD  2AAF               	goto	u2980
  6048  02AE                     u2981:
  6049  02AE  2BA3               	goto	l4341
  6050  02AF                     u2980:
  6051  02AF                     l4283:
  6052                           
  6053                           ;main.c: 531:            setCurrent(currentValue[5], battery_voltage());
  6054  02AF  0021               	movlb	1	; select bank1
  6055  02B0  084A               	movf	((_currentValue+1)^(0+128)+10),w
  6056  02B1  0020               	movlb	0	; select bank0
  6057  02B2  00BA               	movwf	setCurrent@microamps+1
  6058  02B3  0021               	movlb	1	; select bank1
  6059  02B4  0849               	movf	(_currentValue^(0+128)+10),w
  6060  02B5  0020               	movlb	0	; select bank0
  6061  02B6  00B9               	movwf	setCurrent@microamps
  6062  02B7  318E  2622  3180   	fcall	_battery_voltage
  6063  02BA  0020               	movlb	0	; select bank0
  6064  02BB  0838               	movf	?_battery_voltage+1,w
  6065  02BC  00BC               	movwf	setCurrent@Vdd_mv+1
  6066  02BD  0837               	movf	?_battery_voltage,w
  6067  02BE  00BB               	movwf	setCurrent@Vdd_mv
  6068  02BF  3183  23BD  3180   	fcall	_setCurrent
  6069  02C2                     l4285:
  6070                           
  6071                           ;main.c: 532:            currentIndex = 5;
  6072  02C2  3005               	movlw	5
  6073  02C3  0021               	movlb	1	; select bank1
  6074  02C4  00E5               	movwf	_currentIndex^(0+128)
  6075  02C5  3000               	movlw	0
  6076  02C6  00E6               	movwf	(_currentIndex^(0+128)+1)
  6077  02C7  29B1               	goto	l4207
  6078  02C8                     l4289:
  6079                           
  6080                           ;main.c: 537:        if (interfaceState == STATE_FREQUENCY) {
  6081  02C8  3002               	movlw	2
  6082  02C9  0678               	xorwf	_interfaceState,w
  6083  02CA  1D03               	btfss	3,2
  6084  02CB  2ACD               	goto	u2991
  6085  02CC  2ACE               	goto	u2990
  6086  02CD                     u2991:
  6087  02CD  2AE1               	goto	l4297
  6088  02CE                     u2990:
  6089  02CE                     l4291:
  6090                           
  6091                           ;main.c: 538:            setFrequency(frequencyValue[6]);
  6092  02CE  0022               	movlb	2	; select bank2
  6093  02CF  084D               	movf	((_frequencyValue+1)^(0+256)+12),w
  6094  02D0  0020               	movlb	0	; select bank0
  6095  02D1  00B8               	movwf	setFrequency@frequency_hz+1
  6096  02D2  0022               	movlb	2	; select bank2
  6097  02D3  084C               	movf	(_frequencyValue^(0+256)+12),w
  6098  02D4  0020               	movlb	0	; select bank0
  6099  02D5  00B7               	movwf	setFrequency@frequency_hz
  6100  02D6  3186  26DE  3180   	fcall	_setFrequency
  6101  02D9                     l4293:
  6102                           
  6103                           ;main.c: 539:            frequencyIndex = 6;
  6104  02D9  3006               	movlw	6
  6105  02DA  0021               	movlb	1	; select bank1
  6106  02DB  00E3               	movwf	_frequencyIndex^(0+128)
  6107  02DC  3000               	movlw	0
  6108  02DD  00E4               	movwf	(_frequencyIndex^(0+128)+1)
  6109  02DE                     l4295:
  6110                           
  6111                           ;main.c: 540:            selectFrequencyValue();
  6112  02DE  318C  24F1  3180   	fcall	_selectFrequencyValue
  6113  02E1                     l4297:
  6114                           
  6115                           ;main.c: 542:        if (interfaceState == STATE_CURRENT) {
  6116  02E1  0378               	decf	_interfaceState,w
  6117  02E2  1D03               	btfss	3,2
  6118  02E3  2AE5               	goto	u3001
  6119  02E4  2AE6               	goto	u3000
  6120  02E5                     u3001:
  6121  02E5  2BA3               	goto	l4341
  6122  02E6                     u3000:
  6123  02E6                     l4299:
  6124                           
  6125                           ;main.c: 543:            setCurrent(currentValue[6], battery_voltage());
  6126  02E6  0021               	movlb	1	; select bank1
  6127  02E7  084C               	movf	((_currentValue+1)^(0+128)+12),w
  6128  02E8  0020               	movlb	0	; select bank0
  6129  02E9  00BA               	movwf	setCurrent@microamps+1
  6130  02EA  0021               	movlb	1	; select bank1
  6131  02EB  084B               	movf	(_currentValue^(0+128)+12),w
  6132  02EC  0020               	movlb	0	; select bank0
  6133  02ED  00B9               	movwf	setCurrent@microamps
  6134  02EE  318E  2622  3180   	fcall	_battery_voltage
  6135  02F1  0020               	movlb	0	; select bank0
  6136  02F2  0838               	movf	?_battery_voltage+1,w
  6137  02F3  00BC               	movwf	setCurrent@Vdd_mv+1
  6138  02F4  0837               	movf	?_battery_voltage,w
  6139  02F5  00BB               	movwf	setCurrent@Vdd_mv
  6140  02F6  3183  23BD  3180   	fcall	_setCurrent
  6141  02F9                     l4301:
  6142                           
  6143                           ;main.c: 544:            currentIndex = 6;
  6144  02F9  3006               	movlw	6
  6145  02FA  0021               	movlb	1	; select bank1
  6146  02FB  00E5               	movwf	_currentIndex^(0+128)
  6147  02FC  3000               	movlw	0
  6148  02FD  00E6               	movwf	(_currentIndex^(0+128)+1)
  6149  02FE  29B1               	goto	l4207
  6150  02FF                     l4305:
  6151                           
  6152                           ;main.c: 549:        if (interfaceState == STATE_FREQUENCY) {
  6153  02FF  3002               	movlw	2
  6154  0300  0678               	xorwf	_interfaceState,w
  6155  0301  1D03               	btfss	3,2
  6156  0302  2B04               	goto	u3011
  6157  0303  2B05               	goto	u3010
  6158  0304                     u3011:
  6159  0304  2B18               	goto	l4313
  6160  0305                     u3010:
  6161  0305                     l4307:
  6162                           
  6163                           ;main.c: 550:            setFrequency(frequencyValue[7]);
  6164  0305  0022               	movlb	2	; select bank2
  6165  0306  084F               	movf	((_frequencyValue+1)^(0+256)+14),w
  6166  0307  0020               	movlb	0	; select bank0
  6167  0308  00B8               	movwf	setFrequency@frequency_hz+1
  6168  0309  0022               	movlb	2	; select bank2
  6169  030A  084E               	movf	(_frequencyValue^(0+256)+14),w
  6170  030B  0020               	movlb	0	; select bank0
  6171  030C  00B7               	movwf	setFrequency@frequency_hz
  6172  030D  3186  26DE  3180   	fcall	_setFrequency
  6173  0310                     l4309:
  6174                           
  6175                           ;main.c: 551:            frequencyIndex = 7;
  6176  0310  3007               	movlw	7
  6177  0311  0021               	movlb	1	; select bank1
  6178  0312  00E3               	movwf	_frequencyIndex^(0+128)
  6179  0313  3000               	movlw	0
  6180  0314  00E4               	movwf	(_frequencyIndex^(0+128)+1)
  6181  0315                     l4311:
  6182                           
  6183                           ;main.c: 552:            selectFrequencyValue();
  6184  0315  318C  24F1  3180   	fcall	_selectFrequencyValue
  6185  0318                     l4313:
  6186                           
  6187                           ;main.c: 554:        if (interfaceState == STATE_CURRENT) {
  6188  0318  0378               	decf	_interfaceState,w
  6189  0319  1D03               	btfss	3,2
  6190  031A  2B1C               	goto	u3021
  6191  031B  2B1D               	goto	u3020
  6192  031C                     u3021:
  6193  031C  2BA3               	goto	l4341
  6194  031D                     u3020:
  6195  031D                     l4315:
  6196                           
  6197                           ;main.c: 555:            setCurrent(currentValue[7], battery_voltage());
  6198  031D  0021               	movlb	1	; select bank1
  6199  031E  084E               	movf	((_currentValue+1)^(0+128)+14),w
  6200  031F  0020               	movlb	0	; select bank0
  6201  0320  00BA               	movwf	setCurrent@microamps+1
  6202  0321  0021               	movlb	1	; select bank1
  6203  0322  084D               	movf	(_currentValue^(0+128)+14),w
  6204  0323  0020               	movlb	0	; select bank0
  6205  0324  00B9               	movwf	setCurrent@microamps
  6206  0325  318E  2622  3180   	fcall	_battery_voltage
  6207  0328  0020               	movlb	0	; select bank0
  6208  0329  0838               	movf	?_battery_voltage+1,w
  6209  032A  00BC               	movwf	setCurrent@Vdd_mv+1
  6210  032B  0837               	movf	?_battery_voltage,w
  6211  032C  00BB               	movwf	setCurrent@Vdd_mv
  6212  032D  3183  23BD  3180   	fcall	_setCurrent
  6213  0330                     l4317:
  6214                           
  6215                           ;main.c: 556:            currentIndex = 7;
  6216  0330  3007               	movlw	7
  6217  0331  0021               	movlb	1	; select bank1
  6218  0332  00E5               	movwf	_currentIndex^(0+128)
  6219  0333  3000               	movlw	0
  6220  0334  00E6               	movwf	(_currentIndex^(0+128)+1)
  6221  0335  29B1               	goto	l4207
  6222  0336                     l4321:
  6223                           
  6224                           ;main.c: 561:        if (interfaceState == STATE_FREQUENCY) {
  6225  0336  3002               	movlw	2
  6226  0337  0678               	xorwf	_interfaceState,w
  6227  0338  1D03               	btfss	3,2
  6228  0339  2B3B               	goto	u3031
  6229  033A  2B3C               	goto	u3030
  6230  033B                     u3031:
  6231  033B  2B4F               	goto	l4329
  6232  033C                     u3030:
  6233  033C                     l4323:
  6234                           
  6235                           ;main.c: 562:            setFrequency(frequencyValue[8]);
  6236  033C  0022               	movlb	2	; select bank2
  6237  033D  0851               	movf	((_frequencyValue+1)^(0+256)+16),w
  6238  033E  0020               	movlb	0	; select bank0
  6239  033F  00B8               	movwf	setFrequency@frequency_hz+1
  6240  0340  0022               	movlb	2	; select bank2
  6241  0341  0850               	movf	(_frequencyValue^(0+256)+16),w
  6242  0342  0020               	movlb	0	; select bank0
  6243  0343  00B7               	movwf	setFrequency@frequency_hz
  6244  0344  3186  26DE  3180   	fcall	_setFrequency
  6245  0347                     l4325:
  6246                           
  6247                           ;main.c: 563:            frequencyIndex = 8;
  6248  0347  3008               	movlw	8
  6249  0348  0021               	movlb	1	; select bank1
  6250  0349  00E3               	movwf	_frequencyIndex^(0+128)
  6251  034A  3000               	movlw	0
  6252  034B  00E4               	movwf	(_frequencyIndex^(0+128)+1)
  6253  034C                     l4327:
  6254                           
  6255                           ;main.c: 564:            selectFrequencyValue();
  6256  034C  318C  24F1  3180   	fcall	_selectFrequencyValue
  6257  034F                     l4329:
  6258                           
  6259                           ;main.c: 566:        if (interfaceState == STATE_CURRENT) {
  6260  034F  0378               	decf	_interfaceState,w
  6261  0350  1D03               	btfss	3,2
  6262  0351  2B53               	goto	u3041
  6263  0352  2B54               	goto	u3040
  6264  0353                     u3041:
  6265  0353  2BA3               	goto	l4341
  6266  0354                     u3040:
  6267  0354                     l4331:
  6268                           
  6269                           ;main.c: 567:            setCurrent(currentValue[8], battery_voltage());
  6270  0354  0021               	movlb	1	; select bank1
  6271  0355  0850               	movf	((_currentValue+1)^(0+128)+16),w
  6272  0356  0020               	movlb	0	; select bank0
  6273  0357  00BA               	movwf	setCurrent@microamps+1
  6274  0358  0021               	movlb	1	; select bank1
  6275  0359  084F               	movf	(_currentValue^(0+128)+16),w
  6276  035A  0020               	movlb	0	; select bank0
  6277  035B  00B9               	movwf	setCurrent@microamps
  6278  035C  318E  2622  3180   	fcall	_battery_voltage
  6279  035F  0020               	movlb	0	; select bank0
  6280  0360  0838               	movf	?_battery_voltage+1,w
  6281  0361  00BC               	movwf	setCurrent@Vdd_mv+1
  6282  0362  0837               	movf	?_battery_voltage,w
  6283  0363  00BB               	movwf	setCurrent@Vdd_mv
  6284  0364  3183  23BD  3180   	fcall	_setCurrent
  6285  0367                     l4333:
  6286                           
  6287                           ;main.c: 568:            currentIndex = 8;
  6288  0367  3008               	movlw	8
  6289  0368  0021               	movlb	1	; select bank1
  6290  0369  00E5               	movwf	_currentIndex^(0+128)
  6291  036A  3000               	movlw	0
  6292  036B  00E6               	movwf	(_currentIndex^(0+128)+1)
  6293  036C  29B1               	goto	l4207
  6294  036D                     l4339:
  6295  036D  0021               	movlb	1	; select bank1
  6296  036E  0869               	movf	process_remote_command@code^(0+128),w
  6297  036F  3E03               	addlw	3
  6298  0370  0086               	movwf	6
  6299  0371  0187               	clrf	7
  6300  0372  0801               	movf	1,w
  6301  0373  00E7               	movwf	??_process_remote_command^(0+128)
  6302  0374  01E8               	clrf	(??_process_remote_command^(0+128)+1)
  6303                           
  6304                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6305                           ; Switch size 1, requested type "simple"
  6306                           ; Number of cases is 1, Range of values is 0 to 0
  6307                           ; switch strategies available:
  6308                           ; Name         Instructions Cycles
  6309                           ; simple_byte            4     3 (average)
  6310                           ; direct_byte            8     6 (fixed)
  6311                           ; jumptable            260     6 (fixed)
  6312                           ;	Chosen strategy is simple_byte
  6313  0375  0868               	movf	(??_process_remote_command+1)^(0+128),w
  6314  0376  3A00               	xorlw	0	; case 0
  6315  0377  1903               	skipnz
  6316  0378  2B7A               	goto	l4483
  6317  0379  2BA3               	goto	l4341
  6318  037A                     l4483:
  6319                           
  6320                           ; Switch size 1, requested type "simple"
  6321                           ; Number of cases is 13, Range of values is 8 to 176
  6322                           ; switch strategies available:
  6323                           ; Name         Instructions Cycles
  6324                           ; simple_byte           40    21 (average)
  6325                           ; jumptable            263     9 (fixed)
  6326                           ;	Chosen strategy is simple_byte
  6327  037A  0867               	movf	??_process_remote_command^(0+128),w
  6328  037B  3A08               	xorlw	8	; case 8
  6329  037C  1903               	skipnz
  6330  037D  297F               	goto	l4193
  6331  037E  3A18               	xorlw	24	; case 16
  6332  037F  1903               	skipnz
  6333  0380  297B               	goto	l4191
  6334  0381  3A08               	xorlw	8	; case 24
  6335  0382  1903               	skipnz
  6336  0383  2AC8               	goto	l4289
  6337  0384  3A30               	xorlw	48	; case 40
  6338  0385  1903               	skipnz
  6339  0386  2A23               	goto	l4241
  6340  0387  3A60               	xorlw	96	; case 72
  6341  0388  1903               	skipnz
  6342  0389  29EC               	goto	l4225
  6343  038A  3A18               	xorlw	24	; case 80
  6344  038B  1903               	skipnz
  6345  038C  2977               	goto	l4189
  6346  038D  3A08               	xorlw	8	; case 88
  6347  038E  1903               	skipnz
  6348  038F  2B36               	goto	l4321
  6349  0390  3A30               	xorlw	48	; case 104
  6350  0391  1903               	skipnz
  6351  0392  2A91               	goto	l4273
  6352  0393  3AE0               	xorlw	224	; case 136
  6353  0394  1903               	skipnz
  6354  0395  29B5               	goto	l4209
  6355  0396  3A10               	xorlw	16	; case 152
  6356  0397  1903               	skipnz
  6357  0398  2AFF               	goto	l4305
  6358  0399  3A38               	xorlw	56	; case 160
  6359  039A  1903               	skipnz
  6360  039B  2890               	goto	l4113
  6361  039C  3A08               	xorlw	8	; case 168
  6362  039D  1903               	skipnz
  6363  039E  2A5A               	goto	l4257
  6364  039F  3A18               	xorlw	24	; case 176
  6365  03A0  1903               	skipnz
  6366  03A1  2911               	goto	l4149
  6367  03A2  2BA3               	goto	l4341
  6368  03A3                     l4341:
  6369                           
  6370                           ;main.c: 576:   setLEDColor(LED_red, LED_green, LED_blue);
  6371  03A3  01F3               	clrf	setLEDColor@green
  6372  03A4  01F4               	clrf	setLEDColor@blue
  6373  03A5  3000               	movlw	0
  6374  03A6  318B  23C2  3180   	fcall	_setLEDColor
  6375  03A9                     l4343:
  6376                           
  6377                           ;main.c: 577:   _delay((unsigned long)((1000)*(4000000/4000.0)));
  6378  03A9  3006               	movlw	6
  6379  03AA  0021               	movlb	1	; select bank1
  6380  03AB  00E8               	movwf	(??_process_remote_command^(0+128)+1)
  6381  03AC  3013               	movlw	19
  6382  03AD  00E7               	movwf	??_process_remote_command^(0+128)
  6383  03AE  30AD               	movlw	173
  6384  03AF                     u3117:
  6385  03AF  0B89               	decfsz	9,f
  6386  03B0  2BAF               	goto	u3117
  6387  03B1  0BE7               	decfsz	??_process_remote_command^(0+128),f
  6388  03B2  2BAF               	goto	u3117
  6389  03B3  0BE8               	decfsz	(??_process_remote_command^(0+128)+1),f
  6390  03B4  2BAF               	goto	u3117
  6391  03B5  3200               	nop2
  6392  03B6                     l4345:
  6393                           
  6394                           ;main.c: 578:   setLEDColor(0, 0, 0);
  6395  03B6  01F3               	clrf	setLEDColor@green
  6396  03B7  01F4               	clrf	setLEDColor@blue
  6397  03B8  3000               	movlw	0
  6398  03B9  318B  23C2  3180   	fcall	_setLEDColor
  6399  03BC                     l742:
  6400  03BC  0008               	return
  6401  03BD                     __end_of_process_remote_command:
  6402                           
  6403                           	psect	text4
  6404  07A4                     __ptext4:	
  6405 ;; *************** function _writePersistentState *****************
  6406 ;; Defined at:
  6407 ;;		line 127 in file "main.c"
  6408 ;; Parameters:    Size  Location     Type
  6409 ;;		None
  6410 ;; Auto vars:     Size  Location     Type
  6411 ;;  i               1   78[BANK0 ] unsigned char 
  6412 ;;  buf            64   14[BANK0 ] unsigned short [32]
  6413 ;;  idx             1   79[BANK0 ] unsigned char 
  6414 ;; Return value:  Size  Location     Type
  6415 ;;                  1    wreg      void 
  6416 ;; Registers used:
  6417 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6418 ;; Tracked objects:
  6419 ;;		On entry : 0/0
  6420 ;;		On exit  : 0/0
  6421 ;;		Unchanged: 0/0
  6422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6423 ;;      Params:         0       0       0       0       0       0       0       0
  6424 ;;      Locals:         0      66       0       0       0       0       0       0
  6425 ;;      Temps:          0       4       0       0       0       0       0       0
  6426 ;;      Totals:         0      70       0       0       0       0       0       0
  6427 ;;Total ram usage:       70 bytes
  6428 ;; Hardware stack levels used: 1
  6429 ;; Hardware stack levels required when called: 6
  6430 ;; This function calls:
  6431 ;;		_FLASH_WriteBlock
  6432 ;; This function is called by:
  6433 ;;		_process_remote_command
  6434 ;; This function uses a non-reentrant model
  6435 ;;
  6436                           
  6437                           
  6438                           ;psect for function _writePersistentState
  6439  07A4                     _writePersistentState:
  6440  07A4                     l3963:	
  6441                           ;incstack = 0
  6442                           ; Regs used in _writePersistentState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6443                           
  6444                           
  6445                           ;main.c: 130:   uint16_t buf[32];;main.c: 131:   for (uint8_t i=0; i<32; i++){
  6446  07A4  0020               	movlb	0	; select bank0
  6447  07A5  01EE               	clrf	writePersistentState@i
  6448  07A6                     l3969:
  6449                           
  6450                           ;main.c: 132:     buf[0] = 0;
  6451  07A6  01AE               	clrf	writePersistentState@buf
  6452  07A7  01AF               	clrf	writePersistentState@buf+1
  6453  07A8                     l3971:
  6454                           
  6455                           ;main.c: 133:   }
  6456  07A8  3001               	movlw	1
  6457  07A9  00AA               	movwf	??_writePersistentState
  6458  07AA  082A               	movf	??_writePersistentState,w
  6459  07AB  07EE               	addwf	writePersistentState@i,f
  6460  07AC                     l3973:
  6461  07AC  3020               	movlw	32
  6462  07AD  026E               	subwf	writePersistentState@i,w
  6463  07AE  1C03               	skipc
  6464  07AF  2FB1               	goto	u2651
  6465  07B0  2FB2               	goto	u2650
  6466  07B1                     u2651:
  6467  07B1  2FA6               	goto	l3969
  6468  07B2                     u2650:
  6469  07B2                     l3975:
  6470                           
  6471                           ;main.c: 136:   uint8_t idx = 0;
  6472  07B2  01EF               	clrf	writePersistentState@idx
  6473  07B3                     l3977:
  6474                           
  6475                           ;main.c: 137:   buf[idx++] = ((uint16_t)(0x3400 | (currentIndex & 0xff)));
  6476  07B3  30FF               	movlw	255
  6477  07B4  0021               	movlb	1	; select bank1
  6478  07B5  0565               	andwf	_currentIndex^(0+128),w
  6479  07B6  0020               	movlb	0	; select bank0
  6480  07B7  00AA               	movwf	??_writePersistentState
  6481  07B8  3000               	movlw	0
  6482  07B9  0021               	movlb	1	; select bank1
  6483  07BA  0566               	andwf	(_currentIndex+1)^(0+128),w
  6484  07BB  0020               	movlb	0	; select bank0
  6485  07BC  00AB               	movwf	??_writePersistentState+1
  6486  07BD  3000               	movlw	0
  6487  07BE  042A               	iorwf	??_writePersistentState,w
  6488  07BF  00AE               	movwf	writePersistentState@buf
  6489  07C0  3034               	movlw	52
  6490  07C1  042B               	iorwf	??_writePersistentState+1,w
  6491  07C2  00AF               	movwf	writePersistentState@buf+1
  6492  07C3                     l3979:
  6493  07C3  3001               	movlw	1
  6494  07C4  00AA               	movwf	??_writePersistentState
  6495  07C5  082A               	movf	??_writePersistentState,w
  6496  07C6  07EF               	addwf	writePersistentState@idx,f
  6497  07C7                     l3981:
  6498                           
  6499                           ;main.c: 138:   buf[idx++] = ((uint16_t)(0x3400 | (frequencyIndex & 0xff)));
  6500  07C7  30FF               	movlw	255
  6501  07C8  0021               	movlb	1	; select bank1
  6502  07C9  0563               	andwf	_frequencyIndex^(0+128),w
  6503  07CA  0020               	movlb	0	; select bank0
  6504  07CB  00AA               	movwf	??_writePersistentState
  6505  07CC  3000               	movlw	0
  6506  07CD  0021               	movlb	1	; select bank1
  6507  07CE  0564               	andwf	(_frequencyIndex+1)^(0+128),w
  6508  07CF  0020               	movlb	0	; select bank0
  6509  07D0  00AB               	movwf	??_writePersistentState+1
  6510  07D1  3000               	movlw	0
  6511  07D2  042A               	iorwf	??_writePersistentState,w
  6512  07D3  00AC               	movwf	??_writePersistentState+2
  6513  07D4  3034               	movlw	52
  6514  07D5  042B               	iorwf	??_writePersistentState+1,w
  6515  07D6  00AD               	movwf	??_writePersistentState+3
  6516  07D7  356F               	lslf	writePersistentState@idx,w
  6517  07D8  3E2E               	addlw	(low (writePersistentState@buf| 0))& (0+255)
  6518  07D9  0086               	movwf	6
  6519  07DA  0187               	clrf	7
  6520  07DB  082C               	movf	??_writePersistentState+2,w
  6521  07DC  3FC0               	movwi [0]fsr1
  6522  07DD  082D               	movf	??_writePersistentState+3,w
  6523  07DE  3FC1               	movwi [1]fsr1
  6524  07DF                     l3983:
  6525  07DF  3001               	movlw	1
  6526  07E0  00AA               	movwf	??_writePersistentState
  6527  07E1  082A               	movf	??_writePersistentState,w
  6528  07E2  07EF               	addwf	writePersistentState@idx,f
  6529  07E3                     l3985:
  6530                           
  6531                           ;main.c: 139:   buf[idx++] = ((uint16_t)(0x3400 | (dc_frequency_flag & 0xff)));
  6532  07E3  3000               	movlw	0
  6533  07E4  047A               	iorwf	_dc_frequency_flag,w
  6534  07E5  00AA               	movwf	??_writePersistentState
  6535  07E6  3034               	movlw	52
  6536  07E7  00AB               	movwf	??_writePersistentState+1
  6537  07E8  356F               	lslf	writePersistentState@idx,w
  6538  07E9  3E2E               	addlw	(low (writePersistentState@buf| 0))& (0+255)
  6539  07EA  0086               	movwf	6
  6540  07EB  0187               	clrf	7
  6541  07EC  082A               	movf	??_writePersistentState,w
  6542  07ED  3FC0               	movwi [0]fsr1
  6543  07EE  082B               	movf	??_writePersistentState+1,w
  6544  07EF  3FC1               	movwi [1]fsr1
  6545  07F0                     l3987:
  6546  07F0  3001               	movlw	1
  6547  07F1  00AA               	movwf	??_writePersistentState
  6548  07F2  082A               	movf	??_writePersistentState,w
  6549  07F3  07EF               	addwf	writePersistentState@idx,f
  6550  07F4                     l3989:
  6551                           
  6552                           ;main.c: 141:   FLASH_WriteBlock((uint16_t)&HEF_persistent_state, buf);
  6553  07F4  30E0               	movlw	224
  6554  07F5  00A0               	movwf	FLASH_WriteBlock@writeAddr
  6555  07F6  300F               	movlw	15
  6556  07F7  00A1               	movwf	FLASH_WriteBlock@writeAddr+1
  6557  07F8  302E               	movlw	(low (writePersistentState@buf| 0))& (0+255)
  6558  07F9  00AA               	movwf	??_writePersistentState
  6559  07FA  082A               	movf	??_writePersistentState,w
  6560  07FB  00A2               	movwf	FLASH_WriteBlock@flashWordArray
  6561  07FC  3186  2606  3187   	fcall	_FLASH_WriteBlock
  6562  07FF                     l626:
  6563  07FF  0008               	return
  6564  0800                     __end_of_writePersistentState:
  6565                           
  6566                           	psect	text5
  6567  0606                     __ptext5:	
  6568 ;; *************** function _FLASH_WriteBlock *****************
  6569 ;; Defined at:
  6570 ;;		line 94 in file "mcc_generated_files/memory.c"
  6571 ;; Parameters:    Size  Location     Type
  6572 ;;  writeAddr       2    0[BANK0 ] unsigned short 
  6573 ;;  flashWordArr    1    2[BANK0 ] PTR unsigned short 
  6574 ;;		 -> writePersistentState@buf(64), 
  6575 ;; Auto vars:     Size  Location     Type
  6576 ;;  blockStartAd    2    6[BANK0 ] unsigned short 
  6577 ;;  i               1    9[BANK0 ] unsigned char 
  6578 ;;  GIEBitValue     1    8[BANK0 ] unsigned char 
  6579 ;; Return value:  Size  Location     Type
  6580 ;;                  1    wreg      char 
  6581 ;; Registers used:
  6582 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6583 ;; Tracked objects:
  6584 ;;		On entry : 0/0
  6585 ;;		On exit  : 0/0
  6586 ;;		Unchanged: 0/0
  6587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6588 ;;      Params:         0       3       0       0       0       0       0       0
  6589 ;;      Locals:         0       4       0       0       0       0       0       0
  6590 ;;      Temps:          0       3       0       0       0       0       0       0
  6591 ;;      Totals:         0      10       0       0       0       0       0       0
  6592 ;;Total ram usage:       10 bytes
  6593 ;; Hardware stack levels used: 1
  6594 ;; Hardware stack levels required when called: 5
  6595 ;; This function calls:
  6596 ;;		_FLASH_EraseBlock
  6597 ;; This function is called by:
  6598 ;;		_writePersistentState
  6599 ;;		_FLASH_WriteWord
  6600 ;; This function uses a non-reentrant model
  6601 ;;
  6602                           
  6603                           
  6604                           ;psect for function _FLASH_WriteBlock
  6605  0606                     _FLASH_WriteBlock:
  6606  0606                     l3797:	
  6607                           ;incstack = 0
  6608                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6609                           
  6610                           
  6611                           ;mcc_generated_files/memory.c: 94: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t 
      +                          *flashWordArray);mcc_generated_files/memory.c: 95: {;mcc_generated_files/memory.c: 96:  
      +                             uint16_t blockStartAddr = (uint16_t )(writeAddr & ((0x1000 -1) ^ (32 -1)));
  6612  0606  30E0               	movlw	224
  6613  0607  0020               	movlb	0	; select bank0
  6614  0608  0520               	andwf	FLASH_WriteBlock@writeAddr,w
  6615  0609  00A6               	movwf	FLASH_WriteBlock@blockStartAddr
  6616  060A  300F               	movlw	15
  6617  060B  0521               	andwf	FLASH_WriteBlock@writeAddr+1,w
  6618  060C  00A7               	movwf	FLASH_WriteBlock@blockStartAddr+1
  6619  060D                     l3799:
  6620                           
  6621                           ;mcc_generated_files/memory.c: 97:     uint8_t GIEBitValue = INTCONbits.GIE;
  6622  060D  3000               	movlw	0
  6623  060E  1B8B               	btfsc	11,7	;volatile
  6624  060F  3001               	movlw	1
  6625  0610  00A8               	movwf	FLASH_WriteBlock@GIEBitValue
  6626  0611                     l3801:
  6627                           
  6628                           ;mcc_generated_files/memory.c: 98:     uint8_t i;;mcc_generated_files/memory.c: 101:    
      +                           if( writeAddr != blockStartAddr )
  6629  0611  0827               	movf	FLASH_WriteBlock@blockStartAddr+1,w
  6630  0612  0621               	xorwf	FLASH_WriteBlock@writeAddr+1,w
  6631  0613  1D03               	skipz
  6632  0614  2E17               	goto	u2375
  6633  0615  0826               	movf	FLASH_WriteBlock@blockStartAddr,w
  6634  0616  0620               	xorwf	FLASH_WriteBlock@writeAddr,w
  6635  0617                     u2375:
  6636  0617  1903               	skipnz
  6637  0618  2E1A               	goto	u2371
  6638  0619  2E1B               	goto	u2370
  6639  061A                     u2371:
  6640  061A  2E1C               	goto	l465
  6641  061B                     u2370:
  6642  061B  2E71               	goto	l466
  6643  061C                     l465:	
  6644                           ;mcc_generated_files/memory.c: 104:     }
  6645                           
  6646                           
  6647                           ;mcc_generated_files/memory.c: 106:     INTCONbits.GIE = 0;
  6648  061C  138B               	bcf	11,7	;volatile
  6649  061D                     l3805:
  6650                           
  6651                           ;mcc_generated_files/memory.c: 109:     FLASH_EraseBlock(writeAddr);
  6652  061D  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
  6653  061E  00F4               	movwf	FLASH_EraseBlock@startAddr+1
  6654  061F  0820               	movf	FLASH_WriteBlock@writeAddr,w
  6655  0620  00F3               	movwf	FLASH_EraseBlock@startAddr
  6656  0621  318C  240A  3186   	fcall	_FLASH_EraseBlock
  6657  0624                     l3807:
  6658                           
  6659                           ;mcc_generated_files/memory.c: 112:     PMCON1bits.CFGS = 0;
  6660  0624  0023               	movlb	3	; select bank3
  6661  0625  1315               	bcf	21,6	;volatile
  6662  0626                     l3809:
  6663                           
  6664                           ;mcc_generated_files/memory.c: 113:     PMCON1bits.WREN = 1;
  6665  0626  1515               	bsf	21,2	;volatile
  6666  0627                     l3811:
  6667                           
  6668                           ;mcc_generated_files/memory.c: 114:     PMCON1bits.LWLO = 1;
  6669  0627  1695               	bsf	21,5	;volatile
  6670  0628                     l3813:
  6671                           
  6672                           ;mcc_generated_files/memory.c: 116:     for (i=0; i<32; i++)
  6673  0628  0020               	movlb	0	; select bank0
  6674  0629  01A9               	clrf	FLASH_WriteBlock@i
  6675  062A                     l3819:
  6676                           
  6677                           ;mcc_generated_files/memory.c: 117:     {;mcc_generated_files/memory.c: 119:         PMA
      +                          DRL = (writeAddr & 0xFF);
  6678  062A  0820               	movf	FLASH_WriteBlock@writeAddr,w
  6679  062B  0023               	movlb	3	; select bank3
  6680  062C  0091               	movwf	17	;volatile
  6681  062D                     l3821:
  6682                           
  6683                           ;mcc_generated_files/memory.c: 121:         PMADRH = ((writeAddr & 0xFF00) >> 8);
  6684  062D  0020               	movlb	0	; select bank0
  6685  062E  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
  6686  062F  0023               	movlb	3	; select bank3
  6687  0630  0092               	movwf	18	;volatile
  6688  0631                     l3823:
  6689                           
  6690                           ;mcc_generated_files/memory.c: 124:         PMDATL = flashWordArray[i];
  6691  0631  0020               	movlb	0	; select bank0
  6692  0632  3529               	lslf	FLASH_WriteBlock@i,w
  6693  0633  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
  6694  0634  00A3               	movwf	??_FLASH_WriteBlock
  6695  0635  0823               	movf	??_FLASH_WriteBlock,w
  6696  0636  0086               	movwf	6
  6697  0637  0187               	clrf	7
  6698  0638  0801               	movf	1,w
  6699  0639  0023               	movlb	3	; select bank3
  6700  063A  0093               	movwf	19	;volatile
  6701  063B                     l3825:
  6702                           
  6703                           ;mcc_generated_files/memory.c: 125:         PMDATH = ((flashWordArray[i] & 0xFF00) >> 8)
      +                          ;
  6704  063B  0020               	movlb	0	; select bank0
  6705  063C  3529               	lslf	FLASH_WriteBlock@i,w
  6706  063D  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
  6707  063E  00A3               	movwf	??_FLASH_WriteBlock
  6708  063F  0823               	movf	??_FLASH_WriteBlock,w
  6709  0640  0086               	movwf	6
  6710  0641  0187               	clrf	7
  6711  0642  3F40               	moviw [0]fsr1
  6712  0643  00A4               	movwf	??_FLASH_WriteBlock+1
  6713  0644  3F41               	moviw [1]fsr1
  6714  0645  00A5               	movwf	??_FLASH_WriteBlock+2
  6715  0646  0825               	movf	??_FLASH_WriteBlock+2,w
  6716  0647  0023               	movlb	3	; select bank3
  6717  0648  0094               	movwf	20	;volatile
  6718  0649                     l3827:
  6719                           
  6720                           ;mcc_generated_files/memory.c: 127:         if(i == (32 -1))
  6721  0649  301F               	movlw	31
  6722  064A  0020               	movlb	0	; select bank0
  6723  064B  0629               	xorwf	FLASH_WriteBlock@i,w
  6724  064C  1D03               	btfss	3,2
  6725  064D  2E4F               	goto	u2381
  6726  064E  2E50               	goto	u2380
  6727  064F                     u2381:
  6728  064F  2E52               	goto	l3831
  6729  0650                     u2380:
  6730  0650                     l3829:
  6731                           
  6732                           ;mcc_generated_files/memory.c: 128:         {;mcc_generated_files/memory.c: 130:        
      +                               PMCON1bits.LWLO = 0;
  6733  0650  0023               	movlb	3	; select bank3
  6734  0651  1295               	bcf	21,5	;volatile
  6735  0652                     l3831:
  6736                           
  6737                           ;mcc_generated_files/memory.c: 133:         PMCON2 = 0x55;
  6738  0652  3055               	movlw	85
  6739  0653  0023               	movlb	3	; select bank3
  6740  0654  0096               	movwf	22	;volsfr
  6741                           
  6742                           ;mcc_generated_files/memory.c: 134:         PMCON2 = 0xAA;
  6743  0655  30AA               	movlw	170
  6744  0656  0096               	movwf	22	;volsfr
  6745  0657                     l3833:
  6746                           
  6747                           ;mcc_generated_files/memory.c: 135:         PMCON1bits.WR = 1;
  6748  0657  1495               	bsf	21,1	;volatile
  6749  0658                     l3835:
  6750                           
  6751                           ;mcc_generated_files/memory.c: 136:         __nop();
  6752  0658  0000               	nop
  6753  0659                     l3837:
  6754                           
  6755                           ;mcc_generated_files/memory.c: 137:         __nop();
  6756  0659  0000               	nop
  6757                           
  6758                           ;mcc_generated_files/memory.c: 139:  writeAddr++;
  6759  065A  3001               	movlw	1
  6760  065B  0020               	movlb	0	; select bank0
  6761  065C  07A0               	addwf	FLASH_WriteBlock@writeAddr,f
  6762  065D  3000               	movlw	0
  6763  065E  3DA1               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  6764  065F                     l3839:
  6765                           
  6766                           ;mcc_generated_files/memory.c: 140:     }
  6767  065F  3001               	movlw	1
  6768  0660  00A3               	movwf	??_FLASH_WriteBlock
  6769  0661  0823               	movf	??_FLASH_WriteBlock,w
  6770  0662  07A9               	addwf	FLASH_WriteBlock@i,f
  6771  0663                     l3841:
  6772  0663  3020               	movlw	32
  6773  0664  0229               	subwf	FLASH_WriteBlock@i,w
  6774  0665  1C03               	skipc
  6775  0666  2E68               	goto	u2391
  6776  0667  2E69               	goto	u2390
  6777  0668                     u2391:
  6778  0668  2E2A               	goto	l3819
  6779  0669                     u2390:
  6780  0669                     l468:
  6781                           
  6782                           ;mcc_generated_files/memory.c: 142:     PMCON1bits.WREN = 0;
  6783  0669  0023               	movlb	3	; select bank3
  6784  066A  1115               	bcf	21,2	;volatile
  6785  066B                     l3843:
  6786                           
  6787                           ;mcc_generated_files/memory.c: 143:     INTCONbits.GIE = GIEBitValue;
  6788  066B  0020               	movlb	0	; select bank0
  6789  066C  0C28               	rrf	FLASH_WriteBlock@GIEBitValue,w
  6790  066D  1C03               	skipc
  6791  066E  138B               	bcf	11,7	;volatile
  6792  066F  1803               	skipnc
  6793  0670  178B               	bsf	11,7	;volatile
  6794  0671                     l466:
  6795  0671  0008               	return
  6796  0672                     __end_of_FLASH_WriteBlock:
  6797                           
  6798                           	psect	text6
  6799  0C0A                     __ptext6:	
  6800 ;; *************** function _FLASH_EraseBlock *****************
  6801 ;; Defined at:
  6802 ;;		line 148 in file "mcc_generated_files/memory.c"
  6803 ;; Parameters:    Size  Location     Type
  6804 ;;  startAddr       2    3[COMMON] unsigned short 
  6805 ;; Auto vars:     Size  Location     Type
  6806 ;;  GIEBitValue     1    5[COMMON] unsigned char 
  6807 ;; Return value:  Size  Location     Type
  6808 ;;                  1    wreg      void 
  6809 ;; Registers used:
  6810 ;;		wreg, status,2, status,0
  6811 ;; Tracked objects:
  6812 ;;		On entry : 0/0
  6813 ;;		On exit  : 0/0
  6814 ;;		Unchanged: 0/0
  6815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6816 ;;      Params:         2       0       0       0       0       0       0       0
  6817 ;;      Locals:         1       0       0       0       0       0       0       0
  6818 ;;      Temps:          0       0       0       0       0       0       0       0
  6819 ;;      Totals:         3       0       0       0       0       0       0       0
  6820 ;;Total ram usage:        3 bytes
  6821 ;; Hardware stack levels used: 1
  6822 ;; Hardware stack levels required when called: 4
  6823 ;; This function calls:
  6824 ;;		Nothing
  6825 ;; This function is called by:
  6826 ;;		_FLASH_WriteBlock
  6827 ;; This function uses a non-reentrant model
  6828 ;;
  6829                           
  6830                           
  6831                           ;psect for function _FLASH_EraseBlock
  6832  0C0A                     _FLASH_EraseBlock:
  6833  0C0A                     l3759:	
  6834                           ;incstack = 0
  6835                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  6836                           
  6837                           
  6838                           ;mcc_generated_files/memory.c: 148: void FLASH_EraseBlock(uint16_t startAddr);mcc_genera
      +                          ted_files/memory.c: 149: {;mcc_generated_files/memory.c: 150:     uint8_t GIEBitValue = 
      +                          INTCONbits.GIE;
  6839  0C0A  3000               	movlw	0
  6840  0C0B  1B8B               	btfsc	11,7	;volatile
  6841  0C0C  3001               	movlw	1
  6842  0C0D  00F5               	movwf	FLASH_EraseBlock@GIEBitValue
  6843  0C0E                     l3761:
  6844                           
  6845                           ;mcc_generated_files/memory.c: 153:     INTCONbits.GIE = 0;
  6846  0C0E  138B               	bcf	11,7	;volatile
  6847  0C0F                     l3763:
  6848                           
  6849                           ;mcc_generated_files/memory.c: 155:     PMADRL = (startAddr & 0xFF);
  6850  0C0F  0873               	movf	FLASH_EraseBlock@startAddr,w
  6851  0C10  0023               	movlb	3	; select bank3
  6852  0C11  0091               	movwf	17	;volatile
  6853  0C12                     l3765:
  6854                           
  6855                           ;mcc_generated_files/memory.c: 157:     PMADRH = ((startAddr & 0xFF00) >> 8);
  6856  0C12  0874               	movf	FLASH_EraseBlock@startAddr+1,w
  6857  0C13  0092               	movwf	18	;volatile
  6858  0C14                     l3767:
  6859                           
  6860                           ;mcc_generated_files/memory.c: 160:     PMCON1bits.CFGS = 0;
  6861  0C14  1315               	bcf	21,6	;volatile
  6862  0C15                     l3769:
  6863                           
  6864                           ;mcc_generated_files/memory.c: 161:     PMCON1bits.FREE = 1;
  6865  0C15  1615               	bsf	21,4	;volatile
  6866  0C16                     l3771:
  6867                           
  6868                           ;mcc_generated_files/memory.c: 162:     PMCON1bits.WREN = 1;
  6869  0C16  1515               	bsf	21,2	;volatile
  6870                           
  6871                           ;mcc_generated_files/memory.c: 165:     PMCON2 = 0x55;
  6872  0C17  3055               	movlw	85
  6873  0C18  0096               	movwf	22	;volsfr
  6874                           
  6875                           ;mcc_generated_files/memory.c: 166:     PMCON2 = 0xAA;
  6876  0C19  30AA               	movlw	170
  6877  0C1A  0096               	movwf	22	;volsfr
  6878  0C1B                     l3773:
  6879                           
  6880                           ;mcc_generated_files/memory.c: 167:     PMCON1bits.WR = 1;
  6881  0C1B  1495               	bsf	21,1	;volatile
  6882  0C1C                     l3775:
  6883                           
  6884                           ;mcc_generated_files/memory.c: 168:     __nop();
  6885  0C1C  0000               	nop
  6886  0C1D                     l3777:
  6887                           
  6888                           ;mcc_generated_files/memory.c: 169:     __nop();
  6889  0C1D  0000               	nop
  6890  0C1E                     l3779:
  6891                           
  6892                           ;mcc_generated_files/memory.c: 171:     PMCON1bits.WREN = 0;
  6893  0C1E  0023               	movlb	3	; select bank3
  6894  0C1F  1115               	bcf	21,2	;volatile
  6895  0C20                     l3781:
  6896                           
  6897                           ;mcc_generated_files/memory.c: 172:     INTCONbits.GIE = GIEBitValue;
  6898  0C20  0C75               	rrf	FLASH_EraseBlock@GIEBitValue,w
  6899  0C21  1C03               	skipc
  6900  0C22  138B               	bcf	11,7	;volatile
  6901  0C23  1803               	skipnc
  6902  0C24  178B               	bsf	11,7	;volatile
  6903  0C25                     l472:
  6904  0C25  0008               	return
  6905  0C26                     __end_of_FLASH_EraseBlock:
  6906                           
  6907                           	psect	text7
  6908  06DE                     __ptext7:	
  6909 ;; *************** function _setFrequency *****************
  6910 ;; Defined at:
  6911 ;;		line 342 in file "main.c"
  6912 ;; Parameters:    Size  Location     Type
  6913 ;;  frequency_hz    2   23[BANK0 ] short 
  6914 ;; Auto vars:     Size  Location     Type
  6915 ;;  PR4_val         2   26[BANK0 ] short 
  6916 ;; Return value:  Size  Location     Type
  6917 ;;                  1    wreg      void 
  6918 ;; Registers used:
  6919 ;;		wreg, status,2, status,0, pclath, cstack
  6920 ;; Tracked objects:
  6921 ;;		On entry : 0/0
  6922 ;;		On exit  : 0/0
  6923 ;;		Unchanged: 0/0
  6924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6925 ;;      Params:         0       2       0       0       0       0       0       0
  6926 ;;      Locals:         0       2       0       0       0       0       0       0
  6927 ;;      Temps:          0       1       0       0       0       0       0       0
  6928 ;;      Totals:         0       5       0       0       0       0       0       0
  6929 ;;Total ram usage:        5 bytes
  6930 ;; Hardware stack levels used: 1
  6931 ;; Hardware stack levels required when called: 5
  6932 ;; This function calls:
  6933 ;;		_TMR4_LoadPeriodRegister
  6934 ;;		___aldiv
  6935 ;;		___lmul
  6936 ;; This function is called by:
  6937 ;;		_process_remote_command
  6938 ;;		_main
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           
  6943                           ;psect for function _setFrequency
  6944  06DE                     _setFrequency:
  6945  06DE                     l4071:	
  6946                           ;incstack = 0
  6947                           ; Regs used in _setFrequency: [wreg+status,2+status,0+pclath+cstack]
  6948                           
  6949                           
  6950                           ;main.c: 342: void setFrequency(int16_t frequency_hz);main.c: 343: {;main.c: 358:   int1
      +                          6_t PR4_val = 1000000L / (96L * frequency_hz);
  6951  06DE  0020               	movlb	0	; select bank0
  6952  06DF  0837               	movf	setFrequency@frequency_hz,w
  6953  06E0  00A0               	movwf	___lmul@multiplier
  6954  06E1  0838               	movf	setFrequency@frequency_hz+1,w
  6955  06E2  00A1               	movwf	___lmul@multiplier+1
  6956  06E3  0D89               	rlf	9,f
  6957  06E4  3B89               	subwfb	9,f
  6958  06E5  0989               	comf	9,f
  6959  06E6  00A2               	movwf	___lmul@multiplier+2
  6960  06E7  00A3               	movwf	___lmul@multiplier+3
  6961  06E8  3000               	movlw	0
  6962  06E9  00A7               	movwf	___lmul@multiplicand+3
  6963  06EA  3000               	movlw	0
  6964  06EB  00A6               	movwf	___lmul@multiplicand+2
  6965  06EC  3000               	movlw	0
  6966  06ED  00A5               	movwf	___lmul@multiplicand+1
  6967  06EE  3060               	movlw	96
  6968  06EF  00A4               	movwf	___lmul@multiplicand
  6969  06F0  318E  2655  3186   	fcall	___lmul
  6970  06F3  0020               	movlb	0	; select bank0
  6971  06F4  0823               	movf	?___lmul+3,w
  6972  06F5  00AB               	movwf	___aldiv@divisor+3
  6973  06F6  0822               	movf	?___lmul+2,w
  6974  06F7  00AA               	movwf	___aldiv@divisor+2
  6975  06F8  0821               	movf	?___lmul+1,w
  6976  06F9  00A9               	movwf	___aldiv@divisor+1
  6977  06FA  0820               	movf	?___lmul,w
  6978  06FB  00A8               	movwf	___aldiv@divisor
  6979  06FC  3000               	movlw	0
  6980  06FD  00AF               	movwf	___aldiv@dividend+3
  6981  06FE  300F               	movlw	15
  6982  06FF  00AE               	movwf	___aldiv@dividend+2
  6983  0700  3042               	movlw	66
  6984  0701  00AD               	movwf	___aldiv@dividend+1
  6985  0702  3040               	movlw	64
  6986  0703  00AC               	movwf	___aldiv@dividend
  6987  0704  3184  24F8  3186   	fcall	___aldiv
  6988  0707  0020               	movlb	0	; select bank0
  6989  0708  0829               	movf	?___aldiv+1,w
  6990  0709  00BB               	movwf	setFrequency@PR4_val+1
  6991  070A  0828               	movf	?___aldiv,w
  6992  070B  00BA               	movwf	setFrequency@PR4_val
  6993  070C                     l4073:
  6994                           
  6995                           ;main.c: 359:   if (PR4_val > 255){
  6996  070C  083B               	movf	setFrequency@PR4_val+1,w
  6997  070D  3A80               	xorlw	128
  6998  070E  00B9               	movwf	??_setFrequency
  6999  070F  3081               	movlw	129
  7000  0710  0239               	subwf	??_setFrequency,w
  7001  0711  1D03               	skipz
  7002  0712  2F15               	goto	u2715
  7003  0713  3000               	movlw	0
  7004  0714  023A               	subwf	setFrequency@PR4_val,w
  7005  0715                     u2715:
  7006  0715  1C03               	skipc
  7007  0716  2F18               	goto	u2711
  7008  0717  2F19               	goto	u2710
  7009  0718                     u2711:
  7010  0718  2F1E               	goto	l685
  7011  0719                     u2710:
  7012  0719                     l4075:
  7013                           
  7014                           ;main.c: 360:     PR4_val = 255;
  7015  0719  30FF               	movlw	255
  7016  071A  0020               	movlb	0	; select bank0
  7017  071B  00BA               	movwf	setFrequency@PR4_val
  7018  071C  3000               	movlw	0
  7019  071D  00BB               	movwf	setFrequency@PR4_val+1
  7020  071E                     l685:	
  7021                           ;main.c: 361:   }
  7022                           
  7023                           
  7024                           ;main.c: 362:   if (PR4_val < 68){
  7025  071E  0020               	movlb	0	; select bank0
  7026  071F  083B               	movf	setFrequency@PR4_val+1,w
  7027  0720  3A80               	xorlw	128
  7028  0721  00B9               	movwf	??_setFrequency
  7029  0722  3080               	movlw	128
  7030  0723  0239               	subwf	??_setFrequency,w
  7031  0724  1D03               	skipz
  7032  0725  2F28               	goto	u2725
  7033  0726  3044               	movlw	68
  7034  0727  023A               	subwf	setFrequency@PR4_val,w
  7035  0728                     u2725:
  7036  0728  1803               	skipnc
  7037  0729  2F2B               	goto	u2721
  7038  072A  2F2C               	goto	u2720
  7039  072B                     u2721:
  7040  072B  2F31               	goto	l4079
  7041  072C                     u2720:
  7042  072C                     l4077:
  7043                           
  7044                           ;main.c: 363:     PR4_val = 68;
  7045  072C  3044               	movlw	68
  7046  072D  0020               	movlb	0	; select bank0
  7047  072E  00BA               	movwf	setFrequency@PR4_val
  7048  072F  3000               	movlw	0
  7049  0730  00BB               	movwf	setFrequency@PR4_val+1
  7050  0731                     l4079:
  7051                           
  7052                           ;main.c: 370:   (INTCONbits.GIE = 0);
  7053  0731  138B               	bcf	11,7	;volatile
  7054  0732                     l4081:
  7055                           
  7056                           ;main.c: 371:   TMR4_LoadPeriodRegister((uint16_t)PR4_val);
  7057  0732  0020               	movlb	0	; select bank0
  7058  0733  083A               	movf	setFrequency@PR4_val,w
  7059  0734  318A  22C6  3186   	fcall	_TMR4_LoadPeriodRegister
  7060  0737                     l4083:
  7061                           
  7062                           ;main.c: 372:   if (0 == frequency_hz){
  7063  0737  0020               	movlb	0	; select bank0
  7064  0738  0837               	movf	setFrequency@frequency_hz,w
  7065  0739  0438               	iorwf	setFrequency@frequency_hz+1,w
  7066  073A  1D03               	btfss	3,2
  7067  073B  2F3D               	goto	u2731
  7068  073C  2F3E               	goto	u2730
  7069  073D                     u2731:
  7070  073D  2F41               	goto	l4087
  7071  073E                     u2730:
  7072  073E                     l4085:
  7073                           
  7074                           ;main.c: 373:     dc_frequency_flag = 1;
  7075  073E  01FA               	clrf	_dc_frequency_flag
  7076  073F  0AFA               	incf	_dc_frequency_flag,f
  7077                           
  7078                           ;main.c: 374:   } else {
  7079  0740  2F42               	goto	l4089
  7080  0741                     l4087:
  7081                           
  7082                           ;main.c: 375:     dc_frequency_flag = 0;
  7083  0741  01FA               	clrf	_dc_frequency_flag
  7084  0742                     l4089:
  7085                           
  7086                           ;main.c: 377:   (INTCONbits.GIE = 1);
  7087  0742  178B               	bsf	11,7	;volatile
  7088  0743                     l689:
  7089  0743  0008               	return
  7090  0744                     __end_of_setFrequency:
  7091                           
  7092                           	psect	text8
  7093  0AC6                     __ptext8:	
  7094 ;; *************** function _TMR4_LoadPeriodRegister *****************
  7095 ;; Defined at:
  7096 ;;		line 115 in file "mcc_generated_files/tmr4.c"
  7097 ;; Parameters:    Size  Location     Type
  7098 ;;  periodVal       1    wreg     unsigned char 
  7099 ;; Auto vars:     Size  Location     Type
  7100 ;;  periodVal       1    3[COMMON] unsigned char 
  7101 ;; Return value:  Size  Location     Type
  7102 ;;                  1    wreg      void 
  7103 ;; Registers used:
  7104 ;;		wreg
  7105 ;; Tracked objects:
  7106 ;;		On entry : 0/0
  7107 ;;		On exit  : 0/0
  7108 ;;		Unchanged: 0/0
  7109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7110 ;;      Params:         0       0       0       0       0       0       0       0
  7111 ;;      Locals:         1       0       0       0       0       0       0       0
  7112 ;;      Temps:          0       0       0       0       0       0       0       0
  7113 ;;      Totals:         1       0       0       0       0       0       0       0
  7114 ;;Total ram usage:        1 bytes
  7115 ;; Hardware stack levels used: 1
  7116 ;; Hardware stack levels required when called: 4
  7117 ;; This function calls:
  7118 ;;		Nothing
  7119 ;; This function is called by:
  7120 ;;		_setFrequency
  7121 ;; This function uses a non-reentrant model
  7122 ;;
  7123                           
  7124                           
  7125                           ;psect for function _TMR4_LoadPeriodRegister
  7126  0AC6                     _TMR4_LoadPeriodRegister:
  7127                           
  7128                           ;incstack = 0
  7129                           ; Regs used in _TMR4_LoadPeriodRegister: [wreg]
  7130                           ;TMR4_LoadPeriodRegister@periodVal stored from wreg
  7131  0AC6  00F3               	movwf	TMR4_LoadPeriodRegister@periodVal
  7132  0AC7                     l3795:
  7133                           
  7134                           ;mcc_generated_files/tmr4.c: 115: void TMR4_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr4.c: 116: {;mcc_generated_files/tmr4.c: 117:    PR4 = periodVal;
  7135  0AC7  0873               	movf	TMR4_LoadPeriodRegister@periodVal,w
  7136  0AC8  0028               	movlb	8	; select bank8
  7137  0AC9  0096               	movwf	22	;volatile
  7138  0ACA                     l411:
  7139  0ACA  0008               	return
  7140  0ACB                     __end_of_TMR4_LoadPeriodRegister:
  7141                           
  7142                           	psect	text9
  7143  03BD                     __ptext9:	
  7144 ;; *************** function _setCurrent *****************
  7145 ;; Defined at:
  7146 ;;		line 331 in file "main.c"
  7147 ;; Parameters:    Size  Location     Type
  7148 ;;  microamps       2   25[BANK0 ] int 
  7149 ;;  Vdd_mv          2   27[BANK0 ] int 
  7150 ;; Auto vars:     Size  Location     Type
  7151 ;;  DACValue        2   39[BANK0 ] int 
  7152 ;;  Vdac_mv         2   37[BANK0 ] int 
  7153 ;; Return value:  Size  Location     Type
  7154 ;;                  1    wreg      void 
  7155 ;; Registers used:
  7156 ;;		wreg, status,2, status,0, pclath, cstack
  7157 ;; Tracked objects:
  7158 ;;		On entry : 0/0
  7159 ;;		On exit  : 0/0
  7160 ;;		Unchanged: 0/0
  7161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7162 ;;      Params:         0       4       0       0       0       0       0       0
  7163 ;;      Locals:         0       4       0       0       0       0       0       0
  7164 ;;      Temps:          0       8       0       0       0       0       0       0
  7165 ;;      Totals:         0      16       0       0       0       0       0       0
  7166 ;;Total ram usage:       16 bytes
  7167 ;; Hardware stack levels used: 1
  7168 ;; Hardware stack levels required when called: 5
  7169 ;; This function calls:
  7170 ;;		___aldiv
  7171 ;;		___awdiv
  7172 ;;		___lmul
  7173 ;; This function is called by:
  7174 ;;		_process_remote_command
  7175 ;;		_main
  7176 ;; This function uses a non-reentrant model
  7177 ;;
  7178                           
  7179                           
  7180                           ;psect for function _setCurrent
  7181  03BD                     _setCurrent:
  7182  03BD                     l4059:	
  7183                           ;incstack = 0
  7184                           ; Regs used in _setCurrent: [wreg+status,2+status,0+pclath+cstack]
  7185                           
  7186                           
  7187                           ;main.c: 331: void setCurrent(int microamps, int Vdd_mv);main.c: 332: {;main.c: 333:   i
      +                          nt Vdac_mv = Vdd_mv - ((int32_t)(4700) * microamps + 500) / 1000;
  7188  03BD  3000               	movlw	0
  7189  03BE  0020               	movlb	0	; select bank0
  7190  03BF  00AB               	movwf	___aldiv@divisor+3
  7191  03C0  3000               	movlw	0
  7192  03C1  00AA               	movwf	___aldiv@divisor+2
  7193  03C2  3003               	movlw	3
  7194  03C3  00A9               	movwf	___aldiv@divisor+1
  7195  03C4  30E8               	movlw	232
  7196  03C5  00A8               	movwf	___aldiv@divisor
  7197  03C6  30F4               	movlw	244
  7198  03C7  00BD               	movwf	??_setCurrent
  7199  03C8  3001               	movlw	1
  7200  03C9  00BE               	movwf	??_setCurrent+1
  7201  03CA  3000               	movlw	0
  7202  03CB  00BF               	movwf	??_setCurrent+2
  7203  03CC  3000               	movlw	0
  7204  03CD  00C0               	movwf	??_setCurrent+3
  7205  03CE  0839               	movf	setCurrent@microamps,w
  7206  03CF  00A0               	movwf	___lmul@multiplier
  7207  03D0  083A               	movf	setCurrent@microamps+1,w
  7208  03D1  00A1               	movwf	___lmul@multiplier+1
  7209  03D2  0D89               	rlf	9,f
  7210  03D3  3B89               	subwfb	9,f
  7211  03D4  0989               	comf	9,f
  7212  03D5  00A2               	movwf	___lmul@multiplier+2
  7213  03D6  00A3               	movwf	___lmul@multiplier+3
  7214  03D7  3000               	movlw	0
  7215  03D8  00A7               	movwf	___lmul@multiplicand+3
  7216  03D9  3000               	movlw	0
  7217  03DA  00A6               	movwf	___lmul@multiplicand+2
  7218  03DB  3012               	movlw	18
  7219  03DC  00A5               	movwf	___lmul@multiplicand+1
  7220  03DD  305C               	movlw	92
  7221  03DE  00A4               	movwf	___lmul@multiplicand
  7222  03DF  318E  2655  3183   	fcall	___lmul
  7223  03E2  0020               	movlb	0	; select bank0
  7224  03E3  0820               	movf	?___lmul,w
  7225  03E4  07BD               	addwf	??_setCurrent,f
  7226  03E5  0821               	movf	?___lmul+1,w
  7227  03E6  3DBE               	addwfc	??_setCurrent+1,f
  7228  03E7  0822               	movf	?___lmul+2,w
  7229  03E8  3DBF               	addwfc	??_setCurrent+2,f
  7230  03E9  0823               	movf	?___lmul+3,w
  7231  03EA  3DC0               	addwfc	??_setCurrent+3,f
  7232  03EB  0840               	movf	??_setCurrent+3,w
  7233  03EC  00AF               	movwf	___aldiv@dividend+3
  7234  03ED  083F               	movf	??_setCurrent+2,w
  7235  03EE  00AE               	movwf	___aldiv@dividend+2
  7236  03EF  083E               	movf	??_setCurrent+1,w
  7237  03F0  00AD               	movwf	___aldiv@dividend+1
  7238  03F1  083D               	movf	??_setCurrent,w
  7239  03F2  00AC               	movwf	___aldiv@dividend
  7240  03F3  3184  24F8  3183   	fcall	___aldiv
  7241  03F6  0020               	movlb	0	; select bank0
  7242  03F7  0828               	movf	?___aldiv,w
  7243  03F8  023B               	subwf	setCurrent@Vdd_mv,w
  7244  03F9  00C5               	movwf	setCurrent@Vdac_mv
  7245  03FA  0829               	movf	?___aldiv+1,w
  7246  03FB  3B3C               	subwfb	setCurrent@Vdd_mv+1,w
  7247  03FC  00C6               	movwf	setCurrent@Vdac_mv+1
  7248                           
  7249                           ;main.c: 334:   int DACValue = (256L * Vdac_mv + Vdd_mv/2) / Vdd_mv;
  7250  03FD  083B               	movf	setCurrent@Vdd_mv,w
  7251  03FE  00A8               	movwf	___aldiv@divisor
  7252  03FF  083C               	movf	setCurrent@Vdd_mv+1,w
  7253  0400  00A9               	movwf	___aldiv@divisor+1
  7254  0401  0D89               	rlf	9,f
  7255  0402  3B89               	subwfb	9,f
  7256  0403  0989               	comf	9,f
  7257  0404  00AA               	movwf	___aldiv@divisor+2
  7258  0405  00AB               	movwf	___aldiv@divisor+3
  7259  0406  3002               	movlw	2
  7260  0407  00F3               	movwf	___awdiv@divisor
  7261  0408  3000               	movlw	0
  7262  0409  00F4               	movwf	___awdiv@divisor+1
  7263  040A  083C               	movf	setCurrent@Vdd_mv+1,w
  7264  040B  00F6               	movwf	___awdiv@dividend+1
  7265  040C  083B               	movf	setCurrent@Vdd_mv,w
  7266  040D  00F5               	movwf	___awdiv@dividend
  7267  040E  3187  2744  3183   	fcall	___awdiv
  7268  0411  0873               	movf	?___awdiv,w
  7269  0412  0020               	movlb	0	; select bank0
  7270  0413  00BD               	movwf	??_setCurrent
  7271  0414  0874               	movf	?___awdiv+1,w
  7272  0415  00BE               	movwf	??_setCurrent+1
  7273  0416  3000               	movlw	0
  7274  0417  1BBE               	btfsc	??_setCurrent+1,7
  7275  0418  30FF               	movlw	255
  7276  0419  00BF               	movwf	??_setCurrent+2
  7277  041A  00C0               	movwf	??_setCurrent+3
  7278  041B  0845               	movf	setCurrent@Vdac_mv,w
  7279  041C  00C1               	movwf	??_setCurrent+4
  7280  041D  0846               	movf	setCurrent@Vdac_mv+1,w
  7281  041E  00C2               	movwf	??_setCurrent+5
  7282  041F  3000               	movlw	0
  7283  0420  1BC2               	btfsc	??_setCurrent+5,7
  7284  0421  30FF               	movlw	255
  7285  0422  00C3               	movwf	??_setCurrent+6
  7286  0423  00C4               	movwf	??_setCurrent+7
  7287  0424  3008               	movlw	8
  7288  0425                     u2685:
  7289  0425  35C1               	lslf	??_setCurrent+4,f
  7290  0426  0DC2               	rlf	??_setCurrent+5,f
  7291  0427  0DC3               	rlf	??_setCurrent+6,f
  7292  0428  0DC4               	rlf	??_setCurrent+7,f
  7293  0429                     u2680:
  7294  0429  0B89               	decfsz	9,f
  7295  042A  2C25               	goto	u2685
  7296  042B  0841               	movf	??_setCurrent+4,w
  7297  042C  07BD               	addwf	??_setCurrent,f
  7298  042D  0842               	movf	??_setCurrent+5,w
  7299  042E  3DBE               	addwfc	??_setCurrent+1,f
  7300  042F  0843               	movf	??_setCurrent+6,w
  7301  0430  3DBF               	addwfc	??_setCurrent+2,f
  7302  0431  0844               	movf	??_setCurrent+7,w
  7303  0432  3DC0               	addwfc	??_setCurrent+3,f
  7304  0433  0840               	movf	??_setCurrent+3,w
  7305  0434  00AF               	movwf	___aldiv@dividend+3
  7306  0435  083F               	movf	??_setCurrent+2,w
  7307  0436  00AE               	movwf	___aldiv@dividend+2
  7308  0437  083E               	movf	??_setCurrent+1,w
  7309  0438  00AD               	movwf	___aldiv@dividend+1
  7310  0439  083D               	movf	??_setCurrent,w
  7311  043A  00AC               	movwf	___aldiv@dividend
  7312  043B  3184  24F8  3183   	fcall	___aldiv
  7313  043E  0020               	movlb	0	; select bank0
  7314  043F  0829               	movf	?___aldiv+1,w
  7315  0440  00C8               	movwf	setCurrent@DACValue+1
  7316  0441  0828               	movf	?___aldiv,w
  7317  0442  00C7               	movwf	setCurrent@DACValue
  7318  0443                     l4061:
  7319                           
  7320                           ;main.c: 335:   if(DACValue > 255){DACValue = 255;}
  7321  0443  0848               	movf	setCurrent@DACValue+1,w
  7322  0444  3A80               	xorlw	128
  7323  0445  00BD               	movwf	??_setCurrent
  7324  0446  3081               	movlw	129
  7325  0447  023D               	subwf	??_setCurrent,w
  7326  0448  1D03               	skipz
  7327  0449  2C4C               	goto	u2695
  7328  044A  3000               	movlw	0
  7329  044B  0247               	subwf	setCurrent@DACValue,w
  7330  044C                     u2695:
  7331  044C  1C03               	skipc
  7332  044D  2C4F               	goto	u2691
  7333  044E  2C50               	goto	u2690
  7334  044F                     u2691:
  7335  044F  2C55               	goto	l4065
  7336  0450                     u2690:
  7337  0450                     l4063:
  7338  0450  30FF               	movlw	255
  7339  0451  0020               	movlb	0	; select bank0
  7340  0452  00C7               	movwf	setCurrent@DACValue
  7341  0453  3000               	movlw	0
  7342  0454  00C8               	movwf	setCurrent@DACValue+1
  7343  0455                     l4065:
  7344                           
  7345                           ;main.c: 336:   if(DACValue < 0){DACValue = 0;}
  7346  0455  0020               	movlb	0	; select bank0
  7347  0456  1FC8               	btfss	setCurrent@DACValue+1,7
  7348  0457  2C59               	goto	u2701
  7349  0458  2C5A               	goto	u2700
  7350  0459                     u2701:
  7351  0459  2C5C               	goto	l4069
  7352  045A                     u2700:
  7353  045A                     l4067:
  7354  045A  01C7               	clrf	setCurrent@DACValue
  7355  045B  01C8               	clrf	setCurrent@DACValue+1
  7356  045C                     l4069:
  7357                           
  7358                           ;main.c: 337:   dac_value = (uint8_t)DACValue;
  7359  045C  0847               	movf	setCurrent@DACValue,w
  7360  045D  00BD               	movwf	??_setCurrent
  7361  045E  083D               	movf	??_setCurrent,w
  7362  045F  0021               	movlb	1	; select bank1
  7363  0460  00B2               	movwf	_dac_value^(0+128)
  7364  0461                     l682:
  7365  0461  0008               	return
  7366  0462                     __end_of_setCurrent:
  7367                           
  7368                           	psect	text10
  7369  0E55                     __ptext10:	
  7370 ;; *************** function ___lmul *****************
  7371 ;; Defined at:
  7372 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul32.c"
  7373 ;; Parameters:    Size  Location     Type
  7374 ;;  multiplier      4    0[BANK0 ] unsigned long 
  7375 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  7376 ;; Auto vars:     Size  Location     Type
  7377 ;;  product         4    3[COMMON] unsigned long 
  7378 ;; Return value:  Size  Location     Type
  7379 ;;                  4    0[BANK0 ] unsigned long 
  7380 ;; Registers used:
  7381 ;;		wreg, status,2, status,0
  7382 ;; Tracked objects:
  7383 ;;		On entry : 0/0
  7384 ;;		On exit  : 0/0
  7385 ;;		Unchanged: 0/0
  7386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7387 ;;      Params:         0       8       0       0       0       0       0       0
  7388 ;;      Locals:         4       0       0       0       0       0       0       0
  7389 ;;      Temps:          0       0       0       0       0       0       0       0
  7390 ;;      Totals:         4       8       0       0       0       0       0       0
  7391 ;;Total ram usage:       12 bytes
  7392 ;; Hardware stack levels used: 1
  7393 ;; Hardware stack levels required when called: 4
  7394 ;; This function calls:
  7395 ;;		Nothing
  7396 ;; This function is called by:
  7397 ;;		_setCurrent
  7398 ;;		_setFrequency
  7399 ;; This function uses a non-reentrant model
  7400 ;;
  7401                           
  7402                           
  7403                           ;psect for function ___lmul
  7404  0E55                     ___lmul:
  7405  0E55                     l3865:	
  7406                           ;incstack = 0
  7407                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7408                           
  7409  0E55  3000               	movlw	0
  7410  0E56  00F6               	movwf	___lmul@product+3
  7411  0E57  3000               	movlw	0
  7412  0E58  00F5               	movwf	___lmul@product+2
  7413  0E59  3000               	movlw	0
  7414  0E5A  00F4               	movwf	___lmul@product+1
  7415  0E5B  3000               	movlw	0
  7416  0E5C  00F3               	movwf	___lmul@product
  7417  0E5D                     l3867:
  7418  0E5D  0020               	movlb	0	; select bank0
  7419  0E5E  1C20               	btfss	___lmul@multiplier,0
  7420  0E5F  2E61               	goto	u2411
  7421  0E60  2E62               	goto	u2410
  7422  0E61                     u2411:
  7423  0E61  2E6A               	goto	l3871
  7424  0E62                     u2410:
  7425  0E62                     l3869:
  7426  0E62  0824               	movf	___lmul@multiplicand,w
  7427  0E63  07F3               	addwf	___lmul@product,f
  7428  0E64  0825               	movf	___lmul@multiplicand+1,w
  7429  0E65  3DF4               	addwfc	___lmul@product+1,f
  7430  0E66  0826               	movf	___lmul@multiplicand+2,w
  7431  0E67  3DF5               	addwfc	___lmul@product+2,f
  7432  0E68  0827               	movf	___lmul@multiplicand+3,w
  7433  0E69  3DF6               	addwfc	___lmul@product+3,f
  7434  0E6A                     l3871:
  7435  0E6A  3001               	movlw	1
  7436  0E6B                     u2425:
  7437  0E6B  35A4               	lslf	___lmul@multiplicand,f
  7438  0E6C  0DA5               	rlf	___lmul@multiplicand+1,f
  7439  0E6D  0DA6               	rlf	___lmul@multiplicand+2,f
  7440  0E6E  0DA7               	rlf	___lmul@multiplicand+3,f
  7441  0E6F  0B89               	decfsz	9,f
  7442  0E70  2E6B               	goto	u2425
  7443  0E71                     l3873:
  7444  0E71  3001               	movlw	1
  7445  0E72                     u2435:
  7446  0E72  36A3               	lsrf	___lmul@multiplier+3,f
  7447  0E73  0CA2               	rrf	___lmul@multiplier+2,f
  7448  0E74  0CA1               	rrf	___lmul@multiplier+1,f
  7449  0E75  0CA0               	rrf	___lmul@multiplier,f
  7450  0E76  0B89               	decfsz	9,f
  7451  0E77  2E72               	goto	u2435
  7452  0E78  0823               	movf	___lmul@multiplier+3,w
  7453  0E79  0422               	iorwf	___lmul@multiplier+2,w
  7454  0E7A  0421               	iorwf	___lmul@multiplier+1,w
  7455  0E7B  0420               	iorwf	___lmul@multiplier,w
  7456  0E7C  1D03               	skipz
  7457  0E7D  2E7F               	goto	u2441
  7458  0E7E  2E80               	goto	u2440
  7459  0E7F                     u2441:
  7460  0E7F  2E5D               	goto	l3867
  7461  0E80                     u2440:
  7462  0E80                     l3875:
  7463  0E80  0876               	movf	___lmul@product+3,w
  7464  0E81  00A3               	movwf	?___lmul+3
  7465  0E82  0875               	movf	___lmul@product+2,w
  7466  0E83  00A2               	movwf	?___lmul+2
  7467  0E84  0874               	movf	___lmul@product+1,w
  7468  0E85  00A1               	movwf	?___lmul+1
  7469  0E86  0873               	movf	___lmul@product,w
  7470  0E87  00A0               	movwf	?___lmul
  7471  0E88                     l843:
  7472  0E88  0008               	return
  7473  0E89                     __end_of___lmul:
  7474                           
  7475                           	psect	text11
  7476  0744                     __ptext11:	
  7477 ;; *************** function ___awdiv *****************
  7478 ;; Defined at:
  7479 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
  7480 ;; Parameters:    Size  Location     Type
  7481 ;;  divisor         2    3[COMMON] int 
  7482 ;;  dividend        2    5[COMMON] int 
  7483 ;; Auto vars:     Size  Location     Type
  7484 ;;  quotient        2    2[BANK0 ] int 
  7485 ;;  sign            1    1[BANK0 ] unsigned char 
  7486 ;;  counter         1    0[BANK0 ] unsigned char 
  7487 ;; Return value:  Size  Location     Type
  7488 ;;                  2    3[COMMON] int 
  7489 ;; Registers used:
  7490 ;;		wreg, status,2, status,0
  7491 ;; Tracked objects:
  7492 ;;		On entry : 0/0
  7493 ;;		On exit  : 0/0
  7494 ;;		Unchanged: 0/0
  7495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7496 ;;      Params:         4       0       0       0       0       0       0       0
  7497 ;;      Locals:         0       4       0       0       0       0       0       0
  7498 ;;      Temps:          1       0       0       0       0       0       0       0
  7499 ;;      Totals:         5       4       0       0       0       0       0       0
  7500 ;;Total ram usage:        9 bytes
  7501 ;; Hardware stack levels used: 1
  7502 ;; Hardware stack levels required when called: 4
  7503 ;; This function calls:
  7504 ;;		Nothing
  7505 ;; This function is called by:
  7506 ;;		_setCurrent
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           
  7511                           ;psect for function ___awdiv
  7512  0744                     ___awdiv:
  7513  0744                     l3919:	
  7514                           ;incstack = 0
  7515                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7516                           
  7517  0744  0020               	movlb	0	; select bank0
  7518  0745  01A1               	clrf	___awdiv@sign
  7519  0746                     l3921:
  7520  0746  1FF4               	btfss	___awdiv@divisor+1,7
  7521  0747  2F49               	goto	u2551
  7522  0748  2F4A               	goto	u2550
  7523  0749                     u2551:
  7524  0749  2F51               	goto	l3927
  7525  074A                     u2550:
  7526  074A                     l3923:
  7527  074A  09F3               	comf	___awdiv@divisor,f
  7528  074B  09F4               	comf	___awdiv@divisor+1,f
  7529  074C  0AF3               	incf	___awdiv@divisor,f
  7530  074D  1903               	skipnz
  7531  074E  0AF4               	incf	___awdiv@divisor+1,f
  7532  074F                     l3925:
  7533  074F  01A1               	clrf	___awdiv@sign
  7534  0750  0AA1               	incf	___awdiv@sign,f
  7535  0751                     l3927:
  7536  0751  1FF6               	btfss	___awdiv@dividend+1,7
  7537  0752  2F54               	goto	u2561
  7538  0753  2F55               	goto	u2560
  7539  0754                     u2561:
  7540  0754  2F5E               	goto	l3933
  7541  0755                     u2560:
  7542  0755                     l3929:
  7543  0755  09F5               	comf	___awdiv@dividend,f
  7544  0756  09F6               	comf	___awdiv@dividend+1,f
  7545  0757  0AF5               	incf	___awdiv@dividend,f
  7546  0758  1903               	skipnz
  7547  0759  0AF6               	incf	___awdiv@dividend+1,f
  7548  075A                     l3931:
  7549  075A  3001               	movlw	1
  7550  075B  00F7               	movwf	??___awdiv
  7551  075C  0877               	movf	??___awdiv,w
  7552  075D  06A1               	xorwf	___awdiv@sign,f
  7553  075E                     l3933:
  7554  075E  01A2               	clrf	___awdiv@quotient
  7555  075F  01A3               	clrf	___awdiv@quotient+1
  7556  0760                     l3935:
  7557  0760  0873               	movf	___awdiv@divisor,w
  7558  0761  0474               	iorwf	___awdiv@divisor+1,w
  7559  0762  1903               	btfsc	3,2
  7560  0763  2F65               	goto	u2571
  7561  0764  2F66               	goto	u2570
  7562  0765                     u2571:
  7563  0765  2F95               	goto	l3955
  7564  0766                     u2570:
  7565  0766                     l3937:
  7566  0766  01A0               	clrf	___awdiv@counter
  7567  0767  0AA0               	incf	___awdiv@counter,f
  7568  0768  2F72               	goto	l3943
  7569  0769                     l3939:
  7570  0769  3001               	movlw	1
  7571  076A                     u2585:
  7572  076A  35F3               	lslf	___awdiv@divisor,f
  7573  076B  0DF4               	rlf	___awdiv@divisor+1,f
  7574  076C  0B89               	decfsz	9,f
  7575  076D  2F6A               	goto	u2585
  7576  076E                     l3941:
  7577  076E  3001               	movlw	1
  7578  076F  00F7               	movwf	??___awdiv
  7579  0770  0877               	movf	??___awdiv,w
  7580  0771  07A0               	addwf	___awdiv@counter,f
  7581  0772                     l3943:
  7582  0772  1FF4               	btfss	___awdiv@divisor+1,7
  7583  0773  2F75               	goto	u2591
  7584  0774  2F76               	goto	u2590
  7585  0775                     u2591:
  7586  0775  2F69               	goto	l3939
  7587  0776                     u2590:
  7588  0776                     l3945:
  7589  0776  3001               	movlw	1
  7590  0777                     u2605:
  7591  0777  35A2               	lslf	___awdiv@quotient,f
  7592  0778  0DA3               	rlf	___awdiv@quotient+1,f
  7593  0779  0B89               	decfsz	9,f
  7594  077A  2F77               	goto	u2605
  7595  077B  0874               	movf	___awdiv@divisor+1,w
  7596  077C  0276               	subwf	___awdiv@dividend+1,w
  7597  077D  1D03               	skipz
  7598  077E  2F81               	goto	u2615
  7599  077F  0873               	movf	___awdiv@divisor,w
  7600  0780  0275               	subwf	___awdiv@dividend,w
  7601  0781                     u2615:
  7602  0781  1C03               	skipc
  7603  0782  2F84               	goto	u2611
  7604  0783  2F85               	goto	u2610
  7605  0784                     u2611:
  7606  0784  2F8A               	goto	l3951
  7607  0785                     u2610:
  7608  0785                     l3947:
  7609  0785  0873               	movf	___awdiv@divisor,w
  7610  0786  02F5               	subwf	___awdiv@dividend,f
  7611  0787  0874               	movf	___awdiv@divisor+1,w
  7612  0788  3BF6               	subwfb	___awdiv@dividend+1,f
  7613  0789                     l3949:
  7614  0789  1422               	bsf	___awdiv@quotient,0
  7615  078A                     l3951:
  7616  078A  3001               	movlw	1
  7617  078B                     u2625:
  7618  078B  36F4               	lsrf	___awdiv@divisor+1,f
  7619  078C  0CF3               	rrf	___awdiv@divisor,f
  7620  078D  0B89               	decfsz	9,f
  7621  078E  2F8B               	goto	u2625
  7622  078F                     l3953:
  7623  078F  3001               	movlw	1
  7624  0790  02A0               	subwf	___awdiv@counter,f
  7625  0791  1D03               	btfss	3,2
  7626  0792  2F94               	goto	u2631
  7627  0793  2F95               	goto	u2630
  7628  0794                     u2631:
  7629  0794  2F76               	goto	l3945
  7630  0795                     u2630:
  7631  0795                     l3955:
  7632  0795  0821               	movf	___awdiv@sign,w
  7633  0796  1903               	btfsc	3,2
  7634  0797  2F99               	goto	u2641
  7635  0798  2F9A               	goto	u2640
  7636  0799                     u2641:
  7637  0799  2F9F               	goto	l3959
  7638  079A                     u2640:
  7639  079A                     l3957:
  7640  079A  09A2               	comf	___awdiv@quotient,f
  7641  079B  09A3               	comf	___awdiv@quotient+1,f
  7642  079C  0AA2               	incf	___awdiv@quotient,f
  7643  079D  1903               	skipnz
  7644  079E  0AA3               	incf	___awdiv@quotient+1,f
  7645  079F                     l3959:
  7646  079F  0823               	movf	___awdiv@quotient+1,w
  7647  07A0  00F4               	movwf	?___awdiv+1
  7648  07A1  0822               	movf	___awdiv@quotient,w
  7649  07A2  00F3               	movwf	?___awdiv
  7650  07A3                     l982:
  7651  07A3  0008               	return
  7652  07A4                     __end_of___awdiv:
  7653                           
  7654                           	psect	text12
  7655  0F85                     __ptext12:	
  7656 ;; *************** function _selectSomething *****************
  7657 ;; Defined at:
  7658 ;;		line 263 in file "main.c"
  7659 ;; Parameters:    Size  Location     Type
  7660 ;;		None
  7661 ;; Auto vars:     Size  Location     Type
  7662 ;;		None
  7663 ;; Return value:  Size  Location     Type
  7664 ;;                  1    wreg      void 
  7665 ;; Registers used:
  7666 ;;		wreg, status,2, status,0, pclath, cstack
  7667 ;; Tracked objects:
  7668 ;;		On entry : 0/0
  7669 ;;		On exit  : 0/0
  7670 ;;		Unchanged: 0/0
  7671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7672 ;;      Params:         0       0       0       0       0       0       0       0
  7673 ;;      Locals:         0       0       0       0       0       0       0       0
  7674 ;;      Temps:          0       2       0       0       0       0       0       0
  7675 ;;      Totals:         0       2       0       0       0       0       0       0
  7676 ;;Total ram usage:        2 bytes
  7677 ;; Hardware stack levels used: 1
  7678 ;; Hardware stack levels required when called: 5
  7679 ;; This function calls:
  7680 ;;		_setLEDColor
  7681 ;; This function is called by:
  7682 ;;		_process_remote_command
  7683 ;; This function uses a non-reentrant model
  7684 ;;
  7685                           
  7686                           
  7687                           ;psect for function _selectSomething
  7688  0F85                     _selectSomething:
  7689  0F85                     l3997:	
  7690                           ;incstack = 0
  7691                           ; Regs used in _selectSomething: [wreg+status,2+status,0+pclath+cstack]
  7692                           
  7693                           
  7694                           ;main.c: 265:   setLEDColor(0, 180, 230);
  7695  0F85  30B4               	movlw	180
  7696  0F86  0020               	movlb	0	; select bank0
  7697  0F87  00A0               	movwf	??_selectSomething
  7698  0F88  0820               	movf	??_selectSomething,w
  7699  0F89  00F3               	movwf	setLEDColor@green
  7700  0F8A  30E6               	movlw	230
  7701  0F8B  00A1               	movwf	??_selectSomething+1
  7702  0F8C  0821               	movf	??_selectSomething+1,w
  7703  0F8D  00F4               	movwf	setLEDColor@blue
  7704  0F8E  3000               	movlw	0
  7705  0F8F  318B  23C2  318F   	fcall	_setLEDColor
  7706  0F92                     l3999:
  7707                           
  7708                           ;main.c: 266:   _delay((unsigned long)((500)*(4000000/4000.0)));
  7709  0F92  3003               	movlw	3
  7710  0F93  0020               	movlb	0	; select bank0
  7711  0F94  00A1               	movwf	??_selectSomething+1
  7712  0F95  308A               	movlw	138
  7713  0F96  00A0               	movwf	??_selectSomething
  7714  0F97  3055               	movlw	85
  7715  0F98                     u3127:
  7716  0F98  0B89               	decfsz	9,f
  7717  0F99  2F98               	goto	u3127
  7718  0F9A  0BA0               	decfsz	??_selectSomething,f
  7719  0F9B  2F98               	goto	u3127
  7720  0F9C  0BA1               	decfsz	??_selectSomething+1,f
  7721  0F9D  2F98               	goto	u3127
  7722  0F9E  3200               	nop2
  7723  0F9F                     l4001:
  7724                           
  7725                           ;main.c: 267:   setLEDColor(0, 0, 0);
  7726  0F9F  01F3               	clrf	setLEDColor@green
  7727  0FA0  01F4               	clrf	setLEDColor@blue
  7728  0FA1  3000               	movlw	0
  7729  0FA2  318B  23C2  318F   	fcall	_setLEDColor
  7730                           
  7731                           ;main.c: 268:   _delay((unsigned long)((500)*(4000000/4000.0)));
  7732  0FA5  3003               	movlw	3
  7733  0FA6  0020               	movlb	0	; select bank0
  7734  0FA7  00A1               	movwf	??_selectSomething+1
  7735  0FA8  308A               	movlw	138
  7736  0FA9  00A0               	movwf	??_selectSomething
  7737  0FAA  3055               	movlw	85
  7738  0FAB                     u3137:
  7739  0FAB  0B89               	decfsz	9,f
  7740  0FAC  2FAB               	goto	u3137
  7741  0FAD  0BA0               	decfsz	??_selectSomething,f
  7742  0FAE  2FAB               	goto	u3137
  7743  0FAF  0BA1               	decfsz	??_selectSomething+1,f
  7744  0FB0  2FAB               	goto	u3137
  7745  0FB1  3200               	nop2
  7746  0FB2                     l4003:
  7747                           
  7748                           ;main.c: 269:   setLEDColor(0, 180, 230);
  7749  0FB2  30B4               	movlw	180
  7750  0FB3  0020               	movlb	0	; select bank0
  7751  0FB4  00A0               	movwf	??_selectSomething
  7752  0FB5  0820               	movf	??_selectSomething,w
  7753  0FB6  00F3               	movwf	setLEDColor@green
  7754  0FB7  30E6               	movlw	230
  7755  0FB8  00A1               	movwf	??_selectSomething+1
  7756  0FB9  0821               	movf	??_selectSomething+1,w
  7757  0FBA  00F4               	movwf	setLEDColor@blue
  7758  0FBB  3000               	movlw	0
  7759  0FBC  318B  23C2  318F   	fcall	_setLEDColor
  7760  0FBF                     l4005:
  7761                           
  7762                           ;main.c: 270:   _delay((unsigned long)((500)*(4000000/4000.0)));
  7763  0FBF  3003               	movlw	3
  7764  0FC0  0020               	movlb	0	; select bank0
  7765  0FC1  00A1               	movwf	??_selectSomething+1
  7766  0FC2  308A               	movlw	138
  7767  0FC3  00A0               	movwf	??_selectSomething
  7768  0FC4  3055               	movlw	85
  7769  0FC5                     u3147:
  7770  0FC5  0B89               	decfsz	9,f
  7771  0FC6  2FC5               	goto	u3147
  7772  0FC7  0BA0               	decfsz	??_selectSomething,f
  7773  0FC8  2FC5               	goto	u3147
  7774  0FC9  0BA1               	decfsz	??_selectSomething+1,f
  7775  0FCA  2FC5               	goto	u3147
  7776  0FCB  3200               	nop2
  7777                           
  7778                           ;main.c: 271:   setLEDColor(0, 0, 0);
  7779  0FCC  01F3               	clrf	setLEDColor@green
  7780  0FCD  01F4               	clrf	setLEDColor@blue
  7781  0FCE  3000               	movlw	0
  7782  0FCF  318B  23C2  318F   	fcall	_setLEDColor
  7783  0FD2                     l4007:
  7784                           
  7785                           ;main.c: 272:   _delay((unsigned long)((500)*(4000000/4000.0)));
  7786  0FD2  3003               	movlw	3
  7787  0FD3  0020               	movlb	0	; select bank0
  7788  0FD4  00A1               	movwf	??_selectSomething+1
  7789  0FD5  308A               	movlw	138
  7790  0FD6  00A0               	movwf	??_selectSomething
  7791  0FD7  3055               	movlw	85
  7792  0FD8                     u3157:
  7793  0FD8  0B89               	decfsz	9,f
  7794  0FD9  2FD8               	goto	u3157
  7795  0FDA  0BA0               	decfsz	??_selectSomething,f
  7796  0FDB  2FD8               	goto	u3157
  7797  0FDC  0BA1               	decfsz	??_selectSomething+1,f
  7798  0FDD  2FD8               	goto	u3157
  7799  0FDE  3200               	nop2
  7800  0FDF                     l654:
  7801  0FDF  0008               	return
  7802  0FE0                     __end_of_selectSomething:
  7803                           
  7804                           	psect	text13
  7805  0CCC                     __ptext13:	
  7806 ;; *************** function _selectIncrease *****************
  7807 ;; Defined at:
  7808 ;;		line 291 in file "main.c"
  7809 ;; Parameters:    Size  Location     Type
  7810 ;;		None
  7811 ;; Auto vars:     Size  Location     Type
  7812 ;;		None
  7813 ;; Return value:  Size  Location     Type
  7814 ;;                  1    wreg      void 
  7815 ;; Registers used:
  7816 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7817 ;; Tracked objects:
  7818 ;;		On entry : 0/0
  7819 ;;		On exit  : 0/0
  7820 ;;		Unchanged: 0/0
  7821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7822 ;;      Params:         0       0       0       0       0       0       0       0
  7823 ;;      Locals:         0       0       0       0       0       0       0       0
  7824 ;;      Temps:          0       2       0       0       0       0       0       0
  7825 ;;      Totals:         0       2       0       0       0       0       0       0
  7826 ;;Total ram usage:        2 bytes
  7827 ;; Hardware stack levels used: 1
  7828 ;; Hardware stack levels required when called: 10
  7829 ;; This function calls:
  7830 ;;		_printf
  7831 ;;		_setLEDColor
  7832 ;; This function is called by:
  7833 ;;		_process_remote_command
  7834 ;; This function uses a non-reentrant model
  7835 ;;
  7836                           
  7837                           
  7838                           ;psect for function _selectIncrease
  7839  0CCC                     _selectIncrease:
  7840  0CCC                     l4027:	
  7841                           ;incstack = 0
  7842                           ; Regs used in _selectIncrease: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7843                           
  7844                           
  7845                           ;main.c: 292:   setLEDColor(0, 50, 255);
  7846  0CCC  3032               	movlw	50
  7847  0CCD  0020               	movlb	0	; select bank0
  7848  0CCE  00B9               	movwf	??_selectIncrease
  7849  0CCF  0839               	movf	??_selectIncrease,w
  7850  0CD0  00F3               	movwf	setLEDColor@green
  7851  0CD1  30FF               	movlw	255
  7852  0CD2  00BA               	movwf	??_selectIncrease+1
  7853  0CD3  083A               	movf	??_selectIncrease+1,w
  7854  0CD4  00F4               	movwf	setLEDColor@blue
  7855  0CD5  3000               	movlw	0
  7856  0CD6  318B  23C2  318C   	fcall	_setLEDColor
  7857  0CD9                     l4029:
  7858                           
  7859                           ;main.c: 293:   _delay((unsigned long)((100)*(4000000/4000.0)));
  7860  0CD9  3082               	movlw	130
  7861  0CDA  0020               	movlb	0	; select bank0
  7862  0CDB  00B9               	movwf	??_selectIncrease
  7863  0CDC  30DD               	movlw	221
  7864  0CDD                     u3167:
  7865  0CDD  0B89               	decfsz	9,f
  7866  0CDE  2CDD               	goto	u3167
  7867  0CDF  0BB9               	decfsz	??_selectIncrease,f
  7868  0CE0  2CDD               	goto	u3167
  7869  0CE1  3200               	nop2
  7870  0CE2                     l4031:
  7871                           
  7872                           ;main.c: 294:   setLEDColor(0, 0, 0);
  7873  0CE2  01F3               	clrf	setLEDColor@green
  7874  0CE3  01F4               	clrf	setLEDColor@blue
  7875  0CE4  3000               	movlw	0
  7876  0CE5  318B  23C2  318C   	fcall	_setLEDColor
  7877  0CE8                     l4033:
  7878                           
  7879                           ;main.c: 295:   printf("\n increase selected");
  7880  0CE8  3059               	movlw	low (STR_3| (0+32768))
  7881  0CE9  0020               	movlb	0	; select bank0
  7882  0CEA  00B5               	movwf	printf@fmt
  7883  0CEB  3088               	movlw	high (STR_3| (0+32768))
  7884  0CEC  00B6               	movwf	printf@fmt+1
  7885  0CED  318B  2372  318C   	fcall	_printf
  7886  0CF0                     l663:
  7887  0CF0  0008               	return
  7888  0CF1                     __end_of_selectIncrease:
  7889                           
  7890                           	psect	text14
  7891  0CF1                     __ptext14:	
  7892 ;; *************** function _selectFrequencyValue *****************
  7893 ;; Defined at:
  7894 ;;		line 319 in file "main.c"
  7895 ;; Parameters:    Size  Location     Type
  7896 ;;		None
  7897 ;; Auto vars:     Size  Location     Type
  7898 ;;		None
  7899 ;; Return value:  Size  Location     Type
  7900 ;;                  1    wreg      void 
  7901 ;; Registers used:
  7902 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7903 ;; Tracked objects:
  7904 ;;		On entry : 0/0
  7905 ;;		On exit  : 0/0
  7906 ;;		Unchanged: 0/0
  7907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7908 ;;      Params:         0       0       0       0       0       0       0       0
  7909 ;;      Locals:         0       0       0       0       0       0       0       0
  7910 ;;      Temps:          0       2       0       0       0       0       0       0
  7911 ;;      Totals:         0       2       0       0       0       0       0       0
  7912 ;;Total ram usage:        2 bytes
  7913 ;; Hardware stack levels used: 1
  7914 ;; Hardware stack levels required when called: 10
  7915 ;; This function calls:
  7916 ;;		_printf
  7917 ;;		_setLEDColor
  7918 ;; This function is called by:
  7919 ;;		_process_remote_command
  7920 ;; This function uses a non-reentrant model
  7921 ;;
  7922                           
  7923                           
  7924                           ;psect for function _selectFrequencyValue
  7925  0CF1                     _selectFrequencyValue:
  7926  0CF1                     l4051:	
  7927                           ;incstack = 0
  7928                           ; Regs used in _selectFrequencyValue: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7929                           
  7930                           
  7931                           ;main.c: 320:     setLEDColor(100, 0, 255);
  7932  0CF1  01F3               	clrf	setLEDColor@green
  7933  0CF2  30FF               	movlw	255
  7934  0CF3  0020               	movlb	0	; select bank0
  7935  0CF4  00B9               	movwf	??_selectFrequencyValue
  7936  0CF5  0839               	movf	??_selectFrequencyValue,w
  7937  0CF6  00F4               	movwf	setLEDColor@blue
  7938  0CF7  3064               	movlw	100
  7939  0CF8  318B  23C2  318C   	fcall	_setLEDColor
  7940  0CFB                     l4053:
  7941                           
  7942                           ;main.c: 321:     _delay((unsigned long)((500)*(4000000/4000.0)));
  7943  0CFB  3003               	movlw	3
  7944  0CFC  0020               	movlb	0	; select bank0
  7945  0CFD  00BA               	movwf	??_selectFrequencyValue+1
  7946  0CFE  308A               	movlw	138
  7947  0CFF  00B9               	movwf	??_selectFrequencyValue
  7948  0D00  3055               	movlw	85
  7949  0D01                     u3177:
  7950  0D01  0B89               	decfsz	9,f
  7951  0D02  2D01               	goto	u3177
  7952  0D03  0BB9               	decfsz	??_selectFrequencyValue,f
  7953  0D04  2D01               	goto	u3177
  7954  0D05  0BBA               	decfsz	??_selectFrequencyValue+1,f
  7955  0D06  2D01               	goto	u3177
  7956  0D07  3200               	nop2
  7957  0D08                     l4055:
  7958                           
  7959                           ;main.c: 322:     setLEDColor(0,0,0);
  7960  0D08  01F3               	clrf	setLEDColor@green
  7961  0D09  01F4               	clrf	setLEDColor@blue
  7962  0D0A  3000               	movlw	0
  7963  0D0B  318B  23C2  318C   	fcall	_setLEDColor
  7964  0D0E                     l4057:
  7965                           
  7966                           ;main.c: 323:     printf("\n current value selected");
  7967  0D0E  3000               	movlw	low (STR_6| (0+32768))
  7968  0D0F  0020               	movlb	0	; select bank0
  7969  0D10  00B5               	movwf	printf@fmt
  7970  0D11  3088               	movlw	high (STR_6| (0+32768))
  7971  0D12  00B6               	movwf	printf@fmt+1
  7972  0D13  318B  2372  318C   	fcall	_printf
  7973  0D16                     l675:
  7974  0D16  0008               	return
  7975  0D17                     __end_of_selectFrequencyValue:
  7976                           
  7977                           	psect	text15
  7978  0D68                     __ptext15:	
  7979 ;; *************** function _selectFrequency *****************
  7980 ;; Defined at:
  7981 ;;		line 275 in file "main.c"
  7982 ;; Parameters:    Size  Location     Type
  7983 ;;		None
  7984 ;; Auto vars:     Size  Location     Type
  7985 ;;		None
  7986 ;; Return value:  Size  Location     Type
  7987 ;;                  1    wreg      void 
  7988 ;; Registers used:
  7989 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7990 ;; Tracked objects:
  7991 ;;		On entry : 0/0
  7992 ;;		On exit  : 0/0
  7993 ;;		Unchanged: 0/0
  7994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7995 ;;      Params:         0       0       0       0       0       0       0       0
  7996 ;;      Locals:         0       0       0       0       0       0       0       0
  7997 ;;      Temps:          0       2       0       0       0       0       0       0
  7998 ;;      Totals:         0       2       0       0       0       0       0       0
  7999 ;;Total ram usage:        2 bytes
  8000 ;; Hardware stack levels used: 1
  8001 ;; Hardware stack levels required when called: 10
  8002 ;; This function calls:
  8003 ;;		_printf
  8004 ;;		_setLEDColor
  8005 ;; This function is called by:
  8006 ;;		_process_remote_command
  8007 ;; This function uses a non-reentrant model
  8008 ;;
  8009                           
  8010                           
  8011                           ;psect for function _selectFrequency
  8012  0D68                     _selectFrequency:
  8013  0D68                     l4009:	
  8014                           ;incstack = 0
  8015                           ; Regs used in _selectFrequency: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8016                           
  8017                           
  8018                           ;main.c: 276:   interfaceState = STATE_FREQUENCY;
  8019  0D68  3002               	movlw	2
  8020  0D69  0020               	movlb	0	; select bank0
  8021  0D6A  00B9               	movwf	??_selectFrequency
  8022  0D6B  0839               	movf	??_selectFrequency,w
  8023  0D6C  00F8               	movwf	_interfaceState
  8024  0D6D                     l4011:
  8025                           
  8026                           ;main.c: 277:   setLEDColor(0, 150, 0);
  8027  0D6D  3096               	movlw	150
  8028  0D6E  00B9               	movwf	??_selectFrequency
  8029  0D6F  0839               	movf	??_selectFrequency,w
  8030  0D70  00F3               	movwf	setLEDColor@green
  8031  0D71  01F4               	clrf	setLEDColor@blue
  8032  0D72  3000               	movlw	0
  8033  0D73  318B  23C2  318D   	fcall	_setLEDColor
  8034  0D76                     l4013:
  8035                           
  8036                           ;main.c: 278:   _delay((unsigned long)((1000)*(4000000/4000.0)));
  8037  0D76  3006               	movlw	6
  8038  0D77  0020               	movlb	0	; select bank0
  8039  0D78  00BA               	movwf	??_selectFrequency+1
  8040  0D79  3013               	movlw	19
  8041  0D7A  00B9               	movwf	??_selectFrequency
  8042  0D7B  30AD               	movlw	173
  8043  0D7C                     u3187:
  8044  0D7C  0B89               	decfsz	9,f
  8045  0D7D  2D7C               	goto	u3187
  8046  0D7E  0BB9               	decfsz	??_selectFrequency,f
  8047  0D7F  2D7C               	goto	u3187
  8048  0D80  0BBA               	decfsz	??_selectFrequency+1,f
  8049  0D81  2D7C               	goto	u3187
  8050  0D82  3200               	nop2
  8051                           
  8052                           ;main.c: 279:   setLEDColor(0, 0, 0);
  8053  0D83  01F3               	clrf	setLEDColor@green
  8054  0D84  01F4               	clrf	setLEDColor@blue
  8055  0D85  3000               	movlw	0
  8056  0D86  318B  23C2  318D   	fcall	_setLEDColor
  8057  0D89                     l4015:
  8058                           
  8059                           ;main.c: 280:   printf("\n Frequency selected");
  8060  0D89  3030               	movlw	low (STR_1| (0+32768))
  8061  0D8A  0020               	movlb	0	; select bank0
  8062  0D8B  00B5               	movwf	printf@fmt
  8063  0D8C  3088               	movlw	high (STR_1| (0+32768))
  8064  0D8D  00B6               	movwf	printf@fmt+1
  8065  0D8E  318B  2372  318D   	fcall	_printf
  8066  0D91                     l657:
  8067  0D91  0008               	return
  8068  0D92                     __end_of_selectFrequency:
  8069                           
  8070                           	psect	text16
  8071  0C85                     __ptext16:	
  8072 ;; *************** function _selectDecrease *****************
  8073 ;; Defined at:
  8074 ;;		line 298 in file "main.c"
  8075 ;; Parameters:    Size  Location     Type
  8076 ;;		None
  8077 ;; Auto vars:     Size  Location     Type
  8078 ;;		None
  8079 ;; Return value:  Size  Location     Type
  8080 ;;                  1    wreg      void 
  8081 ;; Registers used:
  8082 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8083 ;; Tracked objects:
  8084 ;;		On entry : 0/0
  8085 ;;		On exit  : 0/0
  8086 ;;		Unchanged: 0/0
  8087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8088 ;;      Params:         0       0       0       0       0       0       0       0
  8089 ;;      Locals:         0       0       0       0       0       0       0       0
  8090 ;;      Temps:          0       1       0       0       0       0       0       0
  8091 ;;      Totals:         0       1       0       0       0       0       0       0
  8092 ;;Total ram usage:        1 bytes
  8093 ;; Hardware stack levels used: 1
  8094 ;; Hardware stack levels required when called: 10
  8095 ;; This function calls:
  8096 ;;		_printf
  8097 ;;		_setLEDColor
  8098 ;; This function is called by:
  8099 ;;		_process_remote_command
  8100 ;; This function uses a non-reentrant model
  8101 ;;
  8102                           
  8103                           
  8104                           ;psect for function _selectDecrease
  8105  0C85                     _selectDecrease:
  8106  0C85                     l4035:	
  8107                           ;incstack = 0
  8108                           ; Regs used in _selectDecrease: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8109                           
  8110                           
  8111                           ;main.c: 299:   setLEDColor(130, 160, 0);
  8112  0C85  30A0               	movlw	160
  8113  0C86  0020               	movlb	0	; select bank0
  8114  0C87  00B9               	movwf	??_selectDecrease
  8115  0C88  0839               	movf	??_selectDecrease,w
  8116  0C89  00F3               	movwf	setLEDColor@green
  8117  0C8A  01F4               	clrf	setLEDColor@blue
  8118  0C8B  3082               	movlw	130
  8119  0C8C  318B  23C2  318C   	fcall	_setLEDColor
  8120  0C8F                     l4037:
  8121                           
  8122                           ;main.c: 300:   _delay((unsigned long)((100)*(4000000/4000.0)));
  8123  0C8F  3082               	movlw	130
  8124  0C90  0020               	movlb	0	; select bank0
  8125  0C91  00B9               	movwf	??_selectDecrease
  8126  0C92  30DD               	movlw	221
  8127  0C93                     u3197:
  8128  0C93  0B89               	decfsz	9,f
  8129  0C94  2C93               	goto	u3197
  8130  0C95  0BB9               	decfsz	??_selectDecrease,f
  8131  0C96  2C93               	goto	u3197
  8132  0C97  3200               	nop2
  8133  0C98                     l4039:
  8134                           
  8135                           ;main.c: 301:   setLEDColor(0, 0, 0);
  8136  0C98  01F3               	clrf	setLEDColor@green
  8137  0C99  01F4               	clrf	setLEDColor@blue
  8138  0C9A  3000               	movlw	0
  8139  0C9B  318B  23C2  318C   	fcall	_setLEDColor
  8140  0C9E                     l4041:
  8141                           
  8142                           ;main.c: 302:   printf("\n decrease selected");
  8143  0C9E  3045               	movlw	low (STR_4| (0+32768))
  8144  0C9F  0020               	movlb	0	; select bank0
  8145  0CA0  00B5               	movwf	printf@fmt
  8146  0CA1  3088               	movlw	high (STR_4| (0+32768))
  8147  0CA2  00B6               	movwf	printf@fmt+1
  8148  0CA3  318B  2372  318C   	fcall	_printf
  8149  0CA6                     l666:
  8150  0CA6  0008               	return
  8151  0CA7                     __end_of_selectDecrease:
  8152                           
  8153                           	psect	text17
  8154  0D3F                     __ptext17:	
  8155 ;; *************** function _selectCurrentValue *****************
  8156 ;; Defined at:
  8157 ;;		line 312 in file "main.c"
  8158 ;; Parameters:    Size  Location     Type
  8159 ;;		None
  8160 ;; Auto vars:     Size  Location     Type
  8161 ;;		None
  8162 ;; Return value:  Size  Location     Type
  8163 ;;                  1    wreg      void 
  8164 ;; Registers used:
  8165 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8166 ;; Tracked objects:
  8167 ;;		On entry : 0/0
  8168 ;;		On exit  : 0/0
  8169 ;;		Unchanged: 0/0
  8170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8171 ;;      Params:         0       0       0       0       0       0       0       0
  8172 ;;      Locals:         0       0       0       0       0       0       0       0
  8173 ;;      Temps:          0       2       0       0       0       0       0       0
  8174 ;;      Totals:         0       2       0       0       0       0       0       0
  8175 ;;Total ram usage:        2 bytes
  8176 ;; Hardware stack levels used: 1
  8177 ;; Hardware stack levels required when called: 10
  8178 ;; This function calls:
  8179 ;;		_printf
  8180 ;;		_setLEDColor
  8181 ;; This function is called by:
  8182 ;;		_process_remote_command
  8183 ;; This function uses a non-reentrant model
  8184 ;;
  8185                           
  8186                           
  8187                           ;psect for function _selectCurrentValue
  8188  0D3F                     _selectCurrentValue:
  8189  0D3F                     l4043:	
  8190                           ;incstack = 0
  8191                           ; Regs used in _selectCurrentValue: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8192                           
  8193                           
  8194                           ;main.c: 313:     setLEDColor(150, 70, 100);
  8195  0D3F  3046               	movlw	70
  8196  0D40  0020               	movlb	0	; select bank0
  8197  0D41  00B9               	movwf	??_selectCurrentValue
  8198  0D42  0839               	movf	??_selectCurrentValue,w
  8199  0D43  00F3               	movwf	setLEDColor@green
  8200  0D44  3064               	movlw	100
  8201  0D45  00BA               	movwf	??_selectCurrentValue+1
  8202  0D46  083A               	movf	??_selectCurrentValue+1,w
  8203  0D47  00F4               	movwf	setLEDColor@blue
  8204  0D48  3096               	movlw	150
  8205  0D49  318B  23C2  318D   	fcall	_setLEDColor
  8206  0D4C                     l4045:
  8207                           
  8208                           ;main.c: 314:     _delay((unsigned long)((500)*(4000000/4000.0)));
  8209  0D4C  3003               	movlw	3
  8210  0D4D  0020               	movlb	0	; select bank0
  8211  0D4E  00BA               	movwf	??_selectCurrentValue+1
  8212  0D4F  308A               	movlw	138
  8213  0D50  00B9               	movwf	??_selectCurrentValue
  8214  0D51  3055               	movlw	85
  8215  0D52                     u3207:
  8216  0D52  0B89               	decfsz	9,f
  8217  0D53  2D52               	goto	u3207
  8218  0D54  0BB9               	decfsz	??_selectCurrentValue,f
  8219  0D55  2D52               	goto	u3207
  8220  0D56  0BBA               	decfsz	??_selectCurrentValue+1,f
  8221  0D57  2D52               	goto	u3207
  8222  0D58  3200               	nop2
  8223  0D59                     l4047:
  8224                           
  8225                           ;main.c: 315:     setLEDColor(0,0,0);
  8226  0D59  01F3               	clrf	setLEDColor@green
  8227  0D5A  01F4               	clrf	setLEDColor@blue
  8228  0D5B  3000               	movlw	0
  8229  0D5C  318B  23C2  318D   	fcall	_setLEDColor
  8230  0D5F                     l4049:
  8231                           
  8232                           ;main.c: 316:     printf("\n current value selected");
  8233  0D5F  3000               	movlw	low (STR_6| (0+32768))
  8234  0D60  0020               	movlb	0	; select bank0
  8235  0D61  00B5               	movwf	printf@fmt
  8236  0D62  3088               	movlw	high (STR_6| (0+32768))
  8237  0D63  00B6               	movwf	printf@fmt+1
  8238  0D64  318B  2372  318D   	fcall	_printf
  8239  0D67                     l672:
  8240  0D67  0008               	return
  8241  0D68                     __end_of_selectCurrentValue:
  8242                           
  8243                           	psect	text18
  8244  0D17                     __ptext18:	
  8245 ;; *************** function _selectCurrent *****************
  8246 ;; Defined at:
  8247 ;;		line 283 in file "main.c"
  8248 ;; Parameters:    Size  Location     Type
  8249 ;;		None
  8250 ;; Auto vars:     Size  Location     Type
  8251 ;;		None
  8252 ;; Return value:  Size  Location     Type
  8253 ;;                  1    wreg      void 
  8254 ;; Registers used:
  8255 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8256 ;; Tracked objects:
  8257 ;;		On entry : 0/0
  8258 ;;		On exit  : 0/0
  8259 ;;		Unchanged: 0/0
  8260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8261 ;;      Params:         0       0       0       0       0       0       0       0
  8262 ;;      Locals:         0       0       0       0       0       0       0       0
  8263 ;;      Temps:          0       2       0       0       0       0       0       0
  8264 ;;      Totals:         0       2       0       0       0       0       0       0
  8265 ;;Total ram usage:        2 bytes
  8266 ;; Hardware stack levels used: 1
  8267 ;; Hardware stack levels required when called: 10
  8268 ;; This function calls:
  8269 ;;		_printf
  8270 ;;		_setLEDColor
  8271 ;; This function is called by:
  8272 ;;		_process_remote_command
  8273 ;; This function uses a non-reentrant model
  8274 ;;
  8275                           
  8276                           
  8277                           ;psect for function _selectCurrent
  8278  0D17                     _selectCurrent:
  8279  0D17                     l4017:	
  8280                           ;incstack = 0
  8281                           ; Regs used in _selectCurrent: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8282                           
  8283                           
  8284                           ;main.c: 284:   interfaceState = STATE_CURRENT;
  8285  0D17  01F8               	clrf	_interfaceState
  8286  0D18  0AF8               	incf	_interfaceState,f
  8287  0D19                     l4019:
  8288                           
  8289                           ;main.c: 285:   setLEDColor(0, 0, 255);
  8290  0D19  01F3               	clrf	setLEDColor@green
  8291  0D1A  30FF               	movlw	255
  8292  0D1B  0020               	movlb	0	; select bank0
  8293  0D1C  00B9               	movwf	??_selectCurrent
  8294  0D1D  0839               	movf	??_selectCurrent,w
  8295  0D1E  00F4               	movwf	setLEDColor@blue
  8296  0D1F  3000               	movlw	0
  8297  0D20  318B  23C2  318D   	fcall	_setLEDColor
  8298  0D23                     l4021:
  8299                           
  8300                           ;main.c: 286:   _delay((unsigned long)((1000)*(4000000/4000.0)));
  8301  0D23  3006               	movlw	6
  8302  0D24  0020               	movlb	0	; select bank0
  8303  0D25  00BA               	movwf	??_selectCurrent+1
  8304  0D26  3013               	movlw	19
  8305  0D27  00B9               	movwf	??_selectCurrent
  8306  0D28  30AD               	movlw	173
  8307  0D29                     u3217:
  8308  0D29  0B89               	decfsz	9,f
  8309  0D2A  2D29               	goto	u3217
  8310  0D2B  0BB9               	decfsz	??_selectCurrent,f
  8311  0D2C  2D29               	goto	u3217
  8312  0D2D  0BBA               	decfsz	??_selectCurrent+1,f
  8313  0D2E  2D29               	goto	u3217
  8314  0D2F  3200               	nop2
  8315  0D30                     l4023:
  8316                           
  8317                           ;main.c: 287:   setLEDColor(0, 0, 0);
  8318  0D30  01F3               	clrf	setLEDColor@green
  8319  0D31  01F4               	clrf	setLEDColor@blue
  8320  0D32  3000               	movlw	0
  8321  0D33  318B  23C2  318D   	fcall	_setLEDColor
  8322  0D36                     l4025:
  8323                           
  8324                           ;main.c: 288:   printf("\n current selected");
  8325  0D36  306D               	movlw	low (STR_2| (0+32768))
  8326  0D37  0020               	movlb	0	; select bank0
  8327  0D38  00B5               	movwf	printf@fmt
  8328  0D39  3088               	movlw	high (STR_2| (0+32768))
  8329  0D3A  00B6               	movwf	printf@fmt+1
  8330  0D3B  318B  2372  318D   	fcall	_printf
  8331  0D3E                     l660:
  8332  0D3E  0008               	return
  8333  0D3F                     __end_of_selectCurrent:
  8334                           
  8335                           	psect	text19
  8336  0B72                     __ptext19:	
  8337 ;; *************** function _printf *****************
  8338 ;; Defined at:
  8339 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\printf.c"
  8340 ;; Parameters:    Size  Location     Type
  8341 ;;  fmt             2   21[BANK0 ] PTR const unsigned char 
  8342 ;;		 -> STR_7(25), STR_6(25), STR_5(23), STR_4(20), 
  8343 ;;		 -> STR_3(20), STR_2(19), STR_1(21), 
  8344 ;; Auto vars:     Size  Location     Type
  8345 ;;  ret             2    0        int 
  8346 ;;  ap              1   24[BANK0 ] PTR void [1]
  8347 ;;		 -> ?_printf(2), 
  8348 ;; Return value:  Size  Location     Type
  8349 ;;                  2   21[BANK0 ] int 
  8350 ;; Registers used:
  8351 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8352 ;; Tracked objects:
  8353 ;;		On entry : 0/0
  8354 ;;		On exit  : 0/0
  8355 ;;		Unchanged: 0/0
  8356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8357 ;;      Params:         0       2       0       0       0       0       0       0
  8358 ;;      Locals:         0       1       0       0       0       0       0       0
  8359 ;;      Temps:          0       1       0       0       0       0       0       0
  8360 ;;      Totals:         0       4       0       0       0       0       0       0
  8361 ;;Total ram usage:        4 bytes
  8362 ;; Hardware stack levels used: 1
  8363 ;; Hardware stack levels required when called: 9
  8364 ;; This function calls:
  8365 ;;		_vfprintf
  8366 ;; This function is called by:
  8367 ;;		_selectFrequency
  8368 ;;		_selectCurrent
  8369 ;;		_selectIncrease
  8370 ;;		_selectDecrease
  8371 ;;		_selectCurrentValue
  8372 ;;		_selectFrequencyValue
  8373 ;;		_selectResetValue
  8374 ;; This function uses a non-reentrant model
  8375 ;;
  8376                           
  8377                           
  8378                           ;psect for function _printf
  8379  0B72                     _printf:
  8380  0B72                     l3859:	
  8381                           ;incstack = 0
  8382                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8383                           
  8384  0B72  3037               	movlw	(low ((?_printf| 0+2)))& (0+255)
  8385  0B73  0020               	movlb	0	; select bank0
  8386  0B74  00B7               	movwf	??_printf
  8387  0B75  0837               	movf	??_printf,w
  8388  0B76  00B8               	movwf	printf@ap
  8389  0B77                     l3861:
  8390  0B77  0836               	movf	printf@fmt+1,w
  8391  0B78  00AE               	movwf	vfprintf@fmt+1
  8392  0B79  0835               	movf	printf@fmt,w
  8393  0B7A  00AD               	movwf	vfprintf@fmt
  8394  0B7B  3038               	movlw	(low (printf@ap| 0))& (0+255)
  8395  0B7C  00B7               	movwf	??_printf
  8396  0B7D  0837               	movf	??_printf,w
  8397  0B7E  00AF               	movwf	vfprintf@ap
  8398  0B7F  3000               	movlw	0
  8399  0B80  318D  25BE  318B   	fcall	_vfprintf
  8400  0B83                     l1292:
  8401  0B83  0008               	return
  8402  0B84                     __end_of_printf:
  8403                           
  8404                           	psect	text20
  8405  0DBE                     __ptext20:	
  8406 ;; *************** function _vfprintf *****************
  8407 ;; Defined at:
  8408 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  8409 ;; Parameters:    Size  Location     Type
  8410 ;;  fp              1    wreg     PTR struct _IO_FILE
  8411 ;;		 -> NULL(0), 
  8412 ;;  fmt             2   13[BANK0 ] PTR const unsigned char 
  8413 ;;		 -> STR_7(25), STR_6(25), STR_5(23), STR_4(20), 
  8414 ;;		 -> STR_3(20), STR_2(19), STR_1(21), 
  8415 ;;  ap              1   15[BANK0 ] PTR PTR void 
  8416 ;;		 -> printf@ap(1), 
  8417 ;; Auto vars:     Size  Location     Type
  8418 ;;  fp              1   18[BANK0 ] PTR struct _IO_FILE
  8419 ;;		 -> NULL(0), 
  8420 ;;  cfmt            2   19[BANK0 ] PTR unsigned char 
  8421 ;;		 -> STR_7(25), STR_6(25), STR_5(23), STR_4(20), 
  8422 ;;		 -> STR_3(20), STR_2(19), STR_1(21), 
  8423 ;; Return value:  Size  Location     Type
  8424 ;;                  2   13[BANK0 ] int 
  8425 ;; Registers used:
  8426 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8427 ;; Tracked objects:
  8428 ;;		On entry : 0/0
  8429 ;;		On exit  : 0/0
  8430 ;;		Unchanged: 0/0
  8431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8432 ;;      Params:         0       3       0       0       0       0       0       0
  8433 ;;      Locals:         0       3       0       0       0       0       0       0
  8434 ;;      Temps:          0       2       0       0       0       0       0       0
  8435 ;;      Totals:         0       8       0       0       0       0       0       0
  8436 ;;Total ram usage:        8 bytes
  8437 ;; Hardware stack levels used: 1
  8438 ;; Hardware stack levels required when called: 8
  8439 ;; This function calls:
  8440 ;;		_vfpfcnvrt
  8441 ;; This function is called by:
  8442 ;;		_printf
  8443 ;; This function uses a non-reentrant model
  8444 ;;
  8445                           
  8446                           
  8447                           ;psect for function _vfprintf
  8448  0DBE                     _vfprintf:
  8449                           
  8450                           ;incstack = 0
  8451                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8452                           ;vfprintf@fp stored from wreg
  8453  0DBE  0020               	movlb	0	; select bank0
  8454  0DBF  00B2               	movwf	vfprintf@fp
  8455  0DC0                     l3783:
  8456                           
  8457                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
  8458  0DC0  082E               	movf	vfprintf@fmt+1,w
  8459  0DC1  00B4               	movwf	vfprintf@cfmt+1
  8460  0DC2  082D               	movf	vfprintf@fmt,w
  8461  0DC3  00B3               	movwf	vfprintf@cfmt
  8462  0DC4                     l3785:
  8463                           
  8464                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
  8465  0DC4  0021               	movlb	1	; select bank1
  8466  0DC5  01A0               	clrf	_nout^(0+128)
  8467  0DC6  01A1               	clrf	(_nout+1)^(0+128)
  8468                           
  8469                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  8470  0DC7  2DDC               	goto	l3789
  8471  0DC8                     l3787:
  8472                           
  8473                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
  8474  0DC8  3033               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  8475  0DC9  00B0               	movwf	??_vfprintf
  8476  0DCA  0830               	movf	??_vfprintf,w
  8477  0DCB  00A5               	movwf	vfpfcnvrt@fmt
  8478  0DCC  082F               	movf	vfprintf@ap,w
  8479  0DCD  00B1               	movwf	??_vfprintf+1
  8480  0DCE  0831               	movf	??_vfprintf+1,w
  8481  0DCF  00A6               	movwf	vfpfcnvrt@ap
  8482  0DD0  0832               	movf	vfprintf@fp,w
  8483  0DD1  3185  2588  318D   	fcall	_vfpfcnvrt
  8484  0DD4  0020               	movlb	0	; select bank0
  8485  0DD5  0825               	movf	?_vfpfcnvrt,w
  8486  0DD6  0021               	movlb	1	; select bank1
  8487  0DD7  07A0               	addwf	_nout^(0+128),f
  8488  0DD8  0020               	movlb	0	; select bank0
  8489  0DD9  0826               	movf	?_vfpfcnvrt+1,w
  8490  0DDA  0021               	movlb	1	; select bank1
  8491  0DDB  3DA1               	addwfc	(_nout+1)^(0+128),f
  8492  0DDC                     l3789:
  8493                           
  8494                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  8495  0DDC  0020               	movlb	0	; select bank0
  8496  0DDD  0833               	movf	vfprintf@cfmt,w
  8497  0DDE  0084               	movwf	4
  8498  0DDF  0834               	movf	vfprintf@cfmt+1,w
  8499  0DE0  0085               	movwf	5
  8500  0DE1  0012               	moviw fsr0++
  8501  0DE2  1D03               	btfss	3,2
  8502  0DE3  2DE5               	goto	u2361
  8503  0DE4  2DE6               	goto	u2360
  8504  0DE5                     u2361:
  8505  0DE5  2DC8               	goto	l3787
  8506  0DE6                     u2360:
  8507  0DE6                     l3791:
  8508                           
  8509                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
  8510  0DE6  0021               	movlb	1	; select bank1
  8511  0DE7  0821               	movf	(_nout+1)^(0+128),w
  8512  0DE8  0020               	movlb	0	; select bank0
  8513  0DE9  00AE               	movwf	?_vfprintf+1
  8514  0DEA  0021               	movlb	1	; select bank1
  8515  0DEB  0820               	movf	_nout^(0+128),w
  8516  0DEC  0020               	movlb	0	; select bank0
  8517  0DED  00AD               	movwf	?_vfprintf
  8518  0DEE                     l1331:
  8519  0DEE  0008               	return
  8520  0DEF                     __end_of_vfprintf:
  8521                           
  8522                           	psect	text21
  8523  0588                     __ptext21:	
  8524 ;; *************** function _vfpfcnvrt *****************
  8525 ;; Defined at:
  8526 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  8527 ;; Parameters:    Size  Location     Type
  8528 ;;  fp              1    wreg     PTR struct _IO_FILE
  8529 ;;		 -> NULL(0), 
  8530 ;;  fmt             1    5[BANK0 ] PTR PTR unsigned char 
  8531 ;;		 -> vfprintf@cfmt(2), 
  8532 ;;  ap              1    6[BANK0 ] PTR PTR void 
  8533 ;;		 -> printf@ap(1), 
  8534 ;; Auto vars:     Size  Location     Type
  8535 ;;  fp              1   12[BANK0 ] PTR struct _IO_FILE
  8536 ;;		 -> NULL(0), 
  8537 ;;  llu             8    0        unsigned long long 
  8538 ;;  ll              8    0        long long 
  8539 ;;  f               4    0        long long 
  8540 ;;  ct              3    0        unsigned char [3]
  8541 ;;  vp              2    0        PTR void 
  8542 ;;  i               2    0        int 
  8543 ;;  done            2    0        int 
  8544 ;;  cp              2    0        PTR unsigned char 
  8545 ;;  c               1    0        unsigned char 
  8546 ;; Return value:  Size  Location     Type
  8547 ;;                  2    5[BANK0 ] int 
  8548 ;; Registers used:
  8549 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8550 ;; Tracked objects:
  8551 ;;		On entry : 0/0
  8552 ;;		On exit  : 0/0
  8553 ;;		Unchanged: 0/0
  8554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8555 ;;      Params:         0       2       0       0       0       0       0       0
  8556 ;;      Locals:         0       1       0       0       0       0       0       0
  8557 ;;      Temps:          0       5       0       0       0       0       0       0
  8558 ;;      Totals:         0       8       0       0       0       0       0       0
  8559 ;;Total ram usage:        8 bytes
  8560 ;; Hardware stack levels used: 1
  8561 ;; Hardware stack levels required when called: 7
  8562 ;; This function calls:
  8563 ;;		_fputc
  8564 ;; This function is called by:
  8565 ;;		_vfprintf
  8566 ;; This function uses a non-reentrant model
  8567 ;;
  8568                           
  8569                           
  8570                           ;psect for function _vfpfcnvrt
  8571  0588                     _vfpfcnvrt:
  8572                           
  8573                           ;incstack = 0
  8574                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8575                           ;vfpfcnvrt@fp stored from wreg
  8576  0588  0020               	movlb	0	; select bank0
  8577  0589  00AC               	movwf	vfpfcnvrt@fp
  8578  058A                     l3727:
  8579                           
  8580                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.32\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          2\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
  8581  058A  0825               	movf	vfpfcnvrt@fmt,w
  8582  058B  0086               	movwf	6
  8583  058C  0187               	clrf	7
  8584  058D  3F40               	moviw [0]fsr1
  8585  058E  00A7               	movwf	??_vfpfcnvrt
  8586  058F  3F41               	moviw [1]fsr1
  8587  0590  00A8               	movwf	??_vfpfcnvrt+1
  8588  0591  0827               	movf	??_vfpfcnvrt,w
  8589  0592  0084               	movwf	4
  8590  0593  0828               	movf	??_vfpfcnvrt+1,w
  8591  0594  0085               	movwf	5
  8592  0595  0012               	moviw fsr0++
  8593  0596  3A25               	xorlw	37
  8594  0597  1D03               	btfss	3,2
  8595  0598  2D9A               	goto	u2341
  8596  0599  2D9B               	goto	u2340
  8597  059A                     u2341:
  8598  059A  2DE2               	goto	l3751
  8599  059B                     u2340:
  8600  059B                     l3729:
  8601                           
  8602                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
  8603  059B  0825               	movf	vfpfcnvrt@fmt,w
  8604  059C  0086               	movwf	6
  8605  059D  0187               	clrf	7
  8606  059E  3001               	movlw	1
  8607  059F  0781               	addwf	1,f
  8608  05A0  3141               	addfsr 1,1
  8609  05A1  1803               	skipnc
  8610  05A2  0A81               	incf	1,f
  8611  05A3                     l3731:
  8612                           
  8613                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
  8614  05A3  0021               	movlb	1	; select bank1
  8615  05A4  01A2               	clrf	_width^(0+128)
  8616  05A5  01A3               	clrf	(_width+1)^(0+128)
  8617  05A6  01A6               	clrf	_flags^(0+128)
  8618  05A7  01A7               	clrf	(_flags+1)^(0+128)
  8619  05A8                     l3733:
  8620                           
  8621                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
  8622  05A8  30FF               	movlw	255
  8623  05A9  00A4               	movwf	_prec^(0+128)
  8624  05AA  30FF               	movlw	255
  8625  05AB  00A5               	movwf	(_prec^(0+128)+1)
  8626  05AC                     l3735:
  8627                           
  8628                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  8629  05AC  0020               	movlb	0	; select bank0
  8630  05AD  0825               	movf	vfpfcnvrt@fmt,w
  8631  05AE  0086               	movwf	6
  8632  05AF  0187               	clrf	7
  8633  05B0  3F40               	moviw [0]fsr1
  8634  05B1  00A7               	movwf	??_vfpfcnvrt
  8635  05B2  3F41               	moviw [1]fsr1
  8636  05B3  00A8               	movwf	??_vfpfcnvrt+1
  8637  05B4  0827               	movf	??_vfpfcnvrt,w
  8638  05B5  0084               	movwf	4
  8639  05B6  0828               	movf	??_vfpfcnvrt+1,w
  8640  05B7  0085               	movwf	5
  8641  05B8  0012               	moviw fsr0++
  8642  05B9  3A25               	xorlw	37
  8643  05BA  1D03               	btfss	3,2
  8644  05BB  2DBD               	goto	u2351
  8645  05BC  2DBE               	goto	u2350
  8646  05BD                     u2351:
  8647  05BD  2DD7               	goto	l3745
  8648  05BE                     u2350:
  8649  05BE                     l3737:
  8650                           
  8651                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  8652  05BE  0825               	movf	vfpfcnvrt@fmt,w
  8653  05BF  0086               	movwf	6
  8654  05C0  0187               	clrf	7
  8655  05C1  3001               	movlw	1
  8656  05C2  0781               	addwf	1,f
  8657  05C3  3141               	addfsr 1,1
  8658  05C4  1803               	skipnc
  8659  05C5  0A81               	incf	1,f
  8660  05C6                     l3739:
  8661                           
  8662                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  8663  05C6  3025               	movlw	37
  8664  05C7  00F5               	movwf	fputc@c
  8665  05C8  3000               	movlw	0
  8666  05C9  00F6               	movwf	fputc@c+1
  8667  05CA  082C               	movf	vfpfcnvrt@fp,w
  8668  05CB  00A7               	movwf	??_vfpfcnvrt
  8669  05CC  0827               	movf	??_vfpfcnvrt,w
  8670  05CD  00F7               	movwf	fputc@fp
  8671  05CE  318F  2701  3185   	fcall	_fputc
  8672  05D1                     l3741:
  8673                           
  8674                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  8675  05D1  3001               	movlw	1
  8676  05D2  0020               	movlb	0	; select bank0
  8677  05D3  00A5               	movwf	?_vfpfcnvrt
  8678  05D4  3000               	movlw	0
  8679  05D5  00A6               	movwf	?_vfpfcnvrt+1
  8680  05D6  2E05               	goto	l1325
  8681  05D7                     l3745:
  8682                           
  8683                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  8684  05D7  0825               	movf	vfpfcnvrt@fmt,w
  8685  05D8  0086               	movwf	6
  8686  05D9  0187               	clrf	7
  8687  05DA  3001               	movlw	1
  8688  05DB  0781               	addwf	1,f
  8689  05DC  3141               	addfsr 1,1
  8690  05DD  1803               	skipnc
  8691  05DE  0A81               	incf	1,f
  8692  05DF                     l3747:
  8693                           
  8694                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  8695  05DF  01A5               	clrf	?_vfpfcnvrt
  8696  05E0  01A6               	clrf	?_vfpfcnvrt+1
  8697  05E1  2E05               	goto	l1325
  8698  05E2                     l3751:
  8699                           
  8700                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  8701  05E2  0825               	movf	vfpfcnvrt@fmt,w
  8702  05E3  0086               	movwf	6
  8703  05E4  0187               	clrf	7
  8704  05E5  3F40               	moviw [0]fsr1
  8705  05E6  00A7               	movwf	??_vfpfcnvrt
  8706  05E7  3F41               	moviw [1]fsr1
  8707  05E8  00A8               	movwf	??_vfpfcnvrt+1
  8708  05E9  0827               	movf	??_vfpfcnvrt,w
  8709  05EA  0084               	movwf	4
  8710  05EB  0828               	movf	??_vfpfcnvrt+1,w
  8711  05EC  0085               	movwf	5
  8712  05ED  0800               	movf	0,w	;code access
  8713  05EE  00A9               	movwf	??_vfpfcnvrt+2
  8714  05EF  01AA               	clrf	??_vfpfcnvrt+3
  8715  05F0  0829               	movf	??_vfpfcnvrt+2,w
  8716  05F1  00F5               	movwf	fputc@c
  8717  05F2  082A               	movf	??_vfpfcnvrt+3,w
  8718  05F3  00F6               	movwf	fputc@c+1
  8719  05F4  082C               	movf	vfpfcnvrt@fp,w
  8720  05F5  00AB               	movwf	??_vfpfcnvrt+4
  8721  05F6  082B               	movf	??_vfpfcnvrt+4,w
  8722  05F7  00F7               	movwf	fputc@fp
  8723  05F8  318F  2701  3185   	fcall	_fputc
  8724  05FB                     l3753:
  8725                           
  8726                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  8727  05FB  0020               	movlb	0	; select bank0
  8728  05FC  0825               	movf	vfpfcnvrt@fmt,w
  8729  05FD  0086               	movwf	6
  8730  05FE  0187               	clrf	7
  8731  05FF  3001               	movlw	1
  8732  0600  0781               	addwf	1,f
  8733  0601  3141               	addfsr 1,1
  8734  0602  1803               	skipnc
  8735  0603  0A81               	incf	1,f
  8736  0604  2DD1               	goto	l3741
  8737  0605                     l1325:
  8738  0605  0008               	return
  8739  0606                     __end_of_vfpfcnvrt:
  8740                           
  8741                           	psect	text22
  8742  0F01                     __ptext22:	
  8743 ;; *************** function _fputc *****************
  8744 ;; Defined at:
  8745 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputc.c"
  8746 ;; Parameters:    Size  Location     Type
  8747 ;;  c               2    5[COMMON] int 
  8748 ;;  fp              1    7[COMMON] PTR struct _IO_FILE
  8749 ;;		 -> NULL(0), 
  8750 ;; Auto vars:     Size  Location     Type
  8751 ;;		None
  8752 ;; Return value:  Size  Location     Type
  8753 ;;                  2    5[COMMON] int 
  8754 ;; Registers used:
  8755 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8756 ;; Tracked objects:
  8757 ;;		On entry : 0/0
  8758 ;;		On exit  : 0/0
  8759 ;;		Unchanged: 0/0
  8760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8761 ;;      Params:         3       0       0       0       0       0       0       0
  8762 ;;      Locals:         0       0       0       0       0       0       0       0
  8763 ;;      Temps:          0       5       0       0       0       0       0       0
  8764 ;;      Totals:         3       5       0       0       0       0       0       0
  8765 ;;Total ram usage:        8 bytes
  8766 ;; Hardware stack levels used: 1
  8767 ;; Hardware stack levels required when called: 6
  8768 ;; This function calls:
  8769 ;;		_putch
  8770 ;; This function is called by:
  8771 ;;		_vfpfcnvrt
  8772 ;; This function uses a non-reentrant model
  8773 ;;
  8774                           
  8775                           
  8776                           ;psect for function _fputc
  8777  0F01                     _fputc:
  8778  0F01                     l3713:	
  8779                           ;incstack = 0
  8780                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8781                           
  8782  0F01  0877               	movf	fputc@fp,w
  8783  0F02  1903               	btfsc	3,2
  8784  0F03  2F05               	goto	u2301
  8785  0F04  2F06               	goto	u2300
  8786  0F05                     u2301:
  8787  0F05  2F0B               	goto	l3717
  8788  0F06                     u2300:
  8789  0F06                     l3715:
  8790  0F06  0877               	movf	fputc@fp,w
  8791  0F07  1D03               	btfss	3,2
  8792  0F08  2F0A               	goto	u2311
  8793  0F09  2F0B               	goto	u2310
  8794  0F0A                     u2311:
  8795  0F0A  2F10               	goto	l3719
  8796  0F0B                     u2310:
  8797  0F0B                     l3717:
  8798  0F0B  0875               	movf	fputc@c,w
  8799  0F0C  318A  22FB  318F   	fcall	_putch
  8800  0F0F  2F40               	goto	l1343
  8801  0F10                     l3719:
  8802  0F10  0877               	movf	fputc@fp,w
  8803  0F11  3E03               	addlw	3
  8804  0F12  0086               	movwf	6
  8805  0F13  0187               	clrf	7
  8806  0F14  0016               	moviw fsr1++
  8807  0F15  0401               	iorwf	1,w
  8808  0F16  1903               	btfsc	3,2
  8809  0F17  2F19               	goto	u2321
  8810  0F18  2F1A               	goto	u2320
  8811  0F19                     u2321:
  8812  0F19  2F38               	goto	l3723
  8813  0F1A                     u2320:
  8814  0F1A                     l3721:
  8815  0F1A  0877               	movf	fputc@fp,w
  8816  0F1B  3E03               	addlw	3
  8817  0F1C  0086               	movwf	6
  8818  0F1D  0187               	clrf	7
  8819  0F1E  3F40               	moviw [0]fsr1
  8820  0F1F  0020               	movlb	0	; select bank0
  8821  0F20  00A0               	movwf	??_fputc
  8822  0F21  3F41               	moviw [1]fsr1
  8823  0F22  00A1               	movwf	??_fputc+1
  8824  0F23  0A77               	incf	fputc@fp,w
  8825  0F24  0086               	movwf	6
  8826  0F25  0187               	clrf	7
  8827  0F26  3F40               	moviw [0]fsr1
  8828  0F27  00A2               	movwf	??_fputc+2
  8829  0F28  3F41               	moviw [1]fsr1
  8830  0F29  00A3               	movwf	??_fputc+3
  8831  0F2A  0823               	movf	??_fputc+3,w
  8832  0F2B  3A80               	xorlw	128
  8833  0F2C  00A4               	movwf	??_fputc+4
  8834  0F2D  0821               	movf	??_fputc+1,w
  8835  0F2E  3A80               	xorlw	128
  8836  0F2F  0224               	subwf	??_fputc+4,w
  8837  0F30  1D03               	skipz
  8838  0F31  2F34               	goto	u2335
  8839  0F32  0820               	movf	??_fputc,w
  8840  0F33  0222               	subwf	??_fputc+2,w
  8841  0F34                     u2335:
  8842  0F34  1803               	skipnc
  8843  0F35  2F37               	goto	u2331
  8844  0F36  2F38               	goto	u2330
  8845  0F37                     u2331:
  8846  0F37  2F40               	goto	l1343
  8847  0F38                     u2330:
  8848  0F38                     l3723:
  8849  0F38  0A77               	incf	fputc@fp,w
  8850  0F39  0086               	movwf	6
  8851  0F3A  0187               	clrf	7
  8852  0F3B  3001               	movlw	1
  8853  0F3C  0781               	addwf	1,f
  8854  0F3D  3141               	addfsr 1,1
  8855  0F3E  1803               	skipnc
  8856  0F3F  0A81               	incf	1,f
  8857  0F40                     l1343:
  8858  0F40  0008               	return
  8859  0F41                     __end_of_fputc:
  8860                           
  8861                           	psect	text23
  8862  0AFB                     __ptext23:	
  8863 ;; *************** function _putch *****************
  8864 ;; Defined at:
  8865 ;;		line 146 in file "mcc_generated_files/eusart.c"
  8866 ;; Parameters:    Size  Location     Type
  8867 ;;  txData          1    wreg     unsigned char 
  8868 ;; Auto vars:     Size  Location     Type
  8869 ;;  txData          1    4[COMMON] unsigned char 
  8870 ;; Return value:  Size  Location     Type
  8871 ;;                  1    wreg      void 
  8872 ;; Registers used:
  8873 ;;		wreg, status,2, status,0, pclath, cstack
  8874 ;; Tracked objects:
  8875 ;;		On entry : 0/0
  8876 ;;		On exit  : 0/0
  8877 ;;		Unchanged: 0/0
  8878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8879 ;;      Params:         0       0       0       0       0       0       0       0
  8880 ;;      Locals:         1       0       0       0       0       0       0       0
  8881 ;;      Temps:          0       0       0       0       0       0       0       0
  8882 ;;      Totals:         1       0       0       0       0       0       0       0
  8883 ;;Total ram usage:        1 bytes
  8884 ;; Hardware stack levels used: 1
  8885 ;; Hardware stack levels required when called: 5
  8886 ;; This function calls:
  8887 ;;		_EUSART_Write
  8888 ;; This function is called by:
  8889 ;;		_fputc
  8890 ;; This function uses a non-reentrant model
  8891 ;;
  8892                           
  8893                           
  8894                           ;psect for function _putch
  8895  0AFB                     _putch:
  8896                           
  8897                           ;incstack = 0
  8898                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  8899                           ;putch@txData stored from wreg
  8900  0AFB  00F4               	movwf	putch@txData
  8901  0AFC                     l3711:
  8902                           
  8903                           ;mcc_generated_files/eusart.c: 146: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 147: {;mcc_generated_files/eusart.c: 148:     EUSART_Write(txData);
  8904  0AFC  0874               	movf	putch@txData,w
  8905  0AFD  318B  231D  318A   	fcall	_EUSART_Write
  8906  0B00                     l231:
  8907  0B00  0008               	return
  8908  0B01                     __end_of_putch:
  8909                           
  8910                           	psect	text24
  8911  0B1D                     __ptext24:	
  8912 ;; *************** function _EUSART_Write *****************
  8913 ;; Defined at:
  8914 ;;		line 132 in file "mcc_generated_files/eusart.c"
  8915 ;; Parameters:    Size  Location     Type
  8916 ;;  txData          1    wreg     unsigned char 
  8917 ;; Auto vars:     Size  Location     Type
  8918 ;;  txData          1    3[COMMON] unsigned char 
  8919 ;; Return value:  Size  Location     Type
  8920 ;;                  1    wreg      void 
  8921 ;; Registers used:
  8922 ;;		wreg
  8923 ;; Tracked objects:
  8924 ;;		On entry : 0/0
  8925 ;;		On exit  : 0/0
  8926 ;;		Unchanged: 0/0
  8927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8928 ;;      Params:         0       0       0       0       0       0       0       0
  8929 ;;      Locals:         1       0       0       0       0       0       0       0
  8930 ;;      Temps:          0       0       0       0       0       0       0       0
  8931 ;;      Totals:         1       0       0       0       0       0       0       0
  8932 ;;Total ram usage:        1 bytes
  8933 ;; Hardware stack levels used: 1
  8934 ;; Hardware stack levels required when called: 4
  8935 ;; This function calls:
  8936 ;;		Nothing
  8937 ;; This function is called by:
  8938 ;;		_putch
  8939 ;; This function uses a non-reentrant model
  8940 ;;
  8941                           
  8942                           
  8943                           ;psect for function _EUSART_Write
  8944  0B1D                     _EUSART_Write:
  8945                           
  8946                           ;incstack = 0
  8947                           ; Regs used in _EUSART_Write: [wreg]
  8948                           ;EUSART_Write@txData stored from wreg
  8949  0B1D  00F3               	movwf	EUSART_Write@txData
  8950  0B1E                     l3707:
  8951  0B1E                     l222:	
  8952                           ;mcc_generated_files/eusart.c: 135:     {;mcc_generated_files/eusart.c: 136:     }
  8953                           
  8954                           
  8955                           ;mcc_generated_files/eusart.c: 134:     while(0 == PIR1bits.TXIF)
  8956  0B1E  0020               	movlb	0	; select bank0
  8957  0B1F  1E11               	btfss	17,4	;volatile
  8958  0B20  2B22               	goto	u2291
  8959  0B21  2B23               	goto	u2290
  8960  0B22                     u2291:
  8961  0B22  2B1E               	goto	l222
  8962  0B23                     u2290:
  8963  0B23                     l3709:
  8964                           
  8965                           ;mcc_generated_files/eusart.c: 138:     TX1REG = txData;
  8966  0B23  0873               	movf	EUSART_Write@txData,w
  8967  0B24  0023               	movlb	3	; select bank3
  8968  0B25  009A               	movwf	26	;volatile
  8969  0B26                     l225:
  8970  0B26  0008               	return
  8971  0B27                     __end_of_EUSART_Write:
  8972                           
  8973                           	psect	text25
  8974  0E22                     __ptext25:	
  8975 ;; *************** function _battery_voltage *****************
  8976 ;; Defined at:
  8977 ;;		line 148 in file "main.c"
  8978 ;; Parameters:    Size  Location     Type
  8979 ;;		None
  8980 ;; Auto vars:     Size  Location     Type
  8981 ;;		None
  8982 ;; Return value:  Size  Location     Type
  8983 ;;                  2   23[BANK0 ] short 
  8984 ;; Registers used:
  8985 ;;		wreg, status,2, status,0, pclath, cstack
  8986 ;; Tracked objects:
  8987 ;;		On entry : 0/0
  8988 ;;		On exit  : 0/0
  8989 ;;		Unchanged: 0/0
  8990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8991 ;;      Params:         0       2       0       0       0       0       0       0
  8992 ;;      Locals:         0       0       0       0       0       0       0       0
  8993 ;;      Temps:          0       0       0       0       0       0       0       0
  8994 ;;      Totals:         0       2       0       0       0       0       0       0
  8995 ;;Total ram usage:        2 bytes
  8996 ;; Hardware stack levels used: 1
  8997 ;; Hardware stack levels required when called: 5
  8998 ;; This function calls:
  8999 ;;		___aldiv
  9000 ;; This function is called by:
  9001 ;;		_process_remote_command
  9002 ;;		_main
  9003 ;; This function uses a non-reentrant model
  9004 ;;
  9005                           
  9006                           
  9007                           ;psect for function _battery_voltage
  9008  0E22                     _battery_voltage:
  9009  0E22                     l3991:	
  9010                           ;incstack = 0
  9011                           ; Regs used in _battery_voltage: [wreg+status,2+status,0+pclath+cstack]
  9012                           
  9013                           
  9014                           ;main.c: 150:   FVRCON = 0b10000001;
  9015  0E22  3081               	movlw	129
  9016  0E23  0022               	movlb	2	; select bank2
  9017  0E24  0097               	movwf	23	;volatile
  9018                           
  9019                           ;main.c: 151:   ADCON0 = 0b01111101;
  9020  0E25  307D               	movlw	125
  9021  0E26  0021               	movlb	1	; select bank1
  9022  0E27  009D               	movwf	29	;volatile
  9023                           
  9024                           ;main.c: 152:   ADCON1 = 0b10010000;
  9025  0E28  3090               	movlw	144
  9026  0E29  009E               	movwf	30	;volatile
  9027  0E2A                     l629:	
  9028                           ;main.c: 153:   while(!FVRCONbits.FVRRDY){ }
  9029                           
  9030  0E2A  0022               	movlb	2	; select bank2
  9031  0E2B  1F17               	btfss	23,6	;volatile
  9032  0E2C  2E2E               	goto	u2661
  9033  0E2D  2E2F               	goto	u2660
  9034  0E2E                     u2661:
  9035  0E2E  2E2A               	goto	l629
  9036  0E2F                     u2660:
  9037  0E2F                     l631:
  9038                           
  9039                           ;main.c: 154:   __nop();
  9040  0E2F  0000               	nop
  9041                           
  9042                           ;main.c: 155:   __nop();
  9043  0E30  0000               	nop
  9044                           
  9045                           ;main.c: 156:   __nop();
  9046  0E31  0000               	nop
  9047                           
  9048                           ;main.c: 157:   __nop();
  9049  0E32  0000               	nop
  9050                           
  9051                           ;main.c: 158:   __nop();
  9052  0E33  0000               	nop
  9053                           
  9054                           ;main.c: 159:   ADCON0bits.GO_nDONE = 1;
  9055  0E34  0021               	movlb	1	; select bank1
  9056  0E35  149D               	bsf	29,1	;volatile
  9057  0E36                     l632:	
  9058                           ;main.c: 160:   while(ADCON0bits.GO_nDONE){ }
  9059                           
  9060  0E36  189D               	btfsc	29,1	;volatile
  9061  0E37  2E39               	goto	u2671
  9062  0E38  2E3A               	goto	u2670
  9063  0E39                     u2671:
  9064  0E39  2E36               	goto	l632
  9065  0E3A                     u2670:
  9066  0E3A                     l634:
  9067                           
  9068                           ;main.c: 161:   ADCON0bits.ADON = 0;
  9069  0E3A  101D               	bcf	29,0	;volatile
  9070  0E3B                     l3993:
  9071                           
  9072                           ;main.c: 166:   return 1047552L / ADRES;
  9073  0E3B  081B               	movf	27,w	;volatile
  9074  0E3C  0020               	movlb	0	; select bank0
  9075  0E3D  00A8               	movwf	___aldiv@divisor
  9076  0E3E  0021               	movlb	1	; select bank1
  9077  0E3F  081C               	movf	28,w	;volatile
  9078  0E40  0020               	movlb	0	; select bank0
  9079  0E41  00A9               	movwf	___aldiv@divisor+1
  9080  0E42  01AA               	clrf	___aldiv@divisor+2
  9081  0E43  01AB               	clrf	___aldiv@divisor+3
  9082  0E44  3000               	movlw	0
  9083  0E45  00AF               	movwf	___aldiv@dividend+3
  9084  0E46  300F               	movlw	15
  9085  0E47  00AE               	movwf	___aldiv@dividend+2
  9086  0E48  30FC               	movlw	252
  9087  0E49  00AD               	movwf	___aldiv@dividend+1
  9088  0E4A  3000               	movlw	0
  9089  0E4B  00AC               	movwf	___aldiv@dividend
  9090  0E4C  3184  24F8  318E   	fcall	___aldiv
  9091  0E4F  0020               	movlb	0	; select bank0
  9092  0E50  0829               	movf	?___aldiv+1,w
  9093  0E51  00B8               	movwf	?_battery_voltage+1
  9094  0E52  0828               	movf	?___aldiv,w
  9095  0E53  00B7               	movwf	?_battery_voltage
  9096  0E54                     l635:
  9097  0E54  0008               	return
  9098  0E55                     __end_of_battery_voltage:
  9099                           
  9100                           	psect	text26
  9101  04F8                     __ptext26:	
  9102 ;; *************** function ___aldiv *****************
  9103 ;; Defined at:
  9104 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aldiv.c"
  9105 ;; Parameters:    Size  Location     Type
  9106 ;;  divisor         4    8[BANK0 ] long 
  9107 ;;  dividend        4   12[BANK0 ] long 
  9108 ;; Auto vars:     Size  Location     Type
  9109 ;;  quotient        4   19[BANK0 ] long 
  9110 ;;  sign            1   18[BANK0 ] unsigned char 
  9111 ;;  counter         1   17[BANK0 ] unsigned char 
  9112 ;; Return value:  Size  Location     Type
  9113 ;;                  4    8[BANK0 ] long 
  9114 ;; Registers used:
  9115 ;;		wreg, status,2, status,0
  9116 ;; Tracked objects:
  9117 ;;		On entry : 0/0
  9118 ;;		On exit  : 0/0
  9119 ;;		Unchanged: 0/0
  9120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9121 ;;      Params:         0       8       0       0       0       0       0       0
  9122 ;;      Locals:         0       6       0       0       0       0       0       0
  9123 ;;      Temps:          0       1       0       0       0       0       0       0
  9124 ;;      Totals:         0      15       0       0       0       0       0       0
  9125 ;;Total ram usage:       15 bytes
  9126 ;; Hardware stack levels used: 1
  9127 ;; Hardware stack levels required when called: 4
  9128 ;; This function calls:
  9129 ;;		Nothing
  9130 ;; This function is called by:
  9131 ;;		_battery_voltage
  9132 ;;		_setCurrent
  9133 ;;		_setFrequency
  9134 ;; This function uses a non-reentrant model
  9135 ;;
  9136                           
  9137                           
  9138                           ;psect for function ___aldiv
  9139  04F8                     ___aldiv:
  9140  04F8                     l3879:	
  9141                           ;incstack = 0
  9142                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9143                           
  9144  04F8  0020               	movlb	0	; select bank0
  9145  04F9  01B2               	clrf	___aldiv@sign
  9146  04FA                     l3881:
  9147  04FA  1FAB               	btfss	___aldiv@divisor+3,7
  9148  04FB  2CFD               	goto	u2451
  9149  04FC  2CFE               	goto	u2450
  9150  04FD                     u2451:
  9151  04FD  2D0B               	goto	l894
  9152  04FE                     u2450:
  9153  04FE                     l3883:
  9154  04FE  09A8               	comf	___aldiv@divisor,f
  9155  04FF  09A9               	comf	___aldiv@divisor+1,f
  9156  0500  09AA               	comf	___aldiv@divisor+2,f
  9157  0501  09AB               	comf	___aldiv@divisor+3,f
  9158  0502  0AA8               	incf	___aldiv@divisor,f
  9159  0503  1903               	skipnz
  9160  0504  0AA9               	incf	___aldiv@divisor+1,f
  9161  0505  1903               	skipnz
  9162  0506  0AAA               	incf	___aldiv@divisor+2,f
  9163  0507  1903               	skipnz
  9164  0508  0AAB               	incf	___aldiv@divisor+3,f
  9165  0509  01B2               	clrf	___aldiv@sign
  9166  050A  0AB2               	incf	___aldiv@sign,f
  9167  050B                     l894:
  9168  050B  1FAF               	btfss	___aldiv@dividend+3,7
  9169  050C  2D0E               	goto	u2461
  9170  050D  2D0F               	goto	u2460
  9171  050E                     u2461:
  9172  050E  2D1E               	goto	l3889
  9173  050F                     u2460:
  9174  050F                     l3885:
  9175  050F  09AC               	comf	___aldiv@dividend,f
  9176  0510  09AD               	comf	___aldiv@dividend+1,f
  9177  0511  09AE               	comf	___aldiv@dividend+2,f
  9178  0512  09AF               	comf	___aldiv@dividend+3,f
  9179  0513  0AAC               	incf	___aldiv@dividend,f
  9180  0514  1903               	skipnz
  9181  0515  0AAD               	incf	___aldiv@dividend+1,f
  9182  0516  1903               	skipnz
  9183  0517  0AAE               	incf	___aldiv@dividend+2,f
  9184  0518  1903               	skipnz
  9185  0519  0AAF               	incf	___aldiv@dividend+3,f
  9186  051A                     l3887:
  9187  051A  3001               	movlw	1
  9188  051B  00B0               	movwf	??___aldiv
  9189  051C  0830               	movf	??___aldiv,w
  9190  051D  06B2               	xorwf	___aldiv@sign,f
  9191  051E                     l3889:
  9192  051E  3000               	movlw	0
  9193  051F  00B6               	movwf	___aldiv@quotient+3
  9194  0520  3000               	movlw	0
  9195  0521  00B5               	movwf	___aldiv@quotient+2
  9196  0522  3000               	movlw	0
  9197  0523  00B4               	movwf	___aldiv@quotient+1
  9198  0524  3000               	movlw	0
  9199  0525  00B3               	movwf	___aldiv@quotient
  9200  0526                     l3891:
  9201  0526  082B               	movf	___aldiv@divisor+3,w
  9202  0527  042A               	iorwf	___aldiv@divisor+2,w
  9203  0528  0429               	iorwf	___aldiv@divisor+1,w
  9204  0529  0428               	iorwf	___aldiv@divisor,w
  9205  052A  1903               	skipnz
  9206  052B  2D2D               	goto	u2471
  9207  052C  2D2E               	goto	u2470
  9208  052D                     u2471:
  9209  052D  2D6F               	goto	l3911
  9210  052E                     u2470:
  9211  052E                     l3893:
  9212  052E  01B1               	clrf	___aldiv@counter
  9213  052F  0AB1               	incf	___aldiv@counter,f
  9214  0530  2D3C               	goto	l3897
  9215  0531                     l3895:
  9216  0531  3001               	movlw	1
  9217  0532                     u2485:
  9218  0532  35A8               	lslf	___aldiv@divisor,f
  9219  0533  0DA9               	rlf	___aldiv@divisor+1,f
  9220  0534  0DAA               	rlf	___aldiv@divisor+2,f
  9221  0535  0DAB               	rlf	___aldiv@divisor+3,f
  9222  0536  0B89               	decfsz	9,f
  9223  0537  2D32               	goto	u2485
  9224  0538  3001               	movlw	1
  9225  0539  00B0               	movwf	??___aldiv
  9226  053A  0830               	movf	??___aldiv,w
  9227  053B  07B1               	addwf	___aldiv@counter,f
  9228  053C                     l3897:
  9229  053C  1FAB               	btfss	___aldiv@divisor+3,7
  9230  053D  2D3F               	goto	u2491
  9231  053E  2D40               	goto	u2490
  9232  053F                     u2491:
  9233  053F  2D31               	goto	l3895
  9234  0540                     u2490:
  9235  0540                     l3899:
  9236  0540  3001               	movlw	1
  9237  0541                     u2505:
  9238  0541  35B3               	lslf	___aldiv@quotient,f
  9239  0542  0DB4               	rlf	___aldiv@quotient+1,f
  9240  0543  0DB5               	rlf	___aldiv@quotient+2,f
  9241  0544  0DB6               	rlf	___aldiv@quotient+3,f
  9242  0545  0B89               	decfsz	9,f
  9243  0546  2D41               	goto	u2505
  9244  0547                     l3901:
  9245  0547  082B               	movf	___aldiv@divisor+3,w
  9246  0548  022F               	subwf	___aldiv@dividend+3,w
  9247  0549  1D03               	skipz
  9248  054A  2D55               	goto	u2515
  9249  054B  082A               	movf	___aldiv@divisor+2,w
  9250  054C  022E               	subwf	___aldiv@dividend+2,w
  9251  054D  1D03               	skipz
  9252  054E  2D55               	goto	u2515
  9253  054F  0829               	movf	___aldiv@divisor+1,w
  9254  0550  022D               	subwf	___aldiv@dividend+1,w
  9255  0551  1D03               	skipz
  9256  0552  2D55               	goto	u2515
  9257  0553  0828               	movf	___aldiv@divisor,w
  9258  0554  022C               	subwf	___aldiv@dividend,w
  9259  0555                     u2515:
  9260  0555  1C03               	skipc
  9261  0556  2D58               	goto	u2511
  9262  0557  2D59               	goto	u2510
  9263  0558                     u2511:
  9264  0558  2D62               	goto	l3907
  9265  0559                     u2510:
  9266  0559                     l3903:
  9267  0559  0828               	movf	___aldiv@divisor,w
  9268  055A  02AC               	subwf	___aldiv@dividend,f
  9269  055B  0829               	movf	___aldiv@divisor+1,w
  9270  055C  3BAD               	subwfb	___aldiv@dividend+1,f
  9271  055D  082A               	movf	___aldiv@divisor+2,w
  9272  055E  3BAE               	subwfb	___aldiv@dividend+2,f
  9273  055F  082B               	movf	___aldiv@divisor+3,w
  9274  0560  3BAF               	subwfb	___aldiv@dividend+3,f
  9275  0561                     l3905:
  9276  0561  1433               	bsf	___aldiv@quotient,0
  9277  0562                     l3907:
  9278  0562  3001               	movlw	1
  9279  0563                     u2525:
  9280  0563  36AB               	lsrf	___aldiv@divisor+3,f
  9281  0564  0CAA               	rrf	___aldiv@divisor+2,f
  9282  0565  0CA9               	rrf	___aldiv@divisor+1,f
  9283  0566  0CA8               	rrf	___aldiv@divisor,f
  9284  0567  0B89               	decfsz	9,f
  9285  0568  2D63               	goto	u2525
  9286  0569                     l3909:
  9287  0569  3001               	movlw	1
  9288  056A  02B1               	subwf	___aldiv@counter,f
  9289  056B  1D03               	btfss	3,2
  9290  056C  2D6E               	goto	u2531
  9291  056D  2D6F               	goto	u2530
  9292  056E                     u2531:
  9293  056E  2D40               	goto	l3899
  9294  056F                     u2530:
  9295  056F                     l3911:
  9296  056F  0832               	movf	___aldiv@sign,w
  9297  0570  1903               	btfsc	3,2
  9298  0571  2D73               	goto	u2541
  9299  0572  2D74               	goto	u2540
  9300  0573                     u2541:
  9301  0573  2D7F               	goto	l3915
  9302  0574                     u2540:
  9303  0574                     l3913:
  9304  0574  09B3               	comf	___aldiv@quotient,f
  9305  0575  09B4               	comf	___aldiv@quotient+1,f
  9306  0576  09B5               	comf	___aldiv@quotient+2,f
  9307  0577  09B6               	comf	___aldiv@quotient+3,f
  9308  0578  0AB3               	incf	___aldiv@quotient,f
  9309  0579  1903               	skipnz
  9310  057A  0AB4               	incf	___aldiv@quotient+1,f
  9311  057B  1903               	skipnz
  9312  057C  0AB5               	incf	___aldiv@quotient+2,f
  9313  057D  1903               	skipnz
  9314  057E  0AB6               	incf	___aldiv@quotient+3,f
  9315  057F                     l3915:
  9316  057F  0836               	movf	___aldiv@quotient+3,w
  9317  0580  00AB               	movwf	?___aldiv+3
  9318  0581  0835               	movf	___aldiv@quotient+2,w
  9319  0582  00AA               	movwf	?___aldiv+2
  9320  0583  0834               	movf	___aldiv@quotient+1,w
  9321  0584  00A9               	movwf	?___aldiv+1
  9322  0585  0833               	movf	___aldiv@quotient,w
  9323  0586  00A8               	movwf	?___aldiv
  9324  0587                     l904:
  9325  0587  0008               	return
  9326  0588                     __end_of___aldiv:
  9327                           
  9328                           	psect	text27
  9329  0D92                     __ptext27:	
  9330 ;; *************** function _lowBattery *****************
  9331 ;; Defined at:
  9332 ;;		line 235 in file "main.c"
  9333 ;; Parameters:    Size  Location     Type
  9334 ;;		None
  9335 ;; Auto vars:     Size  Location     Type
  9336 ;;		None
  9337 ;; Return value:  Size  Location     Type
  9338 ;;                  1    wreg      void 
  9339 ;; Registers used:
  9340 ;;		wreg, status,2, status,0, pclath, cstack
  9341 ;; Tracked objects:
  9342 ;;		On entry : 0/0
  9343 ;;		On exit  : 0/0
  9344 ;;		Unchanged: 0/0
  9345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9346 ;;      Params:         0       0       0       0       0       0       0       0
  9347 ;;      Locals:         0       0       0       0       0       0       0       0
  9348 ;;      Temps:          0       2       0       0       0       0       0       0
  9349 ;;      Totals:         0       2       0       0       0       0       0       0
  9350 ;;Total ram usage:        2 bytes
  9351 ;; Hardware stack levels used: 1
  9352 ;; Hardware stack levels required when called: 5
  9353 ;; This function calls:
  9354 ;;		_setLEDColor
  9355 ;; This function is called by:
  9356 ;;		_main
  9357 ;; This function uses a non-reentrant model
  9358 ;;
  9359                           
  9360                           
  9361                           ;psect for function _lowBattery
  9362  0D92                     _lowBattery:
  9363  0D92                     l4091:	
  9364                           ;incstack = 0
  9365                           ; Regs used in _lowBattery: [wreg+status,2+status,0+pclath+cstack]
  9366                           
  9367                           
  9368                           ;main.c: 236:   interfaceState = STATE_LOWBATTERY;
  9369  0D92  3003               	movlw	3
  9370  0D93  0020               	movlb	0	; select bank0
  9371  0D94  00A0               	movwf	??_lowBattery
  9372  0D95  0820               	movf	??_lowBattery,w
  9373  0D96  00F8               	movwf	_interfaceState
  9374  0D97                     l4093:
  9375                           
  9376                           ;main.c: 237:   setLEDColor(255, 0, 0);
  9377  0D97  01F3               	clrf	setLEDColor@green
  9378  0D98  01F4               	clrf	setLEDColor@blue
  9379  0D99  30FF               	movlw	255
  9380  0D9A  318B  23C2  318D   	fcall	_setLEDColor
  9381  0D9D                     l4095:
  9382                           
  9383                           ;main.c: 238:   _delay((unsigned long)((250)*(4000000/4000.0)));
  9384  0D9D  3002               	movlw	2
  9385  0D9E  0020               	movlb	0	; select bank0
  9386  0D9F  00A1               	movwf	??_lowBattery+1
  9387  0DA0  3045               	movlw	69
  9388  0DA1  00A0               	movwf	??_lowBattery
  9389  0DA2  30A9               	movlw	169
  9390  0DA3                     u3227:
  9391  0DA3  0B89               	decfsz	9,f
  9392  0DA4  2DA3               	goto	u3227
  9393  0DA5  0BA0               	decfsz	??_lowBattery,f
  9394  0DA6  2DA3               	goto	u3227
  9395  0DA7  0BA1               	decfsz	??_lowBattery+1,f
  9396  0DA8  2DA3               	goto	u3227
  9397  0DA9  3200               	nop2
  9398                           
  9399                           ;main.c: 239:   setLEDColor(0, 0, 0);
  9400  0DAA  01F3               	clrf	setLEDColor@green
  9401  0DAB  01F4               	clrf	setLEDColor@blue
  9402  0DAC  3000               	movlw	0
  9403  0DAD  318B  23C2  318D   	fcall	_setLEDColor
  9404  0DB0                     l4097:
  9405                           
  9406                           ;main.c: 240:   _delay((unsigned long)((500)*(4000000/4000.0)));
  9407  0DB0  3003               	movlw	3
  9408  0DB1  0020               	movlb	0	; select bank0
  9409  0DB2  00A1               	movwf	??_lowBattery+1
  9410  0DB3  308A               	movlw	138
  9411  0DB4  00A0               	movwf	??_lowBattery
  9412  0DB5  3055               	movlw	85
  9413  0DB6                     u3237:
  9414  0DB6  0B89               	decfsz	9,f
  9415  0DB7  2DB6               	goto	u3237
  9416  0DB8  0BA0               	decfsz	??_lowBattery,f
  9417  0DB9  2DB6               	goto	u3237
  9418  0DBA  0BA1               	decfsz	??_lowBattery+1,f
  9419  0DBB  2DB6               	goto	u3237
  9420  0DBC  3200               	nop2
  9421  0DBD                     l646:
  9422  0DBD  0008               	return
  9423  0DBE                     __end_of_lowBattery:
  9424                           
  9425                           	psect	text28
  9426  0BC2                     __ptext28:	
  9427 ;; *************** function _setLEDColor *****************
  9428 ;; Defined at:
  9429 ;;		line 214 in file "main.c"
  9430 ;; Parameters:    Size  Location     Type
  9431 ;;  red             1    wreg     unsigned char 
  9432 ;;  green           1    3[COMMON] unsigned char 
  9433 ;;  blue            1    4[COMMON] unsigned char 
  9434 ;; Auto vars:     Size  Location     Type
  9435 ;;  red             1    6[COMMON] unsigned char 
  9436 ;; Return value:  Size  Location     Type
  9437 ;;                  1    wreg      void 
  9438 ;; Registers used:
  9439 ;;		wreg, status,2, status,0
  9440 ;; Tracked objects:
  9441 ;;		On entry : 0/0
  9442 ;;		On exit  : 0/0
  9443 ;;		Unchanged: 0/0
  9444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9445 ;;      Params:         2       0       0       0       0       0       0       0
  9446 ;;      Locals:         1       0       0       0       0       0       0       0
  9447 ;;      Temps:          1       0       0       0       0       0       0       0
  9448 ;;      Totals:         4       0       0       0       0       0       0       0
  9449 ;;Total ram usage:        4 bytes
  9450 ;; Hardware stack levels used: 1
  9451 ;; Hardware stack levels required when called: 4
  9452 ;; This function calls:
  9453 ;;		Nothing
  9454 ;; This function is called by:
  9455 ;;		_lowBattery
  9456 ;;		_startUp
  9457 ;;		_selectSomething
  9458 ;;		_selectFrequency
  9459 ;;		_selectCurrent
  9460 ;;		_selectIncrease
  9461 ;;		_selectDecrease
  9462 ;;		_selectCurrentValue
  9463 ;;		_selectFrequencyValue
  9464 ;;		_process_remote_command
  9465 ;;		_selectResetValue
  9466 ;; This function uses a non-reentrant model
  9467 ;;
  9468                           
  9469                           
  9470                           ;psect for function _setLEDColor
  9471  0BC2                     _setLEDColor:
  9472                           
  9473                           ;incstack = 0
  9474                           ; Regs used in _setLEDColor: [wreg+status,2+status,0]
  9475                           ;setLEDColor@red stored from wreg
  9476  0BC2  00F6               	movwf	setLEDColor@red
  9477  0BC3                     l3847:
  9478                           
  9479                           ;main.c: 214: void setLEDColor(uint8_t red, uint8_t green, uint8_t blue);main.c: 215: {;
      +                          main.c: 221:   if (0 == blue){
  9480  0BC3  0874               	movf	setLEDColor@blue,w
  9481  0BC4  1D03               	btfss	3,2
  9482  0BC5  2BC7               	goto	u2401
  9483  0BC6  2BC8               	goto	u2400
  9484  0BC7                     u2401:
  9485  0BC7  2BCB               	goto	l3851
  9486  0BC8                     u2400:
  9487  0BC8                     l3849:
  9488                           
  9489                           ;main.c: 222:     TRISC |= 0b00100000;
  9490  0BC8  0021               	movlb	1	; select bank1
  9491  0BC9  168E               	bsf	14,5	;volatile
  9492                           
  9493                           ;main.c: 223:   } else {
  9494  0BCA  2BD0               	goto	l3853
  9495  0BCB                     l3851:
  9496                           
  9497                           ;main.c: 224:     TRISC &= 0b11011111;
  9498  0BCB  30DF               	movlw	223
  9499  0BCC  00F5               	movwf	??_setLEDColor
  9500  0BCD  0875               	movf	??_setLEDColor,w
  9501  0BCE  0021               	movlb	1	; select bank1
  9502  0BCF  058E               	andwf	14,f	;volatile
  9503  0BD0                     l3853:
  9504                           
  9505                           ;main.c: 226:   CCPR1L = 255U - blue;
  9506  0BD0  0974               	comf	setLEDColor@blue,w
  9507  0BD1  0025               	movlb	5	; select bank5
  9508  0BD2  0091               	movwf	17	;volatile
  9509  0BD3                     l3855:
  9510                           
  9511                           ;main.c: 228:   PWM3DCH = red;
  9512  0BD3  0876               	movf	setLEDColor@red,w
  9513  0BD4  002C               	movlb	12	; select bank12
  9514  0BD5  0098               	movwf	24	;volatile
  9515  0BD6                     l3857:
  9516                           
  9517                           ;main.c: 230:   PWM4DCH = green;
  9518  0BD6  0873               	movf	setLEDColor@green,w
  9519  0BD7  009B               	movwf	27	;volatile
  9520  0BD8                     l643:
  9521  0BD8  0008               	return
  9522  0BD9                     __end_of_setLEDColor:
  9523                           
  9524                           	psect	text29
  9525  0F41                     __ptext29:	
  9526 ;; *************** function _initLED *****************
  9527 ;; Defined at:
  9528 ;;		line 173 in file "main.c"
  9529 ;; Parameters:    Size  Location     Type
  9530 ;;		None
  9531 ;; Auto vars:     Size  Location     Type
  9532 ;;		None
  9533 ;; Return value:  Size  Location     Type
  9534 ;;                  1    wreg      void 
  9535 ;; Registers used:
  9536 ;;		wreg, status,2, status,0
  9537 ;; Tracked objects:
  9538 ;;		On entry : 0/0
  9539 ;;		On exit  : 0/0
  9540 ;;		Unchanged: 0/0
  9541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9542 ;;      Params:         0       0       0       0       0       0       0       0
  9543 ;;      Locals:         0       0       0       0       0       0       0       0
  9544 ;;      Temps:          1       0       0       0       0       0       0       0
  9545 ;;      Totals:         1       0       0       0       0       0       0       0
  9546 ;;Total ram usage:        1 bytes
  9547 ;; Hardware stack levels used: 1
  9548 ;; Hardware stack levels required when called: 4
  9549 ;; This function calls:
  9550 ;;		Nothing
  9551 ;; This function is called by:
  9552 ;;		_main
  9553 ;; This function uses a non-reentrant model
  9554 ;;
  9555                           
  9556                           
  9557                           ;psect for function _initLED
  9558  0F41                     _initLED:
  9559  0F41                     l3255:	
  9560                           ;incstack = 0
  9561                           ; Regs used in _initLED: [wreg+status,2+status,0]
  9562                           
  9563                           
  9564                           ;main.c: 176:   PR2 = 255;
  9565  0F41  30FF               	movlw	255
  9566  0F42  0020               	movlb	0	; select bank0
  9567  0F43  009B               	movwf	27	;volatile
  9568  0F44                     l3257:
  9569                           
  9570                           ;main.c: 177:   T2CONbits.T2CKPS = 0b10;
  9571  0F44  081C               	movf	28,w	;volatile
  9572  0F45  39FC               	andlw	-4
  9573  0F46  3802               	iorlw	2
  9574  0F47  009C               	movwf	28	;volatile
  9575  0F48                     l3259:
  9576                           
  9577                           ;main.c: 178:   T2CONbits.TMR2ON = 1;
  9578  0F48  151C               	bsf	28,2	;volatile
  9579  0F49                     l3261:
  9580                           
  9581                           ;main.c: 182:   TRISC |= 0b00010000;
  9582  0F49  0021               	movlb	1	; select bank1
  9583  0F4A  160E               	bsf	14,4	;volatile
  9584  0F4B                     l3263:
  9585                           
  9586                           ;main.c: 183:   RC4PPS = 0b01110;
  9587  0F4B  300E               	movlw	14
  9588  0F4C  003D               	movlb	29	; select bank29
  9589  0F4D  00A4               	movwf	36	;volatile
  9590                           
  9591                           ;main.c: 184:   CCPTMRSbits.P3TSEL = 0b00;
  9592  0F4E  30CF               	movlw	-49
  9593  0F4F  0025               	movlb	5	; select bank5
  9594  0F50  059E               	andwf	30,f	;volatile
  9595  0F51                     l3265:
  9596                           
  9597                           ;main.c: 185:   PWM3DCH = 0;
  9598  0F51  002C               	movlb	12	; select bank12
  9599  0F52  0198               	clrf	24	;volatile
  9600  0F53                     l3267:
  9601                           
  9602                           ;main.c: 186:   PWM3DCLbits.PWM3DCL = 0;
  9603  0F53  303F               	movlw	-193
  9604  0F54  0597               	andwf	23,f	;volatile
  9605  0F55                     l3269:
  9606                           
  9607                           ;main.c: 187:   PWM3CONbits.PWM3POL = 1;
  9608  0F55  1619               	bsf	25,4	;volatile
  9609  0F56                     l3271:
  9610                           
  9611                           ;main.c: 188:   TRISC &= 0b11101111;
  9612  0F56  30EF               	movlw	239
  9613  0F57  00F3               	movwf	??_initLED
  9614  0F58  0873               	movf	??_initLED,w
  9615  0F59  0021               	movlb	1	; select bank1
  9616  0F5A  058E               	andwf	14,f	;volatile
  9617  0F5B                     l3273:
  9618                           
  9619                           ;main.c: 189:   PWM3CONbits.PWM3EN = 1;
  9620  0F5B  002C               	movlb	12	; select bank12
  9621  0F5C  1799               	bsf	25,7	;volatile
  9622  0F5D                     l3275:
  9623                           
  9624                           ;main.c: 193:   TRISA |= 0b00100000;
  9625  0F5D  0021               	movlb	1	; select bank1
  9626  0F5E  168C               	bsf	12,5	;volatile
  9627  0F5F                     l3277:
  9628                           
  9629                           ;main.c: 194:   RA5PPS = 0b01111;
  9630  0F5F  300F               	movlw	15
  9631  0F60  003D               	movlb	29	; select bank29
  9632  0F61  0095               	movwf	21	;volatile
  9633  0F62                     l3279:
  9634                           
  9635                           ;main.c: 195:   CCPTMRSbits.P4TSEL = 0b00;
  9636  0F62  303F               	movlw	-193
  9637  0F63  0025               	movlb	5	; select bank5
  9638  0F64  059E               	andwf	30,f	;volatile
  9639  0F65                     l3281:
  9640                           
  9641                           ;main.c: 196:   PWM4DCH = 0;
  9642  0F65  002C               	movlb	12	; select bank12
  9643  0F66  019B               	clrf	27	;volatile
  9644  0F67                     l3283:
  9645                           
  9646                           ;main.c: 197:   PWM4DCLbits.PWM4DCL = 0;
  9647  0F67  303F               	movlw	-193
  9648  0F68  059A               	andwf	26,f	;volatile
  9649  0F69                     l3285:
  9650                           
  9651                           ;main.c: 198:   PWM4CONbits.PWM4POL = 1;
  9652  0F69  161C               	bsf	28,4	;volatile
  9653  0F6A                     l3287:
  9654                           
  9655                           ;main.c: 199:   TRISA &= 0b11011111;
  9656  0F6A  30DF               	movlw	223
  9657  0F6B  00F3               	movwf	??_initLED
  9658  0F6C  0873               	movf	??_initLED,w
  9659  0F6D  0021               	movlb	1	; select bank1
  9660  0F6E  058C               	andwf	12,f	;volatile
  9661  0F6F                     l3289:
  9662                           
  9663                           ;main.c: 200:   PWM4CONbits.PWM4EN = 1;
  9664  0F6F  002C               	movlb	12	; select bank12
  9665  0F70  179C               	bsf	28,7	;volatile
  9666  0F71                     l3291:
  9667                           
  9668                           ;main.c: 206:   TRISC |= 0b00100000;
  9669  0F71  0021               	movlb	1	; select bank1
  9670  0F72  168E               	bsf	14,5	;volatile
  9671                           
  9672                           ;main.c: 207:   RC5PPS = 0b01100;
  9673  0F73  300C               	movlw	12
  9674  0F74  003D               	movlb	29	; select bank29
  9675  0F75  00A5               	movwf	37	;volatile
  9676  0F76                     l3293:
  9677                           
  9678                           ;main.c: 208:   CCP1CONbits.CCP1M = 0b1100;
  9679  0F76  0025               	movlb	5	; select bank5
  9680  0F77  0813               	movf	19,w	;volatile
  9681  0F78  39F0               	andlw	-16
  9682  0F79  380C               	iorlw	12
  9683  0F7A  0093               	movwf	19	;volatile
  9684  0F7B                     l3295:
  9685                           
  9686                           ;main.c: 209:   CCPR1L = 255;
  9687  0F7B  30FF               	movlw	255
  9688  0F7C  0091               	movwf	17	;volatile
  9689                           
  9690                           ;main.c: 210:   CCP1CONbits.DC1B = 0x3;
  9691  0F7D  3030               	movlw	48
  9692  0F7E  0493               	iorwf	19,f	;volatile
  9693                           
  9694                           ;main.c: 211:   TRISC &= 0b11011111;
  9695  0F7F  30DF               	movlw	223
  9696  0F80  00F3               	movwf	??_initLED
  9697  0F81  0873               	movf	??_initLED,w
  9698  0F82  0021               	movlb	1	; select bank1
  9699  0F83  058E               	andwf	14,f	;volatile
  9700  0F84                     l638:
  9701  0F84  0008               	return
  9702  0F85                     __end_of_initLED:
  9703                           
  9704                           	psect	text30
  9705  0CA7                     __ptext30:	
  9706 ;; *************** function _SYSTEM_Initialize *****************
  9707 ;; Defined at:
  9708 ;;		line 50 in file "mcc_generated_files/mcc.c"
  9709 ;; Parameters:    Size  Location     Type
  9710 ;;		None
  9711 ;; Auto vars:     Size  Location     Type
  9712 ;;		None
  9713 ;; Return value:  Size  Location     Type
  9714 ;;                  1    wreg      void 
  9715 ;; Registers used:
  9716 ;;		wreg, status,2, status,0, pclath, cstack
  9717 ;; Tracked objects:
  9718 ;;		On entry : 0/0
  9719 ;;		On exit  : 0/0
  9720 ;;		Unchanged: 0/0
  9721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9722 ;;      Params:         0       0       0       0       0       0       0       0
  9723 ;;      Locals:         0       0       0       0       0       0       0       0
  9724 ;;      Temps:          0       0       0       0       0       0       0       0
  9725 ;;      Totals:         0       0       0       0       0       0       0       0
  9726 ;;Total ram usage:        0 bytes
  9727 ;; Hardware stack levels used: 1
  9728 ;; Hardware stack levels required when called: 6
  9729 ;; This function calls:
  9730 ;;		_DAC_Initialize
  9731 ;;		_EUSART_Initialize
  9732 ;;		_EXT_INT_Initialize
  9733 ;;		_OPA1_Initialize
  9734 ;;		_OPA2_Initialize
  9735 ;;		_OSCILLATOR_Initialize
  9736 ;;		_PIN_MANAGER_Initialize
  9737 ;;		_TMR0_Initialize
  9738 ;;		_TMR1_Initialize
  9739 ;;		_TMR2_Initialize
  9740 ;;		_TMR4_Initialize
  9741 ;;		_WDT_Initialize
  9742 ;; This function is called by:
  9743 ;;		_main
  9744 ;; This function uses a non-reentrant model
  9745 ;;
  9746                           
  9747                           
  9748                           ;psect for function _SYSTEM_Initialize
  9749  0CA7                     _SYSTEM_Initialize:
  9750  0CA7                     l3193:	
  9751                           ;incstack = 0
  9752                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9753                           
  9754                           
  9755                           ;mcc_generated_files/mcc.c: 52:     PIN_MANAGER_Initialize();
  9756  0CA7  318D  25EF  318C   	fcall	_PIN_MANAGER_Initialize
  9757                           
  9758                           ;mcc_generated_files/mcc.c: 53:     OSCILLATOR_Initialize();
  9759  0CAA  318B  230D  318C   	fcall	_OSCILLATOR_Initialize
  9760  0CAD                     l3195:
  9761                           
  9762                           ;mcc_generated_files/mcc.c: 54:     WDT_Initialize();
  9763  0CAD  318A  22B1  318C   	fcall	_WDT_Initialize
  9764  0CB0                     l3197:
  9765                           
  9766                           ;mcc_generated_files/mcc.c: 55:     DAC_Initialize();
  9767  0CB0  318A  22CB  318C   	fcall	_DAC_Initialize
  9768  0CB3                     l3199:
  9769                           
  9770                           ;mcc_generated_files/mcc.c: 56:     OPA1_Initialize();
  9771  0CB3  318A  22B4  318C   	fcall	_OPA1_Initialize
  9772  0CB6                     l3201:
  9773                           
  9774                           ;mcc_generated_files/mcc.c: 57:     TMR4_Initialize();
  9775  0CB6  318B  2384  318C   	fcall	_TMR4_Initialize
  9776  0CB9                     l3203:
  9777                           
  9778                           ;mcc_generated_files/mcc.c: 58:     OPA2_Initialize();
  9779  0CB9  318A  22B8  318C   	fcall	_OPA2_Initialize
  9780  0CBC                     l3205:
  9781                           
  9782                           ;mcc_generated_files/mcc.c: 59:     TMR1_Initialize();
  9783  0CBC  318B  23D9  318C   	fcall	_TMR1_Initialize
  9784  0CBF                     l3207:
  9785                           
  9786                           ;mcc_generated_files/mcc.c: 60:     TMR2_Initialize();
  9787  0CBF  318B  2315  318C   	fcall	_TMR2_Initialize
  9788  0CC2                     l3209:
  9789                           
  9790                           ;mcc_generated_files/mcc.c: 61:     EXT_INT_Initialize();
  9791  0CC2  318B  2327  318C   	fcall	_EXT_INT_Initialize
  9792  0CC5                     l3211:
  9793                           
  9794                           ;mcc_generated_files/mcc.c: 62:     TMR0_Initialize();
  9795  0CC5  318B  2360  318C   	fcall	_TMR0_Initialize
  9796  0CC8                     l3213:
  9797                           
  9798                           ;mcc_generated_files/mcc.c: 63:     EUSART_Initialize();
  9799  0CC8  318C  2463  318C   	fcall	_EUSART_Initialize
  9800  0CCB                     l50:
  9801  0CCB  0008               	return
  9802  0CCC                     __end_of_SYSTEM_Initialize:
  9803                           
  9804                           	psect	text31
  9805  0AB1                     __ptext31:	
  9806 ;; *************** function _WDT_Initialize *****************
  9807 ;; Defined at:
  9808 ;;		line 78 in file "mcc_generated_files/mcc.c"
  9809 ;; Parameters:    Size  Location     Type
  9810 ;;		None
  9811 ;; Auto vars:     Size  Location     Type
  9812 ;;		None
  9813 ;; Return value:  Size  Location     Type
  9814 ;;                  1    wreg      void 
  9815 ;; Registers used:
  9816 ;;		status,2
  9817 ;; Tracked objects:
  9818 ;;		On entry : 0/0
  9819 ;;		On exit  : 0/0
  9820 ;;		Unchanged: 0/0
  9821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9822 ;;      Params:         0       0       0       0       0       0       0       0
  9823 ;;      Locals:         0       0       0       0       0       0       0       0
  9824 ;;      Temps:          0       0       0       0       0       0       0       0
  9825 ;;      Totals:         0       0       0       0       0       0       0       0
  9826 ;;Total ram usage:        0 bytes
  9827 ;; Hardware stack levels used: 1
  9828 ;; Hardware stack levels required when called: 4
  9829 ;; This function calls:
  9830 ;;		Nothing
  9831 ;; This function is called by:
  9832 ;;		_SYSTEM_Initialize
  9833 ;; This function uses a non-reentrant model
  9834 ;;
  9835                           
  9836                           
  9837                           ;psect for function _WDT_Initialize
  9838  0AB1                     _WDT_Initialize:
  9839  0AB1                     l2951:	
  9840                           ;incstack = 0
  9841                           ; Regs used in _WDT_Initialize: [status,2]
  9842                           
  9843                           
  9844                           ;mcc_generated_files/mcc.c: 81:     WDTCON = 0b00000000;
  9845  0AB1  0021               	movlb	1	; select bank1
  9846  0AB2  0197               	clrf	23	;volatile
  9847  0AB3                     l56:
  9848  0AB3  0008               	return
  9849  0AB4                     __end_of_WDT_Initialize:
  9850                           
  9851                           	psect	text32
  9852  0B84                     __ptext32:	
  9853 ;; *************** function _TMR4_Initialize *****************
  9854 ;; Defined at:
  9855 ;;		line 65 in file "mcc_generated_files/tmr4.c"
  9856 ;; Parameters:    Size  Location     Type
  9857 ;;		None
  9858 ;; Auto vars:     Size  Location     Type
  9859 ;;		None
  9860 ;; Return value:  Size  Location     Type
  9861 ;;                  1    wreg      void 
  9862 ;; Registers used:
  9863 ;;		wreg, status,2, status,0, pclath, cstack
  9864 ;; Tracked objects:
  9865 ;;		On entry : 0/0
  9866 ;;		On exit  : 0/0
  9867 ;;		Unchanged: 0/0
  9868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9869 ;;      Params:         0       0       0       0       0       0       0       0
  9870 ;;      Locals:         0       0       0       0       0       0       0       0
  9871 ;;      Temps:          0       0       0       0       0       0       0       0
  9872 ;;      Totals:         0       0       0       0       0       0       0       0
  9873 ;;Total ram usage:        0 bytes
  9874 ;; Hardware stack levels used: 1
  9875 ;; Hardware stack levels required when called: 5
  9876 ;; This function calls:
  9877 ;;		_TMR4_SetInterruptHandler
  9878 ;; This function is called by:
  9879 ;;		_SYSTEM_Initialize
  9880 ;; This function uses a non-reentrant model
  9881 ;;
  9882                           
  9883                           
  9884                           ;psect for function _TMR4_Initialize
  9885  0B84                     _TMR4_Initialize:
  9886  0B84                     l2955:	
  9887                           ;incstack = 0
  9888                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9889                           
  9890                           
  9891                           ;mcc_generated_files/tmr4.c: 70:     PR4 = 0x04;
  9892  0B84  3004               	movlw	4
  9893  0B85  0028               	movlb	8	; select bank8
  9894  0B86  0096               	movwf	22	;volatile
  9895  0B87                     l2957:
  9896                           
  9897                           ;mcc_generated_files/tmr4.c: 73:     TMR4 = 0x00;
  9898  0B87  0195               	clrf	21	;volatile
  9899  0B88                     l2959:
  9900                           
  9901                           ;mcc_generated_files/tmr4.c: 76:     PIR2bits.TMR4IF = 0;
  9902  0B88  0020               	movlb	0	; select bank0
  9903  0B89  1092               	bcf	18,1	;volatile
  9904  0B8A                     l2961:
  9905                           
  9906                           ;mcc_generated_files/tmr4.c: 79:     PIE2bits.TMR4IE = 1;
  9907  0B8A  0021               	movlb	1	; select bank1
  9908  0B8B  1492               	bsf	18,1	;volatile
  9909  0B8C                     l2963:
  9910                           
  9911                           ;mcc_generated_files/tmr4.c: 82:     TMR4_SetInterruptHandler(TMR4_DefaultInterruptHandl
      +                          er);
  9912  0B8C  3089               	movlw	low _TMR4_DefaultInterruptHandler
  9913  0B8D  00F3               	movwf	TMR4_SetInterruptHandler@InterruptHandler
  9914  0B8E  300E               	movlw	high _TMR4_DefaultInterruptHandler
  9915  0B8F  00F4               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1
  9916  0B90  318A  22F5  318B   	fcall	_TMR4_SetInterruptHandler
  9917  0B93                     l2965:
  9918                           
  9919                           ;mcc_generated_files/tmr4.c: 85:     T4CON = 0x16;
  9920  0B93  3016               	movlw	22
  9921  0B94  0028               	movlb	8	; select bank8
  9922  0B95  0097               	movwf	23	;volatile
  9923  0B96                     l396:
  9924  0B96  0008               	return
  9925  0B97                     __end_of_TMR4_Initialize:
  9926                           
  9927                           	psect	text33
  9928  0AF5                     __ptext33:	
  9929 ;; *************** function _TMR4_SetInterruptHandler *****************
  9930 ;; Defined at:
  9931 ;;		line 133 in file "mcc_generated_files/tmr4.c"
  9932 ;; Parameters:    Size  Location     Type
  9933 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  9934 ;;		 -> TMR4_DefaultInterruptHandler(1), 
  9935 ;; Auto vars:     Size  Location     Type
  9936 ;;		None
  9937 ;; Return value:  Size  Location     Type
  9938 ;;                  1    wreg      void 
  9939 ;; Registers used:
  9940 ;;		wreg
  9941 ;; Tracked objects:
  9942 ;;		On entry : 0/0
  9943 ;;		On exit  : 0/0
  9944 ;;		Unchanged: 0/0
  9945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9946 ;;      Params:         2       0       0       0       0       0       0       0
  9947 ;;      Locals:         0       0       0       0       0       0       0       0
  9948 ;;      Temps:          0       0       0       0       0       0       0       0
  9949 ;;      Totals:         2       0       0       0       0       0       0       0
  9950 ;;Total ram usage:        2 bytes
  9951 ;; Hardware stack levels used: 1
  9952 ;; Hardware stack levels required when called: 4
  9953 ;; This function calls:
  9954 ;;		Nothing
  9955 ;; This function is called by:
  9956 ;;		_TMR4_Initialize
  9957 ;; This function uses a non-reentrant model
  9958 ;;
  9959                           
  9960                           
  9961                           ;psect for function _TMR4_SetInterruptHandler
  9962  0AF5                     _TMR4_SetInterruptHandler:
  9963  0AF5                     l2739:	
  9964                           ;incstack = 0
  9965                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
  9966                           
  9967                           
  9968                           ;mcc_generated_files/tmr4.c: 134:     TMR4_InterruptHandler = InterruptHandler;
  9969  0AF5  0874               	movf	TMR4_SetInterruptHandler@InterruptHandler+1,w
  9970  0AF6  0021               	movlb	1	; select bank1
  9971  0AF7  00D8               	movwf	(_TMR4_InterruptHandler+1)^(0+128)
  9972  0AF8  0873               	movf	TMR4_SetInterruptHandler@InterruptHandler,w
  9973  0AF9  00D7               	movwf	_TMR4_InterruptHandler^(0+128)
  9974  0AFA                     l418:
  9975  0AFA  0008               	return
  9976  0AFB                     __end_of_TMR4_SetInterruptHandler:
  9977                           
  9978                           	psect	text34
  9979  0B15                     __ptext34:	
  9980 ;; *************** function _TMR2_Initialize *****************
  9981 ;; Defined at:
  9982 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  9983 ;; Parameters:    Size  Location     Type
  9984 ;;		None
  9985 ;; Auto vars:     Size  Location     Type
  9986 ;;		None
  9987 ;; Return value:  Size  Location     Type
  9988 ;;                  1    wreg      void 
  9989 ;; Registers used:
  9990 ;;		wreg, status,2
  9991 ;; Tracked objects:
  9992 ;;		On entry : 0/0
  9993 ;;		On exit  : 0/0
  9994 ;;		Unchanged: 0/0
  9995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9996 ;;      Params:         0       0       0       0       0       0       0       0
  9997 ;;      Locals:         0       0       0       0       0       0       0       0
  9998 ;;      Temps:          0       0       0       0       0       0       0       0
  9999 ;;      Totals:         0       0       0       0       0       0       0       0
 10000 ;;Total ram usage:        0 bytes
 10001 ;; Hardware stack levels used: 1
 10002 ;; Hardware stack levels required when called: 4
 10003 ;; This function calls:
 10004 ;;		Nothing
 10005 ;; This function is called by:
 10006 ;;		_SYSTEM_Initialize
 10007 ;; This function uses a non-reentrant model
 10008 ;;
 10009                           
 10010                           
 10011                           ;psect for function _TMR2_Initialize
 10012  0B15                     _TMR2_Initialize:
 10013  0B15                     l2981:	
 10014                           ;incstack = 0
 10015                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 10016                           
 10017                           
 10018                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 255;
 10019  0B15  30FF               	movlw	255
 10020  0B16  0020               	movlb	0	; select bank0
 10021  0B17  009B               	movwf	27	;volatile
 10022  0B18                     l2983:
 10023                           
 10024                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
 10025  0B18  019A               	clrf	26	;volatile
 10026  0B19                     l2985:
 10027                           
 10028                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
 10029  0B19  1091               	bcf	17,1	;volatile
 10030  0B1A                     l2987:
 10031                           
 10032                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x06;
 10033  0B1A  3006               	movlw	6
 10034  0B1B  009C               	movwf	28	;volatile
 10035  0B1C                     l305:
 10036  0B1C  0008               	return
 10037  0B1D                     __end_of_TMR2_Initialize:
 10038                           
 10039                           	psect	text35
 10040  0BD9                     __ptext35:	
 10041 ;; *************** function _TMR1_Initialize *****************
 10042 ;; Defined at:
 10043 ;;		line 65 in file "tmr1.c"
 10044 ;; Parameters:    Size  Location     Type
 10045 ;;		None
 10046 ;; Auto vars:     Size  Location     Type
 10047 ;;		None
 10048 ;; Return value:  Size  Location     Type
 10049 ;;                  1    wreg      void 
 10050 ;; Registers used:
 10051 ;;		wreg, status,2, status,0, pclath, cstack
 10052 ;; Tracked objects:
 10053 ;;		On entry : 0/0
 10054 ;;		On exit  : 0/0
 10055 ;;		Unchanged: 0/0
 10056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10057 ;;      Params:         0       0       0       0       0       0       0       0
 10058 ;;      Locals:         0       0       0       0       0       0       0       0
 10059 ;;      Temps:          0       0       0       0       0       0       0       0
 10060 ;;      Totals:         0       0       0       0       0       0       0       0
 10061 ;;Total ram usage:        0 bytes
 10062 ;; Hardware stack levels used: 1
 10063 ;; Hardware stack levels required when called: 5
 10064 ;; This function calls:
 10065 ;;		_TMR1_SetInterruptHandler
 10066 ;; This function is called by:
 10067 ;;		_SYSTEM_Initialize
 10068 ;; This function uses a non-reentrant model
 10069 ;;
 10070                           
 10071                           
 10072                           ;psect for function _TMR1_Initialize
 10073  0BD9                     _TMR1_Initialize:
 10074  0BD9                     l2969:	
 10075                           ;incstack = 0
 10076                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10077                           
 10078                           
 10079                           ;tmr1.c: 73:     TMR1 = 65528;
 10080  0BD9  30FF               	movlw	255
 10081  0BDA  0020               	movlb	0	; select bank0
 10082  0BDB  0097               	movwf	23	;volatile
 10083  0BDC  30F8               	movlw	248
 10084  0BDD  0096               	movwf	22	;volatile
 10085  0BDE                     l2971:
 10086                           
 10087                           ;tmr1.c: 76:     timer1ReloadVal= 65528;
 10088  0BDE  30F8               	movlw	248
 10089  0BDF  0021               	movlb	1	; select bank1
 10090  0BE0  00D5               	movwf	_timer1ReloadVal^(0+128)	;volatile
 10091  0BE1  30FF               	movlw	255
 10092  0BE2  00D6               	movwf	(_timer1ReloadVal^(0+128)+1)	;volatile
 10093  0BE3                     l2973:
 10094                           
 10095                           ;tmr1.c: 79:     PIR1bits.TMR1IF = 0;
 10096  0BE3  0020               	movlb	0	; select bank0
 10097  0BE4  1011               	bcf	17,0	;volatile
 10098  0BE5                     l2975:
 10099                           
 10100                           ;tmr1.c: 82:     PIE1bits.TMR1IE = 1;
 10101  0BE5  0021               	movlb	1	; select bank1
 10102  0BE6  1411               	bsf	17,0	;volatile
 10103  0BE7                     l2977:
 10104                           
 10105                           ;tmr1.c: 84:     T1CONbits.TMR1ON = 0;
 10106  0BE7  0020               	movlb	0	; select bank0
 10107  0BE8  1018               	bcf	24,0	;volatile
 10108  0BE9                     l2979:
 10109                           
 10110                           ;tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
 10111  0BE9  3026               	movlw	low _TMR1_DefaultInterruptHandler
 10112  0BEA  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler
 10113  0BEB  300C               	movlw	high _TMR1_DefaultInterruptHandler
 10114  0BEC  00F4               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
 10115  0BED  318A  22EF  318B   	fcall	_TMR1_SetInterruptHandler
 10116  0BF0                     l495:
 10117  0BF0  0008               	return
 10118  0BF1                     __end_of_TMR1_Initialize:
 10119                           
 10120                           	psect	text36
 10121  0AEF                     __ptext36:	
 10122 ;; *************** function _TMR1_SetInterruptHandler *****************
 10123 ;; Defined at:
 10124 ;;		line 128 in file "tmr1.c"
 10125 ;; Parameters:    Size  Location     Type
 10126 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
 10127 ;;		 -> TMR1_DefaultInterruptHandler(1), 
 10128 ;; Auto vars:     Size  Location     Type
 10129 ;;		None
 10130 ;; Return value:  Size  Location     Type
 10131 ;;                  1    wreg      void 
 10132 ;; Registers used:
 10133 ;;		wreg
 10134 ;; Tracked objects:
 10135 ;;		On entry : 0/0
 10136 ;;		On exit  : 0/0
 10137 ;;		Unchanged: 0/0
 10138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10139 ;;      Params:         2       0       0       0       0       0       0       0
 10140 ;;      Locals:         0       0       0       0       0       0       0       0
 10141 ;;      Temps:          0       0       0       0       0       0       0       0
 10142 ;;      Totals:         2       0       0       0       0       0       0       0
 10143 ;;Total ram usage:        2 bytes
 10144 ;; Hardware stack levels used: 1
 10145 ;; Hardware stack levels required when called: 4
 10146 ;; This function calls:
 10147 ;;		Nothing
 10148 ;; This function is called by:
 10149 ;;		_TMR1_Initialize
 10150 ;; This function uses a non-reentrant model
 10151 ;;
 10152                           
 10153                           
 10154                           ;psect for function _TMR1_SetInterruptHandler
 10155  0AEF                     _TMR1_SetInterruptHandler:
 10156  0AEF                     l2793:	
 10157                           ;incstack = 0
 10158                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 10159                           
 10160                           
 10161                           ;tmr1.c: 129:     TMR1_InterruptHandler = InterruptHandler;
 10162  0AEF  0874               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 10163  0AF0  0021               	movlb	1	; select bank1
 10164  0AF1  00D4               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
 10165  0AF2  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 10166  0AF3  00D3               	movwf	_TMR1_InterruptHandler^(0+128)
 10167  0AF4                     l511:
 10168  0AF4  0008               	return
 10169  0AF5                     __end_of_TMR1_SetInterruptHandler:
 10170                           
 10171                           	psect	text37
 10172  0B60                     __ptext37:	
 10173 ;; *************** function _TMR0_Initialize *****************
 10174 ;; Defined at:
 10175 ;;		line 65 in file "mcc_generated_files/tmr0.c"
 10176 ;; Parameters:    Size  Location     Type
 10177 ;;		None
 10178 ;; Auto vars:     Size  Location     Type
 10179 ;;		None
 10180 ;; Return value:  Size  Location     Type
 10181 ;;                  1    wreg      void 
 10182 ;; Registers used:
 10183 ;;		wreg, status,2, status,0, pclath, cstack
 10184 ;; Tracked objects:
 10185 ;;		On entry : 0/0
 10186 ;;		On exit  : 0/0
 10187 ;;		Unchanged: 0/0
 10188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10189 ;;      Params:         0       0       0       0       0       0       0       0
 10190 ;;      Locals:         0       0       0       0       0       0       0       0
 10191 ;;      Temps:          0       0       0       0       0       0       0       0
 10192 ;;      Totals:         0       0       0       0       0       0       0       0
 10193 ;;Total ram usage:        0 bytes
 10194 ;; Hardware stack levels used: 1
 10195 ;; Hardware stack levels required when called: 5
 10196 ;; This function calls:
 10197 ;;		_TMR0_SetInterruptHandler
 10198 ;; This function is called by:
 10199 ;;		_SYSTEM_Initialize
 10200 ;; This function uses a non-reentrant model
 10201 ;;
 10202                           
 10203                           
 10204                           ;psect for function _TMR0_Initialize
 10205  0B60                     _TMR0_Initialize:
 10206  0B60                     l2995:	
 10207                           ;incstack = 0
 10208                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10209                           
 10210                           
 10211                           ;mcc_generated_files/tmr0.c: 70:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD5 
      +                          & 0x3F));
 10212  0B60  0021               	movlb	1	; select bank1
 10213  0B61  0815               	movf	21,w	;volatile
 10214  0B62  39C0               	andlw	192
 10215  0B63  3815               	iorlw	21
 10216  0B64  0095               	movwf	21	;volatile
 10217  0B65                     l2997:
 10218                           
 10219                           ;mcc_generated_files/tmr0.c: 73:     TMR0 = 0x00;
 10220  0B65  0020               	movlb	0	; select bank0
 10221  0B66  0195               	clrf	21	;volatile
 10222  0B67                     l2999:
 10223                           
 10224                           ;mcc_generated_files/tmr0.c: 76:     timer0ReloadVal= 0x00;
 10225  0B67  01F9               	clrf	_timer0ReloadVal	;volatile
 10226  0B68                     l3001:
 10227                           
 10228                           ;mcc_generated_files/tmr0.c: 79:     INTCONbits.TMR0IF = 0;
 10229  0B68  110B               	bcf	11,2	;volatile
 10230  0B69                     l3003:
 10231                           
 10232                           ;mcc_generated_files/tmr0.c: 82:     INTCONbits.TMR0IE = 0;
 10233  0B69  128B               	bcf	11,5	;volatile
 10234  0B6A                     l3005:
 10235                           
 10236                           ;mcc_generated_files/tmr0.c: 85:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
 10237  0B6A  30B0               	movlw	low _TMR0_DefaultInterruptHandler
 10238  0B6B  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 10239  0B6C  300A               	movlw	high _TMR0_DefaultInterruptHandler
 10240  0B6D  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 10241  0B6E  318A  22E9  318B   	fcall	_TMR0_SetInterruptHandler
 10242  0B71                     l346:
 10243  0B71  0008               	return
 10244  0B72                     __end_of_TMR0_Initialize:
 10245                           
 10246                           	psect	text38
 10247  0AE9                     __ptext38:	
 10248 ;; *************** function _TMR0_SetInterruptHandler *****************
 10249 ;; Defined at:
 10250 ;;		line 126 in file "mcc_generated_files/tmr0.c"
 10251 ;; Parameters:    Size  Location     Type
 10252 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
 10253 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 10254 ;; Auto vars:     Size  Location     Type
 10255 ;;		None
 10256 ;; Return value:  Size  Location     Type
 10257 ;;                  1    wreg      void 
 10258 ;; Registers used:
 10259 ;;		wreg
 10260 ;; Tracked objects:
 10261 ;;		On entry : 0/0
 10262 ;;		On exit  : 0/0
 10263 ;;		Unchanged: 0/0
 10264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10265 ;;      Params:         2       0       0       0       0       0       0       0
 10266 ;;      Locals:         0       0       0       0       0       0       0       0
 10267 ;;      Temps:          0       0       0       0       0       0       0       0
 10268 ;;      Totals:         2       0       0       0       0       0       0       0
 10269 ;;Total ram usage:        2 bytes
 10270 ;; Hardware stack levels used: 1
 10271 ;; Hardware stack levels required when called: 4
 10272 ;; This function calls:
 10273 ;;		Nothing
 10274 ;; This function is called by:
 10275 ;;		_TMR0_Initialize
 10276 ;; This function uses a non-reentrant model
 10277 ;;
 10278                           
 10279                           
 10280                           ;psect for function _TMR0_SetInterruptHandler
 10281  0AE9                     _TMR0_SetInterruptHandler:
 10282  0AE9                     l2737:	
 10283                           ;incstack = 0
 10284                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 10285                           
 10286                           
 10287                           ;mcc_generated_files/tmr0.c: 127:     TMR0_InterruptHandler = InterruptHandler;
 10288  0AE9  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 10289  0AEA  0021               	movlb	1	; select bank1
 10290  0AEB  00DA               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
 10291  0AEC  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 10292  0AED  00D9               	movwf	_TMR0_InterruptHandler^(0+128)
 10293  0AEE                     l362:
 10294  0AEE  0008               	return
 10295  0AEF                     __end_of_TMR0_SetInterruptHandler:
 10296                           
 10297                           	psect	text39
 10298  0DEF                     __ptext39:	
 10299 ;; *************** function _PIN_MANAGER_Initialize *****************
 10300 ;; Defined at:
 10301 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 10302 ;; Parameters:    Size  Location     Type
 10303 ;;		None
 10304 ;; Auto vars:     Size  Location     Type
 10305 ;;		None
 10306 ;; Return value:  Size  Location     Type
 10307 ;;                  1    wreg      void 
 10308 ;; Registers used:
 10309 ;;		wreg, status,2
 10310 ;; Tracked objects:
 10311 ;;		On entry : 0/0
 10312 ;;		On exit  : 0/0
 10313 ;;		Unchanged: 0/0
 10314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10315 ;;      Params:         0       0       0       0       0       0       0       0
 10316 ;;      Locals:         0       0       0       0       0       0       0       0
 10317 ;;      Temps:          0       0       0       0       0       0       0       0
 10318 ;;      Totals:         0       0       0       0       0       0       0       0
 10319 ;;Total ram usage:        0 bytes
 10320 ;; Hardware stack levels used: 1
 10321 ;; Hardware stack levels required when called: 4
 10322 ;; This function calls:
 10323 ;;		Nothing
 10324 ;; This function is called by:
 10325 ;;		_SYSTEM_Initialize
 10326 ;; This function uses a non-reentrant model
 10327 ;;
 10328                           
 10329                           
 10330                           ;psect for function _PIN_MANAGER_Initialize
 10331  0DEF                     _PIN_MANAGER_Initialize:
 10332  0DEF                     l2913:	
 10333                           ;incstack = 0
 10334                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 10335                           
 10336                           
 10337                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
 10338  0DEF  0022               	movlb	2	; select bank2
 10339  0DF0  018C               	clrf	12	;volatile
 10340                           
 10341                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
 10342  0DF1  018D               	clrf	13	;volatile
 10343                           
 10344                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 10345  0DF2  018E               	clrf	14	;volatile
 10346  0DF3                     l2915:
 10347                           
 10348                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x04;
 10349  0DF3  3004               	movlw	4
 10350  0DF4  0021               	movlb	1	; select bank1
 10351  0DF5  008C               	movwf	12	;volatile
 10352  0DF6                     l2917:
 10353                           
 10354                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x30;
 10355  0DF6  3030               	movlw	48
 10356  0DF7  008D               	movwf	13	;volatile
 10357  0DF8                     l2919:
 10358                           
 10359                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x50;
 10360  0DF8  3050               	movlw	80
 10361  0DF9  008E               	movwf	14	;volatile
 10362  0DFA                     l2921:
 10363                           
 10364                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x40;
 10365  0DFA  3040               	movlw	64
 10366  0DFB  0023               	movlb	3	; select bank3
 10367  0DFC  008E               	movwf	14	;volatile
 10368  0DFD                     l2923:
 10369                           
 10370                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x10;
 10371  0DFD  3010               	movlw	16
 10372  0DFE  008D               	movwf	13	;volatile
 10373  0DFF                     l2925:
 10374                           
 10375                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x00;
 10376  0DFF  018C               	clrf	12	;volatile
 10377  0E00                     l2927:
 10378                           
 10379                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
 10380  0E00  0024               	movlb	4	; select bank4
 10381  0E01  018D               	clrf	13	;volatile
 10382  0E02                     l2929:
 10383                           
 10384                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
 10385  0E02  018C               	clrf	12	;volatile
 10386  0E03                     l2931:
 10387                           
 10388                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x00;
 10389  0E03  018E               	clrf	14	;volatile
 10390  0E04                     l2933:
 10391                           
 10392                           ;mcc_generated_files/pin_manager.c: 84:     OPTION_REGbits.nWPUEN = 0;
 10393  0E04  0021               	movlb	1	; select bank1
 10394  0E05  1395               	bcf	21,7	;volatile
 10395  0E06                     l2935:
 10396                           
 10397                           ;mcc_generated_files/pin_manager.c: 89:     ODCONA = 0x00;
 10398  0E06  0025               	movlb	5	; select bank5
 10399  0E07  018C               	clrf	12	;volatile
 10400  0E08                     l2937:
 10401                           
 10402                           ;mcc_generated_files/pin_manager.c: 90:     ODCONB = 0x00;
 10403  0E08  018D               	clrf	13	;volatile
 10404  0E09                     l2939:
 10405                           
 10406                           ;mcc_generated_files/pin_manager.c: 91:     ODCONC = 0x00;
 10407  0E09  018E               	clrf	14	;volatile
 10408                           
 10409                           ;mcc_generated_files/pin_manager.c: 96:     SLRCONA = 0x37;
 10410  0E0A  3037               	movlw	55
 10411  0E0B  0026               	movlb	6	; select bank6
 10412  0E0C  008C               	movwf	12	;volatile
 10413                           
 10414                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONB = 0xF0;
 10415  0E0D  30F0               	movlw	240
 10416  0E0E  008D               	movwf	13	;volatile
 10417                           
 10418                           ;mcc_generated_files/pin_manager.c: 98:     SLRCONC = 0xFF;
 10419  0E0F  30FF               	movlw	255
 10420  0E10  008E               	movwf	14	;volatile
 10421                           
 10422                           ;mcc_generated_files/pin_manager.c: 103:     INLVLA = 0x3F;
 10423  0E11  303F               	movlw	63
 10424  0E12  0027               	movlb	7	; select bank7
 10425  0E13  008C               	movwf	12	;volatile
 10426                           
 10427                           ;mcc_generated_files/pin_manager.c: 104:     INLVLB = 0xF0;
 10428  0E14  30F0               	movlw	240
 10429  0E15  008D               	movwf	13	;volatile
 10430                           
 10431                           ;mcc_generated_files/pin_manager.c: 105:     INLVLC = 0xFF;
 10432  0E16  30FF               	movlw	255
 10433  0E17  008E               	movwf	14	;volatile
 10434  0E18                     l2941:
 10435                           
 10436                           ;mcc_generated_files/pin_manager.c: 113:     INTCONbits.IOCIE = 1;
 10437  0E18  158B               	bsf	11,3	;volatile
 10438                           
 10439                           ;mcc_generated_files/pin_manager.c: 116:     INTPPS = 0x02;
 10440  0E19  3002               	movlw	2
 10441  0E1A  003C               	movlb	28	; select bank28
 10442  0E1B  0090               	movwf	16	;volatile
 10443                           
 10444                           ;mcc_generated_files/pin_manager.c: 117:     RXPPS = 0x0D;
 10445  0E1C  300D               	movlw	13
 10446  0E1D  00A4               	movwf	36	;volatile
 10447                           
 10448                           ;mcc_generated_files/pin_manager.c: 118:     RB7PPS = 0x14;
 10449  0E1E  3014               	movlw	20
 10450  0E1F  003D               	movlb	29	; select bank29
 10451  0E20  009F               	movwf	31	;volatile
 10452  0E21                     l111:
 10453  0E21  0008               	return
 10454  0E22                     __end_of_PIN_MANAGER_Initialize:
 10455                           
 10456                           	psect	text40
 10457  0B0D                     __ptext40:	
 10458 ;; *************** function _OSCILLATOR_Initialize *****************
 10459 ;; Defined at:
 10460 ;;		line 66 in file "mcc_generated_files/mcc.c"
 10461 ;; Parameters:    Size  Location     Type
 10462 ;;		None
 10463 ;; Auto vars:     Size  Location     Type
 10464 ;;		None
 10465 ;; Return value:  Size  Location     Type
 10466 ;;                  1    wreg      void 
 10467 ;; Registers used:
 10468 ;;		wreg, status,2
 10469 ;; Tracked objects:
 10470 ;;		On entry : 0/0
 10471 ;;		On exit  : 0/0
 10472 ;;		Unchanged: 0/0
 10473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10474 ;;      Params:         0       0       0       0       0       0       0       0
 10475 ;;      Locals:         0       0       0       0       0       0       0       0
 10476 ;;      Temps:          0       0       0       0       0       0       0       0
 10477 ;;      Totals:         0       0       0       0       0       0       0       0
 10478 ;;Total ram usage:        0 bytes
 10479 ;; Hardware stack levels used: 1
 10480 ;; Hardware stack levels required when called: 4
 10481 ;; This function calls:
 10482 ;;		Nothing
 10483 ;; This function is called by:
 10484 ;;		_SYSTEM_Initialize
 10485 ;; This function uses a non-reentrant model
 10486 ;;
 10487                           
 10488                           
 10489                           ;psect for function _OSCILLATOR_Initialize
 10490  0B0D                     _OSCILLATOR_Initialize:
 10491  0B0D                     l2943:	
 10492                           ;incstack = 0
 10493                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10494                           
 10495                           
 10496                           ;mcc_generated_files/mcc.c: 69:     OSCCON = 0x6A;
 10497  0B0D  306A               	movlw	106
 10498  0B0E  0021               	movlb	1	; select bank1
 10499  0B0F  0099               	movwf	25	;volatile
 10500  0B10                     l2945:
 10501                           
 10502                           ;mcc_generated_files/mcc.c: 71:     OSCSTAT = 0x00;
 10503  0B10  019A               	clrf	26	;volatile
 10504  0B11                     l2947:
 10505                           
 10506                           ;mcc_generated_files/mcc.c: 73:     OSCTUNE = 0x00;
 10507  0B11  0198               	clrf	24	;volatile
 10508  0B12                     l2949:
 10509                           
 10510                           ;mcc_generated_files/mcc.c: 75:     BORCON = 0x00;
 10511  0B12  0022               	movlb	2	; select bank2
 10512  0B13  0196               	clrf	22	;volatile
 10513  0B14                     l53:
 10514  0B14  0008               	return
 10515  0B15                     __end_of_OSCILLATOR_Initialize:
 10516                           
 10517                           	psect	text41
 10518  0AB8                     __ptext41:	
 10519 ;; *************** function _OPA2_Initialize *****************
 10520 ;; Defined at:
 10521 ;;		line 58 in file "mcc_generated_files/opa2.c"
 10522 ;; Parameters:    Size  Location     Type
 10523 ;;		None
 10524 ;; Auto vars:     Size  Location     Type
 10525 ;;		None
 10526 ;; Return value:  Size  Location     Type
 10527 ;;                  1    wreg      void 
 10528 ;; Registers used:
 10529 ;;		wreg
 10530 ;; Tracked objects:
 10531 ;;		On entry : 0/0
 10532 ;;		On exit  : 0/0
 10533 ;;		Unchanged: 0/0
 10534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10535 ;;      Params:         0       0       0       0       0       0       0       0
 10536 ;;      Locals:         0       0       0       0       0       0       0       0
 10537 ;;      Temps:          0       0       0       0       0       0       0       0
 10538 ;;      Totals:         0       0       0       0       0       0       0       0
 10539 ;;Total ram usage:        0 bytes
 10540 ;; Hardware stack levels used: 1
 10541 ;; Hardware stack levels required when called: 4
 10542 ;; This function calls:
 10543 ;;		Nothing
 10544 ;; This function is called by:
 10545 ;;		_SYSTEM_Initialize
 10546 ;;		_main
 10547 ;; This function uses a non-reentrant model
 10548 ;;
 10549                           
 10550                           
 10551                           ;psect for function _OPA2_Initialize
 10552  0AB8                     _OPA2_Initialize:
 10553  0AB8                     l2967:	
 10554                           ;incstack = 0
 10555                           ; Regs used in _OPA2_Initialize: [wreg]
 10556                           
 10557                           
 10558                           ;mcc_generated_files/opa2.c: 61:     OPA2CON = 0xC2;
 10559  0AB8  30C2               	movlw	194
 10560  0AB9  002A               	movlb	10	; select bank10
 10561  0ABA  0095               	movwf	21	;volatile
 10562  0ABB                     l329:
 10563  0ABB  0008               	return
 10564  0ABC                     __end_of_OPA2_Initialize:
 10565                           
 10566                           	psect	text42
 10567  0AB4                     __ptext42:	
 10568 ;; *************** function _OPA1_Initialize *****************
 10569 ;; Defined at:
 10570 ;;		line 58 in file "mcc_generated_files/opa1.c"
 10571 ;; Parameters:    Size  Location     Type
 10572 ;;		None
 10573 ;; Auto vars:     Size  Location     Type
 10574 ;;		None
 10575 ;; Return value:  Size  Location     Type
 10576 ;;                  1    wreg      void 
 10577 ;; Registers used:
 10578 ;;		wreg
 10579 ;; Tracked objects:
 10580 ;;		On entry : 0/0
 10581 ;;		On exit  : 0/0
 10582 ;;		Unchanged: 0/0
 10583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10584 ;;      Params:         0       0       0       0       0       0       0       0
 10585 ;;      Locals:         0       0       0       0       0       0       0       0
 10586 ;;      Temps:          0       0       0       0       0       0       0       0
 10587 ;;      Totals:         0       0       0       0       0       0       0       0
 10588 ;;Total ram usage:        0 bytes
 10589 ;; Hardware stack levels used: 1
 10590 ;; Hardware stack levels required when called: 4
 10591 ;; This function calls:
 10592 ;;		Nothing
 10593 ;; This function is called by:
 10594 ;;		_SYSTEM_Initialize
 10595 ;;		_main
 10596 ;; This function uses a non-reentrant model
 10597 ;;
 10598                           
 10599                           
 10600                           ;psect for function _OPA1_Initialize
 10601  0AB4                     _OPA1_Initialize:
 10602  0AB4                     l2953:	
 10603                           ;incstack = 0
 10604                           ; Regs used in _OPA1_Initialize: [wreg]
 10605                           
 10606                           
 10607                           ;mcc_generated_files/opa1.c: 61:     OPA1CON = 0xC2;
 10608  0AB4  30C2               	movlw	194
 10609  0AB5  002A               	movlb	10	; select bank10
 10610  0AB6  0091               	movwf	17	;volatile
 10611  0AB7                     l119:
 10612  0AB7  0008               	return
 10613  0AB8                     __end_of_OPA1_Initialize:
 10614                           
 10615                           	psect	text43
 10616  0B27                     __ptext43:	
 10617 ;; *************** function _EXT_INT_Initialize *****************
 10618 ;; Defined at:
 10619 ;;		line 138 in file "mcc_generated_files/ext_int.c"
 10620 ;; Parameters:    Size  Location     Type
 10621 ;;		None
 10622 ;; Auto vars:     Size  Location     Type
 10623 ;;		None
 10624 ;; Return value:  Size  Location     Type
 10625 ;;                  1    wreg      void 
 10626 ;; Registers used:
 10627 ;;		wreg, status,2, status,0, pclath, cstack
 10628 ;; Tracked objects:
 10629 ;;		On entry : 0/0
 10630 ;;		On exit  : 0/0
 10631 ;;		Unchanged: 0/0
 10632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10633 ;;      Params:         0       0       0       0       0       0       0       0
 10634 ;;      Locals:         0       0       0       0       0       0       0       0
 10635 ;;      Temps:          0       0       0       0       0       0       0       0
 10636 ;;      Totals:         0       0       0       0       0       0       0       0
 10637 ;;Total ram usage:        0 bytes
 10638 ;; Hardware stack levels used: 1
 10639 ;; Hardware stack levels required when called: 5
 10640 ;; This function calls:
 10641 ;;		_INT_SetInterruptHandler
 10642 ;; This function is called by:
 10643 ;;		_SYSTEM_Initialize
 10644 ;; This function uses a non-reentrant model
 10645 ;;
 10646                           
 10647                           
 10648                           ;psect for function _EXT_INT_Initialize
 10649  0B27                     _EXT_INT_Initialize:
 10650  0B27                     l2989:	
 10651                           ;incstack = 0
 10652                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10653                           
 10654                           
 10655                           ;mcc_generated_files/ext_int.c: 143:     (INTCONbits.INTF = 0);
 10656  0B27  108B               	bcf	11,1	;volatile
 10657                           
 10658                           ;mcc_generated_files/ext_int.c: 144:     (OPTION_REGbits.INTEDG = 0);
 10659  0B28  0021               	movlb	1	; select bank1
 10660  0B29  1315               	bcf	21,6	;volatile
 10661  0B2A                     l2991:
 10662                           
 10663                           ;mcc_generated_files/ext_int.c: 146:     INT_SetInterruptHandler(INT_DefaultInterruptHan
      +                          dler);
 10664  0B2A  3072               	movlw	low _INT_DefaultInterruptHandler
 10665  0B2B  00F3               	movwf	INT_SetInterruptHandler@InterruptHandler
 10666  0B2C  3006               	movlw	high _INT_DefaultInterruptHandler
 10667  0B2D  00F4               	movwf	INT_SetInterruptHandler@InterruptHandler+1
 10668  0B2E  318A  22E3  318B   	fcall	_INT_SetInterruptHandler
 10669  0B31                     l2993:
 10670                           
 10671                           ;mcc_generated_files/ext_int.c: 147:     (INTCONbits.INTE = 1);
 10672  0B31  160B               	bsf	11,4	;volatile
 10673  0B32                     l292:
 10674  0B32  0008               	return
 10675  0B33                     __end_of_EXT_INT_Initialize:
 10676                           
 10677                           	psect	text44
 10678  0AE3                     __ptext44:	
 10679 ;; *************** function _INT_SetInterruptHandler *****************
 10680 ;; Defined at:
 10681 ;;		line 71 in file "mcc_generated_files/ext_int.c"
 10682 ;; Parameters:    Size  Location     Type
 10683 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
 10684 ;;		 -> INT_DefaultInterruptHandler(1), 
 10685 ;; Auto vars:     Size  Location     Type
 10686 ;;		None
 10687 ;; Return value:  Size  Location     Type
 10688 ;;                  1    wreg      void 
 10689 ;; Registers used:
 10690 ;;		wreg
 10691 ;; Tracked objects:
 10692 ;;		On entry : 0/0
 10693 ;;		On exit  : 0/0
 10694 ;;		Unchanged: 0/0
 10695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10696 ;;      Params:         2       0       0       0       0       0       0       0
 10697 ;;      Locals:         0       0       0       0       0       0       0       0
 10698 ;;      Temps:          0       0       0       0       0       0       0       0
 10699 ;;      Totals:         2       0       0       0       0       0       0       0
 10700 ;;Total ram usage:        2 bytes
 10701 ;; Hardware stack levels used: 1
 10702 ;; Hardware stack levels required when called: 4
 10703 ;; This function calls:
 10704 ;;		Nothing
 10705 ;; This function is called by:
 10706 ;;		_EXT_INT_Initialize
 10707 ;; This function uses a non-reentrant model
 10708 ;;
 10709                           
 10710                           
 10711                           ;psect for function _INT_SetInterruptHandler
 10712  0AE3                     _INT_SetInterruptHandler:
 10713  0AE3                     l2681:	
 10714                           ;incstack = 0
 10715                           ; Regs used in _INT_SetInterruptHandler: [wreg]
 10716                           
 10717                           
 10718                           ;mcc_generated_files/ext_int.c: 72:     INT_InterruptHandler = InterruptHandler;
 10719  0AE3  0874               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
 10720  0AE4  0021               	movlb	1	; select bank1
 10721  0AE5  00DC               	movwf	(_INT_InterruptHandler+1)^(0+128)
 10722  0AE6  0873               	movf	INT_SetInterruptHandler@InterruptHandler,w
 10723  0AE7  00DB               	movwf	_INT_InterruptHandler^(0+128)
 10724  0AE8                     l271:
 10725  0AE8  0008               	return
 10726  0AE9                     __end_of_INT_SetInterruptHandler:
 10727                           
 10728                           	psect	text45
 10729  0C63                     __ptext45:	
 10730 ;; *************** function _EUSART_Initialize *****************
 10731 ;; Defined at:
 10732 ;;		line 66 in file "mcc_generated_files/eusart.c"
 10733 ;; Parameters:    Size  Location     Type
 10734 ;;		None
 10735 ;; Auto vars:     Size  Location     Type
 10736 ;;		None
 10737 ;; Return value:  Size  Location     Type
 10738 ;;                  1    wreg      void 
 10739 ;; Registers used:
 10740 ;;		wreg, status,2, status,0, pclath, cstack
 10741 ;; Tracked objects:
 10742 ;;		On entry : 0/0
 10743 ;;		On exit  : 0/0
 10744 ;;		Unchanged: 0/0
 10745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10746 ;;      Params:         0       0       0       0       0       0       0       0
 10747 ;;      Locals:         0       0       0       0       0       0       0       0
 10748 ;;      Temps:          0       0       0       0       0       0       0       0
 10749 ;;      Totals:         0       0       0       0       0       0       0       0
 10750 ;;Total ram usage:        0 bytes
 10751 ;; Hardware stack levels used: 1
 10752 ;; Hardware stack levels required when called: 5
 10753 ;; This function calls:
 10754 ;;		_EUSART_SetErrorHandler
 10755 ;;		_EUSART_SetFramingErrorHandler
 10756 ;;		_EUSART_SetOverrunErrorHandler
 10757 ;; This function is called by:
 10758 ;;		_SYSTEM_Initialize
 10759 ;; This function uses a non-reentrant model
 10760 ;;
 10761                           
 10762                           
 10763                           ;psect for function _EUSART_Initialize
 10764  0C63                     _EUSART_Initialize:
 10765  0C63                     l3007:	
 10766                           ;incstack = 0
 10767                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10768                           
 10769                           
 10770                           ;mcc_generated_files/eusart.c: 71:     BAUD1CON = 0x08;
 10771  0C63  3008               	movlw	8
 10772  0C64  0023               	movlb	3	; select bank3
 10773  0C65  009F               	movwf	31	;volatile
 10774                           
 10775                           ;mcc_generated_files/eusart.c: 74:     RC1STA = 0x90;
 10776  0C66  3090               	movlw	144
 10777  0C67  009D               	movwf	29	;volatile
 10778                           
 10779                           ;mcc_generated_files/eusart.c: 77:     TX1STA = 0x24;
 10780  0C68  3024               	movlw	36
 10781  0C69  009E               	movwf	30	;volatile
 10782                           
 10783                           ;mcc_generated_files/eusart.c: 80:     SP1BRGL = 0x08;
 10784  0C6A  3008               	movlw	8
 10785  0C6B  009B               	movwf	27	;volatile
 10786  0C6C                     l3009:
 10787                           
 10788                           ;mcc_generated_files/eusart.c: 83:     SP1BRGH = 0x00;
 10789  0C6C  019C               	clrf	28	;volatile
 10790  0C6D                     l3011:
 10791                           
 10792                           ;mcc_generated_files/eusart.c: 86:     EUSART_SetFramingErrorHandler(EUSART_DefaultFrami
      +                          ngErrorHandler);
 10793  0C6D  3000               	movlw	0
 10794  0C6E  00F3               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
 10795  0C6F  3000               	movlw	0
 10796  0C70  00F4               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
 10797  0C71  318A  22D7  318C   	fcall	_EUSART_SetFramingErrorHandler
 10798  0C74                     l3013:
 10799                           
 10800                           ;mcc_generated_files/eusart.c: 87:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOverr
      +                          unErrorHandler);
 10801  0C74  3000               	movlw	0
 10802  0C75  00F3               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
 10803  0C76  3000               	movlw	0
 10804  0C77  00F4               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
 10805  0C78  318A  22DD  318C   	fcall	_EUSART_SetOverrunErrorHandler
 10806  0C7B                     l3015:
 10807                           
 10808                           ;mcc_generated_files/eusart.c: 88:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandler
      +                          );
 10809  0C7B  3000               	movlw	0
 10810  0C7C  00F3               	movwf	EUSART_SetErrorHandler@interruptHandler
 10811  0C7D  3000               	movlw	0
 10812  0C7E  00F4               	movwf	EUSART_SetErrorHandler@interruptHandler+1
 10813  0C7F  318A  22D1  318C   	fcall	_EUSART_SetErrorHandler
 10814  0C82                     l3017:
 10815                           
 10816                           ;mcc_generated_files/eusart.c: 90:     eusartRxLastError.status = 0;
 10817  0C82  0021               	movlb	1	; select bank1
 10818  0C83  01B3               	clrf	_eusartRxLastError^(0+128)	;volatile
 10819  0C84                     l198:
 10820  0C84  0008               	return
 10821  0C85                     __end_of_EUSART_Initialize:
 10822                           
 10823                           	psect	text46
 10824  0ADD                     __ptext46:	
 10825 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
 10826 ;; Defined at:
 10827 ;;		line 170 in file "mcc_generated_files/eusart.c"
 10828 ;; Parameters:    Size  Location     Type
 10829 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
 10830 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
 10831 ;; Auto vars:     Size  Location     Type
 10832 ;;		None
 10833 ;; Return value:  Size  Location     Type
 10834 ;;                  1    wreg      void 
 10835 ;; Registers used:
 10836 ;;		wreg
 10837 ;; Tracked objects:
 10838 ;;		On entry : 0/0
 10839 ;;		On exit  : 0/0
 10840 ;;		Unchanged: 0/0
 10841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10842 ;;      Params:         2       0       0       0       0       0       0       0
 10843 ;;      Locals:         0       0       0       0       0       0       0       0
 10844 ;;      Temps:          0       0       0       0       0       0       0       0
 10845 ;;      Totals:         2       0       0       0       0       0       0       0
 10846 ;;Total ram usage:        2 bytes
 10847 ;; Hardware stack levels used: 1
 10848 ;; Hardware stack levels required when called: 4
 10849 ;; This function calls:
 10850 ;;		Nothing
 10851 ;; This function is called by:
 10852 ;;		_EUSART_Initialize
 10853 ;; This function uses a non-reentrant model
 10854 ;;
 10855                           
 10856                           
 10857                           ;psect for function _EUSART_SetOverrunErrorHandler
 10858  0ADD                     _EUSART_SetOverrunErrorHandler:
 10859  0ADD                     l2677:	
 10860                           ;incstack = 0
 10861                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
 10862                           
 10863                           
 10864                           ;mcc_generated_files/eusart.c: 171:     EUSART_OverrunErrorHandler = interruptHandler;
 10865  0ADD  0874               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
 10866  0ADE  0021               	movlb	1	; select bank1
 10867  0ADF  00E0               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
 10868  0AE0  0873               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
 10869  0AE1  00DF               	movwf	_EUSART_OverrunErrorHandler^(0+128)
 10870  0AE2                     l246:
 10871  0AE2  0008               	return
 10872  0AE3                     __end_of_EUSART_SetOverrunErrorHandler:
 10873                           
 10874                           	psect	text47
 10875  0AD7                     __ptext47:	
 10876 ;; *************** function _EUSART_SetFramingErrorHandler *****************
 10877 ;; Defined at:
 10878 ;;		line 166 in file "mcc_generated_files/eusart.c"
 10879 ;; Parameters:    Size  Location     Type
 10880 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
 10881 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
 10882 ;; Auto vars:     Size  Location     Type
 10883 ;;		None
 10884 ;; Return value:  Size  Location     Type
 10885 ;;                  1    wreg      void 
 10886 ;; Registers used:
 10887 ;;		wreg
 10888 ;; Tracked objects:
 10889 ;;		On entry : 0/0
 10890 ;;		On exit  : 0/0
 10891 ;;		Unchanged: 0/0
 10892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10893 ;;      Params:         2       0       0       0       0       0       0       0
 10894 ;;      Locals:         0       0       0       0       0       0       0       0
 10895 ;;      Temps:          0       0       0       0       0       0       0       0
 10896 ;;      Totals:         2       0       0       0       0       0       0       0
 10897 ;;Total ram usage:        2 bytes
 10898 ;; Hardware stack levels used: 1
 10899 ;; Hardware stack levels required when called: 4
 10900 ;; This function calls:
 10901 ;;		Nothing
 10902 ;; This function is called by:
 10903 ;;		_EUSART_Initialize
 10904 ;; This function uses a non-reentrant model
 10905 ;;
 10906                           
 10907                           
 10908                           ;psect for function _EUSART_SetFramingErrorHandler
 10909  0AD7                     _EUSART_SetFramingErrorHandler:
 10910  0AD7                     l2675:	
 10911                           ;incstack = 0
 10912                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
 10913                           
 10914                           
 10915                           ;mcc_generated_files/eusart.c: 167:     EUSART_FramingErrorHandler = interruptHandler;
 10916  0AD7  0874               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
 10917  0AD8  0021               	movlb	1	; select bank1
 10918  0AD9  00E2               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
 10919  0ADA  0873               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
 10920  0ADB  00E1               	movwf	_EUSART_FramingErrorHandler^(0+128)
 10921  0ADC                     l243:
 10922  0ADC  0008               	return
 10923  0ADD                     __end_of_EUSART_SetFramingErrorHandler:
 10924                           
 10925                           	psect	text48
 10926  0AD1                     __ptext48:	
 10927 ;; *************** function _EUSART_SetErrorHandler *****************
 10928 ;; Defined at:
 10929 ;;		line 174 in file "mcc_generated_files/eusart.c"
 10930 ;; Parameters:    Size  Location     Type
 10931 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
 10932 ;;		 -> EUSART_DefaultErrorHandler(1), 
 10933 ;; Auto vars:     Size  Location     Type
 10934 ;;		None
 10935 ;; Return value:  Size  Location     Type
 10936 ;;                  1    wreg      void 
 10937 ;; Registers used:
 10938 ;;		wreg
 10939 ;; Tracked objects:
 10940 ;;		On entry : 0/0
 10941 ;;		On exit  : 0/0
 10942 ;;		Unchanged: 0/0
 10943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10944 ;;      Params:         2       0       0       0       0       0       0       0
 10945 ;;      Locals:         0       0       0       0       0       0       0       0
 10946 ;;      Temps:          0       0       0       0       0       0       0       0
 10947 ;;      Totals:         2       0       0       0       0       0       0       0
 10948 ;;Total ram usage:        2 bytes
 10949 ;; Hardware stack levels used: 1
 10950 ;; Hardware stack levels required when called: 4
 10951 ;; This function calls:
 10952 ;;		Nothing
 10953 ;; This function is called by:
 10954 ;;		_EUSART_Initialize
 10955 ;; This function uses a non-reentrant model
 10956 ;;
 10957                           
 10958                           
 10959                           ;psect for function _EUSART_SetErrorHandler
 10960  0AD1                     _EUSART_SetErrorHandler:
 10961  0AD1                     l2679:	
 10962                           ;incstack = 0
 10963                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
 10964                           
 10965                           
 10966                           ;mcc_generated_files/eusart.c: 175:     EUSART_ErrorHandler = interruptHandler;
 10967  0AD1  0874               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
 10968  0AD2  0021               	movlb	1	; select bank1
 10969  0AD3  00DE               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
 10970  0AD4  0873               	movf	EUSART_SetErrorHandler@interruptHandler,w
 10971  0AD5  00DD               	movwf	_EUSART_ErrorHandler^(0+128)
 10972  0AD6                     l249:
 10973  0AD6  0008               	return
 10974  0AD7                     __end_of_EUSART_SetErrorHandler:
 10975                           
 10976                           	psect	text49
 10977  0ACB                     __ptext49:	
 10978 ;; *************** function _DAC_Initialize *****************
 10979 ;; Defined at:
 10980 ;;		line 58 in file "mcc_generated_files/dac.c"
 10981 ;; Parameters:    Size  Location     Type
 10982 ;;		None
 10983 ;; Auto vars:     Size  Location     Type
 10984 ;;		None
 10985 ;; Return value:  Size  Location     Type
 10986 ;;                  1    wreg      void 
 10987 ;; Registers used:
 10988 ;;		wreg
 10989 ;; Tracked objects:
 10990 ;;		On entry : 0/0
 10991 ;;		On exit  : 0/0
 10992 ;;		Unchanged: 0/0
 10993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10994 ;;      Params:         0       0       0       0       0       0       0       0
 10995 ;;      Locals:         0       0       0       0       0       0       0       0
 10996 ;;      Temps:          0       0       0       0       0       0       0       0
 10997 ;;      Totals:         0       0       0       0       0       0       0       0
 10998 ;;Total ram usage:        0 bytes
 10999 ;; Hardware stack levels used: 1
 11000 ;; Hardware stack levels required when called: 4
 11001 ;; This function calls:
 11002 ;;		Nothing
 11003 ;; This function is called by:
 11004 ;;		_SYSTEM_Initialize
 11005 ;;		_main
 11006 ;; This function uses a non-reentrant model
 11007 ;;
 11008                           
 11009                           
 11010                           ;psect for function _DAC_Initialize
 11011  0ACB                     _DAC_Initialize:
 11012  0ACB                     l2911:	
 11013                           ;incstack = 0
 11014                           ; Regs used in _DAC_Initialize: [wreg]
 11015                           
 11016                           
 11017                           ;mcc_generated_files/dac.c: 61:     DAC1CON0 = 0x80;
 11018  0ACB  3080               	movlw	128
 11019  0ACC  0022               	movlb	2	; select bank2
 11020  0ACD  0098               	movwf	24	;volatile
 11021                           
 11022                           ;mcc_generated_files/dac.c: 63:     DAC1CON1 = 0xFF;
 11023  0ACE  30FF               	movlw	255
 11024  0ACF  0099               	movwf	25	;volatile
 11025  0AD0                     l7:
 11026  0AD0  0008               	return
 11027  0AD1                     __end_of_DAC_Initialize:
 11028                           
 11029                           	psect	text50
 11030  0002                     __ptext50:	
 11031 ;; *************** function _LATCH_Initialize *****************
 11032 ;; Defined at:
 11033 ;;		line 581 in file "main.c"
 11034 ;; Parameters:    Size  Location     Type
 11035 ;;		None
 11036 ;; Auto vars:     Size  Location     Type
 11037 ;;		None
 11038 ;; Return value:  Size  Location     Type
 11039 ;;                  1    wreg      void 
 11040 ;; Registers used:
 11041 ;;		None
 11042 ;; Tracked objects:
 11043 ;;		On entry : 0/0
 11044 ;;		On exit  : 0/0
 11045 ;;		Unchanged: 0/0
 11046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11047 ;;      Params:         0       0       0       0       0       0       0       0
 11048 ;;      Locals:         0       0       0       0       0       0       0       0
 11049 ;;      Temps:          0       0       0       0       0       0       0       0
 11050 ;;      Totals:         0       0       0       0       0       0       0       0
 11051 ;;Total ram usage:        0 bytes
 11052 ;; Hardware stack levels used: 1
 11053 ;; Hardware stack levels required when called: 4
 11054 ;; This function calls:
 11055 ;;		Nothing
 11056 ;; This function is called by:
 11057 ;;		_main
 11058 ;; This function uses a non-reentrant model
 11059 ;;
 11060                           
 11061                           
 11062                           ;psect for function _LATCH_Initialize
 11063  0002                     _LATCH_Initialize:
 11064  0002                     l745:	
 11065                           ;incstack = 0
 11066                           ; Regs used in _LATCH_Initialize: []
 11067                           
 11068  0002  0008               	return
 11069  0003                     __end_of_LATCH_Initialize:
 11070                           
 11071                           	psect	intentry
 11072  0004                     __pintentry:	
 11073 ;; *************** function _INTERRUPT_InterruptManager *****************
 11074 ;; Defined at:
 11075 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 11076 ;; Parameters:    Size  Location     Type
 11077 ;;		None
 11078 ;; Auto vars:     Size  Location     Type
 11079 ;;		None
 11080 ;; Return value:  Size  Location     Type
 11081 ;;                  1    wreg      void 
 11082 ;; Registers used:
 11083 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11084 ;; Tracked objects:
 11085 ;;		On entry : 0/0
 11086 ;;		On exit  : 0/0
 11087 ;;		Unchanged: 0/0
 11088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11089 ;;      Params:         0       0       0       0       0       0       0       0
 11090 ;;      Locals:         0       0       0       0       0       0       0       0
 11091 ;;      Temps:          0       0       0       0       0       0       0       0
 11092 ;;      Totals:         0       0       0       0       0       0       0       0
 11093 ;;Total ram usage:        0 bytes
 11094 ;; Hardware stack levels used: 1
 11095 ;; Hardware stack levels required when called: 3
 11096 ;; This function calls:
 11097 ;;		_INT_ISR
 11098 ;;		_PIN_MANAGER_IOC
 11099 ;;		_TMR0_ISR
 11100 ;;		_TMR1_ISR
 11101 ;;		_TMR4_ISR
 11102 ;; This function is called by:
 11103 ;;		Interrupt level 1
 11104 ;; This function uses a non-reentrant model
 11105 ;;
 11106                           
 11107  0004                     _INTERRUPT_InterruptManager:
 11108                           
 11109                           ;incstack = 0
 11110  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
 11111                           
 11112                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11113  0005  3180               	pagesel	$
 11114  0006                     i1l3557:
 11115                           
 11116                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 11117  0006  1E8B               	btfss	11,5	;volatile
 11118  0007  2809               	goto	u214_21
 11119  0008  280A               	goto	u214_20
 11120  0009                     u214_21:
 11121  0009  2812               	goto	i1l144
 11122  000A                     u214_20:
 11123  000A                     i1l3559:
 11124  000A  1D0B               	btfss	11,2	;volatile
 11125  000B  280D               	goto	u215_21
 11126  000C  280E               	goto	u215_20
 11127  000D                     u215_21:
 11128  000D  2812               	goto	i1l144
 11129  000E                     u215_20:
 11130  000E                     i1l3561:
 11131                           
 11132                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
 11133  000E  318B  234F  3180   	fcall	_TMR0_ISR
 11134                           
 11135                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 11136  0011  2849               	goto	i1l155
 11137  0012                     i1l144:	
 11138                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.INTE == 1 && INTCON
      +                          bits.INTF == 1)
 11139                           
 11140  0012  1E0B               	btfss	11,4	;volatile
 11141  0013  2815               	goto	u216_21
 11142  0014  2816               	goto	u216_20
 11143  0015                     u216_21:
 11144  0015  281E               	goto	i1l146
 11145  0016                     u216_20:
 11146  0016                     i1l3563:
 11147  0016  1C8B               	btfss	11,1	;volatile
 11148  0017  2819               	goto	u217_21
 11149  0018  281A               	goto	u217_20
 11150  0019                     u217_21:
 11151  0019  281E               	goto	i1l146
 11152  001A                     u217_20:
 11153  001A                     i1l3565:
 11154                           
 11155                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         INT_ISR();
 11156  001A  318A  22BC  3180   	fcall	_INT_ISR
 11157                           
 11158                           ;mcc_generated_files/interrupt_manager.c: 62:     }
 11159  001D  2849               	goto	i1l155
 11160  001E                     i1l146:	
 11161                           ;mcc_generated_files/interrupt_manager.c: 63:     else if(INTCONbits.IOCIE == 1 && INTCO
      +                          Nbits.IOCIF == 1)
 11162                           
 11163  001E  1D8B               	btfss	11,3	;volatile
 11164  001F  2821               	goto	u218_21
 11165  0020  2822               	goto	u218_20
 11166  0021                     u218_21:
 11167  0021  282A               	goto	i1l148
 11168  0022                     u218_20:
 11169  0022                     i1l3567:
 11170  0022  1C0B               	btfss	11,0	;volatile
 11171  0023  2825               	goto	u219_21
 11172  0024  2826               	goto	u219_20
 11173  0025                     u219_21:
 11174  0025  282A               	goto	i1l148
 11175  0026                     u219_20:
 11176  0026                     i1l3569:
 11177                           
 11178                           ;mcc_generated_files/interrupt_manager.c: 64:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 65:         PIN_MANAGER_IOC();
 11179  0026  318A  22AF  3180   	fcall	_PIN_MANAGER_IOC
 11180                           
 11181                           ;mcc_generated_files/interrupt_manager.c: 66:     }
 11182  0029  2849               	goto	i1l155
 11183  002A                     i1l148:	
 11184                           ;mcc_generated_files/interrupt_manager.c: 67:     else if(INTCONbits.PEIE == 1)
 11185                           
 11186  002A  1F0B               	btfss	11,6	;volatile
 11187  002B  282D               	goto	u220_21
 11188  002C  282E               	goto	u220_20
 11189  002D                     u220_21:
 11190  002D  2849               	goto	i1l147
 11191  002E                     u220_20:
 11192  002E                     i1l3571:
 11193                           
 11194                           ;mcc_generated_files/interrupt_manager.c: 68:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 69:         if(PIE2bits.TMR4IE == 1 && PIR2bits.TMR4IF == 1)
 11195  002E  0021               	movlb	1	; select bank1
 11196  002F  1C92               	btfss	18,1	;volatile
 11197  0030  2832               	goto	u221_21
 11198  0031  2833               	goto	u221_20
 11199  0032                     u221_21:
 11200  0032  283B               	goto	i1l152
 11201  0033                     u221_20:
 11202  0033                     i1l3573:
 11203  0033  0020               	movlb	0	; select bank0
 11204  0034  1C92               	btfss	18,1	;volatile
 11205  0035  2837               	goto	u222_21
 11206  0036  2838               	goto	u222_20
 11207  0037                     u222_21:
 11208  0037  283B               	goto	i1l152
 11209  0038                     u222_20:
 11210  0038                     i1l3575:
 11211                           
 11212                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             TMR4_ISR();
 11213  0038  318B  2340  3180   	fcall	_TMR4_ISR
 11214  003B                     i1l152:	
 11215                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 76:         }
 11216                           
 11217                           
 11218                           ;mcc_generated_files/interrupt_manager.c: 77:         if(PIE1bits.TMR1IE == 1 && PIR1bit
      +                          s.TMR1IF == 1) {
 11219  003B  0021               	movlb	1	; select bank1
 11220  003C  1C11               	btfss	17,0	;volatile
 11221  003D  283F               	goto	u223_21
 11222  003E  2840               	goto	u223_20
 11223  003F                     u223_21:
 11224  003F  2849               	goto	i1l147
 11225  0040                     u223_20:
 11226  0040                     i1l3577:
 11227  0040  0020               	movlb	0	; select bank0
 11228  0041  1C11               	btfss	17,0	;volatile
 11229  0042  2844               	goto	u224_21
 11230  0043  2845               	goto	u224_20
 11231  0044                     u224_21:
 11232  0044  2849               	goto	i1l147
 11233  0045                     u224_20:
 11234  0045                     i1l3579:
 11235                           
 11236                           ;mcc_generated_files/interrupt_manager.c: 78:             TMR1_ISR();
 11237  0045  318B  23AB  3180   	fcall	_TMR1_ISR
 11238  0048  2849               	goto	i1l155
 11239  0049                     i1l147:
 11240  0049                     i1l155:
 11241  0049  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 11242  004A  0009               	retfie
 11243  004B                     __end_of_INTERRUPT_InterruptManager:
 11244                           
 11245                           	psect	text52
 11246  0B40                     __ptext52:	
 11247 ;; *************** function _TMR4_ISR *****************
 11248 ;; Defined at:
 11249 ;;		line 120 in file "mcc_generated_files/tmr4.c"
 11250 ;; Parameters:    Size  Location     Type
 11251 ;;		None
 11252 ;; Auto vars:     Size  Location     Type
 11253 ;;		None
 11254 ;; Return value:  Size  Location     Type
 11255 ;;                  1    wreg      void 
 11256 ;; Registers used:
 11257 ;;		wreg, status,2, status,0, pclath, cstack
 11258 ;; Tracked objects:
 11259 ;;		On entry : 0/0
 11260 ;;		On exit  : 0/0
 11261 ;;		Unchanged: 0/0
 11262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11263 ;;      Params:         0       0       0       0       0       0       0       0
 11264 ;;      Locals:         0       0       0       0       0       0       0       0
 11265 ;;      Temps:          0       0       0       0       0       0       0       0
 11266 ;;      Totals:         0       0       0       0       0       0       0       0
 11267 ;;Total ram usage:        0 bytes
 11268 ;; Hardware stack levels used: 1
 11269 ;; Hardware stack levels required when called: 2
 11270 ;; This function calls:
 11271 ;;		Absolute function
 11272 ;;		_TMR4_DefaultInterruptHandler
 11273 ;; This function is called by:
 11274 ;;		_INTERRUPT_InterruptManager
 11275 ;; This function uses a non-reentrant model
 11276 ;;
 11277                           
 11278                           
 11279                           ;psect for function _TMR4_ISR
 11280  0B40                     _TMR4_ISR:
 11281  0B40                     i1l3227:	
 11282                           ;incstack = 0
 11283                           ; Regs used in _TMR4_ISR: [wreg+status,2+status,0+pclath+cstack]
 11284                           
 11285                           
 11286                           ;mcc_generated_files/tmr4.c: 124:     PIR2bits.TMR4IF = 0;
 11287  0B40  0020               	movlb	0	; select bank0
 11288  0B41  1092               	bcf	18,1	;volatile
 11289  0B42                     i1l3229:
 11290                           
 11291                           ;mcc_generated_files/tmr4.c: 126:     if(TMR4_InterruptHandler)
 11292  0B42  0021               	movlb	1	; select bank1
 11293  0B43  0857               	movf	_TMR4_InterruptHandler^(0+128),w
 11294  0B44  0458               	iorwf	(_TMR4_InterruptHandler+1)^(0+128),w
 11295  0B45  1903               	btfsc	3,2
 11296  0B46  2B48               	goto	u179_21
 11297  0B47  2B49               	goto	u179_20
 11298  0B48                     u179_21:
 11299  0B48  2B4E               	goto	i1l415
 11300  0B49                     u179_20:
 11301  0B49                     i1l3231:
 11302                           
 11303                           ;mcc_generated_files/tmr4.c: 127:     {;mcc_generated_files/tmr4.c: 128:         TMR4_In
      +                          terruptHandler();
 11304  0B49  0858               	movf	(_TMR4_InterruptHandler+1)^(0+128),w
 11305  0B4A  008A               	movwf	10
 11306  0B4B  0857               	movf	_TMR4_InterruptHandler^(0+128),w
 11307  0B4C  000A               	callw
 11308  0B4D  318B               	pagesel	$
 11309  0B4E                     i1l415:
 11310  0B4E  0008               	return
 11311  0B4F                     __end_of_TMR4_ISR:
 11312                           
 11313                           	psect	text53
 11314  0E89                     __ptext53:	
 11315 ;; *************** function _TMR4_DefaultInterruptHandler *****************
 11316 ;; Defined at:
 11317 ;;		line 147 in file "mcc_generated_files/tmr4.c"
 11318 ;; Parameters:    Size  Location     Type
 11319 ;;		None
 11320 ;; Auto vars:     Size  Location     Type
 11321 ;;		None
 11322 ;; Return value:  Size  Location     Type
 11323 ;;                  1    wreg      void 
 11324 ;; Registers used:
 11325 ;;		wreg, status,2, status,0, pclath, cstack
 11326 ;; Tracked objects:
 11327 ;;		On entry : 0/0
 11328 ;;		On exit  : 0/0
 11329 ;;		Unchanged: 0/0
 11330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11331 ;;      Params:         0       0       0       0       0       0       0       0
 11332 ;;      Locals:         0       0       0       0       0       0       0       0
 11333 ;;      Temps:          1       0       0       0       0       0       0       0
 11334 ;;      Totals:         1       0       0       0       0       0       0       0
 11335 ;;Total ram usage:        1 bytes
 11336 ;; Hardware stack levels used: 1
 11337 ;; Hardware stack levels required when called: 1
 11338 ;; This function calls:
 11339 ;;		_DAC_SetOutput
 11340 ;; This function is called by:
 11341 ;;		_TMR4_Initialize
 11342 ;;		_TMR4_ISR
 11343 ;; This function uses a non-reentrant model
 11344 ;;
 11345                           
 11346                           
 11347                           ;psect for function _TMR4_DefaultInterruptHandler
 11348  0E89                     _TMR4_DefaultInterruptHandler:
 11349  0E89                     i1l3023:	
 11350                           ;incstack = 0
 11351                           ; Regs used in _TMR4_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 11352                           
 11353                           
 11354                           ;mcc_generated_files/tmr4.c: 151:     if (dc_frequency_flag) {
 11355  0E89  087A               	movf	_dc_frequency_flag,w
 11356  0E8A  1903               	btfsc	3,2
 11357  0E8B  2E8D               	goto	u163_21
 11358  0E8C  2E8E               	goto	u163_20
 11359  0E8D                     u163_21:
 11360  0E8D  2E93               	goto	i1l3027
 11361  0E8E                     u163_20:
 11362  0E8E                     i1l3025:
 11363                           
 11364                           ;mcc_generated_files/tmr4.c: 152:         DAC_SetOutput(255);
 11365  0E8E  30FF               	movlw	255
 11366  0E8F  318A  22C1  318E   	fcall	_DAC_SetOutput
 11367                           
 11368                           ;mcc_generated_files/tmr4.c: 153:     }else{
 11369  0E92  2EC4               	goto	i1l434
 11370  0E93                     i1l3027:
 11371                           
 11372                           ;mcc_generated_files/tmr4.c: 155:   if (currentIsOn){
 11373  0E93  0021               	movlb	1	; select bank1
 11374  0E94  083E               	movf	_currentIsOn^(0+128),w
 11375  0E95  1903               	btfsc	3,2
 11376  0E96  2E98               	goto	u164_21
 11377  0E97  2E99               	goto	u164_20
 11378  0E98                     u164_21:
 11379  0E98  2E9F               	goto	i1l3033
 11380  0E99                     u164_20:
 11381  0E99                     i1l3029:
 11382                           
 11383                           ;mcc_generated_files/tmr4.c: 156:     currentIsOn = 0;
 11384  0E99  01BE               	clrf	_currentIsOn^(0+128)
 11385  0E9A                     i1l3031:
 11386                           
 11387                           ;mcc_generated_files/tmr4.c: 157:     DAC_SetOutput(255);
 11388  0E9A  30FF               	movlw	255
 11389  0E9B  318A  22C1  318E   	fcall	_DAC_SetOutput
 11390                           
 11391                           ;mcc_generated_files/tmr4.c: 161:   } else {
 11392  0E9E  2EBE               	goto	i1l3045
 11393  0E9F                     i1l3033:
 11394                           
 11395                           ;mcc_generated_files/tmr4.c: 162:        if (PR4 == 255) {
 11396  0E9F  0028               	movlb	8	; select bank8
 11397  0EA0  0A16               	incf	22,w	;volatile
 11398  0EA1  1D03               	btfss	3,2
 11399  0EA2  2EA4               	goto	u165_21
 11400  0EA3  2EA5               	goto	u165_20
 11401  0EA4                     u165_21:
 11402  0EA4  2EB7               	goto	i1l431
 11403  0EA5                     u165_20:
 11404  0EA5                     i1l3035:
 11405                           
 11406                           ;mcc_generated_files/tmr4.c: 163:             if (oneHzCounter == 81) {
 11407  0EA5  3051               	movlw	81
 11408  0EA6  0021               	movlb	1	; select bank1
 11409  0EA7  0631               	xorwf	_oneHzCounter^(0+128),w
 11410  0EA8  1D03               	btfss	3,2
 11411  0EA9  2EAB               	goto	u166_21
 11412  0EAA  2EAC               	goto	u166_20
 11413  0EAB                     u166_21:
 11414  0EAB  2EB2               	goto	i1l3041
 11415  0EAC                     u166_20:
 11416  0EAC                     i1l3037:
 11417                           
 11418                           ;mcc_generated_files/tmr4.c: 164:                 DAC_SetOutput(dac_value);
 11419  0EAC  0832               	movf	_dac_value^(0+128),w
 11420  0EAD  318A  22C1  318E   	fcall	_DAC_SetOutput
 11421  0EB0                     i1l3039:
 11422                           
 11423                           ;mcc_generated_files/tmr4.c: 165:                 oneHzCounter = 0;
 11424  0EB0  0021               	movlb	1	; select bank1
 11425  0EB1  01B1               	clrf	_oneHzCounter^(0+128)
 11426  0EB2                     i1l3041:
 11427                           
 11428                           ;mcc_generated_files/tmr4.c: 167:             oneHzCounter++;
 11429  0EB2  3001               	movlw	1
 11430  0EB3  00F1               	movwf	??_TMR4_DefaultInterruptHandler
 11431  0EB4  0871               	movf	??_TMR4_DefaultInterruptHandler,w
 11432  0EB5  07B1               	addwf	_oneHzCounter^(0+128),f
 11433                           
 11434                           ;mcc_generated_files/tmr4.c: 168:         } else {
 11435  0EB6  2EBE               	goto	i1l3045
 11436  0EB7                     i1l431:
 11437                           
 11438                           ;mcc_generated_files/tmr4.c: 169:     currentIsOn = 1;
 11439  0EB7  0021               	movlb	1	; select bank1
 11440  0EB8  01BE               	clrf	_currentIsOn^(0+128)
 11441  0EB9  0ABE               	incf	_currentIsOn^(0+128),f
 11442  0EBA                     i1l3043:
 11443                           
 11444                           ;mcc_generated_files/tmr4.c: 170:     DAC_SetOutput(dac_value);
 11445  0EBA  0832               	movf	_dac_value^(0+128),w
 11446  0EBB  318A  22C1  318E   	fcall	_DAC_SetOutput
 11447  0EBE                     i1l3045:
 11448                           
 11449                           ;mcc_generated_files/tmr4.c: 173:   TMR1 = 65528;
 11450  0EBE  30FF               	movlw	255
 11451  0EBF  0020               	movlb	0	; select bank0
 11452  0EC0  0097               	movwf	23	;volatile
 11453  0EC1  30F8               	movlw	248
 11454  0EC2  0096               	movwf	22	;volatile
 11455  0EC3                     i1l3047:
 11456                           
 11457                           ;mcc_generated_files/tmr4.c: 175:   T1CONbits.TMR1ON = 1;
 11458  0EC3  1418               	bsf	24,0	;volatile
 11459  0EC4                     i1l434:
 11460  0EC4  0008               	return
 11461  0EC5                     __end_of_TMR4_DefaultInterruptHandler:
 11462                           
 11463                           	psect	text54
 11464  0BAB                     __ptext54:	
 11465 ;; *************** function _TMR1_ISR *****************
 11466 ;; Defined at:
 11467 ;;		line 111 in file "tmr1.c"
 11468 ;; Parameters:    Size  Location     Type
 11469 ;;		None
 11470 ;; Auto vars:     Size  Location     Type
 11471 ;;		None
 11472 ;; Return value:  Size  Location     Type
 11473 ;;                  1    wreg      void 
 11474 ;; Registers used:
 11475 ;;		wreg, status,2, status,0, pclath, cstack
 11476 ;; Tracked objects:
 11477 ;;		On entry : 0/0
 11478 ;;		On exit  : 0/0
 11479 ;;		Unchanged: 0/0
 11480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11481 ;;      Params:         0       0       0       0       0       0       0       0
 11482 ;;      Locals:         0       0       0       0       0       0       0       0
 11483 ;;      Temps:          0       0       0       0       0       0       0       0
 11484 ;;      Totals:         0       0       0       0       0       0       0       0
 11485 ;;Total ram usage:        0 bytes
 11486 ;; Hardware stack levels used: 1
 11487 ;; Hardware stack levels required when called: 2
 11488 ;; This function calls:
 11489 ;;		Absolute function
 11490 ;;		_TMR1_DefaultInterruptHandler
 11491 ;; This function is called by:
 11492 ;;		_INTERRUPT_InterruptManager
 11493 ;; This function uses a non-reentrant model
 11494 ;;
 11495                           
 11496                           
 11497                           ;psect for function _TMR1_ISR
 11498  0BAB                     _TMR1_ISR:
 11499  0BAB                     i1l3233:	
 11500                           ;incstack = 0
 11501                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 11502                           
 11503                           
 11504                           ;tmr1.c: 115:     PIR1bits.TMR1IF = 0;
 11505  0BAB  0020               	movlb	0	; select bank0
 11506  0BAC  1011               	bcf	17,0	;volatile
 11507  0BAD                     i1l3235:
 11508                           
 11509                           ;tmr1.c: 117:     TMR1 = timer1ReloadVal;
 11510  0BAD  0021               	movlb	1	; select bank1
 11511  0BAE  0856               	movf	(_timer1ReloadVal+1)^(0+128),w	;volatile
 11512  0BAF  0020               	movlb	0	; select bank0
 11513  0BB0  0097               	movwf	23	;volatile
 11514  0BB1  0021               	movlb	1	; select bank1
 11515  0BB2  0855               	movf	_timer1ReloadVal^(0+128),w	;volatile
 11516  0BB3  0020               	movlb	0	; select bank0
 11517  0BB4  0096               	movwf	22	;volatile
 11518  0BB5                     i1l3237:
 11519                           
 11520                           ;tmr1.c: 119:     if(TMR1_InterruptHandler)
 11521  0BB5  0021               	movlb	1	; select bank1
 11522  0BB6  0853               	movf	_TMR1_InterruptHandler^(0+128),w
 11523  0BB7  0454               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
 11524  0BB8  1903               	btfsc	3,2
 11525  0BB9  2BBB               	goto	u180_21
 11526  0BBA  2BBC               	goto	u180_20
 11527  0BBB                     u180_21:
 11528  0BBB  2BC1               	goto	i1l508
 11529  0BBC                     u180_20:
 11530  0BBC                     i1l3239:
 11531                           
 11532                           ;tmr1.c: 120:     {;tmr1.c: 121:         TMR1_InterruptHandler();
 11533  0BBC  0854               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
 11534  0BBD  008A               	movwf	10
 11535  0BBE  0853               	movf	_TMR1_InterruptHandler^(0+128),w
 11536  0BBF  000A               	callw
 11537  0BC0  318B               	pagesel	$
 11538  0BC1                     i1l508:
 11539  0BC1  0008               	return
 11540  0BC2                     __end_of_TMR1_ISR:
 11541                           
 11542                           	psect	text55
 11543  0C26                     __ptext55:	
 11544 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 11545 ;; Defined at:
 11546 ;;		line 134 in file "tmr1.c"
 11547 ;; Parameters:    Size  Location     Type
 11548 ;;		None
 11549 ;; Auto vars:     Size  Location     Type
 11550 ;;		None
 11551 ;; Return value:  Size  Location     Type
 11552 ;;                  1    wreg      void 
 11553 ;; Registers used:
 11554 ;;		wreg, status,2, status,0, pclath, cstack
 11555 ;; Tracked objects:
 11556 ;;		On entry : 0/0
 11557 ;;		On exit  : 0/0
 11558 ;;		Unchanged: 0/0
 11559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11560 ;;      Params:         0       0       0       0       0       0       0       0
 11561 ;;      Locals:         0       0       0       0       0       0       0       0
 11562 ;;      Temps:          0       0       0       0       0       0       0       0
 11563 ;;      Totals:         0       0       0       0       0       0       0       0
 11564 ;;Total ram usage:        0 bytes
 11565 ;; Hardware stack levels used: 1
 11566 ;; Hardware stack levels required when called: 1
 11567 ;; This function calls:
 11568 ;;		_DAC_SetOutput
 11569 ;; This function is called by:
 11570 ;;		_TMR1_Initialize
 11571 ;;		_TMR1_ISR
 11572 ;; This function uses a non-reentrant model
 11573 ;;
 11574                           
 11575                           
 11576                           ;psect for function _TMR1_DefaultInterruptHandler
 11577  0C26                     _TMR1_DefaultInterruptHandler:
 11578  0C26                     i1l3049:	
 11579                           ;incstack = 0
 11580                           ; Regs used in _TMR1_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 11581                           
 11582                           
 11583                           ;tmr1.c: 135:     if (toggle==0) {
 11584  0C26  0021               	movlb	1	; select bank1
 11585  0C27  082F               	movf	_toggle^(0+128),w
 11586  0C28  1D03               	btfss	3,2
 11587  0C29  2C2B               	goto	u167_21
 11588  0C2A  2C2C               	goto	u167_20
 11589  0C2B                     u167_21:
 11590  0C2B  2C3C               	goto	i1l3061
 11591  0C2C                     u167_20:
 11592  0C2C                     i1l3051:
 11593                           
 11594                           ;tmr1.c: 136:         T1CONbits.TMR1ON = 0;
 11595  0C2C  0020               	movlb	0	; select bank0
 11596  0C2D  1018               	bcf	24,0	;volatile
 11597  0C2E                     i1l3053:
 11598                           
 11599                           ;tmr1.c: 137:         DAC_SetOutput(255);
 11600  0C2E  30FF               	movlw	255
 11601  0C2F  318A  22C1  318C   	fcall	_DAC_SetOutput
 11602  0C32                     i1l3055:
 11603                           
 11604                           ;tmr1.c: 138:         TMR1 = 65518;
 11605  0C32  30FF               	movlw	255
 11606  0C33  0020               	movlb	0	; select bank0
 11607  0C34  0097               	movwf	23	;volatile
 11608  0C35  30EE               	movlw	238
 11609  0C36  0096               	movwf	22	;volatile
 11610  0C37                     i1l3057:
 11611                           
 11612                           ;tmr1.c: 139:         T1CONbits.TMR1ON = 1;
 11613  0C37  1418               	bsf	24,0	;volatile
 11614  0C38                     i1l3059:
 11615                           
 11616                           ;tmr1.c: 140:         toggle = 1;
 11617  0C38  0021               	movlb	1	; select bank1
 11618  0C39  01AF               	clrf	_toggle^(0+128)
 11619  0C3A  0AAF               	incf	_toggle^(0+128),f
 11620                           
 11621                           ;tmr1.c: 145:     } else if (toggle==1) {
 11622  0C3B  2C42               	goto	i1l519
 11623  0C3C                     i1l3061:
 11624  0C3C  032F               	decf	_toggle^(0+128),w
 11625  0C3D  1D03               	btfss	3,2
 11626  0C3E  2C40               	goto	u168_21
 11627  0C3F  2C41               	goto	u168_20
 11628  0C40                     u168_21:
 11629  0C40  2C42               	goto	i1l519
 11630  0C41                     u168_20:
 11631  0C41                     i1l3063:
 11632                           
 11633                           ;tmr1.c: 146:         toggle = 0;
 11634  0C41  01AF               	clrf	_toggle^(0+128)
 11635  0C42                     i1l519:
 11636  0C42  0008               	return
 11637  0C43                     __end_of_TMR1_DefaultInterruptHandler:
 11638                           
 11639                           	psect	text56
 11640  0AC1                     __ptext56:	
 11641 ;; *************** function _DAC_SetOutput *****************
 11642 ;; Defined at:
 11643 ;;		line 66 in file "mcc_generated_files/dac.c"
 11644 ;; Parameters:    Size  Location     Type
 11645 ;;  inputData       1    wreg     unsigned char 
 11646 ;; Auto vars:     Size  Location     Type
 11647 ;;  inputData       1    0[COMMON] unsigned char 
 11648 ;; Return value:  Size  Location     Type
 11649 ;;                  1    wreg      void 
 11650 ;; Registers used:
 11651 ;;		wreg
 11652 ;; Tracked objects:
 11653 ;;		On entry : 0/0
 11654 ;;		On exit  : 0/0
 11655 ;;		Unchanged: 0/0
 11656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11657 ;;      Params:         0       0       0       0       0       0       0       0
 11658 ;;      Locals:         1       0       0       0       0       0       0       0
 11659 ;;      Temps:          0       0       0       0       0       0       0       0
 11660 ;;      Totals:         1       0       0       0       0       0       0       0
 11661 ;;Total ram usage:        1 bytes
 11662 ;; Hardware stack levels used: 1
 11663 ;; This function calls:
 11664 ;;		Nothing
 11665 ;; This function is called by:
 11666 ;;		_TMR4_DefaultInterruptHandler
 11667 ;;		_TMR1_DefaultInterruptHandler
 11668 ;; This function uses a non-reentrant model
 11669 ;;
 11670                           
 11671                           
 11672                           ;psect for function _DAC_SetOutput
 11673  0AC1                     _DAC_SetOutput:
 11674                           
 11675                           ;incstack = 0
 11676                           ; Regs used in _DAC_SetOutput: [wreg]
 11677                           ;DAC_SetOutput@inputData stored from wreg
 11678  0AC1  00F0               	movwf	DAC_SetOutput@inputData
 11679  0AC2                     i1l2673:
 11680                           
 11681                           ;mcc_generated_files/dac.c: 66: void DAC_SetOutput(uint8_t inputData);mcc_generated_file
      +                          s/dac.c: 67: {;mcc_generated_files/dac.c: 68:     DAC1CON1 = inputData;
 11682  0AC2  0870               	movf	DAC_SetOutput@inputData,w
 11683  0AC3  0022               	movlb	2	; select bank2
 11684  0AC4  0099               	movwf	25	;volatile
 11685  0AC5                     i1l10:
 11686  0AC5  0008               	return
 11687  0AC6                     __end_of_DAC_SetOutput:
 11688                           
 11689                           	psect	text57
 11690  0B4F                     __ptext57:	
 11691 ;; *************** function _TMR0_ISR *****************
 11692 ;; Defined at:
 11693 ;;		line 109 in file "mcc_generated_files/tmr0.c"
 11694 ;; Parameters:    Size  Location     Type
 11695 ;;		None
 11696 ;; Auto vars:     Size  Location     Type
 11697 ;;		None
 11698 ;; Return value:  Size  Location     Type
 11699 ;;                  1    wreg      void 
 11700 ;; Registers used:
 11701 ;;		wreg, status,2, status,0, pclath, cstack
 11702 ;; Tracked objects:
 11703 ;;		On entry : 0/0
 11704 ;;		On exit  : 0/0
 11705 ;;		Unchanged: 0/0
 11706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11707 ;;      Params:         0       0       0       0       0       0       0       0
 11708 ;;      Locals:         0       0       0       0       0       0       0       0
 11709 ;;      Temps:          0       0       0       0       0       0       0       0
 11710 ;;      Totals:         0       0       0       0       0       0       0       0
 11711 ;;Total ram usage:        0 bytes
 11712 ;; Hardware stack levels used: 1
 11713 ;; Hardware stack levels required when called: 1
 11714 ;; This function calls:
 11715 ;;		Absolute function
 11716 ;;		_TMR0_DefaultInterruptHandler
 11717 ;; This function is called by:
 11718 ;;		_INTERRUPT_InterruptManager
 11719 ;; This function uses a non-reentrant model
 11720 ;;
 11721                           
 11722                           
 11723                           ;psect for function _TMR0_ISR
 11724  0B4F                     _TMR0_ISR:
 11725  0B4F                     i1l3215:	
 11726                           ;incstack = 0
 11727                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 11728                           
 11729                           
 11730                           ;mcc_generated_files/tmr0.c: 113:     INTCONbits.TMR0IF = 0;
 11731  0B4F  110B               	bcf	11,2	;volatile
 11732  0B50                     i1l3217:
 11733                           
 11734                           ;mcc_generated_files/tmr0.c: 115:     TMR0 = timer0ReloadVal;
 11735  0B50  0879               	movf	_timer0ReloadVal,w	;volatile
 11736  0B51  0020               	movlb	0	; select bank0
 11737  0B52  0095               	movwf	21	;volatile
 11738  0B53                     i1l3219:
 11739                           
 11740                           ;mcc_generated_files/tmr0.c: 117:     if(TMR0_InterruptHandler)
 11741  0B53  0021               	movlb	1	; select bank1
 11742  0B54  0859               	movf	_TMR0_InterruptHandler^(0+128),w
 11743  0B55  045A               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 11744  0B56  1903               	btfsc	3,2
 11745  0B57  2B59               	goto	u178_21
 11746  0B58  2B5A               	goto	u178_20
 11747  0B59                     u178_21:
 11748  0B59  2B5F               	goto	i1l359
 11749  0B5A                     u178_20:
 11750  0B5A                     i1l3221:
 11751                           
 11752                           ;mcc_generated_files/tmr0.c: 118:     {;mcc_generated_files/tmr0.c: 119:         TMR0_In
      +                          terruptHandler();
 11753  0B5A  085A               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 11754  0B5B  008A               	movwf	10
 11755  0B5C  0859               	movf	_TMR0_InterruptHandler^(0+128),w
 11756  0B5D  000A               	callw
 11757  0B5E  318B               	pagesel	$
 11758  0B5F                     i1l359:
 11759  0B5F  0008               	return
 11760  0B60                     __end_of_TMR0_ISR:
 11761                           
 11762                           	psect	text58
 11763  0AB0                     __ptext58:	
 11764 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 11765 ;; Defined at:
 11766 ;;		line 130 in file "mcc_generated_files/tmr0.c"
 11767 ;; Parameters:    Size  Location     Type
 11768 ;;		None
 11769 ;; Auto vars:     Size  Location     Type
 11770 ;;		None
 11771 ;; Return value:  Size  Location     Type
 11772 ;;                  1    wreg      void 
 11773 ;; Registers used:
 11774 ;;		None
 11775 ;; Tracked objects:
 11776 ;;		On entry : 0/0
 11777 ;;		On exit  : 0/0
 11778 ;;		Unchanged: 0/0
 11779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11780 ;;      Params:         0       0       0       0       0       0       0       0
 11781 ;;      Locals:         0       0       0       0       0       0       0       0
 11782 ;;      Temps:          0       0       0       0       0       0       0       0
 11783 ;;      Totals:         0       0       0       0       0       0       0       0
 11784 ;;Total ram usage:        0 bytes
 11785 ;; Hardware stack levels used: 1
 11786 ;; This function calls:
 11787 ;;		Nothing
 11788 ;; This function is called by:
 11789 ;;		_TMR0_Initialize
 11790 ;;		_TMR0_ISR
 11791 ;; This function uses a non-reentrant model
 11792 ;;
 11793                           
 11794                           
 11795                           ;psect for function _TMR0_DefaultInterruptHandler
 11796  0AB0                     _TMR0_DefaultInterruptHandler:
 11797  0AB0                     i1l365:	
 11798                           ;incstack = 0
 11799                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 11800                           
 11801  0AB0  0008               	return
 11802  0AB1                     __end_of_TMR0_DefaultInterruptHandler:
 11803                           
 11804                           	psect	text59
 11805  0AAF                     __ptext59:	
 11806 ;; *************** function _PIN_MANAGER_IOC *****************
 11807 ;; Defined at:
 11808 ;;		line 121 in file "mcc_generated_files/pin_manager.c"
 11809 ;; Parameters:    Size  Location     Type
 11810 ;;		None
 11811 ;; Auto vars:     Size  Location     Type
 11812 ;;		None
 11813 ;; Return value:  Size  Location     Type
 11814 ;;                  1    wreg      void 
 11815 ;; Registers used:
 11816 ;;		None
 11817 ;; Tracked objects:
 11818 ;;		On entry : 0/0
 11819 ;;		On exit  : 0/0
 11820 ;;		Unchanged: 0/0
 11821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11822 ;;      Params:         0       0       0       0       0       0       0       0
 11823 ;;      Locals:         0       0       0       0       0       0       0       0
 11824 ;;      Temps:          0       0       0       0       0       0       0       0
 11825 ;;      Totals:         0       0       0       0       0       0       0       0
 11826 ;;Total ram usage:        0 bytes
 11827 ;; Hardware stack levels used: 1
 11828 ;; This function calls:
 11829 ;;		Nothing
 11830 ;; This function is called by:
 11831 ;;		_INTERRUPT_InterruptManager
 11832 ;; This function uses a non-reentrant model
 11833 ;;
 11834                           
 11835                           
 11836                           ;psect for function _PIN_MANAGER_IOC
 11837  0AAF                     _PIN_MANAGER_IOC:
 11838  0AAF                     i1l114:	
 11839                           ;incstack = 0
 11840                           ; Regs used in _PIN_MANAGER_IOC: []
 11841                           
 11842  0AAF  0008               	return
 11843  0AB0                     __end_of_PIN_MANAGER_IOC:
 11844                           
 11845                           	psect	text60
 11846  0ABC                     __ptext60:	
 11847 ;; *************** function _INT_ISR *****************
 11848 ;; Defined at:
 11849 ;;		line 54 in file "mcc_generated_files/ext_int.c"
 11850 ;; Parameters:    Size  Location     Type
 11851 ;;		None
 11852 ;; Auto vars:     Size  Location     Type
 11853 ;;		None
 11854 ;; Return value:  Size  Location     Type
 11855 ;;                  1    wreg      void 
 11856 ;; Registers used:
 11857 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11858 ;; Tracked objects:
 11859 ;;		On entry : 0/0
 11860 ;;		On exit  : 0/0
 11861 ;;		Unchanged: 0/0
 11862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11863 ;;      Params:         0       0       0       0       0       0       0       0
 11864 ;;      Locals:         0       0       0       0       0       0       0       0
 11865 ;;      Temps:          0       0       0       0       0       0       0       0
 11866 ;;      Totals:         0       0       0       0       0       0       0       0
 11867 ;;Total ram usage:        0 bytes
 11868 ;; Hardware stack levels used: 1
 11869 ;; Hardware stack levels required when called: 2
 11870 ;; This function calls:
 11871 ;;		_INT_CallBack
 11872 ;; This function is called by:
 11873 ;;		_INTERRUPT_InterruptManager
 11874 ;; This function uses a non-reentrant model
 11875 ;;
 11876                           
 11877                           
 11878                           ;psect for function _INT_ISR
 11879  0ABC                     _INT_ISR:
 11880  0ABC                     i1l3223:	
 11881                           ;incstack = 0
 11882                           ; Regs used in _INT_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11883                           
 11884                           
 11885                           ;mcc_generated_files/ext_int.c: 56:     (INTCONbits.INTF = 0);
 11886  0ABC  108B               	bcf	11,1	;volatile
 11887  0ABD                     i1l3225:
 11888                           
 11889                           ;mcc_generated_files/ext_int.c: 59:     INT_CallBack();
 11890  0ABD  318B  2333  318A   	fcall	_INT_CallBack
 11891  0AC0                     i1l264:
 11892  0AC0  0008               	return
 11893  0AC1                     __end_of_INT_ISR:
 11894                           
 11895                           	psect	text61
 11896  0B33                     __ptext61:	
 11897 ;; *************** function _INT_CallBack *****************
 11898 ;; Defined at:
 11899 ;;		line 62 in file "mcc_generated_files/ext_int.c"
 11900 ;; Parameters:    Size  Location     Type
 11901 ;;		None
 11902 ;; Auto vars:     Size  Location     Type
 11903 ;;		None
 11904 ;; Return value:  Size  Location     Type
 11905 ;;                  1    wreg      void 
 11906 ;; Registers used:
 11907 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11908 ;; Tracked objects:
 11909 ;;		On entry : 0/0
 11910 ;;		On exit  : 0/0
 11911 ;;		Unchanged: 0/0
 11912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11913 ;;      Params:         0       0       0       0       0       0       0       0
 11914 ;;      Locals:         0       0       0       0       0       0       0       0
 11915 ;;      Temps:          0       0       0       0       0       0       0       0
 11916 ;;      Totals:         0       0       0       0       0       0       0       0
 11917 ;;Total ram usage:        0 bytes
 11918 ;; Hardware stack levels used: 1
 11919 ;; Hardware stack levels required when called: 1
 11920 ;; This function calls:
 11921 ;;		Absolute function
 11922 ;;		_INT_DefaultInterruptHandler
 11923 ;; This function is called by:
 11924 ;;		_INT_ISR
 11925 ;; This function uses a non-reentrant model
 11926 ;;
 11927                           
 11928                           
 11929                           ;psect for function _INT_CallBack
 11930  0B33                     _INT_CallBack:
 11931  0B33                     i1l3019:	
 11932                           ;incstack = 0
 11933                           ; Regs used in _INT_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11934                           
 11935                           
 11936                           ;mcc_generated_files/ext_int.c: 65:     if(INT_InterruptHandler)
 11937  0B33  0021               	movlb	1	; select bank1
 11938  0B34  085B               	movf	_INT_InterruptHandler^(0+128),w
 11939  0B35  045C               	iorwf	(_INT_InterruptHandler+1)^(0+128),w
 11940  0B36  1903               	btfsc	3,2
 11941  0B37  2B39               	goto	u162_21
 11942  0B38  2B3A               	goto	u162_20
 11943  0B39                     u162_21:
 11944  0B39  2B3F               	goto	i1l268
 11945  0B3A                     u162_20:
 11946  0B3A                     i1l3021:
 11947                           
 11948                           ;mcc_generated_files/ext_int.c: 66:     {;mcc_generated_files/ext_int.c: 67:         INT
      +                          _InterruptHandler();
 11949  0B3A  085C               	movf	(_INT_InterruptHandler+1)^(0+128),w
 11950  0B3B  008A               	movwf	10
 11951  0B3C  085B               	movf	_INT_InterruptHandler^(0+128),w
 11952  0B3D  000A               	callw
 11953  0B3E  318B               	pagesel	$
 11954  0B3F                     i1l268:
 11955  0B3F  0008               	return
 11956  0B40                     __end_of_INT_CallBack:
 11957                           
 11958                           	psect	text62
 11959  0672                     __ptext62:	
 11960 ;; *************** function _INT_DefaultInterruptHandler *****************
 11961 ;; Defined at:
 11962 ;;		line 75 in file "mcc_generated_files/ext_int.c"
 11963 ;; Parameters:    Size  Location     Type
 11964 ;;		None
 11965 ;; Auto vars:     Size  Location     Type
 11966 ;;  time            1    2[COMMON] unsigned char 
 11967 ;; Return value:  Size  Location     Type
 11968 ;;                  1    wreg      void 
 11969 ;; Registers used:
 11970 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11971 ;; Tracked objects:
 11972 ;;		On entry : 0/0
 11973 ;;		On exit  : 0/0
 11974 ;;		Unchanged: 0/0
 11975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11976 ;;      Params:         0       0       0       0       0       0       0       0
 11977 ;;      Locals:         1       0       0       0       0       0       0       0
 11978 ;;      Temps:          2       0       0       0       0       0       0       0
 11979 ;;      Totals:         3       0       0       0       0       0       0       0
 11980 ;;Total ram usage:        3 bytes
 11981 ;; Hardware stack levels used: 1
 11982 ;; This function calls:
 11983 ;;		Nothing
 11984 ;; This function is called by:
 11985 ;;		_EXT_INT_Initialize
 11986 ;;		_INT_CallBack
 11987 ;; This function uses a non-reentrant model
 11988 ;;
 11989                           
 11990                           
 11991                           ;psect for function _INT_DefaultInterruptHandler
 11992  0672                     _INT_DefaultInterruptHandler:
 11993  0672                     i1l2683:	
 11994                           ;incstack = 0
 11995                           ; Regs used in _INT_DefaultInterruptHandler: [wreg-fsr0h+status,2+status,0]
 11996                           
 11997                           
 11998                           ;mcc_generated_files/ext_int.c: 77:   uint8_t time = TMR0;
 11999  0672  0020               	movlb	0	; select bank0
 12000  0673  0815               	movf	21,w	;volatile
 12001  0674  00F0               	movwf	??_INT_DefaultInterruptHandler
 12002  0675  0870               	movf	??_INT_DefaultInterruptHandler,w
 12003  0676  00F2               	movwf	INT_DefaultInterruptHandler@time
 12004  0677                     i1l2685:
 12005                           
 12006                           ;mcc_generated_files/ext_int.c: 78:   TMR0 = 0;
 12007  0677  0195               	clrf	21	;volatile
 12008  0678                     i1l2687:
 12009                           
 12010                           ;mcc_generated_files/ext_int.c: 81:   if (INTCONbits.TMR0IF){
 12011  0678  1D0B               	btfss	11,2	;volatile
 12012  0679  2E7B               	goto	u124_21
 12013  067A  2E7C               	goto	u124_20
 12014  067B                     u124_21:
 12015  067B  2E7D               	goto	i1l2691
 12016  067C                     u124_20:
 12017  067C                     i1l2689:
 12018                           
 12019                           ;mcc_generated_files/ext_int.c: 82:     time = 0;
 12020  067C  01F2               	clrf	INT_DefaultInterruptHandler@time
 12021  067D                     i1l2691:
 12022                           
 12023                           ;mcc_generated_files/ext_int.c: 84:   INTCONbits.TMR0IF = 0;
 12024  067D  110B               	bcf	11,2	;volatile
 12025                           
 12026                           ;mcc_generated_files/ext_int.c: 86:   switch(ir_code.state){
 12027  067E  2EC8               	goto	i1l2729
 12028  067F                     i1l2693:
 12029                           
 12030                           ;mcc_generated_files/ext_int.c: 89:     if (time >= 180 && time <= 243){
 12031  067F  30B4               	movlw	180
 12032  0680  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12033  0681  1C03               	skipc
 12034  0682  2E84               	goto	u125_21
 12035  0683  2E85               	goto	u125_20
 12036  0684                     u125_21:
 12037  0684  2EDC               	goto	i1l278
 12038  0685                     u125_20:
 12039  0685                     i1l2695:
 12040  0685  30F4               	movlw	244
 12041  0686  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12042  0687  1803               	skipnc
 12043  0688  2E8A               	goto	u126_21
 12044  0689  2E8B               	goto	u126_20
 12045  068A                     u126_21:
 12046  068A  2EDC               	goto	i1l278
 12047  068B                     u126_20:
 12048  068B                     i1l2697:
 12049                           
 12050                           ;mcc_generated_files/ext_int.c: 90:       ir_code.n_bits = 0;
 12051  068B  01B4               	clrf	_ir_code^(0+128)
 12052  068C                     i1l2699:
 12053                           
 12054                           ;mcc_generated_files/ext_int.c: 91:       ir_code.state = STATE_RECEIVING;
 12055  068C  01B5               	clrf	(_ir_code^(0+128)+1)
 12056  068D  0AB5               	incf	(_ir_code^(0+128)+1),f
 12057  068E  2EDC               	goto	i1l278
 12058  068F                     i1l2701:
 12059                           
 12060                           ;mcc_generated_files/ext_int.c: 99:     ir_code.code <<= 1;
 12061  068F  3001               	movlw	1
 12062  0690                     u127_25:
 12063  0690  35B6               	lslf	(_ir_code^(0+128)+2),f
 12064  0691  0DB7               	rlf	((_ir_code+1)^(0+128)+2),f
 12065  0692  0DB8               	rlf	((_ir_code+2)^(0+128)+2),f
 12066  0693  0DB9               	rlf	((_ir_code+3)^(0+128)+2),f
 12067  0694  0B89               	decfsz	9,f
 12068  0695  2E90               	goto	u127_25
 12069  0696                     i1l2703:
 12070                           
 12071                           ;mcc_generated_files/ext_int.c: 100:     if (time >= 29 && time <= 41){
 12072  0696  301D               	movlw	29
 12073  0697  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12074  0698  1C03               	skipc
 12075  0699  2E9B               	goto	u128_21
 12076  069A  2E9C               	goto	u128_20
 12077  069B                     u128_21:
 12078  069B  2EA8               	goto	i1l2711
 12079  069C                     u128_20:
 12080  069C                     i1l2705:
 12081  069C  302A               	movlw	42
 12082  069D  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12083  069E  1803               	skipnc
 12084  069F  2EA1               	goto	u129_21
 12085  06A0  2EA2               	goto	u129_20
 12086  06A1                     u129_21:
 12087  06A1  2EA8               	goto	i1l2711
 12088  06A2                     u129_20:
 12089  06A2                     i1l2707:
 12090                           
 12091                           ;mcc_generated_files/ext_int.c: 104:       ir_code.code |= 1;
 12092  06A2  1436               	bsf	(_ir_code^(0+128)+2),0
 12093  06A3                     i1l2709:
 12094                           
 12095                           ;mcc_generated_files/ext_int.c: 105:       ir_code.n_bits++;
 12096  06A3  3001               	movlw	1
 12097  06A4  00F0               	movwf	??_INT_DefaultInterruptHandler
 12098  06A5  0870               	movf	??_INT_DefaultInterruptHandler,w
 12099  06A6  07B4               	addwf	_ir_code^(0+128),f
 12100                           
 12101                           ;mcc_generated_files/ext_int.c: 106:     } else if (time >= 14 && time <= 20){
 12102  06A7  2EB7               	goto	i1l2719
 12103  06A8                     i1l2711:
 12104  06A8  300E               	movlw	14
 12105  06A9  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12106  06AA  1C03               	skipc
 12107  06AB  2EAD               	goto	u130_21
 12108  06AC  2EAE               	goto	u130_20
 12109  06AD                     u130_21:
 12110  06AD  2EB5               	goto	i1l2717
 12111  06AE                     u130_20:
 12112  06AE                     i1l2713:
 12113  06AE  3015               	movlw	21
 12114  06AF  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12115  06B0  1803               	skipnc
 12116  06B1  2EB3               	goto	u131_21
 12117  06B2  2EB4               	goto	u131_20
 12118  06B3                     u131_21:
 12119  06B3  2EB5               	goto	i1l2717
 12120  06B4                     u131_20:
 12121  06B4  2EA3               	goto	i1l2709
 12122  06B5                     i1l2717:
 12123                           
 12124                           ;mcc_generated_files/ext_int.c: 113:       ir_code.state = STATE_RESET;
 12125  06B5  01B5               	clrf	(_ir_code^(0+128)+1)
 12126                           
 12127                           ;mcc_generated_files/ext_int.c: 114:       break;
 12128  06B6  2EDC               	goto	i1l278
 12129  06B7                     i1l2719:
 12130                           
 12131                           ;mcc_generated_files/ext_int.c: 116:     if (32 == ir_code.n_bits){
 12132  06B7  3020               	movlw	32
 12133  06B8  0634               	xorwf	_ir_code^(0+128),w
 12134  06B9  1D03               	btfss	3,2
 12135  06BA  2EBC               	goto	u132_21
 12136  06BB  2EBD               	goto	u132_20
 12137  06BC                     u132_21:
 12138  06BC  2EDC               	goto	i1l278
 12139  06BD                     u132_20:
 12140  06BD                     i1l2721:
 12141                           
 12142                           ;mcc_generated_files/ext_int.c: 119:       if (ir_code.command == ((~ir_code.command_b) 
      +                          & 0xff)){
 12143  06BD  0936               	comf	(_ir_code^(0+128)+2),w
 12144  06BE  0637               	xorwf	(_ir_code^(0+128)+3),w
 12145  06BF  1D03               	skipz
 12146  06C0  2EC2               	goto	u133_21
 12147  06C1  2EC3               	goto	u133_20
 12148  06C2                     u133_21:
 12149  06C2  2EB5               	goto	i1l2717
 12150  06C3                     u133_20:
 12151  06C3                     i1l2723:
 12152                           
 12153                           ;mcc_generated_files/ext_int.c: 120:         ir_code.state = STATE_DONE;
 12154  06C3  3002               	movlw	2
 12155  06C4  00F0               	movwf	??_INT_DefaultInterruptHandler
 12156  06C5  0870               	movf	??_INT_DefaultInterruptHandler,w
 12157  06C6  00B5               	movwf	(_ir_code^(0+128)+1)
 12158                           
 12159                           ;mcc_generated_files/ext_int.c: 121:       } else {
 12160  06C7  2EDC               	goto	i1l278
 12161  06C8                     i1l2729:
 12162  06C8  0021               	movlb	1	; select bank1
 12163  06C9  0835               	movf	(_ir_code^(0+128)+1),w
 12164  06CA  00F0               	movwf	??_INT_DefaultInterruptHandler
 12165  06CB  01F1               	clrf	??_INT_DefaultInterruptHandler+1
 12166                           
 12167                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12168                           ; Switch size 1, requested type "simple"
 12169                           ; Number of cases is 1, Range of values is 0 to 0
 12170                           ; switch strategies available:
 12171                           ; Name         Instructions Cycles
 12172                           ; simple_byte            4     3 (average)
 12173                           ; direct_byte            8     6 (fixed)
 12174                           ; jumptable            260     6 (fixed)
 12175                           ;	Chosen strategy is simple_byte
 12176  06CC  0871               	movf	??_INT_DefaultInterruptHandler+1,w
 12177  06CD  3A00               	xorlw	0	; case 0
 12178  06CE  1903               	skipnz
 12179  06CF  2ED1               	goto	i1l4485
 12180  06D0  2EB5               	goto	i1l2717
 12181  06D1                     i1l4485:
 12182                           
 12183                           ; Switch size 1, requested type "simple"
 12184                           ; Number of cases is 3, Range of values is 0 to 2
 12185                           ; switch strategies available:
 12186                           ; Name         Instructions Cycles
 12187                           ; simple_byte           10     6 (average)
 12188                           ; direct_byte           12     6 (fixed)
 12189                           ; jumptable            260     6 (fixed)
 12190                           ;	Chosen strategy is simple_byte
 12191  06D1  0870               	movf	??_INT_DefaultInterruptHandler,w
 12192  06D2  3A00               	xorlw	0	; case 0
 12193  06D3  1903               	skipnz
 12194  06D4  2E7F               	goto	i1l2693
 12195  06D5  3A01               	xorlw	1	; case 1
 12196  06D6  1903               	skipnz
 12197  06D7  2E8F               	goto	i1l2701
 12198  06D8  3A03               	xorlw	3	; case 2
 12199  06D9  1903               	skipnz
 12200  06DA  2EDC               	goto	i1l278
 12201  06DB  2EB5               	goto	i1l2717
 12202  06DC                     i1l278:
 12203                           
 12204                           ;mcc_generated_files/ext_int.c: 135:   INTCONbits.INTF = 0;
 12205  06DC  108B               	bcf	11,1	;volatile
 12206  06DD                     i1l289:
 12207  06DD  0008               	return
 12208  06DE                     __end_of_INT_DefaultInterruptHandler:
 12209  007E                     btemp	set	126	;btemp
 12210  007E                     int$flags	set	126
 12211  007E                     wtemp0	set	126
 12212                           
 12213                           	psect	config
 12214                           
 12215                           ;Config register CONFIG1 @ 0x8007
 12216                           ;	Oscillator Selection Bits
 12217                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 12218                           ;	Watchdog Timer Enable
 12219                           ;	WDTE = OFF, WDT disabled
 12220                           ;	Power-up Timer Enable
 12221                           ;	PWRTE = OFF, PWRT disabled
 12222                           ;	MCLR Pin Function Select
 12223                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 12224                           ;	Flash Program Memory Code Protection
 12225                           ;	CP = OFF, Program memory code protection is disabled
 12226                           ;	Brown-out Reset Enable
 12227                           ;	BOREN = OFF, Brown-out Reset disabled
 12228                           ;	Clock Out Enable
 12229                           ;	CLKOUTEN = ON, CLKOUT function is enabled on the CLKOUT pin
 12230                           ;	Internal/External Switchover Mode
 12231                           ;	IESO = OFF, Internal/External Switchover Mode is disabled
 12232                           ;	Fail-Safe Clock Monitor Enable
 12233                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 12234  8007                     	org	32775
 12235  8007  21E4               	dw	8676
 12236                           
 12237                           ;Config register CONFIG2 @ 0x8008
 12238                           ;	Flash Memory Self-Write Protection
 12239                           ;	WRT = OFF, Write protection off
 12240                           ;	Peripheral Pin Select one-way control
 12241                           ;	PPS1WAY = ON, The PPSLOCK bit cannot be cleared once it is set by software
 12242                           ;	Zero-cross detect disable
 12243                           ;	ZCDDIS = ON, Zero-cross detect circuit is disabled at POR
 12244                           ;	Phase Lock Loop enable
 12245                           ;	PLLEN = OFF, 4x PLL is enabled when software sets the SPLLEN bit
 12246                           ;	Stack Overflow/Underflow Reset Enable
 12247                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 12248                           ;	Brown-out Reset Voltage Selection
 12249                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 12250                           ;	Low-Power Brown Out Reset
 12251                           ;	LPBOR = OFF, Low-Power BOR is disabled
 12252                           ;	Low-Voltage Programming Enable
 12253                           ;	LVP = ON, Low-voltage programming enabled
 12254  8008                     	org	32776
 12255  8008  3EFF               	dw	16127

Data Sizes:
    Strings     128
    Constant    4
    Data        46
    BSS         93
    Persistent  52
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     80      80
    BANK1            80      8      79
    BANK2            80      0      52
    BANK3            80      0      33
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    S1779_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_7(CODE[25]), STR_6(CODE[25]), STR_5(CODE[23]), STR_4(CODE[20]), 
		 -> STR_3(CODE[20]), STR_2(CODE[19]), STR_1(CODE[21]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 25
		 -> STR_7(CODE[25]), STR_6(CODE[25]), STR_5(CODE[23]), STR_4(CODE[20]), 
		 -> STR_3(CODE[20]), STR_2(CODE[19]), STR_1(CODE[21]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_7(CODE[25]), STR_6(CODE[25]), STR_5(CODE[23]), STR_4(CODE[20]), 
		 -> STR_3(CODE[20]), STR_2(CODE[19]), STR_1(CODE[21]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    process_remote_command@code	PTR struct . size(1) Largest target is 6
		 -> ir_code(BANK1[6]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 64
		 -> writePersistentState@buf(BANK0[64]), 

    TMR4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _startUp->_setLEDColor
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _setCurrent->___awdiv
    _selectSomething->_setLEDColor
    _vfpfcnvrt->_fputc
    _fputc->_putch
    _putch->_EUSART_Write
    ___aldiv->___awdiv
    _lowBattery->_setLEDColor
    _TMR4_Initialize->_TMR4_SetInterruptHandler
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR4_ISR->_TMR4_DefaultInterruptHandler
    _TMR4_DefaultInterruptHandler->_DAC_SetOutput
    _TMR1_DefaultInterruptHandler->_DAC_SetOutput
    _INT_CallBack->_INT_DefaultInterruptHandler

Critical Paths under _main in BANK0

    _process_remote_command->_writePersistentState
    _writePersistentState->_FLASH_WriteBlock
    _setFrequency->___aldiv
    _setCurrent->_battery_voltage
    _selectIncrease->_printf
    _selectFrequencyValue->_printf
    _selectFrequency->_printf
    _selectDecrease->_printf
    _selectCurrentValue->_printf
    _selectCurrent->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_fputc
    _battery_voltage->___aldiv
    ___aldiv->___lmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_process_remote_command

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  104555
                                              3 BANK1      5     5      0
                     _DAC_Initialize
                   _LATCH_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
                  _SYSTEM_Initialize
                    _battery_voltage
                            _initLED
                         _lowBattery
             _process_remote_command
                _readPersistentState
                         _setCurrent
                       _setFrequency
                            _startUp
 ---------------------------------------------------------------------------------
 (1) _startUp                                              4     4      0    6142
                                              0 BANK0      4     4      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (1) _readPersistentState                                  2     2      0       0
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _process_remote_command                               3     3      0   80284
                                              0 BANK1      3     3      0
                    _battery_voltage
                      _selectCurrent
                 _selectCurrentValue
                     _selectDecrease
                    _selectFrequency
               _selectFrequencyValue
                     _selectIncrease
                    _selectSomething
                         _setCurrent
                       _setFrequency
                        _setLEDColor
               _writePersistentState
 ---------------------------------------------------------------------------------
 (2) _writePersistentState                                70    70      0    1464
                                             10 BANK0     70    70      0
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    10     7      3    1140
                                              0 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     3     1      2     215
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _setFrequency                                         5     3      2    3632
                                             23 BANK0      5     3      2
            _TMR4_LoadPeriodRegister
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) _TMR4_LoadPeriodRegister                              1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setCurrent                                          16    12      4    6046
                                             25 BANK0     16    12      4
                            ___aldiv
                            ___awdiv
                             ___lmul
                    _battery_voltage (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     612
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     683
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _selectSomething                                      2     2      0    6074
                                              0 BANK0      2     2      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectIncrease                                       2     2      0    9254
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectFrequencyValue                                 2     2      0    9254
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectFrequency                                      2     2      0    9254
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectDecrease                                       1     1      0    9254
                                             25 BANK0      1     1      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectCurrentValue                                   2     2      0    9254
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectCurrent                                        2     2      0    9254
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (3) _printf                                               6     4      2    3180
                                             21 BANK0      4     2      2
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             8     5      3    2272
                                             13 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           40    38      2    1759
                                              5 BANK0      8     6      2
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                8     5      3    1158
                                              5 COMMON     3     0      3
                                              0 BANK0      5     5      0
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0      62
                                              4 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (8) _EUSART_Write                                         1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _battery_voltage                                      2     0      2    1397
                                             23 BANK0      2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8    1397
                                              8 BANK0     15     7      8
                            ___awdiv (ARG)
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _lowBattery                                           2     2      0    6074
                                              0 BANK0      2     2      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _setLEDColor                                          4     2      2    6074
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLED                                              1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     875
                     _DAC_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0     125
           _TMR4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR4_SetInterruptHandler                             2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     125
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     125
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     125
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     375
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LATCH_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           0     0      0     178
                            _INT_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                           _TMR1_ISR
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR4_ISR                                            0     0      0      22
                   Absolute function *
       _TMR4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR4_DefaultInterruptHandler                        1     1      0      22
                                              1 COMMON     1     1      0
                      _DAC_SetOutput
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0      22
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR1_DefaultInterruptHandler                        0     0      0      22
                      _DAC_SetOutput
 ---------------------------------------------------------------------------------
 (12) _DAC_SetOutput                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT_ISR                                             0     0      0     134
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (11) _INT_CallBack                                        0     0      0     134
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (12) _INT_DefaultInterruptHandler                         3     3      0     134
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DAC_Initialize
   _LATCH_Initialize
   _OPA1_Initialize
   _OPA2_Initialize
   _SYSTEM_Initialize
     _DAC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OPA1_Initialize
     _OPA2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
     _TMR4_Initialize
       _TMR4_SetInterruptHandler
     _WDT_Initialize
   _battery_voltage
     ___aldiv
       ___awdiv (ARG)
       ___lmul (ARG)
   _initLED
   _lowBattery
     _setLEDColor
   _process_remote_command
     _battery_voltage
     _selectCurrent
       _printf
         _vfprintf
           _vfpfcnvrt
             _fputc
               _putch
                 _EUSART_Write
       _setLEDColor
     _selectCurrentValue
       _printf
       _setLEDColor
     _selectDecrease
       _printf
       _setLEDColor
     _selectFrequency
       _printf
       _setLEDColor
     _selectFrequencyValue
       _printf
       _setLEDColor
     _selectIncrease
       _printf
       _setLEDColor
     _selectSomething
       _setLEDColor
     _setCurrent
       ___aldiv
       ___awdiv
       ___lmul
       _battery_voltage (ARG)
     _setFrequency
       _TMR4_LoadPeriodRegister
       ___aldiv
       ___lmul
     _setLEDColor
     _writePersistentState
       _FLASH_WriteBlock
         _FLASH_EraseBlock
   _readPersistentState
   _setCurrent
   _setFrequency
   _startUp
     _setLEDColor

 _INTERRUPT_InterruptManager (ROOT)
   _INT_ISR
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
   _TMR1_ISR
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
       _DAC_SetOutput
   _TMR4_ISR
     Absolute function(Fake) *
     _TMR4_DefaultInterruptHandler *
       _DAC_SetOutput

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      FF       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     50      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      8      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      34      10       65.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      21      12       41.2%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      FF      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Fri Apr 22 16:26:36 2022

                                            l7 0AD0                                             l50 0CCB  
                                           l53 0B14                                             l56 0AB3  
                                 ___awdiv@sign 0021                        __end_of_OPA1_Initialize 0AB8  
                              _timer0ReloadVal 0079                        __size_of_selectIncrease 0025  
                                          l111 0E21                                            l222 0B1E  
                                          l119 0AB7                                            l231 0B00  
                                          l305 0B1C                                            l225 0B26  
                                          l243 0ADC                                            l411 0ACA  
                                          l246 0AE2                                            l271 0AE8  
                                          l511 0AF4                                            l249 0AD6  
                                          l329 0ABB                                            l362 0AEE  
                                          l346 0B71                                            l418 0AFA  
                                          l292 0B32                                            l621 0C62  
                                          l198 0C84                                            l631 0E2F  
                                          l632 0E36                                            l472 0C25  
                                          l465 061C                                            l634 0E3A  
                                          l466 0671                                            l626 07FF  
                                          l643 0BD8                                            l635 0E54  
                                          l651 0F00                                            l396 0B96  
                                          l660 0D3E                                            l468 0669  
                                          l629 0E2A                                            l638 0F84  
                                          l646 0DBD                                            l654 0FDF  
                                          l742 03BC                                            l495 0BF0  
                                          l663 0CF0                                            l904 0587  
                                          l672 0D67                                            l745 0002  
                                          l657 0D91                                            l666 0CA6  
                                          l682 0461                                            l675 0D16  
                                          l843 0E88                                            l685 071E  
                                          l689 0743                                            l894 050B  
                                          l982 07A3                                            _PR2 001B  
                                          _PR4 0416                          ?_selectFrequencyValue 0070  
                              _timer1ReloadVal 00D5                 ?_EUSART_SetFramingErrorHandler 0073  
                              _TMR2_Initialize 0B15                                            wreg 0009  
                                  main@batt_mv 00ED                 FLASH_WriteBlock@flashWordArray 0022  
                     __size_of_selectFrequency 002A                                           l3001 0B68  
                                         l3011 0C6D                                           l3003 0B69  
                                         l1331 0DEE                                           l3013 0C74  
                                         l3005 0B6A                                           l1325 0605  
                                         l3015 0C7B                                           l3007 0C63  
                                         l1343 0F40                                           l3017 0C82  
                                         l3009 0C6C                                           l3201 0CB6  
                                         l4001 0F9F                                           l3211 0CC5  
                                         l3203 0CB9                                           l4011 0D6D  
                                         l4003 0FB2                                           l1292 0B83  
                                         l3213 0CC8                                           l3205 0CBC  
                                         l4021 0D23                                           l4013 0D76  
                                         l4005 0FBF                                           l3207 0CBF  
                                         l4023 0D30                                           l4015 0D89  
                                         l4031 0CE2                                           l4007 0FD2  
                                         l4111 0089                                           l3209 0CC2  
                                         l4025 0D36                                           l4017 0D17  
                                         l4041 0C9E                                           l4009 0D68  
                                         l4033 0CE8                                           l4201 0196  
                                         l4121 00AF                                           l4113 0090  
                                         l4105 0EC9                                           l4019 0D19  
                                         l4043 0D3F                                           l4035 0C85  
                                         l4051 0CF1                                           l4027 0CCC  
                                         l4211 01BB                                           l4203 019B  
                                         l4131 00E2                                           l4123 00B2  
                                         l4115 0095                                           l4107 0ED6  
                                         l3261 0F49                                           l4045 0D4C  
                                         l4037 0C8F                                           l4053 0CFB  
                                         l4029 0CD9                                           l4061 0443  
                                         l4301 02F9                                           l4221 01E6  
                                         l4213 01C6                                           l4205 01AE  
                                         l4133 00E7                                           l4141 00FF  
                                         l4125 00C7                                           l4117 00A6  
                                         l3253 0C43                                           l4109 0EDF  
                                         l3271 0F56                                           l3263 0F4B  
                                         l3255 0F41                                           l4047 0D59  
                                         l4039 0C98                                           l4055 0D08  
                                         l4063 0450                                           l4071 06DE  
                                         l4311 0315                                           l4231 0202  
                                         l4215 01CB                                           l4207 01B1  
                                         l4151 0116                                           l4143 0104  
                                         l4135 00EB                                           l4119 00AB  
                                         l4127 00CA                                           l3193 0CA7  
                                         l3281 0F65                                           l3273 0F5B  
                                         l3265 0F51                                           l3257 0F44  
                                         l4049 0D5F                                           l4057 0D0E  
                                         l4065 0455                                           l4081 0732  
                                         l4073 070C                                           l4321 0336  
                                         l4313 0318                                           l4305 02FF  
                                         l4241 0223                                           l4233 0205  
                                         l4225 01EC                                           l4217 01CE  
                                         l4209 01B5                                           l4161 0127  
                                         l4153 011A                                           l4145 0107  
                                         l4137 00EE                                           l4129 00D0  
                                         l4401 049F                                           l3195 0CAD  
                                         l3291 0F71                                           l3283 0F67  
                                         l3275 0F5D                                           l3267 0F53  
                                         l3259 0F48                                           l4091 0D92  
                                         l4067 045A                                           l4059 03BD  
                                         l4083 0737                                           l4075 0719  
                                         l4331 0354                                           l4323 033C  
                                         l4315 031D                                           l4307 0305  
                                         l4251 0241                                           l4243 0229  
                                         l4235 020A                                           l4227 01F2  
                                         l4219 01D3                                           l4171 014E  
                                         l4163 013C                                           l4155 011E  
                                         l4147 010D                                           l4139 00FC  
                                         l4411 04C3                                           l4403 04A2  
                                         l3197 0CB0                                           l3293 0F76  
                                         l3285 0F69                                           l3277 0F5F  
                                         l3269 0F55                                           l4093 0D97  
                                         l4069 045C                                           l4085 073E  
                                         l4077 072C                                           l4333 0367  
                                         l4325 0347                                           l4317 0330  
                                         l4309 0310                                           l4261 026B  
                                         l4253 0254                                           l4245 0234  
                                         l4237 021D                                           l4229 01FD  
                                         l4173 0150                                           l4181 0168  
                                         l4157 0120                                           l4165 013F  
                                         l4149 0111                                           l4341 03A3  
                                         l4421 04F3                                           l4413 04D0  
                                         l4405 04AD                                           l2911 0ACB  
                                         l3199 0CB3                                           l3295 0F7B  
                                         l3287 0F6A                                           l3279 0F62  
                                         l4095 0D9D                                           l3711 0AFC  
                                         l4087 0741                                           l4079 0731  
                                         l4343 03A9                                           l4327 034C  
                                         l4263 0270                                           l4247 0239  
                                         l4191 017B                                           l4183 016D  
                                         l4175 0154                                           l4167 0145  
                                         l4159 0124                                           l4415 04D3  
                                         l4407 04BA                                           l2681 0AE3  
                                         l2921 0DFA                                           l2913 0DEF  
                                         l2737 0AE9                                           l3289 0F6F  
                                         l4097 0DB0                                           l3721 0F1A  
                                         l3713 0F01                                           l4089 0742  
                                         l3801 0611                                           l4345 03B6  
                                         l4329 034F                                           l4281 02AA  
                                         l4273 0291                                           l4265 0273  
                                         l4257 025A                                           l4249 023C  
                                         l4193 017F                                           l4185 0170  
                                         l4177 0157                                           l4169 014A  
                                         l4417 04E8                                           l4409 04C0  
                                         l2675 0AD7                                           l2931 0E03  
                                         l2923 0DFD                                           l2915 0DF3  
                                         l2739 0AF5                                           l3707 0B1E  
                                         l3723 0F38                                           l3715 0F06  
                                         l3731 05A3                                           l3811 0627  
                                         l4291 02CE                                           l4283 02AF  
                                         l4275 0297                                           l4267 0278  
                                         l4259 0260                                           l4195 0185  
                                         l4179 0165                                           l4339 036D  
                                         l4099 0EC5                                           l4419 04EF  
                                         l2677 0ADD                                           l2941 0E18  
                                         l2933 0E04                                           l2925 0DFF  
                                         l2917 0DF6                                           l3901 0547  
                                         l3709 0B23                                           l3717 0F0B  
                                         l3741 05D1                                           l3733 05A8  
                                         l3821 062D                                           l3813 0628  
                                         l3805 061D                                           l4293 02D9  
                                         l4285 02C2                                           l4277 02A2  
                                         l4269 028B                                           l4197 0190  
                                         l4189 0177                                           l4381 0468  
                                         l2679 0AD1                                           l2943 0B0D  
                                         l2935 0E06                                           l2927 0E00  
                                         l2919 0DF8                                           l2951 0AB1  
                                         l3903 0559                                           l3911 056F  
                                         l3719 0F10                                           l3735 05AC  
                                         l3751 05E2                                           l3727 058A  
                                         l3831 0652                                           l3823 0631  
                                         l3807 0624                                           l4295 02DE  
                                         l4279 02A7                                           l4199 0193  
                                         l4391 0477                                           l4383 046B  
                                         l2953 0AB4                                           l2945 0B10  
                                         l2937 0E08                                           l2929 0E02  
                                         l2793 0AEF                                           l2961 0B8A  
                                         l3913 0574                                           l3905 0561  
                                         l3753 05FB                                           l3737 05BE  
                                         l3745 05D7                                           l3729 059B  
                                         l3921 0746                                           l3761 0C0E  
                                         l3841 0663                                           l3833 0657  
                                         l3825 063B                                           l3809 0626  
                                         l4297 02E1                                           l4289 02C8  
                                         l4393 048C                                           l4385 046E  
                                         l4377 0462                                           l2947 0B11  
                                         l2939 0E09                                           l2971 0BDE  
                                         l2963 0B8C                                           l2955 0B84  
                                         l3851 0BCB                                           l3915 057F  
                                         l3907 0562                                           l3747 05DF  
                                         l3739 05C6                                           l3931 075A  
                                         l3923 074A                                           l3771 0C16  
                                         l3763 0C0F                                           l3843 066B  
                                         l3835 0658                                           l3827 0649  
                                         l3819 062A                                           l4483 037A  
                                         l4299 02E6                                           l4395 049A  
                                         l4387 0471                                           l4379 0465  
                                         l2949 0B12                                           l2973 0BE3  
                                         l2981 0B15                                           l2965 0B93  
                                         l2957 0B87                                           l3853 0BD0  
                                         l3909 0569                                           l3861 0B77  
                                         l3941 076E                                           l3933 075E  
                                         l3925 074F                                           l3781 0C20  
                                         l3773 0C1B                                           l3765 0C12  
                                         l3837 0659                                           l3829 0650  
                                         l4397 049B                                           l4389 0474  
                                         l2991 0B2A                                           l2967 0AB8  
                                         l2975 0BE5                                           l2983 0B18  
                                         l2959 0B88                                           l3855 0BD3  
                                         l3847 0BC3                                           l3791 0DE6  
                                         l3783 0DC0                                           l3951 078A  
                                         l3943 0772                                           l3935 0760  
                                         l3927 0751                                           l3919 0744  
                                         l3871 0E6A                                           l3775 0C1C  
                                         l3767 0C14                                           l3759 0C0A  
                                         l3839 065F                                           l4399 049C  
                                         l2993 0B31                                           l2977 0BE7  
                                         l2969 0BD9                                           l2985 0B19  
                                         l3857 0BD6                                           l3849 0BC8  
                                         l3881 04FA                                           l3785 0DC4  
                                         l3953 078F                                           l3945 0776  
                                         l3937 0766                                           l3929 0755  
                                         l3873 0E71                                           l3865 0E55  
                                         l3777 0C1D                                           l3769 0C15  
                                         l2995 0B60                                           l2979 0BE9  
                                         l2987 0B1A                                           l3891 0526  
                                         l3883 04FE                                           l3787 0DC8  
                                         l3859 0B72                                           l3947 0785  
                                         l3939 0769                                           l3955 0795  
                                         l3875 0E80                                           l3867 0E5D  
                                         l3795 0AC7                                           l3779 0C1E  
                                         l3971 07A8                                           l3963 07A4  
                                         l2989 0B27                                           l2997 0B65  
                                         l3893 052E                                           l3885 050F  
                                         l3789 0DDC                                           l3957 079A  
                                         l3949 0789                                           l3869 0E62  
                                         l3797 0606                                           l3981 07C7  
                                         l3973 07AC                                           l2999 0B67  
                                         l3895 0531                                           l3887 051A  
                                         l3879 04F8                                           l3991 0E22  
                                         l3959 079F                                           l3799 060D  
                                         l3983 07DF                                           l3975 07B2  
                                         l3897 053C                                           l3889 051E  
                                         l3993 0E3B                                           l3985 07E3  
                                         l3977 07B3                                           l3969 07A6  
                                         l3899 0540                                           l3987 07F0  
                                         l3979 07C3                                           l3997 0F85  
                                         l3989 07F4                                           l3999 0F92  
                                         STR_1 0830                                           STR_2 086D  
                                         STR_3 0859                                           STR_4 0845  
                                         STR_5 0819                                           STR_6 0800  
                                         STR_7 0800                                           u3000 02E6  
                                         u3001 02E5                                           u3010 0305  
                                         u3011 0304                                           u2300 0F06  
                                         u3020 031D                                           u2301 0F05  
                                         u3021 031C                                           _LATA 010C  
                                         u2310 0F0B                                           u3030 033C  
                                         _LATB 010D                                __end_of_INT_ISR 0AC1  
                                         u2311 0F0A                                           u3031 033B  
                                         _LATC 010E                                           u2400 0BC8  
                                         u2320 0F1A                                           u3040 0354  
                                         u2401 0BC7                                           u2321 0F19  
                                         u3041 0353                                           u2330 0F38  
                                         u2410 0E62                                           u2331 0F37  
                                         u2411 0E61                                           u3107 0EE9  
                                         u2340 059B                                           u3060 04BA  
                                         u2341 059A                                           u3117 03AF  
                                         u3061 04B9                                           u2510 0559  
                                         u2350 05BE                                           u3070 04D0  
                                         u2511 0558                                           u2335 0F34  
                                         u2351 05BD                                           u3207 0D52  
                                         u3127 0F98                                           u3071 04CF  
                                         u2360 0DE6                                           u2440 0E80  
                                         u3080 04EF                                           u2505 0541  
                                         u2361 0DE5                                           u3217 0D29  
                                         u3137 0FAB                                           u2441 0E7F  
                                         u2425 0E6B                                           u3081 04EE  
                                         u3065 04B6                                           u2530 056F  
                                         u2450 04FE                                           u2290 0B23  
                                         u2610 0785                                           u2370 061B  
                                         u3227 0DA3                                           u2531 056E  
                                         u2515 0555                                           u2451 04FD  
                                         u2291 0B22                                           u3147 0FC5  
                                         u2611 0784                                           u2435 0E72  
                                         u2371 061A                                           u3075 04CC  
                                         u2540 0574                                           u2460 050F  
                                         u2700 045A                                           u2380 0650  
                                         u3237 0DB6                                           u2541 0573  
                                         u2525 0563                                           u2461 050E  
                                         u3157 0FD8                                           u2605 0777  
                                         u2701 0459                                           u2381 064F  
                                         u2470 052E                                           u2630 0795  
                                         u2550 074A                                           u2710 0719  
                                         u2390 0669                                           u2471 052D  
                                         u3167 0CDD                                           u2631 0794  
                                         u2615 0781                                           u2551 0749  
                                         u2711 0718                                           u2391 0668  
                                         u2375 0617                                           u2640 079A  
                                         u2560 0755                                           u2720 072C  
                                         u2800 010D                                           u3177 0D01  
                                         u2641 0799                                           u2625 078B  
                                         u2561 0754                                           u2721 072B  
                                         u2801 010C                                           u3097 0EDA  
                                         u2490 0540                                           u2570 0766  
                                         u2730 073E                                           u2650 07B2  
                                         u2810 0116                                           u2491 053F  
                                         u3187 0D7C                                           u2571 0765  
                                         u2731 073D                                           u2715 0715  
                                         u2651 07B1                                           u2811 0115  
                                         u2660 0E2F                                           u2900 01D3  
                                         u2820 011E                                           u2740 0F00  
                                         u2485 0532                                           u2661 0E2E  
                                         u3197 0C93                                           u2725 0728  
                                         u2901 01D2                                           u2821 011D  
                                         u2741 0EFF                                           u2670 0E3A  
                                         u2590 0776                                           u2910 01F2  
                                         u2830 0145                                           u2750 0095  
                                         u2671 0E39                                           u2591 0775  
                                         u2911 01F1                                           u2831 0144  
                                         u2751 0094                                           u2680 0429  
                                         u2920 020A                                           u2840 014E  
                                         u2760 00A6                                           u2585 076A  
                                         u2921 0209                                           u2841 014D  
                                         u2761 00A5                                           u2745 0EFC  
                                         i1l10 0AC5                                           u2690 0450  
                                         u2930 0229                                           u2850 016D  
                                         u2770 00D0                                           u2691 044F  
                                         u2931 0228                                           u2851 016C  
                                         u2771 00CF                                           u2940 0241  
                                         u2860 0176                                           u2780 00E2  
                                         u2685 0425                                           u2941 0240  
                                         u2861 0175                                           u2781 00E1  
                                         u2765 00A2                                           u2950 0260  
                                         u2870 0185                                           u2790 0104  
                                         u2695 044C                                           u2951 025F  
                                         u2871 0184                                           u2791 0103  
                                         u2960 0278                                           u2880 019B  
                                         u2961 0277                                           u2881 019A  
                                         u2785 00DE                                           u2970 0297  
                                         u2890 01BB                                           u2971 0296  
                                         u2891 01BA                                           u2980 02AF  
                                         u2981 02AE                                           u2990 02CE  
                                         u2991 02CD                                           _TMR0 0015  
                                         _TMR1 0016                                           _TMR2 001A  
                                         _TMR4 0415                        __end_of_OPA2_Initialize 0ABC  
                                         _WPUA 020C                                           _WPUB 020D  
                                         _WPUC 020E                                           _dbuf 0120  
                                         _main 0462                                           _prec 00A4  
                                         _nout 00A0                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                                           btemp 007E  
                            ?_FLASH_WriteBlock 0020            __end_of_INT_DefaultInterruptHandler 06DE  
                  _INT_DefaultInterruptHandler 0672                                           start 004B  
              __end_of_INT_SetInterruptHandler 0AE9                             ??_FLASH_WriteBlock 0023  
                   ??_TMR1_SetInterruptHandler 0075                     ??_TMR4_SetInterruptHandler 0075  
                      __end_of_TMR0_Initialize 0B72                 ??_TMR0_DefaultInterruptHandler 0070  
                                ?_EUSART_Write 0070                 __size_of_OSCILLATOR_Initialize 0008  
                __end_of_OSCILLATOR_Initialize 0B15                                __end_of___aldiv 0588  
                                        ?_main 0070                                __end_of___awdiv 07A4  
                                        _ADRES 009B                                ___awdiv@divisor 0073  
                                        _T2CON 001C                                          _T4CON 0417  
                                        i1l114 0AAF                                          i1l152 003B  
                                        i1l144 0012                                          i1l146 001E  
                                        i1l147 0049                                          i1l155 0049  
                                        i1l148 002A                                          i1l431 0EB7  
                                        i1l415 0B4E                                          i1l264 0AC0  
                                        i1l434 0EC4                                          i1l268 0B3F  
                                        i1l508 0BC1                                          i1l365 0AB0  
                                        i1l278 06DC                                          i1l359 0B5F  
                                        i1l519 0C42                                          i1l289 06DD  
                                 ?_setLEDColor 0073                                ___awdiv@counter 0020  
                                 vfpfcnvrt@fmt 0025                       __size_of_selectSomething 005B  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          _RXPPS 0E24  
            __size_of_TMR0_SetInterruptHandler 0006                                _TMR4_Initialize 0B84  
                          ___lmul@multiplicand 0024                      ?_TMR0_SetInterruptHandler 0073  
                             __end_of_TMR0_ISR 0B60                               __end_of_TMR1_ISR 0BC2  
                             __end_of_TMR4_ISR 0B4F                                __end_of_initLED 0F85  
                      __end_of_PIN_MANAGER_IOC 0AB0                                          _flags 00A6  
                               _WDT_Initialize 0AB1                                          _fputc 0F01  
                          _readPersistentState 0C43                                          _width 00A2  
                                        _putch 0AFB                                          _stats 01A0  
                      __end_of_TMR1_Initialize 0BF1                                          pclath 000A  
                              __end_of_startUp 0F01                                          status 0003  
                      ?_process_remote_command 0070                                          wtemp0 007E  
                             ??_DAC_Initialize 0073                                __initialization 004D  
                                 __end_of_main 04F8                           ?_readPersistentState 0070  
                        __end_of_selectCurrent 0D3F                                 ??_EUSART_Write 0073  
                      __end_of_TMR2_Initialize 0B1D                    ?_INTERRUPT_InterruptManager 0070  
                             ?_OPA1_Initialize 0070                         ??_selectFrequencyValue 0039  
                                       ??_main 00EA                       __size_of_battery_voltage 0033  
                __size_of_writePersistentState 005C                       ?_TMR4_LoadPeriodRegister 0070  
                       __end_of_WDT_Initialize 0AB4                                      ??_INT_ISR 0073  
            _EUSART_DefaultFramingErrorHandler 0000                                         _ADCON0 009D  
                                       _ADCON1 009E                     _EUSART_OverrunErrorHandler 00DF  
                    FLASH_WriteBlock@writeAddr 0020                                         ?_fputc 0075  
                                       _CCPR1L 0291                               ___awdiv@dividend 0075  
                                       _ANSELA 018C                                         ?_putch 0070  
                                       _ANSELB 018D                                         _ANSELC 018E  
                                       _BORCON 0116                                         _RC1REG 0199  
                                       _RA5PPS 0E95                                         _RC1STA 019D  
                                       _RC4PPS 0EA4                                         _RB7PPS 0E9F  
                                       _RC5PPS 0EA5                                         i1l3021 0B3A  
                                       i1l3031 0E9A                                         i1l3023 0E89  
                                       i1l3041 0EB2                                         i1l3033 0E9F  
                                       i1l3025 0E8E                                         _ODCONA 028C  
                                       _ODCONB 028D                                         i1l3019 0B33  
                                       i1l3051 0C2C                                         i1l3043 0EBA  
                                       i1l3035 0EA5                                         i1l3027 0E93  
                                       _ODCONC 028E                                         i1l3221 0B5A  
                                       i1l3053 0C2E                                         i1l3061 0C3C  
                                       i1l3037 0EAC                                         i1l3045 0EBE  
                                       i1l3029 0E99                                         i1l3223 0ABC  
                                       i1l3215 0B4F                                         i1l3063 0C41  
                                       i1l3055 0C32                                         i1l3047 0EC3  
                                       i1l3039 0EB0                                         i1l3231 0B49  
                                       i1l3225 0ABD                                         i1l3217 0B50  
                                       i1l3057 0C37                                         i1l3049 0C26  
                                       i1l3233 0BAB                                         i1l3219 0B53  
                                       i1l3059 0C38                                         i1l3235 0BAD  
                                       i1l3227 0B40                 __end_of_process_remote_command 03BD  
                                       i1l2701 068F                                         i1l3237 0BB5  
                                       i1l3229 0B42                                         i1l2711 06A8  
                                       i1l2703 0696                                         i1l3239 0BBC  
                                       u130_20 06AE                                         i1l2721 06BD  
                                       i1l2713 06AE                                         u130_21 06AD  
                                       i1l2705 069C                                         i1l2723 06C3  
                                       i1l2707 06A2                                         i1l2717 06B5  
                                       i1l2709 06A3                                         i1l2719 06B7  
                                       u131_20 06B4                                         u131_21 06B3  
                                       i1l2729 06C8                                         i1l2673 0AC2  
                                       i1l3561 000E                                         i1l2691 067D  
                                       i1l2683 0672                                         i1l3571 002E  
                                       i1l3563 0016                                         i1l2693 067F  
                                       i1l2685 0677                                         i1l3573 0033  
                                       i1l3565 001A                                         i1l3557 0006  
                                       i1l2695 0685                                         i1l2687 0678  
                                       i1l3575 0038                                         i1l3567 0022  
                                       i1l3559 000A                                         u132_20 06BD  
                                       u124_20 067C                                         u220_20 002E  
                                       u132_21 06BC                                         i1l2697 068B  
                                       i1l2689 067C                                         u124_21 067B  
                                       i1l3577 0040                                         u220_21 002D  
                                       i1l3569 0026                                         i1l2699 068C  
                                       i1l3579 0045                                         i1l4485 06D1  
                                       u133_20 06C3                                         u125_20 0685  
                                       u221_20 0033                                         u133_21 06C2  
                                       u125_21 0684                                         u221_21 0032  
                                       u126_20 068B                                         u222_20 0038  
                                       u214_20 000A                                         u126_21 068A  
                                       u222_21 0037                                         u214_21 0009  
                                       u223_20 0040                                         u215_20 000E  
                                       u223_21 003F                                         u215_21 000D  
                                       u127_25 0690                                         u128_20 069C  
                                       u224_20 0045                                         u216_20 0016  
                                       u128_21 069B                                         u224_21 0044  
                                       u216_21 0015                                         _INLVLA 038C  
                                       _INLVLB 038D                                         _INLVLC 038E  
                                       u129_20 06A2                                         u217_20 001A  
                                       u129_21 06A1                                         u217_21 0019  
                                       u162_20 0B3A                                         u218_20 0022  
                                       u162_21 0B39                                         u218_21 0021  
                                       u163_20 0E8E                                         u219_20 0026  
                                       _FVRCON 0117                                         u163_21 0E8D  
                                       u219_21 0025                                         u180_20 0BBC  
                                       u164_20 0E99                                         u180_21 0BBB  
                                       u164_21 0E98                                         u165_20 0EA5  
                                       u165_21 0EA4                                         u166_20 0EAC  
                                       u166_21 0EAB                                         u167_20 0C2C  
                                       u167_21 0C2B                                         u168_20 0C41  
                                       u168_21 0C40                                         _INTPPS 0E10  
                                       _PMADRH 0192                                         _PMADRL 0191  
                                       u178_20 0B5A                               ?_OPA2_Initialize 0070  
                                       u178_21 0B59                                         _PMDATH 0194  
                                       u179_20 0B49                                         _PMDATL 0193  
                                       u179_21 0B48                                         _PMCON2 0196  
                    __size_of_FLASH_EraseBlock 001C                                         _OSCCON 0099  
                                       _TX1REG 019A                                         _WDTCON 0097  
                                       _TX1STA 019E                               _LATCH_Initialize 0002  
                            ??_selectFrequency 0039                                 _selectDecrease 0C85  
                                       _Vdd_mv 00A8           __end_of_TMR1_DefaultInterruptHandler 0C43  
        __size_of_TMR1_DefaultInterruptHandler 001D                   _TMR1_DefaultInterruptHandler 0C26  
                                 vfprintf@cfmt 0033                          ??_readPersistentState 0073  
                                       ___lmul 0E55                                      ??___aldiv 0030  
                                    ??___awdiv 0077                               ?_TMR0_Initialize 0070  
                      __end_of_TMR4_Initialize 0B97                               ___awdiv@quotient 0022  
                               _selectIncrease 0CCC                                         _printf 0B72  
                                       _toggle 00AF                                  ?_INT_CallBack 0070  
                                    ??_initLED 0073           __end_of_TMR4_DefaultInterruptHandler 0EC5  
        __size_of_TMR4_DefaultInterruptHandler 003C                   _TMR4_DefaultInterruptHandler 0E89  
                                       fputc@c 0075                                   __pdataCOMMON 007A  
                             setCurrent@Vdd_mv 003B                                ?_WDT_Initialize 0070  
                   __end_of_selectCurrentValue 0D68               __size_of_INT_SetInterruptHandler 0006  
                             __end_of_vfprintf 0DEF                                      ??_startUp 0020  
     TMR1_SetInterruptHandler@InterruptHandler 0073       TMR4_SetInterruptHandler@InterruptHandler 0073  
     TMR0_SetInterruptHandler@InterruptHandler 0073        INT_SetInterruptHandler@InterruptHandler 0073  
                             ?_PIN_MANAGER_IOC 0070                              ??_selectSomething 0020  
                             ?_TMR1_Initialize 0070                              _SYSTEM_Initialize 0CA7  
                      __end_of__initialization 0083                         __end_of_selectDecrease 0CA7  
                           ?_SYSTEM_Initialize 0070                         DAC_SetOutput@inputData 0070  
                            _dc_frequency_flag 007A                                 __pcstackCOMMON 0070  
                                 __pidataBANK1 0BF1                                   __pidataBANK2 0B97  
                          ??_SYSTEM_Initialize 0075                                      ?_TMR0_ISR 0070  
                                    ?_TMR1_ISR 0070                  ?_TMR1_DefaultInterruptHandler 0070  
                                    ?_TMR4_ISR 0070                         __end_of_selectIncrease 0CF1  
                                __end_of_fputc 0F41                                  __end_of_putch 0B01  
                             ?_TMR2_Initialize 0070                __end_of_TMR4_LoadPeriodRegister 0ACB  
                        main@low_reading_count 00EB                                 ??_INT_CallBack 0073  
                  __size_of_EXT_INT_Initialize 000C                                 _OPTION_REGbits 0095  
                ?_TMR4_DefaultInterruptHandler 0070                         __size_of_DAC_SetOutput 0005  
                         __size_of_setLEDColor 0017                    FLASH_WriteBlock@GIEBitValue 0028  
              ??_EUSART_SetOverrunErrorHandler 0075                              ??_battery_voltage 0078  
                                      ??_fputc 0020                      __end_of_SYSTEM_Initialize 0CCC  
                                      ??_putch 0074                                  ?_setFrequency 0037  
                                   __pbssBANK1 00A0                                     __pbssBANK2 0120  
                                   __pbssBANK3 01A0                           __end_of_EUSART_Write 0B27  
                              ?_selectDecrease 0070                          _TMR4_InterruptHandler 00D7  
                                   __pmaintext 0462               __end_of_TMR0_SetInterruptHandler 0AEF  
                                      ?___lmul 0020                                     ??_TMR0_ISR 0070  
                                   ??_TMR1_ISR 0071                                     ??_TMR4_ISR 0072  
                                   __pintentry 0004                                ?_selectIncrease 0070  
                               ___lmul@product 0073                               ?_TMR4_Initialize 0070  
                                      ?_printf 0035                      __size_of_FLASH_WriteBlock 006C  
                                      _OPA1CON 0511                                        _OPA2CON 0515  
                                      _LED_red 00AE                                        _SP1BRGH 019C  
                                      _SP1BRGL 019B                                        _INT_ISR 0ABC  
                           __size_of_vfpfcnvrt 007E                              _maxFrequencyIndex 00BA  
                                      _OSCSTAT 009A                                        _OSCTUNE 0098  
                                      _PWM3DCH 0618                                        _PWM4DCH 061B  
                                      _SLRCONA 030C                                        _SLRCONB 030D  
                                      _SLRCONC 030E                       ??_EUSART_SetErrorHandler 0075  
                               ??_setFrequency 0039                                _maxCurrentIndex 00BC  
                             _FLASH_EraseBlock 0C0A                                  _DAC_SetOutput 0AC1  
                                      ___aldiv 04F8                                        ___awdiv 0744  
                              __size_of___lmul 0034                                      ?_vfprintf 002D  
                                      __ptext1 0EC5                                        __ptext2 0C43  
                                      __ptext3 0087                                        __ptext4 07A4  
                                      __ptext5 0606                                        __ptext6 0C0A  
                                      __ptext7 06DE                                        __ptext8 0AC6  
                                      __ptext9 03BD                                __size_of_printf 0012  
               ??_TMR1_DefaultInterruptHandler 0071                       __end_of_LATCH_Initialize 0003  
                                      _initLED 0F41                                      _T1CONbits 0018  
                                      _ir_code 00B4                                     _lowBattery 0D92  
                        _OSCILLATOR_Initialize 0B0D                                      _T2CONbits 001C  
            __size_of_TMR1_SetInterruptHandler 0006                               ___aldiv@dividend 002C  
                                    _T4CONbits 0417                       ??_PIN_MANAGER_Initialize 0073  
            __size_of_TMR4_SetInterruptHandler 0006                      ?_TMR1_SetInterruptHandler 0073  
                      _INT_SetInterruptHandler 0AE3                      ?_TMR4_SetInterruptHandler 0073  
                              _selectFrequency 0D68                                        _startUp 0EC5  
                   __size_of_SYSTEM_Initialize 0025                                        clrloop0 0B02  
                         end_of_initialization 0083                 ??_TMR4_DefaultInterruptHandler 0071  
                                   _setCurrent 03BD          __end_of_EUSART_SetOverrunErrorHandler 0AE3  
       __size_of_EUSART_SetOverrunErrorHandler 0006                  _EUSART_SetOverrunErrorHandler 0ADD  
                 __end_of_writePersistentState 0800                                      _LED_green 00AD  
                                      fputc@fp 0077                                        init_ram 0B07  
                                      initloop 0B08                           __end_of_INT_CallBack 0B40  
             __size_of_TMR4_LoadPeriodRegister 0005                              _EUSART_Initialize 0C63  
                               _frequencyIndex 00E3                              setCurrent@Vdac_mv 0045  
                               ?_DAC_SetOutput 0070                                 _frequencyValue 0140  
                __end_ofmain@BATTERY_THRESHOLD 0882                             ?_EUSART_Initialize 0070  
                            __end_of_vfpfcnvrt 0606                               ___aldiv@quotient 0033  
                                   ??_vfprintf 0030                                setLEDColor@blue 0074  
                          ??_EUSART_Initialize 0075                               ??_WDT_Initialize 0073  
                     _TMR0_SetInterruptHandler 0AE9                                _selectSomething 0F85  
                      writePersistentState@buf 002E                        writePersistentState@idx 006F  
                __size_of_selectFrequencyValue 0026                          __size_of_EUSART_Write 000A  
                     __size_of_OPA1_Initialize 0004                __size_of_EUSART_SetErrorHandler 0006  
                       __size_of_selectCurrent 0028                      __end_of_EUSART_Initialize 0C85  
                                  _CCP1CONbits 0293                    __end_of_readPersistentState 0C63  
                           _selectCurrentValue 0D3F                              FLASH_WriteBlock@i 0029  
                     __size_of_OPA2_Initialize 0004                            ?_selectCurrentValue 0070  
                         __end_of_setFrequency 0744                                 __end_of___lmul 0E89  
                   _EUSART_DefaultErrorHandler 0000                                    vfpfcnvrt@ap 0026  
                                  vfpfcnvrt@fp 002C                                _battery_voltage 0E22  
                                __pidataCOMMON 0003                                   _EUSART_Write 0B1D  
                            __size_of_TMR0_ISR 0011                              __size_of_TMR1_ISR 0017  
                            __size_of_TMR4_ISR 000F                               _FLASH_WriteBlock 0606  
                       ?_OSCILLATOR_Initialize 0070                        __end_of_selectFrequency 0D92  
                    ??_INT_SetInterruptHandler 0075                        __size_of_DAC_Initialize 0006  
                                  ?_lowBattery 0070                                 __end_of_printf 0B84  
                 __p_HEF_persistent_state_text 0FE0                            start_initialization 004D  
                     __size_of_TMR0_Initialize 0012                __size_of_PIN_MANAGER_Initialize 0033  
                             ??_selectDecrease 0039                           ??_selectCurrentValue 0039  
                                  putch@txData 0074                                    ?_setCurrent 0039  
                              ??_DAC_SetOutput 0070                       __size_of_PIN_MANAGER_IOC 0001  
                 ?_INT_DefaultInterruptHandler 0070                               ??_selectIncrease 0039  
               ?_EUSART_SetOverrunErrorHandler 0073                       __size_of_TMR1_Initialize 0018  
                                  vfprintf@fmt 002D                     _EUSART_FramingErrorHandler 00E1  
                      __end_of_selectSomething 0FE0                                       ??___lmul 0073  
                       _EUSART_SetErrorHandler 0AD1                                    _CCPTMRSbits 029E  
                                _selectCurrent 0D17                                    __pdataBANK1 00BA  
                                  __pdataBANK2 0140                    FLASH_EraseBlock@GIEBitValue 0075  
                   __end_of_EXT_INT_Initialize 0B33                       __end_of_FLASH_EraseBlock 0C26  
                                     ??_printf 0037                           _writePersistentState 07A4  
                                ??_setLEDColor 0075                          writePersistentState@i 006E  
                                  __pbssCOMMON 0078                                      ___latbits 0001  
                     ??_process_remote_command 00E7                                       ?_INT_ISR 0070  
                                __pcstackBANK0 0020                                  __pcstackBANK1 00E7  
                     __size_of_TMR2_Initialize 0008                          __size_of_INT_CallBack 000D  
                                    _dac_value 00B2                        _TMR4_LoadPeriodRegister 0AC6  
                   __size_of_EUSART_Initialize 0022                                   _currentIndex 00E5  
                            ??_OPA1_Initialize 0073                                   _currentValue 00BF  
                        _TMR0_InterruptHandler 00D9                                      __pnvBANK1 00D3  
                                 _oneHzCounter 00B1                            __size_of_lowBattery 002C  
                       _PIN_MANAGER_Initialize 0DEF                        __end_of_battery_voltage 0E55  
                ??_INT_DefaultInterruptHandler 0070               __end_of_TMR1_SetInterruptHandler 0AF5  
                                     ?___aldiv 0028               __end_of_TMR4_SetInterruptHandler 0AFB  
                               ?_selectCurrent 0070                                       ?___awdiv 0073  
                                     _DAC1CON0 0118                                       _DAC1CON1 0119  
                 ??_INTERRUPT_InterruptManager 0073                            __size_of_setCurrent 00A5  
                        ?_writePersistentState 0070                              ??_OPA2_Initialize 0073  
                            __size_of_vfprintf 0031                               ?_selectFrequency 0070  
                                 _INT_CallBack 0B33                                       _BAUD1CON 019F  
                                     ?_initLED 0070                              ?_LATCH_Initialize 0070  
                           ??_LATCH_Initialize 0073                       __size_of_TMR4_Initialize 0013  
                                     ?_startUp 0070                            __end_of_setLEDColor 0BD9  
                               __size_of_fputc 0040                                      _microamps 00AA  
                               __size_of_putch 0006                 FLASH_WriteBlock@blockStartAddr 0026  
         __end_ofmain@BATTERY_NUM_LOW_READINGS 0884                   main@BATTERY_NUM_LOW_READINGS 0882  
                              ___aldiv@divisor 0028                              ??_TMR0_Initialize 0075  
                              ___aldiv@counter 0031         EUSART_SetErrorHandler@interruptHandler 0073  
                                     _LED_blue 00AC                                      clear_ram0 0B01  
                                     _PIE1bits 0091                                       _PIE2bits 0092  
                            _eusartRxLastError 00B3                   _HEF_persistent_state_absaddr 0FE0  
                        __size_of_setFrequency 0066            __size_of_INTERRUPT_InterruptManager 0047  
                   ??_TMR0_SetInterruptHandler 0075                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 0075                                       _PIR2bits 0012  
                    FLASH_EraseBlock@startAddr 0073                               ?_selectSomething 0070  
                               setLEDColor@red 0076                                       _TMR0_ISR 0B4F  
            _EUSART_DefaultOverrunErrorHandler 0000                                       _TMR1_ISR 0BAB  
                                     _TMR4_ISR 0B40                              ??_PIN_MANAGER_IOC 0070  
                                    _vfpfcnvrt 0588                              ??_TMR1_Initialize 0075  
                                   _ADCON0bits 009D                                 _DAC_Initialize 0ACB  
         __size_of_INT_DefaultInterruptHandler 006C                __size_of_process_remote_command 0336  
                             __size_of_INT_ISR 0005                      ??_TMR4_LoadPeriodRegister 0073  
                            ___lmul@multiplier 0020                                    _latchTester 00B0  
                                 _setFrequency 06DE                              ??_TMR2_Initialize 0073  
                 __end_of_HEF_persistent_state 1000                       __end_of_FLASH_WriteBlock 0672  
                 __end_of_selectFrequencyValue 0D17                                ??_selectCurrent 0039  
                             ?_battery_voltage 0037                                     vfprintf@ap 002F  
                                   vfprintf@fp 0032                          main@BATTERY_THRESHOLD 0880  
                      ??_OSCILLATOR_Initialize 0073                            _EUSART_ErrorHandler 00DD  
                             __size_of___aldiv 0090                               __size_of___awdiv 0060  
                       ??_writePersistentState 002A                         __end_of_DAC_Initialize 0AD1  
                                   ?_vfpfcnvrt 0025                            setFrequency@PR4_val 003A  
                     _TMR1_SetInterruptHandler 0AEF                       _TMR4_SetInterruptHandler 0AF5  
                                 ??_lowBattery 0020                          _TMR1_InterruptHandler 00D3  
                                  _currentIsOn 00BE                                    _setLEDColor 0BC2  
                           setCurrent@DACValue 0047                               __size_of_initLED 0044  
                                     __ptext10 0E55                                       __ptext11 0744  
                                     __ptext20 0DBE                                       __ptext12 0F85  
                                     __ptext21 0588                                       __ptext13 0CCC  
                                     __ptext30 0CA7                                       __ptext22 0F01  
                                     __ptext14 0CF1                                       __ptext31 0AB1  
                                     __ptext23 0AFB                                       __ptext15 0D68  
                                     __ptext40 0B0D                                       __ptext32 0B84  
                                     __ptext24 0B1D                                       __ptext16 0C85  
                                     __ptext41 0AB8                                       __ptext33 0AF5  
                                     __ptext25 0E22                                       __ptext17 0D3F  
                                     __ptext50 0002                                       __ptext42 0AB4  
                                     __ptext34 0B15                                       __ptext26 04F8  
                                     __ptext18 0D17                                       __ptext43 0B27  
                                     __ptext35 0BD9                                       __ptext27 0D92  
                                     __ptext19 0B72                                       __ptext60 0ABC  
                                     __ptext52 0B40                                       __ptext44 0AE3  
                                     __ptext36 0AEF                                       __ptext28 0BC2  
                                     __ptext61 0B33                                       __ptext53 0E89  
                                     __ptext45 0C63                                       __ptext37 0B60  
                                     __ptext29 0F41                                       __ptext62 0672  
                                     __ptext54 0BAB                                       __ptext46 0ADD  
                                     __ptext38 0AE9                                       __ptext55 0C26  
                                     __ptext47 0AD7                                       __ptext39 0DEF  
                                     __ptext56 0AC1                                       __ptext48 0AD1  
                                     __ptext57 0B4F                                       __ptext49 0ACB  
                                     __ptext58 0AB0                                       __ptext59 0AAF  
                             __size_of_startUp 003C                                   ??_setCurrent 003D  
                               _interfaceState 0078                              ??_TMR4_Initialize 0075  
                                __size_of_main 0096           __end_of_TMR0_DefaultInterruptHandler 0AB1  
        __size_of_TMR0_DefaultInterruptHandler 0001                   _TMR0_DefaultInterruptHandler 0AB0  
                      ?_EUSART_SetErrorHandler 0073                         _process_remote_command 0087  
                                   _RC1STAbits 019D                             __end_of_lowBattery 0DBE  
EUSART_SetOverrunErrorHandler@interruptHandler 0073                                       int$flags 007E  
                 __size_of_readPersistentState 0020                                       _vfprintf 0DBE  
           __end_of_INTERRUPT_InterruptManager 004B                     _INTERRUPT_InterruptManager 0004  
                                    printf@fmt 0035          __end_of_EUSART_SetFramingErrorHandler 0ADD  
       __size_of_EUSART_SetFramingErrorHandler 0006                  _EUSART_SetFramingErrorHandler 0AD7  
                              ?_DAC_Initialize 0070                              ?_FLASH_EraseBlock 0073  
                           __end_of_setCurrent 0462                             ??_FLASH_EraseBlock 0075  
                                   _INTCONbits 000B                INT_DefaultInterruptHandler@time 0072  
                                  _PWM3DCLbits 0617                                _OPA1_Initialize 0AB4  
                                  _PWM4DCLbits 061A                                     _FVRCONbits 0117  
                         _INT_InterruptHandler 00DB                                    _PWM3CONbits 0619  
                                  _PWM4CONbits 061C                             _EXT_INT_Initialize 0B27  
                      __size_of_WDT_Initialize 0003                    __size_of_selectCurrentValue 0029  
                                     intlevel1 0000                                     _PMCON1bits 0195  
                      ?_PIN_MANAGER_Initialize 0070                     process_remote_command@code 00E9  
               __end_of_EUSART_SetErrorHandler 0AD7                            ?_EXT_INT_Initialize 0070  
                        __end_of_DAC_SetOutput 0AC6                                _OPA2_Initialize 0AB8  
                ?_TMR0_DefaultInterruptHandler 0070                                       printf@ap 0038  
EUSART_SetFramingErrorHandler@interruptHandler 0073                       ?_INT_SetInterruptHandler 0073  
                                  ??_vfpfcnvrt 0027                                       startUp@i 0022  
                                __pstringtext1 0880                                  __pstringtext2 0882  
                                __pstringtext3 0800                                  __pstringtext4 0819  
                                __pstringtext5 0830                                  __pstringtext6 0845  
                                __pstringtext7 0859                                  __pstringtext8 086D  
                                __pstringtext9 0000                           ??_EXT_INT_Initialize 0075  
                                   _OPTION_REG 0095                           _HEF_persistent_state 0FE0  
                             setLEDColor@green 0073                           _selectFrequencyValue 0CF1  
                              _TMR0_Initialize 0B60                            setCurrent@microamps 0039  
                                 ___aldiv@sign 0032                                     _TX1STAbits 019E  
                     setFrequency@frequency_hz 0037                             EUSART_Write@txData 0073  
               __end_of_PIN_MANAGER_Initialize 0E22                                _PIN_MANAGER_IOC 0AAF  
                    __size_of_LATCH_Initialize 0001                                _TMR1_Initialize 0BD9  
                      __size_of_selectDecrease 0022               TMR4_LoadPeriodRegister@periodVal 0073  
