

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Oct 26 17:10:34 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16LF1708
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=2,noexec
     7                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     9                           	psect	_HEF_persistent_state_text,global,class=STRCODE,delta=2,noexec
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    15                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    16                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    17                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    20                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    21                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    22                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    23                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    24                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,noexec
    25                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    26                           	psect	inittext,global,class=CODE,delta=2
    27                           	psect	clrtext,global,class=CODE,delta=2
    28                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    29                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    30                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    31                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    32                           	psect	text1,local,class=CODE,merge=1,delta=2
    33                           	psect	text2,local,class=CODE,merge=1,delta=2
    34                           	psect	text3,local,class=CODE,merge=1,delta=2
    35                           	psect	text4,local,class=CODE,merge=1,delta=2
    36                           	psect	text5,local,class=CODE,merge=1,delta=2
    37                           	psect	text6,local,class=CODE,merge=1,delta=2
    38                           	psect	text7,local,class=CODE,merge=1,delta=2
    39                           	psect	text8,local,class=CODE,merge=1,delta=2
    40                           	psect	text9,local,class=CODE,merge=1,delta=2
    41                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text12,local,class=CODE,merge=1,delta=2
    44                           	psect	text13,local,class=CODE,merge=1,delta=2
    45                           	psect	text14,local,class=CODE,merge=1,delta=2
    46                           	psect	text15,local,class=CODE,merge=1,delta=2
    47                           	psect	text16,local,class=CODE,merge=1,delta=2
    48                           	psect	text17,local,class=CODE,merge=1,delta=2
    49                           	psect	text18,local,class=CODE,merge=1,delta=2
    50                           	psect	text19,local,class=CODE,merge=1,delta=2,group=3
    51                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text22,local,class=CODE,merge=1,delta=2,group=3
    54                           	psect	text23,local,class=CODE,merge=1,delta=2
    55                           	psect	text24,local,class=CODE,merge=1,delta=2
    56                           	psect	text25,local,class=CODE,merge=1,delta=2
    57                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text27,local,class=CODE,merge=1,delta=2
    59                           	psect	text28,local,class=CODE,merge=1,delta=2
    60                           	psect	text29,local,class=CODE,merge=1,delta=2
    61                           	psect	text30,local,class=CODE,merge=1,delta=2
    62                           	psect	text31,local,class=CODE,merge=1,delta=2
    63                           	psect	text32,local,class=CODE,merge=1,delta=2
    64                           	psect	text33,local,class=CODE,merge=1,delta=2
    65                           	psect	text34,local,class=CODE,merge=1,delta=2
    66                           	psect	text35,local,class=CODE,merge=1,delta=2
    67                           	psect	text36,local,class=CODE,merge=1,delta=2
    68                           	psect	text37,local,class=CODE,merge=1,delta=2
    69                           	psect	text38,local,class=CODE,merge=1,delta=2
    70                           	psect	text39,local,class=CODE,merge=1,delta=2
    71                           	psect	text40,local,class=CODE,merge=1,delta=2
    72                           	psect	text41,local,class=CODE,merge=1,delta=2
    73                           	psect	text42,local,class=CODE,merge=1,delta=2
    74                           	psect	text43,local,class=CODE,merge=1,delta=2
    75                           	psect	text44,local,class=CODE,merge=1,delta=2
    76                           	psect	text45,local,class=CODE,merge=1,delta=2
    77                           	psect	text46,local,class=CODE,merge=1,delta=2
    78                           	psect	text47,local,class=CODE,merge=1,delta=2
    79                           	psect	text48,local,class=CODE,merge=1,delta=2
    80                           	psect	text49,local,class=CODE,merge=1,delta=2
    81                           	psect	text50,local,class=CODE,merge=1,delta=2
    82                           	psect	intentry,global,class=CODE,delta=2
    83                           	psect	text52,local,class=CODE,merge=1,delta=2
    84                           	psect	text53,local,class=CODE,merge=1,delta=2
    85                           	psect	text54,local,class=CODE,merge=1,delta=2
    86                           	psect	text55,local,class=CODE,merge=1,delta=2
    87                           	psect	text56,local,class=CODE,merge=1,delta=2
    88                           	psect	text57,local,class=CODE,merge=1,delta=2
    89                           	psect	text58,local,class=CODE,merge=1,delta=2
    90                           	psect	text59,local,class=CODE,merge=1,delta=2
    91                           	psect	text60,local,class=CODE,merge=1,delta=2
    92                           	psect	text61,local,class=CODE,merge=1,delta=2
    93                           	psect	text62,local,class=CODE,merge=1,delta=2
    94                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    95                           	dabs	1,0x7E,2
    96  0000                     
    97                           ; Version 2.32
    98                           ; Generated 02/02/2021 GMT
    99                           ; 
   100                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   101                           ; All rights reserved.
   102                           ; 
   103                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   104                           ; 
   105                           ; Redistribution and use in source and binary forms, with or without modification, are
   106                           ; permitted provided that the following conditions are met:
   107                           ; 
   108                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   109                           ;        conditions and the following disclaimer.
   110                           ; 
   111                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   112                           ;        of conditions and the following disclaimer in the documentation and/or other
   113                           ;        materials provided with the distribution. Publication is not required when
   114                           ;        this file is used in an embedded application.
   115                           ; 
   116                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   117                           ;        software without specific prior written permission.
   118                           ; 
   119                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   120                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   121                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   122                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   123                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   124                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   125                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   126                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   127                           ; 
   128                           ; 
   129                           ; Code-generator required, PIC16LF1708 Definitions
   130                           ; 
   131                           ; SFR Addresses
   132  0000                     	;# 
   133  0001                     	;# 
   134  0002                     	;# 
   135  0003                     	;# 
   136  0004                     	;# 
   137  0005                     	;# 
   138  0006                     	;# 
   139  0007                     	;# 
   140  0008                     	;# 
   141  0009                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000D                     	;# 
   146  000E                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0013                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0016                     	;# 
   153  0017                     	;# 
   154  0018                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001B                     	;# 
   158  001C                     	;# 
   159  008C                     	;# 
   160  008D                     	;# 
   161  008E                     	;# 
   162  0091                     	;# 
   163  0092                     	;# 
   164  0093                     	;# 
   165  0095                     	;# 
   166  0096                     	;# 
   167  0097                     	;# 
   168  0098                     	;# 
   169  0099                     	;# 
   170  009A                     	;# 
   171  009B                     	;# 
   172  009B                     	;# 
   173  009C                     	;# 
   174  009D                     	;# 
   175  009E                     	;# 
   176  009F                     	;# 
   177  010C                     	;# 
   178  010D                     	;# 
   179  010E                     	;# 
   180  0111                     	;# 
   181  0112                     	;# 
   182  0113                     	;# 
   183  0114                     	;# 
   184  0115                     	;# 
   185  0116                     	;# 
   186  0117                     	;# 
   187  0118                     	;# 
   188  0119                     	;# 
   189  011C                     	;# 
   190  018C                     	;# 
   191  018D                     	;# 
   192  018E                     	;# 
   193  0191                     	;# 
   194  0191                     	;# 
   195  0192                     	;# 
   196  0193                     	;# 
   197  0193                     	;# 
   198  0194                     	;# 
   199  0195                     	;# 
   200  0196                     	;# 
   201  0199                     	;# 
   202  0199                     	;# 
   203  0199                     	;# 
   204  019A                     	;# 
   205  019A                     	;# 
   206  019A                     	;# 
   207  019B                     	;# 
   208  019B                     	;# 
   209  019B                     	;# 
   210  019B                     	;# 
   211  019B                     	;# 
   212  019C                     	;# 
   213  019C                     	;# 
   214  019C                     	;# 
   215  019D                     	;# 
   216  019D                     	;# 
   217  019D                     	;# 
   218  019E                     	;# 
   219  019E                     	;# 
   220  019E                     	;# 
   221  019F                     	;# 
   222  019F                     	;# 
   223  019F                     	;# 
   224  019F                     	;# 
   225  019F                     	;# 
   226  020C                     	;# 
   227  020D                     	;# 
   228  020E                     	;# 
   229  0211                     	;# 
   230  0211                     	;# 
   231  0212                     	;# 
   232  0212                     	;# 
   233  0213                     	;# 
   234  0213                     	;# 
   235  0214                     	;# 
   236  0214                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0216                     	;# 
   242  0216                     	;# 
   243  0217                     	;# 
   244  0217                     	;# 
   245  028C                     	;# 
   246  028D                     	;# 
   247  028E                     	;# 
   248  0291                     	;# 
   249  0291                     	;# 
   250  0292                     	;# 
   251  0293                     	;# 
   252  0293                     	;# 
   253  0298                     	;# 
   254  0298                     	;# 
   255  0299                     	;# 
   256  029A                     	;# 
   257  029A                     	;# 
   258  029E                     	;# 
   259  030C                     	;# 
   260  030D                     	;# 
   261  030E                     	;# 
   262  038C                     	;# 
   263  038D                     	;# 
   264  038E                     	;# 
   265  0391                     	;# 
   266  0392                     	;# 
   267  0393                     	;# 
   268  0394                     	;# 
   269  0395                     	;# 
   270  0396                     	;# 
   271  0397                     	;# 
   272  0398                     	;# 
   273  0399                     	;# 
   274  0415                     	;# 
   275  0416                     	;# 
   276  0417                     	;# 
   277  041C                     	;# 
   278  041D                     	;# 
   279  041E                     	;# 
   280  0511                     	;# 
   281  0515                     	;# 
   282  0617                     	;# 
   283  0618                     	;# 
   284  0619                     	;# 
   285  0619                     	;# 
   286  061A                     	;# 
   287  061B                     	;# 
   288  061C                     	;# 
   289  061C                     	;# 
   290  0691                     	;# 
   291  0692                     	;# 
   292  0693                     	;# 
   293  0694                     	;# 
   294  0695                     	;# 
   295  0696                     	;# 
   296  0697                     	;# 
   297  0698                     	;# 
   298  0699                     	;# 
   299  069A                     	;# 
   300  069B                     	;# 
   301  069C                     	;# 
   302  069D                     	;# 
   303  069E                     	;# 
   304  069F                     	;# 
   305  0E0F                     	;# 
   306  0E10                     	;# 
   307  0E11                     	;# 
   308  0E12                     	;# 
   309  0E13                     	;# 
   310  0E14                     	;# 
   311  0E15                     	;# 
   312  0E17                     	;# 
   313  0E20                     	;# 
   314  0E21                     	;# 
   315  0E22                     	;# 
   316  0E24                     	;# 
   317  0E25                     	;# 
   318  0E28                     	;# 
   319  0E29                     	;# 
   320  0E2A                     	;# 
   321  0E2B                     	;# 
   322  0E90                     	;# 
   323  0E91                     	;# 
   324  0E92                     	;# 
   325  0E94                     	;# 
   326  0E95                     	;# 
   327  0E9C                     	;# 
   328  0E9D                     	;# 
   329  0E9E                     	;# 
   330  0E9F                     	;# 
   331  0EA0                     	;# 
   332  0EA1                     	;# 
   333  0EA2                     	;# 
   334  0EA3                     	;# 
   335  0EA4                     	;# 
   336  0EA5                     	;# 
   337  0EA6                     	;# 
   338  0EA7                     	;# 
   339  0F0F                     	;# 
   340  0F10                     	;# 
   341  0F11                     	;# 
   342  0F12                     	;# 
   343  0F13                     	;# 
   344  0F14                     	;# 
   345  0F15                     	;# 
   346  0F16                     	;# 
   347  0F17                     	;# 
   348  0F18                     	;# 
   349  0F19                     	;# 
   350  0F1A                     	;# 
   351  0F1B                     	;# 
   352  0F1C                     	;# 
   353  0F1D                     	;# 
   354  0F1E                     	;# 
   355  0F1F                     	;# 
   356  0F20                     	;# 
   357  0F21                     	;# 
   358  0F22                     	;# 
   359  0F23                     	;# 
   360  0F24                     	;# 
   361  0F25                     	;# 
   362  0F26                     	;# 
   363  0F27                     	;# 
   364  0F28                     	;# 
   365  0F29                     	;# 
   366  0F2A                     	;# 
   367  0F2B                     	;# 
   368  0F2C                     	;# 
   369  0F2D                     	;# 
   370  0FE4                     	;# 
   371  0FE5                     	;# 
   372  0FE6                     	;# 
   373  0FE7                     	;# 
   374  0FE8                     	;# 
   375  0FE9                     	;# 
   376  0FEA                     	;# 
   377  0FEB                     	;# 
   378  0FED                     	;# 
   379  0FEE                     	;# 
   380  0FEF                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  0011                     	;# 
   397  0012                     	;# 
   398  0013                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0016                     	;# 
   402  0017                     	;# 
   403  0018                     	;# 
   404  0019                     	;# 
   405  001A                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  008C                     	;# 
   409  008D                     	;# 
   410  008E                     	;# 
   411  0091                     	;# 
   412  0092                     	;# 
   413  0093                     	;# 
   414  0095                     	;# 
   415  0096                     	;# 
   416  0097                     	;# 
   417  0098                     	;# 
   418  0099                     	;# 
   419  009A                     	;# 
   420  009B                     	;# 
   421  009B                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009E                     	;# 
   425  009F                     	;# 
   426  010C                     	;# 
   427  010D                     	;# 
   428  010E                     	;# 
   429  0111                     	;# 
   430  0112                     	;# 
   431  0113                     	;# 
   432  0114                     	;# 
   433  0115                     	;# 
   434  0116                     	;# 
   435  0117                     	;# 
   436  0118                     	;# 
   437  0119                     	;# 
   438  011C                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  018E                     	;# 
   442  0191                     	;# 
   443  0191                     	;# 
   444  0192                     	;# 
   445  0193                     	;# 
   446  0193                     	;# 
   447  0194                     	;# 
   448  0195                     	;# 
   449  0196                     	;# 
   450  0199                     	;# 
   451  0199                     	;# 
   452  0199                     	;# 
   453  019A                     	;# 
   454  019A                     	;# 
   455  019A                     	;# 
   456  019B                     	;# 
   457  019B                     	;# 
   458  019B                     	;# 
   459  019B                     	;# 
   460  019B                     	;# 
   461  019C                     	;# 
   462  019C                     	;# 
   463  019C                     	;# 
   464  019D                     	;# 
   465  019D                     	;# 
   466  019D                     	;# 
   467  019E                     	;# 
   468  019E                     	;# 
   469  019E                     	;# 
   470  019F                     	;# 
   471  019F                     	;# 
   472  019F                     	;# 
   473  019F                     	;# 
   474  019F                     	;# 
   475  020C                     	;# 
   476  020D                     	;# 
   477  020E                     	;# 
   478  0211                     	;# 
   479  0211                     	;# 
   480  0212                     	;# 
   481  0212                     	;# 
   482  0213                     	;# 
   483  0213                     	;# 
   484  0214                     	;# 
   485  0214                     	;# 
   486  0215                     	;# 
   487  0215                     	;# 
   488  0215                     	;# 
   489  0215                     	;# 
   490  0216                     	;# 
   491  0216                     	;# 
   492  0217                     	;# 
   493  0217                     	;# 
   494  028C                     	;# 
   495  028D                     	;# 
   496  028E                     	;# 
   497  0291                     	;# 
   498  0291                     	;# 
   499  0292                     	;# 
   500  0293                     	;# 
   501  0293                     	;# 
   502  0298                     	;# 
   503  0298                     	;# 
   504  0299                     	;# 
   505  029A                     	;# 
   506  029A                     	;# 
   507  029E                     	;# 
   508  030C                     	;# 
   509  030D                     	;# 
   510  030E                     	;# 
   511  038C                     	;# 
   512  038D                     	;# 
   513  038E                     	;# 
   514  0391                     	;# 
   515  0392                     	;# 
   516  0393                     	;# 
   517  0394                     	;# 
   518  0395                     	;# 
   519  0396                     	;# 
   520  0397                     	;# 
   521  0398                     	;# 
   522  0399                     	;# 
   523  0415                     	;# 
   524  0416                     	;# 
   525  0417                     	;# 
   526  041C                     	;# 
   527  041D                     	;# 
   528  041E                     	;# 
   529  0511                     	;# 
   530  0515                     	;# 
   531  0617                     	;# 
   532  0618                     	;# 
   533  0619                     	;# 
   534  0619                     	;# 
   535  061A                     	;# 
   536  061B                     	;# 
   537  061C                     	;# 
   538  061C                     	;# 
   539  0691                     	;# 
   540  0692                     	;# 
   541  0693                     	;# 
   542  0694                     	;# 
   543  0695                     	;# 
   544  0696                     	;# 
   545  0697                     	;# 
   546  0698                     	;# 
   547  0699                     	;# 
   548  069A                     	;# 
   549  069B                     	;# 
   550  069C                     	;# 
   551  069D                     	;# 
   552  069E                     	;# 
   553  069F                     	;# 
   554  0E0F                     	;# 
   555  0E10                     	;# 
   556  0E11                     	;# 
   557  0E12                     	;# 
   558  0E13                     	;# 
   559  0E14                     	;# 
   560  0E15                     	;# 
   561  0E17                     	;# 
   562  0E20                     	;# 
   563  0E21                     	;# 
   564  0E22                     	;# 
   565  0E24                     	;# 
   566  0E25                     	;# 
   567  0E28                     	;# 
   568  0E29                     	;# 
   569  0E2A                     	;# 
   570  0E2B                     	;# 
   571  0E90                     	;# 
   572  0E91                     	;# 
   573  0E92                     	;# 
   574  0E94                     	;# 
   575  0E95                     	;# 
   576  0E9C                     	;# 
   577  0E9D                     	;# 
   578  0E9E                     	;# 
   579  0E9F                     	;# 
   580  0EA0                     	;# 
   581  0EA1                     	;# 
   582  0EA2                     	;# 
   583  0EA3                     	;# 
   584  0EA4                     	;# 
   585  0EA5                     	;# 
   586  0EA6                     	;# 
   587  0EA7                     	;# 
   588  0F0F                     	;# 
   589  0F10                     	;# 
   590  0F11                     	;# 
   591  0F12                     	;# 
   592  0F13                     	;# 
   593  0F14                     	;# 
   594  0F15                     	;# 
   595  0F16                     	;# 
   596  0F17                     	;# 
   597  0F18                     	;# 
   598  0F19                     	;# 
   599  0F1A                     	;# 
   600  0F1B                     	;# 
   601  0F1C                     	;# 
   602  0F1D                     	;# 
   603  0F1E                     	;# 
   604  0F1F                     	;# 
   605  0F20                     	;# 
   606  0F21                     	;# 
   607  0F22                     	;# 
   608  0F23                     	;# 
   609  0F24                     	;# 
   610  0F25                     	;# 
   611  0F26                     	;# 
   612  0F27                     	;# 
   613  0F28                     	;# 
   614  0F29                     	;# 
   615  0F2A                     	;# 
   616  0F2B                     	;# 
   617  0F2C                     	;# 
   618  0F2D                     	;# 
   619  0FE4                     	;# 
   620  0FE5                     	;# 
   621  0FE6                     	;# 
   622  0FE7                     	;# 
   623  0FE8                     	;# 
   624  0FE9                     	;# 
   625  0FEA                     	;# 
   626  0FEB                     	;# 
   627  0FED                     	;# 
   628  0FEE                     	;# 
   629  0FEF                     	;# 
   630  0000                     	;# 
   631  0001                     	;# 
   632  0002                     	;# 
   633  0003                     	;# 
   634  0004                     	;# 
   635  0005                     	;# 
   636  0006                     	;# 
   637  0007                     	;# 
   638  0008                     	;# 
   639  0009                     	;# 
   640  000A                     	;# 
   641  000B                     	;# 
   642  000C                     	;# 
   643  000D                     	;# 
   644  000E                     	;# 
   645  0011                     	;# 
   646  0012                     	;# 
   647  0013                     	;# 
   648  0015                     	;# 
   649  0016                     	;# 
   650  0016                     	;# 
   651  0017                     	;# 
   652  0018                     	;# 
   653  0019                     	;# 
   654  001A                     	;# 
   655  001B                     	;# 
   656  001C                     	;# 
   657  008C                     	;# 
   658  008D                     	;# 
   659  008E                     	;# 
   660  0091                     	;# 
   661  0092                     	;# 
   662  0093                     	;# 
   663  0095                     	;# 
   664  0096                     	;# 
   665  0097                     	;# 
   666  0098                     	;# 
   667  0099                     	;# 
   668  009A                     	;# 
   669  009B                     	;# 
   670  009B                     	;# 
   671  009C                     	;# 
   672  009D                     	;# 
   673  009E                     	;# 
   674  009F                     	;# 
   675  010C                     	;# 
   676  010D                     	;# 
   677  010E                     	;# 
   678  0111                     	;# 
   679  0112                     	;# 
   680  0113                     	;# 
   681  0114                     	;# 
   682  0115                     	;# 
   683  0116                     	;# 
   684  0117                     	;# 
   685  0118                     	;# 
   686  0119                     	;# 
   687  011C                     	;# 
   688  018C                     	;# 
   689  018D                     	;# 
   690  018E                     	;# 
   691  0191                     	;# 
   692  0191                     	;# 
   693  0192                     	;# 
   694  0193                     	;# 
   695  0193                     	;# 
   696  0194                     	;# 
   697  0195                     	;# 
   698  0196                     	;# 
   699  0199                     	;# 
   700  0199                     	;# 
   701  0199                     	;# 
   702  019A                     	;# 
   703  019A                     	;# 
   704  019A                     	;# 
   705  019B                     	;# 
   706  019B                     	;# 
   707  019B                     	;# 
   708  019B                     	;# 
   709  019B                     	;# 
   710  019C                     	;# 
   711  019C                     	;# 
   712  019C                     	;# 
   713  019D                     	;# 
   714  019D                     	;# 
   715  019D                     	;# 
   716  019E                     	;# 
   717  019E                     	;# 
   718  019E                     	;# 
   719  019F                     	;# 
   720  019F                     	;# 
   721  019F                     	;# 
   722  019F                     	;# 
   723  019F                     	;# 
   724  020C                     	;# 
   725  020D                     	;# 
   726  020E                     	;# 
   727  0211                     	;# 
   728  0211                     	;# 
   729  0212                     	;# 
   730  0212                     	;# 
   731  0213                     	;# 
   732  0213                     	;# 
   733  0214                     	;# 
   734  0214                     	;# 
   735  0215                     	;# 
   736  0215                     	;# 
   737  0215                     	;# 
   738  0215                     	;# 
   739  0216                     	;# 
   740  0216                     	;# 
   741  0217                     	;# 
   742  0217                     	;# 
   743  028C                     	;# 
   744  028D                     	;# 
   745  028E                     	;# 
   746  0291                     	;# 
   747  0291                     	;# 
   748  0292                     	;# 
   749  0293                     	;# 
   750  0293                     	;# 
   751  0298                     	;# 
   752  0298                     	;# 
   753  0299                     	;# 
   754  029A                     	;# 
   755  029A                     	;# 
   756  029E                     	;# 
   757  030C                     	;# 
   758  030D                     	;# 
   759  030E                     	;# 
   760  038C                     	;# 
   761  038D                     	;# 
   762  038E                     	;# 
   763  0391                     	;# 
   764  0392                     	;# 
   765  0393                     	;# 
   766  0394                     	;# 
   767  0395                     	;# 
   768  0396                     	;# 
   769  0397                     	;# 
   770  0398                     	;# 
   771  0399                     	;# 
   772  0415                     	;# 
   773  0416                     	;# 
   774  0417                     	;# 
   775  041C                     	;# 
   776  041D                     	;# 
   777  041E                     	;# 
   778  0511                     	;# 
   779  0515                     	;# 
   780  0617                     	;# 
   781  0618                     	;# 
   782  0619                     	;# 
   783  0619                     	;# 
   784  061A                     	;# 
   785  061B                     	;# 
   786  061C                     	;# 
   787  061C                     	;# 
   788  0691                     	;# 
   789  0692                     	;# 
   790  0693                     	;# 
   791  0694                     	;# 
   792  0695                     	;# 
   793  0696                     	;# 
   794  0697                     	;# 
   795  0698                     	;# 
   796  0699                     	;# 
   797  069A                     	;# 
   798  069B                     	;# 
   799  069C                     	;# 
   800  069D                     	;# 
   801  069E                     	;# 
   802  069F                     	;# 
   803  0E0F                     	;# 
   804  0E10                     	;# 
   805  0E11                     	;# 
   806  0E12                     	;# 
   807  0E13                     	;# 
   808  0E14                     	;# 
   809  0E15                     	;# 
   810  0E17                     	;# 
   811  0E20                     	;# 
   812  0E21                     	;# 
   813  0E22                     	;# 
   814  0E24                     	;# 
   815  0E25                     	;# 
   816  0E28                     	;# 
   817  0E29                     	;# 
   818  0E2A                     	;# 
   819  0E2B                     	;# 
   820  0E90                     	;# 
   821  0E91                     	;# 
   822  0E92                     	;# 
   823  0E94                     	;# 
   824  0E95                     	;# 
   825  0E9C                     	;# 
   826  0E9D                     	;# 
   827  0E9E                     	;# 
   828  0E9F                     	;# 
   829  0EA0                     	;# 
   830  0EA1                     	;# 
   831  0EA2                     	;# 
   832  0EA3                     	;# 
   833  0EA4                     	;# 
   834  0EA5                     	;# 
   835  0EA6                     	;# 
   836  0EA7                     	;# 
   837  0F0F                     	;# 
   838  0F10                     	;# 
   839  0F11                     	;# 
   840  0F12                     	;# 
   841  0F13                     	;# 
   842  0F14                     	;# 
   843  0F15                     	;# 
   844  0F16                     	;# 
   845  0F17                     	;# 
   846  0F18                     	;# 
   847  0F19                     	;# 
   848  0F1A                     	;# 
   849  0F1B                     	;# 
   850  0F1C                     	;# 
   851  0F1D                     	;# 
   852  0F1E                     	;# 
   853  0F1F                     	;# 
   854  0F20                     	;# 
   855  0F21                     	;# 
   856  0F22                     	;# 
   857  0F23                     	;# 
   858  0F24                     	;# 
   859  0F25                     	;# 
   860  0F26                     	;# 
   861  0F27                     	;# 
   862  0F28                     	;# 
   863  0F29                     	;# 
   864  0F2A                     	;# 
   865  0F2B                     	;# 
   866  0F2C                     	;# 
   867  0F2D                     	;# 
   868  0FE4                     	;# 
   869  0FE5                     	;# 
   870  0FE6                     	;# 
   871  0FE7                     	;# 
   872  0FE8                     	;# 
   873  0FE9                     	;# 
   874  0FEA                     	;# 
   875  0FEB                     	;# 
   876  0FED                     	;# 
   877  0FEE                     	;# 
   878  0FEF                     	;# 
   879  0000                     	;# 
   880  0001                     	;# 
   881  0002                     	;# 
   882  0003                     	;# 
   883  0004                     	;# 
   884  0005                     	;# 
   885  0006                     	;# 
   886  0007                     	;# 
   887  0008                     	;# 
   888  0009                     	;# 
   889  000A                     	;# 
   890  000B                     	;# 
   891  000C                     	;# 
   892  000D                     	;# 
   893  000E                     	;# 
   894  0011                     	;# 
   895  0012                     	;# 
   896  0013                     	;# 
   897  0015                     	;# 
   898  0016                     	;# 
   899  0016                     	;# 
   900  0017                     	;# 
   901  0018                     	;# 
   902  0019                     	;# 
   903  001A                     	;# 
   904  001B                     	;# 
   905  001C                     	;# 
   906  008C                     	;# 
   907  008D                     	;# 
   908  008E                     	;# 
   909  0091                     	;# 
   910  0092                     	;# 
   911  0093                     	;# 
   912  0095                     	;# 
   913  0096                     	;# 
   914  0097                     	;# 
   915  0098                     	;# 
   916  0099                     	;# 
   917  009A                     	;# 
   918  009B                     	;# 
   919  009B                     	;# 
   920  009C                     	;# 
   921  009D                     	;# 
   922  009E                     	;# 
   923  009F                     	;# 
   924  010C                     	;# 
   925  010D                     	;# 
   926  010E                     	;# 
   927  0111                     	;# 
   928  0112                     	;# 
   929  0113                     	;# 
   930  0114                     	;# 
   931  0115                     	;# 
   932  0116                     	;# 
   933  0117                     	;# 
   934  0118                     	;# 
   935  0119                     	;# 
   936  011C                     	;# 
   937  018C                     	;# 
   938  018D                     	;# 
   939  018E                     	;# 
   940  0191                     	;# 
   941  0191                     	;# 
   942  0192                     	;# 
   943  0193                     	;# 
   944  0193                     	;# 
   945  0194                     	;# 
   946  0195                     	;# 
   947  0196                     	;# 
   948  0199                     	;# 
   949  0199                     	;# 
   950  0199                     	;# 
   951  019A                     	;# 
   952  019A                     	;# 
   953  019A                     	;# 
   954  019B                     	;# 
   955  019B                     	;# 
   956  019B                     	;# 
   957  019B                     	;# 
   958  019B                     	;# 
   959  019C                     	;# 
   960  019C                     	;# 
   961  019C                     	;# 
   962  019D                     	;# 
   963  019D                     	;# 
   964  019D                     	;# 
   965  019E                     	;# 
   966  019E                     	;# 
   967  019E                     	;# 
   968  019F                     	;# 
   969  019F                     	;# 
   970  019F                     	;# 
   971  019F                     	;# 
   972  019F                     	;# 
   973  020C                     	;# 
   974  020D                     	;# 
   975  020E                     	;# 
   976  0211                     	;# 
   977  0211                     	;# 
   978  0212                     	;# 
   979  0212                     	;# 
   980  0213                     	;# 
   981  0213                     	;# 
   982  0214                     	;# 
   983  0214                     	;# 
   984  0215                     	;# 
   985  0215                     	;# 
   986  0215                     	;# 
   987  0215                     	;# 
   988  0216                     	;# 
   989  0216                     	;# 
   990  0217                     	;# 
   991  0217                     	;# 
   992  028C                     	;# 
   993  028D                     	;# 
   994  028E                     	;# 
   995  0291                     	;# 
   996  0291                     	;# 
   997  0292                     	;# 
   998  0293                     	;# 
   999  0293                     	;# 
  1000  0298                     	;# 
  1001  0298                     	;# 
  1002  0299                     	;# 
  1003  029A                     	;# 
  1004  029A                     	;# 
  1005  029E                     	;# 
  1006  030C                     	;# 
  1007  030D                     	;# 
  1008  030E                     	;# 
  1009  038C                     	;# 
  1010  038D                     	;# 
  1011  038E                     	;# 
  1012  0391                     	;# 
  1013  0392                     	;# 
  1014  0393                     	;# 
  1015  0394                     	;# 
  1016  0395                     	;# 
  1017  0396                     	;# 
  1018  0397                     	;# 
  1019  0398                     	;# 
  1020  0399                     	;# 
  1021  0415                     	;# 
  1022  0416                     	;# 
  1023  0417                     	;# 
  1024  041C                     	;# 
  1025  041D                     	;# 
  1026  041E                     	;# 
  1027  0511                     	;# 
  1028  0515                     	;# 
  1029  0617                     	;# 
  1030  0618                     	;# 
  1031  0619                     	;# 
  1032  0619                     	;# 
  1033  061A                     	;# 
  1034  061B                     	;# 
  1035  061C                     	;# 
  1036  061C                     	;# 
  1037  0691                     	;# 
  1038  0692                     	;# 
  1039  0693                     	;# 
  1040  0694                     	;# 
  1041  0695                     	;# 
  1042  0696                     	;# 
  1043  0697                     	;# 
  1044  0698                     	;# 
  1045  0699                     	;# 
  1046  069A                     	;# 
  1047  069B                     	;# 
  1048  069C                     	;# 
  1049  069D                     	;# 
  1050  069E                     	;# 
  1051  069F                     	;# 
  1052  0E0F                     	;# 
  1053  0E10                     	;# 
  1054  0E11                     	;# 
  1055  0E12                     	;# 
  1056  0E13                     	;# 
  1057  0E14                     	;# 
  1058  0E15                     	;# 
  1059  0E17                     	;# 
  1060  0E20                     	;# 
  1061  0E21                     	;# 
  1062  0E22                     	;# 
  1063  0E24                     	;# 
  1064  0E25                     	;# 
  1065  0E28                     	;# 
  1066  0E29                     	;# 
  1067  0E2A                     	;# 
  1068  0E2B                     	;# 
  1069  0E90                     	;# 
  1070  0E91                     	;# 
  1071  0E92                     	;# 
  1072  0E94                     	;# 
  1073  0E95                     	;# 
  1074  0E9C                     	;# 
  1075  0E9D                     	;# 
  1076  0E9E                     	;# 
  1077  0E9F                     	;# 
  1078  0EA0                     	;# 
  1079  0EA1                     	;# 
  1080  0EA2                     	;# 
  1081  0EA3                     	;# 
  1082  0EA4                     	;# 
  1083  0EA5                     	;# 
  1084  0EA6                     	;# 
  1085  0EA7                     	;# 
  1086  0F0F                     	;# 
  1087  0F10                     	;# 
  1088  0F11                     	;# 
  1089  0F12                     	;# 
  1090  0F13                     	;# 
  1091  0F14                     	;# 
  1092  0F15                     	;# 
  1093  0F16                     	;# 
  1094  0F17                     	;# 
  1095  0F18                     	;# 
  1096  0F19                     	;# 
  1097  0F1A                     	;# 
  1098  0F1B                     	;# 
  1099  0F1C                     	;# 
  1100  0F1D                     	;# 
  1101  0F1E                     	;# 
  1102  0F1F                     	;# 
  1103  0F20                     	;# 
  1104  0F21                     	;# 
  1105  0F22                     	;# 
  1106  0F23                     	;# 
  1107  0F24                     	;# 
  1108  0F25                     	;# 
  1109  0F26                     	;# 
  1110  0F27                     	;# 
  1111  0F28                     	;# 
  1112  0F29                     	;# 
  1113  0F2A                     	;# 
  1114  0F2B                     	;# 
  1115  0F2C                     	;# 
  1116  0F2D                     	;# 
  1117  0FE4                     	;# 
  1118  0FE5                     	;# 
  1119  0FE6                     	;# 
  1120  0FE7                     	;# 
  1121  0FE8                     	;# 
  1122  0FE9                     	;# 
  1123  0FEA                     	;# 
  1124  0FEB                     	;# 
  1125  0FED                     	;# 
  1126  0FEE                     	;# 
  1127  0FEF                     	;# 
  1128  0000                     	;# 
  1129  0001                     	;# 
  1130  0002                     	;# 
  1131  0003                     	;# 
  1132  0004                     	;# 
  1133  0005                     	;# 
  1134  0006                     	;# 
  1135  0007                     	;# 
  1136  0008                     	;# 
  1137  0009                     	;# 
  1138  000A                     	;# 
  1139  000B                     	;# 
  1140  000C                     	;# 
  1141  000D                     	;# 
  1142  000E                     	;# 
  1143  0011                     	;# 
  1144  0012                     	;# 
  1145  0013                     	;# 
  1146  0015                     	;# 
  1147  0016                     	;# 
  1148  0016                     	;# 
  1149  0017                     	;# 
  1150  0018                     	;# 
  1151  0019                     	;# 
  1152  001A                     	;# 
  1153  001B                     	;# 
  1154  001C                     	;# 
  1155  008C                     	;# 
  1156  008D                     	;# 
  1157  008E                     	;# 
  1158  0091                     	;# 
  1159  0092                     	;# 
  1160  0093                     	;# 
  1161  0095                     	;# 
  1162  0096                     	;# 
  1163  0097                     	;# 
  1164  0098                     	;# 
  1165  0099                     	;# 
  1166  009A                     	;# 
  1167  009B                     	;# 
  1168  009B                     	;# 
  1169  009C                     	;# 
  1170  009D                     	;# 
  1171  009E                     	;# 
  1172  009F                     	;# 
  1173  010C                     	;# 
  1174  010D                     	;# 
  1175  010E                     	;# 
  1176  0111                     	;# 
  1177  0112                     	;# 
  1178  0113                     	;# 
  1179  0114                     	;# 
  1180  0115                     	;# 
  1181  0116                     	;# 
  1182  0117                     	;# 
  1183  0118                     	;# 
  1184  0119                     	;# 
  1185  011C                     	;# 
  1186  018C                     	;# 
  1187  018D                     	;# 
  1188  018E                     	;# 
  1189  0191                     	;# 
  1190  0191                     	;# 
  1191  0192                     	;# 
  1192  0193                     	;# 
  1193  0193                     	;# 
  1194  0194                     	;# 
  1195  0195                     	;# 
  1196  0196                     	;# 
  1197  0199                     	;# 
  1198  0199                     	;# 
  1199  0199                     	;# 
  1200  019A                     	;# 
  1201  019A                     	;# 
  1202  019A                     	;# 
  1203  019B                     	;# 
  1204  019B                     	;# 
  1205  019B                     	;# 
  1206  019B                     	;# 
  1207  019B                     	;# 
  1208  019C                     	;# 
  1209  019C                     	;# 
  1210  019C                     	;# 
  1211  019D                     	;# 
  1212  019D                     	;# 
  1213  019D                     	;# 
  1214  019E                     	;# 
  1215  019E                     	;# 
  1216  019E                     	;# 
  1217  019F                     	;# 
  1218  019F                     	;# 
  1219  019F                     	;# 
  1220  019F                     	;# 
  1221  019F                     	;# 
  1222  020C                     	;# 
  1223  020D                     	;# 
  1224  020E                     	;# 
  1225  0211                     	;# 
  1226  0211                     	;# 
  1227  0212                     	;# 
  1228  0212                     	;# 
  1229  0213                     	;# 
  1230  0213                     	;# 
  1231  0214                     	;# 
  1232  0214                     	;# 
  1233  0215                     	;# 
  1234  0215                     	;# 
  1235  0215                     	;# 
  1236  0215                     	;# 
  1237  0216                     	;# 
  1238  0216                     	;# 
  1239  0217                     	;# 
  1240  0217                     	;# 
  1241  028C                     	;# 
  1242  028D                     	;# 
  1243  028E                     	;# 
  1244  0291                     	;# 
  1245  0291                     	;# 
  1246  0292                     	;# 
  1247  0293                     	;# 
  1248  0293                     	;# 
  1249  0298                     	;# 
  1250  0298                     	;# 
  1251  0299                     	;# 
  1252  029A                     	;# 
  1253  029A                     	;# 
  1254  029E                     	;# 
  1255  030C                     	;# 
  1256  030D                     	;# 
  1257  030E                     	;# 
  1258  038C                     	;# 
  1259  038D                     	;# 
  1260  038E                     	;# 
  1261  0391                     	;# 
  1262  0392                     	;# 
  1263  0393                     	;# 
  1264  0394                     	;# 
  1265  0395                     	;# 
  1266  0396                     	;# 
  1267  0397                     	;# 
  1268  0398                     	;# 
  1269  0399                     	;# 
  1270  0415                     	;# 
  1271  0416                     	;# 
  1272  0417                     	;# 
  1273  041C                     	;# 
  1274  041D                     	;# 
  1275  041E                     	;# 
  1276  0511                     	;# 
  1277  0515                     	;# 
  1278  0617                     	;# 
  1279  0618                     	;# 
  1280  0619                     	;# 
  1281  0619                     	;# 
  1282  061A                     	;# 
  1283  061B                     	;# 
  1284  061C                     	;# 
  1285  061C                     	;# 
  1286  0691                     	;# 
  1287  0692                     	;# 
  1288  0693                     	;# 
  1289  0694                     	;# 
  1290  0695                     	;# 
  1291  0696                     	;# 
  1292  0697                     	;# 
  1293  0698                     	;# 
  1294  0699                     	;# 
  1295  069A                     	;# 
  1296  069B                     	;# 
  1297  069C                     	;# 
  1298  069D                     	;# 
  1299  069E                     	;# 
  1300  069F                     	;# 
  1301  0E0F                     	;# 
  1302  0E10                     	;# 
  1303  0E11                     	;# 
  1304  0E12                     	;# 
  1305  0E13                     	;# 
  1306  0E14                     	;# 
  1307  0E15                     	;# 
  1308  0E17                     	;# 
  1309  0E20                     	;# 
  1310  0E21                     	;# 
  1311  0E22                     	;# 
  1312  0E24                     	;# 
  1313  0E25                     	;# 
  1314  0E28                     	;# 
  1315  0E29                     	;# 
  1316  0E2A                     	;# 
  1317  0E2B                     	;# 
  1318  0E90                     	;# 
  1319  0E91                     	;# 
  1320  0E92                     	;# 
  1321  0E94                     	;# 
  1322  0E95                     	;# 
  1323  0E9C                     	;# 
  1324  0E9D                     	;# 
  1325  0E9E                     	;# 
  1326  0E9F                     	;# 
  1327  0EA0                     	;# 
  1328  0EA1                     	;# 
  1329  0EA2                     	;# 
  1330  0EA3                     	;# 
  1331  0EA4                     	;# 
  1332  0EA5                     	;# 
  1333  0EA6                     	;# 
  1334  0EA7                     	;# 
  1335  0F0F                     	;# 
  1336  0F10                     	;# 
  1337  0F11                     	;# 
  1338  0F12                     	;# 
  1339  0F13                     	;# 
  1340  0F14                     	;# 
  1341  0F15                     	;# 
  1342  0F16                     	;# 
  1343  0F17                     	;# 
  1344  0F18                     	;# 
  1345  0F19                     	;# 
  1346  0F1A                     	;# 
  1347  0F1B                     	;# 
  1348  0F1C                     	;# 
  1349  0F1D                     	;# 
  1350  0F1E                     	;# 
  1351  0F1F                     	;# 
  1352  0F20                     	;# 
  1353  0F21                     	;# 
  1354  0F22                     	;# 
  1355  0F23                     	;# 
  1356  0F24                     	;# 
  1357  0F25                     	;# 
  1358  0F26                     	;# 
  1359  0F27                     	;# 
  1360  0F28                     	;# 
  1361  0F29                     	;# 
  1362  0F2A                     	;# 
  1363  0F2B                     	;# 
  1364  0F2C                     	;# 
  1365  0F2D                     	;# 
  1366  0FE4                     	;# 
  1367  0FE5                     	;# 
  1368  0FE6                     	;# 
  1369  0FE7                     	;# 
  1370  0FE8                     	;# 
  1371  0FE9                     	;# 
  1372  0FEA                     	;# 
  1373  0FEB                     	;# 
  1374  0FED                     	;# 
  1375  0FEE                     	;# 
  1376  0FEF                     	;# 
  1377  0000                     	;# 
  1378  0001                     	;# 
  1379  0002                     	;# 
  1380  0003                     	;# 
  1381  0004                     	;# 
  1382  0005                     	;# 
  1383  0006                     	;# 
  1384  0007                     	;# 
  1385  0008                     	;# 
  1386  0009                     	;# 
  1387  000A                     	;# 
  1388  000B                     	;# 
  1389  000C                     	;# 
  1390  000D                     	;# 
  1391  000E                     	;# 
  1392  0011                     	;# 
  1393  0012                     	;# 
  1394  0013                     	;# 
  1395  0015                     	;# 
  1396  0016                     	;# 
  1397  0016                     	;# 
  1398  0017                     	;# 
  1399  0018                     	;# 
  1400  0019                     	;# 
  1401  001A                     	;# 
  1402  001B                     	;# 
  1403  001C                     	;# 
  1404  008C                     	;# 
  1405  008D                     	;# 
  1406  008E                     	;# 
  1407  0091                     	;# 
  1408  0092                     	;# 
  1409  0093                     	;# 
  1410  0095                     	;# 
  1411  0096                     	;# 
  1412  0097                     	;# 
  1413  0098                     	;# 
  1414  0099                     	;# 
  1415  009A                     	;# 
  1416  009B                     	;# 
  1417  009B                     	;# 
  1418  009C                     	;# 
  1419  009D                     	;# 
  1420  009E                     	;# 
  1421  009F                     	;# 
  1422  010C                     	;# 
  1423  010D                     	;# 
  1424  010E                     	;# 
  1425  0111                     	;# 
  1426  0112                     	;# 
  1427  0113                     	;# 
  1428  0114                     	;# 
  1429  0115                     	;# 
  1430  0116                     	;# 
  1431  0117                     	;# 
  1432  0118                     	;# 
  1433  0119                     	;# 
  1434  011C                     	;# 
  1435  018C                     	;# 
  1436  018D                     	;# 
  1437  018E                     	;# 
  1438  0191                     	;# 
  1439  0191                     	;# 
  1440  0192                     	;# 
  1441  0193                     	;# 
  1442  0193                     	;# 
  1443  0194                     	;# 
  1444  0195                     	;# 
  1445  0196                     	;# 
  1446  0199                     	;# 
  1447  0199                     	;# 
  1448  0199                     	;# 
  1449  019A                     	;# 
  1450  019A                     	;# 
  1451  019A                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019B                     	;# 
  1456  019B                     	;# 
  1457  019C                     	;# 
  1458  019C                     	;# 
  1459  019C                     	;# 
  1460  019D                     	;# 
  1461  019D                     	;# 
  1462  019D                     	;# 
  1463  019E                     	;# 
  1464  019E                     	;# 
  1465  019E                     	;# 
  1466  019F                     	;# 
  1467  019F                     	;# 
  1468  019F                     	;# 
  1469  019F                     	;# 
  1470  019F                     	;# 
  1471  020C                     	;# 
  1472  020D                     	;# 
  1473  020E                     	;# 
  1474  0211                     	;# 
  1475  0211                     	;# 
  1476  0212                     	;# 
  1477  0212                     	;# 
  1478  0213                     	;# 
  1479  0213                     	;# 
  1480  0214                     	;# 
  1481  0214                     	;# 
  1482  0215                     	;# 
  1483  0215                     	;# 
  1484  0215                     	;# 
  1485  0215                     	;# 
  1486  0216                     	;# 
  1487  0216                     	;# 
  1488  0217                     	;# 
  1489  0217                     	;# 
  1490  028C                     	;# 
  1491  028D                     	;# 
  1492  028E                     	;# 
  1493  0291                     	;# 
  1494  0291                     	;# 
  1495  0292                     	;# 
  1496  0293                     	;# 
  1497  0293                     	;# 
  1498  0298                     	;# 
  1499  0298                     	;# 
  1500  0299                     	;# 
  1501  029A                     	;# 
  1502  029A                     	;# 
  1503  029E                     	;# 
  1504  030C                     	;# 
  1505  030D                     	;# 
  1506  030E                     	;# 
  1507  038C                     	;# 
  1508  038D                     	;# 
  1509  038E                     	;# 
  1510  0391                     	;# 
  1511  0392                     	;# 
  1512  0393                     	;# 
  1513  0394                     	;# 
  1514  0395                     	;# 
  1515  0396                     	;# 
  1516  0397                     	;# 
  1517  0398                     	;# 
  1518  0399                     	;# 
  1519  0415                     	;# 
  1520  0416                     	;# 
  1521  0417                     	;# 
  1522  041C                     	;# 
  1523  041D                     	;# 
  1524  041E                     	;# 
  1525  0511                     	;# 
  1526  0515                     	;# 
  1527  0617                     	;# 
  1528  0618                     	;# 
  1529  0619                     	;# 
  1530  0619                     	;# 
  1531  061A                     	;# 
  1532  061B                     	;# 
  1533  061C                     	;# 
  1534  061C                     	;# 
  1535  0691                     	;# 
  1536  0692                     	;# 
  1537  0693                     	;# 
  1538  0694                     	;# 
  1539  0695                     	;# 
  1540  0696                     	;# 
  1541  0697                     	;# 
  1542  0698                     	;# 
  1543  0699                     	;# 
  1544  069A                     	;# 
  1545  069B                     	;# 
  1546  069C                     	;# 
  1547  069D                     	;# 
  1548  069E                     	;# 
  1549  069F                     	;# 
  1550  0E0F                     	;# 
  1551  0E10                     	;# 
  1552  0E11                     	;# 
  1553  0E12                     	;# 
  1554  0E13                     	;# 
  1555  0E14                     	;# 
  1556  0E15                     	;# 
  1557  0E17                     	;# 
  1558  0E20                     	;# 
  1559  0E21                     	;# 
  1560  0E22                     	;# 
  1561  0E24                     	;# 
  1562  0E25                     	;# 
  1563  0E28                     	;# 
  1564  0E29                     	;# 
  1565  0E2A                     	;# 
  1566  0E2B                     	;# 
  1567  0E90                     	;# 
  1568  0E91                     	;# 
  1569  0E92                     	;# 
  1570  0E94                     	;# 
  1571  0E95                     	;# 
  1572  0E9C                     	;# 
  1573  0E9D                     	;# 
  1574  0E9E                     	;# 
  1575  0E9F                     	;# 
  1576  0EA0                     	;# 
  1577  0EA1                     	;# 
  1578  0EA2                     	;# 
  1579  0EA3                     	;# 
  1580  0EA4                     	;# 
  1581  0EA5                     	;# 
  1582  0EA6                     	;# 
  1583  0EA7                     	;# 
  1584  0F0F                     	;# 
  1585  0F10                     	;# 
  1586  0F11                     	;# 
  1587  0F12                     	;# 
  1588  0F13                     	;# 
  1589  0F14                     	;# 
  1590  0F15                     	;# 
  1591  0F16                     	;# 
  1592  0F17                     	;# 
  1593  0F18                     	;# 
  1594  0F19                     	;# 
  1595  0F1A                     	;# 
  1596  0F1B                     	;# 
  1597  0F1C                     	;# 
  1598  0F1D                     	;# 
  1599  0F1E                     	;# 
  1600  0F1F                     	;# 
  1601  0F20                     	;# 
  1602  0F21                     	;# 
  1603  0F22                     	;# 
  1604  0F23                     	;# 
  1605  0F24                     	;# 
  1606  0F25                     	;# 
  1607  0F26                     	;# 
  1608  0F27                     	;# 
  1609  0F28                     	;# 
  1610  0F29                     	;# 
  1611  0F2A                     	;# 
  1612  0F2B                     	;# 
  1613  0F2C                     	;# 
  1614  0F2D                     	;# 
  1615  0FE4                     	;# 
  1616  0FE5                     	;# 
  1617  0FE6                     	;# 
  1618  0FE7                     	;# 
  1619  0FE8                     	;# 
  1620  0FE9                     	;# 
  1621  0FEA                     	;# 
  1622  0FEB                     	;# 
  1623  0FED                     	;# 
  1624  0FEE                     	;# 
  1625  0FEF                     	;# 
  1626  0000                     	;# 
  1627  0001                     	;# 
  1628  0002                     	;# 
  1629  0003                     	;# 
  1630  0004                     	;# 
  1631  0005                     	;# 
  1632  0006                     	;# 
  1633  0007                     	;# 
  1634  0008                     	;# 
  1635  0009                     	;# 
  1636  000A                     	;# 
  1637  000B                     	;# 
  1638  000C                     	;# 
  1639  000D                     	;# 
  1640  000E                     	;# 
  1641  0011                     	;# 
  1642  0012                     	;# 
  1643  0013                     	;# 
  1644  0015                     	;# 
  1645  0016                     	;# 
  1646  0016                     	;# 
  1647  0017                     	;# 
  1648  0018                     	;# 
  1649  0019                     	;# 
  1650  001A                     	;# 
  1651  001B                     	;# 
  1652  001C                     	;# 
  1653  008C                     	;# 
  1654  008D                     	;# 
  1655  008E                     	;# 
  1656  0091                     	;# 
  1657  0092                     	;# 
  1658  0093                     	;# 
  1659  0095                     	;# 
  1660  0096                     	;# 
  1661  0097                     	;# 
  1662  0098                     	;# 
  1663  0099                     	;# 
  1664  009A                     	;# 
  1665  009B                     	;# 
  1666  009B                     	;# 
  1667  009C                     	;# 
  1668  009D                     	;# 
  1669  009E                     	;# 
  1670  009F                     	;# 
  1671  010C                     	;# 
  1672  010D                     	;# 
  1673  010E                     	;# 
  1674  0111                     	;# 
  1675  0112                     	;# 
  1676  0113                     	;# 
  1677  0114                     	;# 
  1678  0115                     	;# 
  1679  0116                     	;# 
  1680  0117                     	;# 
  1681  0118                     	;# 
  1682  0119                     	;# 
  1683  011C                     	;# 
  1684  018C                     	;# 
  1685  018D                     	;# 
  1686  018E                     	;# 
  1687  0191                     	;# 
  1688  0191                     	;# 
  1689  0192                     	;# 
  1690  0193                     	;# 
  1691  0193                     	;# 
  1692  0194                     	;# 
  1693  0195                     	;# 
  1694  0196                     	;# 
  1695  0199                     	;# 
  1696  0199                     	;# 
  1697  0199                     	;# 
  1698  019A                     	;# 
  1699  019A                     	;# 
  1700  019A                     	;# 
  1701  019B                     	;# 
  1702  019B                     	;# 
  1703  019B                     	;# 
  1704  019B                     	;# 
  1705  019B                     	;# 
  1706  019C                     	;# 
  1707  019C                     	;# 
  1708  019C                     	;# 
  1709  019D                     	;# 
  1710  019D                     	;# 
  1711  019D                     	;# 
  1712  019E                     	;# 
  1713  019E                     	;# 
  1714  019E                     	;# 
  1715  019F                     	;# 
  1716  019F                     	;# 
  1717  019F                     	;# 
  1718  019F                     	;# 
  1719  019F                     	;# 
  1720  020C                     	;# 
  1721  020D                     	;# 
  1722  020E                     	;# 
  1723  0211                     	;# 
  1724  0211                     	;# 
  1725  0212                     	;# 
  1726  0212                     	;# 
  1727  0213                     	;# 
  1728  0213                     	;# 
  1729  0214                     	;# 
  1730  0214                     	;# 
  1731  0215                     	;# 
  1732  0215                     	;# 
  1733  0215                     	;# 
  1734  0215                     	;# 
  1735  0216                     	;# 
  1736  0216                     	;# 
  1737  0217                     	;# 
  1738  0217                     	;# 
  1739  028C                     	;# 
  1740  028D                     	;# 
  1741  028E                     	;# 
  1742  0291                     	;# 
  1743  0291                     	;# 
  1744  0292                     	;# 
  1745  0293                     	;# 
  1746  0293                     	;# 
  1747  0298                     	;# 
  1748  0298                     	;# 
  1749  0299                     	;# 
  1750  029A                     	;# 
  1751  029A                     	;# 
  1752  029E                     	;# 
  1753  030C                     	;# 
  1754  030D                     	;# 
  1755  030E                     	;# 
  1756  038C                     	;# 
  1757  038D                     	;# 
  1758  038E                     	;# 
  1759  0391                     	;# 
  1760  0392                     	;# 
  1761  0393                     	;# 
  1762  0394                     	;# 
  1763  0395                     	;# 
  1764  0396                     	;# 
  1765  0397                     	;# 
  1766  0398                     	;# 
  1767  0399                     	;# 
  1768  0415                     	;# 
  1769  0416                     	;# 
  1770  0417                     	;# 
  1771  041C                     	;# 
  1772  041D                     	;# 
  1773  041E                     	;# 
  1774  0511                     	;# 
  1775  0515                     	;# 
  1776  0617                     	;# 
  1777  0618                     	;# 
  1778  0619                     	;# 
  1779  0619                     	;# 
  1780  061A                     	;# 
  1781  061B                     	;# 
  1782  061C                     	;# 
  1783  061C                     	;# 
  1784  0691                     	;# 
  1785  0692                     	;# 
  1786  0693                     	;# 
  1787  0694                     	;# 
  1788  0695                     	;# 
  1789  0696                     	;# 
  1790  0697                     	;# 
  1791  0698                     	;# 
  1792  0699                     	;# 
  1793  069A                     	;# 
  1794  069B                     	;# 
  1795  069C                     	;# 
  1796  069D                     	;# 
  1797  069E                     	;# 
  1798  069F                     	;# 
  1799  0E0F                     	;# 
  1800  0E10                     	;# 
  1801  0E11                     	;# 
  1802  0E12                     	;# 
  1803  0E13                     	;# 
  1804  0E14                     	;# 
  1805  0E15                     	;# 
  1806  0E17                     	;# 
  1807  0E20                     	;# 
  1808  0E21                     	;# 
  1809  0E22                     	;# 
  1810  0E24                     	;# 
  1811  0E25                     	;# 
  1812  0E28                     	;# 
  1813  0E29                     	;# 
  1814  0E2A                     	;# 
  1815  0E2B                     	;# 
  1816  0E90                     	;# 
  1817  0E91                     	;# 
  1818  0E92                     	;# 
  1819  0E94                     	;# 
  1820  0E95                     	;# 
  1821  0E9C                     	;# 
  1822  0E9D                     	;# 
  1823  0E9E                     	;# 
  1824  0E9F                     	;# 
  1825  0EA0                     	;# 
  1826  0EA1                     	;# 
  1827  0EA2                     	;# 
  1828  0EA3                     	;# 
  1829  0EA4                     	;# 
  1830  0EA5                     	;# 
  1831  0EA6                     	;# 
  1832  0EA7                     	;# 
  1833  0F0F                     	;# 
  1834  0F10                     	;# 
  1835  0F11                     	;# 
  1836  0F12                     	;# 
  1837  0F13                     	;# 
  1838  0F14                     	;# 
  1839  0F15                     	;# 
  1840  0F16                     	;# 
  1841  0F17                     	;# 
  1842  0F18                     	;# 
  1843  0F19                     	;# 
  1844  0F1A                     	;# 
  1845  0F1B                     	;# 
  1846  0F1C                     	;# 
  1847  0F1D                     	;# 
  1848  0F1E                     	;# 
  1849  0F1F                     	;# 
  1850  0F20                     	;# 
  1851  0F21                     	;# 
  1852  0F22                     	;# 
  1853  0F23                     	;# 
  1854  0F24                     	;# 
  1855  0F25                     	;# 
  1856  0F26                     	;# 
  1857  0F27                     	;# 
  1858  0F28                     	;# 
  1859  0F29                     	;# 
  1860  0F2A                     	;# 
  1861  0F2B                     	;# 
  1862  0F2C                     	;# 
  1863  0F2D                     	;# 
  1864  0FE4                     	;# 
  1865  0FE5                     	;# 
  1866  0FE6                     	;# 
  1867  0FE7                     	;# 
  1868  0FE8                     	;# 
  1869  0FE9                     	;# 
  1870  0FEA                     	;# 
  1871  0FEB                     	;# 
  1872  0FED                     	;# 
  1873  0FEE                     	;# 
  1874  0FEF                     	;# 
  1875  0000                     	;# 
  1876  0001                     	;# 
  1877  0002                     	;# 
  1878  0003                     	;# 
  1879  0004                     	;# 
  1880  0005                     	;# 
  1881  0006                     	;# 
  1882  0007                     	;# 
  1883  0008                     	;# 
  1884  0009                     	;# 
  1885  000A                     	;# 
  1886  000B                     	;# 
  1887  000C                     	;# 
  1888  000D                     	;# 
  1889  000E                     	;# 
  1890  0011                     	;# 
  1891  0012                     	;# 
  1892  0013                     	;# 
  1893  0015                     	;# 
  1894  0016                     	;# 
  1895  0016                     	;# 
  1896  0017                     	;# 
  1897  0018                     	;# 
  1898  0019                     	;# 
  1899  001A                     	;# 
  1900  001B                     	;# 
  1901  001C                     	;# 
  1902  008C                     	;# 
  1903  008D                     	;# 
  1904  008E                     	;# 
  1905  0091                     	;# 
  1906  0092                     	;# 
  1907  0093                     	;# 
  1908  0095                     	;# 
  1909  0096                     	;# 
  1910  0097                     	;# 
  1911  0098                     	;# 
  1912  0099                     	;# 
  1913  009A                     	;# 
  1914  009B                     	;# 
  1915  009B                     	;# 
  1916  009C                     	;# 
  1917  009D                     	;# 
  1918  009E                     	;# 
  1919  009F                     	;# 
  1920  010C                     	;# 
  1921  010D                     	;# 
  1922  010E                     	;# 
  1923  0111                     	;# 
  1924  0112                     	;# 
  1925  0113                     	;# 
  1926  0114                     	;# 
  1927  0115                     	;# 
  1928  0116                     	;# 
  1929  0117                     	;# 
  1930  0118                     	;# 
  1931  0119                     	;# 
  1932  011C                     	;# 
  1933  018C                     	;# 
  1934  018D                     	;# 
  1935  018E                     	;# 
  1936  0191                     	;# 
  1937  0191                     	;# 
  1938  0192                     	;# 
  1939  0193                     	;# 
  1940  0193                     	;# 
  1941  0194                     	;# 
  1942  0195                     	;# 
  1943  0196                     	;# 
  1944  0199                     	;# 
  1945  0199                     	;# 
  1946  0199                     	;# 
  1947  019A                     	;# 
  1948  019A                     	;# 
  1949  019A                     	;# 
  1950  019B                     	;# 
  1951  019B                     	;# 
  1952  019B                     	;# 
  1953  019B                     	;# 
  1954  019B                     	;# 
  1955  019C                     	;# 
  1956  019C                     	;# 
  1957  019C                     	;# 
  1958  019D                     	;# 
  1959  019D                     	;# 
  1960  019D                     	;# 
  1961  019E                     	;# 
  1962  019E                     	;# 
  1963  019E                     	;# 
  1964  019F                     	;# 
  1965  019F                     	;# 
  1966  019F                     	;# 
  1967  019F                     	;# 
  1968  019F                     	;# 
  1969  020C                     	;# 
  1970  020D                     	;# 
  1971  020E                     	;# 
  1972  0211                     	;# 
  1973  0211                     	;# 
  1974  0212                     	;# 
  1975  0212                     	;# 
  1976  0213                     	;# 
  1977  0213                     	;# 
  1978  0214                     	;# 
  1979  0214                     	;# 
  1980  0215                     	;# 
  1981  0215                     	;# 
  1982  0215                     	;# 
  1983  0215                     	;# 
  1984  0216                     	;# 
  1985  0216                     	;# 
  1986  0217                     	;# 
  1987  0217                     	;# 
  1988  028C                     	;# 
  1989  028D                     	;# 
  1990  028E                     	;# 
  1991  0291                     	;# 
  1992  0291                     	;# 
  1993  0292                     	;# 
  1994  0293                     	;# 
  1995  0293                     	;# 
  1996  0298                     	;# 
  1997  0298                     	;# 
  1998  0299                     	;# 
  1999  029A                     	;# 
  2000  029A                     	;# 
  2001  029E                     	;# 
  2002  030C                     	;# 
  2003  030D                     	;# 
  2004  030E                     	;# 
  2005  038C                     	;# 
  2006  038D                     	;# 
  2007  038E                     	;# 
  2008  0391                     	;# 
  2009  0392                     	;# 
  2010  0393                     	;# 
  2011  0394                     	;# 
  2012  0395                     	;# 
  2013  0396                     	;# 
  2014  0397                     	;# 
  2015  0398                     	;# 
  2016  0399                     	;# 
  2017  0415                     	;# 
  2018  0416                     	;# 
  2019  0417                     	;# 
  2020  041C                     	;# 
  2021  041D                     	;# 
  2022  041E                     	;# 
  2023  0511                     	;# 
  2024  0515                     	;# 
  2025  0617                     	;# 
  2026  0618                     	;# 
  2027  0619                     	;# 
  2028  0619                     	;# 
  2029  061A                     	;# 
  2030  061B                     	;# 
  2031  061C                     	;# 
  2032  061C                     	;# 
  2033  0691                     	;# 
  2034  0692                     	;# 
  2035  0693                     	;# 
  2036  0694                     	;# 
  2037  0695                     	;# 
  2038  0696                     	;# 
  2039  0697                     	;# 
  2040  0698                     	;# 
  2041  0699                     	;# 
  2042  069A                     	;# 
  2043  069B                     	;# 
  2044  069C                     	;# 
  2045  069D                     	;# 
  2046  069E                     	;# 
  2047  069F                     	;# 
  2048  0E0F                     	;# 
  2049  0E10                     	;# 
  2050  0E11                     	;# 
  2051  0E12                     	;# 
  2052  0E13                     	;# 
  2053  0E14                     	;# 
  2054  0E15                     	;# 
  2055  0E17                     	;# 
  2056  0E20                     	;# 
  2057  0E21                     	;# 
  2058  0E22                     	;# 
  2059  0E24                     	;# 
  2060  0E25                     	;# 
  2061  0E28                     	;# 
  2062  0E29                     	;# 
  2063  0E2A                     	;# 
  2064  0E2B                     	;# 
  2065  0E90                     	;# 
  2066  0E91                     	;# 
  2067  0E92                     	;# 
  2068  0E94                     	;# 
  2069  0E95                     	;# 
  2070  0E9C                     	;# 
  2071  0E9D                     	;# 
  2072  0E9E                     	;# 
  2073  0E9F                     	;# 
  2074  0EA0                     	;# 
  2075  0EA1                     	;# 
  2076  0EA2                     	;# 
  2077  0EA3                     	;# 
  2078  0EA4                     	;# 
  2079  0EA5                     	;# 
  2080  0EA6                     	;# 
  2081  0EA7                     	;# 
  2082  0F0F                     	;# 
  2083  0F10                     	;# 
  2084  0F11                     	;# 
  2085  0F12                     	;# 
  2086  0F13                     	;# 
  2087  0F14                     	;# 
  2088  0F15                     	;# 
  2089  0F16                     	;# 
  2090  0F17                     	;# 
  2091  0F18                     	;# 
  2092  0F19                     	;# 
  2093  0F1A                     	;# 
  2094  0F1B                     	;# 
  2095  0F1C                     	;# 
  2096  0F1D                     	;# 
  2097  0F1E                     	;# 
  2098  0F1F                     	;# 
  2099  0F20                     	;# 
  2100  0F21                     	;# 
  2101  0F22                     	;# 
  2102  0F23                     	;# 
  2103  0F24                     	;# 
  2104  0F25                     	;# 
  2105  0F26                     	;# 
  2106  0F27                     	;# 
  2107  0F28                     	;# 
  2108  0F29                     	;# 
  2109  0F2A                     	;# 
  2110  0F2B                     	;# 
  2111  0F2C                     	;# 
  2112  0F2D                     	;# 
  2113  0FE4                     	;# 
  2114  0FE5                     	;# 
  2115  0FE6                     	;# 
  2116  0FE7                     	;# 
  2117  0FE8                     	;# 
  2118  0FE9                     	;# 
  2119  0FEA                     	;# 
  2120  0FEB                     	;# 
  2121  0FED                     	;# 
  2122  0FEE                     	;# 
  2123  0FEF                     	;# 
  2124  0000                     	;# 
  2125  0001                     	;# 
  2126  0002                     	;# 
  2127  0003                     	;# 
  2128  0004                     	;# 
  2129  0005                     	;# 
  2130  0006                     	;# 
  2131  0007                     	;# 
  2132  0008                     	;# 
  2133  0009                     	;# 
  2134  000A                     	;# 
  2135  000B                     	;# 
  2136  000C                     	;# 
  2137  000D                     	;# 
  2138  000E                     	;# 
  2139  0011                     	;# 
  2140  0012                     	;# 
  2141  0013                     	;# 
  2142  0015                     	;# 
  2143  0016                     	;# 
  2144  0016                     	;# 
  2145  0017                     	;# 
  2146  0018                     	;# 
  2147  0019                     	;# 
  2148  001A                     	;# 
  2149  001B                     	;# 
  2150  001C                     	;# 
  2151  008C                     	;# 
  2152  008D                     	;# 
  2153  008E                     	;# 
  2154  0091                     	;# 
  2155  0092                     	;# 
  2156  0093                     	;# 
  2157  0095                     	;# 
  2158  0096                     	;# 
  2159  0097                     	;# 
  2160  0098                     	;# 
  2161  0099                     	;# 
  2162  009A                     	;# 
  2163  009B                     	;# 
  2164  009B                     	;# 
  2165  009C                     	;# 
  2166  009D                     	;# 
  2167  009E                     	;# 
  2168  009F                     	;# 
  2169  010C                     	;# 
  2170  010D                     	;# 
  2171  010E                     	;# 
  2172  0111                     	;# 
  2173  0112                     	;# 
  2174  0113                     	;# 
  2175  0114                     	;# 
  2176  0115                     	;# 
  2177  0116                     	;# 
  2178  0117                     	;# 
  2179  0118                     	;# 
  2180  0119                     	;# 
  2181  011C                     	;# 
  2182  018C                     	;# 
  2183  018D                     	;# 
  2184  018E                     	;# 
  2185  0191                     	;# 
  2186  0191                     	;# 
  2187  0192                     	;# 
  2188  0193                     	;# 
  2189  0193                     	;# 
  2190  0194                     	;# 
  2191  0195                     	;# 
  2192  0196                     	;# 
  2193  0199                     	;# 
  2194  0199                     	;# 
  2195  0199                     	;# 
  2196  019A                     	;# 
  2197  019A                     	;# 
  2198  019A                     	;# 
  2199  019B                     	;# 
  2200  019B                     	;# 
  2201  019B                     	;# 
  2202  019B                     	;# 
  2203  019B                     	;# 
  2204  019C                     	;# 
  2205  019C                     	;# 
  2206  019C                     	;# 
  2207  019D                     	;# 
  2208  019D                     	;# 
  2209  019D                     	;# 
  2210  019E                     	;# 
  2211  019E                     	;# 
  2212  019E                     	;# 
  2213  019F                     	;# 
  2214  019F                     	;# 
  2215  019F                     	;# 
  2216  019F                     	;# 
  2217  019F                     	;# 
  2218  020C                     	;# 
  2219  020D                     	;# 
  2220  020E                     	;# 
  2221  0211                     	;# 
  2222  0211                     	;# 
  2223  0212                     	;# 
  2224  0212                     	;# 
  2225  0213                     	;# 
  2226  0213                     	;# 
  2227  0214                     	;# 
  2228  0214                     	;# 
  2229  0215                     	;# 
  2230  0215                     	;# 
  2231  0215                     	;# 
  2232  0215                     	;# 
  2233  0216                     	;# 
  2234  0216                     	;# 
  2235  0217                     	;# 
  2236  0217                     	;# 
  2237  028C                     	;# 
  2238  028D                     	;# 
  2239  028E                     	;# 
  2240  0291                     	;# 
  2241  0291                     	;# 
  2242  0292                     	;# 
  2243  0293                     	;# 
  2244  0293                     	;# 
  2245  0298                     	;# 
  2246  0298                     	;# 
  2247  0299                     	;# 
  2248  029A                     	;# 
  2249  029A                     	;# 
  2250  029E                     	;# 
  2251  030C                     	;# 
  2252  030D                     	;# 
  2253  030E                     	;# 
  2254  038C                     	;# 
  2255  038D                     	;# 
  2256  038E                     	;# 
  2257  0391                     	;# 
  2258  0392                     	;# 
  2259  0393                     	;# 
  2260  0394                     	;# 
  2261  0395                     	;# 
  2262  0396                     	;# 
  2263  0397                     	;# 
  2264  0398                     	;# 
  2265  0399                     	;# 
  2266  0415                     	;# 
  2267  0416                     	;# 
  2268  0417                     	;# 
  2269  041C                     	;# 
  2270  041D                     	;# 
  2271  041E                     	;# 
  2272  0511                     	;# 
  2273  0515                     	;# 
  2274  0617                     	;# 
  2275  0618                     	;# 
  2276  0619                     	;# 
  2277  0619                     	;# 
  2278  061A                     	;# 
  2279  061B                     	;# 
  2280  061C                     	;# 
  2281  061C                     	;# 
  2282  0691                     	;# 
  2283  0692                     	;# 
  2284  0693                     	;# 
  2285  0694                     	;# 
  2286  0695                     	;# 
  2287  0696                     	;# 
  2288  0697                     	;# 
  2289  0698                     	;# 
  2290  0699                     	;# 
  2291  069A                     	;# 
  2292  069B                     	;# 
  2293  069C                     	;# 
  2294  069D                     	;# 
  2295  069E                     	;# 
  2296  069F                     	;# 
  2297  0E0F                     	;# 
  2298  0E10                     	;# 
  2299  0E11                     	;# 
  2300  0E12                     	;# 
  2301  0E13                     	;# 
  2302  0E14                     	;# 
  2303  0E15                     	;# 
  2304  0E17                     	;# 
  2305  0E20                     	;# 
  2306  0E21                     	;# 
  2307  0E22                     	;# 
  2308  0E24                     	;# 
  2309  0E25                     	;# 
  2310  0E28                     	;# 
  2311  0E29                     	;# 
  2312  0E2A                     	;# 
  2313  0E2B                     	;# 
  2314  0E90                     	;# 
  2315  0E91                     	;# 
  2316  0E92                     	;# 
  2317  0E94                     	;# 
  2318  0E95                     	;# 
  2319  0E9C                     	;# 
  2320  0E9D                     	;# 
  2321  0E9E                     	;# 
  2322  0E9F                     	;# 
  2323  0EA0                     	;# 
  2324  0EA1                     	;# 
  2325  0EA2                     	;# 
  2326  0EA3                     	;# 
  2327  0EA4                     	;# 
  2328  0EA5                     	;# 
  2329  0EA6                     	;# 
  2330  0EA7                     	;# 
  2331  0F0F                     	;# 
  2332  0F10                     	;# 
  2333  0F11                     	;# 
  2334  0F12                     	;# 
  2335  0F13                     	;# 
  2336  0F14                     	;# 
  2337  0F15                     	;# 
  2338  0F16                     	;# 
  2339  0F17                     	;# 
  2340  0F18                     	;# 
  2341  0F19                     	;# 
  2342  0F1A                     	;# 
  2343  0F1B                     	;# 
  2344  0F1C                     	;# 
  2345  0F1D                     	;# 
  2346  0F1E                     	;# 
  2347  0F1F                     	;# 
  2348  0F20                     	;# 
  2349  0F21                     	;# 
  2350  0F22                     	;# 
  2351  0F23                     	;# 
  2352  0F24                     	;# 
  2353  0F25                     	;# 
  2354  0F26                     	;# 
  2355  0F27                     	;# 
  2356  0F28                     	;# 
  2357  0F29                     	;# 
  2358  0F2A                     	;# 
  2359  0F2B                     	;# 
  2360  0F2C                     	;# 
  2361  0F2D                     	;# 
  2362  0FE4                     	;# 
  2363  0FE5                     	;# 
  2364  0FE6                     	;# 
  2365  0FE7                     	;# 
  2366  0FE8                     	;# 
  2367  0FE9                     	;# 
  2368  0FEA                     	;# 
  2369  0FEB                     	;# 
  2370  0FED                     	;# 
  2371  0FEE                     	;# 
  2372  0FEF                     	;# 
  2373  0000                     	;# 
  2374  0001                     	;# 
  2375  0002                     	;# 
  2376  0003                     	;# 
  2377  0004                     	;# 
  2378  0005                     	;# 
  2379  0006                     	;# 
  2380  0007                     	;# 
  2381  0008                     	;# 
  2382  0009                     	;# 
  2383  000A                     	;# 
  2384  000B                     	;# 
  2385  000C                     	;# 
  2386  000D                     	;# 
  2387  000E                     	;# 
  2388  0011                     	;# 
  2389  0012                     	;# 
  2390  0013                     	;# 
  2391  0015                     	;# 
  2392  0016                     	;# 
  2393  0016                     	;# 
  2394  0017                     	;# 
  2395  0018                     	;# 
  2396  0019                     	;# 
  2397  001A                     	;# 
  2398  001B                     	;# 
  2399  001C                     	;# 
  2400  008C                     	;# 
  2401  008D                     	;# 
  2402  008E                     	;# 
  2403  0091                     	;# 
  2404  0092                     	;# 
  2405  0093                     	;# 
  2406  0095                     	;# 
  2407  0096                     	;# 
  2408  0097                     	;# 
  2409  0098                     	;# 
  2410  0099                     	;# 
  2411  009A                     	;# 
  2412  009B                     	;# 
  2413  009B                     	;# 
  2414  009C                     	;# 
  2415  009D                     	;# 
  2416  009E                     	;# 
  2417  009F                     	;# 
  2418  010C                     	;# 
  2419  010D                     	;# 
  2420  010E                     	;# 
  2421  0111                     	;# 
  2422  0112                     	;# 
  2423  0113                     	;# 
  2424  0114                     	;# 
  2425  0115                     	;# 
  2426  0116                     	;# 
  2427  0117                     	;# 
  2428  0118                     	;# 
  2429  0119                     	;# 
  2430  011C                     	;# 
  2431  018C                     	;# 
  2432  018D                     	;# 
  2433  018E                     	;# 
  2434  0191                     	;# 
  2435  0191                     	;# 
  2436  0192                     	;# 
  2437  0193                     	;# 
  2438  0193                     	;# 
  2439  0194                     	;# 
  2440  0195                     	;# 
  2441  0196                     	;# 
  2442  0199                     	;# 
  2443  0199                     	;# 
  2444  0199                     	;# 
  2445  019A                     	;# 
  2446  019A                     	;# 
  2447  019A                     	;# 
  2448  019B                     	;# 
  2449  019B                     	;# 
  2450  019B                     	;# 
  2451  019B                     	;# 
  2452  019B                     	;# 
  2453  019C                     	;# 
  2454  019C                     	;# 
  2455  019C                     	;# 
  2456  019D                     	;# 
  2457  019D                     	;# 
  2458  019D                     	;# 
  2459  019E                     	;# 
  2460  019E                     	;# 
  2461  019E                     	;# 
  2462  019F                     	;# 
  2463  019F                     	;# 
  2464  019F                     	;# 
  2465  019F                     	;# 
  2466  019F                     	;# 
  2467  020C                     	;# 
  2468  020D                     	;# 
  2469  020E                     	;# 
  2470  0211                     	;# 
  2471  0211                     	;# 
  2472  0212                     	;# 
  2473  0212                     	;# 
  2474  0213                     	;# 
  2475  0213                     	;# 
  2476  0214                     	;# 
  2477  0214                     	;# 
  2478  0215                     	;# 
  2479  0215                     	;# 
  2480  0215                     	;# 
  2481  0215                     	;# 
  2482  0216                     	;# 
  2483  0216                     	;# 
  2484  0217                     	;# 
  2485  0217                     	;# 
  2486  028C                     	;# 
  2487  028D                     	;# 
  2488  028E                     	;# 
  2489  0291                     	;# 
  2490  0291                     	;# 
  2491  0292                     	;# 
  2492  0293                     	;# 
  2493  0293                     	;# 
  2494  0298                     	;# 
  2495  0298                     	;# 
  2496  0299                     	;# 
  2497  029A                     	;# 
  2498  029A                     	;# 
  2499  029E                     	;# 
  2500  030C                     	;# 
  2501  030D                     	;# 
  2502  030E                     	;# 
  2503  038C                     	;# 
  2504  038D                     	;# 
  2505  038E                     	;# 
  2506  0391                     	;# 
  2507  0392                     	;# 
  2508  0393                     	;# 
  2509  0394                     	;# 
  2510  0395                     	;# 
  2511  0396                     	;# 
  2512  0397                     	;# 
  2513  0398                     	;# 
  2514  0399                     	;# 
  2515  0415                     	;# 
  2516  0416                     	;# 
  2517  0417                     	;# 
  2518  041C                     	;# 
  2519  041D                     	;# 
  2520  041E                     	;# 
  2521  0511                     	;# 
  2522  0515                     	;# 
  2523  0617                     	;# 
  2524  0618                     	;# 
  2525  0619                     	;# 
  2526  0619                     	;# 
  2527  061A                     	;# 
  2528  061B                     	;# 
  2529  061C                     	;# 
  2530  061C                     	;# 
  2531  0691                     	;# 
  2532  0692                     	;# 
  2533  0693                     	;# 
  2534  0694                     	;# 
  2535  0695                     	;# 
  2536  0696                     	;# 
  2537  0697                     	;# 
  2538  0698                     	;# 
  2539  0699                     	;# 
  2540  069A                     	;# 
  2541  069B                     	;# 
  2542  069C                     	;# 
  2543  069D                     	;# 
  2544  069E                     	;# 
  2545  069F                     	;# 
  2546  0E0F                     	;# 
  2547  0E10                     	;# 
  2548  0E11                     	;# 
  2549  0E12                     	;# 
  2550  0E13                     	;# 
  2551  0E14                     	;# 
  2552  0E15                     	;# 
  2553  0E17                     	;# 
  2554  0E20                     	;# 
  2555  0E21                     	;# 
  2556  0E22                     	;# 
  2557  0E24                     	;# 
  2558  0E25                     	;# 
  2559  0E28                     	;# 
  2560  0E29                     	;# 
  2561  0E2A                     	;# 
  2562  0E2B                     	;# 
  2563  0E90                     	;# 
  2564  0E91                     	;# 
  2565  0E92                     	;# 
  2566  0E94                     	;# 
  2567  0E95                     	;# 
  2568  0E9C                     	;# 
  2569  0E9D                     	;# 
  2570  0E9E                     	;# 
  2571  0E9F                     	;# 
  2572  0EA0                     	;# 
  2573  0EA1                     	;# 
  2574  0EA2                     	;# 
  2575  0EA3                     	;# 
  2576  0EA4                     	;# 
  2577  0EA5                     	;# 
  2578  0EA6                     	;# 
  2579  0EA7                     	;# 
  2580  0F0F                     	;# 
  2581  0F10                     	;# 
  2582  0F11                     	;# 
  2583  0F12                     	;# 
  2584  0F13                     	;# 
  2585  0F14                     	;# 
  2586  0F15                     	;# 
  2587  0F16                     	;# 
  2588  0F17                     	;# 
  2589  0F18                     	;# 
  2590  0F19                     	;# 
  2591  0F1A                     	;# 
  2592  0F1B                     	;# 
  2593  0F1C                     	;# 
  2594  0F1D                     	;# 
  2595  0F1E                     	;# 
  2596  0F1F                     	;# 
  2597  0F20                     	;# 
  2598  0F21                     	;# 
  2599  0F22                     	;# 
  2600  0F23                     	;# 
  2601  0F24                     	;# 
  2602  0F25                     	;# 
  2603  0F26                     	;# 
  2604  0F27                     	;# 
  2605  0F28                     	;# 
  2606  0F29                     	;# 
  2607  0F2A                     	;# 
  2608  0F2B                     	;# 
  2609  0F2C                     	;# 
  2610  0F2D                     	;# 
  2611  0FE4                     	;# 
  2612  0FE5                     	;# 
  2613  0FE6                     	;# 
  2614  0FE7                     	;# 
  2615  0FE8                     	;# 
  2616  0FE9                     	;# 
  2617  0FEA                     	;# 
  2618  0FEB                     	;# 
  2619  0FED                     	;# 
  2620  0FEE                     	;# 
  2621  0FEF                     	;# 
  2622  0000                     	;# 
  2623  0001                     	;# 
  2624  0002                     	;# 
  2625  0003                     	;# 
  2626  0004                     	;# 
  2627  0005                     	;# 
  2628  0006                     	;# 
  2629  0007                     	;# 
  2630  0008                     	;# 
  2631  0009                     	;# 
  2632  000A                     	;# 
  2633  000B                     	;# 
  2634  000C                     	;# 
  2635  000D                     	;# 
  2636  000E                     	;# 
  2637  0011                     	;# 
  2638  0012                     	;# 
  2639  0013                     	;# 
  2640  0015                     	;# 
  2641  0016                     	;# 
  2642  0016                     	;# 
  2643  0017                     	;# 
  2644  0018                     	;# 
  2645  0019                     	;# 
  2646  001A                     	;# 
  2647  001B                     	;# 
  2648  001C                     	;# 
  2649  008C                     	;# 
  2650  008D                     	;# 
  2651  008E                     	;# 
  2652  0091                     	;# 
  2653  0092                     	;# 
  2654  0093                     	;# 
  2655  0095                     	;# 
  2656  0096                     	;# 
  2657  0097                     	;# 
  2658  0098                     	;# 
  2659  0099                     	;# 
  2660  009A                     	;# 
  2661  009B                     	;# 
  2662  009B                     	;# 
  2663  009C                     	;# 
  2664  009D                     	;# 
  2665  009E                     	;# 
  2666  009F                     	;# 
  2667  010C                     	;# 
  2668  010D                     	;# 
  2669  010E                     	;# 
  2670  0111                     	;# 
  2671  0112                     	;# 
  2672  0113                     	;# 
  2673  0114                     	;# 
  2674  0115                     	;# 
  2675  0116                     	;# 
  2676  0117                     	;# 
  2677  0118                     	;# 
  2678  0119                     	;# 
  2679  011C                     	;# 
  2680  018C                     	;# 
  2681  018D                     	;# 
  2682  018E                     	;# 
  2683  0191                     	;# 
  2684  0191                     	;# 
  2685  0192                     	;# 
  2686  0193                     	;# 
  2687  0193                     	;# 
  2688  0194                     	;# 
  2689  0195                     	;# 
  2690  0196                     	;# 
  2691  0199                     	;# 
  2692  0199                     	;# 
  2693  0199                     	;# 
  2694  019A                     	;# 
  2695  019A                     	;# 
  2696  019A                     	;# 
  2697  019B                     	;# 
  2698  019B                     	;# 
  2699  019B                     	;# 
  2700  019B                     	;# 
  2701  019B                     	;# 
  2702  019C                     	;# 
  2703  019C                     	;# 
  2704  019C                     	;# 
  2705  019D                     	;# 
  2706  019D                     	;# 
  2707  019D                     	;# 
  2708  019E                     	;# 
  2709  019E                     	;# 
  2710  019E                     	;# 
  2711  019F                     	;# 
  2712  019F                     	;# 
  2713  019F                     	;# 
  2714  019F                     	;# 
  2715  019F                     	;# 
  2716  020C                     	;# 
  2717  020D                     	;# 
  2718  020E                     	;# 
  2719  0211                     	;# 
  2720  0211                     	;# 
  2721  0212                     	;# 
  2722  0212                     	;# 
  2723  0213                     	;# 
  2724  0213                     	;# 
  2725  0214                     	;# 
  2726  0214                     	;# 
  2727  0215                     	;# 
  2728  0215                     	;# 
  2729  0215                     	;# 
  2730  0215                     	;# 
  2731  0216                     	;# 
  2732  0216                     	;# 
  2733  0217                     	;# 
  2734  0217                     	;# 
  2735  028C                     	;# 
  2736  028D                     	;# 
  2737  028E                     	;# 
  2738  0291                     	;# 
  2739  0291                     	;# 
  2740  0292                     	;# 
  2741  0293                     	;# 
  2742  0293                     	;# 
  2743  0298                     	;# 
  2744  0298                     	;# 
  2745  0299                     	;# 
  2746  029A                     	;# 
  2747  029A                     	;# 
  2748  029E                     	;# 
  2749  030C                     	;# 
  2750  030D                     	;# 
  2751  030E                     	;# 
  2752  038C                     	;# 
  2753  038D                     	;# 
  2754  038E                     	;# 
  2755  0391                     	;# 
  2756  0392                     	;# 
  2757  0393                     	;# 
  2758  0394                     	;# 
  2759  0395                     	;# 
  2760  0396                     	;# 
  2761  0397                     	;# 
  2762  0398                     	;# 
  2763  0399                     	;# 
  2764  0415                     	;# 
  2765  0416                     	;# 
  2766  0417                     	;# 
  2767  041C                     	;# 
  2768  041D                     	;# 
  2769  041E                     	;# 
  2770  0511                     	;# 
  2771  0515                     	;# 
  2772  0617                     	;# 
  2773  0618                     	;# 
  2774  0619                     	;# 
  2775  0619                     	;# 
  2776  061A                     	;# 
  2777  061B                     	;# 
  2778  061C                     	;# 
  2779  061C                     	;# 
  2780  0691                     	;# 
  2781  0692                     	;# 
  2782  0693                     	;# 
  2783  0694                     	;# 
  2784  0695                     	;# 
  2785  0696                     	;# 
  2786  0697                     	;# 
  2787  0698                     	;# 
  2788  0699                     	;# 
  2789  069A                     	;# 
  2790  069B                     	;# 
  2791  069C                     	;# 
  2792  069D                     	;# 
  2793  069E                     	;# 
  2794  069F                     	;# 
  2795  0E0F                     	;# 
  2796  0E10                     	;# 
  2797  0E11                     	;# 
  2798  0E12                     	;# 
  2799  0E13                     	;# 
  2800  0E14                     	;# 
  2801  0E15                     	;# 
  2802  0E17                     	;# 
  2803  0E20                     	;# 
  2804  0E21                     	;# 
  2805  0E22                     	;# 
  2806  0E24                     	;# 
  2807  0E25                     	;# 
  2808  0E28                     	;# 
  2809  0E29                     	;# 
  2810  0E2A                     	;# 
  2811  0E2B                     	;# 
  2812  0E90                     	;# 
  2813  0E91                     	;# 
  2814  0E92                     	;# 
  2815  0E94                     	;# 
  2816  0E95                     	;# 
  2817  0E9C                     	;# 
  2818  0E9D                     	;# 
  2819  0E9E                     	;# 
  2820  0E9F                     	;# 
  2821  0EA0                     	;# 
  2822  0EA1                     	;# 
  2823  0EA2                     	;# 
  2824  0EA3                     	;# 
  2825  0EA4                     	;# 
  2826  0EA5                     	;# 
  2827  0EA6                     	;# 
  2828  0EA7                     	;# 
  2829  0F0F                     	;# 
  2830  0F10                     	;# 
  2831  0F11                     	;# 
  2832  0F12                     	;# 
  2833  0F13                     	;# 
  2834  0F14                     	;# 
  2835  0F15                     	;# 
  2836  0F16                     	;# 
  2837  0F17                     	;# 
  2838  0F18                     	;# 
  2839  0F19                     	;# 
  2840  0F1A                     	;# 
  2841  0F1B                     	;# 
  2842  0F1C                     	;# 
  2843  0F1D                     	;# 
  2844  0F1E                     	;# 
  2845  0F1F                     	;# 
  2846  0F20                     	;# 
  2847  0F21                     	;# 
  2848  0F22                     	;# 
  2849  0F23                     	;# 
  2850  0F24                     	;# 
  2851  0F25                     	;# 
  2852  0F26                     	;# 
  2853  0F27                     	;# 
  2854  0F28                     	;# 
  2855  0F29                     	;# 
  2856  0F2A                     	;# 
  2857  0F2B                     	;# 
  2858  0F2C                     	;# 
  2859  0F2D                     	;# 
  2860  0FE4                     	;# 
  2861  0FE5                     	;# 
  2862  0FE6                     	;# 
  2863  0FE7                     	;# 
  2864  0FE8                     	;# 
  2865  0FE9                     	;# 
  2866  0FEA                     	;# 
  2867  0FEB                     	;# 
  2868  0FED                     	;# 
  2869  0FEE                     	;# 
  2870  0FEF                     	;# 
  2871  0000                     	;# 
  2872  0001                     	;# 
  2873  0002                     	;# 
  2874  0003                     	;# 
  2875  0004                     	;# 
  2876  0005                     	;# 
  2877  0006                     	;# 
  2878  0007                     	;# 
  2879  0008                     	;# 
  2880  0009                     	;# 
  2881  000A                     	;# 
  2882  000B                     	;# 
  2883  000C                     	;# 
  2884  000D                     	;# 
  2885  000E                     	;# 
  2886  0011                     	;# 
  2887  0012                     	;# 
  2888  0013                     	;# 
  2889  0015                     	;# 
  2890  0016                     	;# 
  2891  0016                     	;# 
  2892  0017                     	;# 
  2893  0018                     	;# 
  2894  0019                     	;# 
  2895  001A                     	;# 
  2896  001B                     	;# 
  2897  001C                     	;# 
  2898  008C                     	;# 
  2899  008D                     	;# 
  2900  008E                     	;# 
  2901  0091                     	;# 
  2902  0092                     	;# 
  2903  0093                     	;# 
  2904  0095                     	;# 
  2905  0096                     	;# 
  2906  0097                     	;# 
  2907  0098                     	;# 
  2908  0099                     	;# 
  2909  009A                     	;# 
  2910  009B                     	;# 
  2911  009B                     	;# 
  2912  009C                     	;# 
  2913  009D                     	;# 
  2914  009E                     	;# 
  2915  009F                     	;# 
  2916  010C                     	;# 
  2917  010D                     	;# 
  2918  010E                     	;# 
  2919  0111                     	;# 
  2920  0112                     	;# 
  2921  0113                     	;# 
  2922  0114                     	;# 
  2923  0115                     	;# 
  2924  0116                     	;# 
  2925  0117                     	;# 
  2926  0118                     	;# 
  2927  0119                     	;# 
  2928  011C                     	;# 
  2929  018C                     	;# 
  2930  018D                     	;# 
  2931  018E                     	;# 
  2932  0191                     	;# 
  2933  0191                     	;# 
  2934  0192                     	;# 
  2935  0193                     	;# 
  2936  0193                     	;# 
  2937  0194                     	;# 
  2938  0195                     	;# 
  2939  0196                     	;# 
  2940  0199                     	;# 
  2941  0199                     	;# 
  2942  0199                     	;# 
  2943  019A                     	;# 
  2944  019A                     	;# 
  2945  019A                     	;# 
  2946  019B                     	;# 
  2947  019B                     	;# 
  2948  019B                     	;# 
  2949  019B                     	;# 
  2950  019B                     	;# 
  2951  019C                     	;# 
  2952  019C                     	;# 
  2953  019C                     	;# 
  2954  019D                     	;# 
  2955  019D                     	;# 
  2956  019D                     	;# 
  2957  019E                     	;# 
  2958  019E                     	;# 
  2959  019E                     	;# 
  2960  019F                     	;# 
  2961  019F                     	;# 
  2962  019F                     	;# 
  2963  019F                     	;# 
  2964  019F                     	;# 
  2965  020C                     	;# 
  2966  020D                     	;# 
  2967  020E                     	;# 
  2968  0211                     	;# 
  2969  0211                     	;# 
  2970  0212                     	;# 
  2971  0212                     	;# 
  2972  0213                     	;# 
  2973  0213                     	;# 
  2974  0214                     	;# 
  2975  0214                     	;# 
  2976  0215                     	;# 
  2977  0215                     	;# 
  2978  0215                     	;# 
  2979  0215                     	;# 
  2980  0216                     	;# 
  2981  0216                     	;# 
  2982  0217                     	;# 
  2983  0217                     	;# 
  2984  028C                     	;# 
  2985  028D                     	;# 
  2986  028E                     	;# 
  2987  0291                     	;# 
  2988  0291                     	;# 
  2989  0292                     	;# 
  2990  0293                     	;# 
  2991  0293                     	;# 
  2992  0298                     	;# 
  2993  0298                     	;# 
  2994  0299                     	;# 
  2995  029A                     	;# 
  2996  029A                     	;# 
  2997  029E                     	;# 
  2998  030C                     	;# 
  2999  030D                     	;# 
  3000  030E                     	;# 
  3001  038C                     	;# 
  3002  038D                     	;# 
  3003  038E                     	;# 
  3004  0391                     	;# 
  3005  0392                     	;# 
  3006  0393                     	;# 
  3007  0394                     	;# 
  3008  0395                     	;# 
  3009  0396                     	;# 
  3010  0397                     	;# 
  3011  0398                     	;# 
  3012  0399                     	;# 
  3013  0415                     	;# 
  3014  0416                     	;# 
  3015  0417                     	;# 
  3016  041C                     	;# 
  3017  041D                     	;# 
  3018  041E                     	;# 
  3019  0511                     	;# 
  3020  0515                     	;# 
  3021  0617                     	;# 
  3022  0618                     	;# 
  3023  0619                     	;# 
  3024  0619                     	;# 
  3025  061A                     	;# 
  3026  061B                     	;# 
  3027  061C                     	;# 
  3028  061C                     	;# 
  3029  0691                     	;# 
  3030  0692                     	;# 
  3031  0693                     	;# 
  3032  0694                     	;# 
  3033  0695                     	;# 
  3034  0696                     	;# 
  3035  0697                     	;# 
  3036  0698                     	;# 
  3037  0699                     	;# 
  3038  069A                     	;# 
  3039  069B                     	;# 
  3040  069C                     	;# 
  3041  069D                     	;# 
  3042  069E                     	;# 
  3043  069F                     	;# 
  3044  0E0F                     	;# 
  3045  0E10                     	;# 
  3046  0E11                     	;# 
  3047  0E12                     	;# 
  3048  0E13                     	;# 
  3049  0E14                     	;# 
  3050  0E15                     	;# 
  3051  0E17                     	;# 
  3052  0E20                     	;# 
  3053  0E21                     	;# 
  3054  0E22                     	;# 
  3055  0E24                     	;# 
  3056  0E25                     	;# 
  3057  0E28                     	;# 
  3058  0E29                     	;# 
  3059  0E2A                     	;# 
  3060  0E2B                     	;# 
  3061  0E90                     	;# 
  3062  0E91                     	;# 
  3063  0E92                     	;# 
  3064  0E94                     	;# 
  3065  0E95                     	;# 
  3066  0E9C                     	;# 
  3067  0E9D                     	;# 
  3068  0E9E                     	;# 
  3069  0E9F                     	;# 
  3070  0EA0                     	;# 
  3071  0EA1                     	;# 
  3072  0EA2                     	;# 
  3073  0EA3                     	;# 
  3074  0EA4                     	;# 
  3075  0EA5                     	;# 
  3076  0EA6                     	;# 
  3077  0EA7                     	;# 
  3078  0F0F                     	;# 
  3079  0F10                     	;# 
  3080  0F11                     	;# 
  3081  0F12                     	;# 
  3082  0F13                     	;# 
  3083  0F14                     	;# 
  3084  0F15                     	;# 
  3085  0F16                     	;# 
  3086  0F17                     	;# 
  3087  0F18                     	;# 
  3088  0F19                     	;# 
  3089  0F1A                     	;# 
  3090  0F1B                     	;# 
  3091  0F1C                     	;# 
  3092  0F1D                     	;# 
  3093  0F1E                     	;# 
  3094  0F1F                     	;# 
  3095  0F20                     	;# 
  3096  0F21                     	;# 
  3097  0F22                     	;# 
  3098  0F23                     	;# 
  3099  0F24                     	;# 
  3100  0F25                     	;# 
  3101  0F26                     	;# 
  3102  0F27                     	;# 
  3103  0F28                     	;# 
  3104  0F29                     	;# 
  3105  0F2A                     	;# 
  3106  0F2B                     	;# 
  3107  0F2C                     	;# 
  3108  0F2D                     	;# 
  3109  0FE4                     	;# 
  3110  0FE5                     	;# 
  3111  0FE6                     	;# 
  3112  0FE7                     	;# 
  3113  0FE8                     	;# 
  3114  0FE9                     	;# 
  3115  0FEA                     	;# 
  3116  0FEB                     	;# 
  3117  0FED                     	;# 
  3118  0FEE                     	;# 
  3119  0FEF                     	;# 
  3120  0000                     	;# 
  3121  0001                     	;# 
  3122  0002                     	;# 
  3123  0003                     	;# 
  3124  0004                     	;# 
  3125  0005                     	;# 
  3126  0006                     	;# 
  3127  0007                     	;# 
  3128  0008                     	;# 
  3129  0009                     	;# 
  3130  000A                     	;# 
  3131  000B                     	;# 
  3132  000C                     	;# 
  3133  000D                     	;# 
  3134  000E                     	;# 
  3135  0011                     	;# 
  3136  0012                     	;# 
  3137  0013                     	;# 
  3138  0015                     	;# 
  3139  0016                     	;# 
  3140  0016                     	;# 
  3141  0017                     	;# 
  3142  0018                     	;# 
  3143  0019                     	;# 
  3144  001A                     	;# 
  3145  001B                     	;# 
  3146  001C                     	;# 
  3147  008C                     	;# 
  3148  008D                     	;# 
  3149  008E                     	;# 
  3150  0091                     	;# 
  3151  0092                     	;# 
  3152  0093                     	;# 
  3153  0095                     	;# 
  3154  0096                     	;# 
  3155  0097                     	;# 
  3156  0098                     	;# 
  3157  0099                     	;# 
  3158  009A                     	;# 
  3159  009B                     	;# 
  3160  009B                     	;# 
  3161  009C                     	;# 
  3162  009D                     	;# 
  3163  009E                     	;# 
  3164  009F                     	;# 
  3165  010C                     	;# 
  3166  010D                     	;# 
  3167  010E                     	;# 
  3168  0111                     	;# 
  3169  0112                     	;# 
  3170  0113                     	;# 
  3171  0114                     	;# 
  3172  0115                     	;# 
  3173  0116                     	;# 
  3174  0117                     	;# 
  3175  0118                     	;# 
  3176  0119                     	;# 
  3177  011C                     	;# 
  3178  018C                     	;# 
  3179  018D                     	;# 
  3180  018E                     	;# 
  3181  0191                     	;# 
  3182  0191                     	;# 
  3183  0192                     	;# 
  3184  0193                     	;# 
  3185  0193                     	;# 
  3186  0194                     	;# 
  3187  0195                     	;# 
  3188  0196                     	;# 
  3189  0199                     	;# 
  3190  0199                     	;# 
  3191  0199                     	;# 
  3192  019A                     	;# 
  3193  019A                     	;# 
  3194  019A                     	;# 
  3195  019B                     	;# 
  3196  019B                     	;# 
  3197  019B                     	;# 
  3198  019B                     	;# 
  3199  019B                     	;# 
  3200  019C                     	;# 
  3201  019C                     	;# 
  3202  019C                     	;# 
  3203  019D                     	;# 
  3204  019D                     	;# 
  3205  019D                     	;# 
  3206  019E                     	;# 
  3207  019E                     	;# 
  3208  019E                     	;# 
  3209  019F                     	;# 
  3210  019F                     	;# 
  3211  019F                     	;# 
  3212  019F                     	;# 
  3213  019F                     	;# 
  3214  020C                     	;# 
  3215  020D                     	;# 
  3216  020E                     	;# 
  3217  0211                     	;# 
  3218  0211                     	;# 
  3219  0212                     	;# 
  3220  0212                     	;# 
  3221  0213                     	;# 
  3222  0213                     	;# 
  3223  0214                     	;# 
  3224  0214                     	;# 
  3225  0215                     	;# 
  3226  0215                     	;# 
  3227  0215                     	;# 
  3228  0215                     	;# 
  3229  0216                     	;# 
  3230  0216                     	;# 
  3231  0217                     	;# 
  3232  0217                     	;# 
  3233  028C                     	;# 
  3234  028D                     	;# 
  3235  028E                     	;# 
  3236  0291                     	;# 
  3237  0291                     	;# 
  3238  0292                     	;# 
  3239  0293                     	;# 
  3240  0293                     	;# 
  3241  0298                     	;# 
  3242  0298                     	;# 
  3243  0299                     	;# 
  3244  029A                     	;# 
  3245  029A                     	;# 
  3246  029E                     	;# 
  3247  030C                     	;# 
  3248  030D                     	;# 
  3249  030E                     	;# 
  3250  038C                     	;# 
  3251  038D                     	;# 
  3252  038E                     	;# 
  3253  0391                     	;# 
  3254  0392                     	;# 
  3255  0393                     	;# 
  3256  0394                     	;# 
  3257  0395                     	;# 
  3258  0396                     	;# 
  3259  0397                     	;# 
  3260  0398                     	;# 
  3261  0399                     	;# 
  3262  0415                     	;# 
  3263  0416                     	;# 
  3264  0417                     	;# 
  3265  041C                     	;# 
  3266  041D                     	;# 
  3267  041E                     	;# 
  3268  0511                     	;# 
  3269  0515                     	;# 
  3270  0617                     	;# 
  3271  0618                     	;# 
  3272  0619                     	;# 
  3273  0619                     	;# 
  3274  061A                     	;# 
  3275  061B                     	;# 
  3276  061C                     	;# 
  3277  061C                     	;# 
  3278  0691                     	;# 
  3279  0692                     	;# 
  3280  0693                     	;# 
  3281  0694                     	;# 
  3282  0695                     	;# 
  3283  0696                     	;# 
  3284  0697                     	;# 
  3285  0698                     	;# 
  3286  0699                     	;# 
  3287  069A                     	;# 
  3288  069B                     	;# 
  3289  069C                     	;# 
  3290  069D                     	;# 
  3291  069E                     	;# 
  3292  069F                     	;# 
  3293  0E0F                     	;# 
  3294  0E10                     	;# 
  3295  0E11                     	;# 
  3296  0E12                     	;# 
  3297  0E13                     	;# 
  3298  0E14                     	;# 
  3299  0E15                     	;# 
  3300  0E17                     	;# 
  3301  0E20                     	;# 
  3302  0E21                     	;# 
  3303  0E22                     	;# 
  3304  0E24                     	;# 
  3305  0E25                     	;# 
  3306  0E28                     	;# 
  3307  0E29                     	;# 
  3308  0E2A                     	;# 
  3309  0E2B                     	;# 
  3310  0E90                     	;# 
  3311  0E91                     	;# 
  3312  0E92                     	;# 
  3313  0E94                     	;# 
  3314  0E95                     	;# 
  3315  0E9C                     	;# 
  3316  0E9D                     	;# 
  3317  0E9E                     	;# 
  3318  0E9F                     	;# 
  3319  0EA0                     	;# 
  3320  0EA1                     	;# 
  3321  0EA2                     	;# 
  3322  0EA3                     	;# 
  3323  0EA4                     	;# 
  3324  0EA5                     	;# 
  3325  0EA6                     	;# 
  3326  0EA7                     	;# 
  3327  0F0F                     	;# 
  3328  0F10                     	;# 
  3329  0F11                     	;# 
  3330  0F12                     	;# 
  3331  0F13                     	;# 
  3332  0F14                     	;# 
  3333  0F15                     	;# 
  3334  0F16                     	;# 
  3335  0F17                     	;# 
  3336  0F18                     	;# 
  3337  0F19                     	;# 
  3338  0F1A                     	;# 
  3339  0F1B                     	;# 
  3340  0F1C                     	;# 
  3341  0F1D                     	;# 
  3342  0F1E                     	;# 
  3343  0F1F                     	;# 
  3344  0F20                     	;# 
  3345  0F21                     	;# 
  3346  0F22                     	;# 
  3347  0F23                     	;# 
  3348  0F24                     	;# 
  3349  0F25                     	;# 
  3350  0F26                     	;# 
  3351  0F27                     	;# 
  3352  0F28                     	;# 
  3353  0F29                     	;# 
  3354  0F2A                     	;# 
  3355  0F2B                     	;# 
  3356  0F2C                     	;# 
  3357  0F2D                     	;# 
  3358  0FE4                     	;# 
  3359  0FE5                     	;# 
  3360  0FE6                     	;# 
  3361  0FE7                     	;# 
  3362  0FE8                     	;# 
  3363  0FE9                     	;# 
  3364  0FEA                     	;# 
  3365  0FEB                     	;# 
  3366  0FED                     	;# 
  3367  0FEE                     	;# 
  3368  0FEF                     	;# 
  3369  0000                     	;# 
  3370  0001                     	;# 
  3371  0002                     	;# 
  3372  0003                     	;# 
  3373  0004                     	;# 
  3374  0005                     	;# 
  3375  0006                     	;# 
  3376  0007                     	;# 
  3377  0008                     	;# 
  3378  0009                     	;# 
  3379  000A                     	;# 
  3380  000B                     	;# 
  3381  000C                     	;# 
  3382  000D                     	;# 
  3383  000E                     	;# 
  3384  0011                     	;# 
  3385  0012                     	;# 
  3386  0013                     	;# 
  3387  0015                     	;# 
  3388  0016                     	;# 
  3389  0016                     	;# 
  3390  0017                     	;# 
  3391  0018                     	;# 
  3392  0019                     	;# 
  3393  001A                     	;# 
  3394  001B                     	;# 
  3395  001C                     	;# 
  3396  008C                     	;# 
  3397  008D                     	;# 
  3398  008E                     	;# 
  3399  0091                     	;# 
  3400  0092                     	;# 
  3401  0093                     	;# 
  3402  0095                     	;# 
  3403  0096                     	;# 
  3404  0097                     	;# 
  3405  0098                     	;# 
  3406  0099                     	;# 
  3407  009A                     	;# 
  3408  009B                     	;# 
  3409  009B                     	;# 
  3410  009C                     	;# 
  3411  009D                     	;# 
  3412  009E                     	;# 
  3413  009F                     	;# 
  3414  010C                     	;# 
  3415  010D                     	;# 
  3416  010E                     	;# 
  3417  0111                     	;# 
  3418  0112                     	;# 
  3419  0113                     	;# 
  3420  0114                     	;# 
  3421  0115                     	;# 
  3422  0116                     	;# 
  3423  0117                     	;# 
  3424  0118                     	;# 
  3425  0119                     	;# 
  3426  011C                     	;# 
  3427  018C                     	;# 
  3428  018D                     	;# 
  3429  018E                     	;# 
  3430  0191                     	;# 
  3431  0191                     	;# 
  3432  0192                     	;# 
  3433  0193                     	;# 
  3434  0193                     	;# 
  3435  0194                     	;# 
  3436  0195                     	;# 
  3437  0196                     	;# 
  3438  0199                     	;# 
  3439  0199                     	;# 
  3440  0199                     	;# 
  3441  019A                     	;# 
  3442  019A                     	;# 
  3443  019A                     	;# 
  3444  019B                     	;# 
  3445  019B                     	;# 
  3446  019B                     	;# 
  3447  019B                     	;# 
  3448  019B                     	;# 
  3449  019C                     	;# 
  3450  019C                     	;# 
  3451  019C                     	;# 
  3452  019D                     	;# 
  3453  019D                     	;# 
  3454  019D                     	;# 
  3455  019E                     	;# 
  3456  019E                     	;# 
  3457  019E                     	;# 
  3458  019F                     	;# 
  3459  019F                     	;# 
  3460  019F                     	;# 
  3461  019F                     	;# 
  3462  019F                     	;# 
  3463  020C                     	;# 
  3464  020D                     	;# 
  3465  020E                     	;# 
  3466  0211                     	;# 
  3467  0211                     	;# 
  3468  0212                     	;# 
  3469  0212                     	;# 
  3470  0213                     	;# 
  3471  0213                     	;# 
  3472  0214                     	;# 
  3473  0214                     	;# 
  3474  0215                     	;# 
  3475  0215                     	;# 
  3476  0215                     	;# 
  3477  0215                     	;# 
  3478  0216                     	;# 
  3479  0216                     	;# 
  3480  0217                     	;# 
  3481  0217                     	;# 
  3482  028C                     	;# 
  3483  028D                     	;# 
  3484  028E                     	;# 
  3485  0291                     	;# 
  3486  0291                     	;# 
  3487  0292                     	;# 
  3488  0293                     	;# 
  3489  0293                     	;# 
  3490  0298                     	;# 
  3491  0298                     	;# 
  3492  0299                     	;# 
  3493  029A                     	;# 
  3494  029A                     	;# 
  3495  029E                     	;# 
  3496  030C                     	;# 
  3497  030D                     	;# 
  3498  030E                     	;# 
  3499  038C                     	;# 
  3500  038D                     	;# 
  3501  038E                     	;# 
  3502  0391                     	;# 
  3503  0392                     	;# 
  3504  0393                     	;# 
  3505  0394                     	;# 
  3506  0395                     	;# 
  3507  0396                     	;# 
  3508  0397                     	;# 
  3509  0398                     	;# 
  3510  0399                     	;# 
  3511  0415                     	;# 
  3512  0416                     	;# 
  3513  0417                     	;# 
  3514  041C                     	;# 
  3515  041D                     	;# 
  3516  041E                     	;# 
  3517  0511                     	;# 
  3518  0515                     	;# 
  3519  0617                     	;# 
  3520  0618                     	;# 
  3521  0619                     	;# 
  3522  0619                     	;# 
  3523  061A                     	;# 
  3524  061B                     	;# 
  3525  061C                     	;# 
  3526  061C                     	;# 
  3527  0691                     	;# 
  3528  0692                     	;# 
  3529  0693                     	;# 
  3530  0694                     	;# 
  3531  0695                     	;# 
  3532  0696                     	;# 
  3533  0697                     	;# 
  3534  0698                     	;# 
  3535  0699                     	;# 
  3536  069A                     	;# 
  3537  069B                     	;# 
  3538  069C                     	;# 
  3539  069D                     	;# 
  3540  069E                     	;# 
  3541  069F                     	;# 
  3542  0E0F                     	;# 
  3543  0E10                     	;# 
  3544  0E11                     	;# 
  3545  0E12                     	;# 
  3546  0E13                     	;# 
  3547  0E14                     	;# 
  3548  0E15                     	;# 
  3549  0E17                     	;# 
  3550  0E20                     	;# 
  3551  0E21                     	;# 
  3552  0E22                     	;# 
  3553  0E24                     	;# 
  3554  0E25                     	;# 
  3555  0E28                     	;# 
  3556  0E29                     	;# 
  3557  0E2A                     	;# 
  3558  0E2B                     	;# 
  3559  0E90                     	;# 
  3560  0E91                     	;# 
  3561  0E92                     	;# 
  3562  0E94                     	;# 
  3563  0E95                     	;# 
  3564  0E9C                     	;# 
  3565  0E9D                     	;# 
  3566  0E9E                     	;# 
  3567  0E9F                     	;# 
  3568  0EA0                     	;# 
  3569  0EA1                     	;# 
  3570  0EA2                     	;# 
  3571  0EA3                     	;# 
  3572  0EA4                     	;# 
  3573  0EA5                     	;# 
  3574  0EA6                     	;# 
  3575  0EA7                     	;# 
  3576  0F0F                     	;# 
  3577  0F10                     	;# 
  3578  0F11                     	;# 
  3579  0F12                     	;# 
  3580  0F13                     	;# 
  3581  0F14                     	;# 
  3582  0F15                     	;# 
  3583  0F16                     	;# 
  3584  0F17                     	;# 
  3585  0F18                     	;# 
  3586  0F19                     	;# 
  3587  0F1A                     	;# 
  3588  0F1B                     	;# 
  3589  0F1C                     	;# 
  3590  0F1D                     	;# 
  3591  0F1E                     	;# 
  3592  0F1F                     	;# 
  3593  0F20                     	;# 
  3594  0F21                     	;# 
  3595  0F22                     	;# 
  3596  0F23                     	;# 
  3597  0F24                     	;# 
  3598  0F25                     	;# 
  3599  0F26                     	;# 
  3600  0F27                     	;# 
  3601  0F28                     	;# 
  3602  0F29                     	;# 
  3603  0F2A                     	;# 
  3604  0F2B                     	;# 
  3605  0F2C                     	;# 
  3606  0F2D                     	;# 
  3607  0FE4                     	;# 
  3608  0FE5                     	;# 
  3609  0FE6                     	;# 
  3610  0FE7                     	;# 
  3611  0FE8                     	;# 
  3612  0FE9                     	;# 
  3613  0FEA                     	;# 
  3614  0FEB                     	;# 
  3615  0FED                     	;# 
  3616  0FEE                     	;# 
  3617  0FEF                     	;# 
  3618                           
  3619 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  3620  0000                     
  3621 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  3622  0000                     
  3623 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  3624  0000                     
  3625                           	psect	idataCOMMON
  3626  0AEE                     __pidataCOMMON:
  3627                           
  3628                           ;initializer for _dc_frequency_flag
  3629  0AEE  3401               	retlw	1
  3630                           
  3631                           	psect	idataBANK1
  3632  0C44                     __pidataBANK1:
  3633                           
  3634                           ;initializer for _maxFrequencyIndex
  3635  0C44  340A               	retlw	10
  3636  0C45  3400               	retlw	0
  3637                           
  3638                           ;initializer for _maxCurrentIndex
  3639  0C46  340A               	retlw	10
  3640  0C47  3400               	retlw	0
  3641                           
  3642                           ;initializer for _currentIsOn
  3643  0C48  3401               	retlw	1
  3644                           
  3645                           ;initializer for _currentValue
  3646  0C49  3400               	retlw	0
  3647  0C4A  3400               	retlw	0
  3648  0C4B  341E               	retlw	30
  3649  0C4C  3400               	retlw	0
  3650  0C4D  3432               	retlw	50
  3651  0C4E  3400               	retlw	0
  3652  0C4F  3446               	retlw	70
  3653  0C50  3400               	retlw	0
  3654  0C51  345A               	retlw	90
  3655  0C52  3400               	retlw	0
  3656  0C53  346E               	retlw	110
  3657  0C54  3400               	retlw	0
  3658  0C55  3482               	retlw	130
  3659  0C56  3400               	retlw	0
  3660  0C57  34A0               	retlw	160
  3661  0C58  3400               	retlw	0
  3662  0C59  34DC               	retlw	220
  3663  0C5A  3400               	retlw	0
  3664  0C5B  34FA               	retlw	250
  3665  0C5C  3400               	retlw	0
  3666                           
  3667                           	psect	idataBANK2
  3668  0BE9                     __pidataBANK2:
  3669                           
  3670                           ;initializer for _frequencyValue
  3671  0BE9  3400               	retlw	0
  3672  0BEA  3400               	retlw	0
  3673  0BEB  3401               	retlw	1
  3674  0BEC  3400               	retlw	0
  3675  0BED  3441               	retlw	65
  3676  0BEE  3400               	retlw	0
  3677  0BEF  3446               	retlw	70
  3678  0BF0  3400               	retlw	0
  3679  0BF1  344B               	retlw	75
  3680  0BF2  3400               	retlw	0
  3681  0BF3  3450               	retlw	80
  3682  0BF4  3400               	retlw	0
  3683  0BF5  3464               	retlw	100
  3684  0BF6  3400               	retlw	0
  3685  0BF7  3478               	retlw	120
  3686  0BF8  3400               	retlw	0
  3687  0BF9  3482               	retlw	130
  3688  0BFA  3400               	retlw	0
  3689  0BFB  348C               	retlw	140
  3690  0BFC  3400               	retlw	0
  3691                           
  3692                           	psect	stringtext1
  3693  0880                     __pstringtext1:
  3694  0880                     main@BATTERY_THRESHOLD:
  3695  0880  34D0               	retlw	208
  3696  0881  3407               	retlw	7
  3697  0882                     __end_ofmain@BATTERY_THRESHOLD:
  3698                           
  3699                           	psect	stringtext2
  3700  0882                     __pstringtext2:
  3701  0882                     main@BATTERY_NUM_LOW_READINGS:
  3702  0882  3410               	retlw	16
  3703  0883  3427               	retlw	39
  3704  0884                     __end_ofmain@BATTERY_NUM_LOW_READINGS:
  3705  0FE0                     _HEF_persistent_state_absaddr	set	4064
  3706  0FE0                     _HEF_persistent_state_absaddr	set	4064
  3707                           
  3708                           	psect	_HEF_persistent_state_text
  3709  0FE0                     __p_HEF_persistent_state_text:
  3710  0FE0                     _HEF_persistent_state:
  3711  0FE0  3405               	retlw	5
  3712  0FE1  3403               	retlw	3
  3713  0FE2  3400               	retlw	0
  3714  0FE3  3400               	retlw	0
  3715  0FE4  3400               	retlw	0
  3716  0FE5  3400               	retlw	0
  3717  0FE6  3400               	retlw	0
  3718  0FE7  3400               	retlw	0
  3719  0FE8  3400               	retlw	0
  3720  0FE9  3400               	retlw	0
  3721  0FEA  3400               	retlw	0
  3722  0FEB  3400               	retlw	0
  3723  0FEC  3400               	retlw	0
  3724  0FED  3400               	retlw	0
  3725  0FEE  3400               	retlw	0
  3726  0FEF  3400               	retlw	0
  3727  0FF0  3400               	retlw	0
  3728  0FF1  3400               	retlw	0
  3729  0FF2  3400               	retlw	0
  3730  0FF3  3400               	retlw	0
  3731  0FF4  3400               	retlw	0
  3732  0FF5  3400               	retlw	0
  3733  0FF6  3400               	retlw	0
  3734  0FF7  3400               	retlw	0
  3735  0FF8  3400               	retlw	0
  3736  0FF9  3400               	retlw	0
  3737  0FFA  3400               	retlw	0
  3738  0FFB  3400               	retlw	0
  3739  0FFC  3400               	retlw	0
  3740  0FFD  3400               	retlw	0
  3741  0FFE  3400               	retlw	0
  3742  0FFF  3400               	retlw	0
  3743  1000                     __end_of_HEF_persistent_state:
  3744                           
  3745                           	psect	nvBANK1
  3746  00D2                     __pnvBANK1:
  3747  00D2                     _TMR1_InterruptHandler:
  3748  00D2                     	ds	2
  3749  00D4                     _TMR4_InterruptHandler:
  3750  00D4                     	ds	2
  3751  00D6                     _TMR0_InterruptHandler:
  3752  00D6                     	ds	2
  3753  00D8                     _INT_InterruptHandler:
  3754  00D8                     	ds	2
  3755  00DA                     _EUSART_ErrorHandler:
  3756  00DA                     	ds	2
  3757  00DC                     _EUSART_OverrunErrorHandler:
  3758  00DC                     	ds	2
  3759  00DE                     _EUSART_FramingErrorHandler:
  3760  00DE                     	ds	2
  3761  00E0                     _timer1ReloadVal:
  3762  00E0                     	ds	1
  3763  00E1                     _frequencyIndex:
  3764  00E1                     	ds	2
  3765  00E3                     _currentIndex:
  3766  00E3                     	ds	2
  3767  0016                     _TMR1	set	22
  3768  0018                     _T1CONbits	set	24
  3769  001C                     _T2CONbits	set	28
  3770  001C                     _T2CON	set	28
  3771  001A                     _TMR2	set	26
  3772  001B                     _PR2	set	27
  3773  0015                     _TMR0	set	21
  3774  0011                     _PIR1bits	set	17
  3775  0012                     _PIR2bits	set	18
  3776  000B                     _INTCONbits	set	11
  3777  008C                     _TRISAbits	set	140
  3778  008E                     _TRISCbits	set	142
  3779  008D                     _TRISBbits	set	141
  3780  009D                     _ADCON0bits	set	157
  3781  009E                     _ADCON1	set	158
  3782  009D                     _ADCON0	set	157
  3783  0095                     _OPTION_REG	set	149
  3784  0091                     _PIE1bits	set	145
  3785  0092                     _PIE2bits	set	146
  3786  0095                     _OPTION_REGbits	set	149
  3787  008E                     _TRISC	set	142
  3788  008D                     _TRISB	set	141
  3789  008C                     _TRISA	set	140
  3790  0097                     _WDTCON	set	151
  3791  0098                     _OSCTUNE	set	152
  3792  009A                     _OSCSTAT	set	154
  3793  0099                     _OSCCON	set	153
  3794  009B                     _ADRES	set	155
  3795  0117                     _FVRCONbits	set	279
  3796  0117                     _FVRCON	set	279
  3797  010C                     _LATAbits	set	268
  3798  010E                     _LATCbits	set	270
  3799  010D                     _LATBbits	set	269
  3800  010E                     _LATC	set	270
  3801  010D                     _LATB	set	269
  3802  010C                     _LATA	set	268
  3803  0116                     _BORCON	set	278
  3804  0119                     _DAC1CON1	set	281
  3805  0118                     _DAC1CON0	set	280
  3806  0196                     _PMCON2	set	406
  3807  0193                     _PMDATL	set	403
  3808  0194                     _PMDATH	set	404
  3809  0195                     _PMCON1bits	set	405
  3810  0192                     _PMADRH	set	402
  3811  0191                     _PMADRL	set	401
  3812  019A                     _TX1REG	set	410
  3813  0199                     _RC1REG	set	409
  3814  019D                     _RC1STAbits	set	413
  3815  019E                     _TX1STAbits	set	414
  3816  019C                     _SP1BRGH	set	412
  3817  019B                     _SP1BRGL	set	411
  3818  019E                     _TX1STA	set	414
  3819  019D                     _RC1STA	set	413
  3820  019F                     _BAUD1CON	set	415
  3821  018C                     _ANSELA	set	396
  3822  018D                     _ANSELB	set	397
  3823  018E                     _ANSELC	set	398
  3824  020E                     _WPUC	set	526
  3825  020C                     _WPUA	set	524
  3826  020D                     _WPUB	set	525
  3827  0291                     _CCPR1L	set	657
  3828  0293                     _CCP1CONbits	set	659
  3829  029E                     _CCPTMRSbits	set	670
  3830  028E                     _ODCONC	set	654
  3831  028D                     _ODCONB	set	653
  3832  028C                     _ODCONA	set	652
  3833  030E                     _SLRCONC	set	782
  3834  030D                     _SLRCONB	set	781
  3835  030C                     _SLRCONA	set	780
  3836  038E                     _INLVLC	set	910
  3837  038D                     _INLVLB	set	909
  3838  038C                     _INLVLA	set	908
  3839  0417                     _T4CONbits	set	1047
  3840  0417                     _T4CON	set	1047
  3841  0415                     _TMR4	set	1045
  3842  0416                     _PR4	set	1046
  3843  0515                     _OPA2CON	set	1301
  3844  0511                     _OPA1CON	set	1297
  3845  061C                     _PWM4CONbits	set	1564
  3846  061A                     _PWM4DCLbits	set	1562
  3847  061B                     _PWM4DCH	set	1563
  3848  0619                     _PWM3CONbits	set	1561
  3849  0617                     _PWM3DCLbits	set	1559
  3850  0618                     _PWM3DCH	set	1560
  3851  0E24                     _RXPPS	set	3620
  3852  0E10                     _INTPPS	set	3600
  3853  0EA5                     _RC5PPS	set	3749
  3854  0E95                     _RA5PPS	set	3733
  3855  0EA4                     _RC4PPS	set	3748
  3856  0E9F                     _RB7PPS	set	3743
  3857                           
  3858                           	psect	stringtext3
  3859  0800                     __pstringtext3:
  3860  0800                     STR_6:
  3861  0800  340A               	retlw	10
  3862  0801  3420               	retlw	32	;' '
  3863  0802  3463               	retlw	99	;'c'
  3864  0803  3475               	retlw	117	;'u'
  3865  0804  3472               	retlw	114	;'r'
  3866  0805  3472               	retlw	114	;'r'
  3867  0806  3465               	retlw	101	;'e'
  3868  0807  346E               	retlw	110	;'n'
  3869  0808  3474               	retlw	116	;'t'
  3870  0809  3420               	retlw	32	;' '
  3871  080A  3476               	retlw	118	;'v'
  3872  080B  3461               	retlw	97	;'a'
  3873  080C  346C               	retlw	108	;'l'
  3874  080D  3475               	retlw	117	;'u'
  3875  080E  3465               	retlw	101	;'e'
  3876  080F  3420               	retlw	32	;' '
  3877  0810  3473               	retlw	115	;'s'
  3878  0811  3465               	retlw	101	;'e'
  3879  0812  346C               	retlw	108	;'l'
  3880  0813  3465               	retlw	101	;'e'
  3881  0814  3463               	retlw	99	;'c'
  3882  0815  3474               	retlw	116	;'t'
  3883  0816  3465               	retlw	101	;'e'
  3884  0817  3464               	retlw	100	;'d'
  3885  0818  3400               	retlw	0
  3886                           
  3887                           	psect	stringtext4
  3888  0819                     __pstringtext4:
  3889  0819                     STR_5:
  3890  0819  340A               	retlw	10
  3891  081A  3420               	retlw	32	;' '
  3892  081B  3472               	retlw	114	;'r'
  3893  081C  3465               	retlw	101	;'e'
  3894  081D  3473               	retlw	115	;'s'
  3895  081E  3465               	retlw	101	;'e'
  3896  081F  3474               	retlw	116	;'t'
  3897  0820  3420               	retlw	32	;' '
  3898  0821  3476               	retlw	118	;'v'
  3899  0822  3461               	retlw	97	;'a'
  3900  0823  346C               	retlw	108	;'l'
  3901  0824  3475               	retlw	117	;'u'
  3902  0825  3465               	retlw	101	;'e'
  3903  0826  3420               	retlw	32	;' '
  3904  0827  3473               	retlw	115	;'s'
  3905  0828  3465               	retlw	101	;'e'
  3906  0829  346C               	retlw	108	;'l'
  3907  082A  3465               	retlw	101	;'e'
  3908  082B  3463               	retlw	99	;'c'
  3909  082C  3474               	retlw	116	;'t'
  3910  082D  3465               	retlw	101	;'e'
  3911  082E  3464               	retlw	100	;'d'
  3912  082F  3400               	retlw	0
  3913                           
  3914                           	psect	stringtext5
  3915  0830                     __pstringtext5:
  3916  0830                     STR_1:
  3917  0830  340A               	retlw	10
  3918  0831  3420               	retlw	32	;' '
  3919  0832  3446               	retlw	70	;'F'
  3920  0833  3472               	retlw	114	;'r'
  3921  0834  3465               	retlw	101	;'e'
  3922  0835  3471               	retlw	113	;'q'
  3923  0836  3475               	retlw	117	;'u'
  3924  0837  3465               	retlw	101	;'e'
  3925  0838  346E               	retlw	110	;'n'
  3926  0839  3463               	retlw	99	;'c'
  3927  083A  3479               	retlw	121	;'y'
  3928  083B  3420               	retlw	32	;' '
  3929  083C  3473               	retlw	115	;'s'
  3930  083D  3465               	retlw	101	;'e'
  3931  083E  346C               	retlw	108	;'l'
  3932  083F  3465               	retlw	101	;'e'
  3933  0840  3463               	retlw	99	;'c'
  3934  0841  3474               	retlw	116	;'t'
  3935  0842  3465               	retlw	101	;'e'
  3936  0843  3464               	retlw	100	;'d'
  3937  0844  3400               	retlw	0
  3938                           
  3939                           	psect	stringtext6
  3940  0845                     __pstringtext6:
  3941  0845                     STR_4:
  3942  0845  340A               	retlw	10
  3943  0846  3420               	retlw	32	;' '
  3944  0847  3464               	retlw	100	;'d'
  3945  0848  3465               	retlw	101	;'e'
  3946  0849  3463               	retlw	99	;'c'
  3947  084A  3472               	retlw	114	;'r'
  3948  084B  3465               	retlw	101	;'e'
  3949  084C  3461               	retlw	97	;'a'
  3950  084D  3473               	retlw	115	;'s'
  3951  084E  3465               	retlw	101	;'e'
  3952  084F  3420               	retlw	32	;' '
  3953  0850  3473               	retlw	115	;'s'
  3954  0851  3465               	retlw	101	;'e'
  3955  0852  346C               	retlw	108	;'l'
  3956  0853  3465               	retlw	101	;'e'
  3957  0854  3463               	retlw	99	;'c'
  3958  0855  3474               	retlw	116	;'t'
  3959  0856  3465               	retlw	101	;'e'
  3960  0857  3464               	retlw	100	;'d'
  3961  0858  3400               	retlw	0
  3962                           
  3963                           	psect	stringtext7
  3964  0859                     __pstringtext7:
  3965  0859                     STR_3:
  3966  0859  340A               	retlw	10
  3967  085A  3420               	retlw	32	;' '
  3968  085B  3469               	retlw	105	;'i'
  3969  085C  346E               	retlw	110	;'n'
  3970  085D  3463               	retlw	99	;'c'
  3971  085E  3472               	retlw	114	;'r'
  3972  085F  3465               	retlw	101	;'e'
  3973  0860  3461               	retlw	97	;'a'
  3974  0861  3473               	retlw	115	;'s'
  3975  0862  3465               	retlw	101	;'e'
  3976  0863  3420               	retlw	32	;' '
  3977  0864  3473               	retlw	115	;'s'
  3978  0865  3465               	retlw	101	;'e'
  3979  0866  346C               	retlw	108	;'l'
  3980  0867  3465               	retlw	101	;'e'
  3981  0868  3463               	retlw	99	;'c'
  3982  0869  3474               	retlw	116	;'t'
  3983  086A  3465               	retlw	101	;'e'
  3984  086B  3464               	retlw	100	;'d'
  3985  086C  3400               	retlw	0
  3986                           
  3987                           	psect	stringtext8
  3988  086D                     __pstringtext8:
  3989  086D                     STR_2:
  3990  086D  340A               	retlw	10
  3991  086E  3420               	retlw	32	;' '
  3992  086F  3463               	retlw	99	;'c'
  3993  0870  3475               	retlw	117	;'u'
  3994  0871  3472               	retlw	114	;'r'
  3995  0872  3472               	retlw	114	;'r'
  3996  0873  3465               	retlw	101	;'e'
  3997  0874  346E               	retlw	110	;'n'
  3998  0875  3474               	retlw	116	;'t'
  3999  0876  3420               	retlw	32	;' '
  4000  0877  3473               	retlw	115	;'s'
  4001  0878  3465               	retlw	101	;'e'
  4002  0879  346C               	retlw	108	;'l'
  4003  087A  3465               	retlw	101	;'e'
  4004  087B  3463               	retlw	99	;'c'
  4005  087C  3474               	retlw	116	;'t'
  4006  087D  3465               	retlw	101	;'e'
  4007  087E  3464               	retlw	100	;'d'
  4008  087F  3400               	retlw	0
  4009                           
  4010                           	psect	stringtext9
  4011  0000                     __pstringtext9:
  4012  0800                     
  4013                           	psect	cinit
  4014  004D                     start_initialization:	
  4015                           ; #config settings
  4016                           
  4017  004D                     __initialization:
  4018                           
  4019                           ; Initialize objects allocated to COMMON
  4020  004D  318A  22EE  3180   	fcall	__pidataCOMMON	;fetch initializer
  4021  0050  00FA               	movwf	__pdataCOMMON& (0+127)
  4022                           
  4023                           ; Initialize objects allocated to BANK1
  4024  0051  3044               	movlw	low __pidataBANK1
  4025  0052  0084               	movwf	4
  4026  0053  308C               	movlw	(high __pidataBANK1)| (0+128)
  4027  0054  0085               	movwf	5
  4028  0055  30B9               	movlw	low __pdataBANK1
  4029  0056  0086               	movwf	6
  4030  0057  3000               	movlw	high __pdataBANK1
  4031  0058  0087               	movwf	7
  4032  0059  3019               	movlw	25
  4033  005A  318B  2345  3180   	fcall	init_ram
  4034                           
  4035                           ; Initialize objects allocated to BANK2
  4036  005D  30E9               	movlw	low __pidataBANK2
  4037  005E  0084               	movwf	4
  4038  005F  308B               	movlw	(high __pidataBANK2)| (0+128)
  4039  0060  0085               	movwf	5
  4040  0061  3040               	movlw	low __pdataBANK2
  4041  0062  0086               	movwf	6
  4042  0063  3001               	movlw	high __pdataBANK2
  4043  0064  0087               	movwf	7
  4044  0065  3014               	movlw	20
  4045  0066  318B  2345  3180   	fcall	init_ram
  4046                           
  4047                           ; Clear objects allocated to COMMON
  4048  0069  01F8               	clrf	__pbssCOMMON& (0+127)
  4049  006A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  4050                           
  4051                           ; Clear objects allocated to BANK1
  4052  006B  30A0               	movlw	low __pbssBANK1
  4053  006C  0084               	movwf	4
  4054  006D  3000               	movlw	high __pbssBANK1
  4055  006E  0085               	movwf	5
  4056  006F  3019               	movlw	25
  4057  0070  318B  233F  3180   	fcall	clear_ram0
  4058                           
  4059                           ; Clear objects allocated to BANK2
  4060  0073  3020               	movlw	low __pbssBANK2
  4061  0074  0084               	movwf	4
  4062  0075  3001               	movlw	high __pbssBANK2
  4063  0076  0085               	movwf	5
  4064  0077  3020               	movlw	32
  4065  0078  318B  233F  3180   	fcall	clear_ram0
  4066                           
  4067                           ; Clear objects allocated to BANK3
  4068  007B  30A0               	movlw	low __pbssBANK3
  4069  007C  0084               	movwf	4
  4070  007D  3001               	movlw	high __pbssBANK3
  4071  007E  0085               	movwf	5
  4072  007F  3021               	movlw	33
  4073  0080  318B  233F  3180   	fcall	clear_ram0
  4074  0083                     end_of_initialization:	
  4075                           ;End of C runtime variable initialization code
  4076                           
  4077  0083                     __end_of__initialization:
  4078  0083  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4079  0084  0020               	movlb	0
  4080  0085  3184  2C62         	ljmp	_main	;jump to C main() function
  4081                           
  4082                           	psect	bssCOMMON
  4083  0078                     __pbssCOMMON:
  4084  0078                     _interfaceState:
  4085  0078                     	ds	1
  4086  0079                     _timer0ReloadVal:
  4087  0079                     	ds	1
  4088                           
  4089                           	psect	dataCOMMON
  4090  007A                     __pdataCOMMON:
  4091  007A                     _dc_frequency_flag:
  4092  007A                     	ds	1
  4093                           
  4094                           	psect	bssBANK1
  4095  00A0                     __pbssBANK1:
  4096  00A0                     _nout:
  4097  00A0                     	ds	2
  4098  00A2                     _width:
  4099  00A2                     	ds	2
  4100  00A4                     _prec:
  4101  00A4                     	ds	2
  4102  00A6                     _flags:
  4103  00A6                     	ds	2
  4104  00A8                     _Vdd_mv:
  4105  00A8                     	ds	2
  4106  00AA                     _microamps:
  4107  00AA                     	ds	2
  4108  00AC                     _LED_blue:
  4109  00AC                     	ds	1
  4110  00AD                     _LED_green:
  4111  00AD                     	ds	1
  4112  00AE                     _LED_red:
  4113  00AE                     	ds	1
  4114  00AF                     _latchTester:
  4115  00AF                     	ds	1
  4116  00B0                     _oneHzCounter:
  4117  00B0                     	ds	1
  4118  00B1                     _dac_value:
  4119  00B1                     	ds	1
  4120  00B2                     _eusartRxLastError:
  4121  00B2                     	ds	1
  4122  00B3                     _ir_code:
  4123  00B3                     	ds	6
  4124                           
  4125                           	psect	dataBANK1
  4126  00B9                     __pdataBANK1:
  4127  00B9                     _maxFrequencyIndex:
  4128  00B9                     	ds	2
  4129  00BB                     _maxCurrentIndex:
  4130  00BB                     	ds	2
  4131  00BD                     _currentIsOn:
  4132  00BD                     	ds	1
  4133  00BE                     _currentValue:
  4134  00BE                     	ds	20
  4135                           
  4136                           	psect	bssBANK2
  4137  0120                     __pbssBANK2:
  4138  0120                     _dbuf:
  4139  0120                     	ds	32
  4140                           
  4141                           	psect	dataBANK2
  4142  0140                     __pdataBANK2:
  4143  0140                     _frequencyValue:
  4144  0140                     	ds	20
  4145                           
  4146                           	psect	bssBANK3
  4147  01A0                     __pbssBANK3:
  4148  01A0                     _stats:
  4149  01A0                     	ds	33
  4150                           
  4151                           	psect	inittext
  4152  0B45                     init_ram:
  4153  0B45  00FE               	movwf	btemp
  4154  0B46                     initloop:
  4155  0B46  0012               	moviw fsr0++
  4156  0B47  001E               	movwi fsr1++
  4157  0B48  0BFE               	decfsz	btemp,f
  4158  0B49  2B46               	goto	initloop
  4159  0B4A  3400               	retlw	0
  4160                           
  4161                           	psect	clrtext
  4162  0B3F                     clear_ram0:	
  4163                           ;	Called with FSR0 containing the base address, and
  4164                           ;	WREG with the size to clear
  4165                           
  4166  0B3F  0064               	clrwdt	;clear the watchdog before getting into this loop
  4167  0B40                     clrloop0:
  4168  0B40  0180               	clrf	0	;clear RAM location pointed to by FSR
  4169  0B41  3101               	addfsr 0,1
  4170  0B42  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4171  0B43  2B40               	goto	clrloop0	;have we reached the end yet?
  4172  0B44  3400               	retlw	0	;all done for this memory range, return
  4173                           
  4174                           	psect	cstackBANK1
  4175  00E5                     __pcstackBANK1:
  4176  00E5                     ??_process_remote_command:
  4177                           
  4178                           ; 1 bytes @ 0x0
  4179  00E5                     	ds	2
  4180  00E7                     process_remote_command@code:
  4181                           
  4182                           ; 1 bytes @ 0x2
  4183  00E7                     	ds	1
  4184  00E8                     ??_main:
  4185                           
  4186                           ; 1 bytes @ 0x3
  4187  00E8                     	ds	1
  4188  00E9                     main@low_reading_count:
  4189                           
  4190                           ; 2 bytes @ 0x4
  4191  00E9                     	ds	2
  4192  00EB                     main@batt_mv:
  4193                           
  4194                           ; 2 bytes @ 0x6
  4195  00EB                     	ds	2
  4196                           
  4197                           	psect	cstackCOMMON
  4198  0070                     __pcstackCOMMON:
  4199  0070                     ?_PIN_MANAGER_Initialize:
  4200  0070                     ?_OSCILLATOR_Initialize:	
  4201                           ; 1 bytes @ 0x0
  4202                           
  4203  0070                     ?_WDT_Initialize:	
  4204                           ; 1 bytes @ 0x0
  4205                           
  4206  0070                     ?_OPA1_Initialize:	
  4207                           ; 1 bytes @ 0x0
  4208                           
  4209  0070                     ?_TMR4_Initialize:	
  4210                           ; 1 bytes @ 0x0
  4211                           
  4212  0070                     ?_OPA2_Initialize:	
  4213                           ; 1 bytes @ 0x0
  4214                           
  4215  0070                     ?_TMR1_Initialize:	
  4216                           ; 1 bytes @ 0x0
  4217                           
  4218  0070                     ?_TMR2_Initialize:	
  4219                           ; 1 bytes @ 0x0
  4220                           
  4221  0070                     ?_EXT_INT_Initialize:	
  4222                           ; 1 bytes @ 0x0
  4223                           
  4224  0070                     ?_TMR0_Initialize:	
  4225                           ; 1 bytes @ 0x0
  4226                           
  4227  0070                     ?_EUSART_Initialize:	
  4228                           ; 1 bytes @ 0x0
  4229                           
  4230  0070                     ?_TMR0_ISR:	
  4231                           ; 1 bytes @ 0x0
  4232                           
  4233  0070                     ??_TMR0_ISR:	
  4234                           ; 1 bytes @ 0x0
  4235                           
  4236  0070                     ?_INT_ISR:	
  4237                           ; 1 bytes @ 0x0
  4238                           
  4239  0070                     ?_TMR4_ISR:	
  4240                           ; 1 bytes @ 0x0
  4241                           
  4242  0070                     ?_TMR1_ISR:	
  4243                           ; 1 bytes @ 0x0
  4244                           
  4245  0070                     ?_INT_CallBack:	
  4246                           ; 1 bytes @ 0x0
  4247                           
  4248  0070                     ?_TMR0_DefaultInterruptHandler:	
  4249                           ; 1 bytes @ 0x0
  4250                           
  4251  0070                     ??_TMR0_DefaultInterruptHandler:	
  4252                           ; 1 bytes @ 0x0
  4253                           
  4254  0070                     ?_TMR4_DefaultInterruptHandler:	
  4255                           ; 1 bytes @ 0x0
  4256                           
  4257  0070                     ?_TMR1_DefaultInterruptHandler:	
  4258                           ; 1 bytes @ 0x0
  4259                           
  4260  0070                     ?_DAC_Initialize:	
  4261                           ; 1 bytes @ 0x0
  4262                           
  4263  0070                     ?_DAC_SetOutput:	
  4264                           ; 1 bytes @ 0x0
  4265                           
  4266  0070                     ??_DAC_SetOutput:	
  4267                           ; 1 bytes @ 0x0
  4268                           
  4269  0070                     ?_SYSTEM_Initialize:	
  4270                           ; 1 bytes @ 0x0
  4271                           
  4272  0070                     ?_PIN_MANAGER_IOC:	
  4273                           ; 1 bytes @ 0x0
  4274                           
  4275  0070                     ??_PIN_MANAGER_IOC:	
  4276                           ; 1 bytes @ 0x0
  4277                           
  4278  0070                     ?_INTERRUPT_InterruptManager:	
  4279                           ; 1 bytes @ 0x0
  4280                           
  4281  0070                     ?_EUSART_Write:	
  4282                           ; 1 bytes @ 0x0
  4283                           
  4284  0070                     ?_putch:	
  4285                           ; 1 bytes @ 0x0
  4286                           
  4287  0070                     ?_INT_DefaultInterruptHandler:	
  4288                           ; 1 bytes @ 0x0
  4289                           
  4290  0070                     ??_INT_DefaultInterruptHandler:	
  4291                           ; 1 bytes @ 0x0
  4292                           
  4293  0070                     ?_TMR4_LoadPeriodRegister:	
  4294                           ; 1 bytes @ 0x0
  4295                           
  4296  0070                     ?_readPersistentState:	
  4297                           ; 1 bytes @ 0x0
  4298                           
  4299  0070                     ?_writePersistentState:	
  4300                           ; 1 bytes @ 0x0
  4301                           
  4302  0070                     ?_initLED:	
  4303                           ; 1 bytes @ 0x0
  4304                           
  4305  0070                     ?_lowBattery:	
  4306                           ; 1 bytes @ 0x0
  4307                           
  4308  0070                     ?_startUp:	
  4309                           ; 1 bytes @ 0x0
  4310                           
  4311  0070                     ?_selectSomething:	
  4312                           ; 1 bytes @ 0x0
  4313                           
  4314  0070                     ?_selectFrequency:	
  4315                           ; 1 bytes @ 0x0
  4316                           
  4317  0070                     ?_selectCurrent:	
  4318                           ; 1 bytes @ 0x0
  4319                           
  4320  0070                     ?_selectIncrease:	
  4321                           ; 1 bytes @ 0x0
  4322                           
  4323  0070                     ?_selectDecrease:	
  4324                           ; 1 bytes @ 0x0
  4325                           
  4326  0070                     ?_selectCurrentValue:	
  4327                           ; 1 bytes @ 0x0
  4328                           
  4329  0070                     ?_selectFrequencyValue:	
  4330                           ; 1 bytes @ 0x0
  4331                           
  4332  0070                     ?_process_remote_command:	
  4333                           ; 1 bytes @ 0x0
  4334                           
  4335  0070                     ?_LATCH_Initialize:	
  4336                           ; 1 bytes @ 0x0
  4337                           
  4338  0070                     ?_main:	
  4339                           ; 1 bytes @ 0x0
  4340                           
  4341  0070                     DAC_SetOutput@inputData:	
  4342                           ; 1 bytes @ 0x0
  4343                           
  4344                           
  4345                           ; 1 bytes @ 0x0
  4346  0070                     	ds	1
  4347  0071                     ??_TMR1_ISR:
  4348  0071                     ??_TMR4_DefaultInterruptHandler:	
  4349                           ; 1 bytes @ 0x1
  4350                           
  4351  0071                     ??_TMR1_DefaultInterruptHandler:	
  4352                           ; 1 bytes @ 0x1
  4353                           
  4354                           
  4355                           ; 1 bytes @ 0x1
  4356  0071                     	ds	1
  4357  0072                     ??_TMR4_ISR:
  4358  0072                     INT_DefaultInterruptHandler@time:	
  4359                           ; 1 bytes @ 0x2
  4360                           
  4361                           
  4362                           ; 1 bytes @ 0x2
  4363  0072                     	ds	1
  4364  0073                     ??_PIN_MANAGER_Initialize:
  4365  0073                     ??_OSCILLATOR_Initialize:	
  4366                           ; 1 bytes @ 0x3
  4367                           
  4368  0073                     ??_WDT_Initialize:	
  4369                           ; 1 bytes @ 0x3
  4370                           
  4371  0073                     ??_OPA1_Initialize:	
  4372                           ; 1 bytes @ 0x3
  4373                           
  4374  0073                     ??_OPA2_Initialize:	
  4375                           ; 1 bytes @ 0x3
  4376                           
  4377  0073                     ??_TMR2_Initialize:	
  4378                           ; 1 bytes @ 0x3
  4379                           
  4380  0073                     ??_INT_ISR:	
  4381                           ; 1 bytes @ 0x3
  4382                           
  4383  0073                     ?_EUSART_SetFramingErrorHandler:	
  4384                           ; 1 bytes @ 0x3
  4385                           
  4386  0073                     ?_EUSART_SetOverrunErrorHandler:	
  4387                           ; 1 bytes @ 0x3
  4388                           
  4389  0073                     ?_EUSART_SetErrorHandler:	
  4390                           ; 1 bytes @ 0x3
  4391                           
  4392  0073                     ??_INT_CallBack:	
  4393                           ; 1 bytes @ 0x3
  4394                           
  4395  0073                     ?_TMR0_SetInterruptHandler:	
  4396                           ; 1 bytes @ 0x3
  4397                           
  4398  0073                     ?_TMR4_SetInterruptHandler:	
  4399                           ; 1 bytes @ 0x3
  4400                           
  4401  0073                     ?_FLASH_EraseBlock:	
  4402                           ; 1 bytes @ 0x3
  4403                           
  4404  0073                     ?_TMR1_SetInterruptHandler:	
  4405                           ; 1 bytes @ 0x3
  4406                           
  4407  0073                     ??_DAC_Initialize:	
  4408                           ; 1 bytes @ 0x3
  4409                           
  4410  0073                     ??_INTERRUPT_InterruptManager:	
  4411                           ; 1 bytes @ 0x3
  4412                           
  4413  0073                     ??_EUSART_Write:	
  4414                           ; 1 bytes @ 0x3
  4415                           
  4416  0073                     ?_INT_SetInterruptHandler:	
  4417                           ; 1 bytes @ 0x3
  4418                           
  4419  0073                     ??_TMR4_LoadPeriodRegister:	
  4420                           ; 1 bytes @ 0x3
  4421                           
  4422  0073                     ??_readPersistentState:	
  4423                           ; 1 bytes @ 0x3
  4424                           
  4425  0073                     ??_initLED:	
  4426                           ; 1 bytes @ 0x3
  4427                           
  4428  0073                     ?_setLEDColor:	
  4429                           ; 1 bytes @ 0x3
  4430                           
  4431  0073                     ??_startUp:	
  4432                           ; 1 bytes @ 0x3
  4433                           
  4434  0073                     ??_LATCH_Initialize:	
  4435                           ; 1 bytes @ 0x3
  4436                           
  4437  0073                     ??___lmul:	
  4438                           ; 1 bytes @ 0x3
  4439                           
  4440  0073                     ?___awdiv:	
  4441                           ; 1 bytes @ 0x3
  4442                           
  4443  0073                     EUSART_Write@txData:	
  4444                           ; 2 bytes @ 0x3
  4445                           
  4446  0073                     TMR4_LoadPeriodRegister@periodVal:	
  4447                           ; 1 bytes @ 0x3
  4448                           
  4449  0073                     setLEDColor@green:	
  4450                           ; 1 bytes @ 0x3
  4451                           
  4452  0073                     EUSART_SetFramingErrorHandler@interruptHandler:	
  4453                           ; 1 bytes @ 0x3
  4454                           
  4455  0073                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  4456                           ; 2 bytes @ 0x3
  4457                           
  4458  0073                     EUSART_SetErrorHandler@interruptHandler:	
  4459                           ; 2 bytes @ 0x3
  4460                           
  4461  0073                     INT_SetInterruptHandler@InterruptHandler:	
  4462                           ; 2 bytes @ 0x3
  4463                           
  4464  0073                     TMR0_SetInterruptHandler@InterruptHandler:	
  4465                           ; 2 bytes @ 0x3
  4466                           
  4467  0073                     TMR4_SetInterruptHandler@InterruptHandler:	
  4468                           ; 2 bytes @ 0x3
  4469                           
  4470  0073                     FLASH_EraseBlock@startAddr:	
  4471                           ; 2 bytes @ 0x3
  4472                           
  4473  0073                     TMR1_SetInterruptHandler@InterruptHandler:	
  4474                           ; 2 bytes @ 0x3
  4475                           
  4476  0073                     ___awdiv@divisor:	
  4477                           ; 2 bytes @ 0x3
  4478                           
  4479  0073                     ___lmul@product:	
  4480                           ; 2 bytes @ 0x3
  4481                           
  4482                           
  4483                           ; 4 bytes @ 0x3
  4484  0073                     	ds	1
  4485  0074                     ??_putch:
  4486  0074                     putch@txData:	
  4487                           ; 1 bytes @ 0x4
  4488                           
  4489  0074                     setLEDColor@blue:	
  4490                           ; 1 bytes @ 0x4
  4491                           
  4492                           
  4493                           ; 1 bytes @ 0x4
  4494  0074                     	ds	1
  4495  0075                     ??_TMR4_Initialize:
  4496  0075                     ??_TMR1_Initialize:	
  4497                           ; 1 bytes @ 0x5
  4498                           
  4499  0075                     ??_EXT_INT_Initialize:	
  4500                           ; 1 bytes @ 0x5
  4501                           
  4502  0075                     ??_TMR0_Initialize:	
  4503                           ; 1 bytes @ 0x5
  4504                           
  4505  0075                     ??_EUSART_Initialize:	
  4506                           ; 1 bytes @ 0x5
  4507                           
  4508  0075                     ??_EUSART_SetFramingErrorHandler:	
  4509                           ; 1 bytes @ 0x5
  4510                           
  4511  0075                     ??_EUSART_SetOverrunErrorHandler:	
  4512                           ; 1 bytes @ 0x5
  4513                           
  4514  0075                     ??_EUSART_SetErrorHandler:	
  4515                           ; 1 bytes @ 0x5
  4516                           
  4517  0075                     ??_TMR0_SetInterruptHandler:	
  4518                           ; 1 bytes @ 0x5
  4519                           
  4520  0075                     ??_TMR4_SetInterruptHandler:	
  4521                           ; 1 bytes @ 0x5
  4522                           
  4523  0075                     ??_FLASH_EraseBlock:	
  4524                           ; 1 bytes @ 0x5
  4525                           
  4526  0075                     ??_TMR1_SetInterruptHandler:	
  4527                           ; 1 bytes @ 0x5
  4528                           
  4529  0075                     ??_INT_SetInterruptHandler:	
  4530                           ; 1 bytes @ 0x5
  4531                           
  4532  0075                     ??_setLEDColor:	
  4533                           ; 1 bytes @ 0x5
  4534                           
  4535  0075                     ?_fputc:	
  4536                           ; 1 bytes @ 0x5
  4537                           
  4538  0075                     FLASH_EraseBlock@GIEBitValue:	
  4539                           ; 2 bytes @ 0x5
  4540                           
  4541  0075                     ___awdiv@dividend:	
  4542                           ; 1 bytes @ 0x5
  4543                           
  4544  0075                     fputc@c:	
  4545                           ; 2 bytes @ 0x5
  4546                           
  4547                           
  4548                           ; 2 bytes @ 0x5
  4549  0075                     	ds	1
  4550  0076                     ??_SYSTEM_Initialize:
  4551  0076                     setLEDColor@red:	
  4552                           ; 1 bytes @ 0x6
  4553                           
  4554                           
  4555                           ; 1 bytes @ 0x6
  4556  0076                     	ds	1
  4557  0077                     ??___awdiv:
  4558  0077                     fputc@fp:	
  4559                           ; 1 bytes @ 0x7
  4560                           
  4561                           
  4562                           ; 1 bytes @ 0x7
  4563  0077                     	ds	1
  4564  0078                     ??_battery_voltage:
  4565                           
  4566                           	psect	cstackBANK0
  4567  0020                     __pcstackBANK0:	
  4568                           ; 1 bytes @ 0x8
  4569                           
  4570  0020                     ?_FLASH_WriteBlock:
  4571  0020                     ??_fputc:	
  4572                           ; 1 bytes @ 0x0
  4573                           
  4574  0020                     ??_lowBattery:	
  4575                           ; 1 bytes @ 0x0
  4576                           
  4577  0020                     ??_selectSomething:	
  4578                           ; 1 bytes @ 0x0
  4579                           
  4580  0020                     ?___lmul:	
  4581                           ; 1 bytes @ 0x0
  4582                           
  4583  0020                     ___awdiv@counter:	
  4584                           ; 4 bytes @ 0x0
  4585                           
  4586  0020                     FLASH_WriteBlock@writeAddr:	
  4587                           ; 1 bytes @ 0x0
  4588                           
  4589  0020                     ___lmul@multiplier:	
  4590                           ; 2 bytes @ 0x0
  4591                           
  4592                           
  4593                           ; 4 bytes @ 0x0
  4594  0020                     	ds	1
  4595  0021                     ___awdiv@sign:
  4596                           
  4597                           ; 1 bytes @ 0x1
  4598  0021                     	ds	1
  4599  0022                     FLASH_WriteBlock@flashWordArray:
  4600  0022                     ___awdiv@quotient:	
  4601                           ; 1 bytes @ 0x2
  4602                           
  4603                           
  4604                           ; 2 bytes @ 0x2
  4605  0022                     	ds	1
  4606  0023                     ??_FLASH_WriteBlock:
  4607                           
  4608                           ; 1 bytes @ 0x3
  4609  0023                     	ds	1
  4610  0024                     ___lmul@multiplicand:
  4611                           
  4612                           ; 4 bytes @ 0x4
  4613  0024                     	ds	1
  4614  0025                     ?_vfpfcnvrt:
  4615  0025                     vfpfcnvrt@fmt:	
  4616                           ; 2 bytes @ 0x5
  4617                           
  4618                           
  4619                           ; 1 bytes @ 0x5
  4620  0025                     	ds	1
  4621  0026                     vfpfcnvrt@ap:
  4622  0026                     FLASH_WriteBlock@blockStartAddr:	
  4623                           ; 1 bytes @ 0x6
  4624                           
  4625                           
  4626                           ; 2 bytes @ 0x6
  4627  0026                     	ds	1
  4628  0027                     ??_vfpfcnvrt:
  4629                           
  4630                           ; 1 bytes @ 0x7
  4631  0027                     	ds	1
  4632  0028                     ?___aldiv:
  4633  0028                     FLASH_WriteBlock@GIEBitValue:	
  4634                           ; 4 bytes @ 0x8
  4635                           
  4636  0028                     ___aldiv@divisor:	
  4637                           ; 1 bytes @ 0x8
  4638                           
  4639                           
  4640                           ; 4 bytes @ 0x8
  4641  0028                     	ds	1
  4642  0029                     FLASH_WriteBlock@i:
  4643                           
  4644                           ; 1 bytes @ 0x9
  4645  0029                     	ds	1
  4646  002A                     ??_writePersistentState:
  4647                           
  4648                           ; 1 bytes @ 0xA
  4649  002A                     	ds	2
  4650  002C                     vfpfcnvrt@fp:
  4651  002C                     ___aldiv@dividend:	
  4652                           ; 1 bytes @ 0xC
  4653                           
  4654                           
  4655                           ; 4 bytes @ 0xC
  4656  002C                     	ds	1
  4657  002D                     ?_vfprintf:
  4658  002D                     vfprintf@fmt:	
  4659                           ; 2 bytes @ 0xD
  4660                           
  4661                           
  4662                           ; 2 bytes @ 0xD
  4663  002D                     	ds	1
  4664  002E                     writePersistentState@buf:
  4665                           
  4666                           ; 64 bytes @ 0xE
  4667  002E                     	ds	1
  4668  002F                     vfprintf@ap:
  4669                           
  4670                           ; 1 bytes @ 0xF
  4671  002F                     	ds	1
  4672  0030                     ??_vfprintf:
  4673  0030                     ??___aldiv:	
  4674                           ; 1 bytes @ 0x10
  4675                           
  4676                           
  4677                           ; 1 bytes @ 0x10
  4678  0030                     	ds	1
  4679  0031                     ___aldiv@counter:
  4680                           
  4681                           ; 1 bytes @ 0x11
  4682  0031                     	ds	1
  4683  0032                     ___aldiv@sign:
  4684  0032                     vfprintf@fp:	
  4685                           ; 1 bytes @ 0x12
  4686                           
  4687                           
  4688                           ; 1 bytes @ 0x12
  4689  0032                     	ds	1
  4690  0033                     vfprintf@cfmt:
  4691  0033                     ___aldiv@quotient:	
  4692                           ; 2 bytes @ 0x13
  4693                           
  4694                           
  4695                           ; 4 bytes @ 0x13
  4696  0033                     	ds	2
  4697  0035                     ?_printf:
  4698  0035                     printf@fmt:	
  4699                           ; 2 bytes @ 0x15
  4700                           
  4701                           
  4702                           ; 2 bytes @ 0x15
  4703  0035                     	ds	2
  4704  0037                     ??_printf:
  4705  0037                     ?_setFrequency:	
  4706                           ; 1 bytes @ 0x17
  4707                           
  4708  0037                     ?_battery_voltage:	
  4709                           ; 1 bytes @ 0x17
  4710                           
  4711  0037                     setFrequency@frequency_hz:	
  4712                           ; 2 bytes @ 0x17
  4713                           
  4714                           
  4715                           ; 2 bytes @ 0x17
  4716  0037                     	ds	1
  4717  0038                     printf@ap:
  4718                           
  4719                           ; 1 bytes @ 0x18
  4720  0038                     	ds	1
  4721  0039                     ??_selectFrequency:
  4722  0039                     ??_selectCurrent:	
  4723                           ; 1 bytes @ 0x19
  4724                           
  4725  0039                     ??_selectIncrease:	
  4726                           ; 1 bytes @ 0x19
  4727                           
  4728  0039                     ??_selectDecrease:	
  4729                           ; 1 bytes @ 0x19
  4730                           
  4731  0039                     ??_selectCurrentValue:	
  4732                           ; 1 bytes @ 0x19
  4733                           
  4734  0039                     ??_selectFrequencyValue:	
  4735                           ; 1 bytes @ 0x19
  4736                           
  4737  0039                     ?_setCurrent:	
  4738                           ; 1 bytes @ 0x19
  4739                           
  4740  0039                     ??_setFrequency:	
  4741                           ; 1 bytes @ 0x19
  4742                           
  4743  0039                     setCurrent@microamps:	
  4744                           ; 1 bytes @ 0x19
  4745                           
  4746                           
  4747                           ; 2 bytes @ 0x19
  4748  0039                     	ds	1
  4749  003A                     setFrequency@PR4_val:
  4750                           
  4751                           ; 2 bytes @ 0x1A
  4752  003A                     	ds	1
  4753  003B                     setCurrent@Vdd_mv:
  4754                           
  4755                           ; 2 bytes @ 0x1B
  4756  003B                     	ds	2
  4757  003D                     ??_setCurrent:
  4758                           
  4759                           ; 1 bytes @ 0x1D
  4760  003D                     	ds	8
  4761  0045                     setCurrent@Vdac_mv:
  4762                           
  4763                           ; 2 bytes @ 0x25
  4764  0045                     	ds	2
  4765  0047                     setCurrent@DACValue:
  4766                           
  4767                           ; 2 bytes @ 0x27
  4768  0047                     	ds	39
  4769  006E                     writePersistentState@i:
  4770                           
  4771                           ; 1 bytes @ 0x4E
  4772  006E                     	ds	1
  4773  006F                     writePersistentState@idx:
  4774                           
  4775                           ; 1 bytes @ 0x4F
  4776  006F                     	ds	1
  4777                           
  4778                           	psect	maintext
  4779  0462                     __pmaintext:	
  4780 ;;
  4781 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4782 ;;
  4783 ;; *************** function _main *****************
  4784 ;; Defined at:
  4785 ;;		line 597 in file "main.c"
  4786 ;; Parameters:    Size  Location     Type
  4787 ;;		None
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;  batt_mv         2    6[BANK1 ] short 
  4790 ;;  low_reading_    2    4[BANK1 ] short 
  4791 ;; Return value:  Size  Location     Type
  4792 ;;                  1    wreg      void 
  4793 ;; Registers used:
  4794 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4795 ;; Tracked objects:
  4796 ;;		On entry : B1F/0
  4797 ;;		On exit  : 0/0
  4798 ;;		Unchanged: 0/0
  4799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4800 ;;      Params:         0       0       0       0       0       0       0       0
  4801 ;;      Locals:         0       0       4       0       0       0       0       0
  4802 ;;      Temps:          0       0       1       0       0       0       0       0
  4803 ;;      Totals:         0       0       5       0       0       0       0       0
  4804 ;;Total ram usage:        5 bytes
  4805 ;; Hardware stack levels required when called: 12
  4806 ;; This function calls:
  4807 ;;		_DAC_Initialize
  4808 ;;		_LATCH_Initialize
  4809 ;;		_OPA1_Initialize
  4810 ;;		_OPA2_Initialize
  4811 ;;		_SYSTEM_Initialize
  4812 ;;		_battery_voltage
  4813 ;;		_initLED
  4814 ;;		_lowBattery
  4815 ;;		_process_remote_command
  4816 ;;		_readPersistentState
  4817 ;;		_setCurrent
  4818 ;;		_setFrequency
  4819 ;;		_startUp
  4820 ;; This function is called by:
  4821 ;;		Startup code after reset
  4822 ;; This function uses a non-reentrant model
  4823 ;;
  4824                           
  4825                           
  4826                           ;psect for function _main
  4827  0462                     _main:
  4828  0462                     l4346:	
  4829                           ;incstack = 0
  4830                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4831                           
  4832                           
  4833                           ;main.c: 599:   SYSTEM_Initialize();
  4834  0462  318C  24DD  3184   	fcall	_SYSTEM_Initialize
  4835  0465                     l4348:
  4836                           
  4837                           ;main.c: 600:   LATCH_Initialize();
  4838  0465  318B  2385  3184   	fcall	_LATCH_Initialize
  4839  0468                     l4350:
  4840                           
  4841                           ;main.c: 601:   DAC_Initialize();
  4842  0468  318B  2309  3184   	fcall	_DAC_Initialize
  4843  046B                     l4352:
  4844                           
  4845                           ;main.c: 602:   OPA1_Initialize();
  4846  046B  318A  22F2  3184   	fcall	_OPA1_Initialize
  4847  046E                     l4354:
  4848                           
  4849                           ;main.c: 603:   OPA2_Initialize();
  4850  046E  318A  22F6  3184   	fcall	_OPA2_Initialize
  4851  0471                     l4356:
  4852                           
  4853                           ;main.c: 604:   initLED();
  4854  0471  318F  2741  3184   	fcall	_initLED
  4855  0474                     l4358:
  4856                           
  4857                           ;main.c: 609:   readPersistentState();
  4858  0474  318C  2479  3184   	fcall	_readPersistentState
  4859  0477                     l4360:
  4860                           
  4861                           ;main.c: 610:   setCurrent(currentValue[currentIndex], battery_voltage());
  4862  0477  0021               	movlb	1	; select bank1
  4863  0478  3563               	lslf	_currentIndex^(0+128),w
  4864  0479  3EBE               	addlw	(low (_currentValue| 0))& (0+255)
  4865  047A  0086               	movwf	6
  4866  047B  0187               	clrf	7
  4867  047C  3F40               	moviw [0]fsr1
  4868  047D  0020               	movlb	0	; select bank0
  4869  047E  00B9               	movwf	setCurrent@microamps
  4870  047F  3F41               	moviw [1]fsr1
  4871  0480  00BA               	movwf	setCurrent@microamps+1
  4872  0481  318E  2658  3184   	fcall	_battery_voltage
  4873  0484  0020               	movlb	0	; select bank0
  4874  0485  0838               	movf	?_battery_voltage+1,w
  4875  0486  00BC               	movwf	setCurrent@Vdd_mv+1
  4876  0487  0837               	movf	?_battery_voltage,w
  4877  0488  00BB               	movwf	setCurrent@Vdd_mv
  4878  0489  3183  23BD  3184   	fcall	_setCurrent
  4879  048C                     l4362:
  4880                           
  4881                           ;main.c: 611:   setFrequency(frequencyValue[frequencyIndex]);
  4882  048C  0021               	movlb	1	; select bank1
  4883  048D  3561               	lslf	_frequencyIndex^(0+128),w
  4884  048E  3E40               	addlw	(low (_frequencyValue| (0+256)))& (0+255)
  4885  048F  0086               	movwf	6
  4886  0490  3001               	movlw	1	; select bank2/3
  4887  0491  0087               	movwf	7
  4888  0492  3F40               	moviw [0]fsr1
  4889  0493  0020               	movlb	0	; select bank0
  4890  0494  00B7               	movwf	setFrequency@frequency_hz
  4891  0495  3F41               	moviw [1]fsr1
  4892  0496  00B8               	movwf	setFrequency@frequency_hz+1
  4893  0497  3186  26DE  3184   	fcall	_setFrequency
  4894  049A                     l4364:
  4895                           
  4896                           ;main.c: 613:   (INTCONbits.GIE = 1);
  4897  049A  178B               	bsf	11,7	;volatile
  4898  049B                     l4366:
  4899                           
  4900                           ;main.c: 614:   (INTCONbits.PEIE = 1);
  4901  049B  170B               	bsf	11,6	;volatile
  4902  049C                     l4368:
  4903                           
  4904                           ;main.c: 615:   startUp();
  4905  049C  3180  2002  3184   	fcall	_startUp
  4906  049F                     l4370:
  4907                           
  4908                           ;main.c: 617:   const int16_t BATTERY_NUM_LOW_READINGS = 10000;;main.c: 618:   int16_t l
      +                          ow_reading_count = 0;
  4909  049F  0021               	movlb	1	; select bank1
  4910  04A0  01E9               	clrf	main@low_reading_count^(0+128)
  4911  04A1  01EA               	clrf	(main@low_reading_count+1)^(0+128)
  4912  04A2                     l4372:
  4913                           
  4914                           ;main.c: 623:     int16_t batt_mv = battery_voltage();
  4915  04A2  318E  2658  3184   	fcall	_battery_voltage
  4916  04A5  0020               	movlb	0	; select bank0
  4917  04A6  0838               	movf	?_battery_voltage+1,w
  4918  04A7  0021               	movlb	1	; select bank1
  4919  04A8  00EC               	movwf	(main@batt_mv+1)^(0+128)
  4920  04A9  0020               	movlb	0	; select bank0
  4921  04AA  0837               	movf	?_battery_voltage,w
  4922  04AB  0021               	movlb	1	; select bank1
  4923  04AC  00EB               	movwf	main@batt_mv^(0+128)
  4924  04AD                     l4374:
  4925                           
  4926                           ;main.c: 624:     const int16_t BATTERY_THRESHOLD = 2000;;main.c: 626:     if (batt_mv <
      +                           BATTERY_THRESHOLD)
  4927  04AD  086C               	movf	(main@batt_mv+1)^(0+128),w
  4928  04AE  3A80               	xorlw	128
  4929  04AF  00E8               	movwf	??_main^(0+128)
  4930  04B0  3087               	movlw	135
  4931  04B1  0268               	subwf	??_main^(0+128),w
  4932  04B2  1D03               	skipz
  4933  04B3  2CB6               	goto	u2995
  4934  04B4  30D0               	movlw	208
  4935  04B5  026B               	subwf	main@batt_mv^(0+128),w
  4936  04B6                     u2995:
  4937  04B6  1803               	skipnc
  4938  04B7  2CB9               	goto	u2991
  4939  04B8  2CBA               	goto	u2990
  4940  04B9                     u2991:
  4941  04B9  2CC0               	goto	l4378
  4942  04BA                     u2990:
  4943  04BA                     l4376:
  4944                           
  4945                           ;main.c: 627:     {;main.c: 628:         low_reading_count++;
  4946  04BA  3001               	movlw	1
  4947  04BB  0021               	movlb	1	; select bank1
  4948  04BC  07E9               	addwf	main@low_reading_count^(0+128),f
  4949  04BD  3000               	movlw	0
  4950  04BE  3DEA               	addwfc	(main@low_reading_count+1)^(0+128),f
  4951                           
  4952                           ;main.c: 631:     } else {
  4953  04BF  2CC3               	goto	l4380
  4954  04C0                     l4378:
  4955                           
  4956                           ;main.c: 632:         low_reading_count = 0;
  4957  04C0  0021               	movlb	1	; select bank1
  4958  04C1  01E9               	clrf	main@low_reading_count^(0+128)
  4959  04C2  01EA               	clrf	(main@low_reading_count+1)^(0+128)
  4960  04C3                     l4380:
  4961                           
  4962                           ;main.c: 635:     if (low_reading_count > BATTERY_NUM_LOW_READINGS)
  4963  04C3  086A               	movf	(main@low_reading_count+1)^(0+128),w
  4964  04C4  3A80               	xorlw	128
  4965  04C5  00E8               	movwf	??_main^(0+128)
  4966  04C6  30A7               	movlw	167
  4967  04C7  0268               	subwf	??_main^(0+128),w
  4968  04C8  1D03               	skipz
  4969  04C9  2CCC               	goto	u3005
  4970  04CA  3011               	movlw	17
  4971  04CB  0269               	subwf	main@low_reading_count^(0+128),w
  4972  04CC                     u3005:
  4973  04CC  1C03               	skipc
  4974  04CD  2CCF               	goto	u3001
  4975  04CE  2CD0               	goto	u3000
  4976  04CF                     u3001:
  4977  04CF  2CD3               	goto	l4384
  4978  04D0                     u3000:
  4979  04D0                     l4382:
  4980                           
  4981                           ;main.c: 636:     {;main.c: 637:         lowBattery();
  4982  04D0  318D  25C8  3184   	fcall	_lowBattery
  4983  04D3                     l4384:
  4984                           
  4985                           ;main.c: 642:     setCurrent(currentValue[currentIndex], batt_mv);
  4986  04D3  0021               	movlb	1	; select bank1
  4987  04D4  3563               	lslf	_currentIndex^(0+128),w
  4988  04D5  3EBE               	addlw	(low (_currentValue| 0))& (0+255)
  4989  04D6  0086               	movwf	6
  4990  04D7  0187               	clrf	7
  4991  04D8  3F40               	moviw [0]fsr1
  4992  04D9  0020               	movlb	0	; select bank0
  4993  04DA  00B9               	movwf	setCurrent@microamps
  4994  04DB  3F41               	moviw [1]fsr1
  4995  04DC  00BA               	movwf	setCurrent@microamps+1
  4996  04DD  0021               	movlb	1	; select bank1
  4997  04DE  086C               	movf	(main@batt_mv+1)^(0+128),w
  4998  04DF  0020               	movlb	0	; select bank0
  4999  04E0  00BC               	movwf	setCurrent@Vdd_mv+1
  5000  04E1  0021               	movlb	1	; select bank1
  5001  04E2  086B               	movf	main@batt_mv^(0+128),w
  5002  04E3  0020               	movlb	0	; select bank0
  5003  04E4  00BB               	movwf	setCurrent@Vdd_mv
  5004  04E5  3183  23BD  3184   	fcall	_setCurrent
  5005  04E8                     l4386:
  5006                           
  5007                           ;main.c: 649:     if (STATE_DONE == ir_code.state){
  5008  04E8  3002               	movlw	2
  5009  04E9  0021               	movlb	1	; select bank1
  5010  04EA  0634               	xorwf	(_ir_code^(0+128)+1),w
  5011  04EB  1D03               	btfss	3,2
  5012  04EC  2CEE               	goto	u3011
  5013  04ED  2CEF               	goto	u3010
  5014  04EE                     u3011:
  5015  04EE  2CA2               	goto	l4372
  5016  04EF                     u3010:
  5017  04EF                     l4388:
  5018                           
  5019                           ;main.c: 667:       process_remote_command(&ir_code);
  5020  04EF  30B3               	movlw	(low (_ir_code| 0))& (0+255)
  5021  04F0  3180  2087  3184   	fcall	_process_remote_command
  5022  04F3                     l4390:
  5023                           
  5024                           ;main.c: 670:       ir_code.state = STATE_RESET;
  5025  04F3  0021               	movlb	1	; select bank1
  5026  04F4  01B4               	clrf	(_ir_code^(0+128)+1)
  5027  04F5  2CA2               	goto	l4372
  5028  04F6  3180  284B         	ljmp	start
  5029  04F8                     __end_of_main:
  5030                           
  5031                           	psect	text1
  5032  0002                     __ptext1:	
  5033 ;; *************** function _startUp *****************
  5034 ;; Defined at:
  5035 ;;		line 253 in file "main.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;		None
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;		None
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  1    wreg      void 
  5042 ;; Registers used:
  5043 ;;		status,2
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5049 ;;      Params:         0       0       0       0       0       0       0       0
  5050 ;;      Locals:         0       0       0       0       0       0       0       0
  5051 ;;      Temps:          0       0       0       0       0       0       0       0
  5052 ;;      Totals:         0       0       0       0       0       0       0       0
  5053 ;;Total ram usage:        0 bytes
  5054 ;; Hardware stack levels used: 1
  5055 ;; Hardware stack levels required when called: 4
  5056 ;; This function calls:
  5057 ;;		Nothing
  5058 ;; This function is called by:
  5059 ;;		_main
  5060 ;; This function uses a non-reentrant model
  5061 ;;
  5062                           
  5063                           
  5064                           ;psect for function _startUp
  5065  0002                     _startUp:
  5066  0002                     l3294:	
  5067                           ;incstack = 0
  5068                           ; Regs used in _startUp: [status,2]
  5069                           
  5070                           
  5071                           ;main.c: 254:   interfaceState = STATE_RUNNING;
  5072  0002  01F8               	clrf	_interfaceState
  5073  0003                     l662:
  5074  0003  0008               	return
  5075  0004                     __end_of_startUp:
  5076                           
  5077                           	psect	text2
  5078  0C79                     __ptext2:	
  5079 ;; *************** function _readPersistentState *****************
  5080 ;; Defined at:
  5081 ;;		line 115 in file "main.c"
  5082 ;; Parameters:    Size  Location     Type
  5083 ;;		None
  5084 ;; Auto vars:     Size  Location     Type
  5085 ;;		None
  5086 ;; Return value:  Size  Location     Type
  5087 ;;                  1    wreg      void 
  5088 ;; Registers used:
  5089 ;;		wreg, fsr0l, fsr0h, pclath
  5090 ;; Tracked objects:
  5091 ;;		On entry : 0/0
  5092 ;;		On exit  : 0/0
  5093 ;;		Unchanged: 0/0
  5094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5095 ;;      Params:         0       0       0       0       0       0       0       0
  5096 ;;      Locals:         0       0       0       0       0       0       0       0
  5097 ;;      Temps:          2       0       0       0       0       0       0       0
  5098 ;;      Totals:         2       0       0       0       0       0       0       0
  5099 ;;Total ram usage:        2 bytes
  5100 ;; Hardware stack levels used: 1
  5101 ;; Hardware stack levels required when called: 4
  5102 ;; This function calls:
  5103 ;;		Nothing
  5104 ;; This function is called by:
  5105 ;;		_main
  5106 ;; This function uses a non-reentrant model
  5107 ;;
  5108                           
  5109                           
  5110                           ;psect for function _readPersistentState
  5111  0C79                     _readPersistentState:
  5112  0C79                     l3242:	
  5113                           ;incstack = 0
  5114                           ; Regs used in _readPersistentState: [wreg-fsr0h+pclath]
  5115                           
  5116                           
  5117                           ;main.c: 117:   currentIndex = HEF_persistent_state.currentIndex;
  5118  0C79  30E0               	movlw	224
  5119  0C7A  0084               	movwf	4
  5120  0C7B  308F               	movlw	143
  5121  0C7C  0085               	movwf	5
  5122  0C7D  0800               	movf	0,w	;code access
  5123  0C7E  00F3               	movwf	??_readPersistentState
  5124  0C7F  01F4               	clrf	??_readPersistentState+1
  5125  0C80  0873               	movf	??_readPersistentState,w
  5126  0C81  0021               	movlb	1	; select bank1
  5127  0C82  00E3               	movwf	_currentIndex^(0+128)
  5128  0C83  0874               	movf	??_readPersistentState+1,w
  5129  0C84  00E4               	movwf	(_currentIndex+1)^(0+128)
  5130                           
  5131                           ;main.c: 118:   frequencyIndex = HEF_persistent_state.frequencyIndex;
  5132  0C85  30E1               	movlw	225
  5133  0C86  0084               	movwf	4
  5134  0C87  308F               	movlw	143
  5135  0C88  0085               	movwf	5
  5136  0C89  0800               	movf	0,w	;code access
  5137  0C8A  00F3               	movwf	??_readPersistentState
  5138  0C8B  01F4               	clrf	??_readPersistentState+1
  5139  0C8C  0873               	movf	??_readPersistentState,w
  5140  0C8D  00E1               	movwf	_frequencyIndex^(0+128)
  5141  0C8E  0874               	movf	??_readPersistentState+1,w
  5142  0C8F  00E2               	movwf	(_frequencyIndex+1)^(0+128)
  5143                           
  5144                           ;main.c: 119:   dc_frequency_flag = HEF_persistent_state.dc_frequency_flag;
  5145  0C90  30E2               	movlw	226
  5146  0C91  0084               	movwf	4
  5147  0C92  308F               	movlw	143
  5148  0C93  0085               	movwf	5
  5149  0C94  0800               	movf	0,w	;code access
  5150  0C95  00F3               	movwf	??_readPersistentState
  5151  0C96  0873               	movf	??_readPersistentState,w
  5152  0C97  00FA               	movwf	_dc_frequency_flag
  5153  0C98                     l634:
  5154  0C98  0008               	return
  5155  0C99                     __end_of_readPersistentState:
  5156                           
  5157                           	psect	text3
  5158  0087                     __ptext3:	
  5159 ;; *************** function _process_remote_command *****************
  5160 ;; Defined at:
  5161 ;;		line 383 in file "main.c"
  5162 ;; Parameters:    Size  Location     Type
  5163 ;;  code            1    wreg     PTR struct .
  5164 ;;		 -> ir_code(6), 
  5165 ;; Auto vars:     Size  Location     Type
  5166 ;;  code            1    2[BANK1 ] PTR struct .
  5167 ;;		 -> ir_code(6), 
  5168 ;; Return value:  Size  Location     Type
  5169 ;;                  1    wreg      void 
  5170 ;; Registers used:
  5171 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5172 ;; Tracked objects:
  5173 ;;		On entry : 0/0
  5174 ;;		On exit  : 0/0
  5175 ;;		Unchanged: 0/0
  5176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5177 ;;      Params:         0       0       0       0       0       0       0       0
  5178 ;;      Locals:         0       0       1       0       0       0       0       0
  5179 ;;      Temps:          0       0       2       0       0       0       0       0
  5180 ;;      Totals:         0       0       3       0       0       0       0       0
  5181 ;;Total ram usage:        3 bytes
  5182 ;; Hardware stack levels used: 1
  5183 ;; Hardware stack levels required when called: 11
  5184 ;; This function calls:
  5185 ;;		_battery_voltage
  5186 ;;		_selectCurrent
  5187 ;;		_selectCurrentValue
  5188 ;;		_selectDecrease
  5189 ;;		_selectFrequency
  5190 ;;		_selectFrequencyValue
  5191 ;;		_selectIncrease
  5192 ;;		_selectSomething
  5193 ;;		_setCurrent
  5194 ;;		_setFrequency
  5195 ;;		_setLEDColor
  5196 ;;		_writePersistentState
  5197 ;; This function is called by:
  5198 ;;		_main
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202                           
  5203                           ;psect for function _process_remote_command
  5204  0087                     _process_remote_command:
  5205                           
  5206                           ;incstack = 0
  5207                           ; Regs used in _process_remote_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5208                           ;process_remote_command@code stored from wreg
  5209  0087  0021               	movlb	1	; select bank1
  5210  0088  00E7               	movwf	process_remote_command@code^(0+128)
  5211  0089                     l4080:
  5212                           
  5213                           ;main.c: 384:   setLEDColor(0, 0, 0);
  5214  0089  01F3               	clrf	setLEDColor@green
  5215  008A  01F4               	clrf	setLEDColor@blue
  5216  008B  3000               	movlw	0
  5217  008C  318B  23FD  3180   	fcall	_setLEDColor
  5218                           
  5219                           ;main.c: 386:   switch(code->command){
  5220  008F  2B6D               	goto	l4308
  5221  0090                     l4082:
  5222                           
  5223                           ;main.c: 388:     if(STATE_CURRENT == interfaceState){
  5224  0090  0378               	decf	_interfaceState,w
  5225  0091  1D03               	btfss	3,2
  5226  0092  2894               	goto	u2681
  5227  0093  2895               	goto	u2680
  5228  0094                     u2681:
  5229  0094  28CA               	goto	l4096
  5230  0095                     u2680:
  5231  0095                     l4084:
  5232                           
  5233                           ;main.c: 389:       currentIndex++;
  5234  0095  3001               	movlw	1
  5235  0096  07E3               	addwf	_currentIndex^(0+128),f
  5236  0097  3000               	movlw	0
  5237  0098  3DE4               	addwfc	(_currentIndex+1)^(0+128),f
  5238                           
  5239                           ;main.c: 390:       if (currentIndex > maxCurrentIndex - 1)
  5240  0099  0864               	movf	(_currentIndex+1)^(0+128),w
  5241  009A  3A80               	xorlw	128
  5242  009B  00E5               	movwf	??_process_remote_command^(0+128)
  5243  009C  3080               	movlw	128
  5244  009D  0265               	subwf	??_process_remote_command^(0+128),w
  5245  009E  1D03               	skipz
  5246  009F  28A2               	goto	u2695
  5247  00A0  300A               	movlw	10
  5248  00A1  0263               	subwf	_currentIndex^(0+128),w
  5249  00A2                     u2695:
  5250  00A2  1C03               	skipc
  5251  00A3  28A5               	goto	u2691
  5252  00A4  28A6               	goto	u2690
  5253  00A5                     u2691:
  5254  00A5  28AF               	goto	l4090
  5255  00A6                     u2690:
  5256  00A6                     l4086:
  5257                           
  5258                           ;main.c: 391:       {;main.c: 392:         currentIndex = maxCurrentIndex - 1;
  5259  00A6  3009               	movlw	9
  5260  00A7  0021               	movlb	1	; select bank1
  5261  00A8  00E3               	movwf	_currentIndex^(0+128)
  5262  00A9  3000               	movlw	0
  5263  00AA  00E4               	movwf	(_currentIndex^(0+128)+1)
  5264  00AB                     l4088:
  5265                           
  5266                           ;main.c: 393:         selectSomething();
  5267  00AB  318F  2785  3180   	fcall	_selectSomething
  5268                           
  5269                           ;main.c: 394:       } else {
  5270  00AE  28B2               	goto	l4092
  5271  00AF                     l4090:
  5272                           
  5273                           ;main.c: 395:         selectIncrease();
  5274  00AF  318D  2502  3180   	fcall	_selectIncrease
  5275  00B2                     l4092:
  5276                           
  5277                           ;main.c: 397:       setCurrent(currentValue[currentIndex], battery_voltage());
  5278  00B2  0021               	movlb	1	; select bank1
  5279  00B3  3563               	lslf	_currentIndex^(0+128),w
  5280  00B4  3EBE               	addlw	(low (_currentValue| 0))& (0+255)
  5281  00B5  0086               	movwf	6
  5282  00B6  0187               	clrf	7
  5283  00B7  3F40               	moviw [0]fsr1
  5284  00B8  0020               	movlb	0	; select bank0
  5285  00B9  00B9               	movwf	setCurrent@microamps
  5286  00BA  3F41               	moviw [1]fsr1
  5287  00BB  00BA               	movwf	setCurrent@microamps+1
  5288  00BC  318E  2658  3180   	fcall	_battery_voltage
  5289  00BF  0020               	movlb	0	; select bank0
  5290  00C0  0838               	movf	?_battery_voltage+1,w
  5291  00C1  00BC               	movwf	setCurrent@Vdd_mv+1
  5292  00C2  0837               	movf	?_battery_voltage,w
  5293  00C3  00BB               	movwf	setCurrent@Vdd_mv
  5294  00C4  3183  23BD  3180   	fcall	_setCurrent
  5295  00C7                     l4094:
  5296                           
  5297                           ;main.c: 398:       writePersistentState();
  5298  00C7  3187  27A4  3180   	fcall	_writePersistentState
  5299  00CA                     l4096:
  5300                           
  5301                           ;main.c: 400:     if(STATE_FREQUENCY == interfaceState){
  5302  00CA  3002               	movlw	2
  5303  00CB  0678               	xorwf	_interfaceState,w
  5304  00CC  1D03               	btfss	3,2
  5305  00CD  28CF               	goto	u2701
  5306  00CE  28D0               	goto	u2700
  5307  00CF                     u2701:
  5308  00CF  28FF               	goto	l4110
  5309  00D0                     u2700:
  5310  00D0                     l4098:
  5311                           
  5312                           ;main.c: 401:       frequencyIndex++;
  5313  00D0  3001               	movlw	1
  5314  00D1  0021               	movlb	1	; select bank1
  5315  00D2  07E1               	addwf	_frequencyIndex^(0+128),f
  5316  00D3  3000               	movlw	0
  5317  00D4  3DE2               	addwfc	(_frequencyIndex+1)^(0+128),f
  5318                           
  5319                           ;main.c: 402:       if (frequencyIndex > maxFrequencyIndex - 1)
  5320  00D5  0862               	movf	(_frequencyIndex+1)^(0+128),w
  5321  00D6  3A80               	xorlw	128
  5322  00D7  00E5               	movwf	??_process_remote_command^(0+128)
  5323  00D8  3080               	movlw	128
  5324  00D9  0265               	subwf	??_process_remote_command^(0+128),w
  5325  00DA  1D03               	skipz
  5326  00DB  28DE               	goto	u2715
  5327  00DC  300A               	movlw	10
  5328  00DD  0261               	subwf	_frequencyIndex^(0+128),w
  5329  00DE                     u2715:
  5330  00DE  1C03               	skipc
  5331  00DF  28E1               	goto	u2711
  5332  00E0  28E2               	goto	u2710
  5333  00E1                     u2711:
  5334  00E1  28EB               	goto	l4104
  5335  00E2                     u2710:
  5336  00E2                     l4100:
  5337                           
  5338                           ;main.c: 403:       {;main.c: 404:         frequencyIndex = maxFrequencyIndex - 1;
  5339  00E2  3009               	movlw	9
  5340  00E3  0021               	movlb	1	; select bank1
  5341  00E4  00E1               	movwf	_frequencyIndex^(0+128)
  5342  00E5  3000               	movlw	0
  5343  00E6  00E2               	movwf	(_frequencyIndex^(0+128)+1)
  5344  00E7                     l4102:
  5345                           
  5346                           ;main.c: 405:         selectSomething();
  5347  00E7  318F  2785  3180   	fcall	_selectSomething
  5348                           
  5349                           ;main.c: 406:       } else {
  5350  00EA  28EE               	goto	l4106
  5351  00EB                     l4104:
  5352                           
  5353                           ;main.c: 407:         selectIncrease();
  5354  00EB  318D  2502  3180   	fcall	_selectIncrease
  5355  00EE                     l4106:
  5356                           
  5357                           ;main.c: 409:       setFrequency(frequencyValue[frequencyIndex]);
  5358  00EE  0021               	movlb	1	; select bank1
  5359  00EF  3561               	lslf	_frequencyIndex^(0+128),w
  5360  00F0  3E40               	addlw	(low (_frequencyValue| (0+256)))& (0+255)
  5361  00F1  0086               	movwf	6
  5362  00F2  3001               	movlw	1	; select bank2/3
  5363  00F3  0087               	movwf	7
  5364  00F4  3F40               	moviw [0]fsr1
  5365  00F5  0020               	movlb	0	; select bank0
  5366  00F6  00B7               	movwf	setFrequency@frequency_hz
  5367  00F7  3F41               	moviw [1]fsr1
  5368  00F8  00B8               	movwf	setFrequency@frequency_hz+1
  5369  00F9  3186  26DE  3180   	fcall	_setFrequency
  5370  00FC                     l4108:
  5371                           
  5372                           ;main.c: 410:       writePersistentState();
  5373  00FC  3187  27A4  3180   	fcall	_writePersistentState
  5374  00FF                     l4110:
  5375                           
  5376                           ;main.c: 412:     if(STATE_RUNNING == interfaceState){
  5377  00FF  0878               	movf	_interfaceState,w
  5378  0100  1D03               	btfss	3,2
  5379  0101  2903               	goto	u2721
  5380  0102  2904               	goto	u2720
  5381  0103                     u2721:
  5382  0103  2907               	goto	l4114
  5383  0104                     u2720:
  5384  0104                     l4112:
  5385                           
  5386                           ;main.c: 413:       selectSomething();
  5387  0104  318F  2785  3180   	fcall	_selectSomething
  5388  0107                     l4114:
  5389                           
  5390                           ;main.c: 415:     if(STATE_LOWBATTERY == interfaceState){
  5391  0107  3003               	movlw	3
  5392  0108  0678               	xorwf	_interfaceState,w
  5393  0109  1D03               	btfss	3,2
  5394  010A  290C               	goto	u2731
  5395  010B  290D               	goto	u2730
  5396  010C                     u2731:
  5397  010C  2BA3               	goto	l4310
  5398  010D                     u2730:
  5399  010D                     l4116:
  5400                           
  5401                           ;main.c: 416:       selectSomething();
  5402  010D  318F  2785  3180   	fcall	_selectSomething
  5403  0110  2BA3               	goto	l4310
  5404  0111                     l4118:
  5405                           
  5406                           ;main.c: 420:     if(STATE_CURRENT == interfaceState){
  5407  0111  0378               	decf	_interfaceState,w
  5408  0112  1D03               	btfss	3,2
  5409  0113  2915               	goto	u2741
  5410  0114  2916               	goto	u2740
  5411  0115                     u2741:
  5412  0115  293F               	goto	l4134
  5413  0116                     u2740:
  5414  0116                     l4120:
  5415                           
  5416                           ;main.c: 421:       currentIndex--;
  5417  0116  30FF               	movlw	255
  5418  0117  07E3               	addwf	_currentIndex^(0+128),f
  5419  0118  30FF               	movlw	255
  5420  0119  3DE4               	addwfc	(_currentIndex+1)^(0+128),f
  5421  011A                     l4122:
  5422                           
  5423                           ;main.c: 422:       if (currentIndex < 0)
  5424  011A  1FE4               	btfss	(_currentIndex+1)^(0+128),7
  5425  011B  291D               	goto	u2751
  5426  011C  291E               	goto	u2750
  5427  011D                     u2751:
  5428  011D  2924               	goto	l4128
  5429  011E                     u2750:
  5430  011E                     l4124:
  5431                           
  5432                           ;main.c: 423:       {;main.c: 424:         currentIndex = 0;
  5433  011E  01E3               	clrf	_currentIndex^(0+128)
  5434  011F  01E4               	clrf	(_currentIndex+1)^(0+128)
  5435  0120                     l4126:
  5436                           
  5437                           ;main.c: 425:         selectSomething();
  5438  0120  318F  2785  3180   	fcall	_selectSomething
  5439                           
  5440                           ;main.c: 426:       } else {
  5441  0123  2927               	goto	l4130
  5442  0124                     l4128:
  5443                           
  5444                           ;main.c: 427:         selectDecrease();
  5445  0124  318C  24BB  3180   	fcall	_selectDecrease
  5446  0127                     l4130:
  5447                           
  5448                           ;main.c: 429:       setCurrent(currentValue[currentIndex], battery_voltage());
  5449  0127  0021               	movlb	1	; select bank1
  5450  0128  3563               	lslf	_currentIndex^(0+128),w
  5451  0129  3EBE               	addlw	(low (_currentValue| 0))& (0+255)
  5452  012A  0086               	movwf	6
  5453  012B  0187               	clrf	7
  5454  012C  3F40               	moviw [0]fsr1
  5455  012D  0020               	movlb	0	; select bank0
  5456  012E  00B9               	movwf	setCurrent@microamps
  5457  012F  3F41               	moviw [1]fsr1
  5458  0130  00BA               	movwf	setCurrent@microamps+1
  5459  0131  318E  2658  3180   	fcall	_battery_voltage
  5460  0134  0020               	movlb	0	; select bank0
  5461  0135  0838               	movf	?_battery_voltage+1,w
  5462  0136  00BC               	movwf	setCurrent@Vdd_mv+1
  5463  0137  0837               	movf	?_battery_voltage,w
  5464  0138  00BB               	movwf	setCurrent@Vdd_mv
  5465  0139  3183  23BD  3180   	fcall	_setCurrent
  5466  013C                     l4132:
  5467                           
  5468                           ;main.c: 430:       writePersistentState();
  5469  013C  3187  27A4  3180   	fcall	_writePersistentState
  5470  013F                     l4134:
  5471                           
  5472                           ;main.c: 432:     if(STATE_FREQUENCY == interfaceState){
  5473  013F  3002               	movlw	2
  5474  0140  0678               	xorwf	_interfaceState,w
  5475  0141  1D03               	btfss	3,2
  5476  0142  2944               	goto	u2761
  5477  0143  2945               	goto	u2760
  5478  0144                     u2761:
  5479  0144  2968               	goto	l4150
  5480  0145                     u2760:
  5481  0145                     l4136:
  5482                           
  5483                           ;main.c: 433:       frequencyIndex--;
  5484  0145  30FF               	movlw	255
  5485  0146  0021               	movlb	1	; select bank1
  5486  0147  07E1               	addwf	_frequencyIndex^(0+128),f
  5487  0148  30FF               	movlw	255
  5488  0149  3DE2               	addwfc	(_frequencyIndex+1)^(0+128),f
  5489  014A                     l4138:
  5490                           
  5491                           ;main.c: 434:       if (frequencyIndex < 0)
  5492  014A  1FE2               	btfss	(_frequencyIndex+1)^(0+128),7
  5493  014B  294D               	goto	u2771
  5494  014C  294E               	goto	u2770
  5495  014D                     u2771:
  5496  014D  2954               	goto	l4144
  5497  014E                     u2770:
  5498  014E                     l4140:
  5499                           
  5500                           ;main.c: 435:       {;main.c: 436:         frequencyIndex = 0;
  5501  014E  01E1               	clrf	_frequencyIndex^(0+128)
  5502  014F  01E2               	clrf	(_frequencyIndex+1)^(0+128)
  5503  0150                     l4142:
  5504                           
  5505                           ;main.c: 437:         selectSomething();
  5506  0150  318F  2785  3180   	fcall	_selectSomething
  5507                           
  5508                           ;main.c: 438:       } else {
  5509  0153  2957               	goto	l4146
  5510  0154                     l4144:
  5511                           
  5512                           ;main.c: 439:         selectDecrease();
  5513  0154  318C  24BB  3180   	fcall	_selectDecrease
  5514  0157                     l4146:
  5515                           
  5516                           ;main.c: 441:       setFrequency(frequencyValue[frequencyIndex]);
  5517  0157  0021               	movlb	1	; select bank1
  5518  0158  3561               	lslf	_frequencyIndex^(0+128),w
  5519  0159  3E40               	addlw	(low (_frequencyValue| (0+256)))& (0+255)
  5520  015A  0086               	movwf	6
  5521  015B  3001               	movlw	1	; select bank2/3
  5522  015C  0087               	movwf	7
  5523  015D  3F40               	moviw [0]fsr1
  5524  015E  0020               	movlb	0	; select bank0
  5525  015F  00B7               	movwf	setFrequency@frequency_hz
  5526  0160  3F41               	moviw [1]fsr1
  5527  0161  00B8               	movwf	setFrequency@frequency_hz+1
  5528  0162  3186  26DE  3180   	fcall	_setFrequency
  5529  0165                     l4148:
  5530                           
  5531                           ;main.c: 442:       writePersistentState();
  5532  0165  3187  27A4  3180   	fcall	_writePersistentState
  5533  0168                     l4150:
  5534                           
  5535                           ;main.c: 444:     if(STATE_RUNNING == interfaceState){
  5536  0168  0878               	movf	_interfaceState,w
  5537  0169  1D03               	btfss	3,2
  5538  016A  296C               	goto	u2781
  5539  016B  296D               	goto	u2780
  5540  016C                     u2781:
  5541  016C  2970               	goto	l4154
  5542  016D                     u2780:
  5543  016D                     l4152:
  5544                           
  5545                           ;main.c: 445:       selectSomething();
  5546  016D  318F  2785  3180   	fcall	_selectSomething
  5547  0170                     l4154:
  5548                           
  5549                           ;main.c: 447:     if(STATE_LOWBATTERY == interfaceState){
  5550  0170  3003               	movlw	3
  5551  0171  0678               	xorwf	_interfaceState,w
  5552  0172  1D03               	btfss	3,2
  5553  0173  2975               	goto	u2791
  5554  0174  2976               	goto	u2790
  5555  0175                     u2791:
  5556  0175  2BA3               	goto	l4310
  5557  0176                     u2790:
  5558  0176  290D               	goto	l4116
  5559  0177                     l4158:
  5560                           
  5561                           ;main.c: 452:     selectFrequency();
  5562  0177  318D  259E  3180   	fcall	_selectFrequency
  5563                           
  5564                           ;main.c: 453:     break;
  5565  017A  2BA3               	goto	l4310
  5566  017B                     l4160:
  5567                           
  5568                           ;main.c: 455:     selectCurrent();
  5569  017B  318D  254D  3180   	fcall	_selectCurrent
  5570                           
  5571                           ;main.c: 456:     break;
  5572  017E  2BA3               	goto	l4310
  5573  017F                     l4162:
  5574                           
  5575                           ;main.c: 458:        if (interfaceState == STATE_FREQUENCY){
  5576  017F  3002               	movlw	2
  5577  0180  0678               	xorwf	_interfaceState,w
  5578  0181  1D03               	btfss	3,2
  5579  0182  2984               	goto	u2801
  5580  0183  2985               	goto	u2800
  5581  0184                     u2801:
  5582  0184  2996               	goto	l4170
  5583  0185                     u2800:
  5584  0185                     l4164:
  5585                           
  5586                           ;main.c: 459:            setFrequency(frequencyValue[0]);
  5587  0185  0022               	movlb	2	; select bank2
  5588  0186  0841               	movf	(_frequencyValue+1)^(0+256),w
  5589  0187  0020               	movlb	0	; select bank0
  5590  0188  00B8               	movwf	setFrequency@frequency_hz+1
  5591  0189  0022               	movlb	2	; select bank2
  5592  018A  0840               	movf	_frequencyValue^(0+256),w
  5593  018B  0020               	movlb	0	; select bank0
  5594  018C  00B7               	movwf	setFrequency@frequency_hz
  5595  018D  3186  26DE  3180   	fcall	_setFrequency
  5596  0190                     l4166:
  5597                           
  5598                           ;main.c: 460:            frequencyIndex = 0;
  5599  0190  0021               	movlb	1	; select bank1
  5600  0191  01E1               	clrf	_frequencyIndex^(0+128)
  5601  0192  01E2               	clrf	(_frequencyIndex+1)^(0+128)
  5602  0193                     l4168:
  5603                           
  5604                           ;main.c: 461:            selectFrequencyValue();
  5605  0193  318D  2527  3180   	fcall	_selectFrequencyValue
  5606  0196                     l4170:
  5607                           
  5608                           ;main.c: 463:        if (interfaceState == STATE_CURRENT){
  5609  0196  0378               	decf	_interfaceState,w
  5610  0197  1D03               	btfss	3,2
  5611  0198  299A               	goto	u2811
  5612  0199  299B               	goto	u2810
  5613  019A                     u2811:
  5614  019A  2BA3               	goto	l4310
  5615  019B                     u2810:
  5616  019B                     l4172:
  5617                           
  5618                           ;main.c: 464:            setCurrent(currentValue[0], battery_voltage());
  5619  019B  0021               	movlb	1	; select bank1
  5620  019C  083F               	movf	(_currentValue+1)^(0+128),w
  5621  019D  0020               	movlb	0	; select bank0
  5622  019E  00BA               	movwf	setCurrent@microamps+1
  5623  019F  0021               	movlb	1	; select bank1
  5624  01A0  083E               	movf	_currentValue^(0+128),w
  5625  01A1  0020               	movlb	0	; select bank0
  5626  01A2  00B9               	movwf	setCurrent@microamps
  5627  01A3  318E  2658  3180   	fcall	_battery_voltage
  5628  01A6  0020               	movlb	0	; select bank0
  5629  01A7  0838               	movf	?_battery_voltage+1,w
  5630  01A8  00BC               	movwf	setCurrent@Vdd_mv+1
  5631  01A9  0837               	movf	?_battery_voltage,w
  5632  01AA  00BB               	movwf	setCurrent@Vdd_mv
  5633  01AB  3183  23BD  3180   	fcall	_setCurrent
  5634  01AE                     l4174:
  5635                           
  5636                           ;main.c: 465:            currentIndex = 0;
  5637  01AE  0021               	movlb	1	; select bank1
  5638  01AF  01E3               	clrf	_currentIndex^(0+128)
  5639  01B0  01E4               	clrf	(_currentIndex+1)^(0+128)
  5640  01B1                     l4176:
  5641                           
  5642                           ;main.c: 466:            selectCurrentValue();
  5643  01B1  318D  2575  3180   	fcall	_selectCurrentValue
  5644  01B4  2BA3               	goto	l4310
  5645  01B5                     l4178:
  5646                           
  5647                           ;main.c: 473:      if (interfaceState == STATE_FREQUENCY) {
  5648  01B5  3002               	movlw	2
  5649  01B6  0678               	xorwf	_interfaceState,w
  5650  01B7  1D03               	btfss	3,2
  5651  01B8  29BA               	goto	u2821
  5652  01B9  29BB               	goto	u2820
  5653  01BA                     u2821:
  5654  01BA  29CE               	goto	l4186
  5655  01BB                     u2820:
  5656  01BB                     l4180:
  5657                           
  5658                           ;main.c: 474:          setFrequency(frequencyValue[1]);
  5659  01BB  0022               	movlb	2	; select bank2
  5660  01BC  0843               	movf	((_frequencyValue+1)^(0+256)+2),w
  5661  01BD  0020               	movlb	0	; select bank0
  5662  01BE  00B8               	movwf	setFrequency@frequency_hz+1
  5663  01BF  0022               	movlb	2	; select bank2
  5664  01C0  0842               	movf	(_frequencyValue^(0+256)+2),w
  5665  01C1  0020               	movlb	0	; select bank0
  5666  01C2  00B7               	movwf	setFrequency@frequency_hz
  5667  01C3  3186  26DE  3180   	fcall	_setFrequency
  5668  01C6                     l4182:
  5669                           
  5670                           ;main.c: 475:          frequencyIndex = 1;
  5671  01C6  3001               	movlw	1
  5672  01C7  0021               	movlb	1	; select bank1
  5673  01C8  00E1               	movwf	_frequencyIndex^(0+128)
  5674  01C9  3000               	movlw	0
  5675  01CA  00E2               	movwf	(_frequencyIndex^(0+128)+1)
  5676  01CB                     l4184:
  5677                           
  5678                           ;main.c: 476:          selectFrequencyValue();
  5679  01CB  318D  2527  3180   	fcall	_selectFrequencyValue
  5680  01CE                     l4186:
  5681                           
  5682                           ;main.c: 478:      if (interfaceState == STATE_CURRENT) {
  5683  01CE  0378               	decf	_interfaceState,w
  5684  01CF  1D03               	btfss	3,2
  5685  01D0  29D2               	goto	u2831
  5686  01D1  29D3               	goto	u2830
  5687  01D2                     u2831:
  5688  01D2  2BA3               	goto	l4310
  5689  01D3                     u2830:
  5690  01D3                     l4188:
  5691                           
  5692                           ;main.c: 479:          setCurrent(currentValue[1], battery_voltage());
  5693  01D3  0021               	movlb	1	; select bank1
  5694  01D4  0841               	movf	((_currentValue+1)^(0+128)+2),w
  5695  01D5  0020               	movlb	0	; select bank0
  5696  01D6  00BA               	movwf	setCurrent@microamps+1
  5697  01D7  0021               	movlb	1	; select bank1
  5698  01D8  0840               	movf	(_currentValue^(0+128)+2),w
  5699  01D9  0020               	movlb	0	; select bank0
  5700  01DA  00B9               	movwf	setCurrent@microamps
  5701  01DB  318E  2658  3180   	fcall	_battery_voltage
  5702  01DE  0020               	movlb	0	; select bank0
  5703  01DF  0838               	movf	?_battery_voltage+1,w
  5704  01E0  00BC               	movwf	setCurrent@Vdd_mv+1
  5705  01E1  0837               	movf	?_battery_voltage,w
  5706  01E2  00BB               	movwf	setCurrent@Vdd_mv
  5707  01E3  3183  23BD  3180   	fcall	_setCurrent
  5708  01E6                     l4190:
  5709                           
  5710                           ;main.c: 480:          currentIndex = 1;
  5711  01E6  3001               	movlw	1
  5712  01E7  0021               	movlb	1	; select bank1
  5713  01E8  00E3               	movwf	_currentIndex^(0+128)
  5714  01E9  3000               	movlw	0
  5715  01EA  00E4               	movwf	(_currentIndex^(0+128)+1)
  5716  01EB  29B1               	goto	l4176
  5717  01EC                     l4194:
  5718                           
  5719                           ;main.c: 489:      if (interfaceState == STATE_FREQUENCY) {
  5720  01EC  3002               	movlw	2
  5721  01ED  0678               	xorwf	_interfaceState,w
  5722  01EE  1D03               	btfss	3,2
  5723  01EF  29F1               	goto	u2841
  5724  01F0  29F2               	goto	u2840
  5725  01F1                     u2841:
  5726  01F1  2A05               	goto	l4202
  5727  01F2                     u2840:
  5728  01F2                     l4196:
  5729                           
  5730                           ;main.c: 490:          setFrequency(frequencyValue[2]);
  5731  01F2  0022               	movlb	2	; select bank2
  5732  01F3  0845               	movf	((_frequencyValue+1)^(0+256)+4),w
  5733  01F4  0020               	movlb	0	; select bank0
  5734  01F5  00B8               	movwf	setFrequency@frequency_hz+1
  5735  01F6  0022               	movlb	2	; select bank2
  5736  01F7  0844               	movf	(_frequencyValue^(0+256)+4),w
  5737  01F8  0020               	movlb	0	; select bank0
  5738  01F9  00B7               	movwf	setFrequency@frequency_hz
  5739  01FA  3186  26DE  3180   	fcall	_setFrequency
  5740  01FD                     l4198:
  5741                           
  5742                           ;main.c: 491:          frequencyIndex = 2;
  5743  01FD  3002               	movlw	2
  5744  01FE  0021               	movlb	1	; select bank1
  5745  01FF  00E1               	movwf	_frequencyIndex^(0+128)
  5746  0200  3000               	movlw	0
  5747  0201  00E2               	movwf	(_frequencyIndex^(0+128)+1)
  5748  0202                     l4200:
  5749                           
  5750                           ;main.c: 492:          selectFrequencyValue();
  5751  0202  318D  2527  3180   	fcall	_selectFrequencyValue
  5752  0205                     l4202:
  5753                           
  5754                           ;main.c: 494:      if (interfaceState == STATE_CURRENT) {
  5755  0205  0378               	decf	_interfaceState,w
  5756  0206  1D03               	btfss	3,2
  5757  0207  2A09               	goto	u2851
  5758  0208  2A0A               	goto	u2850
  5759  0209                     u2851:
  5760  0209  2BA3               	goto	l4310
  5761  020A                     u2850:
  5762  020A                     l4204:
  5763                           
  5764                           ;main.c: 495:          setCurrent(currentValue[2], battery_voltage());
  5765  020A  0021               	movlb	1	; select bank1
  5766  020B  0843               	movf	((_currentValue+1)^(0+128)+4),w
  5767  020C  0020               	movlb	0	; select bank0
  5768  020D  00BA               	movwf	setCurrent@microamps+1
  5769  020E  0021               	movlb	1	; select bank1
  5770  020F  0842               	movf	(_currentValue^(0+128)+4),w
  5771  0210  0020               	movlb	0	; select bank0
  5772  0211  00B9               	movwf	setCurrent@microamps
  5773  0212  318E  2658  3180   	fcall	_battery_voltage
  5774  0215  0020               	movlb	0	; select bank0
  5775  0216  0838               	movf	?_battery_voltage+1,w
  5776  0217  00BC               	movwf	setCurrent@Vdd_mv+1
  5777  0218  0837               	movf	?_battery_voltage,w
  5778  0219  00BB               	movwf	setCurrent@Vdd_mv
  5779  021A  3183  23BD  3180   	fcall	_setCurrent
  5780  021D                     l4206:
  5781                           
  5782                           ;main.c: 496:          currentIndex = 2;
  5783  021D  3002               	movlw	2
  5784  021E  0021               	movlb	1	; select bank1
  5785  021F  00E3               	movwf	_currentIndex^(0+128)
  5786  0220  3000               	movlw	0
  5787  0221  00E4               	movwf	(_currentIndex^(0+128)+1)
  5788  0222  29B1               	goto	l4176
  5789  0223                     l4210:
  5790                           
  5791                           ;main.c: 501:        if (interfaceState == STATE_FREQUENCY) {
  5792  0223  3002               	movlw	2
  5793  0224  0678               	xorwf	_interfaceState,w
  5794  0225  1D03               	btfss	3,2
  5795  0226  2A28               	goto	u2861
  5796  0227  2A29               	goto	u2860
  5797  0228                     u2861:
  5798  0228  2A3C               	goto	l4218
  5799  0229                     u2860:
  5800  0229                     l4212:
  5801                           
  5802                           ;main.c: 502:            setFrequency(frequencyValue[3]);
  5803  0229  0022               	movlb	2	; select bank2
  5804  022A  0847               	movf	((_frequencyValue+1)^(0+256)+6),w
  5805  022B  0020               	movlb	0	; select bank0
  5806  022C  00B8               	movwf	setFrequency@frequency_hz+1
  5807  022D  0022               	movlb	2	; select bank2
  5808  022E  0846               	movf	(_frequencyValue^(0+256)+6),w
  5809  022F  0020               	movlb	0	; select bank0
  5810  0230  00B7               	movwf	setFrequency@frequency_hz
  5811  0231  3186  26DE  3180   	fcall	_setFrequency
  5812  0234                     l4214:
  5813                           
  5814                           ;main.c: 503:            frequencyIndex = 3;
  5815  0234  3003               	movlw	3
  5816  0235  0021               	movlb	1	; select bank1
  5817  0236  00E1               	movwf	_frequencyIndex^(0+128)
  5818  0237  3000               	movlw	0
  5819  0238  00E2               	movwf	(_frequencyIndex^(0+128)+1)
  5820  0239                     l4216:
  5821                           
  5822                           ;main.c: 504:            selectFrequencyValue();
  5823  0239  318D  2527  3180   	fcall	_selectFrequencyValue
  5824  023C                     l4218:
  5825                           
  5826                           ;main.c: 506:        if (interfaceState == STATE_CURRENT) {
  5827  023C  0378               	decf	_interfaceState,w
  5828  023D  1D03               	btfss	3,2
  5829  023E  2A40               	goto	u2871
  5830  023F  2A41               	goto	u2870
  5831  0240                     u2871:
  5832  0240  2BA3               	goto	l4310
  5833  0241                     u2870:
  5834  0241                     l4220:
  5835                           
  5836                           ;main.c: 507:            setCurrent(currentValue[3], battery_voltage());
  5837  0241  0021               	movlb	1	; select bank1
  5838  0242  0845               	movf	((_currentValue+1)^(0+128)+6),w
  5839  0243  0020               	movlb	0	; select bank0
  5840  0244  00BA               	movwf	setCurrent@microamps+1
  5841  0245  0021               	movlb	1	; select bank1
  5842  0246  0844               	movf	(_currentValue^(0+128)+6),w
  5843  0247  0020               	movlb	0	; select bank0
  5844  0248  00B9               	movwf	setCurrent@microamps
  5845  0249  318E  2658  3180   	fcall	_battery_voltage
  5846  024C  0020               	movlb	0	; select bank0
  5847  024D  0838               	movf	?_battery_voltage+1,w
  5848  024E  00BC               	movwf	setCurrent@Vdd_mv+1
  5849  024F  0837               	movf	?_battery_voltage,w
  5850  0250  00BB               	movwf	setCurrent@Vdd_mv
  5851  0251  3183  23BD  3180   	fcall	_setCurrent
  5852  0254                     l4222:
  5853                           
  5854                           ;main.c: 508:            currentIndex = 3;
  5855  0254  3003               	movlw	3
  5856  0255  0021               	movlb	1	; select bank1
  5857  0256  00E3               	movwf	_currentIndex^(0+128)
  5858  0257  3000               	movlw	0
  5859  0258  00E4               	movwf	(_currentIndex^(0+128)+1)
  5860  0259  29B1               	goto	l4176
  5861  025A                     l4226:
  5862                           
  5863                           ;main.c: 513:        if (interfaceState == STATE_FREQUENCY) {
  5864  025A  3002               	movlw	2
  5865  025B  0678               	xorwf	_interfaceState,w
  5866  025C  1D03               	btfss	3,2
  5867  025D  2A5F               	goto	u2881
  5868  025E  2A60               	goto	u2880
  5869  025F                     u2881:
  5870  025F  2A73               	goto	l4234
  5871  0260                     u2880:
  5872  0260                     l4228:
  5873                           
  5874                           ;main.c: 514:            setFrequency(frequencyValue[4]);
  5875  0260  0022               	movlb	2	; select bank2
  5876  0261  0849               	movf	((_frequencyValue+1)^(0+256)+8),w
  5877  0262  0020               	movlb	0	; select bank0
  5878  0263  00B8               	movwf	setFrequency@frequency_hz+1
  5879  0264  0022               	movlb	2	; select bank2
  5880  0265  0848               	movf	(_frequencyValue^(0+256)+8),w
  5881  0266  0020               	movlb	0	; select bank0
  5882  0267  00B7               	movwf	setFrequency@frequency_hz
  5883  0268  3186  26DE  3180   	fcall	_setFrequency
  5884  026B                     l4230:
  5885                           
  5886                           ;main.c: 515:            frequencyIndex = 4;
  5887  026B  3004               	movlw	4
  5888  026C  0021               	movlb	1	; select bank1
  5889  026D  00E1               	movwf	_frequencyIndex^(0+128)
  5890  026E  3000               	movlw	0
  5891  026F  00E2               	movwf	(_frequencyIndex^(0+128)+1)
  5892  0270                     l4232:
  5893                           
  5894                           ;main.c: 516:            selectFrequencyValue();
  5895  0270  318D  2527  3180   	fcall	_selectFrequencyValue
  5896  0273                     l4234:
  5897                           
  5898                           ;main.c: 518:        if (interfaceState == STATE_CURRENT) {
  5899  0273  0378               	decf	_interfaceState,w
  5900  0274  1D03               	btfss	3,2
  5901  0275  2A77               	goto	u2891
  5902  0276  2A78               	goto	u2890
  5903  0277                     u2891:
  5904  0277  2BA3               	goto	l4310
  5905  0278                     u2890:
  5906  0278                     l4236:
  5907                           
  5908                           ;main.c: 519:            setCurrent(currentValue[4], battery_voltage());
  5909  0278  0021               	movlb	1	; select bank1
  5910  0279  0847               	movf	((_currentValue+1)^(0+128)+8),w
  5911  027A  0020               	movlb	0	; select bank0
  5912  027B  00BA               	movwf	setCurrent@microamps+1
  5913  027C  0021               	movlb	1	; select bank1
  5914  027D  0846               	movf	(_currentValue^(0+128)+8),w
  5915  027E  0020               	movlb	0	; select bank0
  5916  027F  00B9               	movwf	setCurrent@microamps
  5917  0280  318E  2658  3180   	fcall	_battery_voltage
  5918  0283  0020               	movlb	0	; select bank0
  5919  0284  0838               	movf	?_battery_voltage+1,w
  5920  0285  00BC               	movwf	setCurrent@Vdd_mv+1
  5921  0286  0837               	movf	?_battery_voltage,w
  5922  0287  00BB               	movwf	setCurrent@Vdd_mv
  5923  0288  3183  23BD  3180   	fcall	_setCurrent
  5924  028B                     l4238:
  5925                           
  5926                           ;main.c: 520:            currentIndex = 4;
  5927  028B  3004               	movlw	4
  5928  028C  0021               	movlb	1	; select bank1
  5929  028D  00E3               	movwf	_currentIndex^(0+128)
  5930  028E  3000               	movlw	0
  5931  028F  00E4               	movwf	(_currentIndex^(0+128)+1)
  5932  0290  29B1               	goto	l4176
  5933  0291                     l4242:
  5934                           
  5935                           ;main.c: 525:        if (interfaceState == STATE_FREQUENCY) {
  5936  0291  3002               	movlw	2
  5937  0292  0678               	xorwf	_interfaceState,w
  5938  0293  1D03               	btfss	3,2
  5939  0294  2A96               	goto	u2901
  5940  0295  2A97               	goto	u2900
  5941  0296                     u2901:
  5942  0296  2AAA               	goto	l4250
  5943  0297                     u2900:
  5944  0297                     l4244:
  5945                           
  5946                           ;main.c: 526:            setFrequency(frequencyValue[5]);
  5947  0297  0022               	movlb	2	; select bank2
  5948  0298  084B               	movf	((_frequencyValue+1)^(0+256)+10),w
  5949  0299  0020               	movlb	0	; select bank0
  5950  029A  00B8               	movwf	setFrequency@frequency_hz+1
  5951  029B  0022               	movlb	2	; select bank2
  5952  029C  084A               	movf	(_frequencyValue^(0+256)+10),w
  5953  029D  0020               	movlb	0	; select bank0
  5954  029E  00B7               	movwf	setFrequency@frequency_hz
  5955  029F  3186  26DE  3180   	fcall	_setFrequency
  5956  02A2                     l4246:
  5957                           
  5958                           ;main.c: 527:            frequencyIndex = 5;
  5959  02A2  3005               	movlw	5
  5960  02A3  0021               	movlb	1	; select bank1
  5961  02A4  00E1               	movwf	_frequencyIndex^(0+128)
  5962  02A5  3000               	movlw	0
  5963  02A6  00E2               	movwf	(_frequencyIndex^(0+128)+1)
  5964  02A7                     l4248:
  5965                           
  5966                           ;main.c: 528:            selectFrequencyValue();
  5967  02A7  318D  2527  3180   	fcall	_selectFrequencyValue
  5968  02AA                     l4250:
  5969                           
  5970                           ;main.c: 530:        if (interfaceState == STATE_CURRENT) {
  5971  02AA  0378               	decf	_interfaceState,w
  5972  02AB  1D03               	btfss	3,2
  5973  02AC  2AAE               	goto	u2911
  5974  02AD  2AAF               	goto	u2910
  5975  02AE                     u2911:
  5976  02AE  2BA3               	goto	l4310
  5977  02AF                     u2910:
  5978  02AF                     l4252:
  5979                           
  5980                           ;main.c: 531:            setCurrent(currentValue[5], battery_voltage());
  5981  02AF  0021               	movlb	1	; select bank1
  5982  02B0  0849               	movf	((_currentValue+1)^(0+128)+10),w
  5983  02B1  0020               	movlb	0	; select bank0
  5984  02B2  00BA               	movwf	setCurrent@microamps+1
  5985  02B3  0021               	movlb	1	; select bank1
  5986  02B4  0848               	movf	(_currentValue^(0+128)+10),w
  5987  02B5  0020               	movlb	0	; select bank0
  5988  02B6  00B9               	movwf	setCurrent@microamps
  5989  02B7  318E  2658  3180   	fcall	_battery_voltage
  5990  02BA  0020               	movlb	0	; select bank0
  5991  02BB  0838               	movf	?_battery_voltage+1,w
  5992  02BC  00BC               	movwf	setCurrent@Vdd_mv+1
  5993  02BD  0837               	movf	?_battery_voltage,w
  5994  02BE  00BB               	movwf	setCurrent@Vdd_mv
  5995  02BF  3183  23BD  3180   	fcall	_setCurrent
  5996  02C2                     l4254:
  5997                           
  5998                           ;main.c: 532:            currentIndex = 5;
  5999  02C2  3005               	movlw	5
  6000  02C3  0021               	movlb	1	; select bank1
  6001  02C4  00E3               	movwf	_currentIndex^(0+128)
  6002  02C5  3000               	movlw	0
  6003  02C6  00E4               	movwf	(_currentIndex^(0+128)+1)
  6004  02C7  29B1               	goto	l4176
  6005  02C8                     l4258:
  6006                           
  6007                           ;main.c: 537:        if (interfaceState == STATE_FREQUENCY) {
  6008  02C8  3002               	movlw	2
  6009  02C9  0678               	xorwf	_interfaceState,w
  6010  02CA  1D03               	btfss	3,2
  6011  02CB  2ACD               	goto	u2921
  6012  02CC  2ACE               	goto	u2920
  6013  02CD                     u2921:
  6014  02CD  2AE1               	goto	l4266
  6015  02CE                     u2920:
  6016  02CE                     l4260:
  6017                           
  6018                           ;main.c: 538:            setFrequency(frequencyValue[6]);
  6019  02CE  0022               	movlb	2	; select bank2
  6020  02CF  084D               	movf	((_frequencyValue+1)^(0+256)+12),w
  6021  02D0  0020               	movlb	0	; select bank0
  6022  02D1  00B8               	movwf	setFrequency@frequency_hz+1
  6023  02D2  0022               	movlb	2	; select bank2
  6024  02D3  084C               	movf	(_frequencyValue^(0+256)+12),w
  6025  02D4  0020               	movlb	0	; select bank0
  6026  02D5  00B7               	movwf	setFrequency@frequency_hz
  6027  02D6  3186  26DE  3180   	fcall	_setFrequency
  6028  02D9                     l4262:
  6029                           
  6030                           ;main.c: 539:            frequencyIndex = 6;
  6031  02D9  3006               	movlw	6
  6032  02DA  0021               	movlb	1	; select bank1
  6033  02DB  00E1               	movwf	_frequencyIndex^(0+128)
  6034  02DC  3000               	movlw	0
  6035  02DD  00E2               	movwf	(_frequencyIndex^(0+128)+1)
  6036  02DE                     l4264:
  6037                           
  6038                           ;main.c: 540:            selectFrequencyValue();
  6039  02DE  318D  2527  3180   	fcall	_selectFrequencyValue
  6040  02E1                     l4266:
  6041                           
  6042                           ;main.c: 542:        if (interfaceState == STATE_CURRENT) {
  6043  02E1  0378               	decf	_interfaceState,w
  6044  02E2  1D03               	btfss	3,2
  6045  02E3  2AE5               	goto	u2931
  6046  02E4  2AE6               	goto	u2930
  6047  02E5                     u2931:
  6048  02E5  2BA3               	goto	l4310
  6049  02E6                     u2930:
  6050  02E6                     l4268:
  6051                           
  6052                           ;main.c: 543:            setCurrent(currentValue[6], battery_voltage());
  6053  02E6  0021               	movlb	1	; select bank1
  6054  02E7  084B               	movf	((_currentValue+1)^(0+128)+12),w
  6055  02E8  0020               	movlb	0	; select bank0
  6056  02E9  00BA               	movwf	setCurrent@microamps+1
  6057  02EA  0021               	movlb	1	; select bank1
  6058  02EB  084A               	movf	(_currentValue^(0+128)+12),w
  6059  02EC  0020               	movlb	0	; select bank0
  6060  02ED  00B9               	movwf	setCurrent@microamps
  6061  02EE  318E  2658  3180   	fcall	_battery_voltage
  6062  02F1  0020               	movlb	0	; select bank0
  6063  02F2  0838               	movf	?_battery_voltage+1,w
  6064  02F3  00BC               	movwf	setCurrent@Vdd_mv+1
  6065  02F4  0837               	movf	?_battery_voltage,w
  6066  02F5  00BB               	movwf	setCurrent@Vdd_mv
  6067  02F6  3183  23BD  3180   	fcall	_setCurrent
  6068  02F9                     l4270:
  6069                           
  6070                           ;main.c: 544:            currentIndex = 6;
  6071  02F9  3006               	movlw	6
  6072  02FA  0021               	movlb	1	; select bank1
  6073  02FB  00E3               	movwf	_currentIndex^(0+128)
  6074  02FC  3000               	movlw	0
  6075  02FD  00E4               	movwf	(_currentIndex^(0+128)+1)
  6076  02FE  29B1               	goto	l4176
  6077  02FF                     l4274:
  6078                           
  6079                           ;main.c: 549:        if (interfaceState == STATE_FREQUENCY) {
  6080  02FF  3002               	movlw	2
  6081  0300  0678               	xorwf	_interfaceState,w
  6082  0301  1D03               	btfss	3,2
  6083  0302  2B04               	goto	u2941
  6084  0303  2B05               	goto	u2940
  6085  0304                     u2941:
  6086  0304  2B18               	goto	l4282
  6087  0305                     u2940:
  6088  0305                     l4276:
  6089                           
  6090                           ;main.c: 550:            setFrequency(frequencyValue[7]);
  6091  0305  0022               	movlb	2	; select bank2
  6092  0306  084F               	movf	((_frequencyValue+1)^(0+256)+14),w
  6093  0307  0020               	movlb	0	; select bank0
  6094  0308  00B8               	movwf	setFrequency@frequency_hz+1
  6095  0309  0022               	movlb	2	; select bank2
  6096  030A  084E               	movf	(_frequencyValue^(0+256)+14),w
  6097  030B  0020               	movlb	0	; select bank0
  6098  030C  00B7               	movwf	setFrequency@frequency_hz
  6099  030D  3186  26DE  3180   	fcall	_setFrequency
  6100  0310                     l4278:
  6101                           
  6102                           ;main.c: 551:            frequencyIndex = 7;
  6103  0310  3007               	movlw	7
  6104  0311  0021               	movlb	1	; select bank1
  6105  0312  00E1               	movwf	_frequencyIndex^(0+128)
  6106  0313  3000               	movlw	0
  6107  0314  00E2               	movwf	(_frequencyIndex^(0+128)+1)
  6108  0315                     l4280:
  6109                           
  6110                           ;main.c: 552:            selectFrequencyValue();
  6111  0315  318D  2527  3180   	fcall	_selectFrequencyValue
  6112  0318                     l4282:
  6113                           
  6114                           ;main.c: 554:        if (interfaceState == STATE_CURRENT) {
  6115  0318  0378               	decf	_interfaceState,w
  6116  0319  1D03               	btfss	3,2
  6117  031A  2B1C               	goto	u2951
  6118  031B  2B1D               	goto	u2950
  6119  031C                     u2951:
  6120  031C  2BA3               	goto	l4310
  6121  031D                     u2950:
  6122  031D                     l4284:
  6123                           
  6124                           ;main.c: 555:            setCurrent(currentValue[7], battery_voltage());
  6125  031D  0021               	movlb	1	; select bank1
  6126  031E  084D               	movf	((_currentValue+1)^(0+128)+14),w
  6127  031F  0020               	movlb	0	; select bank0
  6128  0320  00BA               	movwf	setCurrent@microamps+1
  6129  0321  0021               	movlb	1	; select bank1
  6130  0322  084C               	movf	(_currentValue^(0+128)+14),w
  6131  0323  0020               	movlb	0	; select bank0
  6132  0324  00B9               	movwf	setCurrent@microamps
  6133  0325  318E  2658  3180   	fcall	_battery_voltage
  6134  0328  0020               	movlb	0	; select bank0
  6135  0329  0838               	movf	?_battery_voltage+1,w
  6136  032A  00BC               	movwf	setCurrent@Vdd_mv+1
  6137  032B  0837               	movf	?_battery_voltage,w
  6138  032C  00BB               	movwf	setCurrent@Vdd_mv
  6139  032D  3183  23BD  3180   	fcall	_setCurrent
  6140  0330                     l4286:
  6141                           
  6142                           ;main.c: 556:            currentIndex = 7;
  6143  0330  3007               	movlw	7
  6144  0331  0021               	movlb	1	; select bank1
  6145  0332  00E3               	movwf	_currentIndex^(0+128)
  6146  0333  3000               	movlw	0
  6147  0334  00E4               	movwf	(_currentIndex^(0+128)+1)
  6148  0335  29B1               	goto	l4176
  6149  0336                     l4290:
  6150                           
  6151                           ;main.c: 561:        if (interfaceState == STATE_FREQUENCY) {
  6152  0336  3002               	movlw	2
  6153  0337  0678               	xorwf	_interfaceState,w
  6154  0338  1D03               	btfss	3,2
  6155  0339  2B3B               	goto	u2961
  6156  033A  2B3C               	goto	u2960
  6157  033B                     u2961:
  6158  033B  2B4F               	goto	l4298
  6159  033C                     u2960:
  6160  033C                     l4292:
  6161                           
  6162                           ;main.c: 562:            setFrequency(frequencyValue[8]);
  6163  033C  0022               	movlb	2	; select bank2
  6164  033D  0851               	movf	((_frequencyValue+1)^(0+256)+16),w
  6165  033E  0020               	movlb	0	; select bank0
  6166  033F  00B8               	movwf	setFrequency@frequency_hz+1
  6167  0340  0022               	movlb	2	; select bank2
  6168  0341  0850               	movf	(_frequencyValue^(0+256)+16),w
  6169  0342  0020               	movlb	0	; select bank0
  6170  0343  00B7               	movwf	setFrequency@frequency_hz
  6171  0344  3186  26DE  3180   	fcall	_setFrequency
  6172  0347                     l4294:
  6173                           
  6174                           ;main.c: 563:            frequencyIndex = 8;
  6175  0347  3008               	movlw	8
  6176  0348  0021               	movlb	1	; select bank1
  6177  0349  00E1               	movwf	_frequencyIndex^(0+128)
  6178  034A  3000               	movlw	0
  6179  034B  00E2               	movwf	(_frequencyIndex^(0+128)+1)
  6180  034C                     l4296:
  6181                           
  6182                           ;main.c: 564:            selectFrequencyValue();
  6183  034C  318D  2527  3180   	fcall	_selectFrequencyValue
  6184  034F                     l4298:
  6185                           
  6186                           ;main.c: 566:        if (interfaceState == STATE_CURRENT) {
  6187  034F  0378               	decf	_interfaceState,w
  6188  0350  1D03               	btfss	3,2
  6189  0351  2B53               	goto	u2971
  6190  0352  2B54               	goto	u2970
  6191  0353                     u2971:
  6192  0353  2BA3               	goto	l4310
  6193  0354                     u2970:
  6194  0354                     l4300:
  6195                           
  6196                           ;main.c: 567:            setCurrent(currentValue[8], battery_voltage());
  6197  0354  0021               	movlb	1	; select bank1
  6198  0355  084F               	movf	((_currentValue+1)^(0+128)+16),w
  6199  0356  0020               	movlb	0	; select bank0
  6200  0357  00BA               	movwf	setCurrent@microamps+1
  6201  0358  0021               	movlb	1	; select bank1
  6202  0359  084E               	movf	(_currentValue^(0+128)+16),w
  6203  035A  0020               	movlb	0	; select bank0
  6204  035B  00B9               	movwf	setCurrent@microamps
  6205  035C  318E  2658  3180   	fcall	_battery_voltage
  6206  035F  0020               	movlb	0	; select bank0
  6207  0360  0838               	movf	?_battery_voltage+1,w
  6208  0361  00BC               	movwf	setCurrent@Vdd_mv+1
  6209  0362  0837               	movf	?_battery_voltage,w
  6210  0363  00BB               	movwf	setCurrent@Vdd_mv
  6211  0364  3183  23BD  3180   	fcall	_setCurrent
  6212  0367                     l4302:
  6213                           
  6214                           ;main.c: 568:            currentIndex = 8;
  6215  0367  3008               	movlw	8
  6216  0368  0021               	movlb	1	; select bank1
  6217  0369  00E3               	movwf	_currentIndex^(0+128)
  6218  036A  3000               	movlw	0
  6219  036B  00E4               	movwf	(_currentIndex^(0+128)+1)
  6220  036C  29B1               	goto	l4176
  6221  036D                     l4308:
  6222  036D  0021               	movlb	1	; select bank1
  6223  036E  0867               	movf	process_remote_command@code^(0+128),w
  6224  036F  3E03               	addlw	3
  6225  0370  0086               	movwf	6
  6226  0371  0187               	clrf	7
  6227  0372  0801               	movf	1,w
  6228  0373  00E5               	movwf	??_process_remote_command^(0+128)
  6229  0374  01E6               	clrf	(??_process_remote_command^(0+128)+1)
  6230                           
  6231                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6232                           ; Switch size 1, requested type "simple"
  6233                           ; Number of cases is 1, Range of values is 0 to 0
  6234                           ; switch strategies available:
  6235                           ; Name         Instructions Cycles
  6236                           ; simple_byte            4     3 (average)
  6237                           ; direct_byte            8     6 (fixed)
  6238                           ; jumptable            260     6 (fixed)
  6239                           ;	Chosen strategy is simple_byte
  6240  0375  0866               	movf	(??_process_remote_command+1)^(0+128),w
  6241  0376  3A00               	xorlw	0	; case 0
  6242  0377  1903               	skipnz
  6243  0378  2B7A               	goto	l4452
  6244  0379  2BA3               	goto	l4310
  6245  037A                     l4452:
  6246                           
  6247                           ; Switch size 1, requested type "simple"
  6248                           ; Number of cases is 13, Range of values is 8 to 176
  6249                           ; switch strategies available:
  6250                           ; Name         Instructions Cycles
  6251                           ; simple_byte           40    21 (average)
  6252                           ; jumptable            263     9 (fixed)
  6253                           ;	Chosen strategy is simple_byte
  6254  037A  0865               	movf	??_process_remote_command^(0+128),w
  6255  037B  3A08               	xorlw	8	; case 8
  6256  037C  1903               	skipnz
  6257  037D  297F               	goto	l4162
  6258  037E  3A18               	xorlw	24	; case 16
  6259  037F  1903               	skipnz
  6260  0380  297B               	goto	l4160
  6261  0381  3A08               	xorlw	8	; case 24
  6262  0382  1903               	skipnz
  6263  0383  2AC8               	goto	l4258
  6264  0384  3A30               	xorlw	48	; case 40
  6265  0385  1903               	skipnz
  6266  0386  2A23               	goto	l4210
  6267  0387  3A60               	xorlw	96	; case 72
  6268  0388  1903               	skipnz
  6269  0389  29EC               	goto	l4194
  6270  038A  3A18               	xorlw	24	; case 80
  6271  038B  1903               	skipnz
  6272  038C  2977               	goto	l4158
  6273  038D  3A08               	xorlw	8	; case 88
  6274  038E  1903               	skipnz
  6275  038F  2B36               	goto	l4290
  6276  0390  3A30               	xorlw	48	; case 104
  6277  0391  1903               	skipnz
  6278  0392  2A91               	goto	l4242
  6279  0393  3AE0               	xorlw	224	; case 136
  6280  0394  1903               	skipnz
  6281  0395  29B5               	goto	l4178
  6282  0396  3A10               	xorlw	16	; case 152
  6283  0397  1903               	skipnz
  6284  0398  2AFF               	goto	l4274
  6285  0399  3A38               	xorlw	56	; case 160
  6286  039A  1903               	skipnz
  6287  039B  2890               	goto	l4082
  6288  039C  3A08               	xorlw	8	; case 168
  6289  039D  1903               	skipnz
  6290  039E  2A5A               	goto	l4226
  6291  039F  3A18               	xorlw	24	; case 176
  6292  03A0  1903               	skipnz
  6293  03A1  2911               	goto	l4118
  6294  03A2  2BA3               	goto	l4310
  6295  03A3                     l4310:
  6296                           
  6297                           ;main.c: 576:   setLEDColor(LED_red, LED_green, LED_blue);
  6298  03A3  01F3               	clrf	setLEDColor@green
  6299  03A4  01F4               	clrf	setLEDColor@blue
  6300  03A5  3000               	movlw	0
  6301  03A6  318B  23FD  3180   	fcall	_setLEDColor
  6302  03A9                     l4312:
  6303                           
  6304                           ;main.c: 577:   _delay((unsigned long)((1000)*(4000000/4000.0)));
  6305  03A9  3006               	movlw	6
  6306  03AA  0021               	movlb	1	; select bank1
  6307  03AB  00E6               	movwf	(??_process_remote_command^(0+128)+1)
  6308  03AC  3013               	movlw	19
  6309  03AD  00E5               	movwf	??_process_remote_command^(0+128)
  6310  03AE  30AD               	movlw	173
  6311  03AF                     u3027:
  6312  03AF  0B89               	decfsz	9,f
  6313  03B0  2BAF               	goto	u3027
  6314  03B1  0BE5               	decfsz	??_process_remote_command^(0+128),f
  6315  03B2  2BAF               	goto	u3027
  6316  03B3  0BE6               	decfsz	(??_process_remote_command^(0+128)+1),f
  6317  03B4  2BAF               	goto	u3027
  6318  03B5  3200               	nop2
  6319  03B6                     l4314:
  6320                           
  6321                           ;main.c: 578:   setLEDColor(0, 0, 0);
  6322  03B6  01F3               	clrf	setLEDColor@green
  6323  03B7  01F4               	clrf	setLEDColor@blue
  6324  03B8  3000               	movlw	0
  6325  03B9  318B  23FD  3180   	fcall	_setLEDColor
  6326  03BC                     l753:
  6327  03BC  0008               	return
  6328  03BD                     __end_of_process_remote_command:
  6329                           
  6330                           	psect	text4
  6331  07A4                     __ptext4:	
  6332 ;; *************** function _writePersistentState *****************
  6333 ;; Defined at:
  6334 ;;		line 127 in file "main.c"
  6335 ;; Parameters:    Size  Location     Type
  6336 ;;		None
  6337 ;; Auto vars:     Size  Location     Type
  6338 ;;  i               1   78[BANK0 ] unsigned char 
  6339 ;;  buf            64   14[BANK0 ] unsigned short [32]
  6340 ;;  idx             1   79[BANK0 ] unsigned char 
  6341 ;; Return value:  Size  Location     Type
  6342 ;;                  1    wreg      void 
  6343 ;; Registers used:
  6344 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6345 ;; Tracked objects:
  6346 ;;		On entry : 0/0
  6347 ;;		On exit  : 0/0
  6348 ;;		Unchanged: 0/0
  6349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6350 ;;      Params:         0       0       0       0       0       0       0       0
  6351 ;;      Locals:         0      66       0       0       0       0       0       0
  6352 ;;      Temps:          0       4       0       0       0       0       0       0
  6353 ;;      Totals:         0      70       0       0       0       0       0       0
  6354 ;;Total ram usage:       70 bytes
  6355 ;; Hardware stack levels used: 1
  6356 ;; Hardware stack levels required when called: 6
  6357 ;; This function calls:
  6358 ;;		_FLASH_WriteBlock
  6359 ;; This function is called by:
  6360 ;;		_process_remote_command
  6361 ;; This function uses a non-reentrant model
  6362 ;;
  6363                           
  6364                           
  6365                           ;psect for function _writePersistentState
  6366  07A4                     _writePersistentState:
  6367  07A4                     l3944:	
  6368                           ;incstack = 0
  6369                           ; Regs used in _writePersistentState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6370                           
  6371                           
  6372                           ;main.c: 130:   uint16_t buf[32];;main.c: 131:   for (uint8_t i=0; i<32; i++){
  6373  07A4  0020               	movlb	0	; select bank0
  6374  07A5  01EE               	clrf	writePersistentState@i
  6375  07A6                     l3950:
  6376                           
  6377                           ;main.c: 132:     buf[0] = 0;
  6378  07A6  01AE               	clrf	writePersistentState@buf
  6379  07A7  01AF               	clrf	writePersistentState@buf+1
  6380  07A8                     l3952:
  6381                           
  6382                           ;main.c: 133:   }
  6383  07A8  3001               	movlw	1
  6384  07A9  00AA               	movwf	??_writePersistentState
  6385  07AA  082A               	movf	??_writePersistentState,w
  6386  07AB  07EE               	addwf	writePersistentState@i,f
  6387  07AC                     l3954:
  6388  07AC  3020               	movlw	32
  6389  07AD  026E               	subwf	writePersistentState@i,w
  6390  07AE  1C03               	skipc
  6391  07AF  2FB1               	goto	u2591
  6392  07B0  2FB2               	goto	u2590
  6393  07B1                     u2591:
  6394  07B1  2FA6               	goto	l3950
  6395  07B2                     u2590:
  6396  07B2                     l3956:
  6397                           
  6398                           ;main.c: 136:   uint8_t idx = 0;
  6399  07B2  01EF               	clrf	writePersistentState@idx
  6400  07B3                     l3958:
  6401                           
  6402                           ;main.c: 137:   buf[idx++] = ((uint16_t)(0x3400 | (currentIndex & 0xff)));
  6403  07B3  30FF               	movlw	255
  6404  07B4  0021               	movlb	1	; select bank1
  6405  07B5  0563               	andwf	_currentIndex^(0+128),w
  6406  07B6  0020               	movlb	0	; select bank0
  6407  07B7  00AA               	movwf	??_writePersistentState
  6408  07B8  3000               	movlw	0
  6409  07B9  0021               	movlb	1	; select bank1
  6410  07BA  0564               	andwf	(_currentIndex+1)^(0+128),w
  6411  07BB  0020               	movlb	0	; select bank0
  6412  07BC  00AB               	movwf	??_writePersistentState+1
  6413  07BD  3000               	movlw	0
  6414  07BE  042A               	iorwf	??_writePersistentState,w
  6415  07BF  00AE               	movwf	writePersistentState@buf
  6416  07C0  3034               	movlw	52
  6417  07C1  042B               	iorwf	??_writePersistentState+1,w
  6418  07C2  00AF               	movwf	writePersistentState@buf+1
  6419  07C3                     l3960:
  6420  07C3  3001               	movlw	1
  6421  07C4  00AA               	movwf	??_writePersistentState
  6422  07C5  082A               	movf	??_writePersistentState,w
  6423  07C6  07EF               	addwf	writePersistentState@idx,f
  6424  07C7                     l3962:
  6425                           
  6426                           ;main.c: 138:   buf[idx++] = ((uint16_t)(0x3400 | (frequencyIndex & 0xff)));
  6427  07C7  30FF               	movlw	255
  6428  07C8  0021               	movlb	1	; select bank1
  6429  07C9  0561               	andwf	_frequencyIndex^(0+128),w
  6430  07CA  0020               	movlb	0	; select bank0
  6431  07CB  00AA               	movwf	??_writePersistentState
  6432  07CC  3000               	movlw	0
  6433  07CD  0021               	movlb	1	; select bank1
  6434  07CE  0562               	andwf	(_frequencyIndex+1)^(0+128),w
  6435  07CF  0020               	movlb	0	; select bank0
  6436  07D0  00AB               	movwf	??_writePersistentState+1
  6437  07D1  3000               	movlw	0
  6438  07D2  042A               	iorwf	??_writePersistentState,w
  6439  07D3  00AC               	movwf	??_writePersistentState+2
  6440  07D4  3034               	movlw	52
  6441  07D5  042B               	iorwf	??_writePersistentState+1,w
  6442  07D6  00AD               	movwf	??_writePersistentState+3
  6443  07D7  356F               	lslf	writePersistentState@idx,w
  6444  07D8  3E2E               	addlw	(low (writePersistentState@buf| 0))& (0+255)
  6445  07D9  0086               	movwf	6
  6446  07DA  0187               	clrf	7
  6447  07DB  082C               	movf	??_writePersistentState+2,w
  6448  07DC  3FC0               	movwi [0]fsr1
  6449  07DD  082D               	movf	??_writePersistentState+3,w
  6450  07DE  3FC1               	movwi [1]fsr1
  6451  07DF                     l3964:
  6452  07DF  3001               	movlw	1
  6453  07E0  00AA               	movwf	??_writePersistentState
  6454  07E1  082A               	movf	??_writePersistentState,w
  6455  07E2  07EF               	addwf	writePersistentState@idx,f
  6456  07E3                     l3966:
  6457                           
  6458                           ;main.c: 139:   buf[idx++] = ((uint16_t)(0x3400 | (dc_frequency_flag & 0xff)));
  6459  07E3  3000               	movlw	0
  6460  07E4  047A               	iorwf	_dc_frequency_flag,w
  6461  07E5  00AA               	movwf	??_writePersistentState
  6462  07E6  3034               	movlw	52
  6463  07E7  00AB               	movwf	??_writePersistentState+1
  6464  07E8  356F               	lslf	writePersistentState@idx,w
  6465  07E9  3E2E               	addlw	(low (writePersistentState@buf| 0))& (0+255)
  6466  07EA  0086               	movwf	6
  6467  07EB  0187               	clrf	7
  6468  07EC  082A               	movf	??_writePersistentState,w
  6469  07ED  3FC0               	movwi [0]fsr1
  6470  07EE  082B               	movf	??_writePersistentState+1,w
  6471  07EF  3FC1               	movwi [1]fsr1
  6472  07F0                     l3968:
  6473  07F0  3001               	movlw	1
  6474  07F1  00AA               	movwf	??_writePersistentState
  6475  07F2  082A               	movf	??_writePersistentState,w
  6476  07F3  07EF               	addwf	writePersistentState@idx,f
  6477  07F4                     l3970:
  6478                           
  6479                           ;main.c: 141:   FLASH_WriteBlock((uint16_t)&HEF_persistent_state, buf);
  6480  07F4  30E0               	movlw	224
  6481  07F5  00A0               	movwf	FLASH_WriteBlock@writeAddr
  6482  07F6  300F               	movlw	15
  6483  07F7  00A1               	movwf	FLASH_WriteBlock@writeAddr+1
  6484  07F8  302E               	movlw	(low (writePersistentState@buf| 0))& (0+255)
  6485  07F9  00AA               	movwf	??_writePersistentState
  6486  07FA  082A               	movf	??_writePersistentState,w
  6487  07FB  00A2               	movwf	FLASH_WriteBlock@flashWordArray
  6488  07FC  3186  2606  3187   	fcall	_FLASH_WriteBlock
  6489  07FF                     l639:
  6490  07FF  0008               	return
  6491  0800                     __end_of_writePersistentState:
  6492                           
  6493                           	psect	text5
  6494  0606                     __ptext5:	
  6495 ;; *************** function _FLASH_WriteBlock *****************
  6496 ;; Defined at:
  6497 ;;		line 94 in file "mcc_generated_files/memory.c"
  6498 ;; Parameters:    Size  Location     Type
  6499 ;;  writeAddr       2    0[BANK0 ] unsigned short 
  6500 ;;  flashWordArr    1    2[BANK0 ] PTR unsigned short 
  6501 ;;		 -> writePersistentState@buf(64), 
  6502 ;; Auto vars:     Size  Location     Type
  6503 ;;  blockStartAd    2    6[BANK0 ] unsigned short 
  6504 ;;  i               1    9[BANK0 ] unsigned char 
  6505 ;;  GIEBitValue     1    8[BANK0 ] unsigned char 
  6506 ;; Return value:  Size  Location     Type
  6507 ;;                  1    wreg      char 
  6508 ;; Registers used:
  6509 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6510 ;; Tracked objects:
  6511 ;;		On entry : 0/0
  6512 ;;		On exit  : 0/0
  6513 ;;		Unchanged: 0/0
  6514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6515 ;;      Params:         0       3       0       0       0       0       0       0
  6516 ;;      Locals:         0       4       0       0       0       0       0       0
  6517 ;;      Temps:          0       3       0       0       0       0       0       0
  6518 ;;      Totals:         0      10       0       0       0       0       0       0
  6519 ;;Total ram usage:       10 bytes
  6520 ;; Hardware stack levels used: 1
  6521 ;; Hardware stack levels required when called: 5
  6522 ;; This function calls:
  6523 ;;		_FLASH_EraseBlock
  6524 ;; This function is called by:
  6525 ;;		_writePersistentState
  6526 ;;		_FLASH_WriteWord
  6527 ;; This function uses a non-reentrant model
  6528 ;;
  6529                           
  6530                           
  6531                           ;psect for function _FLASH_WriteBlock
  6532  0606                     _FLASH_WriteBlock:
  6533  0606                     l3778:	
  6534                           ;incstack = 0
  6535                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6536                           
  6537                           
  6538                           ;mcc_generated_files/memory.c: 94: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t 
      +                          *flashWordArray);mcc_generated_files/memory.c: 95: {;mcc_generated_files/memory.c: 96:  
      +                             uint16_t blockStartAddr = (uint16_t )(writeAddr & ((0x1000 -1) ^ (32 -1)));
  6539  0606  30E0               	movlw	224
  6540  0607  0020               	movlb	0	; select bank0
  6541  0608  0520               	andwf	FLASH_WriteBlock@writeAddr,w
  6542  0609  00A6               	movwf	FLASH_WriteBlock@blockStartAddr
  6543  060A  300F               	movlw	15
  6544  060B  0521               	andwf	FLASH_WriteBlock@writeAddr+1,w
  6545  060C  00A7               	movwf	FLASH_WriteBlock@blockStartAddr+1
  6546  060D                     l3780:
  6547                           
  6548                           ;mcc_generated_files/memory.c: 97:     uint8_t GIEBitValue = INTCONbits.GIE;
  6549  060D  3000               	movlw	0
  6550  060E  1B8B               	btfsc	11,7	;volatile
  6551  060F  3001               	movlw	1
  6552  0610  00A8               	movwf	FLASH_WriteBlock@GIEBitValue
  6553  0611                     l3782:
  6554                           
  6555                           ;mcc_generated_files/memory.c: 98:     uint8_t i;;mcc_generated_files/memory.c: 101:    
      +                           if( writeAddr != blockStartAddr )
  6556  0611  0827               	movf	FLASH_WriteBlock@blockStartAddr+1,w
  6557  0612  0621               	xorwf	FLASH_WriteBlock@writeAddr+1,w
  6558  0613  1D03               	skipz
  6559  0614  2E17               	goto	u2315
  6560  0615  0826               	movf	FLASH_WriteBlock@blockStartAddr,w
  6561  0616  0620               	xorwf	FLASH_WriteBlock@writeAddr,w
  6562  0617                     u2315:
  6563  0617  1903               	skipnz
  6564  0618  2E1A               	goto	u2311
  6565  0619  2E1B               	goto	u2310
  6566  061A                     u2311:
  6567  061A  2E1C               	goto	l471
  6568  061B                     u2310:
  6569  061B  2E71               	goto	l472
  6570  061C                     l471:	
  6571                           ;mcc_generated_files/memory.c: 104:     }
  6572                           
  6573                           
  6574                           ;mcc_generated_files/memory.c: 106:     INTCONbits.GIE = 0;
  6575  061C  138B               	bcf	11,7	;volatile
  6576  061D                     l3786:
  6577                           
  6578                           ;mcc_generated_files/memory.c: 109:     FLASH_EraseBlock(writeAddr);
  6579  061D  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
  6580  061E  00F4               	movwf	FLASH_EraseBlock@startAddr+1
  6581  061F  0820               	movf	FLASH_WriteBlock@writeAddr,w
  6582  0620  00F3               	movwf	FLASH_EraseBlock@startAddr
  6583  0621  318C  245D  3186   	fcall	_FLASH_EraseBlock
  6584  0624                     l3788:
  6585                           
  6586                           ;mcc_generated_files/memory.c: 112:     PMCON1bits.CFGS = 0;
  6587  0624  0023               	movlb	3	; select bank3
  6588  0625  1315               	bcf	21,6	;volatile
  6589  0626                     l3790:
  6590                           
  6591                           ;mcc_generated_files/memory.c: 113:     PMCON1bits.WREN = 1;
  6592  0626  1515               	bsf	21,2	;volatile
  6593  0627                     l3792:
  6594                           
  6595                           ;mcc_generated_files/memory.c: 114:     PMCON1bits.LWLO = 1;
  6596  0627  1695               	bsf	21,5	;volatile
  6597  0628                     l3794:
  6598                           
  6599                           ;mcc_generated_files/memory.c: 116:     for (i=0; i<32; i++)
  6600  0628  0020               	movlb	0	; select bank0
  6601  0629  01A9               	clrf	FLASH_WriteBlock@i
  6602  062A                     l3800:
  6603                           
  6604                           ;mcc_generated_files/memory.c: 117:     {;mcc_generated_files/memory.c: 119:         PMA
      +                          DRL = (writeAddr & 0xFF);
  6605  062A  0820               	movf	FLASH_WriteBlock@writeAddr,w
  6606  062B  0023               	movlb	3	; select bank3
  6607  062C  0091               	movwf	17	;volatile
  6608  062D                     l3802:
  6609                           
  6610                           ;mcc_generated_files/memory.c: 121:         PMADRH = ((writeAddr & 0xFF00) >> 8);
  6611  062D  0020               	movlb	0	; select bank0
  6612  062E  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
  6613  062F  0023               	movlb	3	; select bank3
  6614  0630  0092               	movwf	18	;volatile
  6615  0631                     l3804:
  6616                           
  6617                           ;mcc_generated_files/memory.c: 124:         PMDATL = flashWordArray[i];
  6618  0631  0020               	movlb	0	; select bank0
  6619  0632  3529               	lslf	FLASH_WriteBlock@i,w
  6620  0633  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
  6621  0634  00A3               	movwf	??_FLASH_WriteBlock
  6622  0635  0823               	movf	??_FLASH_WriteBlock,w
  6623  0636  0086               	movwf	6
  6624  0637  0187               	clrf	7
  6625  0638  0801               	movf	1,w
  6626  0639  0023               	movlb	3	; select bank3
  6627  063A  0093               	movwf	19	;volatile
  6628  063B                     l3806:
  6629                           
  6630                           ;mcc_generated_files/memory.c: 125:         PMDATH = ((flashWordArray[i] & 0xFF00) >> 8)
      +                          ;
  6631  063B  0020               	movlb	0	; select bank0
  6632  063C  3529               	lslf	FLASH_WriteBlock@i,w
  6633  063D  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
  6634  063E  00A3               	movwf	??_FLASH_WriteBlock
  6635  063F  0823               	movf	??_FLASH_WriteBlock,w
  6636  0640  0086               	movwf	6
  6637  0641  0187               	clrf	7
  6638  0642  3F40               	moviw [0]fsr1
  6639  0643  00A4               	movwf	??_FLASH_WriteBlock+1
  6640  0644  3F41               	moviw [1]fsr1
  6641  0645  00A5               	movwf	??_FLASH_WriteBlock+2
  6642  0646  0825               	movf	??_FLASH_WriteBlock+2,w
  6643  0647  0023               	movlb	3	; select bank3
  6644  0648  0094               	movwf	20	;volatile
  6645  0649                     l3808:
  6646                           
  6647                           ;mcc_generated_files/memory.c: 127:         if(i == (32 -1))
  6648  0649  301F               	movlw	31
  6649  064A  0020               	movlb	0	; select bank0
  6650  064B  0629               	xorwf	FLASH_WriteBlock@i,w
  6651  064C  1D03               	btfss	3,2
  6652  064D  2E4F               	goto	u2321
  6653  064E  2E50               	goto	u2320
  6654  064F                     u2321:
  6655  064F  2E52               	goto	l3812
  6656  0650                     u2320:
  6657  0650                     l3810:
  6658                           
  6659                           ;mcc_generated_files/memory.c: 128:         {;mcc_generated_files/memory.c: 130:        
      +                               PMCON1bits.LWLO = 0;
  6660  0650  0023               	movlb	3	; select bank3
  6661  0651  1295               	bcf	21,5	;volatile
  6662  0652                     l3812:
  6663                           
  6664                           ;mcc_generated_files/memory.c: 133:         PMCON2 = 0x55;
  6665  0652  3055               	movlw	85
  6666  0653  0023               	movlb	3	; select bank3
  6667  0654  0096               	movwf	22	;volsfr
  6668                           
  6669                           ;mcc_generated_files/memory.c: 134:         PMCON2 = 0xAA;
  6670  0655  30AA               	movlw	170
  6671  0656  0096               	movwf	22	;volsfr
  6672  0657                     l3814:
  6673                           
  6674                           ;mcc_generated_files/memory.c: 135:         PMCON1bits.WR = 1;
  6675  0657  1495               	bsf	21,1	;volatile
  6676  0658                     l3816:
  6677                           
  6678                           ;mcc_generated_files/memory.c: 136:         __nop();
  6679  0658  0000               	nop
  6680  0659                     l3818:
  6681                           
  6682                           ;mcc_generated_files/memory.c: 137:         __nop();
  6683  0659  0000               	nop
  6684                           
  6685                           ;mcc_generated_files/memory.c: 139:  writeAddr++;
  6686  065A  3001               	movlw	1
  6687  065B  0020               	movlb	0	; select bank0
  6688  065C  07A0               	addwf	FLASH_WriteBlock@writeAddr,f
  6689  065D  3000               	movlw	0
  6690  065E  3DA1               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  6691  065F                     l3820:
  6692                           
  6693                           ;mcc_generated_files/memory.c: 140:     }
  6694  065F  3001               	movlw	1
  6695  0660  00A3               	movwf	??_FLASH_WriteBlock
  6696  0661  0823               	movf	??_FLASH_WriteBlock,w
  6697  0662  07A9               	addwf	FLASH_WriteBlock@i,f
  6698  0663                     l3822:
  6699  0663  3020               	movlw	32
  6700  0664  0229               	subwf	FLASH_WriteBlock@i,w
  6701  0665  1C03               	skipc
  6702  0666  2E68               	goto	u2331
  6703  0667  2E69               	goto	u2330
  6704  0668                     u2331:
  6705  0668  2E2A               	goto	l3800
  6706  0669                     u2330:
  6707  0669                     l474:
  6708                           
  6709                           ;mcc_generated_files/memory.c: 142:     PMCON1bits.WREN = 0;
  6710  0669  0023               	movlb	3	; select bank3
  6711  066A  1115               	bcf	21,2	;volatile
  6712  066B                     l3824:
  6713                           
  6714                           ;mcc_generated_files/memory.c: 143:     INTCONbits.GIE = GIEBitValue;
  6715  066B  0020               	movlb	0	; select bank0
  6716  066C  0C28               	rrf	FLASH_WriteBlock@GIEBitValue,w
  6717  066D  1C03               	skipc
  6718  066E  138B               	bcf	11,7	;volatile
  6719  066F  1803               	skipnc
  6720  0670  178B               	bsf	11,7	;volatile
  6721  0671                     l472:
  6722  0671  0008               	return
  6723  0672                     __end_of_FLASH_WriteBlock:
  6724                           
  6725                           	psect	text6
  6726  0C5D                     __ptext6:	
  6727 ;; *************** function _FLASH_EraseBlock *****************
  6728 ;; Defined at:
  6729 ;;		line 148 in file "mcc_generated_files/memory.c"
  6730 ;; Parameters:    Size  Location     Type
  6731 ;;  startAddr       2    3[COMMON] unsigned short 
  6732 ;; Auto vars:     Size  Location     Type
  6733 ;;  GIEBitValue     1    5[COMMON] unsigned char 
  6734 ;; Return value:  Size  Location     Type
  6735 ;;                  1    wreg      void 
  6736 ;; Registers used:
  6737 ;;		wreg, status,2, status,0
  6738 ;; Tracked objects:
  6739 ;;		On entry : 0/0
  6740 ;;		On exit  : 0/0
  6741 ;;		Unchanged: 0/0
  6742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6743 ;;      Params:         2       0       0       0       0       0       0       0
  6744 ;;      Locals:         1       0       0       0       0       0       0       0
  6745 ;;      Temps:          0       0       0       0       0       0       0       0
  6746 ;;      Totals:         3       0       0       0       0       0       0       0
  6747 ;;Total ram usage:        3 bytes
  6748 ;; Hardware stack levels used: 1
  6749 ;; Hardware stack levels required when called: 4
  6750 ;; This function calls:
  6751 ;;		Nothing
  6752 ;; This function is called by:
  6753 ;;		_FLASH_WriteBlock
  6754 ;; This function uses a non-reentrant model
  6755 ;;
  6756                           
  6757                           
  6758                           ;psect for function _FLASH_EraseBlock
  6759  0C5D                     _FLASH_EraseBlock:
  6760  0C5D                     l3740:	
  6761                           ;incstack = 0
  6762                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  6763                           
  6764                           
  6765                           ;mcc_generated_files/memory.c: 148: void FLASH_EraseBlock(uint16_t startAddr);mcc_genera
      +                          ted_files/memory.c: 149: {;mcc_generated_files/memory.c: 150:     uint8_t GIEBitValue = 
      +                          INTCONbits.GIE;
  6766  0C5D  3000               	movlw	0
  6767  0C5E  1B8B               	btfsc	11,7	;volatile
  6768  0C5F  3001               	movlw	1
  6769  0C60  00F5               	movwf	FLASH_EraseBlock@GIEBitValue
  6770  0C61                     l3742:
  6771                           
  6772                           ;mcc_generated_files/memory.c: 153:     INTCONbits.GIE = 0;
  6773  0C61  138B               	bcf	11,7	;volatile
  6774  0C62                     l3744:
  6775                           
  6776                           ;mcc_generated_files/memory.c: 155:     PMADRL = (startAddr & 0xFF);
  6777  0C62  0873               	movf	FLASH_EraseBlock@startAddr,w
  6778  0C63  0023               	movlb	3	; select bank3
  6779  0C64  0091               	movwf	17	;volatile
  6780  0C65                     l3746:
  6781                           
  6782                           ;mcc_generated_files/memory.c: 157:     PMADRH = ((startAddr & 0xFF00) >> 8);
  6783  0C65  0874               	movf	FLASH_EraseBlock@startAddr+1,w
  6784  0C66  0092               	movwf	18	;volatile
  6785  0C67                     l3748:
  6786                           
  6787                           ;mcc_generated_files/memory.c: 160:     PMCON1bits.CFGS = 0;
  6788  0C67  1315               	bcf	21,6	;volatile
  6789  0C68                     l3750:
  6790                           
  6791                           ;mcc_generated_files/memory.c: 161:     PMCON1bits.FREE = 1;
  6792  0C68  1615               	bsf	21,4	;volatile
  6793  0C69                     l3752:
  6794                           
  6795                           ;mcc_generated_files/memory.c: 162:     PMCON1bits.WREN = 1;
  6796  0C69  1515               	bsf	21,2	;volatile
  6797                           
  6798                           ;mcc_generated_files/memory.c: 165:     PMCON2 = 0x55;
  6799  0C6A  3055               	movlw	85
  6800  0C6B  0096               	movwf	22	;volsfr
  6801                           
  6802                           ;mcc_generated_files/memory.c: 166:     PMCON2 = 0xAA;
  6803  0C6C  30AA               	movlw	170
  6804  0C6D  0096               	movwf	22	;volsfr
  6805  0C6E                     l3754:
  6806                           
  6807                           ;mcc_generated_files/memory.c: 167:     PMCON1bits.WR = 1;
  6808  0C6E  1495               	bsf	21,1	;volatile
  6809  0C6F                     l3756:
  6810                           
  6811                           ;mcc_generated_files/memory.c: 168:     __nop();
  6812  0C6F  0000               	nop
  6813  0C70                     l3758:
  6814                           
  6815                           ;mcc_generated_files/memory.c: 169:     __nop();
  6816  0C70  0000               	nop
  6817  0C71                     l3760:
  6818                           
  6819                           ;mcc_generated_files/memory.c: 171:     PMCON1bits.WREN = 0;
  6820  0C71  0023               	movlb	3	; select bank3
  6821  0C72  1115               	bcf	21,2	;volatile
  6822  0C73                     l3762:
  6823                           
  6824                           ;mcc_generated_files/memory.c: 172:     INTCONbits.GIE = GIEBitValue;
  6825  0C73  0C75               	rrf	FLASH_EraseBlock@GIEBitValue,w
  6826  0C74  1C03               	skipc
  6827  0C75  138B               	bcf	11,7	;volatile
  6828  0C76  1803               	skipnc
  6829  0C77  178B               	bsf	11,7	;volatile
  6830  0C78                     l478:
  6831  0C78  0008               	return
  6832  0C79                     __end_of_FLASH_EraseBlock:
  6833                           
  6834                           	psect	text7
  6835  06DE                     __ptext7:	
  6836 ;; *************** function _setFrequency *****************
  6837 ;; Defined at:
  6838 ;;		line 342 in file "main.c"
  6839 ;; Parameters:    Size  Location     Type
  6840 ;;  frequency_hz    2   23[BANK0 ] short 
  6841 ;; Auto vars:     Size  Location     Type
  6842 ;;  PR4_val         2   26[BANK0 ] short 
  6843 ;; Return value:  Size  Location     Type
  6844 ;;                  1    wreg      void 
  6845 ;; Registers used:
  6846 ;;		wreg, status,2, status,0, pclath, cstack
  6847 ;; Tracked objects:
  6848 ;;		On entry : 0/0
  6849 ;;		On exit  : 0/0
  6850 ;;		Unchanged: 0/0
  6851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6852 ;;      Params:         0       2       0       0       0       0       0       0
  6853 ;;      Locals:         0       2       0       0       0       0       0       0
  6854 ;;      Temps:          0       1       0       0       0       0       0       0
  6855 ;;      Totals:         0       5       0       0       0       0       0       0
  6856 ;;Total ram usage:        5 bytes
  6857 ;; Hardware stack levels used: 1
  6858 ;; Hardware stack levels required when called: 5
  6859 ;; This function calls:
  6860 ;;		_TMR4_LoadPeriodRegister
  6861 ;;		___aldiv
  6862 ;;		___lmul
  6863 ;; This function is called by:
  6864 ;;		_process_remote_command
  6865 ;;		_main
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           
  6870                           ;psect for function _setFrequency
  6871  06DE                     _setFrequency:
  6872  06DE                     l4052:	
  6873                           ;incstack = 0
  6874                           ; Regs used in _setFrequency: [wreg+status,2+status,0+pclath+cstack]
  6875                           
  6876                           
  6877                           ;main.c: 342: void setFrequency(int16_t frequency_hz);main.c: 343: {;main.c: 358:   int1
      +                          6_t PR4_val = 1000000L / (96L * frequency_hz);
  6878  06DE  0020               	movlb	0	; select bank0
  6879  06DF  0837               	movf	setFrequency@frequency_hz,w
  6880  06E0  00A0               	movwf	___lmul@multiplier
  6881  06E1  0838               	movf	setFrequency@frequency_hz+1,w
  6882  06E2  00A1               	movwf	___lmul@multiplier+1
  6883  06E3  0D89               	rlf	9,f
  6884  06E4  3B89               	subwfb	9,f
  6885  06E5  0989               	comf	9,f
  6886  06E6  00A2               	movwf	___lmul@multiplier+2
  6887  06E7  00A3               	movwf	___lmul@multiplier+3
  6888  06E8  3000               	movlw	0
  6889  06E9  00A7               	movwf	___lmul@multiplicand+3
  6890  06EA  3000               	movlw	0
  6891  06EB  00A6               	movwf	___lmul@multiplicand+2
  6892  06EC  3000               	movlw	0
  6893  06ED  00A5               	movwf	___lmul@multiplicand+1
  6894  06EE  3060               	movlw	96
  6895  06EF  00A4               	movwf	___lmul@multiplicand
  6896  06F0  318E  268B  3186   	fcall	___lmul
  6897  06F3  0020               	movlb	0	; select bank0
  6898  06F4  0823               	movf	?___lmul+3,w
  6899  06F5  00AB               	movwf	___aldiv@divisor+3
  6900  06F6  0822               	movf	?___lmul+2,w
  6901  06F7  00AA               	movwf	___aldiv@divisor+2
  6902  06F8  0821               	movf	?___lmul+1,w
  6903  06F9  00A9               	movwf	___aldiv@divisor+1
  6904  06FA  0820               	movf	?___lmul,w
  6905  06FB  00A8               	movwf	___aldiv@divisor
  6906  06FC  3000               	movlw	0
  6907  06FD  00AF               	movwf	___aldiv@dividend+3
  6908  06FE  300F               	movlw	15
  6909  06FF  00AE               	movwf	___aldiv@dividend+2
  6910  0700  3042               	movlw	66
  6911  0701  00AD               	movwf	___aldiv@dividend+1
  6912  0702  3040               	movlw	64
  6913  0703  00AC               	movwf	___aldiv@dividend
  6914  0704  3184  24F8  3186   	fcall	___aldiv
  6915  0707  0020               	movlb	0	; select bank0
  6916  0708  0829               	movf	?___aldiv+1,w
  6917  0709  00BB               	movwf	setFrequency@PR4_val+1
  6918  070A  0828               	movf	?___aldiv,w
  6919  070B  00BA               	movwf	setFrequency@PR4_val
  6920  070C                     l4054:
  6921                           
  6922                           ;main.c: 359:   if (PR4_val > 255){
  6923  070C  083B               	movf	setFrequency@PR4_val+1,w
  6924  070D  3A80               	xorlw	128
  6925  070E  00B9               	movwf	??_setFrequency
  6926  070F  3081               	movlw	129
  6927  0710  0239               	subwf	??_setFrequency,w
  6928  0711  1D03               	skipz
  6929  0712  2F15               	goto	u2655
  6930  0713  3000               	movlw	0
  6931  0714  023A               	subwf	setFrequency@PR4_val,w
  6932  0715                     u2655:
  6933  0715  1C03               	skipc
  6934  0716  2F18               	goto	u2651
  6935  0717  2F19               	goto	u2650
  6936  0718                     u2651:
  6937  0718  2F1E               	goto	l696
  6938  0719                     u2650:
  6939  0719                     l4056:
  6940                           
  6941                           ;main.c: 360:     PR4_val = 255;
  6942  0719  30FF               	movlw	255
  6943  071A  0020               	movlb	0	; select bank0
  6944  071B  00BA               	movwf	setFrequency@PR4_val
  6945  071C  3000               	movlw	0
  6946  071D  00BB               	movwf	setFrequency@PR4_val+1
  6947  071E                     l696:	
  6948                           ;main.c: 361:   }
  6949                           
  6950                           
  6951                           ;main.c: 362:   if (PR4_val < 68){
  6952  071E  0020               	movlb	0	; select bank0
  6953  071F  083B               	movf	setFrequency@PR4_val+1,w
  6954  0720  3A80               	xorlw	128
  6955  0721  00B9               	movwf	??_setFrequency
  6956  0722  3080               	movlw	128
  6957  0723  0239               	subwf	??_setFrequency,w
  6958  0724  1D03               	skipz
  6959  0725  2F28               	goto	u2665
  6960  0726  3044               	movlw	68
  6961  0727  023A               	subwf	setFrequency@PR4_val,w
  6962  0728                     u2665:
  6963  0728  1803               	skipnc
  6964  0729  2F2B               	goto	u2661
  6965  072A  2F2C               	goto	u2660
  6966  072B                     u2661:
  6967  072B  2F31               	goto	l4060
  6968  072C                     u2660:
  6969  072C                     l4058:
  6970                           
  6971                           ;main.c: 363:     PR4_val = 68;
  6972  072C  3044               	movlw	68
  6973  072D  0020               	movlb	0	; select bank0
  6974  072E  00BA               	movwf	setFrequency@PR4_val
  6975  072F  3000               	movlw	0
  6976  0730  00BB               	movwf	setFrequency@PR4_val+1
  6977  0731                     l4060:
  6978                           
  6979                           ;main.c: 370:   (INTCONbits.GIE = 0);
  6980  0731  138B               	bcf	11,7	;volatile
  6981  0732                     l4062:
  6982                           
  6983                           ;main.c: 371:   TMR4_LoadPeriodRegister((uint16_t)PR4_val);
  6984  0732  0020               	movlb	0	; select bank0
  6985  0733  083A               	movf	setFrequency@PR4_val,w
  6986  0734  318B  2304  3186   	fcall	_TMR4_LoadPeriodRegister
  6987  0737                     l4064:
  6988                           
  6989                           ;main.c: 372:   if (0 == frequency_hz){
  6990  0737  0020               	movlb	0	; select bank0
  6991  0738  0837               	movf	setFrequency@frequency_hz,w
  6992  0739  0438               	iorwf	setFrequency@frequency_hz+1,w
  6993  073A  1D03               	btfss	3,2
  6994  073B  2F3D               	goto	u2671
  6995  073C  2F3E               	goto	u2670
  6996  073D                     u2671:
  6997  073D  2F41               	goto	l4068
  6998  073E                     u2670:
  6999  073E                     l4066:
  7000                           
  7001                           ;main.c: 373:     dc_frequency_flag = 1;
  7002  073E  01FA               	clrf	_dc_frequency_flag
  7003  073F  0AFA               	incf	_dc_frequency_flag,f
  7004                           
  7005                           ;main.c: 374:   } else {
  7006  0740  2F42               	goto	l4070
  7007  0741                     l4068:
  7008                           
  7009                           ;main.c: 375:     dc_frequency_flag = 0;
  7010  0741  01FA               	clrf	_dc_frequency_flag
  7011  0742                     l4070:
  7012                           
  7013                           ;main.c: 377:   (INTCONbits.GIE = 1);
  7014  0742  178B               	bsf	11,7	;volatile
  7015  0743                     l700:
  7016  0743  0008               	return
  7017  0744                     __end_of_setFrequency:
  7018                           
  7019                           	psect	text8
  7020  0B04                     __ptext8:	
  7021 ;; *************** function _TMR4_LoadPeriodRegister *****************
  7022 ;; Defined at:
  7023 ;;		line 115 in file "mcc_generated_files/tmr4.c"
  7024 ;; Parameters:    Size  Location     Type
  7025 ;;  periodVal       1    wreg     unsigned char 
  7026 ;; Auto vars:     Size  Location     Type
  7027 ;;  periodVal       1    3[COMMON] unsigned char 
  7028 ;; Return value:  Size  Location     Type
  7029 ;;                  1    wreg      void 
  7030 ;; Registers used:
  7031 ;;		wreg
  7032 ;; Tracked objects:
  7033 ;;		On entry : 0/0
  7034 ;;		On exit  : 0/0
  7035 ;;		Unchanged: 0/0
  7036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7037 ;;      Params:         0       0       0       0       0       0       0       0
  7038 ;;      Locals:         1       0       0       0       0       0       0       0
  7039 ;;      Temps:          0       0       0       0       0       0       0       0
  7040 ;;      Totals:         1       0       0       0       0       0       0       0
  7041 ;;Total ram usage:        1 bytes
  7042 ;; Hardware stack levels used: 1
  7043 ;; Hardware stack levels required when called: 4
  7044 ;; This function calls:
  7045 ;;		Nothing
  7046 ;; This function is called by:
  7047 ;;		_setFrequency
  7048 ;; This function uses a non-reentrant model
  7049 ;;
  7050                           
  7051                           
  7052                           ;psect for function _TMR4_LoadPeriodRegister
  7053  0B04                     _TMR4_LoadPeriodRegister:
  7054                           
  7055                           ;incstack = 0
  7056                           ; Regs used in _TMR4_LoadPeriodRegister: [wreg]
  7057                           ;TMR4_LoadPeriodRegister@periodVal stored from wreg
  7058  0B04  00F3               	movwf	TMR4_LoadPeriodRegister@periodVal
  7059  0B05                     l3776:
  7060                           
  7061                           ;mcc_generated_files/tmr4.c: 115: void TMR4_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr4.c: 116: {;mcc_generated_files/tmr4.c: 117:    PR4 = periodVal;
  7062  0B05  0873               	movf	TMR4_LoadPeriodRegister@periodVal,w
  7063  0B06  0028               	movlb	8	; select bank8
  7064  0B07  0096               	movwf	22	;volatile
  7065  0B08                     l417:
  7066  0B08  0008               	return
  7067  0B09                     __end_of_TMR4_LoadPeriodRegister:
  7068                           
  7069                           	psect	text9
  7070  03BD                     __ptext9:	
  7071 ;; *************** function _setCurrent *****************
  7072 ;; Defined at:
  7073 ;;		line 331 in file "main.c"
  7074 ;; Parameters:    Size  Location     Type
  7075 ;;  microamps       2   25[BANK0 ] int 
  7076 ;;  Vdd_mv          2   27[BANK0 ] int 
  7077 ;; Auto vars:     Size  Location     Type
  7078 ;;  DACValue        2   39[BANK0 ] int 
  7079 ;;  Vdac_mv         2   37[BANK0 ] int 
  7080 ;; Return value:  Size  Location     Type
  7081 ;;                  1    wreg      void 
  7082 ;; Registers used:
  7083 ;;		wreg, status,2, status,0, pclath, cstack
  7084 ;; Tracked objects:
  7085 ;;		On entry : 0/0
  7086 ;;		On exit  : 0/0
  7087 ;;		Unchanged: 0/0
  7088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7089 ;;      Params:         0       4       0       0       0       0       0       0
  7090 ;;      Locals:         0       4       0       0       0       0       0       0
  7091 ;;      Temps:          0       8       0       0       0       0       0       0
  7092 ;;      Totals:         0      16       0       0       0       0       0       0
  7093 ;;Total ram usage:       16 bytes
  7094 ;; Hardware stack levels used: 1
  7095 ;; Hardware stack levels required when called: 5
  7096 ;; This function calls:
  7097 ;;		___aldiv
  7098 ;;		___awdiv
  7099 ;;		___lmul
  7100 ;; This function is called by:
  7101 ;;		_process_remote_command
  7102 ;;		_main
  7103 ;; This function uses a non-reentrant model
  7104 ;;
  7105                           
  7106                           
  7107                           ;psect for function _setCurrent
  7108  03BD                     _setCurrent:
  7109  03BD                     l4040:	
  7110                           ;incstack = 0
  7111                           ; Regs used in _setCurrent: [wreg+status,2+status,0+pclath+cstack]
  7112                           
  7113                           
  7114                           ;main.c: 331: void setCurrent(int microamps, int Vdd_mv);main.c: 332: {;main.c: 333:   i
      +                          nt Vdac_mv = Vdd_mv - ((int32_t)(4700) * microamps + 500) / 1000;
  7115  03BD  3000               	movlw	0
  7116  03BE  0020               	movlb	0	; select bank0
  7117  03BF  00AB               	movwf	___aldiv@divisor+3
  7118  03C0  3000               	movlw	0
  7119  03C1  00AA               	movwf	___aldiv@divisor+2
  7120  03C2  3003               	movlw	3
  7121  03C3  00A9               	movwf	___aldiv@divisor+1
  7122  03C4  30E8               	movlw	232
  7123  03C5  00A8               	movwf	___aldiv@divisor
  7124  03C6  30F4               	movlw	244
  7125  03C7  00BD               	movwf	??_setCurrent
  7126  03C8  3001               	movlw	1
  7127  03C9  00BE               	movwf	??_setCurrent+1
  7128  03CA  3000               	movlw	0
  7129  03CB  00BF               	movwf	??_setCurrent+2
  7130  03CC  3000               	movlw	0
  7131  03CD  00C0               	movwf	??_setCurrent+3
  7132  03CE  0839               	movf	setCurrent@microamps,w
  7133  03CF  00A0               	movwf	___lmul@multiplier
  7134  03D0  083A               	movf	setCurrent@microamps+1,w
  7135  03D1  00A1               	movwf	___lmul@multiplier+1
  7136  03D2  0D89               	rlf	9,f
  7137  03D3  3B89               	subwfb	9,f
  7138  03D4  0989               	comf	9,f
  7139  03D5  00A2               	movwf	___lmul@multiplier+2
  7140  03D6  00A3               	movwf	___lmul@multiplier+3
  7141  03D7  3000               	movlw	0
  7142  03D8  00A7               	movwf	___lmul@multiplicand+3
  7143  03D9  3000               	movlw	0
  7144  03DA  00A6               	movwf	___lmul@multiplicand+2
  7145  03DB  3012               	movlw	18
  7146  03DC  00A5               	movwf	___lmul@multiplicand+1
  7147  03DD  305C               	movlw	92
  7148  03DE  00A4               	movwf	___lmul@multiplicand
  7149  03DF  318E  268B  3183   	fcall	___lmul
  7150  03E2  0020               	movlb	0	; select bank0
  7151  03E3  0820               	movf	?___lmul,w
  7152  03E4  07BD               	addwf	??_setCurrent,f
  7153  03E5  0821               	movf	?___lmul+1,w
  7154  03E6  3DBE               	addwfc	??_setCurrent+1,f
  7155  03E7  0822               	movf	?___lmul+2,w
  7156  03E8  3DBF               	addwfc	??_setCurrent+2,f
  7157  03E9  0823               	movf	?___lmul+3,w
  7158  03EA  3DC0               	addwfc	??_setCurrent+3,f
  7159  03EB  0840               	movf	??_setCurrent+3,w
  7160  03EC  00AF               	movwf	___aldiv@dividend+3
  7161  03ED  083F               	movf	??_setCurrent+2,w
  7162  03EE  00AE               	movwf	___aldiv@dividend+2
  7163  03EF  083E               	movf	??_setCurrent+1,w
  7164  03F0  00AD               	movwf	___aldiv@dividend+1
  7165  03F1  083D               	movf	??_setCurrent,w
  7166  03F2  00AC               	movwf	___aldiv@dividend
  7167  03F3  3184  24F8  3183   	fcall	___aldiv
  7168  03F6  0020               	movlb	0	; select bank0
  7169  03F7  0828               	movf	?___aldiv,w
  7170  03F8  023B               	subwf	setCurrent@Vdd_mv,w
  7171  03F9  00C5               	movwf	setCurrent@Vdac_mv
  7172  03FA  0829               	movf	?___aldiv+1,w
  7173  03FB  3B3C               	subwfb	setCurrent@Vdd_mv+1,w
  7174  03FC  00C6               	movwf	setCurrent@Vdac_mv+1
  7175                           
  7176                           ;main.c: 334:   int DACValue = (256L * Vdac_mv + Vdd_mv/2) / Vdd_mv;
  7177  03FD  083B               	movf	setCurrent@Vdd_mv,w
  7178  03FE  00A8               	movwf	___aldiv@divisor
  7179  03FF  083C               	movf	setCurrent@Vdd_mv+1,w
  7180  0400  00A9               	movwf	___aldiv@divisor+1
  7181  0401  0D89               	rlf	9,f
  7182  0402  3B89               	subwfb	9,f
  7183  0403  0989               	comf	9,f
  7184  0404  00AA               	movwf	___aldiv@divisor+2
  7185  0405  00AB               	movwf	___aldiv@divisor+3
  7186  0406  3002               	movlw	2
  7187  0407  00F3               	movwf	___awdiv@divisor
  7188  0408  3000               	movlw	0
  7189  0409  00F4               	movwf	___awdiv@divisor+1
  7190  040A  083C               	movf	setCurrent@Vdd_mv+1,w
  7191  040B  00F6               	movwf	___awdiv@dividend+1
  7192  040C  083B               	movf	setCurrent@Vdd_mv,w
  7193  040D  00F5               	movwf	___awdiv@dividend
  7194  040E  3187  2744  3183   	fcall	___awdiv
  7195  0411  0873               	movf	?___awdiv,w
  7196  0412  0020               	movlb	0	; select bank0
  7197  0413  00BD               	movwf	??_setCurrent
  7198  0414  0874               	movf	?___awdiv+1,w
  7199  0415  00BE               	movwf	??_setCurrent+1
  7200  0416  3000               	movlw	0
  7201  0417  1BBE               	btfsc	??_setCurrent+1,7
  7202  0418  30FF               	movlw	255
  7203  0419  00BF               	movwf	??_setCurrent+2
  7204  041A  00C0               	movwf	??_setCurrent+3
  7205  041B  0845               	movf	setCurrent@Vdac_mv,w
  7206  041C  00C1               	movwf	??_setCurrent+4
  7207  041D  0846               	movf	setCurrent@Vdac_mv+1,w
  7208  041E  00C2               	movwf	??_setCurrent+5
  7209  041F  3000               	movlw	0
  7210  0420  1BC2               	btfsc	??_setCurrent+5,7
  7211  0421  30FF               	movlw	255
  7212  0422  00C3               	movwf	??_setCurrent+6
  7213  0423  00C4               	movwf	??_setCurrent+7
  7214  0424  3008               	movlw	8
  7215  0425                     u2625:
  7216  0425  35C1               	lslf	??_setCurrent+4,f
  7217  0426  0DC2               	rlf	??_setCurrent+5,f
  7218  0427  0DC3               	rlf	??_setCurrent+6,f
  7219  0428  0DC4               	rlf	??_setCurrent+7,f
  7220  0429                     u2620:
  7221  0429  0B89               	decfsz	9,f
  7222  042A  2C25               	goto	u2625
  7223  042B  0841               	movf	??_setCurrent+4,w
  7224  042C  07BD               	addwf	??_setCurrent,f
  7225  042D  0842               	movf	??_setCurrent+5,w
  7226  042E  3DBE               	addwfc	??_setCurrent+1,f
  7227  042F  0843               	movf	??_setCurrent+6,w
  7228  0430  3DBF               	addwfc	??_setCurrent+2,f
  7229  0431  0844               	movf	??_setCurrent+7,w
  7230  0432  3DC0               	addwfc	??_setCurrent+3,f
  7231  0433  0840               	movf	??_setCurrent+3,w
  7232  0434  00AF               	movwf	___aldiv@dividend+3
  7233  0435  083F               	movf	??_setCurrent+2,w
  7234  0436  00AE               	movwf	___aldiv@dividend+2
  7235  0437  083E               	movf	??_setCurrent+1,w
  7236  0438  00AD               	movwf	___aldiv@dividend+1
  7237  0439  083D               	movf	??_setCurrent,w
  7238  043A  00AC               	movwf	___aldiv@dividend
  7239  043B  3184  24F8  3183   	fcall	___aldiv
  7240  043E  0020               	movlb	0	; select bank0
  7241  043F  0829               	movf	?___aldiv+1,w
  7242  0440  00C8               	movwf	setCurrent@DACValue+1
  7243  0441  0828               	movf	?___aldiv,w
  7244  0442  00C7               	movwf	setCurrent@DACValue
  7245  0443                     l4042:
  7246                           
  7247                           ;main.c: 335:   if(DACValue > 255){DACValue = 255;}
  7248  0443  0848               	movf	setCurrent@DACValue+1,w
  7249  0444  3A80               	xorlw	128
  7250  0445  00BD               	movwf	??_setCurrent
  7251  0446  3081               	movlw	129
  7252  0447  023D               	subwf	??_setCurrent,w
  7253  0448  1D03               	skipz
  7254  0449  2C4C               	goto	u2635
  7255  044A  3000               	movlw	0
  7256  044B  0247               	subwf	setCurrent@DACValue,w
  7257  044C                     u2635:
  7258  044C  1C03               	skipc
  7259  044D  2C4F               	goto	u2631
  7260  044E  2C50               	goto	u2630
  7261  044F                     u2631:
  7262  044F  2C55               	goto	l4046
  7263  0450                     u2630:
  7264  0450                     l4044:
  7265  0450  30FF               	movlw	255
  7266  0451  0020               	movlb	0	; select bank0
  7267  0452  00C7               	movwf	setCurrent@DACValue
  7268  0453  3000               	movlw	0
  7269  0454  00C8               	movwf	setCurrent@DACValue+1
  7270  0455                     l4046:
  7271                           
  7272                           ;main.c: 336:   if(DACValue < 0){DACValue = 0;}
  7273  0455  0020               	movlb	0	; select bank0
  7274  0456  1FC8               	btfss	setCurrent@DACValue+1,7
  7275  0457  2C59               	goto	u2641
  7276  0458  2C5A               	goto	u2640
  7277  0459                     u2641:
  7278  0459  2C5C               	goto	l4050
  7279  045A                     u2640:
  7280  045A                     l4048:
  7281  045A  01C7               	clrf	setCurrent@DACValue
  7282  045B  01C8               	clrf	setCurrent@DACValue+1
  7283  045C                     l4050:
  7284                           
  7285                           ;main.c: 337:   dac_value = (uint8_t)DACValue;
  7286  045C  0847               	movf	setCurrent@DACValue,w
  7287  045D  00BD               	movwf	??_setCurrent
  7288  045E  083D               	movf	??_setCurrent,w
  7289  045F  0021               	movlb	1	; select bank1
  7290  0460  00B1               	movwf	_dac_value^(0+128)
  7291  0461                     l693:
  7292  0461  0008               	return
  7293  0462                     __end_of_setCurrent:
  7294                           
  7295                           	psect	text10
  7296  0E8B                     __ptext10:	
  7297 ;; *************** function ___lmul *****************
  7298 ;; Defined at:
  7299 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul32.c"
  7300 ;; Parameters:    Size  Location     Type
  7301 ;;  multiplier      4    0[BANK0 ] unsigned long 
  7302 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  7303 ;; Auto vars:     Size  Location     Type
  7304 ;;  product         4    3[COMMON] unsigned long 
  7305 ;; Return value:  Size  Location     Type
  7306 ;;                  4    0[BANK0 ] unsigned long 
  7307 ;; Registers used:
  7308 ;;		wreg, status,2, status,0
  7309 ;; Tracked objects:
  7310 ;;		On entry : 0/0
  7311 ;;		On exit  : 0/0
  7312 ;;		Unchanged: 0/0
  7313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7314 ;;      Params:         0       8       0       0       0       0       0       0
  7315 ;;      Locals:         4       0       0       0       0       0       0       0
  7316 ;;      Temps:          0       0       0       0       0       0       0       0
  7317 ;;      Totals:         4       8       0       0       0       0       0       0
  7318 ;;Total ram usage:       12 bytes
  7319 ;; Hardware stack levels used: 1
  7320 ;; Hardware stack levels required when called: 4
  7321 ;; This function calls:
  7322 ;;		Nothing
  7323 ;; This function is called by:
  7324 ;;		_setCurrent
  7325 ;;		_setFrequency
  7326 ;; This function uses a non-reentrant model
  7327 ;;
  7328                           
  7329                           
  7330                           ;psect for function ___lmul
  7331  0E8B                     ___lmul:
  7332  0E8B                     l3846:	
  7333                           ;incstack = 0
  7334                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7335                           
  7336  0E8B  3000               	movlw	0
  7337  0E8C  00F6               	movwf	___lmul@product+3
  7338  0E8D  3000               	movlw	0
  7339  0E8E  00F5               	movwf	___lmul@product+2
  7340  0E8F  3000               	movlw	0
  7341  0E90  00F4               	movwf	___lmul@product+1
  7342  0E91  3000               	movlw	0
  7343  0E92  00F3               	movwf	___lmul@product
  7344  0E93                     l3848:
  7345  0E93  0020               	movlb	0	; select bank0
  7346  0E94  1C20               	btfss	___lmul@multiplier,0
  7347  0E95  2E97               	goto	u2351
  7348  0E96  2E98               	goto	u2350
  7349  0E97                     u2351:
  7350  0E97  2EA0               	goto	l3852
  7351  0E98                     u2350:
  7352  0E98                     l3850:
  7353  0E98  0824               	movf	___lmul@multiplicand,w
  7354  0E99  07F3               	addwf	___lmul@product,f
  7355  0E9A  0825               	movf	___lmul@multiplicand+1,w
  7356  0E9B  3DF4               	addwfc	___lmul@product+1,f
  7357  0E9C  0826               	movf	___lmul@multiplicand+2,w
  7358  0E9D  3DF5               	addwfc	___lmul@product+2,f
  7359  0E9E  0827               	movf	___lmul@multiplicand+3,w
  7360  0E9F  3DF6               	addwfc	___lmul@product+3,f
  7361  0EA0                     l3852:
  7362  0EA0  3001               	movlw	1
  7363  0EA1                     u2365:
  7364  0EA1  35A4               	lslf	___lmul@multiplicand,f
  7365  0EA2  0DA5               	rlf	___lmul@multiplicand+1,f
  7366  0EA3  0DA6               	rlf	___lmul@multiplicand+2,f
  7367  0EA4  0DA7               	rlf	___lmul@multiplicand+3,f
  7368  0EA5  0B89               	decfsz	9,f
  7369  0EA6  2EA1               	goto	u2365
  7370  0EA7                     l3854:
  7371  0EA7  3001               	movlw	1
  7372  0EA8                     u2375:
  7373  0EA8  36A3               	lsrf	___lmul@multiplier+3,f
  7374  0EA9  0CA2               	rrf	___lmul@multiplier+2,f
  7375  0EAA  0CA1               	rrf	___lmul@multiplier+1,f
  7376  0EAB  0CA0               	rrf	___lmul@multiplier,f
  7377  0EAC  0B89               	decfsz	9,f
  7378  0EAD  2EA8               	goto	u2375
  7379  0EAE  0823               	movf	___lmul@multiplier+3,w
  7380  0EAF  0422               	iorwf	___lmul@multiplier+2,w
  7381  0EB0  0421               	iorwf	___lmul@multiplier+1,w
  7382  0EB1  0420               	iorwf	___lmul@multiplier,w
  7383  0EB2  1D03               	skipz
  7384  0EB3  2EB5               	goto	u2381
  7385  0EB4  2EB6               	goto	u2380
  7386  0EB5                     u2381:
  7387  0EB5  2E93               	goto	l3848
  7388  0EB6                     u2380:
  7389  0EB6                     l3856:
  7390  0EB6  0876               	movf	___lmul@product+3,w
  7391  0EB7  00A3               	movwf	?___lmul+3
  7392  0EB8  0875               	movf	___lmul@product+2,w
  7393  0EB9  00A2               	movwf	?___lmul+2
  7394  0EBA  0874               	movf	___lmul@product+1,w
  7395  0EBB  00A1               	movwf	?___lmul+1
  7396  0EBC  0873               	movf	___lmul@product,w
  7397  0EBD  00A0               	movwf	?___lmul
  7398  0EBE                     l854:
  7399  0EBE  0008               	return
  7400  0EBF                     __end_of___lmul:
  7401                           
  7402                           	psect	text11
  7403  0744                     __ptext11:	
  7404 ;; *************** function ___awdiv *****************
  7405 ;; Defined at:
  7406 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
  7407 ;; Parameters:    Size  Location     Type
  7408 ;;  divisor         2    3[COMMON] int 
  7409 ;;  dividend        2    5[COMMON] int 
  7410 ;; Auto vars:     Size  Location     Type
  7411 ;;  quotient        2    2[BANK0 ] int 
  7412 ;;  sign            1    1[BANK0 ] unsigned char 
  7413 ;;  counter         1    0[BANK0 ] unsigned char 
  7414 ;; Return value:  Size  Location     Type
  7415 ;;                  2    3[COMMON] int 
  7416 ;; Registers used:
  7417 ;;		wreg, status,2, status,0
  7418 ;; Tracked objects:
  7419 ;;		On entry : 0/0
  7420 ;;		On exit  : 0/0
  7421 ;;		Unchanged: 0/0
  7422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7423 ;;      Params:         4       0       0       0       0       0       0       0
  7424 ;;      Locals:         0       4       0       0       0       0       0       0
  7425 ;;      Temps:          1       0       0       0       0       0       0       0
  7426 ;;      Totals:         5       4       0       0       0       0       0       0
  7427 ;;Total ram usage:        9 bytes
  7428 ;; Hardware stack levels used: 1
  7429 ;; Hardware stack levels required when called: 4
  7430 ;; This function calls:
  7431 ;;		Nothing
  7432 ;; This function is called by:
  7433 ;;		_setCurrent
  7434 ;; This function uses a non-reentrant model
  7435 ;;
  7436                           
  7437                           
  7438                           ;psect for function ___awdiv
  7439  0744                     ___awdiv:
  7440  0744                     l3900:	
  7441                           ;incstack = 0
  7442                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7443                           
  7444  0744  0020               	movlb	0	; select bank0
  7445  0745  01A1               	clrf	___awdiv@sign
  7446  0746                     l3902:
  7447  0746  1FF4               	btfss	___awdiv@divisor+1,7
  7448  0747  2F49               	goto	u2491
  7449  0748  2F4A               	goto	u2490
  7450  0749                     u2491:
  7451  0749  2F51               	goto	l3908
  7452  074A                     u2490:
  7453  074A                     l3904:
  7454  074A  09F3               	comf	___awdiv@divisor,f
  7455  074B  09F4               	comf	___awdiv@divisor+1,f
  7456  074C  0AF3               	incf	___awdiv@divisor,f
  7457  074D  1903               	skipnz
  7458  074E  0AF4               	incf	___awdiv@divisor+1,f
  7459  074F                     l3906:
  7460  074F  01A1               	clrf	___awdiv@sign
  7461  0750  0AA1               	incf	___awdiv@sign,f
  7462  0751                     l3908:
  7463  0751  1FF6               	btfss	___awdiv@dividend+1,7
  7464  0752  2F54               	goto	u2501
  7465  0753  2F55               	goto	u2500
  7466  0754                     u2501:
  7467  0754  2F5E               	goto	l3914
  7468  0755                     u2500:
  7469  0755                     l3910:
  7470  0755  09F5               	comf	___awdiv@dividend,f
  7471  0756  09F6               	comf	___awdiv@dividend+1,f
  7472  0757  0AF5               	incf	___awdiv@dividend,f
  7473  0758  1903               	skipnz
  7474  0759  0AF6               	incf	___awdiv@dividend+1,f
  7475  075A                     l3912:
  7476  075A  3001               	movlw	1
  7477  075B  00F7               	movwf	??___awdiv
  7478  075C  0877               	movf	??___awdiv,w
  7479  075D  06A1               	xorwf	___awdiv@sign,f
  7480  075E                     l3914:
  7481  075E  01A2               	clrf	___awdiv@quotient
  7482  075F  01A3               	clrf	___awdiv@quotient+1
  7483  0760                     l3916:
  7484  0760  0873               	movf	___awdiv@divisor,w
  7485  0761  0474               	iorwf	___awdiv@divisor+1,w
  7486  0762  1903               	btfsc	3,2
  7487  0763  2F65               	goto	u2511
  7488  0764  2F66               	goto	u2510
  7489  0765                     u2511:
  7490  0765  2F95               	goto	l3936
  7491  0766                     u2510:
  7492  0766                     l3918:
  7493  0766  01A0               	clrf	___awdiv@counter
  7494  0767  0AA0               	incf	___awdiv@counter,f
  7495  0768  2F72               	goto	l3924
  7496  0769                     l3920:
  7497  0769  3001               	movlw	1
  7498  076A                     u2525:
  7499  076A  35F3               	lslf	___awdiv@divisor,f
  7500  076B  0DF4               	rlf	___awdiv@divisor+1,f
  7501  076C  0B89               	decfsz	9,f
  7502  076D  2F6A               	goto	u2525
  7503  076E                     l3922:
  7504  076E  3001               	movlw	1
  7505  076F  00F7               	movwf	??___awdiv
  7506  0770  0877               	movf	??___awdiv,w
  7507  0771  07A0               	addwf	___awdiv@counter,f
  7508  0772                     l3924:
  7509  0772  1FF4               	btfss	___awdiv@divisor+1,7
  7510  0773  2F75               	goto	u2531
  7511  0774  2F76               	goto	u2530
  7512  0775                     u2531:
  7513  0775  2F69               	goto	l3920
  7514  0776                     u2530:
  7515  0776                     l3926:
  7516  0776  3001               	movlw	1
  7517  0777                     u2545:
  7518  0777  35A2               	lslf	___awdiv@quotient,f
  7519  0778  0DA3               	rlf	___awdiv@quotient+1,f
  7520  0779  0B89               	decfsz	9,f
  7521  077A  2F77               	goto	u2545
  7522  077B  0874               	movf	___awdiv@divisor+1,w
  7523  077C  0276               	subwf	___awdiv@dividend+1,w
  7524  077D  1D03               	skipz
  7525  077E  2F81               	goto	u2555
  7526  077F  0873               	movf	___awdiv@divisor,w
  7527  0780  0275               	subwf	___awdiv@dividend,w
  7528  0781                     u2555:
  7529  0781  1C03               	skipc
  7530  0782  2F84               	goto	u2551
  7531  0783  2F85               	goto	u2550
  7532  0784                     u2551:
  7533  0784  2F8A               	goto	l3932
  7534  0785                     u2550:
  7535  0785                     l3928:
  7536  0785  0873               	movf	___awdiv@divisor,w
  7537  0786  02F5               	subwf	___awdiv@dividend,f
  7538  0787  0874               	movf	___awdiv@divisor+1,w
  7539  0788  3BF6               	subwfb	___awdiv@dividend+1,f
  7540  0789                     l3930:
  7541  0789  1422               	bsf	___awdiv@quotient,0
  7542  078A                     l3932:
  7543  078A  3001               	movlw	1
  7544  078B                     u2565:
  7545  078B  36F4               	lsrf	___awdiv@divisor+1,f
  7546  078C  0CF3               	rrf	___awdiv@divisor,f
  7547  078D  0B89               	decfsz	9,f
  7548  078E  2F8B               	goto	u2565
  7549  078F                     l3934:
  7550  078F  3001               	movlw	1
  7551  0790  02A0               	subwf	___awdiv@counter,f
  7552  0791  1D03               	btfss	3,2
  7553  0792  2F94               	goto	u2571
  7554  0793  2F95               	goto	u2570
  7555  0794                     u2571:
  7556  0794  2F76               	goto	l3926
  7557  0795                     u2570:
  7558  0795                     l3936:
  7559  0795  0821               	movf	___awdiv@sign,w
  7560  0796  1903               	btfsc	3,2
  7561  0797  2F99               	goto	u2581
  7562  0798  2F9A               	goto	u2580
  7563  0799                     u2581:
  7564  0799  2F9F               	goto	l3940
  7565  079A                     u2580:
  7566  079A                     l3938:
  7567  079A  09A2               	comf	___awdiv@quotient,f
  7568  079B  09A3               	comf	___awdiv@quotient+1,f
  7569  079C  0AA2               	incf	___awdiv@quotient,f
  7570  079D  1903               	skipnz
  7571  079E  0AA3               	incf	___awdiv@quotient+1,f
  7572  079F                     l3940:
  7573  079F  0823               	movf	___awdiv@quotient+1,w
  7574  07A0  00F4               	movwf	?___awdiv+1
  7575  07A1  0822               	movf	___awdiv@quotient,w
  7576  07A2  00F3               	movwf	?___awdiv
  7577  07A3                     l993:
  7578  07A3  0008               	return
  7579  07A4                     __end_of___awdiv:
  7580                           
  7581                           	psect	text12
  7582  0F85                     __ptext12:	
  7583 ;; *************** function _selectSomething *****************
  7584 ;; Defined at:
  7585 ;;		line 263 in file "main.c"
  7586 ;; Parameters:    Size  Location     Type
  7587 ;;		None
  7588 ;; Auto vars:     Size  Location     Type
  7589 ;;		None
  7590 ;; Return value:  Size  Location     Type
  7591 ;;                  1    wreg      void 
  7592 ;; Registers used:
  7593 ;;		wreg, status,2, status,0, pclath, cstack
  7594 ;; Tracked objects:
  7595 ;;		On entry : 0/0
  7596 ;;		On exit  : 0/0
  7597 ;;		Unchanged: 0/0
  7598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7599 ;;      Params:         0       0       0       0       0       0       0       0
  7600 ;;      Locals:         0       0       0       0       0       0       0       0
  7601 ;;      Temps:          0       2       0       0       0       0       0       0
  7602 ;;      Totals:         0       2       0       0       0       0       0       0
  7603 ;;Total ram usage:        2 bytes
  7604 ;; Hardware stack levels used: 1
  7605 ;; Hardware stack levels required when called: 5
  7606 ;; This function calls:
  7607 ;;		_setLEDColor
  7608 ;; This function is called by:
  7609 ;;		_process_remote_command
  7610 ;; This function uses a non-reentrant model
  7611 ;;
  7612                           
  7613                           
  7614                           ;psect for function _selectSomething
  7615  0F85                     _selectSomething:
  7616  0F85                     l3978:	
  7617                           ;incstack = 0
  7618                           ; Regs used in _selectSomething: [wreg+status,2+status,0+pclath+cstack]
  7619                           
  7620                           
  7621                           ;main.c: 265:   setLEDColor(0, 180, 230);
  7622  0F85  30B4               	movlw	180
  7623  0F86  0020               	movlb	0	; select bank0
  7624  0F87  00A0               	movwf	??_selectSomething
  7625  0F88  0820               	movf	??_selectSomething,w
  7626  0F89  00F3               	movwf	setLEDColor@green
  7627  0F8A  30E6               	movlw	230
  7628  0F8B  00A1               	movwf	??_selectSomething+1
  7629  0F8C  0821               	movf	??_selectSomething+1,w
  7630  0F8D  00F4               	movwf	setLEDColor@blue
  7631  0F8E  3000               	movlw	0
  7632  0F8F  318B  23FD  318F   	fcall	_setLEDColor
  7633  0F92                     l3980:
  7634                           
  7635                           ;main.c: 266:   _delay((unsigned long)((500)*(4000000/4000.0)));
  7636  0F92  3003               	movlw	3
  7637  0F93  0020               	movlb	0	; select bank0
  7638  0F94  00A1               	movwf	??_selectSomething+1
  7639  0F95  308A               	movlw	138
  7640  0F96  00A0               	movwf	??_selectSomething
  7641  0F97  3055               	movlw	85
  7642  0F98                     u3037:
  7643  0F98  0B89               	decfsz	9,f
  7644  0F99  2F98               	goto	u3037
  7645  0F9A  0BA0               	decfsz	??_selectSomething,f
  7646  0F9B  2F98               	goto	u3037
  7647  0F9C  0BA1               	decfsz	??_selectSomething+1,f
  7648  0F9D  2F98               	goto	u3037
  7649  0F9E  3200               	nop2
  7650  0F9F                     l3982:
  7651                           
  7652                           ;main.c: 267:   setLEDColor(0, 0, 0);
  7653  0F9F  01F3               	clrf	setLEDColor@green
  7654  0FA0  01F4               	clrf	setLEDColor@blue
  7655  0FA1  3000               	movlw	0
  7656  0FA2  318B  23FD  318F   	fcall	_setLEDColor
  7657                           
  7658                           ;main.c: 268:   _delay((unsigned long)((500)*(4000000/4000.0)));
  7659  0FA5  3003               	movlw	3
  7660  0FA6  0020               	movlb	0	; select bank0
  7661  0FA7  00A1               	movwf	??_selectSomething+1
  7662  0FA8  308A               	movlw	138
  7663  0FA9  00A0               	movwf	??_selectSomething
  7664  0FAA  3055               	movlw	85
  7665  0FAB                     u3047:
  7666  0FAB  0B89               	decfsz	9,f
  7667  0FAC  2FAB               	goto	u3047
  7668  0FAD  0BA0               	decfsz	??_selectSomething,f
  7669  0FAE  2FAB               	goto	u3047
  7670  0FAF  0BA1               	decfsz	??_selectSomething+1,f
  7671  0FB0  2FAB               	goto	u3047
  7672  0FB1  3200               	nop2
  7673  0FB2                     l3984:
  7674                           
  7675                           ;main.c: 269:   setLEDColor(0, 180, 230);
  7676  0FB2  30B4               	movlw	180
  7677  0FB3  0020               	movlb	0	; select bank0
  7678  0FB4  00A0               	movwf	??_selectSomething
  7679  0FB5  0820               	movf	??_selectSomething,w
  7680  0FB6  00F3               	movwf	setLEDColor@green
  7681  0FB7  30E6               	movlw	230
  7682  0FB8  00A1               	movwf	??_selectSomething+1
  7683  0FB9  0821               	movf	??_selectSomething+1,w
  7684  0FBA  00F4               	movwf	setLEDColor@blue
  7685  0FBB  3000               	movlw	0
  7686  0FBC  318B  23FD  318F   	fcall	_setLEDColor
  7687  0FBF                     l3986:
  7688                           
  7689                           ;main.c: 270:   _delay((unsigned long)((500)*(4000000/4000.0)));
  7690  0FBF  3003               	movlw	3
  7691  0FC0  0020               	movlb	0	; select bank0
  7692  0FC1  00A1               	movwf	??_selectSomething+1
  7693  0FC2  308A               	movlw	138
  7694  0FC3  00A0               	movwf	??_selectSomething
  7695  0FC4  3055               	movlw	85
  7696  0FC5                     u3057:
  7697  0FC5  0B89               	decfsz	9,f
  7698  0FC6  2FC5               	goto	u3057
  7699  0FC7  0BA0               	decfsz	??_selectSomething,f
  7700  0FC8  2FC5               	goto	u3057
  7701  0FC9  0BA1               	decfsz	??_selectSomething+1,f
  7702  0FCA  2FC5               	goto	u3057
  7703  0FCB  3200               	nop2
  7704                           
  7705                           ;main.c: 271:   setLEDColor(0, 0, 0);
  7706  0FCC  01F3               	clrf	setLEDColor@green
  7707  0FCD  01F4               	clrf	setLEDColor@blue
  7708  0FCE  3000               	movlw	0
  7709  0FCF  318B  23FD  318F   	fcall	_setLEDColor
  7710  0FD2                     l3988:
  7711                           
  7712                           ;main.c: 272:   _delay((unsigned long)((500)*(4000000/4000.0)));
  7713  0FD2  3003               	movlw	3
  7714  0FD3  0020               	movlb	0	; select bank0
  7715  0FD4  00A1               	movwf	??_selectSomething+1
  7716  0FD5  308A               	movlw	138
  7717  0FD6  00A0               	movwf	??_selectSomething
  7718  0FD7  3055               	movlw	85
  7719  0FD8                     u3067:
  7720  0FD8  0B89               	decfsz	9,f
  7721  0FD9  2FD8               	goto	u3067
  7722  0FDA  0BA0               	decfsz	??_selectSomething,f
  7723  0FDB  2FD8               	goto	u3067
  7724  0FDC  0BA1               	decfsz	??_selectSomething+1,f
  7725  0FDD  2FD8               	goto	u3067
  7726  0FDE  3200               	nop2
  7727  0FDF                     l665:
  7728  0FDF  0008               	return
  7729  0FE0                     __end_of_selectSomething:
  7730                           
  7731                           	psect	text13
  7732  0D02                     __ptext13:	
  7733 ;; *************** function _selectIncrease *****************
  7734 ;; Defined at:
  7735 ;;		line 291 in file "main.c"
  7736 ;; Parameters:    Size  Location     Type
  7737 ;;		None
  7738 ;; Auto vars:     Size  Location     Type
  7739 ;;		None
  7740 ;; Return value:  Size  Location     Type
  7741 ;;                  1    wreg      void 
  7742 ;; Registers used:
  7743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7744 ;; Tracked objects:
  7745 ;;		On entry : 0/0
  7746 ;;		On exit  : 0/0
  7747 ;;		Unchanged: 0/0
  7748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7749 ;;      Params:         0       0       0       0       0       0       0       0
  7750 ;;      Locals:         0       0       0       0       0       0       0       0
  7751 ;;      Temps:          0       2       0       0       0       0       0       0
  7752 ;;      Totals:         0       2       0       0       0       0       0       0
  7753 ;;Total ram usage:        2 bytes
  7754 ;; Hardware stack levels used: 1
  7755 ;; Hardware stack levels required when called: 10
  7756 ;; This function calls:
  7757 ;;		_printf
  7758 ;;		_setLEDColor
  7759 ;; This function is called by:
  7760 ;;		_process_remote_command
  7761 ;; This function uses a non-reentrant model
  7762 ;;
  7763                           
  7764                           
  7765                           ;psect for function _selectIncrease
  7766  0D02                     _selectIncrease:
  7767  0D02                     l4008:	
  7768                           ;incstack = 0
  7769                           ; Regs used in _selectIncrease: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7770                           
  7771                           
  7772                           ;main.c: 292:   setLEDColor(0, 50, 255);
  7773  0D02  3032               	movlw	50
  7774  0D03  0020               	movlb	0	; select bank0
  7775  0D04  00B9               	movwf	??_selectIncrease
  7776  0D05  0839               	movf	??_selectIncrease,w
  7777  0D06  00F3               	movwf	setLEDColor@green
  7778  0D07  30FF               	movlw	255
  7779  0D08  00BA               	movwf	??_selectIncrease+1
  7780  0D09  083A               	movf	??_selectIncrease+1,w
  7781  0D0A  00F4               	movwf	setLEDColor@blue
  7782  0D0B  3000               	movlw	0
  7783  0D0C  318B  23FD  318D   	fcall	_setLEDColor
  7784  0D0F                     l4010:
  7785                           
  7786                           ;main.c: 293:   _delay((unsigned long)((100)*(4000000/4000.0)));
  7787  0D0F  3082               	movlw	130
  7788  0D10  0020               	movlb	0	; select bank0
  7789  0D11  00B9               	movwf	??_selectIncrease
  7790  0D12  30DD               	movlw	221
  7791  0D13                     u3077:
  7792  0D13  0B89               	decfsz	9,f
  7793  0D14  2D13               	goto	u3077
  7794  0D15  0BB9               	decfsz	??_selectIncrease,f
  7795  0D16  2D13               	goto	u3077
  7796  0D17  3200               	nop2
  7797  0D18                     l4012:
  7798                           
  7799                           ;main.c: 294:   setLEDColor(0, 0, 0);
  7800  0D18  01F3               	clrf	setLEDColor@green
  7801  0D19  01F4               	clrf	setLEDColor@blue
  7802  0D1A  3000               	movlw	0
  7803  0D1B  318B  23FD  318D   	fcall	_setLEDColor
  7804  0D1E                     l4014:
  7805                           
  7806                           ;main.c: 295:   printf("\n increase selected");
  7807  0D1E  3059               	movlw	low (STR_3| (0+32768))
  7808  0D1F  0020               	movlb	0	; select bank0
  7809  0D20  00B5               	movwf	printf@fmt
  7810  0D21  3088               	movlw	high (STR_3| (0+32768))
  7811  0D22  00B6               	movwf	printf@fmt+1
  7812  0D23  318B  23C4  318D   	fcall	_printf
  7813  0D26                     l674:
  7814  0D26  0008               	return
  7815  0D27                     __end_of_selectIncrease:
  7816                           
  7817                           	psect	text14
  7818  0D27                     __ptext14:	
  7819 ;; *************** function _selectFrequencyValue *****************
  7820 ;; Defined at:
  7821 ;;		line 319 in file "main.c"
  7822 ;; Parameters:    Size  Location     Type
  7823 ;;		None
  7824 ;; Auto vars:     Size  Location     Type
  7825 ;;		None
  7826 ;; Return value:  Size  Location     Type
  7827 ;;                  1    wreg      void 
  7828 ;; Registers used:
  7829 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7830 ;; Tracked objects:
  7831 ;;		On entry : 0/0
  7832 ;;		On exit  : 0/0
  7833 ;;		Unchanged: 0/0
  7834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7835 ;;      Params:         0       0       0       0       0       0       0       0
  7836 ;;      Locals:         0       0       0       0       0       0       0       0
  7837 ;;      Temps:          0       2       0       0       0       0       0       0
  7838 ;;      Totals:         0       2       0       0       0       0       0       0
  7839 ;;Total ram usage:        2 bytes
  7840 ;; Hardware stack levels used: 1
  7841 ;; Hardware stack levels required when called: 10
  7842 ;; This function calls:
  7843 ;;		_printf
  7844 ;;		_setLEDColor
  7845 ;; This function is called by:
  7846 ;;		_process_remote_command
  7847 ;; This function uses a non-reentrant model
  7848 ;;
  7849                           
  7850                           
  7851                           ;psect for function _selectFrequencyValue
  7852  0D27                     _selectFrequencyValue:
  7853  0D27                     l4032:	
  7854                           ;incstack = 0
  7855                           ; Regs used in _selectFrequencyValue: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7856                           
  7857                           
  7858                           ;main.c: 320:     setLEDColor(100, 0, 255);
  7859  0D27  01F3               	clrf	setLEDColor@green
  7860  0D28  30FF               	movlw	255
  7861  0D29  0020               	movlb	0	; select bank0
  7862  0D2A  00B9               	movwf	??_selectFrequencyValue
  7863  0D2B  0839               	movf	??_selectFrequencyValue,w
  7864  0D2C  00F4               	movwf	setLEDColor@blue
  7865  0D2D  3064               	movlw	100
  7866  0D2E  318B  23FD  318D   	fcall	_setLEDColor
  7867  0D31                     l4034:
  7868                           
  7869                           ;main.c: 321:     _delay((unsigned long)((500)*(4000000/4000.0)));
  7870  0D31  3003               	movlw	3
  7871  0D32  0020               	movlb	0	; select bank0
  7872  0D33  00BA               	movwf	??_selectFrequencyValue+1
  7873  0D34  308A               	movlw	138
  7874  0D35  00B9               	movwf	??_selectFrequencyValue
  7875  0D36  3055               	movlw	85
  7876  0D37                     u3087:
  7877  0D37  0B89               	decfsz	9,f
  7878  0D38  2D37               	goto	u3087
  7879  0D39  0BB9               	decfsz	??_selectFrequencyValue,f
  7880  0D3A  2D37               	goto	u3087
  7881  0D3B  0BBA               	decfsz	??_selectFrequencyValue+1,f
  7882  0D3C  2D37               	goto	u3087
  7883  0D3D  3200               	nop2
  7884  0D3E                     l4036:
  7885                           
  7886                           ;main.c: 322:     setLEDColor(0,0,0);
  7887  0D3E  01F3               	clrf	setLEDColor@green
  7888  0D3F  01F4               	clrf	setLEDColor@blue
  7889  0D40  3000               	movlw	0
  7890  0D41  318B  23FD  318D   	fcall	_setLEDColor
  7891  0D44                     l4038:
  7892                           
  7893                           ;main.c: 323:     printf("\n current value selected");
  7894  0D44  3000               	movlw	low (STR_6| (0+32768))
  7895  0D45  0020               	movlb	0	; select bank0
  7896  0D46  00B5               	movwf	printf@fmt
  7897  0D47  3088               	movlw	high (STR_6| (0+32768))
  7898  0D48  00B6               	movwf	printf@fmt+1
  7899  0D49  318B  23C4  318D   	fcall	_printf
  7900  0D4C                     l686:
  7901  0D4C  0008               	return
  7902  0D4D                     __end_of_selectFrequencyValue:
  7903                           
  7904                           	psect	text15
  7905  0D9E                     __ptext15:	
  7906 ;; *************** function _selectFrequency *****************
  7907 ;; Defined at:
  7908 ;;		line 275 in file "main.c"
  7909 ;; Parameters:    Size  Location     Type
  7910 ;;		None
  7911 ;; Auto vars:     Size  Location     Type
  7912 ;;		None
  7913 ;; Return value:  Size  Location     Type
  7914 ;;                  1    wreg      void 
  7915 ;; Registers used:
  7916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7917 ;; Tracked objects:
  7918 ;;		On entry : 0/0
  7919 ;;		On exit  : 0/0
  7920 ;;		Unchanged: 0/0
  7921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7922 ;;      Params:         0       0       0       0       0       0       0       0
  7923 ;;      Locals:         0       0       0       0       0       0       0       0
  7924 ;;      Temps:          0       2       0       0       0       0       0       0
  7925 ;;      Totals:         0       2       0       0       0       0       0       0
  7926 ;;Total ram usage:        2 bytes
  7927 ;; Hardware stack levels used: 1
  7928 ;; Hardware stack levels required when called: 10
  7929 ;; This function calls:
  7930 ;;		_printf
  7931 ;;		_setLEDColor
  7932 ;; This function is called by:
  7933 ;;		_process_remote_command
  7934 ;; This function uses a non-reentrant model
  7935 ;;
  7936                           
  7937                           
  7938                           ;psect for function _selectFrequency
  7939  0D9E                     _selectFrequency:
  7940  0D9E                     l3990:	
  7941                           ;incstack = 0
  7942                           ; Regs used in _selectFrequency: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7943                           
  7944                           
  7945                           ;main.c: 276:   interfaceState = STATE_FREQUENCY;
  7946  0D9E  3002               	movlw	2
  7947  0D9F  0020               	movlb	0	; select bank0
  7948  0DA0  00B9               	movwf	??_selectFrequency
  7949  0DA1  0839               	movf	??_selectFrequency,w
  7950  0DA2  00F8               	movwf	_interfaceState
  7951  0DA3                     l3992:
  7952                           
  7953                           ;main.c: 277:   setLEDColor(0, 150, 0);
  7954  0DA3  3096               	movlw	150
  7955  0DA4  00B9               	movwf	??_selectFrequency
  7956  0DA5  0839               	movf	??_selectFrequency,w
  7957  0DA6  00F3               	movwf	setLEDColor@green
  7958  0DA7  01F4               	clrf	setLEDColor@blue
  7959  0DA8  3000               	movlw	0
  7960  0DA9  318B  23FD  318D   	fcall	_setLEDColor
  7961  0DAC                     l3994:
  7962                           
  7963                           ;main.c: 278:   _delay((unsigned long)((1000)*(4000000/4000.0)));
  7964  0DAC  3006               	movlw	6
  7965  0DAD  0020               	movlb	0	; select bank0
  7966  0DAE  00BA               	movwf	??_selectFrequency+1
  7967  0DAF  3013               	movlw	19
  7968  0DB0  00B9               	movwf	??_selectFrequency
  7969  0DB1  30AD               	movlw	173
  7970  0DB2                     u3097:
  7971  0DB2  0B89               	decfsz	9,f
  7972  0DB3  2DB2               	goto	u3097
  7973  0DB4  0BB9               	decfsz	??_selectFrequency,f
  7974  0DB5  2DB2               	goto	u3097
  7975  0DB6  0BBA               	decfsz	??_selectFrequency+1,f
  7976  0DB7  2DB2               	goto	u3097
  7977  0DB8  3200               	nop2
  7978                           
  7979                           ;main.c: 279:   setLEDColor(0, 0, 0);
  7980  0DB9  01F3               	clrf	setLEDColor@green
  7981  0DBA  01F4               	clrf	setLEDColor@blue
  7982  0DBB  3000               	movlw	0
  7983  0DBC  318B  23FD  318D   	fcall	_setLEDColor
  7984  0DBF                     l3996:
  7985                           
  7986                           ;main.c: 280:   printf("\n Frequency selected");
  7987  0DBF  3030               	movlw	low (STR_1| (0+32768))
  7988  0DC0  0020               	movlb	0	; select bank0
  7989  0DC1  00B5               	movwf	printf@fmt
  7990  0DC2  3088               	movlw	high (STR_1| (0+32768))
  7991  0DC3  00B6               	movwf	printf@fmt+1
  7992  0DC4  318B  23C4  318D   	fcall	_printf
  7993  0DC7                     l668:
  7994  0DC7  0008               	return
  7995  0DC8                     __end_of_selectFrequency:
  7996                           
  7997                           	psect	text16
  7998  0CBB                     __ptext16:	
  7999 ;; *************** function _selectDecrease *****************
  8000 ;; Defined at:
  8001 ;;		line 298 in file "main.c"
  8002 ;; Parameters:    Size  Location     Type
  8003 ;;		None
  8004 ;; Auto vars:     Size  Location     Type
  8005 ;;		None
  8006 ;; Return value:  Size  Location     Type
  8007 ;;                  1    wreg      void 
  8008 ;; Registers used:
  8009 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8010 ;; Tracked objects:
  8011 ;;		On entry : 0/0
  8012 ;;		On exit  : 0/0
  8013 ;;		Unchanged: 0/0
  8014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8015 ;;      Params:         0       0       0       0       0       0       0       0
  8016 ;;      Locals:         0       0       0       0       0       0       0       0
  8017 ;;      Temps:          0       1       0       0       0       0       0       0
  8018 ;;      Totals:         0       1       0       0       0       0       0       0
  8019 ;;Total ram usage:        1 bytes
  8020 ;; Hardware stack levels used: 1
  8021 ;; Hardware stack levels required when called: 10
  8022 ;; This function calls:
  8023 ;;		_printf
  8024 ;;		_setLEDColor
  8025 ;; This function is called by:
  8026 ;;		_process_remote_command
  8027 ;; This function uses a non-reentrant model
  8028 ;;
  8029                           
  8030                           
  8031                           ;psect for function _selectDecrease
  8032  0CBB                     _selectDecrease:
  8033  0CBB                     l4016:	
  8034                           ;incstack = 0
  8035                           ; Regs used in _selectDecrease: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8036                           
  8037                           
  8038                           ;main.c: 299:   setLEDColor(130, 160, 0);
  8039  0CBB  30A0               	movlw	160
  8040  0CBC  0020               	movlb	0	; select bank0
  8041  0CBD  00B9               	movwf	??_selectDecrease
  8042  0CBE  0839               	movf	??_selectDecrease,w
  8043  0CBF  00F3               	movwf	setLEDColor@green
  8044  0CC0  01F4               	clrf	setLEDColor@blue
  8045  0CC1  3082               	movlw	130
  8046  0CC2  318B  23FD  318C   	fcall	_setLEDColor
  8047  0CC5                     l4018:
  8048                           
  8049                           ;main.c: 300:   _delay((unsigned long)((100)*(4000000/4000.0)));
  8050  0CC5  3082               	movlw	130
  8051  0CC6  0020               	movlb	0	; select bank0
  8052  0CC7  00B9               	movwf	??_selectDecrease
  8053  0CC8  30DD               	movlw	221
  8054  0CC9                     u3107:
  8055  0CC9  0B89               	decfsz	9,f
  8056  0CCA  2CC9               	goto	u3107
  8057  0CCB  0BB9               	decfsz	??_selectDecrease,f
  8058  0CCC  2CC9               	goto	u3107
  8059  0CCD  3200               	nop2
  8060  0CCE                     l4020:
  8061                           
  8062                           ;main.c: 301:   setLEDColor(0, 0, 0);
  8063  0CCE  01F3               	clrf	setLEDColor@green
  8064  0CCF  01F4               	clrf	setLEDColor@blue
  8065  0CD0  3000               	movlw	0
  8066  0CD1  318B  23FD  318C   	fcall	_setLEDColor
  8067  0CD4                     l4022:
  8068                           
  8069                           ;main.c: 302:   printf("\n decrease selected");
  8070  0CD4  3045               	movlw	low (STR_4| (0+32768))
  8071  0CD5  0020               	movlb	0	; select bank0
  8072  0CD6  00B5               	movwf	printf@fmt
  8073  0CD7  3088               	movlw	high (STR_4| (0+32768))
  8074  0CD8  00B6               	movwf	printf@fmt+1
  8075  0CD9  318B  23C4  318C   	fcall	_printf
  8076  0CDC                     l677:
  8077  0CDC  0008               	return
  8078  0CDD                     __end_of_selectDecrease:
  8079                           
  8080                           	psect	text17
  8081  0D75                     __ptext17:	
  8082 ;; *************** function _selectCurrentValue *****************
  8083 ;; Defined at:
  8084 ;;		line 312 in file "main.c"
  8085 ;; Parameters:    Size  Location     Type
  8086 ;;		None
  8087 ;; Auto vars:     Size  Location     Type
  8088 ;;		None
  8089 ;; Return value:  Size  Location     Type
  8090 ;;                  1    wreg      void 
  8091 ;; Registers used:
  8092 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8093 ;; Tracked objects:
  8094 ;;		On entry : 0/0
  8095 ;;		On exit  : 0/0
  8096 ;;		Unchanged: 0/0
  8097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8098 ;;      Params:         0       0       0       0       0       0       0       0
  8099 ;;      Locals:         0       0       0       0       0       0       0       0
  8100 ;;      Temps:          0       2       0       0       0       0       0       0
  8101 ;;      Totals:         0       2       0       0       0       0       0       0
  8102 ;;Total ram usage:        2 bytes
  8103 ;; Hardware stack levels used: 1
  8104 ;; Hardware stack levels required when called: 10
  8105 ;; This function calls:
  8106 ;;		_printf
  8107 ;;		_setLEDColor
  8108 ;; This function is called by:
  8109 ;;		_process_remote_command
  8110 ;; This function uses a non-reentrant model
  8111 ;;
  8112                           
  8113                           
  8114                           ;psect for function _selectCurrentValue
  8115  0D75                     _selectCurrentValue:
  8116  0D75                     l4024:	
  8117                           ;incstack = 0
  8118                           ; Regs used in _selectCurrentValue: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8119                           
  8120                           
  8121                           ;main.c: 313:     setLEDColor(150, 70, 100);
  8122  0D75  3046               	movlw	70
  8123  0D76  0020               	movlb	0	; select bank0
  8124  0D77  00B9               	movwf	??_selectCurrentValue
  8125  0D78  0839               	movf	??_selectCurrentValue,w
  8126  0D79  00F3               	movwf	setLEDColor@green
  8127  0D7A  3064               	movlw	100
  8128  0D7B  00BA               	movwf	??_selectCurrentValue+1
  8129  0D7C  083A               	movf	??_selectCurrentValue+1,w
  8130  0D7D  00F4               	movwf	setLEDColor@blue
  8131  0D7E  3096               	movlw	150
  8132  0D7F  318B  23FD  318D   	fcall	_setLEDColor
  8133  0D82                     l4026:
  8134                           
  8135                           ;main.c: 314:     _delay((unsigned long)((500)*(4000000/4000.0)));
  8136  0D82  3003               	movlw	3
  8137  0D83  0020               	movlb	0	; select bank0
  8138  0D84  00BA               	movwf	??_selectCurrentValue+1
  8139  0D85  308A               	movlw	138
  8140  0D86  00B9               	movwf	??_selectCurrentValue
  8141  0D87  3055               	movlw	85
  8142  0D88                     u3117:
  8143  0D88  0B89               	decfsz	9,f
  8144  0D89  2D88               	goto	u3117
  8145  0D8A  0BB9               	decfsz	??_selectCurrentValue,f
  8146  0D8B  2D88               	goto	u3117
  8147  0D8C  0BBA               	decfsz	??_selectCurrentValue+1,f
  8148  0D8D  2D88               	goto	u3117
  8149  0D8E  3200               	nop2
  8150  0D8F                     l4028:
  8151                           
  8152                           ;main.c: 315:     setLEDColor(0,0,0);
  8153  0D8F  01F3               	clrf	setLEDColor@green
  8154  0D90  01F4               	clrf	setLEDColor@blue
  8155  0D91  3000               	movlw	0
  8156  0D92  318B  23FD  318D   	fcall	_setLEDColor
  8157  0D95                     l4030:
  8158                           
  8159                           ;main.c: 316:     printf("\n current value selected");
  8160  0D95  3000               	movlw	low (STR_6| (0+32768))
  8161  0D96  0020               	movlb	0	; select bank0
  8162  0D97  00B5               	movwf	printf@fmt
  8163  0D98  3088               	movlw	high (STR_6| (0+32768))
  8164  0D99  00B6               	movwf	printf@fmt+1
  8165  0D9A  318B  23C4  318D   	fcall	_printf
  8166  0D9D                     l683:
  8167  0D9D  0008               	return
  8168  0D9E                     __end_of_selectCurrentValue:
  8169                           
  8170                           	psect	text18
  8171  0D4D                     __ptext18:	
  8172 ;; *************** function _selectCurrent *****************
  8173 ;; Defined at:
  8174 ;;		line 283 in file "main.c"
  8175 ;; Parameters:    Size  Location     Type
  8176 ;;		None
  8177 ;; Auto vars:     Size  Location     Type
  8178 ;;		None
  8179 ;; Return value:  Size  Location     Type
  8180 ;;                  1    wreg      void 
  8181 ;; Registers used:
  8182 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8183 ;; Tracked objects:
  8184 ;;		On entry : 0/0
  8185 ;;		On exit  : 0/0
  8186 ;;		Unchanged: 0/0
  8187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8188 ;;      Params:         0       0       0       0       0       0       0       0
  8189 ;;      Locals:         0       0       0       0       0       0       0       0
  8190 ;;      Temps:          0       2       0       0       0       0       0       0
  8191 ;;      Totals:         0       2       0       0       0       0       0       0
  8192 ;;Total ram usage:        2 bytes
  8193 ;; Hardware stack levels used: 1
  8194 ;; Hardware stack levels required when called: 10
  8195 ;; This function calls:
  8196 ;;		_printf
  8197 ;;		_setLEDColor
  8198 ;; This function is called by:
  8199 ;;		_process_remote_command
  8200 ;; This function uses a non-reentrant model
  8201 ;;
  8202                           
  8203                           
  8204                           ;psect for function _selectCurrent
  8205  0D4D                     _selectCurrent:
  8206  0D4D                     l3998:	
  8207                           ;incstack = 0
  8208                           ; Regs used in _selectCurrent: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8209                           
  8210                           
  8211                           ;main.c: 284:   interfaceState = STATE_CURRENT;
  8212  0D4D  01F8               	clrf	_interfaceState
  8213  0D4E  0AF8               	incf	_interfaceState,f
  8214  0D4F                     l4000:
  8215                           
  8216                           ;main.c: 285:   setLEDColor(0, 0, 255);
  8217  0D4F  01F3               	clrf	setLEDColor@green
  8218  0D50  30FF               	movlw	255
  8219  0D51  0020               	movlb	0	; select bank0
  8220  0D52  00B9               	movwf	??_selectCurrent
  8221  0D53  0839               	movf	??_selectCurrent,w
  8222  0D54  00F4               	movwf	setLEDColor@blue
  8223  0D55  3000               	movlw	0
  8224  0D56  318B  23FD  318D   	fcall	_setLEDColor
  8225  0D59                     l4002:
  8226                           
  8227                           ;main.c: 286:   _delay((unsigned long)((1000)*(4000000/4000.0)));
  8228  0D59  3006               	movlw	6
  8229  0D5A  0020               	movlb	0	; select bank0
  8230  0D5B  00BA               	movwf	??_selectCurrent+1
  8231  0D5C  3013               	movlw	19
  8232  0D5D  00B9               	movwf	??_selectCurrent
  8233  0D5E  30AD               	movlw	173
  8234  0D5F                     u3127:
  8235  0D5F  0B89               	decfsz	9,f
  8236  0D60  2D5F               	goto	u3127
  8237  0D61  0BB9               	decfsz	??_selectCurrent,f
  8238  0D62  2D5F               	goto	u3127
  8239  0D63  0BBA               	decfsz	??_selectCurrent+1,f
  8240  0D64  2D5F               	goto	u3127
  8241  0D65  3200               	nop2
  8242  0D66                     l4004:
  8243                           
  8244                           ;main.c: 287:   setLEDColor(0, 0, 0);
  8245  0D66  01F3               	clrf	setLEDColor@green
  8246  0D67  01F4               	clrf	setLEDColor@blue
  8247  0D68  3000               	movlw	0
  8248  0D69  318B  23FD  318D   	fcall	_setLEDColor
  8249  0D6C                     l4006:
  8250                           
  8251                           ;main.c: 288:   printf("\n current selected");
  8252  0D6C  306D               	movlw	low (STR_2| (0+32768))
  8253  0D6D  0020               	movlb	0	; select bank0
  8254  0D6E  00B5               	movwf	printf@fmt
  8255  0D6F  3088               	movlw	high (STR_2| (0+32768))
  8256  0D70  00B6               	movwf	printf@fmt+1
  8257  0D71  318B  23C4  318D   	fcall	_printf
  8258  0D74                     l671:
  8259  0D74  0008               	return
  8260  0D75                     __end_of_selectCurrent:
  8261                           
  8262                           	psect	text19
  8263  0BC4                     __ptext19:	
  8264 ;; *************** function _printf *****************
  8265 ;; Defined at:
  8266 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\printf.c"
  8267 ;; Parameters:    Size  Location     Type
  8268 ;;  fmt             2   21[BANK0 ] PTR const unsigned char 
  8269 ;;		 -> STR_7(25), STR_6(25), STR_5(23), STR_4(20), 
  8270 ;;		 -> STR_3(20), STR_2(19), STR_1(21), 
  8271 ;; Auto vars:     Size  Location     Type
  8272 ;;  ret             2    0        int 
  8273 ;;  ap              1   24[BANK0 ] PTR void [1]
  8274 ;;		 -> ?_printf(2), 
  8275 ;; Return value:  Size  Location     Type
  8276 ;;                  2   21[BANK0 ] int 
  8277 ;; Registers used:
  8278 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8279 ;; Tracked objects:
  8280 ;;		On entry : 0/0
  8281 ;;		On exit  : 0/0
  8282 ;;		Unchanged: 0/0
  8283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8284 ;;      Params:         0       2       0       0       0       0       0       0
  8285 ;;      Locals:         0       1       0       0       0       0       0       0
  8286 ;;      Temps:          0       1       0       0       0       0       0       0
  8287 ;;      Totals:         0       4       0       0       0       0       0       0
  8288 ;;Total ram usage:        4 bytes
  8289 ;; Hardware stack levels used: 1
  8290 ;; Hardware stack levels required when called: 9
  8291 ;; This function calls:
  8292 ;;		_vfprintf
  8293 ;; This function is called by:
  8294 ;;		_selectFrequency
  8295 ;;		_selectCurrent
  8296 ;;		_selectIncrease
  8297 ;;		_selectDecrease
  8298 ;;		_selectCurrentValue
  8299 ;;		_selectFrequencyValue
  8300 ;;		_selectResetValue
  8301 ;; This function uses a non-reentrant model
  8302 ;;
  8303                           
  8304                           
  8305                           ;psect for function _printf
  8306  0BC4                     _printf:
  8307  0BC4                     l3840:	
  8308                           ;incstack = 0
  8309                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8310                           
  8311  0BC4  3037               	movlw	(low ((?_printf| 0+2)))& (0+255)
  8312  0BC5  0020               	movlb	0	; select bank0
  8313  0BC6  00B7               	movwf	??_printf
  8314  0BC7  0837               	movf	??_printf,w
  8315  0BC8  00B8               	movwf	printf@ap
  8316  0BC9                     l3842:
  8317  0BC9  0836               	movf	printf@fmt+1,w
  8318  0BCA  00AE               	movwf	vfprintf@fmt+1
  8319  0BCB  0835               	movf	printf@fmt,w
  8320  0BCC  00AD               	movwf	vfprintf@fmt
  8321  0BCD  3038               	movlw	(low (printf@ap| 0))& (0+255)
  8322  0BCE  00B7               	movwf	??_printf
  8323  0BCF  0837               	movf	??_printf,w
  8324  0BD0  00AF               	movwf	vfprintf@ap
  8325  0BD1  3000               	movlw	0
  8326  0BD2  318D  25F4  318B   	fcall	_vfprintf
  8327  0BD5                     l1303:
  8328  0BD5  0008               	return
  8329  0BD6                     __end_of_printf:
  8330                           
  8331                           	psect	text20
  8332  0DF4                     __ptext20:	
  8333 ;; *************** function _vfprintf *****************
  8334 ;; Defined at:
  8335 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;  fp              1    wreg     PTR struct _IO_FILE
  8338 ;;		 -> NULL(0), 
  8339 ;;  fmt             2   13[BANK0 ] PTR const unsigned char 
  8340 ;;		 -> STR_7(25), STR_6(25), STR_5(23), STR_4(20), 
  8341 ;;		 -> STR_3(20), STR_2(19), STR_1(21), 
  8342 ;;  ap              1   15[BANK0 ] PTR PTR void 
  8343 ;;		 -> printf@ap(1), 
  8344 ;; Auto vars:     Size  Location     Type
  8345 ;;  fp              1   18[BANK0 ] PTR struct _IO_FILE
  8346 ;;		 -> NULL(0), 
  8347 ;;  cfmt            2   19[BANK0 ] PTR unsigned char 
  8348 ;;		 -> STR_7(25), STR_6(25), STR_5(23), STR_4(20), 
  8349 ;;		 -> STR_3(20), STR_2(19), STR_1(21), 
  8350 ;; Return value:  Size  Location     Type
  8351 ;;                  2   13[BANK0 ] int 
  8352 ;; Registers used:
  8353 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8354 ;; Tracked objects:
  8355 ;;		On entry : 0/0
  8356 ;;		On exit  : 0/0
  8357 ;;		Unchanged: 0/0
  8358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8359 ;;      Params:         0       3       0       0       0       0       0       0
  8360 ;;      Locals:         0       3       0       0       0       0       0       0
  8361 ;;      Temps:          0       2       0       0       0       0       0       0
  8362 ;;      Totals:         0       8       0       0       0       0       0       0
  8363 ;;Total ram usage:        8 bytes
  8364 ;; Hardware stack levels used: 1
  8365 ;; Hardware stack levels required when called: 8
  8366 ;; This function calls:
  8367 ;;		_vfpfcnvrt
  8368 ;; This function is called by:
  8369 ;;		_printf
  8370 ;; This function uses a non-reentrant model
  8371 ;;
  8372                           
  8373                           
  8374                           ;psect for function _vfprintf
  8375  0DF4                     _vfprintf:
  8376                           
  8377                           ;incstack = 0
  8378                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8379                           ;vfprintf@fp stored from wreg
  8380  0DF4  0020               	movlb	0	; select bank0
  8381  0DF5  00B2               	movwf	vfprintf@fp
  8382  0DF6                     l3764:
  8383                           
  8384                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
  8385  0DF6  082E               	movf	vfprintf@fmt+1,w
  8386  0DF7  00B4               	movwf	vfprintf@cfmt+1
  8387  0DF8  082D               	movf	vfprintf@fmt,w
  8388  0DF9  00B3               	movwf	vfprintf@cfmt
  8389  0DFA                     l3766:
  8390                           
  8391                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
  8392  0DFA  0021               	movlb	1	; select bank1
  8393  0DFB  01A0               	clrf	_nout^(0+128)
  8394  0DFC  01A1               	clrf	(_nout+1)^(0+128)
  8395                           
  8396                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  8397  0DFD  2E12               	goto	l3770
  8398  0DFE                     l3768:
  8399                           
  8400                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
  8401  0DFE  3033               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  8402  0DFF  00B0               	movwf	??_vfprintf
  8403  0E00  0830               	movf	??_vfprintf,w
  8404  0E01  00A5               	movwf	vfpfcnvrt@fmt
  8405  0E02  082F               	movf	vfprintf@ap,w
  8406  0E03  00B1               	movwf	??_vfprintf+1
  8407  0E04  0831               	movf	??_vfprintf+1,w
  8408  0E05  00A6               	movwf	vfpfcnvrt@ap
  8409  0E06  0832               	movf	vfprintf@fp,w
  8410  0E07  3185  2588  318D   	fcall	_vfpfcnvrt
  8411  0E0A  0020               	movlb	0	; select bank0
  8412  0E0B  0825               	movf	?_vfpfcnvrt,w
  8413  0E0C  0021               	movlb	1	; select bank1
  8414  0E0D  07A0               	addwf	_nout^(0+128),f
  8415  0E0E  0020               	movlb	0	; select bank0
  8416  0E0F  0826               	movf	?_vfpfcnvrt+1,w
  8417  0E10  0021               	movlb	1	; select bank1
  8418  0E11  3DA1               	addwfc	(_nout+1)^(0+128),f
  8419  0E12                     l3770:
  8420                           
  8421                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  8422  0E12  0020               	movlb	0	; select bank0
  8423  0E13  0833               	movf	vfprintf@cfmt,w
  8424  0E14  0084               	movwf	4
  8425  0E15  0834               	movf	vfprintf@cfmt+1,w
  8426  0E16  0085               	movwf	5
  8427  0E17  0012               	moviw fsr0++
  8428  0E18  1D03               	btfss	3,2
  8429  0E19  2E1B               	goto	u2301
  8430  0E1A  2E1C               	goto	u2300
  8431  0E1B                     u2301:
  8432  0E1B  2DFE               	goto	l3768
  8433  0E1C                     u2300:
  8434  0E1C                     l3772:
  8435                           
  8436                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
  8437  0E1C  0021               	movlb	1	; select bank1
  8438  0E1D  0821               	movf	(_nout+1)^(0+128),w
  8439  0E1E  0020               	movlb	0	; select bank0
  8440  0E1F  00AE               	movwf	?_vfprintf+1
  8441  0E20  0021               	movlb	1	; select bank1
  8442  0E21  0820               	movf	_nout^(0+128),w
  8443  0E22  0020               	movlb	0	; select bank0
  8444  0E23  00AD               	movwf	?_vfprintf
  8445  0E24                     l1342:
  8446  0E24  0008               	return
  8447  0E25                     __end_of_vfprintf:
  8448                           
  8449                           	psect	text21
  8450  0588                     __ptext21:	
  8451 ;; *************** function _vfpfcnvrt *****************
  8452 ;; Defined at:
  8453 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  8454 ;; Parameters:    Size  Location     Type
  8455 ;;  fp              1    wreg     PTR struct _IO_FILE
  8456 ;;		 -> NULL(0), 
  8457 ;;  fmt             1    5[BANK0 ] PTR PTR unsigned char 
  8458 ;;		 -> vfprintf@cfmt(2), 
  8459 ;;  ap              1    6[BANK0 ] PTR PTR void 
  8460 ;;		 -> printf@ap(1), 
  8461 ;; Auto vars:     Size  Location     Type
  8462 ;;  fp              1   12[BANK0 ] PTR struct _IO_FILE
  8463 ;;		 -> NULL(0), 
  8464 ;;  llu             8    0        unsigned long long 
  8465 ;;  ll              8    0        long long 
  8466 ;;  f               4    0        long long 
  8467 ;;  ct              3    0        unsigned char [3]
  8468 ;;  vp              2    0        PTR void 
  8469 ;;  i               2    0        int 
  8470 ;;  done            2    0        int 
  8471 ;;  cp              2    0        PTR unsigned char 
  8472 ;;  c               1    0        unsigned char 
  8473 ;; Return value:  Size  Location     Type
  8474 ;;                  2    5[BANK0 ] int 
  8475 ;; Registers used:
  8476 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8477 ;; Tracked objects:
  8478 ;;		On entry : 0/0
  8479 ;;		On exit  : 0/0
  8480 ;;		Unchanged: 0/0
  8481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8482 ;;      Params:         0       2       0       0       0       0       0       0
  8483 ;;      Locals:         0       1       0       0       0       0       0       0
  8484 ;;      Temps:          0       5       0       0       0       0       0       0
  8485 ;;      Totals:         0       8       0       0       0       0       0       0
  8486 ;;Total ram usage:        8 bytes
  8487 ;; Hardware stack levels used: 1
  8488 ;; Hardware stack levels required when called: 7
  8489 ;; This function calls:
  8490 ;;		_fputc
  8491 ;; This function is called by:
  8492 ;;		_vfprintf
  8493 ;; This function uses a non-reentrant model
  8494 ;;
  8495                           
  8496                           
  8497                           ;psect for function _vfpfcnvrt
  8498  0588                     _vfpfcnvrt:
  8499                           
  8500                           ;incstack = 0
  8501                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8502                           ;vfpfcnvrt@fp stored from wreg
  8503  0588  0020               	movlb	0	; select bank0
  8504  0589  00AC               	movwf	vfpfcnvrt@fp
  8505  058A                     l3708:
  8506                           
  8507                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.32\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          2\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
  8508  058A  0825               	movf	vfpfcnvrt@fmt,w
  8509  058B  0086               	movwf	6
  8510  058C  0187               	clrf	7
  8511  058D  3F40               	moviw [0]fsr1
  8512  058E  00A7               	movwf	??_vfpfcnvrt
  8513  058F  3F41               	moviw [1]fsr1
  8514  0590  00A8               	movwf	??_vfpfcnvrt+1
  8515  0591  0827               	movf	??_vfpfcnvrt,w
  8516  0592  0084               	movwf	4
  8517  0593  0828               	movf	??_vfpfcnvrt+1,w
  8518  0594  0085               	movwf	5
  8519  0595  0012               	moviw fsr0++
  8520  0596  3A25               	xorlw	37
  8521  0597  1D03               	btfss	3,2
  8522  0598  2D9A               	goto	u2281
  8523  0599  2D9B               	goto	u2280
  8524  059A                     u2281:
  8525  059A  2DE2               	goto	l3732
  8526  059B                     u2280:
  8527  059B                     l3710:
  8528                           
  8529                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
  8530  059B  0825               	movf	vfpfcnvrt@fmt,w
  8531  059C  0086               	movwf	6
  8532  059D  0187               	clrf	7
  8533  059E  3001               	movlw	1
  8534  059F  0781               	addwf	1,f
  8535  05A0  3141               	addfsr 1,1
  8536  05A1  1803               	skipnc
  8537  05A2  0A81               	incf	1,f
  8538  05A3                     l3712:
  8539                           
  8540                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
  8541  05A3  0021               	movlb	1	; select bank1
  8542  05A4  01A2               	clrf	_width^(0+128)
  8543  05A5  01A3               	clrf	(_width+1)^(0+128)
  8544  05A6  01A6               	clrf	_flags^(0+128)
  8545  05A7  01A7               	clrf	(_flags+1)^(0+128)
  8546  05A8                     l3714:
  8547                           
  8548                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
  8549  05A8  30FF               	movlw	255
  8550  05A9  00A4               	movwf	_prec^(0+128)
  8551  05AA  30FF               	movlw	255
  8552  05AB  00A5               	movwf	(_prec^(0+128)+1)
  8553  05AC                     l3716:
  8554                           
  8555                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  8556  05AC  0020               	movlb	0	; select bank0
  8557  05AD  0825               	movf	vfpfcnvrt@fmt,w
  8558  05AE  0086               	movwf	6
  8559  05AF  0187               	clrf	7
  8560  05B0  3F40               	moviw [0]fsr1
  8561  05B1  00A7               	movwf	??_vfpfcnvrt
  8562  05B2  3F41               	moviw [1]fsr1
  8563  05B3  00A8               	movwf	??_vfpfcnvrt+1
  8564  05B4  0827               	movf	??_vfpfcnvrt,w
  8565  05B5  0084               	movwf	4
  8566  05B6  0828               	movf	??_vfpfcnvrt+1,w
  8567  05B7  0085               	movwf	5
  8568  05B8  0012               	moviw fsr0++
  8569  05B9  3A25               	xorlw	37
  8570  05BA  1D03               	btfss	3,2
  8571  05BB  2DBD               	goto	u2291
  8572  05BC  2DBE               	goto	u2290
  8573  05BD                     u2291:
  8574  05BD  2DD7               	goto	l3726
  8575  05BE                     u2290:
  8576  05BE                     l3718:
  8577                           
  8578                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  8579  05BE  0825               	movf	vfpfcnvrt@fmt,w
  8580  05BF  0086               	movwf	6
  8581  05C0  0187               	clrf	7
  8582  05C1  3001               	movlw	1
  8583  05C2  0781               	addwf	1,f
  8584  05C3  3141               	addfsr 1,1
  8585  05C4  1803               	skipnc
  8586  05C5  0A81               	incf	1,f
  8587  05C6                     l3720:
  8588                           
  8589                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  8590  05C6  3025               	movlw	37
  8591  05C7  00F5               	movwf	fputc@c
  8592  05C8  3000               	movlw	0
  8593  05C9  00F6               	movwf	fputc@c+1
  8594  05CA  082C               	movf	vfpfcnvrt@fp,w
  8595  05CB  00A7               	movwf	??_vfpfcnvrt
  8596  05CC  0827               	movf	??_vfpfcnvrt,w
  8597  05CD  00F7               	movwf	fputc@fp
  8598  05CE  318E  26BF  3185   	fcall	_fputc
  8599  05D1                     l3722:
  8600                           
  8601                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  8602  05D1  3001               	movlw	1
  8603  05D2  0020               	movlb	0	; select bank0
  8604  05D3  00A5               	movwf	?_vfpfcnvrt
  8605  05D4  3000               	movlw	0
  8606  05D5  00A6               	movwf	?_vfpfcnvrt+1
  8607  05D6  2E05               	goto	l1336
  8608  05D7                     l3726:
  8609                           
  8610                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  8611  05D7  0825               	movf	vfpfcnvrt@fmt,w
  8612  05D8  0086               	movwf	6
  8613  05D9  0187               	clrf	7
  8614  05DA  3001               	movlw	1
  8615  05DB  0781               	addwf	1,f
  8616  05DC  3141               	addfsr 1,1
  8617  05DD  1803               	skipnc
  8618  05DE  0A81               	incf	1,f
  8619  05DF                     l3728:
  8620                           
  8621                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  8622  05DF  01A5               	clrf	?_vfpfcnvrt
  8623  05E0  01A6               	clrf	?_vfpfcnvrt+1
  8624  05E1  2E05               	goto	l1336
  8625  05E2                     l3732:
  8626                           
  8627                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  8628  05E2  0825               	movf	vfpfcnvrt@fmt,w
  8629  05E3  0086               	movwf	6
  8630  05E4  0187               	clrf	7
  8631  05E5  3F40               	moviw [0]fsr1
  8632  05E6  00A7               	movwf	??_vfpfcnvrt
  8633  05E7  3F41               	moviw [1]fsr1
  8634  05E8  00A8               	movwf	??_vfpfcnvrt+1
  8635  05E9  0827               	movf	??_vfpfcnvrt,w
  8636  05EA  0084               	movwf	4
  8637  05EB  0828               	movf	??_vfpfcnvrt+1,w
  8638  05EC  0085               	movwf	5
  8639  05ED  0800               	movf	0,w	;code access
  8640  05EE  00A9               	movwf	??_vfpfcnvrt+2
  8641  05EF  01AA               	clrf	??_vfpfcnvrt+3
  8642  05F0  0829               	movf	??_vfpfcnvrt+2,w
  8643  05F1  00F5               	movwf	fputc@c
  8644  05F2  082A               	movf	??_vfpfcnvrt+3,w
  8645  05F3  00F6               	movwf	fputc@c+1
  8646  05F4  082C               	movf	vfpfcnvrt@fp,w
  8647  05F5  00AB               	movwf	??_vfpfcnvrt+4
  8648  05F6  082B               	movf	??_vfpfcnvrt+4,w
  8649  05F7  00F7               	movwf	fputc@fp
  8650  05F8  318E  26BF  3185   	fcall	_fputc
  8651  05FB                     l3734:
  8652                           
  8653                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  8654  05FB  0020               	movlb	0	; select bank0
  8655  05FC  0825               	movf	vfpfcnvrt@fmt,w
  8656  05FD  0086               	movwf	6
  8657  05FE  0187               	clrf	7
  8658  05FF  3001               	movlw	1
  8659  0600  0781               	addwf	1,f
  8660  0601  3141               	addfsr 1,1
  8661  0602  1803               	skipnc
  8662  0603  0A81               	incf	1,f
  8663  0604  2DD1               	goto	l3722
  8664  0605                     l1336:
  8665  0605  0008               	return
  8666  0606                     __end_of_vfpfcnvrt:
  8667                           
  8668                           	psect	text22
  8669  0EBF                     __ptext22:	
  8670 ;; *************** function _fputc *****************
  8671 ;; Defined at:
  8672 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputc.c"
  8673 ;; Parameters:    Size  Location     Type
  8674 ;;  c               2    5[COMMON] int 
  8675 ;;  fp              1    7[COMMON] PTR struct _IO_FILE
  8676 ;;		 -> NULL(0), 
  8677 ;; Auto vars:     Size  Location     Type
  8678 ;;		None
  8679 ;; Return value:  Size  Location     Type
  8680 ;;                  2    5[COMMON] int 
  8681 ;; Registers used:
  8682 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8683 ;; Tracked objects:
  8684 ;;		On entry : 0/0
  8685 ;;		On exit  : 0/0
  8686 ;;		Unchanged: 0/0
  8687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8688 ;;      Params:         3       0       0       0       0       0       0       0
  8689 ;;      Locals:         0       0       0       0       0       0       0       0
  8690 ;;      Temps:          0       5       0       0       0       0       0       0
  8691 ;;      Totals:         3       5       0       0       0       0       0       0
  8692 ;;Total ram usage:        8 bytes
  8693 ;; Hardware stack levels used: 1
  8694 ;; Hardware stack levels required when called: 6
  8695 ;; This function calls:
  8696 ;;		_putch
  8697 ;; This function is called by:
  8698 ;;		_vfpfcnvrt
  8699 ;; This function uses a non-reentrant model
  8700 ;;
  8701                           
  8702                           
  8703                           ;psect for function _fputc
  8704  0EBF                     _fputc:
  8705  0EBF                     l3694:	
  8706                           ;incstack = 0
  8707                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8708                           
  8709  0EBF  0877               	movf	fputc@fp,w
  8710  0EC0  1903               	btfsc	3,2
  8711  0EC1  2EC3               	goto	u2241
  8712  0EC2  2EC4               	goto	u2240
  8713  0EC3                     u2241:
  8714  0EC3  2EC9               	goto	l3698
  8715  0EC4                     u2240:
  8716  0EC4                     l3696:
  8717  0EC4  0877               	movf	fputc@fp,w
  8718  0EC5  1D03               	btfss	3,2
  8719  0EC6  2EC8               	goto	u2251
  8720  0EC7  2EC9               	goto	u2250
  8721  0EC8                     u2251:
  8722  0EC8  2ECE               	goto	l3700
  8723  0EC9                     u2250:
  8724  0EC9                     l3698:
  8725  0EC9  0875               	movf	fputc@c,w
  8726  0ECA  318B  2339  318E   	fcall	_putch
  8727  0ECD  2EFE               	goto	l1354
  8728  0ECE                     l3700:
  8729  0ECE  0877               	movf	fputc@fp,w
  8730  0ECF  3E03               	addlw	3
  8731  0ED0  0086               	movwf	6
  8732  0ED1  0187               	clrf	7
  8733  0ED2  0016               	moviw fsr1++
  8734  0ED3  0401               	iorwf	1,w
  8735  0ED4  1903               	btfsc	3,2
  8736  0ED5  2ED7               	goto	u2261
  8737  0ED6  2ED8               	goto	u2260
  8738  0ED7                     u2261:
  8739  0ED7  2EF6               	goto	l3704
  8740  0ED8                     u2260:
  8741  0ED8                     l3702:
  8742  0ED8  0877               	movf	fputc@fp,w
  8743  0ED9  3E03               	addlw	3
  8744  0EDA  0086               	movwf	6
  8745  0EDB  0187               	clrf	7
  8746  0EDC  3F40               	moviw [0]fsr1
  8747  0EDD  0020               	movlb	0	; select bank0
  8748  0EDE  00A0               	movwf	??_fputc
  8749  0EDF  3F41               	moviw [1]fsr1
  8750  0EE0  00A1               	movwf	??_fputc+1
  8751  0EE1  0A77               	incf	fputc@fp,w
  8752  0EE2  0086               	movwf	6
  8753  0EE3  0187               	clrf	7
  8754  0EE4  3F40               	moviw [0]fsr1
  8755  0EE5  00A2               	movwf	??_fputc+2
  8756  0EE6  3F41               	moviw [1]fsr1
  8757  0EE7  00A3               	movwf	??_fputc+3
  8758  0EE8  0823               	movf	??_fputc+3,w
  8759  0EE9  3A80               	xorlw	128
  8760  0EEA  00A4               	movwf	??_fputc+4
  8761  0EEB  0821               	movf	??_fputc+1,w
  8762  0EEC  3A80               	xorlw	128
  8763  0EED  0224               	subwf	??_fputc+4,w
  8764  0EEE  1D03               	skipz
  8765  0EEF  2EF2               	goto	u2275
  8766  0EF0  0820               	movf	??_fputc,w
  8767  0EF1  0222               	subwf	??_fputc+2,w
  8768  0EF2                     u2275:
  8769  0EF2  1803               	skipnc
  8770  0EF3  2EF5               	goto	u2271
  8771  0EF4  2EF6               	goto	u2270
  8772  0EF5                     u2271:
  8773  0EF5  2EFE               	goto	l1354
  8774  0EF6                     u2270:
  8775  0EF6                     l3704:
  8776  0EF6  0A77               	incf	fputc@fp,w
  8777  0EF7  0086               	movwf	6
  8778  0EF8  0187               	clrf	7
  8779  0EF9  3001               	movlw	1
  8780  0EFA  0781               	addwf	1,f
  8781  0EFB  3141               	addfsr 1,1
  8782  0EFC  1803               	skipnc
  8783  0EFD  0A81               	incf	1,f
  8784  0EFE                     l1354:
  8785  0EFE  0008               	return
  8786  0EFF                     __end_of_fputc:
  8787                           
  8788                           	psect	text23
  8789  0B39                     __ptext23:	
  8790 ;; *************** function _putch *****************
  8791 ;; Defined at:
  8792 ;;		line 146 in file "mcc_generated_files/eusart.c"
  8793 ;; Parameters:    Size  Location     Type
  8794 ;;  txData          1    wreg     unsigned char 
  8795 ;; Auto vars:     Size  Location     Type
  8796 ;;  txData          1    4[COMMON] unsigned char 
  8797 ;; Return value:  Size  Location     Type
  8798 ;;                  1    wreg      void 
  8799 ;; Registers used:
  8800 ;;		wreg, status,2, status,0, pclath, cstack
  8801 ;; Tracked objects:
  8802 ;;		On entry : 0/0
  8803 ;;		On exit  : 0/0
  8804 ;;		Unchanged: 0/0
  8805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8806 ;;      Params:         0       0       0       0       0       0       0       0
  8807 ;;      Locals:         1       0       0       0       0       0       0       0
  8808 ;;      Temps:          0       0       0       0       0       0       0       0
  8809 ;;      Totals:         1       0       0       0       0       0       0       0
  8810 ;;Total ram usage:        1 bytes
  8811 ;; Hardware stack levels used: 1
  8812 ;; Hardware stack levels required when called: 5
  8813 ;; This function calls:
  8814 ;;		_EUSART_Write
  8815 ;; This function is called by:
  8816 ;;		_fputc
  8817 ;; This function uses a non-reentrant model
  8818 ;;
  8819                           
  8820                           
  8821                           ;psect for function _putch
  8822  0B39                     _putch:
  8823                           
  8824                           ;incstack = 0
  8825                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  8826                           ;putch@txData stored from wreg
  8827  0B39  00F4               	movwf	putch@txData
  8828  0B3A                     l3692:
  8829                           
  8830                           ;mcc_generated_files/eusart.c: 146: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 147: {;mcc_generated_files/eusart.c: 148:     EUSART_Write(txData);
  8831  0B3A  0874               	movf	putch@txData,w
  8832  0B3B  318B  2362  318B   	fcall	_EUSART_Write
  8833  0B3E                     l231:
  8834  0B3E  0008               	return
  8835  0B3F                     __end_of_putch:
  8836                           
  8837                           	psect	text24
  8838  0B62                     __ptext24:	
  8839 ;; *************** function _EUSART_Write *****************
  8840 ;; Defined at:
  8841 ;;		line 132 in file "mcc_generated_files/eusart.c"
  8842 ;; Parameters:    Size  Location     Type
  8843 ;;  txData          1    wreg     unsigned char 
  8844 ;; Auto vars:     Size  Location     Type
  8845 ;;  txData          1    3[COMMON] unsigned char 
  8846 ;; Return value:  Size  Location     Type
  8847 ;;                  1    wreg      void 
  8848 ;; Registers used:
  8849 ;;		wreg
  8850 ;; Tracked objects:
  8851 ;;		On entry : 0/0
  8852 ;;		On exit  : 0/0
  8853 ;;		Unchanged: 0/0
  8854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8855 ;;      Params:         0       0       0       0       0       0       0       0
  8856 ;;      Locals:         1       0       0       0       0       0       0       0
  8857 ;;      Temps:          0       0       0       0       0       0       0       0
  8858 ;;      Totals:         1       0       0       0       0       0       0       0
  8859 ;;Total ram usage:        1 bytes
  8860 ;; Hardware stack levels used: 1
  8861 ;; Hardware stack levels required when called: 4
  8862 ;; This function calls:
  8863 ;;		Nothing
  8864 ;; This function is called by:
  8865 ;;		_putch
  8866 ;; This function uses a non-reentrant model
  8867 ;;
  8868                           
  8869                           
  8870                           ;psect for function _EUSART_Write
  8871  0B62                     _EUSART_Write:
  8872                           
  8873                           ;incstack = 0
  8874                           ; Regs used in _EUSART_Write: [wreg]
  8875                           ;EUSART_Write@txData stored from wreg
  8876  0B62  00F3               	movwf	EUSART_Write@txData
  8877  0B63                     l3688:
  8878  0B63                     l222:	
  8879                           ;mcc_generated_files/eusart.c: 135:     {;mcc_generated_files/eusart.c: 136:     }
  8880                           
  8881                           
  8882                           ;mcc_generated_files/eusart.c: 134:     while(0 == PIR1bits.TXIF)
  8883  0B63  0020               	movlb	0	; select bank0
  8884  0B64  1E11               	btfss	17,4	;volatile
  8885  0B65  2B67               	goto	u2231
  8886  0B66  2B68               	goto	u2230
  8887  0B67                     u2231:
  8888  0B67  2B63               	goto	l222
  8889  0B68                     u2230:
  8890  0B68                     l3690:
  8891                           
  8892                           ;mcc_generated_files/eusart.c: 138:     TX1REG = txData;
  8893  0B68  0873               	movf	EUSART_Write@txData,w
  8894  0B69  0023               	movlb	3	; select bank3
  8895  0B6A  009A               	movwf	26	;volatile
  8896  0B6B                     l225:
  8897  0B6B  0008               	return
  8898  0B6C                     __end_of_EUSART_Write:
  8899                           
  8900                           	psect	text25
  8901  0E58                     __ptext25:	
  8902 ;; *************** function _battery_voltage *****************
  8903 ;; Defined at:
  8904 ;;		line 148 in file "main.c"
  8905 ;; Parameters:    Size  Location     Type
  8906 ;;		None
  8907 ;; Auto vars:     Size  Location     Type
  8908 ;;		None
  8909 ;; Return value:  Size  Location     Type
  8910 ;;                  2   23[BANK0 ] short 
  8911 ;; Registers used:
  8912 ;;		wreg, status,2, status,0, pclath, cstack
  8913 ;; Tracked objects:
  8914 ;;		On entry : 0/0
  8915 ;;		On exit  : 0/0
  8916 ;;		Unchanged: 0/0
  8917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8918 ;;      Params:         0       2       0       0       0       0       0       0
  8919 ;;      Locals:         0       0       0       0       0       0       0       0
  8920 ;;      Temps:          0       0       0       0       0       0       0       0
  8921 ;;      Totals:         0       2       0       0       0       0       0       0
  8922 ;;Total ram usage:        2 bytes
  8923 ;; Hardware stack levels used: 1
  8924 ;; Hardware stack levels required when called: 5
  8925 ;; This function calls:
  8926 ;;		___aldiv
  8927 ;; This function is called by:
  8928 ;;		_process_remote_command
  8929 ;;		_main
  8930 ;; This function uses a non-reentrant model
  8931 ;;
  8932                           
  8933                           
  8934                           ;psect for function _battery_voltage
  8935  0E58                     _battery_voltage:
  8936  0E58                     l3972:	
  8937                           ;incstack = 0
  8938                           ; Regs used in _battery_voltage: [wreg+status,2+status,0+pclath+cstack]
  8939                           
  8940                           
  8941                           ;main.c: 150:   FVRCON = 0b10000001;
  8942  0E58  3081               	movlw	129
  8943  0E59  0022               	movlb	2	; select bank2
  8944  0E5A  0097               	movwf	23	;volatile
  8945                           
  8946                           ;main.c: 151:   ADCON0 = 0b01111101;
  8947  0E5B  307D               	movlw	125
  8948  0E5C  0021               	movlb	1	; select bank1
  8949  0E5D  009D               	movwf	29	;volatile
  8950                           
  8951                           ;main.c: 152:   ADCON1 = 0b10010000;
  8952  0E5E  3090               	movlw	144
  8953  0E5F  009E               	movwf	30	;volatile
  8954  0E60                     l642:	
  8955                           ;main.c: 153:   while(!FVRCONbits.FVRRDY){ }
  8956                           
  8957  0E60  0022               	movlb	2	; select bank2
  8958  0E61  1F17               	btfss	23,6	;volatile
  8959  0E62  2E64               	goto	u2601
  8960  0E63  2E65               	goto	u2600
  8961  0E64                     u2601:
  8962  0E64  2E60               	goto	l642
  8963  0E65                     u2600:
  8964  0E65                     l644:
  8965                           
  8966                           ;main.c: 154:   __nop();
  8967  0E65  0000               	nop
  8968                           
  8969                           ;main.c: 155:   __nop();
  8970  0E66  0000               	nop
  8971                           
  8972                           ;main.c: 156:   __nop();
  8973  0E67  0000               	nop
  8974                           
  8975                           ;main.c: 157:   __nop();
  8976  0E68  0000               	nop
  8977                           
  8978                           ;main.c: 158:   __nop();
  8979  0E69  0000               	nop
  8980                           
  8981                           ;main.c: 159:   ADCON0bits.GO_nDONE = 1;
  8982  0E6A  0021               	movlb	1	; select bank1
  8983  0E6B  149D               	bsf	29,1	;volatile
  8984  0E6C                     l645:	
  8985                           ;main.c: 160:   while(ADCON0bits.GO_nDONE){ }
  8986                           
  8987  0E6C  189D               	btfsc	29,1	;volatile
  8988  0E6D  2E6F               	goto	u2611
  8989  0E6E  2E70               	goto	u2610
  8990  0E6F                     u2611:
  8991  0E6F  2E6C               	goto	l645
  8992  0E70                     u2610:
  8993  0E70                     l647:
  8994                           
  8995                           ;main.c: 161:   ADCON0bits.ADON = 0;
  8996  0E70  101D               	bcf	29,0	;volatile
  8997  0E71                     l3974:
  8998                           
  8999                           ;main.c: 166:   return 1047552L / ADRES;
  9000  0E71  081B               	movf	27,w	;volatile
  9001  0E72  0020               	movlb	0	; select bank0
  9002  0E73  00A8               	movwf	___aldiv@divisor
  9003  0E74  0021               	movlb	1	; select bank1
  9004  0E75  081C               	movf	28,w	;volatile
  9005  0E76  0020               	movlb	0	; select bank0
  9006  0E77  00A9               	movwf	___aldiv@divisor+1
  9007  0E78  01AA               	clrf	___aldiv@divisor+2
  9008  0E79  01AB               	clrf	___aldiv@divisor+3
  9009  0E7A  3000               	movlw	0
  9010  0E7B  00AF               	movwf	___aldiv@dividend+3
  9011  0E7C  300F               	movlw	15
  9012  0E7D  00AE               	movwf	___aldiv@dividend+2
  9013  0E7E  30FC               	movlw	252
  9014  0E7F  00AD               	movwf	___aldiv@dividend+1
  9015  0E80  3000               	movlw	0
  9016  0E81  00AC               	movwf	___aldiv@dividend
  9017  0E82  3184  24F8  318E   	fcall	___aldiv
  9018  0E85  0020               	movlb	0	; select bank0
  9019  0E86  0829               	movf	?___aldiv+1,w
  9020  0E87  00B8               	movwf	?_battery_voltage+1
  9021  0E88  0828               	movf	?___aldiv,w
  9022  0E89  00B7               	movwf	?_battery_voltage
  9023  0E8A                     l648:
  9024  0E8A  0008               	return
  9025  0E8B                     __end_of_battery_voltage:
  9026                           
  9027                           	psect	text26
  9028  04F8                     __ptext26:	
  9029 ;; *************** function ___aldiv *****************
  9030 ;; Defined at:
  9031 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aldiv.c"
  9032 ;; Parameters:    Size  Location     Type
  9033 ;;  divisor         4    8[BANK0 ] long 
  9034 ;;  dividend        4   12[BANK0 ] long 
  9035 ;; Auto vars:     Size  Location     Type
  9036 ;;  quotient        4   19[BANK0 ] long 
  9037 ;;  sign            1   18[BANK0 ] unsigned char 
  9038 ;;  counter         1   17[BANK0 ] unsigned char 
  9039 ;; Return value:  Size  Location     Type
  9040 ;;                  4    8[BANK0 ] long 
  9041 ;; Registers used:
  9042 ;;		wreg, status,2, status,0
  9043 ;; Tracked objects:
  9044 ;;		On entry : 0/0
  9045 ;;		On exit  : 0/0
  9046 ;;		Unchanged: 0/0
  9047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9048 ;;      Params:         0       8       0       0       0       0       0       0
  9049 ;;      Locals:         0       6       0       0       0       0       0       0
  9050 ;;      Temps:          0       1       0       0       0       0       0       0
  9051 ;;      Totals:         0      15       0       0       0       0       0       0
  9052 ;;Total ram usage:       15 bytes
  9053 ;; Hardware stack levels used: 1
  9054 ;; Hardware stack levels required when called: 4
  9055 ;; This function calls:
  9056 ;;		Nothing
  9057 ;; This function is called by:
  9058 ;;		_battery_voltage
  9059 ;;		_setCurrent
  9060 ;;		_setFrequency
  9061 ;; This function uses a non-reentrant model
  9062 ;;
  9063                           
  9064                           
  9065                           ;psect for function ___aldiv
  9066  04F8                     ___aldiv:
  9067  04F8                     l3860:	
  9068                           ;incstack = 0
  9069                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9070                           
  9071  04F8  0020               	movlb	0	; select bank0
  9072  04F9  01B2               	clrf	___aldiv@sign
  9073  04FA                     l3862:
  9074  04FA  1FAB               	btfss	___aldiv@divisor+3,7
  9075  04FB  2CFD               	goto	u2391
  9076  04FC  2CFE               	goto	u2390
  9077  04FD                     u2391:
  9078  04FD  2D0B               	goto	l905
  9079  04FE                     u2390:
  9080  04FE                     l3864:
  9081  04FE  09A8               	comf	___aldiv@divisor,f
  9082  04FF  09A9               	comf	___aldiv@divisor+1,f
  9083  0500  09AA               	comf	___aldiv@divisor+2,f
  9084  0501  09AB               	comf	___aldiv@divisor+3,f
  9085  0502  0AA8               	incf	___aldiv@divisor,f
  9086  0503  1903               	skipnz
  9087  0504  0AA9               	incf	___aldiv@divisor+1,f
  9088  0505  1903               	skipnz
  9089  0506  0AAA               	incf	___aldiv@divisor+2,f
  9090  0507  1903               	skipnz
  9091  0508  0AAB               	incf	___aldiv@divisor+3,f
  9092  0509  01B2               	clrf	___aldiv@sign
  9093  050A  0AB2               	incf	___aldiv@sign,f
  9094  050B                     l905:
  9095  050B  1FAF               	btfss	___aldiv@dividend+3,7
  9096  050C  2D0E               	goto	u2401
  9097  050D  2D0F               	goto	u2400
  9098  050E                     u2401:
  9099  050E  2D1E               	goto	l3870
  9100  050F                     u2400:
  9101  050F                     l3866:
  9102  050F  09AC               	comf	___aldiv@dividend,f
  9103  0510  09AD               	comf	___aldiv@dividend+1,f
  9104  0511  09AE               	comf	___aldiv@dividend+2,f
  9105  0512  09AF               	comf	___aldiv@dividend+3,f
  9106  0513  0AAC               	incf	___aldiv@dividend,f
  9107  0514  1903               	skipnz
  9108  0515  0AAD               	incf	___aldiv@dividend+1,f
  9109  0516  1903               	skipnz
  9110  0517  0AAE               	incf	___aldiv@dividend+2,f
  9111  0518  1903               	skipnz
  9112  0519  0AAF               	incf	___aldiv@dividend+3,f
  9113  051A                     l3868:
  9114  051A  3001               	movlw	1
  9115  051B  00B0               	movwf	??___aldiv
  9116  051C  0830               	movf	??___aldiv,w
  9117  051D  06B2               	xorwf	___aldiv@sign,f
  9118  051E                     l3870:
  9119  051E  3000               	movlw	0
  9120  051F  00B6               	movwf	___aldiv@quotient+3
  9121  0520  3000               	movlw	0
  9122  0521  00B5               	movwf	___aldiv@quotient+2
  9123  0522  3000               	movlw	0
  9124  0523  00B4               	movwf	___aldiv@quotient+1
  9125  0524  3000               	movlw	0
  9126  0525  00B3               	movwf	___aldiv@quotient
  9127  0526                     l3872:
  9128  0526  082B               	movf	___aldiv@divisor+3,w
  9129  0527  042A               	iorwf	___aldiv@divisor+2,w
  9130  0528  0429               	iorwf	___aldiv@divisor+1,w
  9131  0529  0428               	iorwf	___aldiv@divisor,w
  9132  052A  1903               	skipnz
  9133  052B  2D2D               	goto	u2411
  9134  052C  2D2E               	goto	u2410
  9135  052D                     u2411:
  9136  052D  2D6F               	goto	l3892
  9137  052E                     u2410:
  9138  052E                     l3874:
  9139  052E  01B1               	clrf	___aldiv@counter
  9140  052F  0AB1               	incf	___aldiv@counter,f
  9141  0530  2D3C               	goto	l3878
  9142  0531                     l3876:
  9143  0531  3001               	movlw	1
  9144  0532                     u2425:
  9145  0532  35A8               	lslf	___aldiv@divisor,f
  9146  0533  0DA9               	rlf	___aldiv@divisor+1,f
  9147  0534  0DAA               	rlf	___aldiv@divisor+2,f
  9148  0535  0DAB               	rlf	___aldiv@divisor+3,f
  9149  0536  0B89               	decfsz	9,f
  9150  0537  2D32               	goto	u2425
  9151  0538  3001               	movlw	1
  9152  0539  00B0               	movwf	??___aldiv
  9153  053A  0830               	movf	??___aldiv,w
  9154  053B  07B1               	addwf	___aldiv@counter,f
  9155  053C                     l3878:
  9156  053C  1FAB               	btfss	___aldiv@divisor+3,7
  9157  053D  2D3F               	goto	u2431
  9158  053E  2D40               	goto	u2430
  9159  053F                     u2431:
  9160  053F  2D31               	goto	l3876
  9161  0540                     u2430:
  9162  0540                     l3880:
  9163  0540  3001               	movlw	1
  9164  0541                     u2445:
  9165  0541  35B3               	lslf	___aldiv@quotient,f
  9166  0542  0DB4               	rlf	___aldiv@quotient+1,f
  9167  0543  0DB5               	rlf	___aldiv@quotient+2,f
  9168  0544  0DB6               	rlf	___aldiv@quotient+3,f
  9169  0545  0B89               	decfsz	9,f
  9170  0546  2D41               	goto	u2445
  9171  0547                     l3882:
  9172  0547  082B               	movf	___aldiv@divisor+3,w
  9173  0548  022F               	subwf	___aldiv@dividend+3,w
  9174  0549  1D03               	skipz
  9175  054A  2D55               	goto	u2455
  9176  054B  082A               	movf	___aldiv@divisor+2,w
  9177  054C  022E               	subwf	___aldiv@dividend+2,w
  9178  054D  1D03               	skipz
  9179  054E  2D55               	goto	u2455
  9180  054F  0829               	movf	___aldiv@divisor+1,w
  9181  0550  022D               	subwf	___aldiv@dividend+1,w
  9182  0551  1D03               	skipz
  9183  0552  2D55               	goto	u2455
  9184  0553  0828               	movf	___aldiv@divisor,w
  9185  0554  022C               	subwf	___aldiv@dividend,w
  9186  0555                     u2455:
  9187  0555  1C03               	skipc
  9188  0556  2D58               	goto	u2451
  9189  0557  2D59               	goto	u2450
  9190  0558                     u2451:
  9191  0558  2D62               	goto	l3888
  9192  0559                     u2450:
  9193  0559                     l3884:
  9194  0559  0828               	movf	___aldiv@divisor,w
  9195  055A  02AC               	subwf	___aldiv@dividend,f
  9196  055B  0829               	movf	___aldiv@divisor+1,w
  9197  055C  3BAD               	subwfb	___aldiv@dividend+1,f
  9198  055D  082A               	movf	___aldiv@divisor+2,w
  9199  055E  3BAE               	subwfb	___aldiv@dividend+2,f
  9200  055F  082B               	movf	___aldiv@divisor+3,w
  9201  0560  3BAF               	subwfb	___aldiv@dividend+3,f
  9202  0561                     l3886:
  9203  0561  1433               	bsf	___aldiv@quotient,0
  9204  0562                     l3888:
  9205  0562  3001               	movlw	1
  9206  0563                     u2465:
  9207  0563  36AB               	lsrf	___aldiv@divisor+3,f
  9208  0564  0CAA               	rrf	___aldiv@divisor+2,f
  9209  0565  0CA9               	rrf	___aldiv@divisor+1,f
  9210  0566  0CA8               	rrf	___aldiv@divisor,f
  9211  0567  0B89               	decfsz	9,f
  9212  0568  2D63               	goto	u2465
  9213  0569                     l3890:
  9214  0569  3001               	movlw	1
  9215  056A  02B1               	subwf	___aldiv@counter,f
  9216  056B  1D03               	btfss	3,2
  9217  056C  2D6E               	goto	u2471
  9218  056D  2D6F               	goto	u2470
  9219  056E                     u2471:
  9220  056E  2D40               	goto	l3880
  9221  056F                     u2470:
  9222  056F                     l3892:
  9223  056F  0832               	movf	___aldiv@sign,w
  9224  0570  1903               	btfsc	3,2
  9225  0571  2D73               	goto	u2481
  9226  0572  2D74               	goto	u2480
  9227  0573                     u2481:
  9228  0573  2D7F               	goto	l3896
  9229  0574                     u2480:
  9230  0574                     l3894:
  9231  0574  09B3               	comf	___aldiv@quotient,f
  9232  0575  09B4               	comf	___aldiv@quotient+1,f
  9233  0576  09B5               	comf	___aldiv@quotient+2,f
  9234  0577  09B6               	comf	___aldiv@quotient+3,f
  9235  0578  0AB3               	incf	___aldiv@quotient,f
  9236  0579  1903               	skipnz
  9237  057A  0AB4               	incf	___aldiv@quotient+1,f
  9238  057B  1903               	skipnz
  9239  057C  0AB5               	incf	___aldiv@quotient+2,f
  9240  057D  1903               	skipnz
  9241  057E  0AB6               	incf	___aldiv@quotient+3,f
  9242  057F                     l3896:
  9243  057F  0836               	movf	___aldiv@quotient+3,w
  9244  0580  00AB               	movwf	?___aldiv+3
  9245  0581  0835               	movf	___aldiv@quotient+2,w
  9246  0582  00AA               	movwf	?___aldiv+2
  9247  0583  0834               	movf	___aldiv@quotient+1,w
  9248  0584  00A9               	movwf	?___aldiv+1
  9249  0585  0833               	movf	___aldiv@quotient,w
  9250  0586  00A8               	movwf	?___aldiv
  9251  0587                     l915:
  9252  0587  0008               	return
  9253  0588                     __end_of___aldiv:
  9254                           
  9255                           	psect	text27
  9256  0DC8                     __ptext27:	
  9257 ;; *************** function _lowBattery *****************
  9258 ;; Defined at:
  9259 ;;		line 235 in file "main.c"
  9260 ;; Parameters:    Size  Location     Type
  9261 ;;		None
  9262 ;; Auto vars:     Size  Location     Type
  9263 ;;		None
  9264 ;; Return value:  Size  Location     Type
  9265 ;;                  1    wreg      void 
  9266 ;; Registers used:
  9267 ;;		wreg, status,2, status,0, pclath, cstack
  9268 ;; Tracked objects:
  9269 ;;		On entry : 0/0
  9270 ;;		On exit  : 0/0
  9271 ;;		Unchanged: 0/0
  9272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9273 ;;      Params:         0       0       0       0       0       0       0       0
  9274 ;;      Locals:         0       0       0       0       0       0       0       0
  9275 ;;      Temps:          0       2       0       0       0       0       0       0
  9276 ;;      Totals:         0       2       0       0       0       0       0       0
  9277 ;;Total ram usage:        2 bytes
  9278 ;; Hardware stack levels used: 1
  9279 ;; Hardware stack levels required when called: 5
  9280 ;; This function calls:
  9281 ;;		_setLEDColor
  9282 ;; This function is called by:
  9283 ;;		_main
  9284 ;; This function uses a non-reentrant model
  9285 ;;
  9286                           
  9287                           
  9288                           ;psect for function _lowBattery
  9289  0DC8                     _lowBattery:
  9290  0DC8                     l4072:	
  9291                           ;incstack = 0
  9292                           ; Regs used in _lowBattery: [wreg+status,2+status,0+pclath+cstack]
  9293                           
  9294                           
  9295                           ;main.c: 236:   interfaceState = STATE_LOWBATTERY;
  9296  0DC8  3003               	movlw	3
  9297  0DC9  0020               	movlb	0	; select bank0
  9298  0DCA  00A0               	movwf	??_lowBattery
  9299  0DCB  0820               	movf	??_lowBattery,w
  9300  0DCC  00F8               	movwf	_interfaceState
  9301  0DCD                     l4074:
  9302                           
  9303                           ;main.c: 237:   setLEDColor(255, 0, 0);
  9304  0DCD  01F3               	clrf	setLEDColor@green
  9305  0DCE  01F4               	clrf	setLEDColor@blue
  9306  0DCF  30FF               	movlw	255
  9307  0DD0  318B  23FD  318D   	fcall	_setLEDColor
  9308  0DD3                     l4076:
  9309                           
  9310                           ;main.c: 238:   _delay((unsigned long)((250)*(4000000/4000.0)));
  9311  0DD3  3002               	movlw	2
  9312  0DD4  0020               	movlb	0	; select bank0
  9313  0DD5  00A1               	movwf	??_lowBattery+1
  9314  0DD6  3045               	movlw	69
  9315  0DD7  00A0               	movwf	??_lowBattery
  9316  0DD8  30A9               	movlw	169
  9317  0DD9                     u3137:
  9318  0DD9  0B89               	decfsz	9,f
  9319  0DDA  2DD9               	goto	u3137
  9320  0DDB  0BA0               	decfsz	??_lowBattery,f
  9321  0DDC  2DD9               	goto	u3137
  9322  0DDD  0BA1               	decfsz	??_lowBattery+1,f
  9323  0DDE  2DD9               	goto	u3137
  9324  0DDF  3200               	nop2
  9325                           
  9326                           ;main.c: 239:   setLEDColor(0, 0, 0);
  9327  0DE0  01F3               	clrf	setLEDColor@green
  9328  0DE1  01F4               	clrf	setLEDColor@blue
  9329  0DE2  3000               	movlw	0
  9330  0DE3  318B  23FD  318D   	fcall	_setLEDColor
  9331  0DE6                     l4078:
  9332                           
  9333                           ;main.c: 240:   _delay((unsigned long)((500)*(4000000/4000.0)));
  9334  0DE6  3003               	movlw	3
  9335  0DE7  0020               	movlb	0	; select bank0
  9336  0DE8  00A1               	movwf	??_lowBattery+1
  9337  0DE9  308A               	movlw	138
  9338  0DEA  00A0               	movwf	??_lowBattery
  9339  0DEB  3055               	movlw	85
  9340  0DEC                     u3147:
  9341  0DEC  0B89               	decfsz	9,f
  9342  0DED  2DEC               	goto	u3147
  9343  0DEE  0BA0               	decfsz	??_lowBattery,f
  9344  0DEF  2DEC               	goto	u3147
  9345  0DF0  0BA1               	decfsz	??_lowBattery+1,f
  9346  0DF1  2DEC               	goto	u3147
  9347  0DF2  3200               	nop2
  9348  0DF3                     l659:
  9349  0DF3  0008               	return
  9350  0DF4                     __end_of_lowBattery:
  9351                           
  9352                           	psect	text28
  9353  0BFD                     __ptext28:	
  9354 ;; *************** function _setLEDColor *****************
  9355 ;; Defined at:
  9356 ;;		line 214 in file "main.c"
  9357 ;; Parameters:    Size  Location     Type
  9358 ;;  red             1    wreg     unsigned char 
  9359 ;;  green           1    3[COMMON] unsigned char 
  9360 ;;  blue            1    4[COMMON] unsigned char 
  9361 ;; Auto vars:     Size  Location     Type
  9362 ;;  red             1    6[COMMON] unsigned char 
  9363 ;; Return value:  Size  Location     Type
  9364 ;;                  1    wreg      void 
  9365 ;; Registers used:
  9366 ;;		wreg, status,2, status,0
  9367 ;; Tracked objects:
  9368 ;;		On entry : 0/0
  9369 ;;		On exit  : 0/0
  9370 ;;		Unchanged: 0/0
  9371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9372 ;;      Params:         2       0       0       0       0       0       0       0
  9373 ;;      Locals:         1       0       0       0       0       0       0       0
  9374 ;;      Temps:          1       0       0       0       0       0       0       0
  9375 ;;      Totals:         4       0       0       0       0       0       0       0
  9376 ;;Total ram usage:        4 bytes
  9377 ;; Hardware stack levels used: 1
  9378 ;; Hardware stack levels required when called: 4
  9379 ;; This function calls:
  9380 ;;		Nothing
  9381 ;; This function is called by:
  9382 ;;		_lowBattery
  9383 ;;		_selectSomething
  9384 ;;		_selectFrequency
  9385 ;;		_selectCurrent
  9386 ;;		_selectIncrease
  9387 ;;		_selectDecrease
  9388 ;;		_selectCurrentValue
  9389 ;;		_selectFrequencyValue
  9390 ;;		_process_remote_command
  9391 ;;		_selectResetValue
  9392 ;; This function uses a non-reentrant model
  9393 ;;
  9394                           
  9395                           
  9396                           ;psect for function _setLEDColor
  9397  0BFD                     _setLEDColor:
  9398                           
  9399                           ;incstack = 0
  9400                           ; Regs used in _setLEDColor: [wreg+status,2+status,0]
  9401                           ;setLEDColor@red stored from wreg
  9402  0BFD  00F6               	movwf	setLEDColor@red
  9403  0BFE                     l3828:
  9404                           
  9405                           ;main.c: 214: void setLEDColor(uint8_t red, uint8_t green, uint8_t blue);main.c: 215: {;
      +                          main.c: 221:   if (0 == blue){
  9406  0BFE  0874               	movf	setLEDColor@blue,w
  9407  0BFF  1D03               	btfss	3,2
  9408  0C00  2C02               	goto	u2341
  9409  0C01  2C03               	goto	u2340
  9410  0C02                     u2341:
  9411  0C02  2C06               	goto	l3832
  9412  0C03                     u2340:
  9413  0C03                     l3830:
  9414                           
  9415                           ;main.c: 222:     TRISC |= 0b00100000;
  9416  0C03  0021               	movlb	1	; select bank1
  9417  0C04  168E               	bsf	14,5	;volatile
  9418                           
  9419                           ;main.c: 223:   } else {
  9420  0C05  2C0B               	goto	l3834
  9421  0C06                     l3832:
  9422                           
  9423                           ;main.c: 224:     TRISC &= 0b11011111;
  9424  0C06  30DF               	movlw	223
  9425  0C07  00F5               	movwf	??_setLEDColor
  9426  0C08  0875               	movf	??_setLEDColor,w
  9427  0C09  0021               	movlb	1	; select bank1
  9428  0C0A  058E               	andwf	14,f	;volatile
  9429  0C0B                     l3834:
  9430                           
  9431                           ;main.c: 226:   CCPR1L = 255U - blue;
  9432  0C0B  0974               	comf	setLEDColor@blue,w
  9433  0C0C  0025               	movlb	5	; select bank5
  9434  0C0D  0091               	movwf	17	;volatile
  9435  0C0E                     l3836:
  9436                           
  9437                           ;main.c: 228:   PWM3DCH = red;
  9438  0C0E  0876               	movf	setLEDColor@red,w
  9439  0C0F  002C               	movlb	12	; select bank12
  9440  0C10  0098               	movwf	24	;volatile
  9441  0C11                     l3838:
  9442                           
  9443                           ;main.c: 230:   PWM4DCH = green;
  9444  0C11  0873               	movf	setLEDColor@green,w
  9445  0C12  009B               	movwf	27	;volatile
  9446  0C13                     l656:
  9447  0C13  0008               	return
  9448  0C14                     __end_of_setLEDColor:
  9449                           
  9450                           	psect	text29
  9451  0F41                     __ptext29:	
  9452 ;; *************** function _initLED *****************
  9453 ;; Defined at:
  9454 ;;		line 173 in file "main.c"
  9455 ;; Parameters:    Size  Location     Type
  9456 ;;		None
  9457 ;; Auto vars:     Size  Location     Type
  9458 ;;		None
  9459 ;; Return value:  Size  Location     Type
  9460 ;;                  1    wreg      void 
  9461 ;; Registers used:
  9462 ;;		wreg, status,2, status,0
  9463 ;; Tracked objects:
  9464 ;;		On entry : 0/0
  9465 ;;		On exit  : 0/0
  9466 ;;		Unchanged: 0/0
  9467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9468 ;;      Params:         0       0       0       0       0       0       0       0
  9469 ;;      Locals:         0       0       0       0       0       0       0       0
  9470 ;;      Temps:          1       0       0       0       0       0       0       0
  9471 ;;      Totals:         1       0       0       0       0       0       0       0
  9472 ;;Total ram usage:        1 bytes
  9473 ;; Hardware stack levels used: 1
  9474 ;; Hardware stack levels required when called: 4
  9475 ;; This function calls:
  9476 ;;		Nothing
  9477 ;; This function is called by:
  9478 ;;		_main
  9479 ;; This function uses a non-reentrant model
  9480 ;;
  9481                           
  9482                           
  9483                           ;psect for function _initLED
  9484  0F41                     _initLED:
  9485  0F41                     l3244:	
  9486                           ;incstack = 0
  9487                           ; Regs used in _initLED: [wreg+status,2+status,0]
  9488                           
  9489                           
  9490                           ;main.c: 176:   PR2 = 255;
  9491  0F41  30FF               	movlw	255
  9492  0F42  0020               	movlb	0	; select bank0
  9493  0F43  009B               	movwf	27	;volatile
  9494  0F44                     l3246:
  9495                           
  9496                           ;main.c: 177:   T2CONbits.T2CKPS = 0b10;
  9497  0F44  081C               	movf	28,w	;volatile
  9498  0F45  39FC               	andlw	-4
  9499  0F46  3802               	iorlw	2
  9500  0F47  009C               	movwf	28	;volatile
  9501  0F48                     l3248:
  9502                           
  9503                           ;main.c: 178:   T2CONbits.TMR2ON = 1;
  9504  0F48  151C               	bsf	28,2	;volatile
  9505  0F49                     l3250:
  9506                           
  9507                           ;main.c: 182:   TRISC |= 0b00010000;
  9508  0F49  0021               	movlb	1	; select bank1
  9509  0F4A  160E               	bsf	14,4	;volatile
  9510  0F4B                     l3252:
  9511                           
  9512                           ;main.c: 183:   RC4PPS = 0b01110;
  9513  0F4B  300E               	movlw	14
  9514  0F4C  003D               	movlb	29	; select bank29
  9515  0F4D  00A4               	movwf	36	;volatile
  9516                           
  9517                           ;main.c: 184:   CCPTMRSbits.P3TSEL = 0b00;
  9518  0F4E  30CF               	movlw	-49
  9519  0F4F  0025               	movlb	5	; select bank5
  9520  0F50  059E               	andwf	30,f	;volatile
  9521  0F51                     l3254:
  9522                           
  9523                           ;main.c: 185:   PWM3DCH = 0;
  9524  0F51  002C               	movlb	12	; select bank12
  9525  0F52  0198               	clrf	24	;volatile
  9526  0F53                     l3256:
  9527                           
  9528                           ;main.c: 186:   PWM3DCLbits.PWM3DCL = 0;
  9529  0F53  303F               	movlw	-193
  9530  0F54  0597               	andwf	23,f	;volatile
  9531  0F55                     l3258:
  9532                           
  9533                           ;main.c: 187:   PWM3CONbits.PWM3POL = 1;
  9534  0F55  1619               	bsf	25,4	;volatile
  9535  0F56                     l3260:
  9536                           
  9537                           ;main.c: 188:   TRISC &= 0b11101111;
  9538  0F56  30EF               	movlw	239
  9539  0F57  00F3               	movwf	??_initLED
  9540  0F58  0873               	movf	??_initLED,w
  9541  0F59  0021               	movlb	1	; select bank1
  9542  0F5A  058E               	andwf	14,f	;volatile
  9543  0F5B                     l3262:
  9544                           
  9545                           ;main.c: 189:   PWM3CONbits.PWM3EN = 1;
  9546  0F5B  002C               	movlb	12	; select bank12
  9547  0F5C  1799               	bsf	25,7	;volatile
  9548  0F5D                     l3264:
  9549                           
  9550                           ;main.c: 193:   TRISA |= 0b00100000;
  9551  0F5D  0021               	movlb	1	; select bank1
  9552  0F5E  168C               	bsf	12,5	;volatile
  9553  0F5F                     l3266:
  9554                           
  9555                           ;main.c: 194:   RA5PPS = 0b01111;
  9556  0F5F  300F               	movlw	15
  9557  0F60  003D               	movlb	29	; select bank29
  9558  0F61  0095               	movwf	21	;volatile
  9559  0F62                     l3268:
  9560                           
  9561                           ;main.c: 195:   CCPTMRSbits.P4TSEL = 0b00;
  9562  0F62  303F               	movlw	-193
  9563  0F63  0025               	movlb	5	; select bank5
  9564  0F64  059E               	andwf	30,f	;volatile
  9565  0F65                     l3270:
  9566                           
  9567                           ;main.c: 196:   PWM4DCH = 0;
  9568  0F65  002C               	movlb	12	; select bank12
  9569  0F66  019B               	clrf	27	;volatile
  9570  0F67                     l3272:
  9571                           
  9572                           ;main.c: 197:   PWM4DCLbits.PWM4DCL = 0;
  9573  0F67  303F               	movlw	-193
  9574  0F68  059A               	andwf	26,f	;volatile
  9575  0F69                     l3274:
  9576                           
  9577                           ;main.c: 198:   PWM4CONbits.PWM4POL = 1;
  9578  0F69  161C               	bsf	28,4	;volatile
  9579  0F6A                     l3276:
  9580                           
  9581                           ;main.c: 199:   TRISA &= 0b11011111;
  9582  0F6A  30DF               	movlw	223
  9583  0F6B  00F3               	movwf	??_initLED
  9584  0F6C  0873               	movf	??_initLED,w
  9585  0F6D  0021               	movlb	1	; select bank1
  9586  0F6E  058C               	andwf	12,f	;volatile
  9587  0F6F                     l3278:
  9588                           
  9589                           ;main.c: 200:   PWM4CONbits.PWM4EN = 1;
  9590  0F6F  002C               	movlb	12	; select bank12
  9591  0F70  179C               	bsf	28,7	;volatile
  9592  0F71                     l3280:
  9593                           
  9594                           ;main.c: 206:   TRISC |= 0b00100000;
  9595  0F71  0021               	movlb	1	; select bank1
  9596  0F72  168E               	bsf	14,5	;volatile
  9597                           
  9598                           ;main.c: 207:   RC5PPS = 0b01100;
  9599  0F73  300C               	movlw	12
  9600  0F74  003D               	movlb	29	; select bank29
  9601  0F75  00A5               	movwf	37	;volatile
  9602  0F76                     l3282:
  9603                           
  9604                           ;main.c: 208:   CCP1CONbits.CCP1M = 0b1100;
  9605  0F76  0025               	movlb	5	; select bank5
  9606  0F77  0813               	movf	19,w	;volatile
  9607  0F78  39F0               	andlw	-16
  9608  0F79  380C               	iorlw	12
  9609  0F7A  0093               	movwf	19	;volatile
  9610  0F7B                     l3284:
  9611                           
  9612                           ;main.c: 209:   CCPR1L = 255;
  9613  0F7B  30FF               	movlw	255
  9614  0F7C  0091               	movwf	17	;volatile
  9615                           
  9616                           ;main.c: 210:   CCP1CONbits.DC1B = 0x3;
  9617  0F7D  3030               	movlw	48
  9618  0F7E  0493               	iorwf	19,f	;volatile
  9619                           
  9620                           ;main.c: 211:   TRISC &= 0b11011111;
  9621  0F7F  30DF               	movlw	223
  9622  0F80  00F3               	movwf	??_initLED
  9623  0F81  0873               	movf	??_initLED,w
  9624  0F82  0021               	movlb	1	; select bank1
  9625  0F83  058E               	andwf	14,f	;volatile
  9626  0F84                     l651:
  9627  0F84  0008               	return
  9628  0F85                     __end_of_initLED:
  9629                           
  9630                           	psect	text30
  9631  0CDD                     __ptext30:	
  9632 ;; *************** function _SYSTEM_Initialize *****************
  9633 ;; Defined at:
  9634 ;;		line 50 in file "mcc_generated_files/mcc.c"
  9635 ;; Parameters:    Size  Location     Type
  9636 ;;		None
  9637 ;; Auto vars:     Size  Location     Type
  9638 ;;		None
  9639 ;; Return value:  Size  Location     Type
  9640 ;;                  1    wreg      void 
  9641 ;; Registers used:
  9642 ;;		wreg, status,2, status,0, pclath, cstack
  9643 ;; Tracked objects:
  9644 ;;		On entry : 0/0
  9645 ;;		On exit  : 0/0
  9646 ;;		Unchanged: 0/0
  9647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9648 ;;      Params:         0       0       0       0       0       0       0       0
  9649 ;;      Locals:         0       0       0       0       0       0       0       0
  9650 ;;      Temps:          0       0       0       0       0       0       0       0
  9651 ;;      Totals:         0       0       0       0       0       0       0       0
  9652 ;;Total ram usage:        0 bytes
  9653 ;; Hardware stack levels used: 1
  9654 ;; Hardware stack levels required when called: 6
  9655 ;; This function calls:
  9656 ;;		_DAC_Initialize
  9657 ;;		_EUSART_Initialize
  9658 ;;		_EXT_INT_Initialize
  9659 ;;		_OPA1_Initialize
  9660 ;;		_OPA2_Initialize
  9661 ;;		_OSCILLATOR_Initialize
  9662 ;;		_PIN_MANAGER_Initialize
  9663 ;;		_TMR0_Initialize
  9664 ;;		_TMR1_Initialize
  9665 ;;		_TMR2_Initialize
  9666 ;;		_TMR4_Initialize
  9667 ;;		_WDT_Initialize
  9668 ;; This function is called by:
  9669 ;;		_main
  9670 ;; This function uses a non-reentrant model
  9671 ;;
  9672                           
  9673                           
  9674                           ;psect for function _SYSTEM_Initialize
  9675  0CDD                     _SYSTEM_Initialize:
  9676  0CDD                     l3182:	
  9677                           ;incstack = 0
  9678                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9679                           
  9680                           
  9681                           ;mcc_generated_files/mcc.c: 52:     PIN_MANAGER_Initialize();
  9682  0CDD  318E  2625  318C   	fcall	_PIN_MANAGER_Initialize
  9683                           
  9684                           ;mcc_generated_files/mcc.c: 53:     OSCILLATOR_Initialize();
  9685  0CE0  318B  2352  318C   	fcall	_OSCILLATOR_Initialize
  9686  0CE3                     l3184:
  9687                           
  9688                           ;mcc_generated_files/mcc.c: 54:     WDT_Initialize();
  9689  0CE3  318A  22EF  318C   	fcall	_WDT_Initialize
  9690  0CE6                     l3186:
  9691                           
  9692                           ;mcc_generated_files/mcc.c: 55:     DAC_Initialize();
  9693  0CE6  318B  2309  318C   	fcall	_DAC_Initialize
  9694  0CE9                     l3188:
  9695                           
  9696                           ;mcc_generated_files/mcc.c: 56:     OPA1_Initialize();
  9697  0CE9  318A  22F2  318C   	fcall	_OPA1_Initialize
  9698  0CEC                     l3190:
  9699                           
  9700                           ;mcc_generated_files/mcc.c: 57:     TMR4_Initialize();
  9701  0CEC  318B  23D6  318C   	fcall	_TMR4_Initialize
  9702  0CEF                     l3192:
  9703                           
  9704                           ;mcc_generated_files/mcc.c: 58:     OPA2_Initialize();
  9705  0CEF  318A  22F6  318C   	fcall	_OPA2_Initialize
  9706  0CF2                     l3194:
  9707                           
  9708                           ;mcc_generated_files/mcc.c: 59:     TMR1_Initialize();
  9709  0CF2  318C  242C  318C   	fcall	_TMR1_Initialize
  9710  0CF5                     l3196:
  9711                           
  9712                           ;mcc_generated_files/mcc.c: 60:     TMR2_Initialize();
  9713  0CF5  318B  235A  318C   	fcall	_TMR2_Initialize
  9714  0CF8                     l3198:
  9715                           
  9716                           ;mcc_generated_files/mcc.c: 61:     EXT_INT_Initialize();
  9717  0CF8  318B  236C  318C   	fcall	_EXT_INT_Initialize
  9718  0CFB                     l3200:
  9719                           
  9720                           ;mcc_generated_files/mcc.c: 62:     TMR0_Initialize();
  9721  0CFB  318B  23B2  318C   	fcall	_TMR0_Initialize
  9722  0CFE                     l3202:
  9723                           
  9724                           ;mcc_generated_files/mcc.c: 63:     EUSART_Initialize();
  9725  0CFE  318C  2499  318C   	fcall	_EUSART_Initialize
  9726  0D01                     l50:
  9727  0D01  0008               	return
  9728  0D02                     __end_of_SYSTEM_Initialize:
  9729                           
  9730                           	psect	text31
  9731  0AEF                     __ptext31:	
  9732 ;; *************** function _WDT_Initialize *****************
  9733 ;; Defined at:
  9734 ;;		line 78 in file "mcc_generated_files/mcc.c"
  9735 ;; Parameters:    Size  Location     Type
  9736 ;;		None
  9737 ;; Auto vars:     Size  Location     Type
  9738 ;;		None
  9739 ;; Return value:  Size  Location     Type
  9740 ;;                  1    wreg      void 
  9741 ;; Registers used:
  9742 ;;		status,2
  9743 ;; Tracked objects:
  9744 ;;		On entry : 0/0
  9745 ;;		On exit  : 0/0
  9746 ;;		Unchanged: 0/0
  9747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9748 ;;      Params:         0       0       0       0       0       0       0       0
  9749 ;;      Locals:         0       0       0       0       0       0       0       0
  9750 ;;      Temps:          0       0       0       0       0       0       0       0
  9751 ;;      Totals:         0       0       0       0       0       0       0       0
  9752 ;;Total ram usage:        0 bytes
  9753 ;; Hardware stack levels used: 1
  9754 ;; Hardware stack levels required when called: 4
  9755 ;; This function calls:
  9756 ;;		Nothing
  9757 ;; This function is called by:
  9758 ;;		_SYSTEM_Initialize
  9759 ;; This function uses a non-reentrant model
  9760 ;;
  9761                           
  9762                           
  9763                           ;psect for function _WDT_Initialize
  9764  0AEF                     _WDT_Initialize:
  9765  0AEF                     l2942:	
  9766                           ;incstack = 0
  9767                           ; Regs used in _WDT_Initialize: [status,2]
  9768                           
  9769                           
  9770                           ;mcc_generated_files/mcc.c: 81:     WDTCON = 0b00000000;
  9771  0AEF  0021               	movlb	1	; select bank1
  9772  0AF0  0197               	clrf	23	;volatile
  9773  0AF1                     l56:
  9774  0AF1  0008               	return
  9775  0AF2                     __end_of_WDT_Initialize:
  9776                           
  9777                           	psect	text32
  9778  0BD6                     __ptext32:	
  9779 ;; *************** function _TMR4_Initialize *****************
  9780 ;; Defined at:
  9781 ;;		line 65 in file "mcc_generated_files/tmr4.c"
  9782 ;; Parameters:    Size  Location     Type
  9783 ;;		None
  9784 ;; Auto vars:     Size  Location     Type
  9785 ;;		None
  9786 ;; Return value:  Size  Location     Type
  9787 ;;                  1    wreg      void 
  9788 ;; Registers used:
  9789 ;;		wreg, status,2, status,0, pclath, cstack
  9790 ;; Tracked objects:
  9791 ;;		On entry : 0/0
  9792 ;;		On exit  : 0/0
  9793 ;;		Unchanged: 0/0
  9794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9795 ;;      Params:         0       0       0       0       0       0       0       0
  9796 ;;      Locals:         0       0       0       0       0       0       0       0
  9797 ;;      Temps:          0       0       0       0       0       0       0       0
  9798 ;;      Totals:         0       0       0       0       0       0       0       0
  9799 ;;Total ram usage:        0 bytes
  9800 ;; Hardware stack levels used: 1
  9801 ;; Hardware stack levels required when called: 5
  9802 ;; This function calls:
  9803 ;;		_TMR4_SetInterruptHandler
  9804 ;; This function is called by:
  9805 ;;		_SYSTEM_Initialize
  9806 ;; This function uses a non-reentrant model
  9807 ;;
  9808                           
  9809                           
  9810                           ;psect for function _TMR4_Initialize
  9811  0BD6                     _TMR4_Initialize:
  9812  0BD6                     l2946:	
  9813                           ;incstack = 0
  9814                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9815                           
  9816                           
  9817                           ;mcc_generated_files/tmr4.c: 70:     PR4 = 0x04;
  9818  0BD6  3004               	movlw	4
  9819  0BD7  0028               	movlb	8	; select bank8
  9820  0BD8  0096               	movwf	22	;volatile
  9821  0BD9                     l2948:
  9822                           
  9823                           ;mcc_generated_files/tmr4.c: 73:     TMR4 = 0x00;
  9824  0BD9  0195               	clrf	21	;volatile
  9825  0BDA                     l2950:
  9826                           
  9827                           ;mcc_generated_files/tmr4.c: 76:     PIR2bits.TMR4IF = 0;
  9828  0BDA  0020               	movlb	0	; select bank0
  9829  0BDB  1092               	bcf	18,1	;volatile
  9830  0BDC                     l2952:
  9831                           
  9832                           ;mcc_generated_files/tmr4.c: 79:     PIE2bits.TMR4IE = 1;
  9833  0BDC  0021               	movlb	1	; select bank1
  9834  0BDD  1492               	bsf	18,1	;volatile
  9835  0BDE                     l2954:
  9836                           
  9837                           ;mcc_generated_files/tmr4.c: 82:     TMR4_SetInterruptHandler(TMR4_DefaultInterruptHandl
      +                          er);
  9838  0BDE  30FF               	movlw	low _TMR4_DefaultInterruptHandler
  9839  0BDF  00F3               	movwf	TMR4_SetInterruptHandler@InterruptHandler
  9840  0BE0  300E               	movlw	high _TMR4_DefaultInterruptHandler
  9841  0BE1  00F4               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1
  9842  0BE2  318B  2333  318B   	fcall	_TMR4_SetInterruptHandler
  9843  0BE5                     l2956:
  9844                           
  9845                           ;mcc_generated_files/tmr4.c: 85:     T4CON = 0x16;
  9846  0BE5  3016               	movlw	22
  9847  0BE6  0028               	movlb	8	; select bank8
  9848  0BE7  0097               	movwf	23	;volatile
  9849  0BE8                     l402:
  9850  0BE8  0008               	return
  9851  0BE9                     __end_of_TMR4_Initialize:
  9852                           
  9853                           	psect	text33
  9854  0B33                     __ptext33:	
  9855 ;; *************** function _TMR4_SetInterruptHandler *****************
  9856 ;; Defined at:
  9857 ;;		line 133 in file "mcc_generated_files/tmr4.c"
  9858 ;; Parameters:    Size  Location     Type
  9859 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  9860 ;;		 -> TMR4_DefaultInterruptHandler(1), 
  9861 ;; Auto vars:     Size  Location     Type
  9862 ;;		None
  9863 ;; Return value:  Size  Location     Type
  9864 ;;                  1    wreg      void 
  9865 ;; Registers used:
  9866 ;;		wreg
  9867 ;; Tracked objects:
  9868 ;;		On entry : 0/0
  9869 ;;		On exit  : 0/0
  9870 ;;		Unchanged: 0/0
  9871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9872 ;;      Params:         2       0       0       0       0       0       0       0
  9873 ;;      Locals:         0       0       0       0       0       0       0       0
  9874 ;;      Temps:          0       0       0       0       0       0       0       0
  9875 ;;      Totals:         2       0       0       0       0       0       0       0
  9876 ;;Total ram usage:        2 bytes
  9877 ;; Hardware stack levels used: 1
  9878 ;; Hardware stack levels required when called: 4
  9879 ;; This function calls:
  9880 ;;		Nothing
  9881 ;; This function is called by:
  9882 ;;		_TMR4_Initialize
  9883 ;; This function uses a non-reentrant model
  9884 ;;
  9885                           
  9886                           
  9887                           ;psect for function _TMR4_SetInterruptHandler
  9888  0B33                     _TMR4_SetInterruptHandler:
  9889  0B33                     l2730:	
  9890                           ;incstack = 0
  9891                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
  9892                           
  9893                           
  9894                           ;mcc_generated_files/tmr4.c: 134:     TMR4_InterruptHandler = InterruptHandler;
  9895  0B33  0874               	movf	TMR4_SetInterruptHandler@InterruptHandler+1,w
  9896  0B34  0021               	movlb	1	; select bank1
  9897  0B35  00D5               	movwf	(_TMR4_InterruptHandler+1)^(0+128)
  9898  0B36  0873               	movf	TMR4_SetInterruptHandler@InterruptHandler,w
  9899  0B37  00D4               	movwf	_TMR4_InterruptHandler^(0+128)
  9900  0B38                     l424:
  9901  0B38  0008               	return
  9902  0B39                     __end_of_TMR4_SetInterruptHandler:
  9903                           
  9904                           	psect	text34
  9905  0B5A                     __ptext34:	
  9906 ;; *************** function _TMR2_Initialize *****************
  9907 ;; Defined at:
  9908 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  9909 ;; Parameters:    Size  Location     Type
  9910 ;;		None
  9911 ;; Auto vars:     Size  Location     Type
  9912 ;;		None
  9913 ;; Return value:  Size  Location     Type
  9914 ;;                  1    wreg      void 
  9915 ;; Registers used:
  9916 ;;		wreg, status,2
  9917 ;; Tracked objects:
  9918 ;;		On entry : 0/0
  9919 ;;		On exit  : 0/0
  9920 ;;		Unchanged: 0/0
  9921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9922 ;;      Params:         0       0       0       0       0       0       0       0
  9923 ;;      Locals:         0       0       0       0       0       0       0       0
  9924 ;;      Temps:          0       0       0       0       0       0       0       0
  9925 ;;      Totals:         0       0       0       0       0       0       0       0
  9926 ;;Total ram usage:        0 bytes
  9927 ;; Hardware stack levels used: 1
  9928 ;; Hardware stack levels required when called: 4
  9929 ;; This function calls:
  9930 ;;		Nothing
  9931 ;; This function is called by:
  9932 ;;		_SYSTEM_Initialize
  9933 ;; This function uses a non-reentrant model
  9934 ;;
  9935                           
  9936                           
  9937                           ;psect for function _TMR2_Initialize
  9938  0B5A                     _TMR2_Initialize:
  9939  0B5A                     l2972:	
  9940                           ;incstack = 0
  9941                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  9942                           
  9943                           
  9944                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 255;
  9945  0B5A  30FF               	movlw	255
  9946  0B5B  0020               	movlb	0	; select bank0
  9947  0B5C  009B               	movwf	27	;volatile
  9948  0B5D                     l2974:
  9949                           
  9950                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  9951  0B5D  019A               	clrf	26	;volatile
  9952  0B5E                     l2976:
  9953                           
  9954                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  9955  0B5E  1091               	bcf	17,1	;volatile
  9956  0B5F                     l2978:
  9957                           
  9958                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x06;
  9959  0B5F  3006               	movlw	6
  9960  0B60  009C               	movwf	28	;volatile
  9961  0B61                     l305:
  9962  0B61  0008               	return
  9963  0B62                     __end_of_TMR2_Initialize:
  9964                           
  9965                           	psect	text35
  9966  0C2C                     __ptext35:	
  9967 ;; *************** function _TMR1_Initialize *****************
  9968 ;; Defined at:
  9969 ;;		line 65 in file "tmr1.c"
  9970 ;; Parameters:    Size  Location     Type
  9971 ;;		None
  9972 ;; Auto vars:     Size  Location     Type
  9973 ;;		None
  9974 ;; Return value:  Size  Location     Type
  9975 ;;                  1    wreg      void 
  9976 ;; Registers used:
  9977 ;;		wreg, status,2, status,0, pclath, cstack
  9978 ;; Tracked objects:
  9979 ;;		On entry : 0/0
  9980 ;;		On exit  : 0/0
  9981 ;;		Unchanged: 0/0
  9982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9983 ;;      Params:         0       0       0       0       0       0       0       0
  9984 ;;      Locals:         0       0       0       0       0       0       0       0
  9985 ;;      Temps:          1       0       0       0       0       0       0       0
  9986 ;;      Totals:         1       0       0       0       0       0       0       0
  9987 ;;Total ram usage:        1 bytes
  9988 ;; Hardware stack levels used: 1
  9989 ;; Hardware stack levels required when called: 5
  9990 ;; This function calls:
  9991 ;;		_TMR1_SetInterruptHandler
  9992 ;; This function is called by:
  9993 ;;		_SYSTEM_Initialize
  9994 ;; This function uses a non-reentrant model
  9995 ;;
  9996                           
  9997                           
  9998                           ;psect for function _TMR1_Initialize
  9999  0C2C                     _TMR1_Initialize:
 10000  0C2C                     l2960:	
 10001                           ;incstack = 0
 10002                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10003                           
 10004                           
 10005                           ;tmr1.c: 73:     TMR1 = 65528;
 10006  0C2C  30FF               	movlw	255
 10007  0C2D  0020               	movlb	0	; select bank0
 10008  0C2E  0097               	movwf	23	;volatile
 10009  0C2F  30F8               	movlw	248
 10010  0C30  0096               	movwf	22	;volatile
 10011  0C31                     l2962:
 10012                           
 10013                           ;tmr1.c: 76:     timer1ReloadVal= 65528;
 10014  0C31  30F8               	movlw	248
 10015  0C32  00F5               	movwf	??_TMR1_Initialize
 10016  0C33  0875               	movf	??_TMR1_Initialize,w
 10017  0C34  0021               	movlb	1	; select bank1
 10018  0C35  00E0               	movwf	_timer1ReloadVal^(0+128)	;volatile
 10019  0C36                     l2964:
 10020                           
 10021                           ;tmr1.c: 79:     PIR1bits.TMR1IF = 0;
 10022  0C36  0020               	movlb	0	; select bank0
 10023  0C37  1011               	bcf	17,0	;volatile
 10024  0C38                     l2966:
 10025                           
 10026                           ;tmr1.c: 82:     PIE1bits.TMR1IE = 1;
 10027  0C38  0021               	movlb	1	; select bank1
 10028  0C39  1411               	bsf	17,0	;volatile
 10029  0C3A                     l2968:
 10030                           
 10031                           ;tmr1.c: 84:     T1CONbits.TMR1ON = 0;
 10032  0C3A  0020               	movlb	0	; select bank0
 10033  0C3B  1018               	bcf	24,0	;volatile
 10034  0C3C                     l2970:
 10035                           
 10036                           ;tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
 10037  0C3C  304B               	movlw	low _TMR1_DefaultInterruptHandler
 10038  0C3D  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler
 10039  0C3E  300B               	movlw	high _TMR1_DefaultInterruptHandler
 10040  0C3F  00F4               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
 10041  0C40  318B  232D  318C   	fcall	_TMR1_SetInterruptHandler
 10042  0C43                     l501:
 10043  0C43  0008               	return
 10044  0C44                     __end_of_TMR1_Initialize:
 10045                           
 10046                           	psect	text36
 10047  0B2D                     __ptext36:	
 10048 ;; *************** function _TMR1_SetInterruptHandler *****************
 10049 ;; Defined at:
 10050 ;;		line 128 in file "tmr1.c"
 10051 ;; Parameters:    Size  Location     Type
 10052 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
 10053 ;;		 -> TMR1_DefaultInterruptHandler(1), 
 10054 ;; Auto vars:     Size  Location     Type
 10055 ;;		None
 10056 ;; Return value:  Size  Location     Type
 10057 ;;                  1    wreg      void 
 10058 ;; Registers used:
 10059 ;;		wreg
 10060 ;; Tracked objects:
 10061 ;;		On entry : 0/0
 10062 ;;		On exit  : 0/0
 10063 ;;		Unchanged: 0/0
 10064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10065 ;;      Params:         2       0       0       0       0       0       0       0
 10066 ;;      Locals:         0       0       0       0       0       0       0       0
 10067 ;;      Temps:          0       0       0       0       0       0       0       0
 10068 ;;      Totals:         2       0       0       0       0       0       0       0
 10069 ;;Total ram usage:        2 bytes
 10070 ;; Hardware stack levels used: 1
 10071 ;; Hardware stack levels required when called: 4
 10072 ;; This function calls:
 10073 ;;		Nothing
 10074 ;; This function is called by:
 10075 ;;		_TMR1_Initialize
 10076 ;; This function uses a non-reentrant model
 10077 ;;
 10078                           
 10079                           
 10080                           ;psect for function _TMR1_SetInterruptHandler
 10081  0B2D                     _TMR1_SetInterruptHandler:
 10082  0B2D                     l2784:	
 10083                           ;incstack = 0
 10084                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 10085                           
 10086                           
 10087                           ;tmr1.c: 129:     TMR1_InterruptHandler = InterruptHandler;
 10088  0B2D  0874               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 10089  0B2E  0021               	movlb	1	; select bank1
 10090  0B2F  00D3               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
 10091  0B30  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 10092  0B31  00D2               	movwf	_TMR1_InterruptHandler^(0+128)
 10093  0B32                     l517:
 10094  0B32  0008               	return
 10095  0B33                     __end_of_TMR1_SetInterruptHandler:
 10096                           
 10097                           	psect	text37
 10098  0BB2                     __ptext37:	
 10099 ;; *************** function _TMR0_Initialize *****************
 10100 ;; Defined at:
 10101 ;;		line 65 in file "mcc_generated_files/tmr0.c"
 10102 ;; Parameters:    Size  Location     Type
 10103 ;;		None
 10104 ;; Auto vars:     Size  Location     Type
 10105 ;;		None
 10106 ;; Return value:  Size  Location     Type
 10107 ;;                  1    wreg      void 
 10108 ;; Registers used:
 10109 ;;		wreg, status,2, status,0, pclath, cstack
 10110 ;; Tracked objects:
 10111 ;;		On entry : 0/0
 10112 ;;		On exit  : 0/0
 10113 ;;		Unchanged: 0/0
 10114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10115 ;;      Params:         0       0       0       0       0       0       0       0
 10116 ;;      Locals:         0       0       0       0       0       0       0       0
 10117 ;;      Temps:          0       0       0       0       0       0       0       0
 10118 ;;      Totals:         0       0       0       0       0       0       0       0
 10119 ;;Total ram usage:        0 bytes
 10120 ;; Hardware stack levels used: 1
 10121 ;; Hardware stack levels required when called: 5
 10122 ;; This function calls:
 10123 ;;		_TMR0_SetInterruptHandler
 10124 ;; This function is called by:
 10125 ;;		_SYSTEM_Initialize
 10126 ;; This function uses a non-reentrant model
 10127 ;;
 10128                           
 10129                           
 10130                           ;psect for function _TMR0_Initialize
 10131  0BB2                     _TMR0_Initialize:
 10132  0BB2                     l2986:	
 10133                           ;incstack = 0
 10134                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10135                           
 10136                           
 10137                           ;mcc_generated_files/tmr0.c: 70:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD5 
      +                          & 0x3F));
 10138  0BB2  0021               	movlb	1	; select bank1
 10139  0BB3  0815               	movf	21,w	;volatile
 10140  0BB4  39C0               	andlw	192
 10141  0BB5  3815               	iorlw	21
 10142  0BB6  0095               	movwf	21	;volatile
 10143  0BB7                     l2988:
 10144                           
 10145                           ;mcc_generated_files/tmr0.c: 73:     TMR0 = 0x00;
 10146  0BB7  0020               	movlb	0	; select bank0
 10147  0BB8  0195               	clrf	21	;volatile
 10148  0BB9                     l2990:
 10149                           
 10150                           ;mcc_generated_files/tmr0.c: 76:     timer0ReloadVal= 0x00;
 10151  0BB9  01F9               	clrf	_timer0ReloadVal	;volatile
 10152  0BBA                     l2992:
 10153                           
 10154                           ;mcc_generated_files/tmr0.c: 79:     INTCONbits.TMR0IF = 0;
 10155  0BBA  110B               	bcf	11,2	;volatile
 10156  0BBB                     l2994:
 10157                           
 10158                           ;mcc_generated_files/tmr0.c: 82:     INTCONbits.TMR0IE = 0;
 10159  0BBB  128B               	bcf	11,5	;volatile
 10160  0BBC                     l2996:
 10161                           
 10162                           ;mcc_generated_files/tmr0.c: 85:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
 10163  0BBC  30ED               	movlw	low _TMR0_DefaultInterruptHandler
 10164  0BBD  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 10165  0BBE  300A               	movlw	high _TMR0_DefaultInterruptHandler
 10166  0BBF  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 10167  0BC0  318B  2327  318B   	fcall	_TMR0_SetInterruptHandler
 10168  0BC3                     l346:
 10169  0BC3  0008               	return
 10170  0BC4                     __end_of_TMR0_Initialize:
 10171                           
 10172                           	psect	text38
 10173  0B27                     __ptext38:	
 10174 ;; *************** function _TMR0_SetInterruptHandler *****************
 10175 ;; Defined at:
 10176 ;;		line 126 in file "mcc_generated_files/tmr0.c"
 10177 ;; Parameters:    Size  Location     Type
 10178 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
 10179 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 10180 ;; Auto vars:     Size  Location     Type
 10181 ;;		None
 10182 ;; Return value:  Size  Location     Type
 10183 ;;                  1    wreg      void 
 10184 ;; Registers used:
 10185 ;;		wreg
 10186 ;; Tracked objects:
 10187 ;;		On entry : 0/0
 10188 ;;		On exit  : 0/0
 10189 ;;		Unchanged: 0/0
 10190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10191 ;;      Params:         2       0       0       0       0       0       0       0
 10192 ;;      Locals:         0       0       0       0       0       0       0       0
 10193 ;;      Temps:          0       0       0       0       0       0       0       0
 10194 ;;      Totals:         2       0       0       0       0       0       0       0
 10195 ;;Total ram usage:        2 bytes
 10196 ;; Hardware stack levels used: 1
 10197 ;; Hardware stack levels required when called: 4
 10198 ;; This function calls:
 10199 ;;		Nothing
 10200 ;; This function is called by:
 10201 ;;		_TMR0_Initialize
 10202 ;; This function uses a non-reentrant model
 10203 ;;
 10204                           
 10205                           
 10206                           ;psect for function _TMR0_SetInterruptHandler
 10207  0B27                     _TMR0_SetInterruptHandler:
 10208  0B27                     l2728:	
 10209                           ;incstack = 0
 10210                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 10211                           
 10212                           
 10213                           ;mcc_generated_files/tmr0.c: 127:     TMR0_InterruptHandler = InterruptHandler;
 10214  0B27  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 10215  0B28  0021               	movlb	1	; select bank1
 10216  0B29  00D7               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
 10217  0B2A  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 10218  0B2B  00D6               	movwf	_TMR0_InterruptHandler^(0+128)
 10219  0B2C                     l362:
 10220  0B2C  0008               	return
 10221  0B2D                     __end_of_TMR0_SetInterruptHandler:
 10222                           
 10223                           	psect	text39
 10224  0E25                     __ptext39:	
 10225 ;; *************** function _PIN_MANAGER_Initialize *****************
 10226 ;; Defined at:
 10227 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 10228 ;; Parameters:    Size  Location     Type
 10229 ;;		None
 10230 ;; Auto vars:     Size  Location     Type
 10231 ;;		None
 10232 ;; Return value:  Size  Location     Type
 10233 ;;                  1    wreg      void 
 10234 ;; Registers used:
 10235 ;;		wreg, status,2
 10236 ;; Tracked objects:
 10237 ;;		On entry : 0/0
 10238 ;;		On exit  : 0/0
 10239 ;;		Unchanged: 0/0
 10240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10241 ;;      Params:         0       0       0       0       0       0       0       0
 10242 ;;      Locals:         0       0       0       0       0       0       0       0
 10243 ;;      Temps:          0       0       0       0       0       0       0       0
 10244 ;;      Totals:         0       0       0       0       0       0       0       0
 10245 ;;Total ram usage:        0 bytes
 10246 ;; Hardware stack levels used: 1
 10247 ;; Hardware stack levels required when called: 4
 10248 ;; This function calls:
 10249 ;;		Nothing
 10250 ;; This function is called by:
 10251 ;;		_SYSTEM_Initialize
 10252 ;; This function uses a non-reentrant model
 10253 ;;
 10254                           
 10255                           
 10256                           ;psect for function _PIN_MANAGER_Initialize
 10257  0E25                     _PIN_MANAGER_Initialize:
 10258  0E25                     l2904:	
 10259                           ;incstack = 0
 10260                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 10261                           
 10262                           
 10263                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
 10264  0E25  0022               	movlb	2	; select bank2
 10265  0E26  018C               	clrf	12	;volatile
 10266                           
 10267                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
 10268  0E27  018D               	clrf	13	;volatile
 10269                           
 10270                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 10271  0E28  018E               	clrf	14	;volatile
 10272  0E29                     l2906:
 10273                           
 10274                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x04;
 10275  0E29  3004               	movlw	4
 10276  0E2A  0021               	movlb	1	; select bank1
 10277  0E2B  008C               	movwf	12	;volatile
 10278  0E2C                     l2908:
 10279                           
 10280                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x30;
 10281  0E2C  3030               	movlw	48
 10282  0E2D  008D               	movwf	13	;volatile
 10283  0E2E                     l2910:
 10284                           
 10285                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x50;
 10286  0E2E  3050               	movlw	80
 10287  0E2F  008E               	movwf	14	;volatile
 10288  0E30                     l2912:
 10289                           
 10290                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x40;
 10291  0E30  3040               	movlw	64
 10292  0E31  0023               	movlb	3	; select bank3
 10293  0E32  008E               	movwf	14	;volatile
 10294  0E33                     l2914:
 10295                           
 10296                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x10;
 10297  0E33  3010               	movlw	16
 10298  0E34  008D               	movwf	13	;volatile
 10299  0E35                     l2916:
 10300                           
 10301                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x00;
 10302  0E35  018C               	clrf	12	;volatile
 10303  0E36                     l2918:
 10304                           
 10305                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
 10306  0E36  0024               	movlb	4	; select bank4
 10307  0E37  018D               	clrf	13	;volatile
 10308  0E38                     l2920:
 10309                           
 10310                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
 10311  0E38  018C               	clrf	12	;volatile
 10312  0E39                     l2922:
 10313                           
 10314                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x00;
 10315  0E39  018E               	clrf	14	;volatile
 10316  0E3A                     l2924:
 10317                           
 10318                           ;mcc_generated_files/pin_manager.c: 84:     OPTION_REGbits.nWPUEN = 0;
 10319  0E3A  0021               	movlb	1	; select bank1
 10320  0E3B  1395               	bcf	21,7	;volatile
 10321  0E3C                     l2926:
 10322                           
 10323                           ;mcc_generated_files/pin_manager.c: 89:     ODCONA = 0x00;
 10324  0E3C  0025               	movlb	5	; select bank5
 10325  0E3D  018C               	clrf	12	;volatile
 10326  0E3E                     l2928:
 10327                           
 10328                           ;mcc_generated_files/pin_manager.c: 90:     ODCONB = 0x00;
 10329  0E3E  018D               	clrf	13	;volatile
 10330  0E3F                     l2930:
 10331                           
 10332                           ;mcc_generated_files/pin_manager.c: 91:     ODCONC = 0x00;
 10333  0E3F  018E               	clrf	14	;volatile
 10334                           
 10335                           ;mcc_generated_files/pin_manager.c: 96:     SLRCONA = 0x37;
 10336  0E40  3037               	movlw	55
 10337  0E41  0026               	movlb	6	; select bank6
 10338  0E42  008C               	movwf	12	;volatile
 10339                           
 10340                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONB = 0xF0;
 10341  0E43  30F0               	movlw	240
 10342  0E44  008D               	movwf	13	;volatile
 10343                           
 10344                           ;mcc_generated_files/pin_manager.c: 98:     SLRCONC = 0xFF;
 10345  0E45  30FF               	movlw	255
 10346  0E46  008E               	movwf	14	;volatile
 10347                           
 10348                           ;mcc_generated_files/pin_manager.c: 103:     INLVLA = 0x3F;
 10349  0E47  303F               	movlw	63
 10350  0E48  0027               	movlb	7	; select bank7
 10351  0E49  008C               	movwf	12	;volatile
 10352                           
 10353                           ;mcc_generated_files/pin_manager.c: 104:     INLVLB = 0xF0;
 10354  0E4A  30F0               	movlw	240
 10355  0E4B  008D               	movwf	13	;volatile
 10356                           
 10357                           ;mcc_generated_files/pin_manager.c: 105:     INLVLC = 0xFF;
 10358  0E4C  30FF               	movlw	255
 10359  0E4D  008E               	movwf	14	;volatile
 10360  0E4E                     l2932:
 10361                           
 10362                           ;mcc_generated_files/pin_manager.c: 113:     INTCONbits.IOCIE = 1;
 10363  0E4E  158B               	bsf	11,3	;volatile
 10364                           
 10365                           ;mcc_generated_files/pin_manager.c: 116:     INTPPS = 0x02;
 10366  0E4F  3002               	movlw	2
 10367  0E50  003C               	movlb	28	; select bank28
 10368  0E51  0090               	movwf	16	;volatile
 10369                           
 10370                           ;mcc_generated_files/pin_manager.c: 117:     RXPPS = 0x0D;
 10371  0E52  300D               	movlw	13
 10372  0E53  00A4               	movwf	36	;volatile
 10373                           
 10374                           ;mcc_generated_files/pin_manager.c: 118:     RB7PPS = 0x14;
 10375  0E54  3014               	movlw	20
 10376  0E55  003D               	movlb	29	; select bank29
 10377  0E56  009F               	movwf	31	;volatile
 10378  0E57                     l111:
 10379  0E57  0008               	return
 10380  0E58                     __end_of_PIN_MANAGER_Initialize:
 10381                           
 10382                           	psect	text40
 10383  0B52                     __ptext40:	
 10384 ;; *************** function _OSCILLATOR_Initialize *****************
 10385 ;; Defined at:
 10386 ;;		line 66 in file "mcc_generated_files/mcc.c"
 10387 ;; Parameters:    Size  Location     Type
 10388 ;;		None
 10389 ;; Auto vars:     Size  Location     Type
 10390 ;;		None
 10391 ;; Return value:  Size  Location     Type
 10392 ;;                  1    wreg      void 
 10393 ;; Registers used:
 10394 ;;		wreg, status,2
 10395 ;; Tracked objects:
 10396 ;;		On entry : 0/0
 10397 ;;		On exit  : 0/0
 10398 ;;		Unchanged: 0/0
 10399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10400 ;;      Params:         0       0       0       0       0       0       0       0
 10401 ;;      Locals:         0       0       0       0       0       0       0       0
 10402 ;;      Temps:          0       0       0       0       0       0       0       0
 10403 ;;      Totals:         0       0       0       0       0       0       0       0
 10404 ;;Total ram usage:        0 bytes
 10405 ;; Hardware stack levels used: 1
 10406 ;; Hardware stack levels required when called: 4
 10407 ;; This function calls:
 10408 ;;		Nothing
 10409 ;; This function is called by:
 10410 ;;		_SYSTEM_Initialize
 10411 ;; This function uses a non-reentrant model
 10412 ;;
 10413                           
 10414                           
 10415                           ;psect for function _OSCILLATOR_Initialize
 10416  0B52                     _OSCILLATOR_Initialize:
 10417  0B52                     l2934:	
 10418                           ;incstack = 0
 10419                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10420                           
 10421                           
 10422                           ;mcc_generated_files/mcc.c: 69:     OSCCON = 0x6A;
 10423  0B52  306A               	movlw	106
 10424  0B53  0021               	movlb	1	; select bank1
 10425  0B54  0099               	movwf	25	;volatile
 10426  0B55                     l2936:
 10427                           
 10428                           ;mcc_generated_files/mcc.c: 71:     OSCSTAT = 0x00;
 10429  0B55  019A               	clrf	26	;volatile
 10430  0B56                     l2938:
 10431                           
 10432                           ;mcc_generated_files/mcc.c: 73:     OSCTUNE = 0x00;
 10433  0B56  0198               	clrf	24	;volatile
 10434  0B57                     l2940:
 10435                           
 10436                           ;mcc_generated_files/mcc.c: 75:     BORCON = 0x00;
 10437  0B57  0022               	movlb	2	; select bank2
 10438  0B58  0196               	clrf	22	;volatile
 10439  0B59                     l53:
 10440  0B59  0008               	return
 10441  0B5A                     __end_of_OSCILLATOR_Initialize:
 10442                           
 10443                           	psect	text41
 10444  0AF6                     __ptext41:	
 10445 ;; *************** function _OPA2_Initialize *****************
 10446 ;; Defined at:
 10447 ;;		line 58 in file "mcc_generated_files/opa2.c"
 10448 ;; Parameters:    Size  Location     Type
 10449 ;;		None
 10450 ;; Auto vars:     Size  Location     Type
 10451 ;;		None
 10452 ;; Return value:  Size  Location     Type
 10453 ;;                  1    wreg      void 
 10454 ;; Registers used:
 10455 ;;		wreg
 10456 ;; Tracked objects:
 10457 ;;		On entry : 0/0
 10458 ;;		On exit  : 0/0
 10459 ;;		Unchanged: 0/0
 10460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10461 ;;      Params:         0       0       0       0       0       0       0       0
 10462 ;;      Locals:         0       0       0       0       0       0       0       0
 10463 ;;      Temps:          0       0       0       0       0       0       0       0
 10464 ;;      Totals:         0       0       0       0       0       0       0       0
 10465 ;;Total ram usage:        0 bytes
 10466 ;; Hardware stack levels used: 1
 10467 ;; Hardware stack levels required when called: 4
 10468 ;; This function calls:
 10469 ;;		Nothing
 10470 ;; This function is called by:
 10471 ;;		_SYSTEM_Initialize
 10472 ;;		_main
 10473 ;; This function uses a non-reentrant model
 10474 ;;
 10475                           
 10476                           
 10477                           ;psect for function _OPA2_Initialize
 10478  0AF6                     _OPA2_Initialize:
 10479  0AF6                     l2958:	
 10480                           ;incstack = 0
 10481                           ; Regs used in _OPA2_Initialize: [wreg]
 10482                           
 10483                           
 10484                           ;mcc_generated_files/opa2.c: 61:     OPA2CON = 0xC2;
 10485  0AF6  30C2               	movlw	194
 10486  0AF7  002A               	movlb	10	; select bank10
 10487  0AF8  0095               	movwf	21	;volatile
 10488  0AF9                     l329:
 10489  0AF9  0008               	return
 10490  0AFA                     __end_of_OPA2_Initialize:
 10491                           
 10492                           	psect	text42
 10493  0AF2                     __ptext42:	
 10494 ;; *************** function _OPA1_Initialize *****************
 10495 ;; Defined at:
 10496 ;;		line 58 in file "mcc_generated_files/opa1.c"
 10497 ;; Parameters:    Size  Location     Type
 10498 ;;		None
 10499 ;; Auto vars:     Size  Location     Type
 10500 ;;		None
 10501 ;; Return value:  Size  Location     Type
 10502 ;;                  1    wreg      void 
 10503 ;; Registers used:
 10504 ;;		wreg
 10505 ;; Tracked objects:
 10506 ;;		On entry : 0/0
 10507 ;;		On exit  : 0/0
 10508 ;;		Unchanged: 0/0
 10509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10510 ;;      Params:         0       0       0       0       0       0       0       0
 10511 ;;      Locals:         0       0       0       0       0       0       0       0
 10512 ;;      Temps:          0       0       0       0       0       0       0       0
 10513 ;;      Totals:         0       0       0       0       0       0       0       0
 10514 ;;Total ram usage:        0 bytes
 10515 ;; Hardware stack levels used: 1
 10516 ;; Hardware stack levels required when called: 4
 10517 ;; This function calls:
 10518 ;;		Nothing
 10519 ;; This function is called by:
 10520 ;;		_SYSTEM_Initialize
 10521 ;;		_main
 10522 ;; This function uses a non-reentrant model
 10523 ;;
 10524                           
 10525                           
 10526                           ;psect for function _OPA1_Initialize
 10527  0AF2                     _OPA1_Initialize:
 10528  0AF2                     l2944:	
 10529                           ;incstack = 0
 10530                           ; Regs used in _OPA1_Initialize: [wreg]
 10531                           
 10532                           
 10533                           ;mcc_generated_files/opa1.c: 61:     OPA1CON = 0xC2;
 10534  0AF2  30C2               	movlw	194
 10535  0AF3  002A               	movlb	10	; select bank10
 10536  0AF4  0091               	movwf	17	;volatile
 10537  0AF5                     l119:
 10538  0AF5  0008               	return
 10539  0AF6                     __end_of_OPA1_Initialize:
 10540                           
 10541                           	psect	text43
 10542  0B6C                     __ptext43:	
 10543 ;; *************** function _EXT_INT_Initialize *****************
 10544 ;; Defined at:
 10545 ;;		line 138 in file "mcc_generated_files/ext_int.c"
 10546 ;; Parameters:    Size  Location     Type
 10547 ;;		None
 10548 ;; Auto vars:     Size  Location     Type
 10549 ;;		None
 10550 ;; Return value:  Size  Location     Type
 10551 ;;                  1    wreg      void 
 10552 ;; Registers used:
 10553 ;;		wreg, status,2, status,0, pclath, cstack
 10554 ;; Tracked objects:
 10555 ;;		On entry : 0/0
 10556 ;;		On exit  : 0/0
 10557 ;;		Unchanged: 0/0
 10558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10559 ;;      Params:         0       0       0       0       0       0       0       0
 10560 ;;      Locals:         0       0       0       0       0       0       0       0
 10561 ;;      Temps:          0       0       0       0       0       0       0       0
 10562 ;;      Totals:         0       0       0       0       0       0       0       0
 10563 ;;Total ram usage:        0 bytes
 10564 ;; Hardware stack levels used: 1
 10565 ;; Hardware stack levels required when called: 5
 10566 ;; This function calls:
 10567 ;;		_INT_SetInterruptHandler
 10568 ;; This function is called by:
 10569 ;;		_SYSTEM_Initialize
 10570 ;; This function uses a non-reentrant model
 10571 ;;
 10572                           
 10573                           
 10574                           ;psect for function _EXT_INT_Initialize
 10575  0B6C                     _EXT_INT_Initialize:
 10576  0B6C                     l2980:	
 10577                           ;incstack = 0
 10578                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10579                           
 10580                           
 10581                           ;mcc_generated_files/ext_int.c: 143:     (INTCONbits.INTF = 0);
 10582  0B6C  108B               	bcf	11,1	;volatile
 10583                           
 10584                           ;mcc_generated_files/ext_int.c: 144:     (OPTION_REGbits.INTEDG = 0);
 10585  0B6D  0021               	movlb	1	; select bank1
 10586  0B6E  1315               	bcf	21,6	;volatile
 10587  0B6F                     l2982:
 10588                           
 10589                           ;mcc_generated_files/ext_int.c: 146:     INT_SetInterruptHandler(INT_DefaultInterruptHan
      +                          dler);
 10590  0B6F  3072               	movlw	low _INT_DefaultInterruptHandler
 10591  0B70  00F3               	movwf	INT_SetInterruptHandler@InterruptHandler
 10592  0B71  3006               	movlw	high _INT_DefaultInterruptHandler
 10593  0B72  00F4               	movwf	INT_SetInterruptHandler@InterruptHandler+1
 10594  0B73  318B  2321  318B   	fcall	_INT_SetInterruptHandler
 10595  0B76                     l2984:
 10596                           
 10597                           ;mcc_generated_files/ext_int.c: 147:     (INTCONbits.INTE = 1);
 10598  0B76  160B               	bsf	11,4	;volatile
 10599  0B77                     l292:
 10600  0B77  0008               	return
 10601  0B78                     __end_of_EXT_INT_Initialize:
 10602                           
 10603                           	psect	text44
 10604  0B21                     __ptext44:	
 10605 ;; *************** function _INT_SetInterruptHandler *****************
 10606 ;; Defined at:
 10607 ;;		line 71 in file "mcc_generated_files/ext_int.c"
 10608 ;; Parameters:    Size  Location     Type
 10609 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
 10610 ;;		 -> INT_DefaultInterruptHandler(1), 
 10611 ;; Auto vars:     Size  Location     Type
 10612 ;;		None
 10613 ;; Return value:  Size  Location     Type
 10614 ;;                  1    wreg      void 
 10615 ;; Registers used:
 10616 ;;		wreg
 10617 ;; Tracked objects:
 10618 ;;		On entry : 0/0
 10619 ;;		On exit  : 0/0
 10620 ;;		Unchanged: 0/0
 10621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10622 ;;      Params:         2       0       0       0       0       0       0       0
 10623 ;;      Locals:         0       0       0       0       0       0       0       0
 10624 ;;      Temps:          0       0       0       0       0       0       0       0
 10625 ;;      Totals:         2       0       0       0       0       0       0       0
 10626 ;;Total ram usage:        2 bytes
 10627 ;; Hardware stack levels used: 1
 10628 ;; Hardware stack levels required when called: 4
 10629 ;; This function calls:
 10630 ;;		Nothing
 10631 ;; This function is called by:
 10632 ;;		_EXT_INT_Initialize
 10633 ;; This function uses a non-reentrant model
 10634 ;;
 10635                           
 10636                           
 10637                           ;psect for function _INT_SetInterruptHandler
 10638  0B21                     _INT_SetInterruptHandler:
 10639  0B21                     l2672:	
 10640                           ;incstack = 0
 10641                           ; Regs used in _INT_SetInterruptHandler: [wreg]
 10642                           
 10643                           
 10644                           ;mcc_generated_files/ext_int.c: 72:     INT_InterruptHandler = InterruptHandler;
 10645  0B21  0874               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
 10646  0B22  0021               	movlb	1	; select bank1
 10647  0B23  00D9               	movwf	(_INT_InterruptHandler+1)^(0+128)
 10648  0B24  0873               	movf	INT_SetInterruptHandler@InterruptHandler,w
 10649  0B25  00D8               	movwf	_INT_InterruptHandler^(0+128)
 10650  0B26                     l271:
 10651  0B26  0008               	return
 10652  0B27                     __end_of_INT_SetInterruptHandler:
 10653                           
 10654                           	psect	text45
 10655  0C99                     __ptext45:	
 10656 ;; *************** function _EUSART_Initialize *****************
 10657 ;; Defined at:
 10658 ;;		line 66 in file "mcc_generated_files/eusart.c"
 10659 ;; Parameters:    Size  Location     Type
 10660 ;;		None
 10661 ;; Auto vars:     Size  Location     Type
 10662 ;;		None
 10663 ;; Return value:  Size  Location     Type
 10664 ;;                  1    wreg      void 
 10665 ;; Registers used:
 10666 ;;		wreg, status,2, status,0, pclath, cstack
 10667 ;; Tracked objects:
 10668 ;;		On entry : 0/0
 10669 ;;		On exit  : 0/0
 10670 ;;		Unchanged: 0/0
 10671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10672 ;;      Params:         0       0       0       0       0       0       0       0
 10673 ;;      Locals:         0       0       0       0       0       0       0       0
 10674 ;;      Temps:          0       0       0       0       0       0       0       0
 10675 ;;      Totals:         0       0       0       0       0       0       0       0
 10676 ;;Total ram usage:        0 bytes
 10677 ;; Hardware stack levels used: 1
 10678 ;; Hardware stack levels required when called: 5
 10679 ;; This function calls:
 10680 ;;		_EUSART_SetErrorHandler
 10681 ;;		_EUSART_SetFramingErrorHandler
 10682 ;;		_EUSART_SetOverrunErrorHandler
 10683 ;; This function is called by:
 10684 ;;		_SYSTEM_Initialize
 10685 ;; This function uses a non-reentrant model
 10686 ;;
 10687                           
 10688                           
 10689                           ;psect for function _EUSART_Initialize
 10690  0C99                     _EUSART_Initialize:
 10691  0C99                     l2998:	
 10692                           ;incstack = 0
 10693                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10694                           
 10695                           
 10696                           ;mcc_generated_files/eusart.c: 71:     BAUD1CON = 0x08;
 10697  0C99  3008               	movlw	8
 10698  0C9A  0023               	movlb	3	; select bank3
 10699  0C9B  009F               	movwf	31	;volatile
 10700                           
 10701                           ;mcc_generated_files/eusart.c: 74:     RC1STA = 0x90;
 10702  0C9C  3090               	movlw	144
 10703  0C9D  009D               	movwf	29	;volatile
 10704                           
 10705                           ;mcc_generated_files/eusart.c: 77:     TX1STA = 0x24;
 10706  0C9E  3024               	movlw	36
 10707  0C9F  009E               	movwf	30	;volatile
 10708                           
 10709                           ;mcc_generated_files/eusart.c: 80:     SP1BRGL = 0x08;
 10710  0CA0  3008               	movlw	8
 10711  0CA1  009B               	movwf	27	;volatile
 10712  0CA2                     l3000:
 10713                           
 10714                           ;mcc_generated_files/eusart.c: 83:     SP1BRGH = 0x00;
 10715  0CA2  019C               	clrf	28	;volatile
 10716  0CA3                     l3002:
 10717                           
 10718                           ;mcc_generated_files/eusart.c: 86:     EUSART_SetFramingErrorHandler(EUSART_DefaultFrami
      +                          ngErrorHandler);
 10719  0CA3  3000               	movlw	0
 10720  0CA4  00F3               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
 10721  0CA5  3000               	movlw	0
 10722  0CA6  00F4               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
 10723  0CA7  318B  2315  318C   	fcall	_EUSART_SetFramingErrorHandler
 10724  0CAA                     l3004:
 10725                           
 10726                           ;mcc_generated_files/eusart.c: 87:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOverr
      +                          unErrorHandler);
 10727  0CAA  3000               	movlw	0
 10728  0CAB  00F3               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
 10729  0CAC  3000               	movlw	0
 10730  0CAD  00F4               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
 10731  0CAE  318B  231B  318C   	fcall	_EUSART_SetOverrunErrorHandler
 10732  0CB1                     l3006:
 10733                           
 10734                           ;mcc_generated_files/eusart.c: 88:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandler
      +                          );
 10735  0CB1  3000               	movlw	0
 10736  0CB2  00F3               	movwf	EUSART_SetErrorHandler@interruptHandler
 10737  0CB3  3000               	movlw	0
 10738  0CB4  00F4               	movwf	EUSART_SetErrorHandler@interruptHandler+1
 10739  0CB5  318B  230F  318C   	fcall	_EUSART_SetErrorHandler
 10740  0CB8                     l3008:
 10741                           
 10742                           ;mcc_generated_files/eusart.c: 90:     eusartRxLastError.status = 0;
 10743  0CB8  0021               	movlb	1	; select bank1
 10744  0CB9  01B2               	clrf	_eusartRxLastError^(0+128)	;volatile
 10745  0CBA                     l198:
 10746  0CBA  0008               	return
 10747  0CBB                     __end_of_EUSART_Initialize:
 10748                           
 10749                           	psect	text46
 10750  0B1B                     __ptext46:	
 10751 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
 10752 ;; Defined at:
 10753 ;;		line 170 in file "mcc_generated_files/eusart.c"
 10754 ;; Parameters:    Size  Location     Type
 10755 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
 10756 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
 10757 ;; Auto vars:     Size  Location     Type
 10758 ;;		None
 10759 ;; Return value:  Size  Location     Type
 10760 ;;                  1    wreg      void 
 10761 ;; Registers used:
 10762 ;;		wreg
 10763 ;; Tracked objects:
 10764 ;;		On entry : 0/0
 10765 ;;		On exit  : 0/0
 10766 ;;		Unchanged: 0/0
 10767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10768 ;;      Params:         2       0       0       0       0       0       0       0
 10769 ;;      Locals:         0       0       0       0       0       0       0       0
 10770 ;;      Temps:          0       0       0       0       0       0       0       0
 10771 ;;      Totals:         2       0       0       0       0       0       0       0
 10772 ;;Total ram usage:        2 bytes
 10773 ;; Hardware stack levels used: 1
 10774 ;; Hardware stack levels required when called: 4
 10775 ;; This function calls:
 10776 ;;		Nothing
 10777 ;; This function is called by:
 10778 ;;		_EUSART_Initialize
 10779 ;; This function uses a non-reentrant model
 10780 ;;
 10781                           
 10782                           
 10783                           ;psect for function _EUSART_SetOverrunErrorHandler
 10784  0B1B                     _EUSART_SetOverrunErrorHandler:
 10785  0B1B                     l2668:	
 10786                           ;incstack = 0
 10787                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
 10788                           
 10789                           
 10790                           ;mcc_generated_files/eusart.c: 171:     EUSART_OverrunErrorHandler = interruptHandler;
 10791  0B1B  0874               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
 10792  0B1C  0021               	movlb	1	; select bank1
 10793  0B1D  00DD               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
 10794  0B1E  0873               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
 10795  0B1F  00DC               	movwf	_EUSART_OverrunErrorHandler^(0+128)
 10796  0B20                     l246:
 10797  0B20  0008               	return
 10798  0B21                     __end_of_EUSART_SetOverrunErrorHandler:
 10799                           
 10800                           	psect	text47
 10801  0B15                     __ptext47:	
 10802 ;; *************** function _EUSART_SetFramingErrorHandler *****************
 10803 ;; Defined at:
 10804 ;;		line 166 in file "mcc_generated_files/eusart.c"
 10805 ;; Parameters:    Size  Location     Type
 10806 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
 10807 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
 10808 ;; Auto vars:     Size  Location     Type
 10809 ;;		None
 10810 ;; Return value:  Size  Location     Type
 10811 ;;                  1    wreg      void 
 10812 ;; Registers used:
 10813 ;;		wreg
 10814 ;; Tracked objects:
 10815 ;;		On entry : 0/0
 10816 ;;		On exit  : 0/0
 10817 ;;		Unchanged: 0/0
 10818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10819 ;;      Params:         2       0       0       0       0       0       0       0
 10820 ;;      Locals:         0       0       0       0       0       0       0       0
 10821 ;;      Temps:          0       0       0       0       0       0       0       0
 10822 ;;      Totals:         2       0       0       0       0       0       0       0
 10823 ;;Total ram usage:        2 bytes
 10824 ;; Hardware stack levels used: 1
 10825 ;; Hardware stack levels required when called: 4
 10826 ;; This function calls:
 10827 ;;		Nothing
 10828 ;; This function is called by:
 10829 ;;		_EUSART_Initialize
 10830 ;; This function uses a non-reentrant model
 10831 ;;
 10832                           
 10833                           
 10834                           ;psect for function _EUSART_SetFramingErrorHandler
 10835  0B15                     _EUSART_SetFramingErrorHandler:
 10836  0B15                     l2666:	
 10837                           ;incstack = 0
 10838                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
 10839                           
 10840                           
 10841                           ;mcc_generated_files/eusart.c: 167:     EUSART_FramingErrorHandler = interruptHandler;
 10842  0B15  0874               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
 10843  0B16  0021               	movlb	1	; select bank1
 10844  0B17  00DF               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
 10845  0B18  0873               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
 10846  0B19  00DE               	movwf	_EUSART_FramingErrorHandler^(0+128)
 10847  0B1A                     l243:
 10848  0B1A  0008               	return
 10849  0B1B                     __end_of_EUSART_SetFramingErrorHandler:
 10850                           
 10851                           	psect	text48
 10852  0B0F                     __ptext48:	
 10853 ;; *************** function _EUSART_SetErrorHandler *****************
 10854 ;; Defined at:
 10855 ;;		line 174 in file "mcc_generated_files/eusart.c"
 10856 ;; Parameters:    Size  Location     Type
 10857 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
 10858 ;;		 -> EUSART_DefaultErrorHandler(1), 
 10859 ;; Auto vars:     Size  Location     Type
 10860 ;;		None
 10861 ;; Return value:  Size  Location     Type
 10862 ;;                  1    wreg      void 
 10863 ;; Registers used:
 10864 ;;		wreg
 10865 ;; Tracked objects:
 10866 ;;		On entry : 0/0
 10867 ;;		On exit  : 0/0
 10868 ;;		Unchanged: 0/0
 10869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10870 ;;      Params:         2       0       0       0       0       0       0       0
 10871 ;;      Locals:         0       0       0       0       0       0       0       0
 10872 ;;      Temps:          0       0       0       0       0       0       0       0
 10873 ;;      Totals:         2       0       0       0       0       0       0       0
 10874 ;;Total ram usage:        2 bytes
 10875 ;; Hardware stack levels used: 1
 10876 ;; Hardware stack levels required when called: 4
 10877 ;; This function calls:
 10878 ;;		Nothing
 10879 ;; This function is called by:
 10880 ;;		_EUSART_Initialize
 10881 ;; This function uses a non-reentrant model
 10882 ;;
 10883                           
 10884                           
 10885                           ;psect for function _EUSART_SetErrorHandler
 10886  0B0F                     _EUSART_SetErrorHandler:
 10887  0B0F                     l2670:	
 10888                           ;incstack = 0
 10889                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
 10890                           
 10891                           
 10892                           ;mcc_generated_files/eusart.c: 175:     EUSART_ErrorHandler = interruptHandler;
 10893  0B0F  0874               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
 10894  0B10  0021               	movlb	1	; select bank1
 10895  0B11  00DB               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
 10896  0B12  0873               	movf	EUSART_SetErrorHandler@interruptHandler,w
 10897  0B13  00DA               	movwf	_EUSART_ErrorHandler^(0+128)
 10898  0B14                     l249:
 10899  0B14  0008               	return
 10900  0B15                     __end_of_EUSART_SetErrorHandler:
 10901                           
 10902                           	psect	text49
 10903  0B09                     __ptext49:	
 10904 ;; *************** function _DAC_Initialize *****************
 10905 ;; Defined at:
 10906 ;;		line 58 in file "mcc_generated_files/dac.c"
 10907 ;; Parameters:    Size  Location     Type
 10908 ;;		None
 10909 ;; Auto vars:     Size  Location     Type
 10910 ;;		None
 10911 ;; Return value:  Size  Location     Type
 10912 ;;                  1    wreg      void 
 10913 ;; Registers used:
 10914 ;;		wreg
 10915 ;; Tracked objects:
 10916 ;;		On entry : 0/0
 10917 ;;		On exit  : 0/0
 10918 ;;		Unchanged: 0/0
 10919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10920 ;;      Params:         0       0       0       0       0       0       0       0
 10921 ;;      Locals:         0       0       0       0       0       0       0       0
 10922 ;;      Temps:          0       0       0       0       0       0       0       0
 10923 ;;      Totals:         0       0       0       0       0       0       0       0
 10924 ;;Total ram usage:        0 bytes
 10925 ;; Hardware stack levels used: 1
 10926 ;; Hardware stack levels required when called: 4
 10927 ;; This function calls:
 10928 ;;		Nothing
 10929 ;; This function is called by:
 10930 ;;		_SYSTEM_Initialize
 10931 ;;		_main
 10932 ;; This function uses a non-reentrant model
 10933 ;;
 10934                           
 10935                           
 10936                           ;psect for function _DAC_Initialize
 10937  0B09                     _DAC_Initialize:
 10938  0B09                     l2902:	
 10939                           ;incstack = 0
 10940                           ; Regs used in _DAC_Initialize: [wreg]
 10941                           
 10942                           
 10943                           ;mcc_generated_files/dac.c: 61:     DAC1CON0 = 0x80;
 10944  0B09  3080               	movlw	128
 10945  0B0A  0022               	movlb	2	; select bank2
 10946  0B0B  0098               	movwf	24	;volatile
 10947                           
 10948                           ;mcc_generated_files/dac.c: 63:     DAC1CON1 = 0xFF;
 10949  0B0C  30FF               	movlw	255
 10950  0B0D  0099               	movwf	25	;volatile
 10951  0B0E                     l7:
 10952  0B0E  0008               	return
 10953  0B0F                     __end_of_DAC_Initialize:
 10954                           
 10955                           	psect	text50
 10956  0B85                     __ptext50:	
 10957 ;; *************** function _LATCH_Initialize *****************
 10958 ;; Defined at:
 10959 ;;		line 581 in file "main.c"
 10960 ;; Parameters:    Size  Location     Type
 10961 ;;		None
 10962 ;; Auto vars:     Size  Location     Type
 10963 ;;		None
 10964 ;; Return value:  Size  Location     Type
 10965 ;;                  1    wreg      void 
 10966 ;; Registers used:
 10967 ;;		None
 10968 ;; Tracked objects:
 10969 ;;		On entry : 0/0
 10970 ;;		On exit  : 0/0
 10971 ;;		Unchanged: 0/0
 10972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10973 ;;      Params:         0       0       0       0       0       0       0       0
 10974 ;;      Locals:         0       0       0       0       0       0       0       0
 10975 ;;      Temps:          0       0       0       0       0       0       0       0
 10976 ;;      Totals:         0       0       0       0       0       0       0       0
 10977 ;;Total ram usage:        0 bytes
 10978 ;; Hardware stack levels used: 1
 10979 ;; Hardware stack levels required when called: 4
 10980 ;; This function calls:
 10981 ;;		Nothing
 10982 ;; This function is called by:
 10983 ;;		_main
 10984 ;; This function uses a non-reentrant model
 10985 ;;
 10986                           
 10987                           
 10988                           ;psect for function _LATCH_Initialize
 10989  0B85                     _LATCH_Initialize:
 10990  0B85                     l3536:	
 10991                           ;incstack = 0
 10992                           ; Regs used in _LATCH_Initialize: []
 10993                           
 10994                           
 10995                           ;main.c: 582:     TRISBbits.TRISB6 = 0;
 10996  0B85  0021               	movlb	1	; select bank1
 10997  0B86  130D               	bcf	13,6	;volatile
 10998                           
 10999                           ;main.c: 583:     TRISCbits.TRISC0 = 0;
 11000  0B87  100E               	bcf	14,0	;volatile
 11001                           
 11002                           ;main.c: 584:     TRISAbits.TRISA4 = 0;
 11003  0B88  120C               	bcf	12,4	;volatile
 11004                           
 11005                           ;main.c: 585:     TRISCbits.TRISC1 = 0;
 11006  0B89  108E               	bcf	14,1	;volatile
 11007                           
 11008                           ;main.c: 586:     TRISCbits.TRISC7 = 0;
 11009  0B8A  138E               	bcf	14,7	;volatile
 11010                           
 11011                           ;main.c: 587:     LATBbits.LATB6 = 1;
 11012  0B8B  0022               	movlb	2	; select bank2
 11013  0B8C  170D               	bsf	13,6	;volatile
 11014                           
 11015                           ;main.c: 588:     LATCbits.LATC0 = 1;
 11016  0B8D  140E               	bsf	14,0	;volatile
 11017                           
 11018                           ;main.c: 589:     LATAbits.LATA4 = 1;
 11019  0B8E  160C               	bsf	12,4	;volatile
 11020                           
 11021                           ;main.c: 590:     LATCbits.LATC1 = 1;
 11022  0B8F  148E               	bsf	14,1	;volatile
 11023                           
 11024                           ;main.c: 591:     LATCbits.LATC7 = 1;
 11025  0B90  178E               	bsf	14,7	;volatile
 11026  0B91                     l756:
 11027  0B91  0008               	return
 11028  0B92                     __end_of_LATCH_Initialize:
 11029                           
 11030                           	psect	intentry
 11031  0004                     __pintentry:	
 11032 ;; *************** function _INTERRUPT_InterruptManager *****************
 11033 ;; Defined at:
 11034 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 11035 ;; Parameters:    Size  Location     Type
 11036 ;;		None
 11037 ;; Auto vars:     Size  Location     Type
 11038 ;;		None
 11039 ;; Return value:  Size  Location     Type
 11040 ;;                  1    wreg      void 
 11041 ;; Registers used:
 11042 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11043 ;; Tracked objects:
 11044 ;;		On entry : 0/0
 11045 ;;		On exit  : 0/0
 11046 ;;		Unchanged: 0/0
 11047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11048 ;;      Params:         0       0       0       0       0       0       0       0
 11049 ;;      Locals:         0       0       0       0       0       0       0       0
 11050 ;;      Temps:          0       0       0       0       0       0       0       0
 11051 ;;      Totals:         0       0       0       0       0       0       0       0
 11052 ;;Total ram usage:        0 bytes
 11053 ;; Hardware stack levels used: 1
 11054 ;; Hardware stack levels required when called: 3
 11055 ;; This function calls:
 11056 ;;		_INT_ISR
 11057 ;;		_PIN_MANAGER_IOC
 11058 ;;		_TMR0_ISR
 11059 ;;		_TMR1_ISR
 11060 ;;		_TMR4_ISR
 11061 ;; This function is called by:
 11062 ;;		Interrupt level 1
 11063 ;; This function uses a non-reentrant model
 11064 ;;
 11065                           
 11066  0004                     _INTERRUPT_InterruptManager:
 11067                           
 11068                           ;incstack = 0
 11069  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
 11070                           
 11071                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11072  0005  3180               	pagesel	$
 11073  0006                     i1l3538:
 11074                           
 11075                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 11076  0006  1E8B               	btfss	11,5	;volatile
 11077  0007  2809               	goto	u208_21
 11078  0008  280A               	goto	u208_20
 11079  0009                     u208_21:
 11080  0009  2812               	goto	i1l144
 11081  000A                     u208_20:
 11082  000A                     i1l3540:
 11083  000A  1D0B               	btfss	11,2	;volatile
 11084  000B  280D               	goto	u209_21
 11085  000C  280E               	goto	u209_20
 11086  000D                     u209_21:
 11087  000D  2812               	goto	i1l144
 11088  000E                     u209_20:
 11089  000E                     i1l3542:
 11090                           
 11091                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
 11092  000E  318B  23A1  3180   	fcall	_TMR0_ISR
 11093                           
 11094                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 11095  0011  2849               	goto	i1l155
 11096  0012                     i1l144:	
 11097                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.INTE == 1 && INTCON
      +                          bits.INTF == 1)
 11098                           
 11099  0012  1E0B               	btfss	11,4	;volatile
 11100  0013  2815               	goto	u210_21
 11101  0014  2816               	goto	u210_20
 11102  0015                     u210_21:
 11103  0015  281E               	goto	i1l146
 11104  0016                     u210_20:
 11105  0016                     i1l3544:
 11106  0016  1C8B               	btfss	11,1	;volatile
 11107  0017  2819               	goto	u211_21
 11108  0018  281A               	goto	u211_20
 11109  0019                     u211_21:
 11110  0019  281E               	goto	i1l146
 11111  001A                     u211_20:
 11112  001A                     i1l3546:
 11113                           
 11114                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         INT_ISR();
 11115  001A  318A  22FA  3180   	fcall	_INT_ISR
 11116                           
 11117                           ;mcc_generated_files/interrupt_manager.c: 62:     }
 11118  001D  2849               	goto	i1l155
 11119  001E                     i1l146:	
 11120                           ;mcc_generated_files/interrupt_manager.c: 63:     else if(INTCONbits.IOCIE == 1 && INTCO
      +                          Nbits.IOCIF == 1)
 11121                           
 11122  001E  1D8B               	btfss	11,3	;volatile
 11123  001F  2821               	goto	u212_21
 11124  0020  2822               	goto	u212_20
 11125  0021                     u212_21:
 11126  0021  282A               	goto	i1l148
 11127  0022                     u212_20:
 11128  0022                     i1l3548:
 11129  0022  1C0B               	btfss	11,0	;volatile
 11130  0023  2825               	goto	u213_21
 11131  0024  2826               	goto	u213_20
 11132  0025                     u213_21:
 11133  0025  282A               	goto	i1l148
 11134  0026                     u213_20:
 11135  0026                     i1l3550:
 11136                           
 11137                           ;mcc_generated_files/interrupt_manager.c: 64:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 65:         PIN_MANAGER_IOC();
 11138  0026  318A  22EC  3180   	fcall	_PIN_MANAGER_IOC
 11139                           
 11140                           ;mcc_generated_files/interrupt_manager.c: 66:     }
 11141  0029  2849               	goto	i1l155
 11142  002A                     i1l148:	
 11143                           ;mcc_generated_files/interrupt_manager.c: 67:     else if(INTCONbits.PEIE == 1)
 11144                           
 11145  002A  1F0B               	btfss	11,6	;volatile
 11146  002B  282D               	goto	u214_21
 11147  002C  282E               	goto	u214_20
 11148  002D                     u214_21:
 11149  002D  2849               	goto	i1l147
 11150  002E                     u214_20:
 11151  002E                     i1l3552:
 11152                           
 11153                           ;mcc_generated_files/interrupt_manager.c: 68:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 69:         if(PIE2bits.TMR4IE == 1 && PIR2bits.TMR4IF == 1)
 11154  002E  0021               	movlb	1	; select bank1
 11155  002F  1C92               	btfss	18,1	;volatile
 11156  0030  2832               	goto	u215_21
 11157  0031  2833               	goto	u215_20
 11158  0032                     u215_21:
 11159  0032  283B               	goto	i1l152
 11160  0033                     u215_20:
 11161  0033                     i1l3554:
 11162  0033  0020               	movlb	0	; select bank0
 11163  0034  1C92               	btfss	18,1	;volatile
 11164  0035  2837               	goto	u216_21
 11165  0036  2838               	goto	u216_20
 11166  0037                     u216_21:
 11167  0037  283B               	goto	i1l152
 11168  0038                     u216_20:
 11169  0038                     i1l3556:
 11170                           
 11171                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             TMR4_ISR();
 11172  0038  318B  2392  3180   	fcall	_TMR4_ISR
 11173  003B                     i1l152:	
 11174                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 76:         }
 11175                           
 11176                           
 11177                           ;mcc_generated_files/interrupt_manager.c: 77:         if(PIE1bits.TMR1IE == 1 && PIR1bit
      +                          s.TMR1IF == 1) {
 11178  003B  0021               	movlb	1	; select bank1
 11179  003C  1C11               	btfss	17,0	;volatile
 11180  003D  283F               	goto	u217_21
 11181  003E  2840               	goto	u217_20
 11182  003F                     u217_21:
 11183  003F  2849               	goto	i1l147
 11184  0040                     u217_20:
 11185  0040                     i1l3558:
 11186  0040  0020               	movlb	0	; select bank0
 11187  0041  1C11               	btfss	17,0	;volatile
 11188  0042  2844               	goto	u218_21
 11189  0043  2845               	goto	u218_20
 11190  0044                     u218_21:
 11191  0044  2849               	goto	i1l147
 11192  0045                     u218_20:
 11193  0045                     i1l3560:
 11194                           
 11195                           ;mcc_generated_files/interrupt_manager.c: 78:             TMR1_ISR();
 11196  0045  318C  2414  3180   	fcall	_TMR1_ISR
 11197  0048  2849               	goto	i1l155
 11198  0049                     i1l147:
 11199  0049                     i1l155:
 11200  0049  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 11201  004A  0009               	retfie
 11202  004B                     __end_of_INTERRUPT_InterruptManager:
 11203                           
 11204                           	psect	text52
 11205  0B92                     __ptext52:	
 11206 ;; *************** function _TMR4_ISR *****************
 11207 ;; Defined at:
 11208 ;;		line 120 in file "mcc_generated_files/tmr4.c"
 11209 ;; Parameters:    Size  Location     Type
 11210 ;;		None
 11211 ;; Auto vars:     Size  Location     Type
 11212 ;;		None
 11213 ;; Return value:  Size  Location     Type
 11214 ;;                  1    wreg      void 
 11215 ;; Registers used:
 11216 ;;		wreg, status,2, status,0, pclath, cstack
 11217 ;; Tracked objects:
 11218 ;;		On entry : 0/0
 11219 ;;		On exit  : 0/0
 11220 ;;		Unchanged: 0/0
 11221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11222 ;;      Params:         0       0       0       0       0       0       0       0
 11223 ;;      Locals:         0       0       0       0       0       0       0       0
 11224 ;;      Temps:          0       0       0       0       0       0       0       0
 11225 ;;      Totals:         0       0       0       0       0       0       0       0
 11226 ;;Total ram usage:        0 bytes
 11227 ;; Hardware stack levels used: 1
 11228 ;; Hardware stack levels required when called: 2
 11229 ;; This function calls:
 11230 ;;		Absolute function
 11231 ;;		_TMR4_DefaultInterruptHandler
 11232 ;; This function is called by:
 11233 ;;		_INTERRUPT_InterruptManager
 11234 ;; This function uses a non-reentrant model
 11235 ;;
 11236                           
 11237                           
 11238                           ;psect for function _TMR4_ISR
 11239  0B92                     _TMR4_ISR:
 11240  0B92                     i1l3216:	
 11241                           ;incstack = 0
 11242                           ; Regs used in _TMR4_ISR: [wreg+status,2+status,0+pclath+cstack]
 11243                           
 11244                           
 11245                           ;mcc_generated_files/tmr4.c: 124:     PIR2bits.TMR4IF = 0;
 11246  0B92  0020               	movlb	0	; select bank0
 11247  0B93  1092               	bcf	18,1	;volatile
 11248  0B94                     i1l3218:
 11249                           
 11250                           ;mcc_generated_files/tmr4.c: 126:     if(TMR4_InterruptHandler)
 11251  0B94  0021               	movlb	1	; select bank1
 11252  0B95  0854               	movf	_TMR4_InterruptHandler^(0+128),w
 11253  0B96  0455               	iorwf	(_TMR4_InterruptHandler+1)^(0+128),w
 11254  0B97  1903               	btfsc	3,2
 11255  0B98  2B9A               	goto	u174_21
 11256  0B99  2B9B               	goto	u174_20
 11257  0B9A                     u174_21:
 11258  0B9A  2BA0               	goto	i1l421
 11259  0B9B                     u174_20:
 11260  0B9B                     i1l3220:
 11261                           
 11262                           ;mcc_generated_files/tmr4.c: 127:     {;mcc_generated_files/tmr4.c: 128:         TMR4_In
      +                          terruptHandler();
 11263  0B9B  0855               	movf	(_TMR4_InterruptHandler+1)^(0+128),w
 11264  0B9C  008A               	movwf	10
 11265  0B9D  0854               	movf	_TMR4_InterruptHandler^(0+128),w
 11266  0B9E  000A               	callw
 11267  0B9F  318B               	pagesel	$
 11268  0BA0                     i1l421:
 11269  0BA0  0008               	return
 11270  0BA1                     __end_of_TMR4_ISR:
 11271                           
 11272                           	psect	text53
 11273  0EFF                     __ptext53:	
 11274 ;; *************** function _TMR4_DefaultInterruptHandler *****************
 11275 ;; Defined at:
 11276 ;;		line 147 in file "mcc_generated_files/tmr4.c"
 11277 ;; Parameters:    Size  Location     Type
 11278 ;;		None
 11279 ;; Auto vars:     Size  Location     Type
 11280 ;;		None
 11281 ;; Return value:  Size  Location     Type
 11282 ;;                  1    wreg      void 
 11283 ;; Registers used:
 11284 ;;		wreg, status,2, status,0, pclath, cstack
 11285 ;; Tracked objects:
 11286 ;;		On entry : 0/0
 11287 ;;		On exit  : 0/0
 11288 ;;		Unchanged: 0/0
 11289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11290 ;;      Params:         0       0       0       0       0       0       0       0
 11291 ;;      Locals:         0       0       0       0       0       0       0       0
 11292 ;;      Temps:          1       0       0       0       0       0       0       0
 11293 ;;      Totals:         1       0       0       0       0       0       0       0
 11294 ;;Total ram usage:        1 bytes
 11295 ;; Hardware stack levels used: 1
 11296 ;; Hardware stack levels required when called: 1
 11297 ;; This function calls:
 11298 ;;		_DAC_SetOutput
 11299 ;; This function is called by:
 11300 ;;		_TMR4_Initialize
 11301 ;;		_TMR4_ISR
 11302 ;; This function uses a non-reentrant model
 11303 ;;
 11304                           
 11305                           
 11306                           ;psect for function _TMR4_DefaultInterruptHandler
 11307  0EFF                     _TMR4_DefaultInterruptHandler:
 11308  0EFF                     i1l3014:	
 11309                           ;incstack = 0
 11310                           ; Regs used in _TMR4_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 11311                           
 11312                           
 11313                           ;mcc_generated_files/tmr4.c: 151:     if (dc_frequency_flag) {
 11314  0EFF  087A               	movf	_dc_frequency_flag,w
 11315  0F00  1903               	btfsc	3,2
 11316  0F01  2F03               	goto	u160_21
 11317  0F02  2F04               	goto	u160_20
 11318  0F03                     u160_21:
 11319  0F03  2F09               	goto	i1l3018
 11320  0F04                     u160_20:
 11321  0F04                     i1l3016:
 11322                           
 11323                           ;mcc_generated_files/tmr4.c: 152:         DAC_SetOutput(255);
 11324  0F04  30FF               	movlw	255
 11325  0F05  318A  22FF  318E   	fcall	_DAC_SetOutput
 11326                           
 11327                           ;mcc_generated_files/tmr4.c: 153:     }else{
 11328  0F08  2F40               	goto	i1l440
 11329  0F09                     i1l3018:
 11330                           
 11331                           ;mcc_generated_files/tmr4.c: 155:   if (currentIsOn){
 11332  0F09  0021               	movlb	1	; select bank1
 11333  0F0A  083D               	movf	_currentIsOn^(0+128),w
 11334  0F0B  1903               	btfsc	3,2
 11335  0F0C  2F0E               	goto	u161_21
 11336  0F0D  2F0F               	goto	u161_20
 11337  0F0E                     u161_21:
 11338  0F0E  2F15               	goto	i1l3024
 11339  0F0F                     u161_20:
 11340  0F0F                     i1l3020:
 11341                           
 11342                           ;mcc_generated_files/tmr4.c: 156:     currentIsOn = 0;
 11343  0F0F  01BD               	clrf	_currentIsOn^(0+128)
 11344  0F10                     i1l3022:
 11345                           
 11346                           ;mcc_generated_files/tmr4.c: 157:     DAC_SetOutput(255);
 11347  0F10  30FF               	movlw	255
 11348  0F11  318A  22FF  318E   	fcall	_DAC_SetOutput
 11349                           
 11350                           ;mcc_generated_files/tmr4.c: 161:   } else {
 11351  0F14  2F34               	goto	i1l3036
 11352  0F15                     i1l3024:
 11353                           
 11354                           ;mcc_generated_files/tmr4.c: 162:        if (PR4 == 255) {
 11355  0F15  0028               	movlb	8	; select bank8
 11356  0F16  0A16               	incf	22,w	;volatile
 11357  0F17  1D03               	btfss	3,2
 11358  0F18  2F1A               	goto	u162_21
 11359  0F19  2F1B               	goto	u162_20
 11360  0F1A                     u162_21:
 11361  0F1A  2F2D               	goto	i1l437
 11362  0F1B                     u162_20:
 11363  0F1B                     i1l3026:
 11364                           
 11365                           ;mcc_generated_files/tmr4.c: 163:             if (oneHzCounter == 81) {
 11366  0F1B  3051               	movlw	81
 11367  0F1C  0021               	movlb	1	; select bank1
 11368  0F1D  0630               	xorwf	_oneHzCounter^(0+128),w
 11369  0F1E  1D03               	btfss	3,2
 11370  0F1F  2F21               	goto	u163_21
 11371  0F20  2F22               	goto	u163_20
 11372  0F21                     u163_21:
 11373  0F21  2F28               	goto	i1l3032
 11374  0F22                     u163_20:
 11375  0F22                     i1l3028:
 11376                           
 11377                           ;mcc_generated_files/tmr4.c: 164:                 DAC_SetOutput(dac_value);
 11378  0F22  0831               	movf	_dac_value^(0+128),w
 11379  0F23  318A  22FF  318E   	fcall	_DAC_SetOutput
 11380  0F26                     i1l3030:
 11381                           
 11382                           ;mcc_generated_files/tmr4.c: 165:                 oneHzCounter = 0;
 11383  0F26  0021               	movlb	1	; select bank1
 11384  0F27  01B0               	clrf	_oneHzCounter^(0+128)
 11385  0F28                     i1l3032:
 11386                           
 11387                           ;mcc_generated_files/tmr4.c: 167:             oneHzCounter++;
 11388  0F28  3001               	movlw	1
 11389  0F29  00F1               	movwf	??_TMR4_DefaultInterruptHandler
 11390  0F2A  0871               	movf	??_TMR4_DefaultInterruptHandler,w
 11391  0F2B  07B0               	addwf	_oneHzCounter^(0+128),f
 11392                           
 11393                           ;mcc_generated_files/tmr4.c: 168:         } else {
 11394  0F2C  2F34               	goto	i1l3036
 11395  0F2D                     i1l437:
 11396                           
 11397                           ;mcc_generated_files/tmr4.c: 169:     currentIsOn = 1;
 11398  0F2D  0021               	movlb	1	; select bank1
 11399  0F2E  01BD               	clrf	_currentIsOn^(0+128)
 11400  0F2F  0ABD               	incf	_currentIsOn^(0+128),f
 11401  0F30                     i1l3034:
 11402                           
 11403                           ;mcc_generated_files/tmr4.c: 170:     DAC_SetOutput(dac_value);
 11404  0F30  0831               	movf	_dac_value^(0+128),w
 11405  0F31  318A  22FF  318E   	fcall	_DAC_SetOutput
 11406  0F34                     i1l3036:
 11407                           
 11408                           ;mcc_generated_files/tmr4.c: 173:   TMR1 = 65528;
 11409  0F34  30FF               	movlw	255
 11410  0F35  0020               	movlb	0	; select bank0
 11411  0F36  0097               	movwf	23	;volatile
 11412  0F37  30F8               	movlw	248
 11413  0F38  0096               	movwf	22	;volatile
 11414  0F39                     i1l3038:
 11415                           
 11416                           ;mcc_generated_files/tmr4.c: 175:   T1CONbits.TMR1ON = 1;
 11417  0F39  1418               	bsf	24,0	;volatile
 11418  0F3A                     i1l3040:
 11419                           
 11420                           ;mcc_generated_files/tmr4.c: 176:   LATBbits.LATB6 = 0;
 11421  0F3A  0022               	movlb	2	; select bank2
 11422  0F3B  130D               	bcf	13,6	;volatile
 11423  0F3C                     i1l3042:
 11424                           
 11425                           ;mcc_generated_files/tmr4.c: 177:   LATCbits.LATC0 = 0;
 11426  0F3C  100E               	bcf	14,0	;volatile
 11427  0F3D                     i1l3044:
 11428                           
 11429                           ;mcc_generated_files/tmr4.c: 178:   LATAbits.LATA4 = 0;
 11430  0F3D  120C               	bcf	12,4	;volatile
 11431  0F3E                     i1l3046:
 11432                           
 11433                           ;mcc_generated_files/tmr4.c: 179:   LATCbits.LATC1 = 0;
 11434  0F3E  108E               	bcf	14,1	;volatile
 11435  0F3F                     i1l3048:
 11436                           
 11437                           ;mcc_generated_files/tmr4.c: 180:   LATCbits.LATC7 = 0;
 11438  0F3F  138E               	bcf	14,7	;volatile
 11439  0F40                     i1l440:
 11440  0F40  0008               	return
 11441  0F41                     __end_of_TMR4_DefaultInterruptHandler:
 11442                           
 11443                           	psect	text54
 11444  0C14                     __ptext54:	
 11445 ;; *************** function _TMR1_ISR *****************
 11446 ;; Defined at:
 11447 ;;		line 111 in file "tmr1.c"
 11448 ;; Parameters:    Size  Location     Type
 11449 ;;		None
 11450 ;; Auto vars:     Size  Location     Type
 11451 ;;		None
 11452 ;; Return value:  Size  Location     Type
 11453 ;;                  1    wreg      void 
 11454 ;; Registers used:
 11455 ;;		wreg, status,2, status,0, pclath, cstack
 11456 ;; Tracked objects:
 11457 ;;		On entry : 0/0
 11458 ;;		On exit  : 0/0
 11459 ;;		Unchanged: 0/0
 11460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11461 ;;      Params:         0       0       0       0       0       0       0       0
 11462 ;;      Locals:         0       0       0       0       0       0       0       0
 11463 ;;      Temps:          2       0       0       0       0       0       0       0
 11464 ;;      Totals:         2       0       0       0       0       0       0       0
 11465 ;;Total ram usage:        2 bytes
 11466 ;; Hardware stack levels used: 1
 11467 ;; Hardware stack levels required when called: 2
 11468 ;; This function calls:
 11469 ;;		Absolute function
 11470 ;;		_TMR1_DefaultInterruptHandler
 11471 ;; This function is called by:
 11472 ;;		_INTERRUPT_InterruptManager
 11473 ;; This function uses a non-reentrant model
 11474 ;;
 11475                           
 11476                           
 11477                           ;psect for function _TMR1_ISR
 11478  0C14                     _TMR1_ISR:
 11479  0C14                     i1l3222:	
 11480                           ;incstack = 0
 11481                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 11482                           
 11483                           
 11484                           ;tmr1.c: 115:     PIR1bits.TMR1IF = 0;
 11485  0C14  0020               	movlb	0	; select bank0
 11486  0C15  1011               	bcf	17,0	;volatile
 11487  0C16                     i1l3224:
 11488                           
 11489                           ;tmr1.c: 117:     TMR1 = timer1ReloadVal;
 11490  0C16  0021               	movlb	1	; select bank1
 11491  0C17  0860               	movf	_timer1ReloadVal^(0+128),w	;volatile
 11492  0C18  00F1               	movwf	??_TMR1_ISR
 11493  0C19  01F2               	clrf	??_TMR1_ISR+1
 11494  0C1A  0871               	movf	??_TMR1_ISR,w
 11495  0C1B  0020               	movlb	0	; select bank0
 11496  0C1C  0096               	movwf	22	;volatile
 11497  0C1D  0872               	movf	??_TMR1_ISR+1,w
 11498  0C1E  0097               	movwf	23	;volatile
 11499  0C1F                     i1l3226:
 11500                           
 11501                           ;tmr1.c: 119:     if(TMR1_InterruptHandler)
 11502  0C1F  0021               	movlb	1	; select bank1
 11503  0C20  0852               	movf	_TMR1_InterruptHandler^(0+128),w
 11504  0C21  0453               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
 11505  0C22  1903               	btfsc	3,2
 11506  0C23  2C25               	goto	u175_21
 11507  0C24  2C26               	goto	u175_20
 11508  0C25                     u175_21:
 11509  0C25  2C2B               	goto	i1l514
 11510  0C26                     u175_20:
 11511  0C26                     i1l3228:
 11512                           
 11513                           ;tmr1.c: 120:     {;tmr1.c: 121:         TMR1_InterruptHandler();
 11514  0C26  0853               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
 11515  0C27  008A               	movwf	10
 11516  0C28  0852               	movf	_TMR1_InterruptHandler^(0+128),w
 11517  0C29  000A               	callw
 11518  0C2A  318C               	pagesel	$
 11519  0C2B                     i1l514:
 11520  0C2B  0008               	return
 11521  0C2C                     __end_of_TMR1_ISR:
 11522                           
 11523                           	psect	text55
 11524  0B4B                     __ptext55:	
 11525 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 11526 ;; Defined at:
 11527 ;;		line 132 in file "tmr1.c"
 11528 ;; Parameters:    Size  Location     Type
 11529 ;;		None
 11530 ;; Auto vars:     Size  Location     Type
 11531 ;;		None
 11532 ;; Return value:  Size  Location     Type
 11533 ;;                  1    wreg      void 
 11534 ;; Registers used:
 11535 ;;		wreg, status,2, status,0, pclath, cstack
 11536 ;; Tracked objects:
 11537 ;;		On entry : 0/0
 11538 ;;		On exit  : 0/0
 11539 ;;		Unchanged: 0/0
 11540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11541 ;;      Params:         0       0       0       0       0       0       0       0
 11542 ;;      Locals:         0       0       0       0       0       0       0       0
 11543 ;;      Temps:          0       0       0       0       0       0       0       0
 11544 ;;      Totals:         0       0       0       0       0       0       0       0
 11545 ;;Total ram usage:        0 bytes
 11546 ;; Hardware stack levels used: 1
 11547 ;; Hardware stack levels required when called: 1
 11548 ;; This function calls:
 11549 ;;		_DAC_SetOutput
 11550 ;; This function is called by:
 11551 ;;		_TMR1_Initialize
 11552 ;;		_TMR1_ISR
 11553 ;; This function uses a non-reentrant model
 11554 ;;
 11555                           
 11556                           
 11557                           ;psect for function _TMR1_DefaultInterruptHandler
 11558  0B4B                     _TMR1_DefaultInterruptHandler:
 11559  0B4B                     i1l3050:	
 11560                           ;incstack = 0
 11561                           ; Regs used in _TMR1_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 11562                           
 11563                           
 11564                           ;tmr1.c: 137:     T1CONbits.TMR1ON = 0;
 11565  0B4B  0020               	movlb	0	; select bank0
 11566  0B4C  1018               	bcf	24,0	;volatile
 11567  0B4D                     i1l3052:
 11568                           
 11569                           ;tmr1.c: 138:     DAC_SetOutput(255);
 11570  0B4D  30FF               	movlw	255
 11571  0B4E  318A  22FF  318B   	fcall	_DAC_SetOutput
 11572  0B51                     i1l520:
 11573  0B51  0008               	return
 11574  0B52                     __end_of_TMR1_DefaultInterruptHandler:
 11575                           
 11576                           	psect	text56
 11577  0AFF                     __ptext56:	
 11578 ;; *************** function _DAC_SetOutput *****************
 11579 ;; Defined at:
 11580 ;;		line 66 in file "mcc_generated_files/dac.c"
 11581 ;; Parameters:    Size  Location     Type
 11582 ;;  inputData       1    wreg     unsigned char 
 11583 ;; Auto vars:     Size  Location     Type
 11584 ;;  inputData       1    0[COMMON] unsigned char 
 11585 ;; Return value:  Size  Location     Type
 11586 ;;                  1    wreg      void 
 11587 ;; Registers used:
 11588 ;;		wreg
 11589 ;; Tracked objects:
 11590 ;;		On entry : 0/0
 11591 ;;		On exit  : 0/0
 11592 ;;		Unchanged: 0/0
 11593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11594 ;;      Params:         0       0       0       0       0       0       0       0
 11595 ;;      Locals:         1       0       0       0       0       0       0       0
 11596 ;;      Temps:          0       0       0       0       0       0       0       0
 11597 ;;      Totals:         1       0       0       0       0       0       0       0
 11598 ;;Total ram usage:        1 bytes
 11599 ;; Hardware stack levels used: 1
 11600 ;; This function calls:
 11601 ;;		Nothing
 11602 ;; This function is called by:
 11603 ;;		_TMR4_DefaultInterruptHandler
 11604 ;;		_TMR1_DefaultInterruptHandler
 11605 ;; This function uses a non-reentrant model
 11606 ;;
 11607                           
 11608                           
 11609                           ;psect for function _DAC_SetOutput
 11610  0AFF                     _DAC_SetOutput:
 11611                           
 11612                           ;incstack = 0
 11613                           ; Regs used in _DAC_SetOutput: [wreg]
 11614                           ;DAC_SetOutput@inputData stored from wreg
 11615  0AFF  00F0               	movwf	DAC_SetOutput@inputData
 11616  0B00                     i1l2664:
 11617                           
 11618                           ;mcc_generated_files/dac.c: 66: void DAC_SetOutput(uint8_t inputData);mcc_generated_file
      +                          s/dac.c: 67: {;mcc_generated_files/dac.c: 68:     DAC1CON1 = inputData;
 11619  0B00  0870               	movf	DAC_SetOutput@inputData,w
 11620  0B01  0022               	movlb	2	; select bank2
 11621  0B02  0099               	movwf	25	;volatile
 11622  0B03                     i1l10:
 11623  0B03  0008               	return
 11624  0B04                     __end_of_DAC_SetOutput:
 11625                           
 11626                           	psect	text57
 11627  0BA1                     __ptext57:	
 11628 ;; *************** function _TMR0_ISR *****************
 11629 ;; Defined at:
 11630 ;;		line 109 in file "mcc_generated_files/tmr0.c"
 11631 ;; Parameters:    Size  Location     Type
 11632 ;;		None
 11633 ;; Auto vars:     Size  Location     Type
 11634 ;;		None
 11635 ;; Return value:  Size  Location     Type
 11636 ;;                  1    wreg      void 
 11637 ;; Registers used:
 11638 ;;		wreg, status,2, status,0, pclath, cstack
 11639 ;; Tracked objects:
 11640 ;;		On entry : 0/0
 11641 ;;		On exit  : 0/0
 11642 ;;		Unchanged: 0/0
 11643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11644 ;;      Params:         0       0       0       0       0       0       0       0
 11645 ;;      Locals:         0       0       0       0       0       0       0       0
 11646 ;;      Temps:          0       0       0       0       0       0       0       0
 11647 ;;      Totals:         0       0       0       0       0       0       0       0
 11648 ;;Total ram usage:        0 bytes
 11649 ;; Hardware stack levels used: 1
 11650 ;; Hardware stack levels required when called: 1
 11651 ;; This function calls:
 11652 ;;		Absolute function
 11653 ;;		_TMR0_DefaultInterruptHandler
 11654 ;; This function is called by:
 11655 ;;		_INTERRUPT_InterruptManager
 11656 ;; This function uses a non-reentrant model
 11657 ;;
 11658                           
 11659                           
 11660                           ;psect for function _TMR0_ISR
 11661  0BA1                     _TMR0_ISR:
 11662  0BA1                     i1l3204:	
 11663                           ;incstack = 0
 11664                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 11665                           
 11666                           
 11667                           ;mcc_generated_files/tmr0.c: 113:     INTCONbits.TMR0IF = 0;
 11668  0BA1  110B               	bcf	11,2	;volatile
 11669  0BA2                     i1l3206:
 11670                           
 11671                           ;mcc_generated_files/tmr0.c: 115:     TMR0 = timer0ReloadVal;
 11672  0BA2  0879               	movf	_timer0ReloadVal,w	;volatile
 11673  0BA3  0020               	movlb	0	; select bank0
 11674  0BA4  0095               	movwf	21	;volatile
 11675  0BA5                     i1l3208:
 11676                           
 11677                           ;mcc_generated_files/tmr0.c: 117:     if(TMR0_InterruptHandler)
 11678  0BA5  0021               	movlb	1	; select bank1
 11679  0BA6  0856               	movf	_TMR0_InterruptHandler^(0+128),w
 11680  0BA7  0457               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 11681  0BA8  1903               	btfsc	3,2
 11682  0BA9  2BAB               	goto	u173_21
 11683  0BAA  2BAC               	goto	u173_20
 11684  0BAB                     u173_21:
 11685  0BAB  2BB1               	goto	i1l359
 11686  0BAC                     u173_20:
 11687  0BAC                     i1l3210:
 11688                           
 11689                           ;mcc_generated_files/tmr0.c: 118:     {;mcc_generated_files/tmr0.c: 119:         TMR0_In
      +                          terruptHandler();
 11690  0BAC  0857               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 11691  0BAD  008A               	movwf	10
 11692  0BAE  0856               	movf	_TMR0_InterruptHandler^(0+128),w
 11693  0BAF  000A               	callw
 11694  0BB0  318B               	pagesel	$
 11695  0BB1                     i1l359:
 11696  0BB1  0008               	return
 11697  0BB2                     __end_of_TMR0_ISR:
 11698                           
 11699                           	psect	text58
 11700  0AED                     __ptext58:	
 11701 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 11702 ;; Defined at:
 11703 ;;		line 130 in file "mcc_generated_files/tmr0.c"
 11704 ;; Parameters:    Size  Location     Type
 11705 ;;		None
 11706 ;; Auto vars:     Size  Location     Type
 11707 ;;		None
 11708 ;; Return value:  Size  Location     Type
 11709 ;;                  1    wreg      void 
 11710 ;; Registers used:
 11711 ;;		None
 11712 ;; Tracked objects:
 11713 ;;		On entry : 0/0
 11714 ;;		On exit  : 0/0
 11715 ;;		Unchanged: 0/0
 11716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11717 ;;      Params:         0       0       0       0       0       0       0       0
 11718 ;;      Locals:         0       0       0       0       0       0       0       0
 11719 ;;      Temps:          0       0       0       0       0       0       0       0
 11720 ;;      Totals:         0       0       0       0       0       0       0       0
 11721 ;;Total ram usage:        0 bytes
 11722 ;; Hardware stack levels used: 1
 11723 ;; This function calls:
 11724 ;;		Nothing
 11725 ;; This function is called by:
 11726 ;;		_TMR0_Initialize
 11727 ;;		_TMR0_ISR
 11728 ;; This function uses a non-reentrant model
 11729 ;;
 11730                           
 11731                           
 11732                           ;psect for function _TMR0_DefaultInterruptHandler
 11733  0AED                     _TMR0_DefaultInterruptHandler:
 11734  0AED                     i1l365:	
 11735                           ;incstack = 0
 11736                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 11737                           
 11738  0AED  0008               	return
 11739  0AEE                     __end_of_TMR0_DefaultInterruptHandler:
 11740                           
 11741                           	psect	text59
 11742  0AEC                     __ptext59:	
 11743 ;; *************** function _PIN_MANAGER_IOC *****************
 11744 ;; Defined at:
 11745 ;;		line 121 in file "mcc_generated_files/pin_manager.c"
 11746 ;; Parameters:    Size  Location     Type
 11747 ;;		None
 11748 ;; Auto vars:     Size  Location     Type
 11749 ;;		None
 11750 ;; Return value:  Size  Location     Type
 11751 ;;                  1    wreg      void 
 11752 ;; Registers used:
 11753 ;;		None
 11754 ;; Tracked objects:
 11755 ;;		On entry : 0/0
 11756 ;;		On exit  : 0/0
 11757 ;;		Unchanged: 0/0
 11758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11759 ;;      Params:         0       0       0       0       0       0       0       0
 11760 ;;      Locals:         0       0       0       0       0       0       0       0
 11761 ;;      Temps:          0       0       0       0       0       0       0       0
 11762 ;;      Totals:         0       0       0       0       0       0       0       0
 11763 ;;Total ram usage:        0 bytes
 11764 ;; Hardware stack levels used: 1
 11765 ;; This function calls:
 11766 ;;		Nothing
 11767 ;; This function is called by:
 11768 ;;		_INTERRUPT_InterruptManager
 11769 ;; This function uses a non-reentrant model
 11770 ;;
 11771                           
 11772                           
 11773                           ;psect for function _PIN_MANAGER_IOC
 11774  0AEC                     _PIN_MANAGER_IOC:
 11775  0AEC                     i1l114:	
 11776                           ;incstack = 0
 11777                           ; Regs used in _PIN_MANAGER_IOC: []
 11778                           
 11779  0AEC  0008               	return
 11780  0AED                     __end_of_PIN_MANAGER_IOC:
 11781                           
 11782                           	psect	text60
 11783  0AFA                     __ptext60:	
 11784 ;; *************** function _INT_ISR *****************
 11785 ;; Defined at:
 11786 ;;		line 54 in file "mcc_generated_files/ext_int.c"
 11787 ;; Parameters:    Size  Location     Type
 11788 ;;		None
 11789 ;; Auto vars:     Size  Location     Type
 11790 ;;		None
 11791 ;; Return value:  Size  Location     Type
 11792 ;;                  1    wreg      void 
 11793 ;; Registers used:
 11794 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11795 ;; Tracked objects:
 11796 ;;		On entry : 0/0
 11797 ;;		On exit  : 0/0
 11798 ;;		Unchanged: 0/0
 11799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11800 ;;      Params:         0       0       0       0       0       0       0       0
 11801 ;;      Locals:         0       0       0       0       0       0       0       0
 11802 ;;      Temps:          0       0       0       0       0       0       0       0
 11803 ;;      Totals:         0       0       0       0       0       0       0       0
 11804 ;;Total ram usage:        0 bytes
 11805 ;; Hardware stack levels used: 1
 11806 ;; Hardware stack levels required when called: 2
 11807 ;; This function calls:
 11808 ;;		_INT_CallBack
 11809 ;; This function is called by:
 11810 ;;		_INTERRUPT_InterruptManager
 11811 ;; This function uses a non-reentrant model
 11812 ;;
 11813                           
 11814                           
 11815                           ;psect for function _INT_ISR
 11816  0AFA                     _INT_ISR:
 11817  0AFA                     i1l3212:	
 11818                           ;incstack = 0
 11819                           ; Regs used in _INT_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11820                           
 11821                           
 11822                           ;mcc_generated_files/ext_int.c: 56:     (INTCONbits.INTF = 0);
 11823  0AFA  108B               	bcf	11,1	;volatile
 11824  0AFB                     i1l3214:
 11825                           
 11826                           ;mcc_generated_files/ext_int.c: 59:     INT_CallBack();
 11827  0AFB  318B  2378  318A   	fcall	_INT_CallBack
 11828  0AFE                     i1l264:
 11829  0AFE  0008               	return
 11830  0AFF                     __end_of_INT_ISR:
 11831                           
 11832                           	psect	text61
 11833  0B78                     __ptext61:	
 11834 ;; *************** function _INT_CallBack *****************
 11835 ;; Defined at:
 11836 ;;		line 62 in file "mcc_generated_files/ext_int.c"
 11837 ;; Parameters:    Size  Location     Type
 11838 ;;		None
 11839 ;; Auto vars:     Size  Location     Type
 11840 ;;		None
 11841 ;; Return value:  Size  Location     Type
 11842 ;;                  1    wreg      void 
 11843 ;; Registers used:
 11844 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11845 ;; Tracked objects:
 11846 ;;		On entry : 0/0
 11847 ;;		On exit  : 0/0
 11848 ;;		Unchanged: 0/0
 11849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11850 ;;      Params:         0       0       0       0       0       0       0       0
 11851 ;;      Locals:         0       0       0       0       0       0       0       0
 11852 ;;      Temps:          0       0       0       0       0       0       0       0
 11853 ;;      Totals:         0       0       0       0       0       0       0       0
 11854 ;;Total ram usage:        0 bytes
 11855 ;; Hardware stack levels used: 1
 11856 ;; Hardware stack levels required when called: 1
 11857 ;; This function calls:
 11858 ;;		Absolute function
 11859 ;;		_INT_DefaultInterruptHandler
 11860 ;; This function is called by:
 11861 ;;		_INT_ISR
 11862 ;; This function uses a non-reentrant model
 11863 ;;
 11864                           
 11865                           
 11866                           ;psect for function _INT_CallBack
 11867  0B78                     _INT_CallBack:
 11868  0B78                     i1l3010:	
 11869                           ;incstack = 0
 11870                           ; Regs used in _INT_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11871                           
 11872                           
 11873                           ;mcc_generated_files/ext_int.c: 65:     if(INT_InterruptHandler)
 11874  0B78  0021               	movlb	1	; select bank1
 11875  0B79  0858               	movf	_INT_InterruptHandler^(0+128),w
 11876  0B7A  0459               	iorwf	(_INT_InterruptHandler+1)^(0+128),w
 11877  0B7B  1903               	btfsc	3,2
 11878  0B7C  2B7E               	goto	u159_21
 11879  0B7D  2B7F               	goto	u159_20
 11880  0B7E                     u159_21:
 11881  0B7E  2B84               	goto	i1l268
 11882  0B7F                     u159_20:
 11883  0B7F                     i1l3012:
 11884                           
 11885                           ;mcc_generated_files/ext_int.c: 66:     {;mcc_generated_files/ext_int.c: 67:         INT
      +                          _InterruptHandler();
 11886  0B7F  0859               	movf	(_INT_InterruptHandler+1)^(0+128),w
 11887  0B80  008A               	movwf	10
 11888  0B81  0858               	movf	_INT_InterruptHandler^(0+128),w
 11889  0B82  000A               	callw
 11890  0B83  318B               	pagesel	$
 11891  0B84                     i1l268:
 11892  0B84  0008               	return
 11893  0B85                     __end_of_INT_CallBack:
 11894                           
 11895                           	psect	text62
 11896  0672                     __ptext62:	
 11897 ;; *************** function _INT_DefaultInterruptHandler *****************
 11898 ;; Defined at:
 11899 ;;		line 75 in file "mcc_generated_files/ext_int.c"
 11900 ;; Parameters:    Size  Location     Type
 11901 ;;		None
 11902 ;; Auto vars:     Size  Location     Type
 11903 ;;  time            1    2[COMMON] unsigned char 
 11904 ;; Return value:  Size  Location     Type
 11905 ;;                  1    wreg      void 
 11906 ;; Registers used:
 11907 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11908 ;; Tracked objects:
 11909 ;;		On entry : 0/0
 11910 ;;		On exit  : 0/0
 11911 ;;		Unchanged: 0/0
 11912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11913 ;;      Params:         0       0       0       0       0       0       0       0
 11914 ;;      Locals:         1       0       0       0       0       0       0       0
 11915 ;;      Temps:          2       0       0       0       0       0       0       0
 11916 ;;      Totals:         3       0       0       0       0       0       0       0
 11917 ;;Total ram usage:        3 bytes
 11918 ;; Hardware stack levels used: 1
 11919 ;; This function calls:
 11920 ;;		Nothing
 11921 ;; This function is called by:
 11922 ;;		_EXT_INT_Initialize
 11923 ;;		_INT_CallBack
 11924 ;; This function uses a non-reentrant model
 11925 ;;
 11926                           
 11927                           
 11928                           ;psect for function _INT_DefaultInterruptHandler
 11929  0672                     _INT_DefaultInterruptHandler:
 11930  0672                     i1l2674:	
 11931                           ;incstack = 0
 11932                           ; Regs used in _INT_DefaultInterruptHandler: [wreg-fsr0h+status,2+status,0]
 11933                           
 11934                           
 11935                           ;mcc_generated_files/ext_int.c: 77:   uint8_t time = TMR0;
 11936  0672  0020               	movlb	0	; select bank0
 11937  0673  0815               	movf	21,w	;volatile
 11938  0674  00F0               	movwf	??_INT_DefaultInterruptHandler
 11939  0675  0870               	movf	??_INT_DefaultInterruptHandler,w
 11940  0676  00F2               	movwf	INT_DefaultInterruptHandler@time
 11941  0677                     i1l2676:
 11942                           
 11943                           ;mcc_generated_files/ext_int.c: 78:   TMR0 = 0;
 11944  0677  0195               	clrf	21	;volatile
 11945  0678                     i1l2678:
 11946                           
 11947                           ;mcc_generated_files/ext_int.c: 81:   if (INTCONbits.TMR0IF){
 11948  0678  1D0B               	btfss	11,2	;volatile
 11949  0679  2E7B               	goto	u121_21
 11950  067A  2E7C               	goto	u121_20
 11951  067B                     u121_21:
 11952  067B  2E7D               	goto	i1l2682
 11953  067C                     u121_20:
 11954  067C                     i1l2680:
 11955                           
 11956                           ;mcc_generated_files/ext_int.c: 82:     time = 0;
 11957  067C  01F2               	clrf	INT_DefaultInterruptHandler@time
 11958  067D                     i1l2682:
 11959                           
 11960                           ;mcc_generated_files/ext_int.c: 84:   INTCONbits.TMR0IF = 0;
 11961  067D  110B               	bcf	11,2	;volatile
 11962                           
 11963                           ;mcc_generated_files/ext_int.c: 86:   switch(ir_code.state){
 11964  067E  2EC8               	goto	i1l2720
 11965  067F                     i1l2684:
 11966                           
 11967                           ;mcc_generated_files/ext_int.c: 89:     if (time >= 180 && time <= 243){
 11968  067F  30B4               	movlw	180
 11969  0680  0272               	subwf	INT_DefaultInterruptHandler@time,w
 11970  0681  1C03               	skipc
 11971  0682  2E84               	goto	u122_21
 11972  0683  2E85               	goto	u122_20
 11973  0684                     u122_21:
 11974  0684  2EDC               	goto	i1l278
 11975  0685                     u122_20:
 11976  0685                     i1l2686:
 11977  0685  30F4               	movlw	244
 11978  0686  0272               	subwf	INT_DefaultInterruptHandler@time,w
 11979  0687  1803               	skipnc
 11980  0688  2E8A               	goto	u123_21
 11981  0689  2E8B               	goto	u123_20
 11982  068A                     u123_21:
 11983  068A  2EDC               	goto	i1l278
 11984  068B                     u123_20:
 11985  068B                     i1l2688:
 11986                           
 11987                           ;mcc_generated_files/ext_int.c: 90:       ir_code.n_bits = 0;
 11988  068B  01B3               	clrf	_ir_code^(0+128)
 11989  068C                     i1l2690:
 11990                           
 11991                           ;mcc_generated_files/ext_int.c: 91:       ir_code.state = STATE_RECEIVING;
 11992  068C  01B4               	clrf	(_ir_code^(0+128)+1)
 11993  068D  0AB4               	incf	(_ir_code^(0+128)+1),f
 11994  068E  2EDC               	goto	i1l278
 11995  068F                     i1l2692:
 11996                           
 11997                           ;mcc_generated_files/ext_int.c: 99:     ir_code.code <<= 1;
 11998  068F  3001               	movlw	1
 11999  0690                     u124_25:
 12000  0690  35B5               	lslf	(_ir_code^(0+128)+2),f
 12001  0691  0DB6               	rlf	((_ir_code+1)^(0+128)+2),f
 12002  0692  0DB7               	rlf	((_ir_code+2)^(0+128)+2),f
 12003  0693  0DB8               	rlf	((_ir_code+3)^(0+128)+2),f
 12004  0694  0B89               	decfsz	9,f
 12005  0695  2E90               	goto	u124_25
 12006  0696                     i1l2694:
 12007                           
 12008                           ;mcc_generated_files/ext_int.c: 100:     if (time >= 29 && time <= 41){
 12009  0696  301D               	movlw	29
 12010  0697  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12011  0698  1C03               	skipc
 12012  0699  2E9B               	goto	u125_21
 12013  069A  2E9C               	goto	u125_20
 12014  069B                     u125_21:
 12015  069B  2EA8               	goto	i1l2702
 12016  069C                     u125_20:
 12017  069C                     i1l2696:
 12018  069C  302A               	movlw	42
 12019  069D  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12020  069E  1803               	skipnc
 12021  069F  2EA1               	goto	u126_21
 12022  06A0  2EA2               	goto	u126_20
 12023  06A1                     u126_21:
 12024  06A1  2EA8               	goto	i1l2702
 12025  06A2                     u126_20:
 12026  06A2                     i1l2698:
 12027                           
 12028                           ;mcc_generated_files/ext_int.c: 104:       ir_code.code |= 1;
 12029  06A2  1435               	bsf	(_ir_code^(0+128)+2),0
 12030  06A3                     i1l2700:
 12031                           
 12032                           ;mcc_generated_files/ext_int.c: 105:       ir_code.n_bits++;
 12033  06A3  3001               	movlw	1
 12034  06A4  00F0               	movwf	??_INT_DefaultInterruptHandler
 12035  06A5  0870               	movf	??_INT_DefaultInterruptHandler,w
 12036  06A6  07B3               	addwf	_ir_code^(0+128),f
 12037                           
 12038                           ;mcc_generated_files/ext_int.c: 106:     } else if (time >= 14 && time <= 20){
 12039  06A7  2EB7               	goto	i1l2710
 12040  06A8                     i1l2702:
 12041  06A8  300E               	movlw	14
 12042  06A9  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12043  06AA  1C03               	skipc
 12044  06AB  2EAD               	goto	u127_21
 12045  06AC  2EAE               	goto	u127_20
 12046  06AD                     u127_21:
 12047  06AD  2EB5               	goto	i1l2708
 12048  06AE                     u127_20:
 12049  06AE                     i1l2704:
 12050  06AE  3015               	movlw	21
 12051  06AF  0272               	subwf	INT_DefaultInterruptHandler@time,w
 12052  06B0  1803               	skipnc
 12053  06B1  2EB3               	goto	u128_21
 12054  06B2  2EB4               	goto	u128_20
 12055  06B3                     u128_21:
 12056  06B3  2EB5               	goto	i1l2708
 12057  06B4                     u128_20:
 12058  06B4  2EA3               	goto	i1l2700
 12059  06B5                     i1l2708:
 12060                           
 12061                           ;mcc_generated_files/ext_int.c: 113:       ir_code.state = STATE_RESET;
 12062  06B5  01B4               	clrf	(_ir_code^(0+128)+1)
 12063                           
 12064                           ;mcc_generated_files/ext_int.c: 114:       break;
 12065  06B6  2EDC               	goto	i1l278
 12066  06B7                     i1l2710:
 12067                           
 12068                           ;mcc_generated_files/ext_int.c: 116:     if (32 == ir_code.n_bits){
 12069  06B7  3020               	movlw	32
 12070  06B8  0633               	xorwf	_ir_code^(0+128),w
 12071  06B9  1D03               	btfss	3,2
 12072  06BA  2EBC               	goto	u129_21
 12073  06BB  2EBD               	goto	u129_20
 12074  06BC                     u129_21:
 12075  06BC  2EDC               	goto	i1l278
 12076  06BD                     u129_20:
 12077  06BD                     i1l2712:
 12078                           
 12079                           ;mcc_generated_files/ext_int.c: 119:       if (ir_code.command == ((~ir_code.command_b) 
      +                          & 0xff)){
 12080  06BD  0935               	comf	(_ir_code^(0+128)+2),w
 12081  06BE  0636               	xorwf	(_ir_code^(0+128)+3),w
 12082  06BF  1D03               	skipz
 12083  06C0  2EC2               	goto	u130_21
 12084  06C1  2EC3               	goto	u130_20
 12085  06C2                     u130_21:
 12086  06C2  2EB5               	goto	i1l2708
 12087  06C3                     u130_20:
 12088  06C3                     i1l2714:
 12089                           
 12090                           ;mcc_generated_files/ext_int.c: 120:         ir_code.state = STATE_DONE;
 12091  06C3  3002               	movlw	2
 12092  06C4  00F0               	movwf	??_INT_DefaultInterruptHandler
 12093  06C5  0870               	movf	??_INT_DefaultInterruptHandler,w
 12094  06C6  00B4               	movwf	(_ir_code^(0+128)+1)
 12095                           
 12096                           ;mcc_generated_files/ext_int.c: 121:       } else {
 12097  06C7  2EDC               	goto	i1l278
 12098  06C8                     i1l2720:
 12099  06C8  0021               	movlb	1	; select bank1
 12100  06C9  0834               	movf	(_ir_code^(0+128)+1),w
 12101  06CA  00F0               	movwf	??_INT_DefaultInterruptHandler
 12102  06CB  01F1               	clrf	??_INT_DefaultInterruptHandler+1
 12103                           
 12104                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12105                           ; Switch size 1, requested type "simple"
 12106                           ; Number of cases is 1, Range of values is 0 to 0
 12107                           ; switch strategies available:
 12108                           ; Name         Instructions Cycles
 12109                           ; simple_byte            4     3 (average)
 12110                           ; direct_byte            8     6 (fixed)
 12111                           ; jumptable            260     6 (fixed)
 12112                           ;	Chosen strategy is simple_byte
 12113  06CC  0871               	movf	??_INT_DefaultInterruptHandler+1,w
 12114  06CD  3A00               	xorlw	0	; case 0
 12115  06CE  1903               	skipnz
 12116  06CF  2ED1               	goto	i1l4454
 12117  06D0  2EB5               	goto	i1l2708
 12118  06D1                     i1l4454:
 12119                           
 12120                           ; Switch size 1, requested type "simple"
 12121                           ; Number of cases is 3, Range of values is 0 to 2
 12122                           ; switch strategies available:
 12123                           ; Name         Instructions Cycles
 12124                           ; simple_byte           10     6 (average)
 12125                           ; direct_byte           12     6 (fixed)
 12126                           ; jumptable            260     6 (fixed)
 12127                           ;	Chosen strategy is simple_byte
 12128  06D1  0870               	movf	??_INT_DefaultInterruptHandler,w
 12129  06D2  3A00               	xorlw	0	; case 0
 12130  06D3  1903               	skipnz
 12131  06D4  2E7F               	goto	i1l2684
 12132  06D5  3A01               	xorlw	1	; case 1
 12133  06D6  1903               	skipnz
 12134  06D7  2E8F               	goto	i1l2692
 12135  06D8  3A03               	xorlw	3	; case 2
 12136  06D9  1903               	skipnz
 12137  06DA  2EDC               	goto	i1l278
 12138  06DB  2EB5               	goto	i1l2708
 12139  06DC                     i1l278:
 12140                           
 12141                           ;mcc_generated_files/ext_int.c: 135:   INTCONbits.INTF = 0;
 12142  06DC  108B               	bcf	11,1	;volatile
 12143  06DD                     i1l289:
 12144  06DD  0008               	return
 12145  06DE                     __end_of_INT_DefaultInterruptHandler:
 12146  007E                     btemp	set	126	;btemp
 12147  007E                     int$flags	set	126
 12148  007E                     wtemp0	set	126
 12149                           
 12150                           	psect	config
 12151                           
 12152                           ;Config register CONFIG1 @ 0x8007
 12153                           ;	Oscillator Selection Bits
 12154                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 12155                           ;	Watchdog Timer Enable
 12156                           ;	WDTE = 0x1, user specified literal
 12157                           ;	Power-up Timer Enable
 12158                           ;	PWRTE = OFF, PWRT disabled
 12159                           ;	MCLR Pin Function Select
 12160                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 12161                           ;	Flash Program Memory Code Protection
 12162                           ;	CP = OFF, Program memory code protection is disabled
 12163                           ;	Brown-out Reset Enable
 12164                           ;	BOREN = OFF, Brown-out Reset disabled
 12165                           ;	Clock Out Enable
 12166                           ;	CLKOUTEN = ON, CLKOUT function is enabled on the CLKOUT pin
 12167                           ;	Internal/External Switchover Mode
 12168                           ;	IESO = OFF, Internal/External Switchover Mode is disabled
 12169                           ;	Fail-Safe Clock Monitor Enable
 12170                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 12171  8007                     	org	32775
 12172  8007  21EC               	dw	8684
 12173                           
 12174                           ;Config register CONFIG2 @ 0x8008
 12175                           ;	Flash Memory Self-Write Protection
 12176                           ;	WRT = OFF, Write protection off
 12177                           ;	Peripheral Pin Select one-way control
 12178                           ;	PPS1WAY = ON, The PPSLOCK bit cannot be cleared once it is set by software
 12179                           ;	Zero-cross detect disable
 12180                           ;	ZCDDIS = ON, Zero-cross detect circuit is disabled at POR
 12181                           ;	Phase Lock Loop enable
 12182                           ;	PLLEN = OFF, 4x PLL is enabled when software sets the SPLLEN bit
 12183                           ;	Stack Overflow/Underflow Reset Enable
 12184                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 12185                           ;	Brown-out Reset Voltage Selection
 12186                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 12187                           ;	Low-Power Brown Out Reset
 12188                           ;	LPBOR = OFF, Low-Power BOR is disabled
 12189                           ;	Low-Voltage Programming Enable
 12190                           ;	LVP = ON, Low-voltage programming enabled
 12191  8008                     	org	32776
 12192  8008  3EFF               	dw	16127

Data Sizes:
    Strings     128
    Constant    4
    Data        46
    BSS         92
    Persistent  51
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     80      80
    BANK1            80      8      77
    BANK2            80      0      52
    BANK3            80      0      33
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    S1952_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_7(CODE[25]), STR_6(CODE[25]), STR_5(CODE[23]), STR_4(CODE[20]), 
		 -> STR_3(CODE[20]), STR_2(CODE[19]), STR_1(CODE[21]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 25
		 -> STR_7(CODE[25]), STR_6(CODE[25]), STR_5(CODE[23]), STR_4(CODE[20]), 
		 -> STR_3(CODE[20]), STR_2(CODE[19]), STR_1(CODE[21]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_7(CODE[25]), STR_6(CODE[25]), STR_5(CODE[23]), STR_4(CODE[20]), 
		 -> STR_3(CODE[20]), STR_2(CODE[19]), STR_1(CODE[21]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    process_remote_command@code	PTR struct . size(1) Largest target is 6
		 -> ir_code(BANK1[6]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 64
		 -> writePersistentState@buf(BANK0[64]), 

    TMR4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _FLASH_WriteBlock->_FLASH_EraseBlock
    _setCurrent->___awdiv
    _selectSomething->_setLEDColor
    _vfpfcnvrt->_fputc
    _fputc->_putch
    _putch->_EUSART_Write
    ___aldiv->___awdiv
    _lowBattery->_setLEDColor
    _SYSTEM_Initialize->_TMR1_Initialize
    _TMR4_Initialize->_TMR4_SetInterruptHandler
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_TMR1_ISR
    _TMR4_ISR->_TMR4_DefaultInterruptHandler
    _TMR4_DefaultInterruptHandler->_DAC_SetOutput
    _TMR1_DefaultInterruptHandler->_DAC_SetOutput
    _INT_CallBack->_INT_DefaultInterruptHandler

Critical Paths under _main in BANK0

    _process_remote_command->_writePersistentState
    _writePersistentState->_FLASH_WriteBlock
    _setFrequency->___aldiv
    _setCurrent->_battery_voltage
    _selectIncrease->_printf
    _selectFrequencyValue->_printf
    _selectFrequency->_printf
    _selectDecrease->_printf
    _selectCurrentValue->_printf
    _selectCurrent->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_fputc
    _battery_voltage->___aldiv
    ___aldiv->___lmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_process_remote_command

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   94129
                                              3 BANK1      5     5      0
                     _DAC_Initialize
                   _LATCH_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
                  _SYSTEM_Initialize
                    _battery_voltage
                            _initLED
                         _lowBattery
             _process_remote_command
                _readPersistentState
                         _setCurrent
                       _setFrequency
                            _startUp
 ---------------------------------------------------------------------------------
 (1) _startUp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readPersistentState                                  2     2      0       0
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _process_remote_command                               3     3      0   76476
                                              0 BANK1      3     3      0
                    _battery_voltage
                      _selectCurrent
                 _selectCurrentValue
                     _selectDecrease
                    _selectFrequency
               _selectFrequencyValue
                     _selectIncrease
                    _selectSomething
                         _setCurrent
                       _setFrequency
                        _setLEDColor
               _writePersistentState
 ---------------------------------------------------------------------------------
 (2) _writePersistentState                                70    70      0    1464
                                             10 BANK0     70    70      0
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    10     7      3    1140
                                              0 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     3     1      2     215
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _setFrequency                                         5     3      2    3632
                                             23 BANK0      5     3      2
            _TMR4_LoadPeriodRegister
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) _TMR4_LoadPeriodRegister                              1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setCurrent                                          16    12      4    6046
                                             25 BANK0     16    12      4
                            ___aldiv
                            ___awdiv
                             ___lmul
                    _battery_voltage (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     612
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     683
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _selectSomething                                      2     2      0    5598
                                              0 BANK0      2     2      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectIncrease                                       2     2      0    8778
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectFrequencyValue                                 2     2      0    8778
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectFrequency                                      2     2      0    8778
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectDecrease                                       1     1      0    8778
                                             25 BANK0      1     1      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectCurrentValue                                   2     2      0    8778
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _selectCurrent                                        2     2      0    8778
                                             25 BANK0      2     2      0
                             _printf
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (3) _printf                                               6     4      2    3180
                                             21 BANK0      4     2      2
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             8     5      3    2272
                                             13 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           40    38      2    1759
                                              5 BANK0      8     6      2
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                8     5      3    1158
                                              5 COMMON     3     0      3
                                              0 BANK0      5     5      0
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0      62
                                              4 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (8) _EUSART_Write                                         1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _battery_voltage                                      2     0      2    1397
                                             23 BANK0      2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8    1397
                                              8 BANK0     15     7      8
                            ___awdiv (ARG)
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _lowBattery                                           2     2      0    5598
                                              0 BANK0      2     2      0
                        _setLEDColor
 ---------------------------------------------------------------------------------
 (2) _setLEDColor                                          4     2      2    5598
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLED                                              1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     875
                     _DAC_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0     125
           _TMR4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR4_SetInterruptHandler                             2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      1     1      0     125
                                              5 COMMON     1     1      0
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     125
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     125
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     375
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     125
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LATCH_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           0     0      0     178
                            _INT_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                           _TMR1_ISR
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR4_ISR                                            0     0      0      22
                   Absolute function *
       _TMR4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR4_DefaultInterruptHandler                        1     1      0      22
                                              1 COMMON     1     1      0
                      _DAC_SetOutput
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            2     2      0      22
                                              1 COMMON     2     2      0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR1_DefaultInterruptHandler                        0     0      0      22
                      _DAC_SetOutput
 ---------------------------------------------------------------------------------
 (12) _DAC_SetOutput                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT_ISR                                             0     0      0     134
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (11) _INT_CallBack                                        0     0      0     134
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (12) _INT_DefaultInterruptHandler                         3     3      0     134
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DAC_Initialize
   _LATCH_Initialize
   _OPA1_Initialize
   _OPA2_Initialize
   _SYSTEM_Initialize
     _DAC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OPA1_Initialize
     _OPA2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
     _TMR4_Initialize
       _TMR4_SetInterruptHandler
     _WDT_Initialize
   _battery_voltage
     ___aldiv
       ___awdiv (ARG)
       ___lmul (ARG)
   _initLED
   _lowBattery
     _setLEDColor
   _process_remote_command
     _battery_voltage
     _selectCurrent
       _printf
         _vfprintf
           _vfpfcnvrt
             _fputc
               _putch
                 _EUSART_Write
       _setLEDColor
     _selectCurrentValue
       _printf
       _setLEDColor
     _selectDecrease
       _printf
       _setLEDColor
     _selectFrequency
       _printf
       _setLEDColor
     _selectFrequencyValue
       _printf
       _setLEDColor
     _selectIncrease
       _printf
       _setLEDColor
     _selectSomething
       _setLEDColor
     _setCurrent
       ___aldiv
       ___awdiv
       ___lmul
       _battery_voltage (ARG)
     _setFrequency
       _TMR4_LoadPeriodRegister
       ___aldiv
       ___lmul
     _setLEDColor
     _writePersistentState
       _FLASH_WriteBlock
         _FLASH_EraseBlock
   _readPersistentState
   _setCurrent
   _setFrequency
   _startUp

 _INTERRUPT_InterruptManager (ROOT)
   _INT_ISR
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
   _TMR1_ISR
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
       _DAC_SetOutput
   _TMR4_ISR
     Absolute function(Fake) *
     _TMR4_DefaultInterruptHandler *
       _DAC_SetOutput

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      FD       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     50      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      8      4D       8       96.2%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      34      10       65.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      21      12       41.2%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      FD      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Oct 26 17:10:34 2021

                                            l7 0B0E                                             l50 0D01  
                                           l53 0B59                                             l56 0AF1  
                                 ___awdiv@sign 0021                        __end_of_OPA1_Initialize 0AF6  
                              _timer0ReloadVal 0079                        __size_of_selectIncrease 0025  
                                          l111 0E57                                            l222 0B63  
                                          l119 0AF5                                            l231 0B3E  
                                          l305 0B61                                            l225 0B6B  
                                          l402 0BE8                                            l243 0B1A  
                                          l501 0C43                                            l246 0B20  
                                          l271 0B26                                            l424 0B38  
                                          l249 0B14                                            l329 0AF9  
                                          l417 0B08                                            l362 0B2C  
                                          l346 0BC3                                            l292 0B77  
                                          l700 0743                                            l517 0B32  
                                          l198 0CBA                                            l471 061C  
                                          l472 0671                                            l642 0E60  
                                          l474 0669                                            l634 0C98  
                                          l651 0F84                                            l644 0E65  
                                          l645 0E6C                                            l478 0C78  
                                          l662 0003                                            l647 0E70  
                                          l671 0D74                                            l639 07FF  
                                          l656 0C13                                            l648 0E8A  
                                          l905 050B                                            l665 0FDF  
                                          l753 03BC                                            l674 0D26  
                                          l659 0DF3                                            l915 0587  
                                          l683 0D9D                                            l756 0B91  
                                          l668 0DC7                                            l677 0CDC  
                                          l693 0461                                            l686 0D4C  
                                          l854 0EBE                                            l696 071E  
                                          l993 07A3                                            _PR2 001B  
                                          _PR4 0416                          ?_selectFrequencyValue 0070  
                              _timer1ReloadVal 00E0                 ?_EUSART_SetFramingErrorHandler 0073  
                              _TMR2_Initialize 0B5A                                            wreg 0009  
                                  main@batt_mv 00EB                 FLASH_WriteBlock@flashWordArray 0022  
                     __size_of_selectFrequency 002A                                           l1303 0BD5  
                                         l3000 0CA2                                           l3002 0CA3  
                                         l3004 0CAA                                           l3006 0CB1  
                                         l1342 0E24                                           l3008 0CB8  
                                         l3200 0CFB                                           l1336 0605  
                                         l4000 0D4F                                           l3202 0CFE  
                                         l1354 0EFE                                           l4002 0D59  
                                         l4010 0D0F                                           l4004 0D66  
                                         l4020 0CCE                                           l4012 0D18  
                                         l4100 00E2                                           l4006 0D6C  
                                         l4030 0D95                                           l4022 0CD4  
                                         l4014 0D1E                                           l4102 00E7  
                                         l4110 00FF                                           l4024 0D75  
                                         l4016 0CBB                                           l4032 0D27  
                                         l4008 0D02                                           l4040 03BD  
                                         l4200 0202                                           l4120 0116  
                                         l4112 0104                                           l4104 00EB  
                                         l3250 0F49                                           l4026 0D82  
                                         l4018 0CC5                                           l4034 0D31  
                                         l4050 045C                                           l4042 0443  
                                         l4210 0223                                           l4202 0205  
                                         l4130 0127                                           l4122 011A  
                                         l4114 0107                                           l4106 00EE  
                                         l3242 0C79                                           l3260 0F56  
                                         l3252 0F4B                                           l3244 0F41  
                                         l4028 0D8F                                           l4036 0D3E  
                                         l4044 0450                                           l4060 0731  
                                         l4052 06DE                                           l4300 0354  
                                         l4220 0241                                           l4212 0229  
                                         l4204 020A                                           l4140 014E  
                                         l4132 013C                                           l4124 011E  
                                         l4116 010D                                           l4108 00FC  
                                         l3190 0CEC                                           l3182 0CDD  
                                         l3270 0F65                                           l3262 0F5B  
                                         l3254 0F51                                           l3246 0F44  
                                         l4038 0D44                                           l4046 0455  
                                         l4070 0742                                           l4062 0732  
                                         l4054 070C                                           l4302 0367  
                                         l4230 026B                                           l4222 0254  
                                         l4214 0234                                           l4206 021D  
                                         l4142 0150                                           l4150 0168  
                                         l4126 0120                                           l4134 013F  
                                         l4118 0111                                           l4310 03A3  
                                         l3192 0CEF                                           l3184 0CE3  
                                         l3280 0F71                                           l3272 0F67  
                                         l3264 0F5D                                           l3256 0F53  
                                         l3248 0F48                                           l4072 0DC8  
                                         l4048 045A                                           l4064 0737  
                                         l4056 0719                                           l4312 03A9  
                                         l4232 0270                                           l4216 0239  
                                         l4160 017B                                           l4152 016D  
                                         l4144 0154                                           l4136 0145  
                                         l4128 0124                                           l4080 0089  
                                         l2730 0B33                                           l3194 0CF2  
                                         l3186 0CE6                                           l3282 0F76  
                                         l3274 0F69                                           l3266 0F5F  
                                         l3258 0F55                                           l4074 0DCD  
                                         l4066 073E                                           l4058 072C  
                                         l4314 03B6                                           l4250 02AA  
                                         l4242 0291                                           l4234 0273  
                                         l4226 025A                                           l4218 023C  
                                         l4170 0196                                           l4162 017F  
                                         l4154 0170                                           l4146 0157  
                                         l4138 014A                                           l4090 00AF  
                                         l4082 0090                                           l3196 0CF5  
                                         l3188 0CE9                                           l3284 0F7B  
                                         l3276 0F6A                                           l3268 0F62  
                                         l4076 0DD3                                           l3700 0ECE  
                                         l4068 0741                                           l4260 02CE  
                                         l4252 02AF                                           l4244 0297  
                                         l4236 0278                                           l4228 0260  
                                         l4180 01BB                                           l4172 019B  
                                         l4164 0185                                           l4148 0165  
                                         l4092 00B2                                           l4084 0095  
                                         l4308 036D                                           l2902 0B09  
                                         l2670 0B0F                                           l2910 0E2E  
                                         l3198 0CF8                                           l3278 0F6F  
                                         l4078 0DE6                                           l3702 0ED8  
                                         l3710 059B                                           l4270 02F9  
                                         l4262 02D9                                           l4254 02C2  
                                         l4246 02A2                                           l4238 028B  
                                         l4190 01E6                                           l4182 01C6  
                                         l4174 01AE                                           l4166 0190  
                                         l4158 0177                                           l4094 00C7  
                                         l4086 00A6                                           l3294 0002  
                                         l4350 0468                                           l3536 0B85  
                                         l2672 0B21                                           l2920 0E38  
                                         l2912 0E30                                           l2904 0E25  
                                         l2728 0B27                                           l3704 0EF6  
                                         l3720 05C6                                           l3712 05A3  
                                         l3800 062A                                           l4280 0315  
                                         l4264 02DE                                           l4248 02A7  
                                         l4184 01CB                                           l4176 01B1  
                                         l4168 0193                                           l4088 00AB  
                                         l4096 00CA                                           l4360 0477  
                                         l4352 046B                                           l2666 0B15  
                                         l2930 0E3F                                           l2922 0E39  
                                         l2914 0E33                                           l2906 0E29  
                                         l3722 05D1                                           l3714 05A8  
                                         l3810 0650                                           l3802 062D  
                                         l4290 0336                                           l4282 0318  
                                         l4274 02FF                                           l4266 02E1  
                                         l4258 02C8                                           l4194 01EC  
                                         l4186 01CE                                           l4178 01B5  
                                         l4098 00D0                                           l4370 049F  
                                         l4362 048C                                           l4354 046E  
                                         l4346 0462                                           l2668 0B1B  
                                         l2940 0B57                                           l2932 0E4E  
                                         l2924 0E3A                                           l2916 0E35  
                                         l2908 0E2C                                           l3716 05AC  
                                         l3732 05E2                                           l3708 058A  
                                         l3900 0744                                           l3740 0C5D  
                                         l3820 065F                                           l3812 0652  
                                         l3804 0631                                           l4452 037A  
                                         l4292 033C                                           l4284 031D  
                                         l4276 0305                                           l4268 02E6  
                                         l4196 01F2                                           l4188 01D3  
                                         l4380 04C3                                           l4372 04A2  
                                         l4364 049A                                           l4356 0471  
                                         l4348 0465                                           l2934 0B52  
                                         l2926 0E3C                                           l2918 0E36  
                                         l2950 0BDA                                           l2942 0AEF  
                                         l3830 0C03                                           l3734 05FB  
                                         l3718 05BE                                           l3726 05D7  
                                         l3910 0755                                           l3902 0746  
                                         l3750 0C68                                           l3742 0C61  
                                         l3822 0663                                           l3814 0657  
                                         l3806 063B                                           l4294 0347  
                                         l4286 0330                                           l4278 0310  
                                         l4198 01FD                                           l4390 04F3  
                                         l4382 04D0                                           l4374 04AD  
                                         l4366 049B                                           l4358 0474  
                                         l2944 0AF2                                           l2936 0B55  
                                         l2928 0E3E                                           l2784 0B2D  
                                         l2960 0C2C                                           l2952 0BDC  
                                         l3832 0C06                                           l3728 05DF  
                                         l3840 0BC4                                           l3920 0769  
                                         l3912 075A                                           l3904 074A  
                                         l3760 0C71                                           l3752 0C69  
                                         l3744 0C62                                           l3824 066B  
                                         l3816 0658                                           l3808 0649  
                                         l4296 034C                                           l4384 04D3  
                                         l4376 04BA                                           l4368 049C  
                                         l2938 0B56                                           l2970 0C3C  
                                         l2962 0C31                                           l2954 0BDE  
                                         l2946 0BD6                                           l3834 0C0B  
                                         l3690 0B68                                           l3770 0E12  
                                         l3842 0BC9                                           l3930 0789  
                                         l3922 076E                                           l3914 075E  
                                         l3906 074F                                           l3850 0E98  
                                         l3762 0C73                                           l3754 0C6E  
                                         l3746 0C65                                           l3818 0659  
                                         l4298 034F                                           l4386 04E8  
                                         l4378 04C0                                           l2980 0B6C  
                                         l2964 0C36                                           l2972 0B5A  
                                         l2956 0BE5                                           l2948 0BD9  
                                         l3836 0C0E                                           l3828 0BFE  
                                         l3860 04F8                                           l3692 0B3A  
                                         l3772 0E1C                                           l3764 0DF6  
                                         l3940 079F                                           l3932 078A  
                                         l3924 0772                                           l3916 0760  
                                         l3908 0751                                           l3852 0EA0  
                                         l3756 0C6F                                           l3748 0C67  
                                         l3780 060D                                           l4388 04EF  
                                         l2982 0B6F                                           l2958 0AF6  
                                         l2990 0BB9                                           l2966 0C38  
                                         l2974 0B5D                                           l3838 0C11  
                                         l3870 051E                                           l3862 04FA  
                                         l3694 0EBF                                           l3766 0DFA  
                                         l3934 078F                                           l3926 0776  
                                         l3918 0766                                           l3854 0EA7  
                                         l3846 0E8B                                           l3758 0C70  
                                         l3790 0626                                           l3782 0611  
                                         l3950 07A6                                           l2984 0B76  
                                         l2992 0BBA                                           l2968 0C3A  
                                         l2976 0B5E                                           l3880 0540  
                                         l3872 0526                                           l3864 04FE  
                                         l3688 0B63                                           l3696 0EC4  
                                         l3768 0DFE                                           l3928 0785  
                                         l3936 0795                                           l3856 0EB6  
                                         l3848 0E93                                           l3776 0B05  
                                         l3792 0627                                           l3960 07C3  
                                         l3952 07A8                                           l3944 07A4  
                                         l2994 0BBB                                           l2986 0BB2  
                                         l2978 0B5F                                           l3890 0569  
                                         l3882 0547                                           l3874 052E  
                                         l3866 050F                                           l3698 0EC9  
                                         l3938 079A                                           l3794 0628  
                                         l3786 061D                                           l3778 0606  
                                         l3970 07F4                                           l3962 07C7  
                                         l3954 07AC                                           l2996 0BBC  
                                         l2988 0BB7                                           l3884 0559  
                                         l3876 0531                                           l3892 056F  
                                         l3868 051A                                           l3972 0E58  
                                         l3980 0F92                                           l3788 0624  
                                         l3964 07DF                                           l3956 07B2  
                                         l2998 0C99                                           l3894 0574  
                                         l3886 0561                                           l3878 053C  
                                         l3974 0E71                                           l3990 0D9E  
                                         l3982 0F9F                                           l3966 07E3  
                                         l3958 07B3                                           l3896 057F  
                                         l3888 0562                                           l3992 0DA3  
                                         l3984 0FB2                                           l3968 07F0  
                                         l3994 0DAC                                           l3986 0FBF  
                                         l3978 0F85                                           l3996 0DBF  
                                         l3988 0FD2                                           l3998 0D4D  
                                         STR_1 0830                                           STR_2 086D  
                                         STR_3 0859                                           STR_4 0845  
                                         STR_5 0819                                           STR_6 0800  
                                         STR_7 0800                                           u3000 04D0  
                                         u3001 04CF                                           u3010 04EF  
                                         u3011 04EE                                           u2300 0E1C  
                                         u2301 0E1B                                           u3005 04CC  
                                         _LATA 010C                                           u2230 0B68  
                                         u2310 061B                                           _LATB 010D  
                              __end_of_INT_ISR 0AFF                                           u2231 0B67  
                                         u2311 061A                                           _LATC 010E  
                                         u2400 050F                                           u2240 0EC4  
                                         u2320 0650                                           u2401 050E  
                                         u2241 0EC3                                           u2321 064F  
                                         u2410 052E                                           u2250 0EC9  
                                         u2330 0669                                           u2411 052D  
                                         u2251 0EC8                                           u3107 0CC9  
                                         u2331 0668                                           u2315 0617  
                                         u3027 03AF                                           u2340 0C03  
                                         u2260 0ED8                                           u2500 0755  
                                         u2341 0C02                                           u2261 0ED7  
                                         u3117 0D88                                           u3037 0F98  
                                         u2501 0754                                           u2430 0540  
                                         u2270 0EF6                                           u2510 0766  
                                         u2350 0E98                                           u2431 053F  
                                         u2271 0EF5                                           u3127 0D5F  
                                         u3047 0FAB                                           u2511 0765  
                                         u2351 0E97                                           u2600 0E65  
                                         u2280 059B                                           u3137 0DD9  
                                         u2425 0532                                           u2601 0E64  
                                         u2281 059A                                           u3057 0FC5  
                                         u2450 0559                                           u2610 0E70  
                                         u2290 05BE                                           u2530 0776  
                                         u3147 0DEC                                           u2451 0558  
                                         u2611 0E6F                                           u2275 0EF2  
                                         u2291 05BD                                           u3067 0FD8  
                                         u2531 0775                                           u2380 0EB6  
                                         u2620 0429                                           u2700 00D0  
                                         u2445 0541                                           u3077 0D13  
                                         u2525 076A                                           u2381 0EB5  
                                         u2365 0EA1                                           u2701 00CF  
                                         u2470 056F                                           u2390 04FE  
                                         u2550 0785                                           u2630 0450  
                                         u2710 00E2                                           u2471 056E  
                                         u2455 0555                                           u2391 04FD  
                                         u3087 0D37                                           u2551 0784  
                                         u2375 0EA8                                           u2631 044F  
                                         u2711 00E1                                           u2480 0574  
                                         u2640 045A                                           u2800 0185  
                                         u2720 0104                                           u2481 0573  
                                         u2465 0563                                           u3097 0DB2  
                                         u2545 0777                                           u2641 0459  
                                         u2625 0425                                           u2801 0184  
                                         u2721 0103                                           u2570 0795  
                                         u2490 074A                                           u2650 0719  
                                         u2810 019B                                           u2730 010D  
                                         u2571 0794                                           u2555 0781  
                                         u2491 0749                                           u2635 044C  
                                         u2651 0718                                           u2811 019A  
                                         u2731 010C                                           u2715 00DE  
                                         u2580 079A                                           u2660 072C  
                                         u2900 0297                                           u2820 01BB  
                                         u2740 0116                                           u2581 0799  
                                         u2565 078B                                           u2661 072B  
                                         u2901 0296                                           u2821 01BA  
                                         u2741 0115                                           u2670 073E  
                                         u2590 07B2                                           u2910 02AF  
                                         u2830 01D3                                           u2750 011E  
                                         u2671 073D                                           u2655 0715  
                                         u2591 07B1                                           u2911 02AE  
                                         u2831 01D2                                           u2751 011D  
                                         u2920 02CE                                           u2840 01F2  
                                         u2760 0145                                           u2680 0095  
                                         u2665 0728                                           u2921 02CD  
                                         u2841 01F1                                           u2761 0144  
                                         u2681 0094                                           i1l10 0B03  
                                         u2930 02E6                                           u2850 020A  
                                         u2770 014E                                           u2690 00A6  
                                         u2931 02E5                                           u2851 0209  
                                         u2771 014D                                           u2691 00A5  
                                         u2940 0305                                           u2860 0229  
                                         u2780 016D                                           u2941 0304  
                                         u2861 0228                                           u2781 016C  
                                         u2950 031D                                           u2870 0241  
                                         u2790 0176                                           u2951 031C  
                                         u2871 0240                                           u2791 0175  
                                         u2695 00A2                                           u2960 033C  
                                         u2880 0260                                           u2961 033B  
                                         u2881 025F                                           u2970 0354  
                                         u2890 0278                                           u2971 0353  
                                         u2891 0277                                           u2990 04BA  
                                         u2991 04B9                                           u2995 04B6  
                                         _TMR0 0015                                           _TMR1 0016  
                                         _TMR2 001A                                           _TMR4 0415  
                      __end_of_OPA2_Initialize 0AFA                                           _WPUA 020C  
                                         _WPUB 020D                                           _WPUC 020E  
                                         _dbuf 0120                                           _main 0462  
                                         _prec 00A4                                           _nout 00A0  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E                              ?_FLASH_WriteBlock 0020  
          __end_of_INT_DefaultInterruptHandler 06DE                    _INT_DefaultInterruptHandler 0672  
                                         start 004B                __end_of_INT_SetInterruptHandler 0B27  
                           ??_FLASH_WriteBlock 0023                     ??_TMR1_SetInterruptHandler 0075  
                   ??_TMR4_SetInterruptHandler 0075                        __end_of_TMR0_Initialize 0BC4  
               ??_TMR0_DefaultInterruptHandler 0070                                  ?_EUSART_Write 0070  
               __size_of_OSCILLATOR_Initialize 0008                  __end_of_OSCILLATOR_Initialize 0B5A  
                              __end_of___aldiv 0588                                          ?_main 0070  
                              __end_of___awdiv 07A4                                          _ADRES 009B  
                              ___awdiv@divisor 0073                                          _T2CON 001C  
                                        _T4CON 0417                                          i1l114 0AEC  
                                        i1l152 003B                                          i1l144 0012  
                                        i1l146 001E                                          i1l147 0049  
                                        i1l155 0049                                          i1l148 002A  
                                        i1l421 0BA0                                          i1l264 0AFE  
                                        i1l520 0B51                                          i1l440 0F40  
                                        i1l514 0C2B                                          i1l268 0B84  
                                        i1l365 0AED                                          i1l437 0F2D  
                                        i1l278 06DC                                          i1l359 0BB1  
                                        i1l289 06DD                                   ?_setLEDColor 0073  
                              ___awdiv@counter 0020                                   vfpfcnvrt@fmt 0025  
                     __size_of_selectSomething 005B                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        _RXPPS 0E24              __size_of_TMR0_SetInterruptHandler 0006  
                              _TMR4_Initialize 0BD6                            ___lmul@multiplicand 0024  
                    ?_TMR0_SetInterruptHandler 0073                               __end_of_TMR0_ISR 0BB2  
                             __end_of_TMR1_ISR 0C2C                               __end_of_TMR4_ISR 0BA1  
                              __end_of_initLED 0F85                        __end_of_PIN_MANAGER_IOC 0AED  
                                        _flags 00A6                                 _WDT_Initialize 0AEF  
                                        _fputc 0EBF                            _readPersistentState 0C79  
                                        _width 00A2                                          _putch 0B39  
                                        _stats 01A0                        __end_of_TMR1_Initialize 0C44  
                                        pclath 000A                                __end_of_startUp 0004  
                                        status 0003                        ?_process_remote_command 0070  
                                        wtemp0 007E                               ??_DAC_Initialize 0073  
                              __initialization 004D                                   __end_of_main 04F8  
                         ?_readPersistentState 0070                          __end_of_selectCurrent 0D75  
                               ??_EUSART_Write 0073                        __end_of_TMR2_Initialize 0B62  
                  ?_INTERRUPT_InterruptManager 0070                               ?_OPA1_Initialize 0070  
                       ??_selectFrequencyValue 0039                                         ??_main 00E8  
                     __size_of_battery_voltage 0033                  __size_of_writePersistentState 005C  
                     ?_TMR4_LoadPeriodRegister 0070                         __end_of_WDT_Initialize 0AF2  
                                    ??_INT_ISR 0073              _EUSART_DefaultFramingErrorHandler 0000  
                                       _ADCON0 009D                                         _ADCON1 009E  
                   _EUSART_OverrunErrorHandler 00DC                      FLASH_WriteBlock@writeAddr 0020  
                                       ?_fputc 0075                                         _CCPR1L 0291  
                             ___awdiv@dividend 0075                                         _ANSELA 018C  
                                       ?_putch 0070                                         _ANSELB 018D  
                                       _ANSELC 018E                                         _BORCON 0116  
                                       _RC1REG 0199                                         _RA5PPS 0E95  
                                       _RC1STA 019D                                         _RC4PPS 0EA4  
                                       i1l3010 0B78                                         _RB7PPS 0E9F  
                                       _RC5PPS 0EA5                                         i1l3012 0B7F  
                                       i1l3020 0F0F                                         i1l3030 0F26  
                                       i1l3022 0F10                                         i1l3014 0EFF  
                                       i1l3040 0F3A                                         i1l3032 0F28  
                                       i1l3024 0F15                                         i1l3016 0F04  
                                       _ODCONA 028C                                         i1l3210 0BAC  
                                       i1l3050 0B4B                                         i1l3042 0F3C  
                                       i1l3034 0F30                                         i1l3026 0F1B  
                                       i1l3018 0F09                                         _ODCONB 028D  
                                       _ODCONC 028E                                         i1l3212 0AFA  
                                       i1l3204 0BA1                                         i1l3052 0B4D  
                                       i1l3044 0F3D                                         i1l3028 0F22  
                                       i1l3036 0F34                                         i1l3220 0B9B  
                                       i1l3214 0AFB                                         i1l3206 0BA2  
                                       i1l3222 0C14                                         i1l3046 0F3E  
                                       i1l3038 0F39                                         u121_20 067C  
                                       i1l3208 0BA5                                         i1l3224 0C16  
                                       i1l3048 0F3F                                         i1l3216 0B92  
                                       u121_21 067B                                         i1l3226 0C1F  
                                       i1l3218 0B94                 __end_of_process_remote_command 03BD  
                                       i1l2700 06A3                                         i1l3228 0C26  
                                       i1l2710 06B7                                         i1l2702 06A8  
                                       u130_20 06C3                                         i1l2712 06BD  
                                       i1l2704 06AE                                         u122_20 0685  
                                       i1l2720 06C8                                         u210_20 0016  
                                       u130_21 06C2                                         u122_21 0684  
                                       u210_21 0015                                         i1l2714 06C3  
                                       i1l2708 06B5                                         i1l3540 000A  
                                       i1l3550 0026                                         i1l3542 000E  
                                       u123_20 068B                                         i1l2680 067C  
                                       i1l2664 0B00                                         i1l3560 0045  
                                       i1l3552 002E                                         u211_20 001A  
                                       i1l3544 0016                                         u123_21 068A  
                                       u211_21 0019                                         i1l2690 068C  
                                       i1l2682 067D                                         i1l2674 0672  
                                       i1l3554 0033                                         i1l3546 001A  
                                       i1l3538 0006                                         i1l2692 068F  
                                       i1l2684 067F                                         i1l2676 0677  
                                       i1l3556 0038                                         i1l3548 0022  
                                       i1l4454 06D1                                         i1l2694 0696  
                                       i1l2686 0685                                         i1l2678 0678  
                                       i1l3558 0040                                         i1l2696 069C  
                                       i1l2688 068B                                         u212_20 0022  
                                       u212_21 0021                                         i1l2698 06A2  
                                       u124_25 0690                                         u125_20 069C  
                                       u213_20 0026                                         u125_21 069B  
                                       u213_21 0025                                         u126_20 06A2  
                                       u214_20 002E                                         u126_21 06A1  
                                       u214_21 002D                                         u127_20 06AE  
                                       u215_20 0033                                         u127_21 06AD  
                                       u215_21 0032                                         u128_20 06B4  
                                       u160_20 0F04                                         u216_20 0038  
                                       u208_20 000A                                         u128_21 06B3  
                                       u160_21 0F03                                         u216_21 0037  
                                       u208_21 0009                                         _INLVLA 038C  
                                       _INLVLB 038D                                         _INLVLC 038E  
                                       u129_20 06BD                                         u161_20 0F0F  
                                       u217_20 0040                                         u209_20 000E  
                                       u129_21 06BC                                         u161_21 0F0E  
                                       u217_21 003F                                         u209_21 000D  
                                       u162_20 0F1B                                         u218_20 0045  
                                       u162_21 0F1A                                         u218_21 0044  
                                       u163_20 0F22                                         _FVRCON 0117  
                                       u163_21 0F21                                         u173_20 0BAC  
                                       u173_21 0BAB                                         u174_20 0B9B  
                                       u174_21 0B9A                                         u159_20 0B7F  
                                       u175_20 0C26                                         u159_21 0B7E  
                                       u175_21 0C25                                         _INTPPS 0E10  
                                       _PMADRH 0192                                         _PMADRL 0191  
                             ?_OPA2_Initialize 0070                                         _PMDATH 0194  
                                       _PMDATL 0193                                         _PMCON2 0196  
                    __size_of_FLASH_EraseBlock 001C                                         _OSCCON 0099  
                                       _TX1REG 019A                                         _WDTCON 0097  
                                       _TX1STA 019E                               _LATCH_Initialize 0B85  
                            ??_selectFrequency 0039                                 _selectDecrease 0CBB  
                                       _Vdd_mv 00A8           __end_of_TMR1_DefaultInterruptHandler 0B52  
        __size_of_TMR1_DefaultInterruptHandler 0007                   _TMR1_DefaultInterruptHandler 0B4B  
                                 vfprintf@cfmt 0033                          ??_readPersistentState 0073  
                                       ___lmul 0E8B                                      ??___aldiv 0030  
                                    ??___awdiv 0077                               ?_TMR0_Initialize 0070  
                      __end_of_TMR4_Initialize 0BE9                               ___awdiv@quotient 0022  
                               _selectIncrease 0D02                                         _printf 0BC4  
                                ?_INT_CallBack 0070                                      ??_initLED 0073  
         __end_of_TMR4_DefaultInterruptHandler 0F41          __size_of_TMR4_DefaultInterruptHandler 0042  
                 _TMR4_DefaultInterruptHandler 0EFF                                         fputc@c 0075  
                                 __pdataCOMMON 007A                               setCurrent@Vdd_mv 003B  
                              ?_WDT_Initialize 0070                     __end_of_selectCurrentValue 0D9E  
             __size_of_INT_SetInterruptHandler 0006                               __end_of_vfprintf 0E25  
                                    ??_startUp 0073       TMR1_SetInterruptHandler@InterruptHandler 0073  
     TMR4_SetInterruptHandler@InterruptHandler 0073       TMR0_SetInterruptHandler@InterruptHandler 0073  
      INT_SetInterruptHandler@InterruptHandler 0073                               ?_PIN_MANAGER_IOC 0070  
                            ??_selectSomething 0020                               ?_TMR1_Initialize 0070  
                            _SYSTEM_Initialize 0CDD                        __end_of__initialization 0083  
                       __end_of_selectDecrease 0CDD                             ?_SYSTEM_Initialize 0070  
                       DAC_SetOutput@inputData 0070                              _dc_frequency_flag 007A  
                               __pcstackCOMMON 0070                                   __pidataBANK1 0C44  
                                 __pidataBANK2 0BE9                            ??_SYSTEM_Initialize 0076  
                                    ?_TMR0_ISR 0070                                      ?_TMR1_ISR 0070  
                ?_TMR1_DefaultInterruptHandler 0070                                      ?_TMR4_ISR 0070  
                       __end_of_selectIncrease 0D27                                  __end_of_fputc 0EFF  
                                __end_of_putch 0B3F                               ?_TMR2_Initialize 0070  
              __end_of_TMR4_LoadPeriodRegister 0B09                          main@low_reading_count 00E9  
                               ??_INT_CallBack 0073                    __size_of_EXT_INT_Initialize 000C  
                               _OPTION_REGbits 0095                  ?_TMR4_DefaultInterruptHandler 0070  
                       __size_of_DAC_SetOutput 0005                           __size_of_setLEDColor 0017  
                  FLASH_WriteBlock@GIEBitValue 0028                ??_EUSART_SetOverrunErrorHandler 0075  
                            ??_battery_voltage 0078                                        ??_fputc 0020  
                    __end_of_SYSTEM_Initialize 0D02                                        ??_putch 0074  
                                ?_setFrequency 0037                                     __pbssBANK1 00A0  
                                   __pbssBANK2 0120                                     __pbssBANK3 01A0  
                         __end_of_EUSART_Write 0B6C                                ?_selectDecrease 0070  
                        _TMR4_InterruptHandler 00D4                                     __pmaintext 0462  
             __end_of_TMR0_SetInterruptHandler 0B2D                                        ?___lmul 0020  
                                   ??_TMR0_ISR 0070                                     ??_TMR1_ISR 0071  
                                   ??_TMR4_ISR 0072                                     __pintentry 0004  
                              ?_selectIncrease 0070                                 ___lmul@product 0073  
                             ?_TMR4_Initialize 0070                                        ?_printf 0035  
                    __size_of_FLASH_WriteBlock 006C                                        _OPA1CON 0511  
                                      _OPA2CON 0515                                        _LED_red 00AE  
                                      _SP1BRGH 019C                                        _SP1BRGL 019B  
                                      _INT_ISR 0AFA                             __size_of_vfpfcnvrt 007E  
                            _maxFrequencyIndex 00B9                                        _OSCSTAT 009A  
                                      _OSCTUNE 0098                                        _PWM3DCH 0618  
                                      _PWM4DCH 061B                                        _SLRCONA 030C  
                                      _SLRCONB 030D                                        _SLRCONC 030E  
                     ??_EUSART_SetErrorHandler 0075                                 ??_setFrequency 0039  
                              _maxCurrentIndex 00BB                               _FLASH_EraseBlock 0C5D  
                                _DAC_SetOutput 0AFF                                        ___aldiv 04F8  
                                      ___awdiv 0744                                __size_of___lmul 0034  
                                    ?_vfprintf 002D                                        __ptext1 0002  
                                      __ptext2 0C79                                        __ptext3 0087  
                                      __ptext4 07A4                                        __ptext5 0606  
                                      __ptext6 0C5D                                        __ptext7 06DE  
                                      __ptext8 0B04                                        __ptext9 03BD  
                              __size_of_printf 0012                 ??_TMR1_DefaultInterruptHandler 0071  
                     __end_of_LATCH_Initialize 0B92                                        _initLED 0F41  
                                    _T1CONbits 0018                                        _ir_code 00B3  
                                   _lowBattery 0DC8                          _OSCILLATOR_Initialize 0B52  
                                    _T2CONbits 001C              __size_of_TMR1_SetInterruptHandler 0006  
                             ___aldiv@dividend 002C                                      _T4CONbits 0417  
                     ??_PIN_MANAGER_Initialize 0073              __size_of_TMR4_SetInterruptHandler 0006  
                    ?_TMR1_SetInterruptHandler 0073                        _INT_SetInterruptHandler 0B21  
                    ?_TMR4_SetInterruptHandler 0073                                _selectFrequency 0D9E  
                                      _startUp 0002                     __size_of_SYSTEM_Initialize 0025  
                                      clrloop0 0B40                           end_of_initialization 0083  
               ??_TMR4_DefaultInterruptHandler 0071                                     _setCurrent 03BD  
        __end_of_EUSART_SetOverrunErrorHandler 0B21         __size_of_EUSART_SetOverrunErrorHandler 0006  
                _EUSART_SetOverrunErrorHandler 0B1B                   __end_of_writePersistentState 0800  
                                    _LED_green 00AD                                        fputc@fp 0077  
                                      init_ram 0B45                                        initloop 0B46  
                         __end_of_INT_CallBack 0B85               __size_of_TMR4_LoadPeriodRegister 0005  
                            _EUSART_Initialize 0C99                                 _frequencyIndex 00E1  
                            setCurrent@Vdac_mv 0045                                 ?_DAC_SetOutput 0070  
                               _frequencyValue 0140                  __end_ofmain@BATTERY_THRESHOLD 0882  
                           ?_EUSART_Initialize 0070                              __end_of_vfpfcnvrt 0606  
                             ___aldiv@quotient 0033                                     ??_vfprintf 0030  
                              setLEDColor@blue 0074                            ??_EUSART_Initialize 0075  
                             ??_WDT_Initialize 0073                       _TMR0_SetInterruptHandler 0B27  
                              _selectSomething 0F85                        writePersistentState@buf 002E  
                      writePersistentState@idx 006F                  __size_of_selectFrequencyValue 0026  
                                    _TRISAbits 008C                                      _TRISBbits 008D  
                                    _TRISCbits 008E                          __size_of_EUSART_Write 000A  
                     __size_of_OPA1_Initialize 0004                __size_of_EUSART_SetErrorHandler 0006  
                       __size_of_selectCurrent 0028                      __end_of_EUSART_Initialize 0CBB  
                                  _CCP1CONbits 0293                    __end_of_readPersistentState 0C99  
                           _selectCurrentValue 0D75                              FLASH_WriteBlock@i 0029  
                     __size_of_OPA2_Initialize 0004                            ?_selectCurrentValue 0070  
                         __end_of_setFrequency 0744                                 __end_of___lmul 0EBF  
                   _EUSART_DefaultErrorHandler 0000                                    vfpfcnvrt@ap 0026  
                                  vfpfcnvrt@fp 002C                                _battery_voltage 0E58  
                                __pidataCOMMON 0AEE                                   _EUSART_Write 0B62  
                            __size_of_TMR0_ISR 0011                              __size_of_TMR1_ISR 0018  
                            __size_of_TMR4_ISR 000F                               _FLASH_WriteBlock 0606  
                       ?_OSCILLATOR_Initialize 0070                        __end_of_selectFrequency 0DC8  
                    ??_INT_SetInterruptHandler 0075                        __size_of_DAC_Initialize 0006  
                                  ?_lowBattery 0070                                 __end_of_printf 0BD6  
                 __p_HEF_persistent_state_text 0FE0                            start_initialization 004D  
                     __size_of_TMR0_Initialize 0012                __size_of_PIN_MANAGER_Initialize 0033  
                             ??_selectDecrease 0039                           ??_selectCurrentValue 0039  
                                  putch@txData 0074                                    ?_setCurrent 0039  
                              ??_DAC_SetOutput 0070                       __size_of_PIN_MANAGER_IOC 0001  
                 ?_INT_DefaultInterruptHandler 0070                               ??_selectIncrease 0039  
               ?_EUSART_SetOverrunErrorHandler 0073                       __size_of_TMR1_Initialize 0018  
                                  vfprintf@fmt 002D                     _EUSART_FramingErrorHandler 00DE  
                      __end_of_selectSomething 0FE0                                       ??___lmul 0073  
                       _EUSART_SetErrorHandler 0B0F                                    _CCPTMRSbits 029E  
                                _selectCurrent 0D4D                                    __pdataBANK1 00B9  
                                  __pdataBANK2 0140                    FLASH_EraseBlock@GIEBitValue 0075  
                   __end_of_EXT_INT_Initialize 0B78                       __end_of_FLASH_EraseBlock 0C79  
                                     ??_printf 0037                           _writePersistentState 07A4  
                                ??_setLEDColor 0075                          writePersistentState@i 006E  
                                  __pbssCOMMON 0078                                      ___latbits 0001  
                     ??_process_remote_command 00E5                                       ?_INT_ISR 0070  
                                __pcstackBANK0 0020                                  __pcstackBANK1 00E5  
                     __size_of_TMR2_Initialize 0008                          __size_of_INT_CallBack 000D  
                                    _dac_value 00B1                        _TMR4_LoadPeriodRegister 0B04  
                   __size_of_EUSART_Initialize 0022                                   _currentIndex 00E3  
                            ??_OPA1_Initialize 0073                                   _currentValue 00BE  
                        _TMR0_InterruptHandler 00D6                                      __pnvBANK1 00D2  
                                 _oneHzCounter 00B0                            __size_of_lowBattery 002C  
                       _PIN_MANAGER_Initialize 0E25                        __end_of_battery_voltage 0E8B  
                ??_INT_DefaultInterruptHandler 0070               __end_of_TMR1_SetInterruptHandler 0B33  
                                     ?___aldiv 0028               __end_of_TMR4_SetInterruptHandler 0B39  
                               ?_selectCurrent 0070                                       ?___awdiv 0073  
                                     _DAC1CON0 0118                                       _DAC1CON1 0119  
                 ??_INTERRUPT_InterruptManager 0073                            __size_of_setCurrent 00A5  
                        ?_writePersistentState 0070                              ??_OPA2_Initialize 0073  
                            __size_of_vfprintf 0031                               ?_selectFrequency 0070  
                                 _INT_CallBack 0B78                                       _BAUD1CON 019F  
                                     ?_initLED 0070                              ?_LATCH_Initialize 0070  
                           ??_LATCH_Initialize 0073                       __size_of_TMR4_Initialize 0013  
                                     ?_startUp 0070                            __end_of_setLEDColor 0C14  
                               __size_of_fputc 0040                                      _microamps 00AA  
                               __size_of_putch 0006                 FLASH_WriteBlock@blockStartAddr 0026  
         __end_ofmain@BATTERY_NUM_LOW_READINGS 0884                   main@BATTERY_NUM_LOW_READINGS 0882  
                              ___aldiv@divisor 0028                              ??_TMR0_Initialize 0075  
                              ___aldiv@counter 0031                                       _LATAbits 010C  
       EUSART_SetErrorHandler@interruptHandler 0073                                       _LATBbits 010D  
                                     _LATCbits 010E                                       _LED_blue 00AC  
                                    clear_ram0 0B3F                                       _PIE1bits 0091  
                                     _PIE2bits 0092                              _eusartRxLastError 00B2  
                 _HEF_persistent_state_absaddr 0FE0                          __size_of_setFrequency 0066  
          __size_of_INTERRUPT_InterruptManager 0047                     ??_TMR0_SetInterruptHandler 0075  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 0075  
                                     _PIR2bits 0012                      FLASH_EraseBlock@startAddr 0073  
                             ?_selectSomething 0070                                 setLEDColor@red 0076  
                                     _TMR0_ISR 0BA1              _EUSART_DefaultOverrunErrorHandler 0000  
                                     _TMR1_ISR 0C14                                       _TMR4_ISR 0B92  
                            ??_PIN_MANAGER_IOC 0070                                      _vfpfcnvrt 0588  
                            ??_TMR1_Initialize 0075                                     _ADCON0bits 009D  
                               _DAC_Initialize 0B09           __size_of_INT_DefaultInterruptHandler 006C  
              __size_of_process_remote_command 0336                               __size_of_INT_ISR 0005  
                    ??_TMR4_LoadPeriodRegister 0073                              ___lmul@multiplier 0020  
                                  _latchTester 00AF                                   _setFrequency 06DE  
                            ??_TMR2_Initialize 0073                   __end_of_HEF_persistent_state 1000  
                     __end_of_FLASH_WriteBlock 0672                   __end_of_selectFrequencyValue 0D4D  
                              ??_selectCurrent 0039                               ?_battery_voltage 0037  
                                   vfprintf@ap 002F                                     vfprintf@fp 0032  
                        main@BATTERY_THRESHOLD 0880                        ??_OSCILLATOR_Initialize 0073  
                          _EUSART_ErrorHandler 00DA                               __size_of___aldiv 0090  
                             __size_of___awdiv 0060                         ??_writePersistentState 002A  
                       __end_of_DAC_Initialize 0B0F                                     ?_vfpfcnvrt 0025  
                          setFrequency@PR4_val 003A                       _TMR1_SetInterruptHandler 0B2D  
                     _TMR4_SetInterruptHandler 0B33                                   ??_lowBattery 0020  
                        _TMR1_InterruptHandler 00D2                                    _currentIsOn 00BD  
                                  _setLEDColor 0BFD                             setCurrent@DACValue 0047  
                             __size_of_initLED 0044                                       __ptext10 0E8B  
                                     __ptext11 0744                                       __ptext20 0DF4  
                                     __ptext12 0F85                                       __ptext21 0588  
                                     __ptext13 0D02                                       __ptext30 0CDD  
                                     __ptext22 0EBF                                       __ptext14 0D27  
                                     __ptext31 0AEF                                       __ptext23 0B39  
                                     __ptext15 0D9E                                       __ptext40 0B52  
                                     __ptext32 0BD6                                       __ptext24 0B62  
                                     __ptext16 0CBB                                       __ptext41 0AF6  
                                     __ptext33 0B33                                       __ptext25 0E58  
                                     __ptext17 0D75                                       __ptext50 0B85  
                                     __ptext42 0AF2                                       __ptext34 0B5A  
                                     __ptext26 04F8                                       __ptext18 0D4D  
                                     __ptext43 0B6C                                       __ptext35 0C2C  
                                     __ptext27 0DC8                                       __ptext19 0BC4  
                                     __ptext60 0AFA                                       __ptext52 0B92  
                                     __ptext44 0B21                                       __ptext36 0B2D  
                                     __ptext28 0BFD                                       __ptext61 0B78  
                                     __ptext53 0EFF                                       __ptext45 0C99  
                                     __ptext37 0BB2                                       __ptext29 0F41  
                                     __ptext62 0672                                       __ptext54 0C14  
                                     __ptext46 0B1B                                       __ptext38 0B27  
                                     __ptext55 0B4B                                       __ptext47 0B15  
                                     __ptext39 0E25                                       __ptext56 0AFF  
                                     __ptext48 0B0F                                       __ptext57 0BA1  
                                     __ptext49 0B09                                       __ptext58 0AED  
                                     __ptext59 0AEC                               __size_of_startUp 0002  
                                 ??_setCurrent 003D                                 _interfaceState 0078  
                            ??_TMR4_Initialize 0075                                  __size_of_main 0096  
         __end_of_TMR0_DefaultInterruptHandler 0AEE          __size_of_TMR0_DefaultInterruptHandler 0001  
                 _TMR0_DefaultInterruptHandler 0AED                        ?_EUSART_SetErrorHandler 0073  
                       _process_remote_command 0087                                     _RC1STAbits 019D  
                           __end_of_lowBattery 0DF4  EUSART_SetOverrunErrorHandler@interruptHandler 0073  
                                     int$flags 007E                   __size_of_readPersistentState 0020  
                                     _vfprintf 0DF4             __end_of_INTERRUPT_InterruptManager 004B  
                   _INTERRUPT_InterruptManager 0004                                      printf@fmt 0035  
        __end_of_EUSART_SetFramingErrorHandler 0B1B         __size_of_EUSART_SetFramingErrorHandler 0006  
                _EUSART_SetFramingErrorHandler 0B15                                ?_DAC_Initialize 0070  
                            ?_FLASH_EraseBlock 0073                             __end_of_setCurrent 0462  
                           ??_FLASH_EraseBlock 0075                                     _INTCONbits 000B  
              INT_DefaultInterruptHandler@time 0072                                    _PWM3DCLbits 0617  
                              _OPA1_Initialize 0AF2                                    _PWM4DCLbits 061A  
                                   _FVRCONbits 0117                           _INT_InterruptHandler 00D8  
                                  _PWM3CONbits 0619                                    _PWM4CONbits 061C  
                           _EXT_INT_Initialize 0B6C                        __size_of_WDT_Initialize 0003  
                  __size_of_selectCurrentValue 0029                                       intlevel1 0000  
                                   _PMCON1bits 0195                        ?_PIN_MANAGER_Initialize 0070  
                   process_remote_command@code 00E7                 __end_of_EUSART_SetErrorHandler 0B15  
                          ?_EXT_INT_Initialize 0070                          __end_of_DAC_SetOutput 0B04  
                              _OPA2_Initialize 0AF6                  ?_TMR0_DefaultInterruptHandler 0070  
                                     printf@ap 0038  EUSART_SetFramingErrorHandler@interruptHandler 0073  
                     ?_INT_SetInterruptHandler 0073                                    ??_vfpfcnvrt 0027  
                                __pstringtext1 0880                                  __pstringtext2 0882  
                                __pstringtext3 0800                                  __pstringtext4 0819  
                                __pstringtext5 0830                                  __pstringtext6 0845  
                                __pstringtext7 0859                                  __pstringtext8 086D  
                                __pstringtext9 0000                           ??_EXT_INT_Initialize 0075  
                                   _OPTION_REG 0095                           _HEF_persistent_state 0FE0  
                             setLEDColor@green 0073                           _selectFrequencyValue 0D27  
                              _TMR0_Initialize 0BB2                            setCurrent@microamps 0039  
                                 ___aldiv@sign 0032                                     _TX1STAbits 019E  
                     setFrequency@frequency_hz 0037                             EUSART_Write@txData 0073  
               __end_of_PIN_MANAGER_Initialize 0E58                                _PIN_MANAGER_IOC 0AEC  
                    __size_of_LATCH_Initialize 000D                                _TMR1_Initialize 0C2C  
                      __size_of_selectDecrease 0022               TMR4_LoadPeriodRegister@periodVal 0073  
